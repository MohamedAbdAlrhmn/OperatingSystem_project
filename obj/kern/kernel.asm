
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 00 19 00 	lgdtl  0x190018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc ff 18 f0       	mov    $0xf018ffbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 b8 84 6e f0 01 	movl   $0x1,0xf06e84b8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 8c 84 6e f0 01 	movl   $0x1,0xf06e848c
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 1c 86 6e f0       	mov    $0xf06e861c,%edx
f010006a:	b8 cc 84 65 f0       	mov    $0xf06584cc,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 cc 84 65 f0       	push   $0xf06584cc
f010007e:	e8 8a 05 03 00       	call   f013060d <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 ee 0a 00 00       	call   f0100b79 <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 9d 00 00 00       	call   f010012d <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 f5 5f 00 00       	call   f010608a <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 8e 5b 00 00       	call   f0105c28 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 3c 63 00 00       	call   f01063db <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 65 d1 00 00       	call   f010d209 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000ae:	83 ec 0c             	sub    $0xc,%esp
f01000b1:	6a 64                	push   $0x64
f01000b3:	e8 62 6e 00 00       	call   f0106f1a <create_shares_array>
f01000b8:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000bb:	83 ec 0c             	sub    $0xc,%esp
f01000be:	6a 64                	push   $0x64
f01000c0:	e8 d7 d2 00 00       	call   f010d39c <create_semaphores_array>
f01000c5:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f01000c8:	e8 f0 90 00 00       	call   f01091bd <env_init>
	idt_init();
f01000cd:	e8 a1 a6 00 00       	call   f010a773 <idt_init>

	enableBuffering(0);
f01000d2:	83 ec 0c             	sub    $0xc,%esp
f01000d5:	6a 00                	push   $0x0
f01000d7:	e8 3a d2 00 00       	call   f010d316 <enableBuffering>
f01000dc:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f01000df:	83 ec 0c             	sub    $0xc,%esp
f01000e2:	6a 00                	push   $0x0
f01000e4:	e8 15 d2 00 00       	call   f010d2fe <enableModifiedBuffer>
f01000e9:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000ec:	83 ec 0c             	sub    $0xc,%esp
f01000ef:	68 e8 03 00 00       	push   $0x3e8
f01000f4:	e8 35 d2 00 00       	call   f010d32e <setModifiedBufferLength>
f01000f9:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000fc:	e8 a1 59 00 00       	call   f0105aa2 <pic_init>
	sched_init() ;
f0100101:	e8 45 46 00 00       	call   f010474b <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100106:	83 ec 0c             	sub    $0xc,%esp
f0100109:	68 80 26 13 f0       	push   $0xf0132680
f010010e:	e8 1a 0b 00 00       	call   f0100c2d <cprintf>
f0100113:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100116:	83 ec 0c             	sub    $0xc,%esp
f0100119:	68 ac 26 13 f0       	push   $0xf01326ac
f010011e:	e8 0a 0b 00 00       	call   f0100c2d <cprintf>
f0100123:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100126:	e8 28 0b 00 00       	call   f0100c53 <run_command_prompt>
	}
f010012b:	eb d9                	jmp    f0100106 <FOS_initialize+0xa7>

f010012d <print_welcome_message>:
}


void print_welcome_message()
{
f010012d:	55                   	push   %ebp
f010012e:	89 e5                	mov    %esp,%ebp
f0100130:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 d1 26 13 f0       	push   $0xf01326d1
f010013b:	e8 ed 0a 00 00       	call   f0100c2d <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 d8 26 13 f0       	push   $0xf01326d8
f010014b:	e8 dd 0a 00 00       	call   f0100c2d <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 20 27 13 f0       	push   $0xf0132720
f010015b:	e8 cd 0a 00 00       	call   f0100c2d <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 68 27 13 f0       	push   $0xf0132768
f010016b:	e8 bd 0a 00 00       	call   f0100c2d <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100173:	83 ec 0c             	sub    $0xc,%esp
f0100176:	68 20 27 13 f0       	push   $0xf0132720
f010017b:	e8 ad 0a 00 00       	call   f0100c2d <cprintf>
f0100180:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100183:	83 ec 0c             	sub    $0xc,%esp
f0100186:	68 d8 26 13 f0       	push   $0xf01326d8
f010018b:	e8 9d 0a 00 00       	call   f0100c2d <cprintf>
f0100190:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100193:	83 ec 0c             	sub    $0xc,%esp
f0100196:	68 ad 27 13 f0       	push   $0xf01327ad
f010019b:	e8 8d 0a 00 00       	call   f0100c2d <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
}
f01001a3:	90                   	nop
f01001a4:	c9                   	leave  
f01001a5:	c3                   	ret    

f01001a6 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001a6:	55                   	push   %ebp
f01001a7:	89 e5                	mov    %esp,%ebp
f01001a9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01001af:	a3 e0 84 65 f0       	mov    %eax,0xf06584e0

	va_start(ap, fmt);
f01001b4:	8d 45 10             	lea    0x10(%ebp),%eax
f01001b7:	83 c0 04             	add    $0x4,%eax
f01001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001bd:	83 ec 04             	sub    $0x4,%esp
f01001c0:	ff 75 0c             	pushl  0xc(%ebp)
f01001c3:	ff 75 08             	pushl  0x8(%ebp)
f01001c6:	68 b2 27 13 f0       	push   $0xf01327b2
f01001cb:	e8 5d 0a 00 00       	call   f0100c2d <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001d6:	83 ec 08             	sub    $0x8,%esp
f01001d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001dc:	50                   	push   %eax
f01001dd:	e8 22 0a 00 00       	call   f0100c04 <vcprintf>
f01001e2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001e5:	83 ec 0c             	sub    $0xc,%esp
f01001e8:	68 cb 27 13 f0       	push   $0xf01327cb
f01001ed:	e8 3b 0a 00 00       	call   f0100c2d <cprintf>
f01001f2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001f5:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01001fa:	85 c0                	test   %eax,%eax
f01001fc:	74 12                	je     f0100210 <_panic+0x6a>
f01001fe:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0100203:	8b 40 54             	mov    0x54(%eax),%eax
f0100206:	83 f8 02             	cmp    $0x2,%eax
f0100209:	75 05                	jne    f0100210 <_panic+0x6a>
	{
		//2015
		env_exit();
f010020b:	e8 92 8e 00 00       	call   f01090a2 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100210:	e8 d6 43 00 00       	call   f01045eb <fos_scheduler>

f0100215 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100215:	55                   	push   %ebp
f0100216:	89 e5                	mov    %esp,%ebp
f0100218:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010021b:	8b 45 10             	mov    0x10(%ebp),%eax
f010021e:	a3 e0 84 65 f0       	mov    %eax,0xf06584e0

	va_start(ap, fmt);
f0100223:	8d 45 10             	lea    0x10(%ebp),%eax
f0100226:	83 c0 04             	add    $0x4,%eax
f0100229:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010022c:	83 ec 04             	sub    $0x4,%esp
f010022f:	ff 75 0c             	pushl  0xc(%ebp)
f0100232:	ff 75 08             	pushl  0x8(%ebp)
f0100235:	68 b2 27 13 f0       	push   $0xf01327b2
f010023a:	e8 ee 09 00 00       	call   f0100c2d <cprintf>
f010023f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100242:	8b 45 10             	mov    0x10(%ebp),%eax
f0100245:	83 ec 08             	sub    $0x8,%esp
f0100248:	ff 75 f4             	pushl  -0xc(%ebp)
f010024b:	50                   	push   %eax
f010024c:	e8 b3 09 00 00       	call   f0100c04 <vcprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100254:	83 ec 0c             	sub    $0xc,%esp
f0100257:	68 cb 27 13 f0       	push   $0xf01327cb
f010025c:	e8 cc 09 00 00       	call   f0100c2d <cprintf>
f0100261:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100264:	e8 ec 50 00 00       	call   f0105355 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100269:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010026e:	85 c0                	test   %eax,%eax
f0100270:	74 14                	je     f0100286 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100272:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0100277:	8b 40 4c             	mov    0x4c(%eax),%eax
f010027a:	83 ec 0c             	sub    $0xc,%esp
f010027d:	50                   	push   %eax
f010027e:	e8 92 4e 00 00       	call   f0105115 <sched_exit_env>
f0100283:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100286:	e8 60 43 00 00       	call   f01045eb <fos_scheduler>

f010028b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010028b:	55                   	push   %ebp
f010028c:	89 e5                	mov    %esp,%ebp
f010028e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100291:	8b 45 10             	mov    0x10(%ebp),%eax
f0100294:	a3 e0 84 65 f0       	mov    %eax,0xf06584e0

	va_start(ap, fmt);
f0100299:	8d 45 10             	lea    0x10(%ebp),%eax
f010029c:	83 c0 04             	add    $0x4,%eax
f010029f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002a2:	83 ec 04             	sub    $0x4,%esp
f01002a5:	ff 75 0c             	pushl  0xc(%ebp)
f01002a8:	ff 75 08             	pushl  0x8(%ebp)
f01002ab:	68 b2 27 13 f0       	push   $0xf01327b2
f01002b0:	e8 78 09 00 00       	call   f0100c2d <cprintf>
f01002b5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002b8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002bb:	83 ec 08             	sub    $0x8,%esp
f01002be:	ff 75 f4             	pushl  -0xc(%ebp)
f01002c1:	50                   	push   %eax
f01002c2:	e8 3d 09 00 00       	call   f0100c04 <vcprintf>
f01002c7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002ca:	83 ec 0c             	sub    $0xc,%esp
f01002cd:	68 cb 27 13 f0       	push   $0xf01327cb
f01002d2:	e8 56 09 00 00       	call   f0100c2d <cprintf>
f01002d7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002da:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01002df:	85 c0                	test   %eax,%eax
f01002e1:	74 28                	je     f010030b <_panic_into_prompt+0x80>
f01002e3:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01002e8:	8b 40 54             	mov    0x54(%eax),%eax
f01002eb:	83 f8 02             	cmp    $0x2,%eax
f01002ee:	75 1b                	jne    f010030b <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002f0:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01002f5:	83 ec 0c             	sub    $0xc,%esp
f01002f8:	50                   	push   %eax
f01002f9:	e8 c7 46 00 00       	call   f01049c5 <sched_insert_exit>
f01002fe:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100301:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f0100308:	00 00 00 
	}

	lcr3(phys_page_directory);
f010030b:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f0100310:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100313:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100316:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100319:	c7 05 b4 84 6e f0 00 	movl   $0x0,0xf06e84b4
f0100320:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100323:	83 ec 0c             	sub    $0xc,%esp
f0100326:	6a 00                	push   $0x0
f0100328:	e8 26 09 00 00       	call   f0100c53 <run_command_prompt>
f010032d:	83 c4 10             	add    $0x10,%esp
f0100330:	eb f1                	jmp    f0100323 <_panic_into_prompt+0x98>

f0100332 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100332:	55                   	push   %ebp
f0100333:	89 e5                	mov    %esp,%ebp
f0100335:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100338:	8d 45 10             	lea    0x10(%ebp),%eax
f010033b:	83 c0 04             	add    $0x4,%eax
f010033e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100341:	83 ec 04             	sub    $0x4,%esp
f0100344:	ff 75 0c             	pushl  0xc(%ebp)
f0100347:	ff 75 08             	pushl  0x8(%ebp)
f010034a:	68 cd 27 13 f0       	push   $0xf01327cd
f010034f:	e8 d9 08 00 00       	call   f0100c2d <cprintf>
f0100354:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100357:	8b 45 10             	mov    0x10(%ebp),%eax
f010035a:	83 ec 08             	sub    $0x8,%esp
f010035d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100360:	50                   	push   %eax
f0100361:	e8 9e 08 00 00       	call   f0100c04 <vcprintf>
f0100366:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100369:	83 ec 0c             	sub    $0xc,%esp
f010036c:	68 cb 27 13 f0       	push   $0xf01327cb
f0100371:	e8 b7 08 00 00       	call   f0100c2d <cprintf>
f0100376:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100379:	90                   	nop
f010037a:	c9                   	leave  
f010037b:	c3                   	ret    

f010037c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010037c:	55                   	push   %ebp
f010037d:	89 e5                	mov    %esp,%ebp
f010037f:	83 ec 10             	sub    $0x10,%esp
f0100382:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100389:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010038c:	89 c2                	mov    %eax,%edx
f010038e:	ec                   	in     (%dx),%al
f010038f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100392:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100395:	0f b6 c0             	movzbl %al,%eax
f0100398:	83 e0 01             	and    $0x1,%eax
f010039b:	85 c0                	test   %eax,%eax
f010039d:	75 07                	jne    f01003a6 <serial_proc_data+0x2a>
		return -1;
f010039f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003a4:	eb 16                	jmp    f01003bc <serial_proc_data+0x40>
f01003a6:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01003b0:	89 c2                	mov    %eax,%edx
f01003b2:	ec                   	in     (%dx),%al
f01003b3:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003b6:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003b9:	0f b6 c0             	movzbl %al,%eax
}
f01003bc:	c9                   	leave  
f01003bd:	c3                   	ret    

f01003be <serial_intr>:

void
serial_intr(void)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003c4:	a1 00 85 65 f0       	mov    0xf0658500,%eax
f01003c9:	85 c0                	test   %eax,%eax
f01003cb:	74 10                	je     f01003dd <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003cd:	83 ec 0c             	sub    $0xc,%esp
f01003d0:	68 7c 03 10 f0       	push   $0xf010037c
f01003d5:	e8 e4 05 00 00       	call   f01009be <cons_intr>
f01003da:	83 c4 10             	add    $0x10,%esp
}
f01003dd:	90                   	nop
f01003de:	c9                   	leave  
f01003df:	c3                   	ret    

f01003e0 <serial_init>:

void
serial_init(void)
{
f01003e0:	55                   	push   %ebp
f01003e1:	89 e5                	mov    %esp,%ebp
f01003e3:	83 ec 40             	sub    $0x40,%esp
f01003e6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003ed:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003f1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003f7:	ee                   	out    %al,(%dx)
f01003f8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003ff:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100403:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100406:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100409:	ee                   	out    %al,(%dx)
f010040a:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100411:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f0100415:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010041b:	ee                   	out    %al,(%dx)
f010041c:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100423:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100427:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010042d:	ee                   	out    %al,(%dx)
f010042e:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100435:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100439:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010043c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010043f:	ee                   	out    %al,(%dx)
f0100440:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100447:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010044b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010044e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100451:	ee                   	out    %al,(%dx)
f0100452:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100459:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010045d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100460:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100463:	ee                   	out    %al,(%dx)
f0100464:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100474:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100477:	3c ff                	cmp    $0xff,%al
f0100479:	0f 95 c0             	setne  %al
f010047c:	0f b6 c0             	movzbl %al,%eax
f010047f:	a3 00 85 65 f0       	mov    %eax,0xf0658500
f0100484:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010048e:	89 c2                	mov    %eax,%edx
f0100490:	ec                   	in     (%dx),%al
f0100491:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100494:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010049b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010049e:	89 c2                	mov    %eax,%edx
f01004a0:	ec                   	in     (%dx),%al
f01004a1:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004a4:	90                   	nop
f01004a5:	c9                   	leave  
f01004a6:	c3                   	ret    

f01004a7 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004a7:	55                   	push   %ebp
f01004a8:	89 e5                	mov    %esp,%ebp
f01004aa:	83 ec 20             	sub    $0x20,%esp
f01004ad:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004bd:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004c7:	89 c2                	mov    %eax,%edx
f01004c9:	ec                   	in     (%dx),%al
f01004ca:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004cd:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004d7:	89 c2                	mov    %eax,%edx
f01004d9:	ec                   	in     (%dx),%al
f01004da:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004dd:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004e7:	89 c2                	mov    %eax,%edx
f01004e9:	ec                   	in     (%dx),%al
f01004ea:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004ed:	90                   	nop
f01004ee:	c9                   	leave  
f01004ef:	c3                   	ret    

f01004f0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004f0:	55                   	push   %ebp
f01004f1:	89 e5                	mov    %esp,%ebp
f01004f3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004fd:	eb 08                	jmp    f0100507 <lpt_putc+0x17>
		delay();
f01004ff:	e8 a3 ff ff ff       	call   f01004a7 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100504:	ff 45 fc             	incl   -0x4(%ebp)
f0100507:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010050e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100517:	8a 45 eb             	mov    -0x15(%ebp),%al
f010051a:	84 c0                	test   %al,%al
f010051c:	78 09                	js     f0100527 <lpt_putc+0x37>
f010051e:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100525:	7e d8                	jle    f01004ff <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100527:	8b 45 08             	mov    0x8(%ebp),%eax
f010052a:	0f b6 c0             	movzbl %al,%eax
f010052d:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100534:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100537:	8a 45 e8             	mov    -0x18(%ebp),%al
f010053a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010053d:	ee                   	out    %al,(%dx)
f010053e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100545:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100549:	8a 45 e9             	mov    -0x17(%ebp),%al
f010054c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010054f:	ee                   	out    %al,(%dx)
f0100550:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100557:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010055b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010055e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100561:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010056b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100572:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100575:	66 8b 00             	mov    (%eax),%ax
f0100578:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010057c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010057f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100584:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100587:	66 8b 00             	mov    (%eax),%ax
f010058a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010058e:	74 13                	je     f01005a3 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100590:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100597:	c7 05 04 85 65 f0 b4 	movl   $0x3b4,0xf0658504
f010059e:	03 00 00 
f01005a1:	eb 14                	jmp    f01005b7 <cga_init+0x52>
	} else {
		*cp = was;
f01005a3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005a6:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005aa:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f01005ad:	c7 05 04 85 65 f0 d4 	movl   $0x3d4,0xf0658504
f01005b4:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005b7:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01005bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005bf:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005c3:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005ca:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01005cf:	40                   	inc    %eax
f01005d0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005d6:	89 c2                	mov    %eax,%edx
f01005d8:	ec                   	in     (%dx),%al
f01005d9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005dc:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005df:	0f b6 c0             	movzbl %al,%eax
f01005e2:	c1 e0 08             	shl    $0x8,%eax
f01005e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005e8:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01005ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005f0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005f4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005fa:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005fb:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f0100600:	40                   	inc    %eax
f0100601:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100604:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100607:	89 c2                	mov    %eax,%edx
f0100609:	ec                   	in     (%dx),%al
f010060a:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f010060d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100610:	0f b6 c0             	movzbl %al,%eax
f0100613:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f0100616:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100619:	a3 08 85 65 f0       	mov    %eax,0xf0658508
	crt_pos = pos;
f010061e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100621:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
}
f0100627:	90                   	nop
f0100628:	c9                   	leave  
f0100629:	c3                   	ret    

f010062a <cga_putc>:



void
cga_putc(int c)
{
f010062a:	55                   	push   %ebp
f010062b:	89 e5                	mov    %esp,%ebp
f010062d:	53                   	push   %ebx
f010062e:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100631:	8b 45 08             	mov    0x8(%ebp),%eax
f0100634:	b0 00                	mov    $0x0,%al
f0100636:	85 c0                	test   %eax,%eax
f0100638:	75 07                	jne    f0100641 <cga_putc+0x17>
		c |= 0x0700;
f010063a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100641:	8b 45 08             	mov    0x8(%ebp),%eax
f0100644:	0f b6 c0             	movzbl %al,%eax
f0100647:	83 f8 09             	cmp    $0x9,%eax
f010064a:	0f 84 94 00 00 00    	je     f01006e4 <cga_putc+0xba>
f0100650:	83 f8 09             	cmp    $0x9,%eax
f0100653:	7f 0a                	jg     f010065f <cga_putc+0x35>
f0100655:	83 f8 08             	cmp    $0x8,%eax
f0100658:	74 14                	je     f010066e <cga_putc+0x44>
f010065a:	e9 c8 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
f010065f:	83 f8 0a             	cmp    $0xa,%eax
f0100662:	74 49                	je     f01006ad <cga_putc+0x83>
f0100664:	83 f8 0d             	cmp    $0xd,%eax
f0100667:	74 53                	je     f01006bc <cga_putc+0x92>
f0100669:	e9 b9 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010066e:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100674:	66 85 c0             	test   %ax,%ax
f0100677:	0f 84 d0 00 00 00    	je     f010074d <cga_putc+0x123>
			crt_pos--;
f010067d:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100683:	48                   	dec    %eax
f0100684:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010068a:	8b 15 08 85 65 f0    	mov    0xf0658508,%edx
f0100690:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100696:	0f b7 c0             	movzwl %ax,%eax
f0100699:	01 c0                	add    %eax,%eax
f010069b:	01 c2                	add    %eax,%edx
f010069d:	8b 45 08             	mov    0x8(%ebp),%eax
f01006a0:	b0 00                	mov    $0x0,%al
f01006a2:	83 c8 20             	or     $0x20,%eax
f01006a5:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006a8:	e9 a0 00 00 00       	jmp    f010074d <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f01006ad:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01006b3:	83 c0 50             	add    $0x50,%eax
f01006b6:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006bc:	66 8b 0d 0c 85 65 f0 	mov    0xf065850c,%cx
f01006c3:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01006c9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01006d3:	66 f7 f3             	div    %bx
f01006d6:	89 d0                	mov    %edx,%eax
f01006d8:	29 c1                	sub    %eax,%ecx
f01006da:	89 c8                	mov    %ecx,%eax
f01006dc:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
		break;
f01006e2:	eb 6a                	jmp    f010074e <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 69 04 00 00       	call   f0100b57 <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 5c 04 00 00       	call   f0100b57 <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 4f 04 00 00       	call   f0100b57 <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 42 04 00 00       	call   f0100b57 <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100718:	83 ec 0c             	sub    $0xc,%esp
f010071b:	6a 20                	push   $0x20
f010071d:	e8 35 04 00 00       	call   f0100b57 <cons_putc>
f0100722:	83 c4 10             	add    $0x10,%esp
		break;
f0100725:	eb 27                	jmp    f010074e <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100727:	8b 0d 08 85 65 f0    	mov    0xf0658508,%ecx
f010072d:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100733:	8d 50 01             	lea    0x1(%eax),%edx
f0100736:	66 89 15 0c 85 65 f0 	mov    %dx,0xf065850c
f010073d:	0f b7 c0             	movzwl %ax,%eax
f0100740:	01 c0                	add    %eax,%eax
f0100742:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100745:	8b 45 08             	mov    0x8(%ebp),%eax
f0100748:	66 89 02             	mov    %ax,(%edx)
		break;
f010074b:	eb 01                	jmp    f010074e <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010074d:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010074e:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100754:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100758:	76 58                	jbe    f01007b2 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010075a:	a1 08 85 65 f0       	mov    0xf0658508,%eax
f010075f:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100765:	a1 08 85 65 f0       	mov    0xf0658508,%eax
f010076a:	83 ec 04             	sub    $0x4,%esp
f010076d:	68 00 0f 00 00       	push   $0xf00
f0100772:	52                   	push   %edx
f0100773:	50                   	push   %eax
f0100774:	e8 c4 fe 02 00       	call   f013063d <memcpy>
f0100779:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010077c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100783:	eb 15                	jmp    f010079a <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100785:	8b 15 08 85 65 f0    	mov    0xf0658508,%edx
f010078b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010078e:	01 c0                	add    %eax,%eax
f0100790:	01 d0                	add    %edx,%eax
f0100792:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100797:	ff 45 f4             	incl   -0xc(%ebp)
f010079a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007a1:	7e e2                	jle    f0100785 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007a3:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01007a9:	83 e8 50             	sub    $0x50,%eax
f01007ac:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01007b2:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01007b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01007ba:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007be:	8a 45 e0             	mov    -0x20(%ebp),%al
f01007c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01007c4:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01007c5:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01007cb:	66 c1 e8 08          	shr    $0x8,%ax
f01007cf:	0f b6 c0             	movzbl %al,%eax
f01007d2:	8b 15 04 85 65 f0    	mov    0xf0658504,%edx
f01007d8:	42                   	inc    %edx
f01007d9:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01007dc:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01007df:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01007e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01007e5:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01007e6:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01007eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007ee:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01007f2:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007f8:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01007f9:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01007ff:	0f b6 c0             	movzbl %al,%eax
f0100802:	8b 15 04 85 65 f0    	mov    0xf0658504,%edx
f0100808:	42                   	inc    %edx
f0100809:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010080c:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010080f:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100812:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100815:	ee                   	out    %al,(%dx)
}
f0100816:	90                   	nop
f0100817:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010081a:	c9                   	leave  
f010081b:	c3                   	ret    

f010081c <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010081c:	55                   	push   %ebp
f010081d:	89 e5                	mov    %esp,%ebp
f010081f:	83 ec 28             	sub    $0x28,%esp
f0100822:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100829:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010082c:	89 c2                	mov    %eax,%edx
f010082e:	ec                   	in     (%dx),%al
f010082f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100832:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100835:	0f b6 c0             	movzbl %al,%eax
f0100838:	83 e0 01             	and    $0x1,%eax
f010083b:	85 c0                	test   %eax,%eax
f010083d:	75 0a                	jne    f0100849 <kbd_proc_data+0x2d>
		return -1;
f010083f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100844:	e9 54 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
f0100849:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100850:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100853:	89 c2                	mov    %eax,%edx
f0100855:	ec                   	in     (%dx),%al
f0100856:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f0100859:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010085c:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f010085f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100863:	75 17                	jne    f010087c <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100865:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f010086a:	83 c8 40             	or     $0x40,%eax
f010086d:	a3 28 87 65 f0       	mov    %eax,0xf0658728
		return 0;
f0100872:	b8 00 00 00 00       	mov    $0x0,%eax
f0100877:	e9 21 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010087c:	8a 45 f3             	mov    -0xd(%ebp),%al
f010087f:	84 c0                	test   %al,%al
f0100881:	79 44                	jns    f01008c7 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100883:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f0100888:	83 e0 40             	and    $0x40,%eax
f010088b:	85 c0                	test   %eax,%eax
f010088d:	75 08                	jne    f0100897 <kbd_proc_data+0x7b>
f010088f:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100892:	83 e0 7f             	and    $0x7f,%eax
f0100895:	eb 03                	jmp    f010089a <kbd_proc_data+0x7e>
f0100897:	8a 45 f3             	mov    -0xd(%ebp),%al
f010089a:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010089d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008a1:	8a 80 20 00 19 f0    	mov    -0xfe6ffe0(%eax),%al
f01008a7:	83 c8 40             	or     $0x40,%eax
f01008aa:	0f b6 c0             	movzbl %al,%eax
f01008ad:	f7 d0                	not    %eax
f01008af:	89 c2                	mov    %eax,%edx
f01008b1:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f01008b6:	21 d0                	and    %edx,%eax
f01008b8:	a3 28 87 65 f0       	mov    %eax,0xf0658728
		return 0;
f01008bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01008c2:	e9 d6 00 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01008c7:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f01008cc:	83 e0 40             	and    $0x40,%eax
f01008cf:	85 c0                	test   %eax,%eax
f01008d1:	74 11                	je     f01008e4 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01008d3:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01008d7:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f01008dc:	83 e0 bf             	and    $0xffffffbf,%eax
f01008df:	a3 28 87 65 f0       	mov    %eax,0xf0658728
	}

	shift |= shiftcode[data];
f01008e4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008e8:	8a 80 20 00 19 f0    	mov    -0xfe6ffe0(%eax),%al
f01008ee:	0f b6 d0             	movzbl %al,%edx
f01008f1:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f01008f6:	09 d0                	or     %edx,%eax
f01008f8:	a3 28 87 65 f0       	mov    %eax,0xf0658728
	shift ^= togglecode[data];
f01008fd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100901:	8a 80 20 01 19 f0    	mov    -0xfe6fee0(%eax),%al
f0100907:	0f b6 d0             	movzbl %al,%edx
f010090a:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f010090f:	31 d0                	xor    %edx,%eax
f0100911:	a3 28 87 65 f0       	mov    %eax,0xf0658728

	c = charcode[shift & (CTL | SHIFT)][data];
f0100916:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f010091b:	83 e0 03             	and    $0x3,%eax
f010091e:	8b 14 85 20 05 19 f0 	mov    -0xfe6fae0(,%eax,4),%edx
f0100925:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100929:	01 d0                	add    %edx,%eax
f010092b:	8a 00                	mov    (%eax),%al
f010092d:	0f b6 c0             	movzbl %al,%eax
f0100930:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100933:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f0100938:	83 e0 08             	and    $0x8,%eax
f010093b:	85 c0                	test   %eax,%eax
f010093d:	74 22                	je     f0100961 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f010093f:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100943:	7e 0c                	jle    f0100951 <kbd_proc_data+0x135>
f0100945:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100949:	7f 06                	jg     f0100951 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f010094b:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f010094f:	eb 10                	jmp    f0100961 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100951:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100955:	7e 0a                	jle    f0100961 <kbd_proc_data+0x145>
f0100957:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f010095b:	7f 04                	jg     f0100961 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f010095d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100961:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f0100966:	f7 d0                	not    %eax
f0100968:	83 e0 06             	and    $0x6,%eax
f010096b:	85 c0                	test   %eax,%eax
f010096d:	75 2b                	jne    f010099a <kbd_proc_data+0x17e>
f010096f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100976:	75 22                	jne    f010099a <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100978:	83 ec 0c             	sub    $0xc,%esp
f010097b:	68 e8 27 13 f0       	push   $0xf01327e8
f0100980:	e8 a8 02 00 00       	call   f0100c2d <cprintf>
f0100985:	83 c4 10             	add    $0x10,%esp
f0100988:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f010098f:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100993:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100996:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100999:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f010099a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010099d:	c9                   	leave  
f010099e:	c3                   	ret    

f010099f <kbd_intr>:

void
kbd_intr(void)
{
f010099f:	55                   	push   %ebp
f01009a0:	89 e5                	mov    %esp,%ebp
f01009a2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009a5:	83 ec 0c             	sub    $0xc,%esp
f01009a8:	68 1c 08 10 f0       	push   $0xf010081c
f01009ad:	e8 0c 00 00 00       	call   f01009be <cons_intr>
f01009b2:	83 c4 10             	add    $0x10,%esp
}
f01009b5:	90                   	nop
f01009b6:	c9                   	leave  
f01009b7:	c3                   	ret    

f01009b8 <kbd_init>:

void
kbd_init(void)
{
f01009b8:	55                   	push   %ebp
f01009b9:	89 e5                	mov    %esp,%ebp
}
f01009bb:	90                   	nop
f01009bc:	5d                   	pop    %ebp
f01009bd:	c3                   	ret    

f01009be <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f01009be:	55                   	push   %ebp
f01009bf:	89 e5                	mov    %esp,%ebp
f01009c1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f01009c4:	eb 35                	jmp    f01009fb <cons_intr+0x3d>
		if (c == 0)
f01009c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01009ca:	75 02                	jne    f01009ce <cons_intr+0x10>
			continue;
f01009cc:	eb 2d                	jmp    f01009fb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f01009ce:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f01009d3:	8d 50 01             	lea    0x1(%eax),%edx
f01009d6:	89 15 24 87 65 f0    	mov    %edx,0xf0658724
f01009dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01009df:	88 90 20 85 65 f0    	mov    %dl,-0xf9a7ae0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f01009e5:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f01009ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f01009ef:	75 0a                	jne    f01009fb <cons_intr+0x3d>
			cons.wpos = 0;
f01009f1:	c7 05 24 87 65 f0 00 	movl   $0x0,0xf0658724
f01009f8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f01009fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01009fe:	ff d0                	call   *%eax
f0100a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a07:	75 bd                	jne    f01009c6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a09:	90                   	nop
f0100a0a:	c9                   	leave  
f0100a0b:	c3                   	ret    

f0100a0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a0c:	55                   	push   %ebp
f0100a0d:	89 e5                	mov    %esp,%ebp
f0100a0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a12:	e8 a7 f9 ff ff       	call   f01003be <serial_intr>
	kbd_intr();
f0100a17:	e8 83 ff ff ff       	call   f010099f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a1c:	8b 15 20 87 65 f0    	mov    0xf0658720,%edx
f0100a22:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100a27:	39 c2                	cmp    %eax,%edx
f0100a29:	74 35                	je     f0100a60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a2b:	a1 20 87 65 f0       	mov    0xf0658720,%eax
f0100a30:	8d 50 01             	lea    0x1(%eax),%edx
f0100a33:	89 15 20 87 65 f0    	mov    %edx,0xf0658720
f0100a39:	8a 80 20 85 65 f0    	mov    -0xf9a7ae0(%eax),%al
f0100a3f:	0f b6 c0             	movzbl %al,%eax
f0100a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a45:	a1 20 87 65 f0       	mov    0xf0658720,%eax
f0100a4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a4f:	75 0a                	jne    f0100a5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100a51:	c7 05 20 87 65 f0 00 	movl   $0x0,0xf0658720
f0100a58:	00 00 00 
		return c;
f0100a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a5e:	eb 05                	jmp    f0100a65 <cons_getc+0x59>
	}
	return 0;
f0100a60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100a65:	c9                   	leave  
f0100a66:	c3                   	ret    

f0100a67 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100a67:	55                   	push   %ebp
f0100a68:	89 e5                	mov    %esp,%ebp
f0100a6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100a6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100a74:	a1 00 85 65 f0       	mov    0xf0658500,%eax
f0100a79:	85 c0                	test   %eax,%eax
f0100a7b:	74 41                	je     f0100abe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100a7d:	e8 fa f8 ff ff       	call   f010037c <serial_proc_data>
f0100a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a89:	74 33                	je     f0100abe <cons_getc2+0x57>
				if (c1 == 0)
f0100a8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a8f:	74 2d                	je     f0100abe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100a91:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100a96:	8d 50 01             	lea    0x1(%eax),%edx
f0100a99:	89 15 24 87 65 f0    	mov    %edx,0xf0658724
f0100a9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100aa2:	88 90 20 85 65 f0    	mov    %dl,-0xf9a7ae0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100aa8:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100aad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ab2:	75 0a                	jne    f0100abe <cons_getc2+0x57>
						cons.wpos = 0;
f0100ab4:	c7 05 24 87 65 f0 00 	movl   $0x0,0xf0658724
f0100abb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ac5:	e8 52 fd ff ff       	call   f010081c <kbd_proc_data>
f0100aca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100acd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100ad1:	74 33                	je     f0100b06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100ad3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100ad7:	74 2d                	je     f0100b06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100ad9:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100ade:	8d 50 01             	lea    0x1(%eax),%edx
f0100ae1:	89 15 24 87 65 f0    	mov    %edx,0xf0658724
f0100ae7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100aea:	88 90 20 85 65 f0    	mov    %dl,-0xf9a7ae0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100af0:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100af5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100afa:	75 0a                	jne    f0100b06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100afc:	c7 05 24 87 65 f0 00 	movl   $0x0,0xf0658724
f0100b03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b0a:	7e 44                	jle    f0100b50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b0c:	8b 15 20 87 65 f0    	mov    0xf0658720,%edx
f0100b12:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100b17:	39 c2                	cmp    %eax,%edx
f0100b19:	74 35                	je     f0100b50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b1b:	a1 20 87 65 f0       	mov    0xf0658720,%eax
f0100b20:	8d 50 01             	lea    0x1(%eax),%edx
f0100b23:	89 15 20 87 65 f0    	mov    %edx,0xf0658720
f0100b29:	8a 80 20 85 65 f0    	mov    -0xf9a7ae0(%eax),%al
f0100b2f:	0f b6 c0             	movzbl %al,%eax
f0100b32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b35:	a1 20 87 65 f0       	mov    0xf0658720,%eax
f0100b3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b3f:	75 0a                	jne    f0100b4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b41:	c7 05 20 87 65 f0 00 	movl   $0x0,0xf0658720
f0100b48:	00 00 00 
			return c;
f0100b4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100b4e:	eb 05                	jmp    f0100b55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100b50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b55:	c9                   	leave  
f0100b56:	c3                   	ret    

f0100b57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100b57:	55                   	push   %ebp
f0100b58:	89 e5                	mov    %esp,%ebp
f0100b5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100b5d:	ff 75 08             	pushl  0x8(%ebp)
f0100b60:	e8 8b f9 ff ff       	call   f01004f0 <lpt_putc>
f0100b65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100b68:	83 ec 0c             	sub    $0xc,%esp
f0100b6b:	ff 75 08             	pushl  0x8(%ebp)
f0100b6e:	e8 b7 fa ff ff       	call   f010062a <cga_putc>
f0100b73:	83 c4 10             	add    $0x10,%esp
}
f0100b76:	90                   	nop
f0100b77:	c9                   	leave  
f0100b78:	c3                   	ret    

f0100b79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100b79:	55                   	push   %ebp
f0100b7a:	89 e5                	mov    %esp,%ebp
f0100b7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100b7f:	e8 e1 f9 ff ff       	call   f0100565 <cga_init>
	kbd_init();
f0100b84:	e8 2f fe ff ff       	call   f01009b8 <kbd_init>
	serial_init();
f0100b89:	e8 52 f8 ff ff       	call   f01003e0 <serial_init>

	if (!serial_exists)
f0100b8e:	a1 00 85 65 f0       	mov    0xf0658500,%eax
f0100b93:	85 c0                	test   %eax,%eax
f0100b95:	75 10                	jne    f0100ba7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100b97:	83 ec 0c             	sub    $0xc,%esp
f0100b9a:	68 f4 27 13 f0       	push   $0xf01327f4
f0100b9f:	e8 89 00 00 00       	call   f0100c2d <cprintf>
f0100ba4:	83 c4 10             	add    $0x10,%esp
}
f0100ba7:	90                   	nop
f0100ba8:	c9                   	leave  
f0100ba9:	c3                   	ret    

f0100baa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100baa:	55                   	push   %ebp
f0100bab:	89 e5                	mov    %esp,%ebp
f0100bad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100bb0:	83 ec 0c             	sub    $0xc,%esp
f0100bb3:	ff 75 08             	pushl  0x8(%ebp)
f0100bb6:	e8 9c ff ff ff       	call   f0100b57 <cons_putc>
f0100bbb:	83 c4 10             	add    $0x10,%esp
}
f0100bbe:	90                   	nop
f0100bbf:	c9                   	leave  
f0100bc0:	c3                   	ret    

f0100bc1 <getchar>:

int
getchar(void)
{
f0100bc1:	55                   	push   %ebp
f0100bc2:	89 e5                	mov    %esp,%ebp
f0100bc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100bc7:	e8 40 fe ff ff       	call   f0100a0c <cons_getc>
f0100bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 f2                	je     f0100bc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100bd8:	c9                   	leave  
f0100bd9:	c3                   	ret    

f0100bda <iscons>:

int
iscons(int fdnum)
{
f0100bda:	55                   	push   %ebp
f0100bdb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100bdd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100be2:	5d                   	pop    %ebp
f0100be3:	c3                   	ret    

f0100be4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100be4:	55                   	push   %ebp
f0100be5:	89 e5                	mov    %esp,%ebp
f0100be7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100bea:	83 ec 0c             	sub    $0xc,%esp
f0100bed:	ff 75 08             	pushl  0x8(%ebp)
f0100bf0:	e8 b5 ff ff ff       	call   f0100baa <cputchar>
f0100bf5:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100bfb:	83 c0 04             	add    $0x4,%eax
f0100bfe:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c01:	90                   	nop
f0100c02:	c9                   	leave  
f0100c03:	c3                   	ret    

f0100c04 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c04:	55                   	push   %ebp
f0100c05:	89 e5                	mov    %esp,%ebp
f0100c07:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c11:	ff 75 0c             	pushl  0xc(%ebp)
f0100c14:	ff 75 08             	pushl  0x8(%ebp)
f0100c17:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c1a:	50                   	push   %eax
f0100c1b:	68 e4 0b 10 f0       	push   $0xf0100be4
f0100c20:	e8 4c f1 02 00       	call   f012fd71 <vprintfmt>
f0100c25:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2b:	c9                   	leave  
f0100c2c:	c3                   	ret    

f0100c2d <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c2d:	55                   	push   %ebp
f0100c2e:	89 e5                	mov    %esp,%ebp
f0100c30:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c33:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c3c:	83 ec 08             	sub    $0x8,%esp
f0100c3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c42:	50                   	push   %eax
f0100c43:	e8 bc ff ff ff       	call   f0100c04 <vcprintf>
f0100c48:	83 c4 10             	add    $0x10,%esp
f0100c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100c51:	c9                   	leave  
f0100c52:	c3                   	ret    

f0100c53 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100c53:	55                   	push   %ebp
f0100c54:	89 e5                	mov    %esp,%ebp
f0100c56:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100c5c:	83 ec 08             	sub    $0x8,%esp
f0100c5f:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c65:	50                   	push   %eax
f0100c66:	68 11 28 13 f0       	push   $0xf0132811
f0100c6b:	e8 a9 f5 02 00       	call   f0130219 <readline>
f0100c70:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100c73:	83 ec 0c             	sub    $0xc,%esp
f0100c76:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c7c:	50                   	push   %eax
f0100c7d:	e8 0d 00 00 00       	call   f0100c8f <execute_command>
f0100c82:	83 c4 10             	add    $0x10,%esp
f0100c85:	85 c0                	test   %eax,%eax
f0100c87:	78 02                	js     f0100c8b <run_command_prompt+0x38>
				break;
	}
f0100c89:	eb d1                	jmp    f0100c5c <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100c8b:	90                   	nop
	}
}
f0100c8c:	90                   	nop
f0100c8d:	c9                   	leave  
f0100c8e:	c3                   	ret    

f0100c8f <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100c8f:	55                   	push   %ebp
f0100c90:	89 e5                	mov    %esp,%ebp
f0100c92:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100c98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100c9b:	50                   	push   %eax
f0100c9c:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100c9f:	50                   	push   %eax
f0100ca0:	68 17 28 13 f0       	push   $0xf0132817
f0100ca5:	ff 75 08             	pushl  0x8(%ebp)
f0100ca8:	e8 a6 fd 02 00       	call   f0130a53 <strsplit>
f0100cad:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100cb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100cb3:	85 c0                	test   %eax,%eax
f0100cb5:	75 0a                	jne    f0100cc1 <execute_command+0x32>
		return 0;
f0100cb7:	b8 00 00 00 00       	mov    $0x0,%eax
f0100cbc:	e9 37 01 00 00       	jmp    f0100df8 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100cc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100cc8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100ccf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100cd6:	e9 8c 00 00 00       	jmp    f0100d67 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100cdb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cde:	89 d0                	mov    %edx,%eax
f0100ce0:	01 c0                	add    %eax,%eax
f0100ce2:	01 d0                	add    %edx,%eax
f0100ce4:	c1 e0 02             	shl    $0x2,%eax
f0100ce7:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100cec:	8b 10                	mov    (%eax),%edx
f0100cee:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100cf1:	83 ec 08             	sub    $0x8,%esp
f0100cf4:	52                   	push   %edx
f0100cf5:	50                   	push   %eax
f0100cf6:	e8 30 f8 02 00       	call   f013052b <strcmp>
f0100cfb:	83 c4 10             	add    $0x10,%esp
f0100cfe:	85 c0                	test   %eax,%eax
f0100d00:	75 09                	jne    f0100d0b <execute_command+0x7c>
		{
			command_found = 1;
f0100d02:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100d09:	eb 6c                	jmp    f0100d77 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100d0b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d0e:	83 ec 0c             	sub    $0xc,%esp
f0100d11:	50                   	push   %eax
f0100d12:	e8 08 f7 02 00       	call   f013041f <strlen>
f0100d17:	83 c4 10             	add    $0x10,%esp
f0100d1a:	89 c1                	mov    %eax,%ecx
f0100d1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d1f:	89 d0                	mov    %edx,%eax
f0100d21:	01 c0                	add    %eax,%eax
f0100d23:	01 d0                	add    %edx,%eax
f0100d25:	c1 e0 02             	shl    $0x2,%eax
f0100d28:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100d2d:	8b 10                	mov    (%eax),%edx
f0100d2f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d32:	83 ec 04             	sub    $0x4,%esp
f0100d35:	51                   	push   %ecx
f0100d36:	52                   	push   %edx
f0100d37:	50                   	push   %eax
f0100d38:	e8 26 f8 02 00       	call   f0130563 <strncmp>
f0100d3d:	83 c4 10             	add    $0x10,%esp
f0100d40:	85 c0                	test   %eax,%eax
f0100d42:	75 20                	jne    f0100d64 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100d44:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d47:	89 d0                	mov    %edx,%eax
f0100d49:	01 c0                	add    %eax,%eax
f0100d4b:	01 d0                	add    %edx,%eax
f0100d4d:	c1 e0 02             	shl    $0x2,%eax
f0100d50:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100d55:	8b 10                	mov    (%eax),%edx
f0100d57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d5a:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100d61:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100d64:	ff 45 f0             	incl   -0x10(%ebp)
f0100d67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d6a:	a1 ac 08 19 f0       	mov    0xf01908ac,%eax
f0100d6f:	39 c2                	cmp    %eax,%edx
f0100d71:	0f 82 64 ff ff ff    	jb     f0100cdb <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100d77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d7b:	74 2b                	je     f0100da8 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100d7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d80:	89 d0                	mov    %edx,%eax
f0100d82:	01 c0                	add    %eax,%eax
f0100d84:	01 d0                	add    %edx,%eax
f0100d86:	c1 e0 02             	shl    $0x2,%eax
f0100d89:	05 48 05 19 f0       	add    $0xf0190548,%eax
f0100d8e:	8b 00                	mov    (%eax),%eax
f0100d90:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100d93:	83 ec 08             	sub    $0x8,%esp
f0100d96:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100d99:	51                   	push   %ecx
f0100d9a:	52                   	push   %edx
f0100d9b:	ff d0                	call   *%eax
f0100d9d:	83 c4 10             	add    $0x10,%esp
f0100da0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100da3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100da6:	eb 50                	jmp    f0100df8 <execute_command+0x169>
	}
	else if (count == 0)
f0100da8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100dac:	75 16                	jne    f0100dc4 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100dae:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100db1:	83 ec 08             	sub    $0x8,%esp
f0100db4:	50                   	push   %eax
f0100db5:	68 1c 28 13 f0       	push   $0xf013281c
f0100dba:	e8 6e fe ff ff       	call   f0100c2d <cprintf>
f0100dbf:	83 c4 10             	add    $0x10,%esp
f0100dc2:	eb 2f                	jmp    f0100df3 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100dc4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100dcb:	eb 1e                	jmp    f0100deb <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100dcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dd0:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100dd7:	83 ec 08             	sub    $0x8,%esp
f0100dda:	50                   	push   %eax
f0100ddb:	68 32 28 13 f0       	push   $0xf0132832
f0100de0:	e8 48 fe ff ff       	call   f0100c2d <cprintf>
f0100de5:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100de8:	ff 45 e8             	incl   -0x18(%ebp)
f0100deb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dee:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100df1:	7c da                	jl     f0100dcd <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100df3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100df8:	c9                   	leave  
f0100df9:	c3                   	ret    

f0100dfa <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100dfa:	55                   	push   %ebp
f0100dfb:	89 e5                	mov    %esp,%ebp
f0100dfd:	c7 05 b8 84 6e f0 00 	movl   $0x0,0xf06e84b8
f0100e04:	00 00 00 
f0100e07:	90                   	nop
f0100e08:	5d                   	pop    %ebp
f0100e09:	c3                   	ret    

f0100e0a <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e0a:	55                   	push   %ebp
f0100e0b:	89 e5                	mov    %esp,%ebp
f0100e0d:	c7 05 b8 84 6e f0 01 	movl   $0x1,0xf06e84b8
f0100e14:	00 00 00 
f0100e17:	90                   	nop
f0100e18:	5d                   	pop    %ebp
f0100e19:	c3                   	ret    

f0100e1a <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e1a:	55                   	push   %ebp
f0100e1b:	89 e5                	mov    %esp,%ebp
f0100e1d:	c7 05 b8 84 6e f0 02 	movl   $0x2,0xf06e84b8
f0100e24:	00 00 00 
f0100e27:	90                   	nop
f0100e28:	5d                   	pop    %ebp
f0100e29:	c3                   	ret    

f0100e2a <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e2a:	55                   	push   %ebp
f0100e2b:	89 e5                	mov    %esp,%ebp
f0100e2d:	c7 05 b8 84 6e f0 03 	movl   $0x3,0xf06e84b8
f0100e34:	00 00 00 
f0100e37:	90                   	nop
f0100e38:	5d                   	pop    %ebp
f0100e39:	c3                   	ret    

f0100e3a <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e3a:	55                   	push   %ebp
f0100e3b:	89 e5                	mov    %esp,%ebp
f0100e3d:	c7 05 b8 84 6e f0 04 	movl   $0x4,0xf06e84b8
f0100e44:	00 00 00 
f0100e47:	90                   	nop
f0100e48:	5d                   	pop    %ebp
f0100e49:	c3                   	ret    

f0100e4a <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e4a:	55                   	push   %ebp
f0100e4b:	89 e5                	mov    %esp,%ebp
f0100e4d:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100e52:	85 c0                	test   %eax,%eax
f0100e54:	75 04                	jne    f0100e5a <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100e56:	b0 01                	mov    $0x1,%al
f0100e58:	eb 02                	jmp    f0100e5c <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100e5a:	b0 00                	mov    $0x0,%al
f0100e5c:	5d                   	pop    %ebp
f0100e5d:	c3                   	ret    

f0100e5e <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100e5e:	55                   	push   %ebp
f0100e5f:	89 e5                	mov    %esp,%ebp
f0100e61:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100e66:	83 f8 01             	cmp    $0x1,%eax
f0100e69:	75 04                	jne    f0100e6f <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100e6b:	b0 01                	mov    $0x1,%al
f0100e6d:	eb 02                	jmp    f0100e71 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100e6f:	b0 00                	mov    $0x0,%al
f0100e71:	5d                   	pop    %ebp
f0100e72:	c3                   	ret    

f0100e73 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100e73:	55                   	push   %ebp
f0100e74:	89 e5                	mov    %esp,%ebp
f0100e76:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100e7b:	83 f8 02             	cmp    $0x2,%eax
f0100e7e:	75 04                	jne    f0100e84 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100e80:	b0 01                	mov    $0x1,%al
f0100e82:	eb 02                	jmp    f0100e86 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100e84:	b0 00                	mov    $0x0,%al
f0100e86:	5d                   	pop    %ebp
f0100e87:	c3                   	ret    

f0100e88 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100e88:	55                   	push   %ebp
f0100e89:	89 e5                	mov    %esp,%ebp
f0100e8b:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100e90:	83 f8 03             	cmp    $0x3,%eax
f0100e93:	75 04                	jne    f0100e99 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100e95:	b0 01                	mov    $0x1,%al
f0100e97:	eb 02                	jmp    f0100e9b <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100e99:	b0 00                	mov    $0x0,%al
f0100e9b:	5d                   	pop    %ebp
f0100e9c:	c3                   	ret    

f0100e9d <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100e9d:	55                   	push   %ebp
f0100e9e:	89 e5                	mov    %esp,%ebp
f0100ea0:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100ea5:	83 f8 04             	cmp    $0x4,%eax
f0100ea8:	75 04                	jne    f0100eae <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eaa:	b0 01                	mov    $0x1,%al
f0100eac:	eb 02                	jmp    f0100eb0 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100eae:	b0 00                	mov    $0x0,%al
f0100eb0:	5d                   	pop    %ebp
f0100eb1:	c3                   	ret    

f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100eb2:	55                   	push   %ebp
f0100eb3:	89 e5                	mov    %esp,%ebp
f0100eb5:	c7 05 8c 84 6e f0 01 	movl   $0x1,0xf06e848c
f0100ebc:	00 00 00 
f0100ebf:	90                   	nop
f0100ec0:	5d                   	pop    %ebp
f0100ec1:	c3                   	ret    

f0100ec2 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100ec2:	55                   	push   %ebp
f0100ec3:	89 e5                	mov    %esp,%ebp
f0100ec5:	c7 05 8c 84 6e f0 02 	movl   $0x2,0xf06e848c
f0100ecc:	00 00 00 
f0100ecf:	90                   	nop
f0100ed0:	5d                   	pop    %ebp
f0100ed1:	c3                   	ret    

f0100ed2 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100ed2:	55                   	push   %ebp
f0100ed3:	89 e5                	mov    %esp,%ebp
f0100ed5:	c7 05 8c 84 6e f0 03 	movl   $0x3,0xf06e848c
f0100edc:	00 00 00 
f0100edf:	90                   	nop
f0100ee0:	5d                   	pop    %ebp
f0100ee1:	c3                   	ret    

f0100ee2 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100ee2:	55                   	push   %ebp
f0100ee3:	89 e5                	mov    %esp,%ebp
f0100ee5:	c7 05 8c 84 6e f0 04 	movl   $0x4,0xf06e848c
f0100eec:	00 00 00 
f0100eef:	90                   	nop
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
f0100efa:	83 f8 01             	cmp    $0x1,%eax
f0100efd:	75 04                	jne    f0100f03 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100eff:	b0 01                	mov    $0x1,%al
f0100f01:	eb 02                	jmp    f0100f05 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f03:	b0 00                	mov    $0x0,%al
f0100f05:	5d                   	pop    %ebp
f0100f06:	c3                   	ret    

f0100f07 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
f0100f0f:	83 f8 02             	cmp    $0x2,%eax
f0100f12:	75 04                	jne    f0100f18 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f14:	b0 01                	mov    $0x1,%al
f0100f16:	eb 02                	jmp    f0100f1a <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f18:	b0 00                	mov    $0x0,%al
f0100f1a:	5d                   	pop    %ebp
f0100f1b:	c3                   	ret    

f0100f1c <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f1c:	55                   	push   %ebp
f0100f1d:	89 e5                	mov    %esp,%ebp
f0100f1f:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
f0100f24:	83 f8 03             	cmp    $0x3,%eax
f0100f27:	75 04                	jne    f0100f2d <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f29:	b0 01                	mov    $0x1,%al
f0100f2b:	eb 02                	jmp    f0100f2f <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f2d:	b0 00                	mov    $0x0,%al
f0100f2f:	5d                   	pop    %ebp
f0100f30:	c3                   	ret    

f0100f31 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f31:	55                   	push   %ebp
f0100f32:	89 e5                	mov    %esp,%ebp
f0100f34:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
f0100f39:	83 f8 04             	cmp    $0x4,%eax
f0100f3c:	75 04                	jne    f0100f42 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f3e:	b0 01                	mov    $0x1,%al
f0100f40:	eb 02                	jmp    f0100f44 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f42:	b0 00                	mov    $0x0,%al
f0100f44:	5d                   	pop    %ebp
f0100f45:	c3                   	ret    

f0100f46 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f46:	55                   	push   %ebp
f0100f47:	89 e5                	mov    %esp,%ebp
f0100f49:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100f4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f4f:	c1 e8 0c             	shr    $0xc,%eax
f0100f52:	89 c2                	mov    %eax,%edx
f0100f54:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0100f59:	39 c2                	cmp    %eax,%edx
f0100f5b:	72 14                	jb     f0100f71 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100f5d:	83 ec 04             	sub    $0x4,%esp
f0100f60:	68 38 28 13 f0       	push   $0xf0132838
f0100f65:	6a 55                	push   $0x55
f0100f67:	68 60 28 13 f0       	push   $0xf0132860
f0100f6c:	e8 35 f2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0100f71:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0100f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f7a:	c1 e8 0c             	shr    $0xc,%eax
f0100f7d:	89 c1                	mov    %eax,%ecx
f0100f7f:	89 c8                	mov    %ecx,%eax
f0100f81:	01 c0                	add    %eax,%eax
f0100f83:	01 c8                	add    %ecx,%eax
f0100f85:	c1 e0 03             	shl    $0x3,%eax
f0100f88:	01 d0                	add    %edx,%eax
}
f0100f8a:	c9                   	leave  
f0100f8b:	c3                   	ret    

f0100f8c <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100f8c:	55                   	push   %ebp
f0100f8d:	89 e5                	mov    %esp,%ebp
f0100f8f:	53                   	push   %ebx
f0100f90:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100f93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f9a:	eb 3b                	jmp    f0100fd7 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100f9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f9f:	89 d0                	mov    %edx,%eax
f0100fa1:	01 c0                	add    %eax,%eax
f0100fa3:	01 d0                	add    %edx,%eax
f0100fa5:	c1 e0 02             	shl    $0x2,%eax
f0100fa8:	05 44 05 19 f0       	add    $0xf0190544,%eax
f0100fad:	8b 10                	mov    (%eax),%edx
f0100faf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0100fb2:	89 c8                	mov    %ecx,%eax
f0100fb4:	01 c0                	add    %eax,%eax
f0100fb6:	01 c8                	add    %ecx,%eax
f0100fb8:	c1 e0 02             	shl    $0x2,%eax
f0100fbb:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100fc0:	8b 00                	mov    (%eax),%eax
f0100fc2:	83 ec 04             	sub    $0x4,%esp
f0100fc5:	52                   	push   %edx
f0100fc6:	50                   	push   %eax
f0100fc7:	68 da 36 13 f0       	push   $0xf01336da
f0100fcc:	e8 5c fc ff ff       	call   f0100c2d <cprintf>
f0100fd1:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0100fd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100fda:	a1 ac 08 19 f0       	mov    0xf01908ac,%eax
f0100fdf:	39 c2                	cmp    %eax,%edx
f0100fe1:	72 b9                	jb     f0100f9c <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0100fe3:	83 ec 0c             	sub    $0xc,%esp
f0100fe6:	68 e3 36 13 f0       	push   $0xf01336e3
f0100feb:	e8 3d fc ff ff       	call   f0100c2d <cprintf>
f0100ff0:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0100ff3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100ffa:	eb 42                	jmp    f010103e <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0100ffc:	8b 0d c0 0c 19 f0    	mov    0xf0190cc0,%ecx
f0101002:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101005:	89 d0                	mov    %edx,%eax
f0101007:	01 c0                	add    %eax,%eax
f0101009:	01 d0                	add    %edx,%eax
f010100b:	c1 e0 02             	shl    $0x2,%eax
f010100e:	01 c8                	add    %ecx,%eax
f0101010:	8b 50 04             	mov    0x4(%eax),%edx
f0101013:	8b 1d c0 0c 19 f0    	mov    0xf0190cc0,%ebx
f0101019:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010101c:	89 c8                	mov    %ecx,%eax
f010101e:	01 c0                	add    %eax,%eax
f0101020:	01 c8                	add    %ecx,%eax
f0101022:	c1 e0 02             	shl    $0x2,%eax
f0101025:	01 d8                	add    %ebx,%eax
f0101027:	8b 00                	mov    (%eax),%eax
f0101029:	83 ec 04             	sub    $0x4,%esp
f010102c:	52                   	push   %edx
f010102d:	50                   	push   %eax
f010102e:	68 f8 36 13 f0       	push   $0xf01336f8
f0101033:	e8 f5 fb ff ff       	call   f0100c2d <cprintf>
f0101038:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010103b:	ff 45 f4             	incl   -0xc(%ebp)
f010103e:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f0101043:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101046:	7c b4                	jl     f0100ffc <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101048:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010104d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101050:	c9                   	leave  
f0101051:	c3                   	ret    

f0101052 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101052:	55                   	push   %ebp
f0101053:	89 e5                	mov    %esp,%ebp
f0101055:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101058:	83 ec 0c             	sub    $0xc,%esp
f010105b:	68 14 37 13 f0       	push   $0xf0133714
f0101060:	e8 c8 fb ff ff       	call   f0100c2d <cprintf>
f0101065:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101068:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010106d:	83 ec 04             	sub    $0x4,%esp
f0101070:	50                   	push   %eax
f0101071:	68 0c 00 10 f0       	push   $0xf010000c
f0101076:	68 30 37 13 f0       	push   $0xf0133730
f010107b:	e8 ad fb ff ff       	call   f0100c2d <cprintf>
f0101080:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101083:	b8 7d 26 13 00       	mov    $0x13267d,%eax
f0101088:	83 ec 04             	sub    $0x4,%esp
f010108b:	50                   	push   %eax
f010108c:	68 7d 26 13 f0       	push   $0xf013267d
f0101091:	68 6c 37 13 f0       	push   $0xf013376c
f0101096:	e8 92 fb ff ff       	call   f0100c2d <cprintf>
f010109b:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010109e:	b8 cc 84 65 00       	mov    $0x6584cc,%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	50                   	push   %eax
f01010a7:	68 cc 84 65 f0       	push   $0xf06584cc
f01010ac:	68 a8 37 13 f0       	push   $0xf01337a8
f01010b1:	e8 77 fb ff ff       	call   f0100c2d <cprintf>
f01010b6:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01010b9:	b8 1c 86 6e 00       	mov    $0x6e861c,%eax
f01010be:	83 ec 04             	sub    $0x4,%esp
f01010c1:	50                   	push   %eax
f01010c2:	68 1c 86 6e f0       	push   $0xf06e861c
f01010c7:	68 f0 37 13 f0       	push   $0xf01337f0
f01010cc:	e8 5c fb ff ff       	call   f0100c2d <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01010d4:	b8 1c 86 6e f0       	mov    $0xf06e861c,%eax
f01010d9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01010df:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01010e4:	29 c2                	sub    %eax,%edx
f01010e6:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01010e8:	85 c0                	test   %eax,%eax
f01010ea:	79 05                	jns    f01010f1 <command_kernel_info+0x9f>
f01010ec:	05 ff 03 00 00       	add    $0x3ff,%eax
f01010f1:	c1 f8 0a             	sar    $0xa,%eax
f01010f4:	83 ec 08             	sub    $0x8,%esp
f01010f7:	50                   	push   %eax
f01010f8:	68 2c 38 13 f0       	push   $0xf013382c
f01010fd:	e8 2b fb ff ff       	call   f0100c2d <cprintf>
f0101102:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010110a:	c9                   	leave  
f010110b:	c3                   	ret    

f010110c <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f010110c:	55                   	push   %ebp
f010110d:	89 e5                	mov    %esp,%ebp
f010110f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101112:	83 ec 04             	sub    $0x4,%esp
f0101115:	68 58 38 13 f0       	push   $0xf0133858
f010111a:	68 b0 00 00 00       	push   $0xb0
f010111f:	68 79 38 13 f0       	push   $0xf0133879
f0101124:	e8 7d f0 ff ff       	call   f01001a6 <_panic>

f0101129 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f0101129:	55                   	push   %ebp
f010112a:	89 e5                	mov    %esp,%ebp
f010112c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010112f:	83 ec 04             	sub    $0x4,%esp
f0101132:	68 58 38 13 f0       	push   $0xf0133858
f0101137:	68 ba 00 00 00       	push   $0xba
f010113c:	68 79 38 13 f0       	push   $0xf0133879
f0101141:	e8 60 f0 ff ff       	call   f01001a6 <_panic>

f0101146 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101146:	55                   	push   %ebp
f0101147:	89 e5                	mov    %esp,%ebp
f0101149:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010114c:	83 ec 04             	sub    $0x4,%esp
f010114f:	68 58 38 13 f0       	push   $0xf0133858
f0101154:	68 c3 00 00 00       	push   $0xc3
f0101159:	68 79 38 13 f0       	push   $0xf0133879
f010115e:	e8 43 f0 ff ff       	call   f01001a6 <_panic>

f0101163 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101163:	55                   	push   %ebp
f0101164:	89 e5                	mov    %esp,%ebp
f0101166:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	68 58 38 13 f0       	push   $0xf0133858
f0101171:	68 cf 00 00 00       	push   $0xcf
f0101176:	68 79 38 13 f0       	push   $0xf0133879
f010117b:	e8 26 f0 ff ff       	call   f01001a6 <_panic>

f0101180 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101180:	55                   	push   %ebp
f0101181:	89 e5                	mov    %esp,%ebp
f0101183:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101186:	83 ec 04             	sub    $0x4,%esp
f0101189:	68 58 38 13 f0       	push   $0xf0133858
f010118e:	68 d8 00 00 00       	push   $0xd8
f0101193:	68 79 38 13 f0       	push   $0xf0133879
f0101198:	e8 09 f0 ff ff       	call   f01001a6 <_panic>

f010119d <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010119d:	55                   	push   %ebp
f010119e:	89 e5                	mov    %esp,%ebp
f01011a0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a3:	83 ec 04             	sub    $0x4,%esp
f01011a6:	68 58 38 13 f0       	push   $0xf0133858
f01011ab:	68 e1 00 00 00       	push   $0xe1
f01011b0:	68 79 38 13 f0       	push   $0xf0133879
f01011b5:	e8 ec ef ff ff       	call   f01001a6 <_panic>

f01011ba <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f01011ba:	55                   	push   %ebp
f01011bb:	89 e5                	mov    %esp,%ebp
f01011bd:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011c0:	83 ec 04             	sub    $0x4,%esp
f01011c3:	68 58 38 13 f0       	push   $0xf0133858
f01011c8:	68 ee 00 00 00       	push   $0xee
f01011cd:	68 79 38 13 f0       	push   $0xf0133879
f01011d2:	e8 cf ef ff ff       	call   f01001a6 <_panic>

f01011d7 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01011d7:	55                   	push   %ebp
f01011d8:	89 e5                	mov    %esp,%ebp
f01011da:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01011dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011e0:	83 c0 04             	add    $0x4,%eax
f01011e3:	8b 00                	mov    (%eax),%eax
f01011e5:	83 ec 04             	sub    $0x4,%esp
f01011e8:	6a 10                	push   $0x10
f01011ea:	6a 00                	push   $0x0
f01011ec:	50                   	push   %eax
f01011ed:	e8 8d f5 02 00       	call   f013077f <strtol>
f01011f2:	83 c4 10             	add    $0x10,%esp
f01011f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01011f8:	83 ec 0c             	sub    $0xc,%esp
f01011fb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01011fe:	50                   	push   %eax
f01011ff:	e8 a6 55 00 00       	call   f01067aa <allocate_frame>
f0101204:	83 c4 10             	add    $0x10,%esp
f0101207:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010120a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010120d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0101212:	6a 06                	push   $0x6
f0101214:	ff 75 f4             	pushl  -0xc(%ebp)
f0101217:	52                   	push   %edx
f0101218:	50                   	push   %eax
f0101219:	e8 24 59 00 00       	call   f0106b42 <map_frame>
f010121e:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101221:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101226:	c9                   	leave  
f0101227:	c3                   	ret    

f0101228 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101228:	55                   	push   %ebp
f0101229:	89 e5                	mov    %esp,%ebp
f010122b:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010122e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101231:	83 c0 04             	add    $0x4,%eax
f0101234:	8b 00                	mov    (%eax),%eax
f0101236:	83 ec 04             	sub    $0x4,%esp
f0101239:	6a 10                	push   $0x10
f010123b:	6a 00                	push   $0x0
f010123d:	50                   	push   %eax
f010123e:	e8 3c f5 02 00       	call   f013077f <strtol>
f0101243:	83 c4 10             	add    $0x10,%esp
f0101246:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101249:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f010124e:	83 ec 08             	sub    $0x8,%esp
f0101251:	ff 75 f4             	pushl  -0xc(%ebp)
f0101254:	50                   	push   %eax
f0101255:	e8 17 5a 00 00       	call   f0106c71 <unmap_frame>
f010125a:	83 c4 10             	add    $0x10,%esp

	return 0;
f010125d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101262:	c9                   	leave  
f0101263:	c3                   	ret    

f0101264 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101264:	55                   	push   %ebp
f0101265:	89 e5                	mov    %esp,%ebp
f0101267:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010126a:	83 ec 04             	sub    $0x4,%esp
f010126d:	68 58 38 13 f0       	push   $0xf0133858
f0101272:	68 18 01 00 00       	push   $0x118
f0101277:	68 79 38 13 f0       	push   $0xf0133879
f010127c:	e8 25 ef ff ff       	call   f01001a6 <_panic>

f0101281 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101281:	55                   	push   %ebp
f0101282:	89 e5                	mov    %esp,%ebp
f0101284:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101287:	83 ec 04             	sub    $0x4,%esp
f010128a:	68 58 38 13 f0       	push   $0xf0133858
f010128f:	68 23 01 00 00       	push   $0x123
f0101294:	68 79 38 13 f0       	push   $0xf0133879
f0101299:	e8 08 ef ff ff       	call   f01001a6 <_panic>

f010129e <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010129e:	55                   	push   %ebp
f010129f:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012a6:	5d                   	pop    %ebp
f01012a7:	c3                   	ret    

f01012a8 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012a8:	55                   	push   %ebp
f01012a9:	89 e5                	mov    %esp,%ebp
f01012ab:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01012ae:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01012b2:	75 37                	jne    f01012eb <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01012b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012b7:	83 c0 04             	add    $0x4,%eax
f01012ba:	8b 00                	mov    (%eax),%eax
f01012bc:	83 ec 04             	sub    $0x4,%esp
f01012bf:	6a 10                	push   $0x10
f01012c1:	6a 00                	push   $0x0
f01012c3:	50                   	push   %eax
f01012c4:	e8 b6 f4 02 00       	call   f013077f <strtol>
f01012c9:	83 c4 10             	add    $0x10,%esp
f01012cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01012cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012d2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01012d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012d8:	83 c0 08             	add    $0x8,%eax
f01012db:	8b 00                	mov    (%eax),%eax
f01012dd:	8a 00                	mov    (%eax),%al
f01012df:	88 c2                	mov    %al,%dl
f01012e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012e4:	88 10                	mov    %dl,(%eax)
f01012e6:	e9 b9 00 00 00       	jmp    f01013a4 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01012eb:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01012ef:	0f 85 9f 00 00 00    	jne    f0101394 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01012f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012f8:	83 c0 04             	add    $0x4,%eax
f01012fb:	8b 00                	mov    (%eax),%eax
f01012fd:	83 ec 04             	sub    $0x4,%esp
f0101300:	6a 0a                	push   $0xa
f0101302:	6a 00                	push   $0x0
f0101304:	50                   	push   %eax
f0101305:	e8 75 f4 02 00       	call   f013077f <strtol>
f010130a:	83 c4 10             	add    $0x10,%esp
f010130d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101310:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 00                	push   $0x0
f010131c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010131f:	50                   	push   %eax
f0101320:	ff 75 f4             	pushl  -0xc(%ebp)
f0101323:	e8 99 7d 00 00       	call   f01090c1 <envid2env>
f0101328:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010132b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132e:	83 c0 08             	add    $0x8,%eax
f0101331:	8b 00                	mov    (%eax),%eax
f0101333:	83 ec 04             	sub    $0x4,%esp
f0101336:	6a 10                	push   $0x10
f0101338:	6a 00                	push   $0x0
f010133a:	50                   	push   %eax
f010133b:	e8 3f f4 02 00       	call   f013077f <strtol>
f0101340:	83 c4 10             	add    $0x10,%esp
f0101343:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101346:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101349:	85 c0                	test   %eax,%eax
f010134b:	75 07                	jne    f0101354 <command_writeusermem+0xac>
f010134d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101352:	eb 55                	jmp    f01013a9 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101354:	0f 20 d8             	mov    %cr3,%eax
f0101357:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010135a:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010135d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101360:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101363:	8b 40 60             	mov    0x60(%eax),%eax
f0101366:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101369:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010136c:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010136f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101372:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101375:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101378:	83 c0 0c             	add    $0xc,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	8a 00                	mov    (%eax),%al
f010137f:	88 c2                	mov    %al,%dl
f0101381:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101384:	88 10                	mov    %dl,(%eax)
f0101386:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101389:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010138c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010138f:	0f 22 d8             	mov    %eax,%cr3
f0101392:	eb 10                	jmp    f01013a4 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101394:	83 ec 0c             	sub    $0xc,%esp
f0101397:	68 90 38 13 f0       	push   $0xf0133890
f010139c:	e8 8c f8 ff ff       	call   f0100c2d <cprintf>
f01013a1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013a9:	c9                   	leave  
f01013aa:	c3                   	ret    

f01013ab <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01013ab:	55                   	push   %ebp
f01013ac:	89 e5                	mov    %esp,%ebp
f01013ae:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01013b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b4:	83 c0 04             	add    $0x4,%eax
f01013b7:	8b 00                	mov    (%eax),%eax
f01013b9:	83 ec 04             	sub    $0x4,%esp
f01013bc:	6a 10                	push   $0x10
f01013be:	6a 00                	push   $0x0
f01013c0:	50                   	push   %eax
f01013c1:	e8 b9 f3 02 00       	call   f013077f <strtol>
f01013c6:	83 c4 10             	add    $0x10,%esp
f01013c9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01013ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01013d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d4:	83 c0 08             	add    $0x8,%eax
f01013d7:	8b 00                	mov    (%eax),%eax
f01013d9:	83 ec 04             	sub    $0x4,%esp
f01013dc:	6a 0a                	push   $0xa
f01013de:	6a 00                	push   $0x0
f01013e0:	50                   	push   %eax
f01013e1:	e8 99 f3 02 00       	call   f013077f <strtol>
f01013e6:	83 c4 10             	add    $0x10,%esp
f01013e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01013ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01013f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013f6:	83 c0 0c             	add    $0xc,%eax
f01013f9:	8b 00                	mov    (%eax),%eax
f01013fb:	83 ec 0c             	sub    $0xc,%esp
f01013fe:	50                   	push   %eax
f01013ff:	e8 1b f0 02 00       	call   f013041f <strlen>
f0101404:	83 c4 10             	add    $0x10,%esp
f0101407:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010140a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101411:	eb 30                	jmp    f0101443 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101413:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010141a:	eb 1c                	jmp    f0101438 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f010141c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010141f:	83 c0 0c             	add    $0xc,%eax
f0101422:	8b 10                	mov    (%eax),%edx
f0101424:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101427:	01 d0                	add    %edx,%eax
f0101429:	8a 00                	mov    (%eax),%al
f010142b:	88 c2                	mov    %al,%dl
f010142d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101430:	88 10                	mov    %dl,(%eax)
			address++;
f0101432:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101435:	ff 45 ec             	incl   -0x14(%ebp)
f0101438:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010143b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010143e:	7c dc                	jl     f010141c <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101440:	ff 45 f0             	incl   -0x10(%ebp)
f0101443:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101446:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101449:	7c c8                	jl     f0101413 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010144b:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101450:	c9                   	leave  
f0101451:	c3                   	ret    

f0101452 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101452:	55                   	push   %ebp
f0101453:	89 e5                	mov    %esp,%ebp
f0101455:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101458:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010145c:	75 42                	jne    f01014a0 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010145e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101461:	83 c0 04             	add    $0x4,%eax
f0101464:	8b 00                	mov    (%eax),%eax
f0101466:	83 ec 04             	sub    $0x4,%esp
f0101469:	6a 10                	push   $0x10
f010146b:	6a 00                	push   $0x0
f010146d:	50                   	push   %eax
f010146e:	e8 0c f3 02 00       	call   f013077f <strtol>
f0101473:	83 c4 10             	add    $0x10,%esp
f0101476:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101479:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010147c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010147f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101482:	8a 00                	mov    (%eax),%al
f0101484:	0f b6 c0             	movzbl %al,%eax
f0101487:	83 ec 04             	sub    $0x4,%esp
f010148a:	50                   	push   %eax
f010148b:	ff 75 d8             	pushl  -0x28(%ebp)
f010148e:	68 ba 38 13 f0       	push   $0xf01338ba
f0101493:	e8 95 f7 ff ff       	call   f0100c2d <cprintf>
f0101498:	83 c4 10             	add    $0x10,%esp
f010149b:	e9 c4 00 00 00       	jmp    f0101564 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014a0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014a4:	0f 85 aa 00 00 00    	jne    f0101554 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014ad:	83 c0 04             	add    $0x4,%eax
f01014b0:	8b 00                	mov    (%eax),%eax
f01014b2:	83 ec 04             	sub    $0x4,%esp
f01014b5:	6a 0a                	push   $0xa
f01014b7:	6a 00                	push   $0x0
f01014b9:	50                   	push   %eax
f01014ba:	e8 c0 f2 02 00       	call   f013077f <strtol>
f01014bf:	83 c4 10             	add    $0x10,%esp
f01014c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01014c5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01014cc:	83 ec 04             	sub    $0x4,%esp
f01014cf:	6a 00                	push   $0x0
f01014d1:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01014d4:	50                   	push   %eax
f01014d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01014d8:	e8 e4 7b 00 00       	call   f01090c1 <envid2env>
f01014dd:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01014e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014e3:	83 c0 08             	add    $0x8,%eax
f01014e6:	8b 00                	mov    (%eax),%eax
f01014e8:	83 ec 04             	sub    $0x4,%esp
f01014eb:	6a 10                	push   $0x10
f01014ed:	6a 00                	push   $0x0
f01014ef:	50                   	push   %eax
f01014f0:	e8 8a f2 02 00       	call   f013077f <strtol>
f01014f5:	83 c4 10             	add    $0x10,%esp
f01014f8:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01014fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01014fe:	85 c0                	test   %eax,%eax
f0101500:	75 07                	jne    f0101509 <command_readusermem+0xb7>
f0101502:	b8 00 00 00 00       	mov    $0x0,%eax
f0101507:	eb 60                	jmp    f0101569 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101509:	0f 20 d8             	mov    %cr3,%eax
f010150c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010150f:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101512:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0101515:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101518:	8b 40 60             	mov    0x60(%eax),%eax
f010151b:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010151e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101521:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010152a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010152d:	8a 00                	mov    (%eax),%al
f010152f:	0f b6 c0             	movzbl %al,%eax
f0101532:	83 ec 04             	sub    $0x4,%esp
f0101535:	50                   	push   %eax
f0101536:	ff 75 f0             	pushl  -0x10(%ebp)
f0101539:	68 ba 38 13 f0       	push   $0xf01338ba
f010153e:	e8 ea f6 ff ff       	call   f0100c2d <cprintf>
f0101543:	83 c4 10             	add    $0x10,%esp
f0101546:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010154c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010154f:	0f 22 d8             	mov    %eax,%cr3
f0101552:	eb 10                	jmp    f0101564 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101554:	83 ec 0c             	sub    $0xc,%esp
f0101557:	68 d4 38 13 f0       	push   $0xf01338d4
f010155c:	e8 cc f6 ff ff       	call   f0100c2d <cprintf>
f0101561:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101564:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101569:	c9                   	leave  
f010156a:	c3                   	ret    

f010156b <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010156b:	55                   	push   %ebp
f010156c:	89 e5                	mov    %esp,%ebp
f010156e:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101571:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101574:	83 c0 04             	add    $0x4,%eax
f0101577:	8b 00                	mov    (%eax),%eax
f0101579:	83 ec 04             	sub    $0x4,%esp
f010157c:	6a 10                	push   $0x10
f010157e:	6a 00                	push   $0x0
f0101580:	50                   	push   %eax
f0101581:	e8 f9 f1 02 00       	call   f013077f <strtol>
f0101586:	83 c4 10             	add    $0x10,%esp
f0101589:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010158e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101591:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101594:	83 c0 08             	add    $0x8,%eax
f0101597:	8b 00                	mov    (%eax),%eax
f0101599:	83 ec 04             	sub    $0x4,%esp
f010159c:	6a 0a                	push   $0xa
f010159e:	6a 00                	push   $0x0
f01015a0:	50                   	push   %eax
f01015a1:	e8 d9 f1 02 00       	call   f013077f <strtol>
f01015a6:	83 c4 10             	add    $0x10,%esp
f01015a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01015ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01015b3:	eb 22                	jmp    f01015d7 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01015b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01015b8:	8d 50 01             	lea    0x1(%eax),%edx
f01015bb:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01015be:	8a 00                	mov    (%eax),%al
f01015c0:	0f b6 c0             	movzbl %al,%eax
f01015c3:	83 ec 08             	sub    $0x8,%esp
f01015c6:	50                   	push   %eax
f01015c7:	68 fe 38 13 f0       	push   $0xf01338fe
f01015cc:	e8 5c f6 ff ff       	call   f0100c2d <cprintf>
f01015d1:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01015d4:	ff 45 f0             	incl   -0x10(%ebp)
f01015d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01015da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01015dd:	7c d6                	jl     f01015b5 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01015df:	83 ec 0c             	sub    $0xc,%esp
f01015e2:	68 01 39 13 f0       	push   $0xf0133901
f01015e7:	e8 41 f6 ff ff       	call   f0100c2d <cprintf>
f01015ec:	83 c4 10             	add    $0x10,%esp
	return 0;
f01015ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01015f4:	c9                   	leave  
f01015f5:	c3                   	ret    

f01015f6 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01015f6:	55                   	push   %ebp
f01015f7:	89 e5                	mov    %esp,%ebp
f01015f9:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01015fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015ff:	83 c0 04             	add    $0x4,%eax
f0101602:	8b 00                	mov    (%eax),%eax
f0101604:	83 ec 04             	sub    $0x4,%esp
f0101607:	6a 0a                	push   $0xa
f0101609:	6a 00                	push   $0x0
f010160b:	50                   	push   %eax
f010160c:	e8 6e f1 02 00       	call   f013077f <strtol>
f0101611:	83 c4 10             	add    $0x10,%esp
f0101614:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101617:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f010161e:	83 ec 04             	sub    $0x4,%esp
f0101621:	6a 00                	push   $0x0
f0101623:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101626:	50                   	push   %eax
f0101627:	ff 75 ec             	pushl  -0x14(%ebp)
f010162a:	e8 92 7a 00 00       	call   f01090c1 <envid2env>
f010162f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101632:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101635:	83 c0 08             	add    $0x8,%eax
f0101638:	8b 00                	mov    (%eax),%eax
f010163a:	83 ec 04             	sub    $0x4,%esp
f010163d:	6a 10                	push   $0x10
f010163f:	6a 00                	push   $0x0
f0101641:	50                   	push   %eax
f0101642:	e8 38 f1 02 00       	call   f013077f <strtol>
f0101647:	83 c4 10             	add    $0x10,%esp
f010164a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010164d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101650:	83 c0 0c             	add    $0xc,%eax
f0101653:	8b 00                	mov    (%eax),%eax
f0101655:	83 ec 04             	sub    $0x4,%esp
f0101658:	6a 0a                	push   $0xa
f010165a:	6a 00                	push   $0x0
f010165c:	50                   	push   %eax
f010165d:	e8 1d f1 02 00       	call   f013077f <strtol>
f0101662:	83 c4 10             	add    $0x10,%esp
f0101665:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101668:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010166b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010166e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101671:	85 c0                	test   %eax,%eax
f0101673:	75 07                	jne    f010167c <command_readuserblock+0x86>
f0101675:	b8 00 00 00 00       	mov    $0x0,%eax
f010167a:	eb 65                	jmp    f01016e1 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010167c:	0f 20 d8             	mov    %cr3,%eax
f010167f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101682:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101685:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101688:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010168b:	8b 40 60             	mov    0x60(%eax),%eax
f010168e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101691:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101694:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101697:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010169e:	eb 28                	jmp    f01016c8 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016a3:	8a 00                	mov    (%eax),%al
f01016a5:	0f b6 d0             	movzbl %al,%edx
f01016a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016ab:	8a 00                	mov    (%eax),%al
f01016ad:	0f b6 c0             	movzbl %al,%eax
f01016b0:	52                   	push   %edx
f01016b1:	50                   	push   %eax
f01016b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01016b5:	68 03 39 13 f0       	push   $0xf0133903
f01016ba:	e8 6e f5 ff ff       	call   f0100c2d <cprintf>
f01016bf:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01016c2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01016c5:	ff 45 f0             	incl   -0x10(%ebp)
f01016c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016cb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01016ce:	7c d0                	jl     f01016a0 <command_readuserblock+0xaa>
f01016d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01016d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01016d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01016d9:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01016dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016e1:	c9                   	leave  
f01016e2:	c3                   	ret    

f01016e3 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01016e3:	55                   	push   %ebp
f01016e4:	89 e5                	mov    %esp,%ebp
f01016e6:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016ec:	83 c0 04             	add    $0x4,%eax
f01016ef:	8b 00                	mov    (%eax),%eax
f01016f1:	83 ec 04             	sub    $0x4,%esp
f01016f4:	6a 0a                	push   $0xa
f01016f6:	6a 00                	push   $0x0
f01016f8:	50                   	push   %eax
f01016f9:	e8 81 f0 02 00       	call   f013077f <strtol>
f01016fe:	83 c4 10             	add    $0x10,%esp
f0101701:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101704:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f010170b:	83 ec 04             	sub    $0x4,%esp
f010170e:	6a 00                	push   $0x0
f0101710:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101713:	50                   	push   %eax
f0101714:	ff 75 f4             	pushl  -0xc(%ebp)
f0101717:	e8 a5 79 00 00       	call   f01090c1 <envid2env>
f010171c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010171f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101722:	85 c0                	test   %eax,%eax
f0101724:	75 0a                	jne    f0101730 <command_remove_table+0x4d>
f0101726:	b8 00 00 00 00       	mov    $0x0,%eax
f010172b:	e9 a1 00 00 00       	jmp    f01017d1 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101730:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101733:	83 c0 08             	add    $0x8,%eax
f0101736:	8b 00                	mov    (%eax),%eax
f0101738:	83 ec 04             	sub    $0x4,%esp
f010173b:	6a 10                	push   $0x10
f010173d:	6a 00                	push   $0x0
f010173f:	50                   	push   %eax
f0101740:	e8 3a f0 02 00       	call   f013077f <strtol>
f0101745:	83 c4 10             	add    $0x10,%esp
f0101748:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010174b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010174e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101751:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101754:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101757:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010175a:	c1 ea 16             	shr    $0x16,%edx
f010175d:	c1 e2 02             	shl    $0x2,%edx
f0101760:	01 d0                	add    %edx,%eax
f0101762:	8b 00                	mov    (%eax),%eax
f0101764:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101769:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f010176c:	83 ec 0c             	sub    $0xc,%esp
f010176f:	ff 75 e8             	pushl  -0x18(%ebp)
f0101772:	e8 cf f7 ff ff       	call   f0100f46 <to_frame_info>
f0101777:	83 c4 10             	add    $0x10,%esp
f010177a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f010177d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101780:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101786:	83 ec 0c             	sub    $0xc,%esp
f0101789:	ff 75 e4             	pushl  -0x1c(%ebp)
f010178c:	e8 2e 51 00 00       	call   f01068bf <free_frame>
f0101791:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101794:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101797:	c1 e8 16             	shr    $0x16,%eax
f010179a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f010179d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017a3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01017a6:	c1 e2 02             	shl    $0x2,%edx
f01017a9:	01 c2                	add    %eax,%edx
f01017ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017b1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01017b4:	c1 e1 02             	shl    $0x2,%ecx
f01017b7:	01 c8                	add    %ecx,%eax
f01017b9:	8b 00                	mov    (%eax),%eax
f01017bb:	83 e0 fe             	and    $0xfffffffe,%eax
f01017be:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01017c0:	0f 20 d8             	mov    %cr3,%eax
f01017c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01017c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017c9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01017cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017d1:	c9                   	leave  
f01017d2:	c3                   	ret    

f01017d3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01017d3:	55                   	push   %ebp
f01017d4:	89 e5                	mov    %esp,%ebp
f01017d6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01017d9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01017dd:	7e 06                	jle    f01017e5 <command_allocuserpage+0x12>
f01017df:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01017e3:	7e 1a                	jle    f01017ff <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01017e5:	83 ec 0c             	sub    $0xc,%esp
f01017e8:	68 14 39 13 f0       	push   $0xf0133914
f01017ed:	e8 3b f4 ff ff       	call   f0100c2d <cprintf>
f01017f2:	83 c4 10             	add    $0x10,%esp
		return 0;
f01017f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01017fa:	e9 46 01 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	83 c0 04             	add    $0x4,%eax
f0101805:	8b 00                	mov    (%eax),%eax
f0101807:	83 ec 04             	sub    $0x4,%esp
f010180a:	6a 0a                	push   $0xa
f010180c:	6a 00                	push   $0x0
f010180e:	50                   	push   %eax
f010180f:	e8 6b ef 02 00       	call   f013077f <strtol>
f0101814:	83 c4 10             	add    $0x10,%esp
f0101817:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f010181a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101821:	83 ec 04             	sub    $0x4,%esp
f0101824:	6a 00                	push   $0x0
f0101826:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101829:	50                   	push   %eax
f010182a:	ff 75 f0             	pushl  -0x10(%ebp)
f010182d:	e8 8f 78 00 00       	call   f01090c1 <envid2env>
f0101832:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101835:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101838:	85 c0                	test   %eax,%eax
f010183a:	75 0a                	jne    f0101846 <command_allocuserpage+0x73>
f010183c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101841:	e9 ff 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0101846:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101849:	83 c0 08             	add    $0x8,%eax
f010184c:	8b 00                	mov    (%eax),%eax
f010184e:	83 ec 04             	sub    $0x4,%esp
f0101851:	6a 10                	push   $0x10
f0101853:	6a 00                	push   $0x0
f0101855:	50                   	push   %eax
f0101856:	e8 24 ef 02 00       	call   f013077f <strtol>
f010185b:	83 c4 10             	add    $0x10,%esp
f010185e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101861:	83 ec 0c             	sub    $0xc,%esp
f0101864:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101867:	50                   	push   %eax
f0101868:	e8 3d 4f 00 00       	call   f01067aa <allocate_frame>
f010186d:	83 c4 10             	add    $0x10,%esp
f0101870:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101873:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101877:	75 1a                	jne    f0101893 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101879:	83 ec 0c             	sub    $0xc,%esp
f010187c:	68 3e 39 13 f0       	push   $0xf013393e
f0101881:	e8 a7 f3 ff ff       	call   f0100c2d <cprintf>
f0101886:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101889:	b8 00 00 00 00       	mov    $0x0,%eax
f010188e:	e9 b2 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0101893:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101897:	75 1d                	jne    f01018b6 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101899:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010189c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010189f:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018a2:	6a 06                	push   $0x6
f01018a4:	ff 75 ec             	pushl  -0x14(%ebp)
f01018a7:	52                   	push   %edx
f01018a8:	50                   	push   %eax
f01018a9:	e8 94 52 00 00       	call   f0106b42 <map_frame>
f01018ae:	83 c4 10             	add    $0x10,%esp
f01018b1:	e9 8a 00 00 00       	jmp    f0101940 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01018b6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ba:	0f 85 80 00 00 00    	jne    f0101940 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01018c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018c3:	83 c0 0c             	add    $0xc,%eax
f01018c6:	8b 00                	mov    (%eax),%eax
f01018c8:	8a 00                	mov    (%eax),%al
f01018ca:	3c 72                	cmp    $0x72,%al
f01018cc:	74 0e                	je     f01018dc <command_allocuserpage+0x109>
f01018ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018d1:	83 c0 0c             	add    $0xc,%eax
f01018d4:	8b 00                	mov    (%eax),%eax
f01018d6:	8a 00                	mov    (%eax),%al
f01018d8:	3c 52                	cmp    $0x52,%al
f01018da:	75 09                	jne    f01018e5 <command_allocuserpage+0x112>
			rw = 0 ;
f01018dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01018e3:	eb 3c                	jmp    f0101921 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01018e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018e8:	83 c0 0c             	add    $0xc,%eax
f01018eb:	8b 00                	mov    (%eax),%eax
f01018ed:	8a 00                	mov    (%eax),%al
f01018ef:	3c 77                	cmp    $0x77,%al
f01018f1:	74 0e                	je     f0101901 <command_allocuserpage+0x12e>
f01018f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f6:	83 c0 0c             	add    $0xc,%eax
f01018f9:	8b 00                	mov    (%eax),%eax
f01018fb:	8a 00                	mov    (%eax),%al
f01018fd:	3c 57                	cmp    $0x57,%al
f01018ff:	75 09                	jne    f010190a <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101901:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101908:	eb 17                	jmp    f0101921 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f010190a:	83 ec 0c             	sub    $0xc,%esp
f010190d:	68 58 39 13 f0       	push   $0xf0133958
f0101912:	e8 16 f3 ff ff       	call   f0100c2d <cprintf>
f0101917:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f010191a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101921:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101924:	83 c8 04             	or     $0x4,%eax
f0101927:	89 c1                	mov    %eax,%ecx
f0101929:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010192c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010192f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101932:	51                   	push   %ecx
f0101933:	ff 75 ec             	pushl  -0x14(%ebp)
f0101936:	52                   	push   %edx
f0101937:	50                   	push   %eax
f0101938:	e8 05 52 00 00       	call   f0106b42 <map_frame>
f010193d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101940:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101945:	c9                   	leave  
f0101946:	c3                   	ret    

f0101947 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101947:	55                   	push   %ebp
f0101948:	89 e5                	mov    %esp,%ebp
f010194a:	56                   	push   %esi
f010194b:	53                   	push   %ebx
f010194c:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f010194f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101952:	83 ec 0c             	sub    $0xc,%esp
f0101955:	50                   	push   %eax
f0101956:	e8 57 54 00 00       	call   f0106db2 <calculate_available_frames>
f010195b:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f010195e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101961:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101964:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101967:	8b 75 ec             	mov    -0x14(%ebp),%esi
f010196a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010196d:	01 de                	add    %ebx,%esi
f010196f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101972:	01 f3                	add    %esi,%ebx
f0101974:	83 ec 0c             	sub    $0xc,%esp
f0101977:	51                   	push   %ecx
f0101978:	52                   	push   %edx
f0101979:	50                   	push   %eax
f010197a:	53                   	push   %ebx
f010197b:	68 9c 39 13 f0       	push   $0xf013399c
f0101980:	e8 a8 f2 ff ff       	call   f0100c2d <cprintf>
f0101985:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101988:	a1 d0 84 6e f0       	mov    0xf06e84d0,%eax
f010198d:	83 ec 08             	sub    $0x8,%esp
f0101990:	50                   	push   %eax
f0101991:	68 f4 39 13 f0       	push   $0xf01339f4
f0101996:	e8 92 f2 ff ff       	call   f0100c2d <cprintf>
f010199b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010199e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01019a6:	5b                   	pop    %ebx
f01019a7:	5e                   	pop    %esi
f01019a8:	5d                   	pop    %ebp
f01019a9:	c3                   	ret    

f01019aa <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f01019aa:	55                   	push   %ebp
f01019ab:	89 e5                	mov    %esp,%ebp
f01019ad:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f01019b0:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f01019b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f01019be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f01019c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01019c8:	83 f8 02             	cmp    $0x2,%eax
f01019cb:	74 39                	je     f0101a06 <CreateEnv+0x5c>
f01019cd:	83 f8 03             	cmp    $0x3,%eax
f01019d0:	75 1d                	jne    f01019ef <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f01019d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d5:	83 c0 08             	add    $0x8,%eax
f01019d8:	8b 00                	mov    (%eax),%eax
f01019da:	83 ec 04             	sub    $0x4,%esp
f01019dd:	6a 0a                	push   $0xa
f01019df:	6a 00                	push   $0x0
f01019e1:	50                   	push   %eax
f01019e2:	e8 98 ed 02 00       	call   f013077f <strtol>
f01019e7:	83 c4 10             	add    $0x10,%esp
f01019ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		case 2:
			break;
f01019ed:	eb 17                	jmp    f0101a06 <CreateEnv+0x5c>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	68 30 3a 13 f0       	push   $0xf0133a30
f01019f7:	e8 31 f2 ff ff       	call   f0100c2d <cprintf>
f01019fc:	83 c4 10             	add    $0x10,%esp
			return NULL;
f01019ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a04:	eb 58                	jmp    f0101a5e <CreateEnv+0xb4>
		switch (number_of_arguments)
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
		case 2:
			break;
f0101a06:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a07:	83 ec 0c             	sub    $0xc,%esp
f0101a0a:	6a 02                	push   $0x2
f0101a0c:	e8 50 b8 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f0101a11:	83 c4 10             	add    $0x10,%esp
f0101a14:	85 c0                	test   %eax,%eax
f0101a16:	74 07                	je     f0101a1f <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0101a18:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101a1f:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0101a23:	76 19                	jbe    f0101a3e <CreateEnv+0x94>
f0101a25:	68 a0 3a 13 f0       	push   $0xf0133aa0
f0101a2a:	68 e5 3a 13 f0       	push   $0xf0133ae5
f0101a2f:	68 71 02 00 00       	push   $0x271
f0101a34:	68 79 38 13 f0       	push   $0xf0133879
f0101a39:	e8 68 e7 ff ff       	call   f01001a6 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a41:	83 c0 04             	add    $0x4,%eax
f0101a44:	8b 00                	mov    (%eax),%eax
f0101a46:	ff 75 f0             	pushl  -0x10(%ebp)
f0101a49:	ff 75 f4             	pushl  -0xc(%ebp)
f0101a4c:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a4f:	50                   	push   %eax
f0101a50:	e8 11 69 00 00       	call   f0108366 <env_create>
f0101a55:	83 c4 10             	add    $0x10,%esp
f0101a58:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101a5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101a5e:	c9                   	leave  
f0101a5f:	c3                   	ret    

f0101a60 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101a60:	55                   	push   %ebp
f0101a61:	89 e5                	mov    %esp,%ebp
f0101a63:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101a66:	83 ec 08             	sub    $0x8,%esp
f0101a69:	ff 75 0c             	pushl  0xc(%ebp)
f0101a6c:	ff 75 08             	pushl  0x8(%ebp)
f0101a6f:	e8 36 ff ff ff       	call   f01019aa <CreateEnv>
f0101a74:	83 c4 10             	add    $0x10,%esp
f0101a77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101a7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101a7e:	75 07                	jne    f0101a87 <command_run_program+0x27>
f0101a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a85:	eb 46                	jmp    f0101acd <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a8a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101a8d:	83 ec 08             	sub    $0x8,%esp
f0101a90:	50                   	push   %eax
f0101a91:	68 fa 3a 13 f0       	push   $0xf0133afa
f0101a96:	e8 92 f1 ff ff       	call   f0100c2d <cprintf>
f0101a9b:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101a9e:	c7 05 d0 84 6e f0 00 	movl   $0x0,0xf06e84d0
f0101aa5:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101aa8:	83 ec 0c             	sub    $0xc,%esp
f0101aab:	ff 75 f4             	pushl  -0xc(%ebp)
f0101aae:	e8 c4 35 00 00       	call   f0105077 <sched_new_env>
f0101ab3:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ab9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101abc:	83 ec 0c             	sub    $0xc,%esp
f0101abf:	50                   	push   %eax
f0101ac0:	e8 cf 35 00 00       	call   f0105094 <sched_run_env>
f0101ac5:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ac8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101acd:	c9                   	leave  
f0101ace:	c3                   	ret    

f0101acf <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101acf:	55                   	push   %ebp
f0101ad0:	89 e5                	mov    %esp,%ebp
f0101ad2:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ad8:	83 c0 04             	add    $0x4,%eax
f0101adb:	8b 00                	mov    (%eax),%eax
f0101add:	83 ec 04             	sub    $0x4,%esp
f0101ae0:	6a 0a                	push   $0xa
f0101ae2:	6a 00                	push   $0x0
f0101ae4:	50                   	push   %eax
f0101ae5:	e8 95 ec 02 00       	call   f013077f <strtol>
f0101aea:	83 c4 10             	add    $0x10,%esp
f0101aed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101af3:	83 ec 0c             	sub    $0xc,%esp
f0101af6:	50                   	push   %eax
f0101af7:	e8 c4 39 00 00       	call   f01054c0 <sched_kill_env>
f0101afc:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b04:	c9                   	leave  
f0101b05:	c3                   	ret    

f0101b06 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101b06:	55                   	push   %ebp
f0101b07:	89 e5                	mov    %esp,%ebp
f0101b09:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101b0c:	83 ec 08             	sub    $0x8,%esp
f0101b0f:	ff 75 0c             	pushl  0xc(%ebp)
f0101b12:	ff 75 08             	pushl  0x8(%ebp)
f0101b15:	e8 90 fe ff ff       	call   f01019aa <CreateEnv>
f0101b1a:	83 c4 10             	add    $0x10,%esp
f0101b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101b24:	75 07                	jne    f0101b2d <commnad_load_env+0x27>
		return 0 ;
f0101b26:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b2b:	eb 2a                	jmp    f0101b57 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101b2d:	83 ec 0c             	sub    $0xc,%esp
f0101b30:	ff 75 f4             	pushl  -0xc(%ebp)
f0101b33:	e8 3f 35 00 00       	call   f0105077 <sched_new_env>
f0101b38:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101b3e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101b41:	83 ec 08             	sub    $0x8,%esp
f0101b44:	50                   	push   %eax
f0101b45:	68 fa 3a 13 f0       	push   $0xf0133afa
f0101b4a:	e8 de f0 ff ff       	call   f0100c2d <cprintf>
f0101b4f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101b52:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b57:	c9                   	leave  
f0101b58:	c3                   	ret    

f0101b59 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101b59:	55                   	push   %ebp
f0101b5a:	89 e5                	mov    %esp,%ebp
f0101b5c:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101b5f:	c7 05 d0 84 6e f0 00 	movl   $0x0,0xf06e84d0
f0101b66:	00 00 00 
	sched_run_all();
f0101b69:	e8 4a 31 00 00       	call   f0104cb8 <sched_run_all>

	return 0 ;
f0101b6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b73:	c9                   	leave  
f0101b74:	c3                   	ret    

f0101b75 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101b75:	55                   	push   %ebp
f0101b76:	89 e5                	mov    %esp,%ebp
f0101b78:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101b7b:	e8 2d 2f 00 00       	call   f0104aad <sched_print_all>

	return 0 ;
f0101b80:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b85:	c9                   	leave  
f0101b86:	c3                   	ret    

f0101b87 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101b87:	55                   	push   %ebp
f0101b88:	89 e5                	mov    %esp,%ebp
f0101b8a:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101b8d:	e8 99 31 00 00       	call   f0104d2b <sched_kill_all>

	return 0 ;
f0101b92:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b97:	c9                   	leave  
f0101b98:	c3                   	ret    

f0101b99 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101b99:	55                   	push   %ebp
f0101b9a:	89 e5                	mov    %esp,%ebp
f0101b9c:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101b9f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101ba3:	7f 1a                	jg     f0101bbf <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101ba5:	83 ec 0c             	sub    $0xc,%esp
f0101ba8:	68 10 3b 13 f0       	push   $0xf0133b10
f0101bad:	e8 7b f0 ff ff       	call   f0100c2d <cprintf>
f0101bb2:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bba:	e9 83 00 00 00       	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101bbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc2:	83 c0 04             	add    $0x4,%eax
f0101bc5:	8b 00                	mov    (%eax),%eax
f0101bc7:	83 ec 04             	sub    $0x4,%esp
f0101bca:	6a 0a                	push   $0xa
f0101bcc:	6a 00                	push   $0x0
f0101bce:	50                   	push   %eax
f0101bcf:	e8 ab eb 02 00       	call   f013077f <strtol>
f0101bd4:	83 c4 10             	add    $0x10,%esp
f0101bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101bda:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101bde:	75 20                	jne    f0101c00 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101be0:	83 ec 0c             	sub    $0xc,%esp
f0101be3:	ff 75 f4             	pushl  -0xc(%ebp)
f0101be6:	e8 eb b5 00 00       	call   f010d1d6 <setPageReplacmentAlgorithmLRU>
f0101beb:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101bee:	83 ec 0c             	sub    $0xc,%esp
f0101bf1:	68 70 3b 13 f0       	push   $0xf0133b70
f0101bf6:	e8 32 f0 ff ff       	call   f0100c2d <cprintf>
f0101bfb:	83 c4 10             	add    $0x10,%esp
f0101bfe:	eb 3d                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101c00:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101c04:	75 20                	jne    f0101c26 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101c06:	83 ec 0c             	sub    $0xc,%esp
f0101c09:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c0c:	e8 c5 b5 00 00       	call   f010d1d6 <setPageReplacmentAlgorithmLRU>
f0101c11:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101c14:	83 ec 0c             	sub    $0xc,%esp
f0101c17:	68 b4 3b 13 f0       	push   $0xf0133bb4
f0101c1c:	e8 0c f0 ff ff       	call   f0100c2d <cprintf>
f0101c21:	83 c4 10             	add    $0x10,%esp
f0101c24:	eb 17                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101c26:	83 ec 0c             	sub    $0xc,%esp
f0101c29:	68 f4 3b 13 f0       	push   $0xf0133bf4
f0101c2e:	e8 fa ef ff ff       	call   f0100c2d <cprintf>
f0101c33:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c3b:	eb 05                	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101c3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c42:	c9                   	leave  
f0101c43:	c3                   	ret    

f0101c44 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101c44:	55                   	push   %ebp
f0101c45:	89 e5                	mov    %esp,%ebp
f0101c47:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101c4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c4d:	83 c0 04             	add    $0x4,%eax
f0101c50:	8b 00                	mov    (%eax),%eax
f0101c52:	83 ec 04             	sub    $0x4,%esp
f0101c55:	6a 0a                	push   $0xa
f0101c57:	6a 00                	push   $0x0
f0101c59:	50                   	push   %eax
f0101c5a:	e8 20 eb 02 00       	call   f013077f <strtol>
f0101c5f:	83 c4 10             	add    $0x10,%esp
f0101c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101c65:	83 ec 0c             	sub    $0xc,%esp
f0101c68:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c6b:	e8 d9 b5 00 00       	call   f010d249 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101c70:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101c73:	83 ec 0c             	sub    $0xc,%esp
f0101c76:	68 48 3c 13 f0       	push   $0xf0133c48
f0101c7b:	e8 ad ef ff ff       	call   f0100c2d <cprintf>
f0101c80:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101c83:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c88:	c9                   	leave  
f0101c89:	c3                   	ret    

f0101c8a <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101c8a:	55                   	push   %ebp
f0101c8b:	89 e5                	mov    %esp,%ebp
f0101c8d:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101c90:	e8 74 b5 00 00       	call   f010d209 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101c95:	83 ec 0c             	sub    $0xc,%esp
f0101c98:	68 7c 3c 13 f0       	push   $0xf0133c7c
f0101c9d:	e8 8b ef ff ff       	call   f0100c2d <cprintf>
f0101ca2:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ca5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101caa:	c9                   	leave  
f0101cab:	c3                   	ret    

f0101cac <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101cac:	55                   	push   %ebp
f0101cad:	89 e5                	mov    %esp,%ebp
f0101caf:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101cb2:	e8 62 b5 00 00       	call   f010d219 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101cb7:	83 ec 0c             	sub    $0xc,%esp
f0101cba:	68 a8 3c 13 f0       	push   $0xf0133ca8
f0101cbf:	e8 69 ef ff ff       	call   f0100c2d <cprintf>
f0101cc4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101cc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ccc:	c9                   	leave  
f0101ccd:	c3                   	ret    

f0101cce <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101cce:	55                   	push   %ebp
f0101ccf:	89 e5                	mov    %esp,%ebp
f0101cd1:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101cd4:	e8 50 b5 00 00       	call   f010d229 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101cd9:	83 ec 0c             	sub    $0xc,%esp
f0101cdc:	68 d0 3c 13 f0       	push   $0xf0133cd0
f0101ce1:	e8 47 ef ff ff       	call   f0100c2d <cprintf>
f0101ce6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ce9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cee:	c9                   	leave  
f0101cef:	c3                   	ret    

f0101cf0 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101cf0:	55                   	push   %ebp
f0101cf1:	89 e5                	mov    %esp,%ebp
f0101cf3:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101cf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cf9:	83 c0 04             	add    $0x4,%eax
f0101cfc:	8b 00                	mov    (%eax),%eax
f0101cfe:	83 ec 04             	sub    $0x4,%esp
f0101d01:	6a 0a                	push   $0xa
f0101d03:	6a 00                	push   $0x0
f0101d05:	50                   	push   %eax
f0101d06:	e8 74 ea 02 00       	call   f013077f <strtol>
f0101d0b:	83 c4 10             	add    $0x10,%esp
f0101d0e:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101d11:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101d15:	83 ec 0c             	sub    $0xc,%esp
f0101d18:	50                   	push   %eax
f0101d19:	e8 b4 29 00 00       	call   f01046d2 <sched_init_RR>
f0101d1e:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101d21:	a0 88 84 6e f0       	mov    0xf06e8488,%al
f0101d26:	0f b6 c0             	movzbl %al,%eax
f0101d29:	83 ec 08             	sub    $0x8,%esp
f0101d2c:	50                   	push   %eax
f0101d2d:	68 04 3d 13 f0       	push   $0xf0133d04
f0101d32:	e8 f6 ee ff ff       	call   f0100c2d <cprintf>
f0101d37:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d3f:	c9                   	leave  
f0101d40:	c3                   	ret    

f0101d41 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101d41:	55                   	push   %ebp
f0101d42:	89 e5                	mov    %esp,%ebp
f0101d44:	53                   	push   %ebx
f0101d45:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101d48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d4b:	83 c0 04             	add    $0x4,%eax
f0101d4e:	8b 00                	mov    (%eax),%eax
f0101d50:	83 ec 04             	sub    $0x4,%esp
f0101d53:	6a 0a                	push   $0xa
f0101d55:	6a 00                	push   $0x0
f0101d57:	50                   	push   %eax
f0101d58:	e8 22 ea 02 00       	call   f013077f <strtol>
f0101d5d:	83 c4 10             	add    $0x10,%esp
f0101d60:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d63:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101d6a:	eb 2e                	jmp    f0101d9a <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d6f:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101d7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d7f:	01 d0                	add    %edx,%eax
f0101d81:	8b 00                	mov    (%eax),%eax
f0101d83:	83 ec 04             	sub    $0x4,%esp
f0101d86:	6a 0a                	push   $0xa
f0101d88:	6a 00                	push   $0x0
f0101d8a:	50                   	push   %eax
f0101d8b:	e8 ef e9 02 00       	call   f013077f <strtol>
f0101d90:	83 c4 10             	add    $0x10,%esp
f0101d93:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d97:	ff 45 f4             	incl   -0xc(%ebp)
f0101d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101da0:	7c ca                	jl     f0101d6c <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101da2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101da6:	83 ec 08             	sub    $0x8,%esp
f0101da9:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101dac:	52                   	push   %edx
f0101dad:	50                   	push   %eax
f0101dae:	e8 75 29 00 00       	call   f0104728 <sched_init_MLFQ>
f0101db3:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101db6:	83 ec 0c             	sub    $0xc,%esp
f0101db9:	68 3c 3d 13 f0       	push   $0xf0133d3c
f0101dbe:	e8 6a ee ff ff       	call   f0100c2d <cprintf>
f0101dc3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101dc6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dcd:	eb 21                	jmp    f0101df0 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0101dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd2:	05 88 84 6e f0       	add    $0xf06e8488,%eax
f0101dd7:	8a 00                	mov    (%eax),%al
f0101dd9:	0f b6 c0             	movzbl %al,%eax
f0101ddc:	83 ec 08             	sub    $0x8,%esp
f0101ddf:	50                   	push   %eax
f0101de0:	68 69 3d 13 f0       	push   $0xf0133d69
f0101de5:	e8 43 ee ff ff       	call   f0100c2d <cprintf>
f0101dea:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101ded:	ff 45 f0             	incl   -0x10(%ebp)
f0101df0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0101df5:	0f b6 c0             	movzbl %al,%eax
f0101df8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101dfb:	7f d2                	jg     f0101dcf <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0101dfd:	83 ec 0c             	sub    $0xc,%esp
f0101e00:	68 01 39 13 f0       	push   $0xf0133901
f0101e05:	e8 23 ee ff ff       	call   f0100c2d <cprintf>
f0101e0a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101e15:	c9                   	leave  
f0101e16:	c3                   	ret    

f0101e17 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0101e17:	55                   	push   %ebp
f0101e18:	89 e5                	mov    %esp,%ebp
f0101e1a:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0101e1d:	e8 39 25 00 00       	call   f010435b <isSchedMethodMLFQ>
f0101e22:	85 c0                	test   %eax,%eax
f0101e24:	74 59                	je     f0101e7f <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0101e26:	83 ec 0c             	sub    $0xc,%esp
f0101e29:	68 70 3d 13 f0       	push   $0xf0133d70
f0101e2e:	e8 fa ed ff ff       	call   f0100c2d <cprintf>
f0101e33:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101e3d:	eb 21                	jmp    f0101e60 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0101e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e42:	05 88 84 6e f0       	add    $0xf06e8488,%eax
f0101e47:	8a 00                	mov    (%eax),%al
f0101e49:	0f b6 c0             	movzbl %al,%eax
f0101e4c:	83 ec 08             	sub    $0x8,%esp
f0101e4f:	50                   	push   %eax
f0101e50:	68 69 3d 13 f0       	push   $0xf0133d69
f0101e55:	e8 d3 ed ff ff       	call   f0100c2d <cprintf>
f0101e5a:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e5d:	ff 45 f4             	incl   -0xc(%ebp)
f0101e60:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0101e65:	0f b6 c0             	movzbl %al,%eax
f0101e68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0101e6b:	7f d2                	jg     f0101e3f <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	68 01 39 13 f0       	push   $0xf0133901
f0101e75:	e8 b3 ed ff ff       	call   f0100c2d <cprintf>
f0101e7a:	83 c4 10             	add    $0x10,%esp
f0101e7d:	eb 34                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}
	else if (isSchedMethodRR())
f0101e7f:	e8 bd 24 00 00       	call   f0104341 <isSchedMethodRR>
f0101e84:	85 c0                	test   %eax,%eax
f0101e86:	74 1b                	je     f0101ea3 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0101e88:	a0 88 84 6e f0       	mov    0xf06e8488,%al
f0101e8d:	0f b6 c0             	movzbl %al,%eax
f0101e90:	83 ec 08             	sub    $0x8,%esp
f0101e93:	50                   	push   %eax
f0101e94:	68 a4 3d 13 f0       	push   $0xf0133da4
f0101e99:	e8 8f ed ff ff       	call   f0100c2d <cprintf>
f0101e9e:	83 c4 10             	add    $0x10,%esp
f0101ea1:	eb 10                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0101ea3:	83 ec 0c             	sub    $0xc,%esp
f0101ea6:	68 e0 3d 13 f0       	push   $0xf0133de0
f0101eab:	e8 7d ed ff ff       	call   f0100c2d <cprintf>
f0101eb0:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101eb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eb8:	c9                   	leave  
f0101eb9:	c3                   	ret    

f0101eba <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0101eba:	55                   	push   %ebp
f0101ebb:	89 e5                	mov    %esp,%ebp
f0101ebd:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0101ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ec3:	83 c0 04             	add    $0x4,%eax
f0101ec6:	8b 00                	mov    (%eax),%eax
f0101ec8:	83 ec 04             	sub    $0x4,%esp
f0101ecb:	6a 0a                	push   $0xa
f0101ecd:	6a 00                	push   $0x0
f0101ecf:	50                   	push   %eax
f0101ed0:	e8 aa e8 02 00       	call   f013077f <strtol>
f0101ed5:	83 c4 10             	add    $0x10,%esp
f0101ed8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0101edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ede:	0f b6 c0             	movzbl %al,%eax
f0101ee1:	83 ec 0c             	sub    $0xc,%esp
f0101ee4:	50                   	push   %eax
f0101ee5:	e8 d2 d7 02 00       	call   f012f6bc <chksch>
f0101eea:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0101eed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101ef1:	75 12                	jne    f0101f05 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0101ef3:	83 ec 0c             	sub    $0xc,%esp
f0101ef6:	68 08 3e 13 f0       	push   $0xf0133e08
f0101efb:	e8 2d ed ff ff       	call   f0100c2d <cprintf>
f0101f00:	83 c4 10             	add    $0x10,%esp
f0101f03:	eb 16                	jmp    f0101f1b <command_sch_test+0x61>
	else if (status == 1)
f0101f05:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101f09:	75 10                	jne    f0101f1b <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0101f0b:	83 ec 0c             	sub    $0xc,%esp
f0101f0e:	68 30 3e 13 f0       	push   $0xf0133e30
f0101f13:	e8 15 ed ff ff       	call   f0100c2d <cprintf>
f0101f18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f20:	c9                   	leave  
f0101f21:	c3                   	ret    

f0101f22 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0101f22:	55                   	push   %ebp
f0101f23:	89 e5                	mov    %esp,%ebp
f0101f25:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0101f28:	e8 4a b3 00 00       	call   f010d277 <isPageReplacmentAlgorithmCLOCK>
f0101f2d:	85 c0                	test   %eax,%eax
f0101f2f:	74 15                	je     f0101f46 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0101f31:	83 ec 0c             	sub    $0xc,%esp
f0101f34:	68 54 3e 13 f0       	push   $0xf0133e54
f0101f39:	e8 ef ec ff ff       	call   f0100c2d <cprintf>
f0101f3e:	83 c4 10             	add    $0x10,%esp
f0101f41:	e9 8c 00 00 00       	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0101f46:	83 ec 0c             	sub    $0xc,%esp
f0101f49:	6a 01                	push   $0x1
f0101f4b:	e8 11 b3 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f0101f50:	83 c4 10             	add    $0x10,%esp
f0101f53:	85 c0                	test   %eax,%eax
f0101f55:	74 12                	je     f0101f69 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0101f57:	83 ec 0c             	sub    $0xc,%esp
f0101f5a:	68 7c 3e 13 f0       	push   $0xf0133e7c
f0101f5f:	e8 c9 ec ff ff       	call   f0100c2d <cprintf>
f0101f64:	83 c4 10             	add    $0x10,%esp
f0101f67:	eb 69                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101f69:	83 ec 0c             	sub    $0xc,%esp
f0101f6c:	6a 02                	push   $0x2
f0101f6e:	e8 ee b2 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f0101f73:	83 c4 10             	add    $0x10,%esp
f0101f76:	85 c0                	test   %eax,%eax
f0101f78:	74 12                	je     f0101f8c <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0101f7a:	83 ec 0c             	sub    $0xc,%esp
f0101f7d:	68 bc 3e 13 f0       	push   $0xf0133ebc
f0101f82:	e8 a6 ec ff ff       	call   f0100c2d <cprintf>
f0101f87:	83 c4 10             	add    $0x10,%esp
f0101f8a:	eb 46                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0101f8c:	e8 01 b3 00 00       	call   f010d292 <isPageReplacmentAlgorithmFIFO>
f0101f91:	85 c0                	test   %eax,%eax
f0101f93:	74 12                	je     f0101fa7 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0101f95:	83 ec 0c             	sub    $0xc,%esp
f0101f98:	68 f8 3e 13 f0       	push   $0xf0133ef8
f0101f9d:	e8 8b ec ff ff       	call   f0100c2d <cprintf>
f0101fa2:	83 c4 10             	add    $0x10,%esp
f0101fa5:	eb 2b                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0101fa7:	e8 01 b3 00 00       	call   f010d2ad <isPageReplacmentAlgorithmModifiedCLOCK>
f0101fac:	85 c0                	test   %eax,%eax
f0101fae:	74 12                	je     f0101fc2 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0101fb0:	83 ec 0c             	sub    $0xc,%esp
f0101fb3:	68 1c 3f 13 f0       	push   $0xf0133f1c
f0101fb8:	e8 70 ec ff ff       	call   f0100c2d <cprintf>
f0101fbd:	83 c4 10             	add    $0x10,%esp
f0101fc0:	eb 10                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0101fc2:	83 ec 0c             	sub    $0xc,%esp
f0101fc5:	68 4c 3f 13 f0       	push   $0xf0133f4c
f0101fca:	e8 5e ec ff ff       	call   f0100c2d <cprintf>
f0101fcf:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fd7:	c9                   	leave  
f0101fd8:	c3                   	ret    

f0101fd9 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0101fd9:	55                   	push   %ebp
f0101fda:	89 e5                	mov    %esp,%ebp
f0101fdc:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0101fdf:	e8 ce ee ff ff       	call   f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0101fe4:	83 ec 0c             	sub    $0xc,%esp
f0101fe7:	68 78 3f 13 f0       	push   $0xf0133f78
f0101fec:	e8 3c ec ff ff       	call   f0100c2d <cprintf>
f0101ff1:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ff4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ff9:	c9                   	leave  
f0101ffa:	c3                   	ret    

f0101ffb <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0101ffb:	55                   	push   %ebp
f0101ffc:	89 e5                	mov    %esp,%ebp
f0101ffe:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102001:	e8 bc ee ff ff       	call   f0100ec2 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102006:	83 ec 0c             	sub    $0xc,%esp
f0102009:	68 a8 3f 13 f0       	push   $0xf0133fa8
f010200e:	e8 1a ec ff ff       	call   f0100c2d <cprintf>
f0102013:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102016:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010201b:	c9                   	leave  
f010201c:	c3                   	ret    

f010201d <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010201d:	55                   	push   %ebp
f010201e:	89 e5                	mov    %esp,%ebp
f0102020:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0102023:	e8 aa ee ff ff       	call   f0100ed2 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102028:	83 ec 0c             	sub    $0xc,%esp
f010202b:	68 d8 3f 13 f0       	push   $0xf0133fd8
f0102030:	e8 f8 eb ff ff       	call   f0100c2d <cprintf>
f0102035:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102038:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010203d:	c9                   	leave  
f010203e:	c3                   	ret    

f010203f <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010203f:	55                   	push   %ebp
f0102040:	89 e5                	mov    %esp,%ebp
f0102042:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102045:	e8 98 ee ff ff       	call   f0100ee2 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f010204a:	83 ec 0c             	sub    $0xc,%esp
f010204d:	68 08 40 13 f0       	push   $0xf0134008
f0102052:	e8 d6 eb ff ff       	call   f0100c2d <cprintf>
f0102057:	83 c4 10             	add    $0x10,%esp
	return 0;
f010205a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010205f:	c9                   	leave  
f0102060:	c3                   	ret    

f0102061 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102061:	55                   	push   %ebp
f0102062:	89 e5                	mov    %esp,%ebp
f0102064:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102067:	e8 86 ee ff ff       	call   f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>
f010206c:	84 c0                	test   %al,%al
f010206e:	74 12                	je     f0102082 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102070:	83 ec 0c             	sub    $0xc,%esp
f0102073:	68 38 40 13 f0       	push   $0xf0134038
f0102078:	e8 b0 eb ff ff       	call   f0100c2d <cprintf>
f010207d:	83 c4 10             	add    $0x10,%esp
f0102080:	eb 61                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102082:	e8 80 ee ff ff       	call   f0100f07 <isUHeapPlacementStrategyBESTFIT>
f0102087:	84 c0                	test   %al,%al
f0102089:	74 12                	je     f010209d <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f010208b:	83 ec 0c             	sub    $0xc,%esp
f010208e:	68 64 40 13 f0       	push   $0xf0134064
f0102093:	e8 95 eb ff ff       	call   f0100c2d <cprintf>
f0102098:	83 c4 10             	add    $0x10,%esp
f010209b:	eb 46                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010209d:	e8 7a ee ff ff       	call   f0100f1c <isUHeapPlacementStrategyNEXTFIT>
f01020a2:	84 c0                	test   %al,%al
f01020a4:	74 12                	je     f01020b8 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01020a6:	83 ec 0c             	sub    $0xc,%esp
f01020a9:	68 90 40 13 f0       	push   $0xf0134090
f01020ae:	e8 7a eb ff ff       	call   f0100c2d <cprintf>
f01020b3:	83 c4 10             	add    $0x10,%esp
f01020b6:	eb 2b                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01020b8:	e8 74 ee ff ff       	call   f0100f31 <isUHeapPlacementStrategyWORSTFIT>
f01020bd:	84 c0                	test   %al,%al
f01020bf:	74 12                	je     f01020d3 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01020c1:	83 ec 0c             	sub    $0xc,%esp
f01020c4:	68 bc 40 13 f0       	push   $0xf01340bc
f01020c9:	e8 5f eb ff ff       	call   f0100c2d <cprintf>
f01020ce:	83 c4 10             	add    $0x10,%esp
f01020d1:	eb 10                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01020d3:	83 ec 0c             	sub    $0xc,%esp
f01020d6:	68 e8 40 13 f0       	push   $0xf01340e8
f01020db:	e8 4d eb ff ff       	call   f0100c2d <cprintf>
f01020e0:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020e8:	c9                   	leave  
f01020e9:	c3                   	ret    

f01020ea <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01020ea:	55                   	push   %ebp
f01020eb:	89 e5                	mov    %esp,%ebp
f01020ed:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01020f0:	e8 05 ed ff ff       	call   f0100dfa <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01020f5:	83 ec 0c             	sub    $0xc,%esp
f01020f8:	68 14 41 13 f0       	push   $0xf0134114
f01020fd:	e8 2b eb ff ff       	call   f0100c2d <cprintf>
f0102102:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010210a:	c9                   	leave  
f010210b:	c3                   	ret    

f010210c <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010210c:	55                   	push   %ebp
f010210d:	89 e5                	mov    %esp,%ebp
f010210f:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0102112:	e8 f3 ec ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102117:	83 ec 0c             	sub    $0xc,%esp
f010211a:	68 14 41 13 f0       	push   $0xf0134114
f010211f:	e8 09 eb ff ff       	call   f0100c2d <cprintf>
f0102124:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102127:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212c:	c9                   	leave  
f010212d:	c3                   	ret    

f010212e <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010212e:	55                   	push   %ebp
f010212f:	89 e5                	mov    %esp,%ebp
f0102131:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0102134:	e8 e1 ec ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102139:	83 ec 0c             	sub    $0xc,%esp
f010213c:	68 48 41 13 f0       	push   $0xf0134148
f0102141:	e8 e7 ea ff ff       	call   f0100c2d <cprintf>
f0102146:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102149:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214e:	c9                   	leave  
f010214f:	c3                   	ret    

f0102150 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102150:	55                   	push   %ebp
f0102151:	89 e5                	mov    %esp,%ebp
f0102153:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102156:	e8 cf ec ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f010215b:	83 ec 0c             	sub    $0xc,%esp
f010215e:	68 78 41 13 f0       	push   $0xf0134178
f0102163:	e8 c5 ea ff ff       	call   f0100c2d <cprintf>
f0102168:	83 c4 10             	add    $0x10,%esp
	return 0;
f010216b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102170:	c9                   	leave  
f0102171:	c3                   	ret    

f0102172 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102172:	55                   	push   %ebp
f0102173:	89 e5                	mov    %esp,%ebp
f0102175:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102178:	e8 bd ec ff ff       	call   f0100e3a <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f010217d:	83 ec 0c             	sub    $0xc,%esp
f0102180:	68 a8 41 13 f0       	push   $0xf01341a8
f0102185:	e8 a3 ea ff ff       	call   f0100c2d <cprintf>
f010218a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010218d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102192:	c9                   	leave  
f0102193:	c3                   	ret    

f0102194 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102194:	55                   	push   %ebp
f0102195:	89 e5                	mov    %esp,%ebp
f0102197:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010219a:	e8 ab ec ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f010219f:	84 c0                	test   %al,%al
f01021a1:	74 12                	je     f01021b5 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01021a3:	83 ec 0c             	sub    $0xc,%esp
f01021a6:	68 dc 41 13 f0       	push   $0xf01341dc
f01021ab:	e8 7d ea ff ff       	call   f0100c2d <cprintf>
f01021b0:	83 c4 10             	add    $0x10,%esp
f01021b3:	eb 7c                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01021b5:	e8 a4 ec ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01021ba:	84 c0                	test   %al,%al
f01021bc:	74 12                	je     f01021d0 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01021be:	83 ec 0c             	sub    $0xc,%esp
f01021c1:	68 18 42 13 f0       	push   $0xf0134218
f01021c6:	e8 62 ea ff ff       	call   f0100c2d <cprintf>
f01021cb:	83 c4 10             	add    $0x10,%esp
f01021ce:	eb 61                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01021d0:	e8 9e ec ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01021d5:	84 c0                	test   %al,%al
f01021d7:	74 12                	je     f01021eb <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01021d9:	83 ec 0c             	sub    $0xc,%esp
f01021dc:	68 48 42 13 f0       	push   $0xf0134248
f01021e1:	e8 47 ea ff ff       	call   f0100c2d <cprintf>
f01021e6:	83 c4 10             	add    $0x10,%esp
f01021e9:	eb 46                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01021eb:	e8 98 ec ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f01021f0:	84 c0                	test   %al,%al
f01021f2:	74 12                	je     f0102206 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01021f4:	83 ec 0c             	sub    $0xc,%esp
f01021f7:	68 74 42 13 f0       	push   $0xf0134274
f01021fc:	e8 2c ea ff ff       	call   f0100c2d <cprintf>
f0102201:	83 c4 10             	add    $0x10,%esp
f0102204:	eb 2b                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102206:	e8 92 ec ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f010220b:	84 c0                	test   %al,%al
f010220d:	74 12                	je     f0102221 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010220f:	83 ec 0c             	sub    $0xc,%esp
f0102212:	68 a0 42 13 f0       	push   $0xf01342a0
f0102217:	e8 11 ea ff ff       	call   f0100c2d <cprintf>
f010221c:	83 c4 10             	add    $0x10,%esp
f010221f:	eb 10                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0102221:	83 ec 0c             	sub    $0xc,%esp
f0102224:	68 d0 42 13 f0       	push   $0xf01342d0
f0102229:	e8 ff e9 ff ff       	call   f0100c2d <cprintf>
f010222e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102231:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102236:	c9                   	leave  
f0102237:	c3                   	ret    

f0102238 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102238:	55                   	push   %ebp
f0102239:	89 e5                	mov    %esp,%ebp
f010223b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010223e:	e8 e1 b0 00 00       	call   f010d324 <isBufferingEnabled>
f0102243:	84 c0                	test   %al,%al
f0102245:	75 12                	jne    f0102259 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 00 43 13 f0       	push   $0xf0134300
f010224f:	e8 d9 e9 ff ff       	call   f0100c2d <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 1d                	jmp    f0102276 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	6a 00                	push   $0x0
f010225e:	e8 9b b0 00 00       	call   f010d2fe <enableModifiedBuffer>
f0102263:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102266:	83 ec 0c             	sub    $0xc,%esp
f0102269:	68 3c 43 13 f0       	push   $0xf013433c
f010226e:	e8 ba e9 ff ff       	call   f0100c2d <cprintf>
f0102273:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010227b:	c9                   	leave  
f010227c:	c3                   	ret    

f010227d <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f010227d:	55                   	push   %ebp
f010227e:	89 e5                	mov    %esp,%ebp
f0102280:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102283:	e8 9c b0 00 00       	call   f010d324 <isBufferingEnabled>
f0102288:	84 c0                	test   %al,%al
f010228a:	75 12                	jne    f010229e <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010228c:	83 ec 0c             	sub    $0xc,%esp
f010228f:	68 00 43 13 f0       	push   $0xf0134300
f0102294:	e8 94 e9 ff ff       	call   f0100c2d <cprintf>
f0102299:	83 c4 10             	add    $0x10,%esp
f010229c:	eb 1d                	jmp    f01022bb <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f010229e:	83 ec 0c             	sub    $0xc,%esp
f01022a1:	6a 01                	push   $0x1
f01022a3:	e8 56 b0 00 00       	call   f010d2fe <enableModifiedBuffer>
f01022a8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01022ab:	83 ec 0c             	sub    $0xc,%esp
f01022ae:	68 60 43 13 f0       	push   $0xf0134360
f01022b3:	e8 75 e9 ff ff       	call   f0100c2d <cprintf>
f01022b8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01022bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022c0:	c9                   	leave  
f01022c1:	c3                   	ret    

f01022c2 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01022c2:	55                   	push   %ebp
f01022c3:	89 e5                	mov    %esp,%ebp
f01022c5:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01022c8:	83 ec 0c             	sub    $0xc,%esp
f01022cb:	6a 00                	push   $0x0
f01022cd:	e8 44 b0 00 00       	call   f010d316 <enableBuffering>
f01022d2:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01022d5:	83 ec 0c             	sub    $0xc,%esp
f01022d8:	6a 00                	push   $0x0
f01022da:	e8 1f b0 00 00       	call   f010d2fe <enableModifiedBuffer>
f01022df:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01022e2:	83 ec 0c             	sub    $0xc,%esp
f01022e5:	68 80 43 13 f0       	push   $0xf0134380
f01022ea:	e8 3e e9 ff ff       	call   f0100c2d <cprintf>
f01022ef:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f7:	c9                   	leave  
f01022f8:	c3                   	ret    

f01022f9 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01022ff:	83 ec 0c             	sub    $0xc,%esp
f0102302:	6a 01                	push   $0x1
f0102304:	e8 0d b0 00 00       	call   f010d316 <enableBuffering>
f0102309:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010230c:	83 ec 0c             	sub    $0xc,%esp
f010230f:	6a 01                	push   $0x1
f0102311:	e8 e8 af 00 00       	call   f010d2fe <enableModifiedBuffer>
f0102316:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102319:	e8 1e b0 00 00       	call   f010d33c <getModifiedBufferLength>
f010231e:	85 c0                	test   %eax,%eax
f0102320:	75 59                	jne    f010237b <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 9c 43 13 f0       	push   $0xf013439c
f010232a:	e8 fe e8 ff ff       	call   f0100c2d <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0102332:	83 ec 08             	sub    $0x8,%esp
f0102335:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102338:	50                   	push   %eax
f0102339:	68 cc 43 13 f0       	push   $0xf01343cc
f010233e:	e8 d6 de 02 00       	call   f0130219 <readline>
f0102343:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102346:	83 ec 04             	sub    $0x4,%esp
f0102349:	6a 0a                	push   $0xa
f010234b:	6a 00                	push   $0x0
f010234d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102350:	50                   	push   %eax
f0102351:	e8 29 e4 02 00       	call   f013077f <strtol>
f0102356:	83 c4 10             	add    $0x10,%esp
f0102359:	83 ec 0c             	sub    $0xc,%esp
f010235c:	50                   	push   %eax
f010235d:	e8 cc af 00 00       	call   f010d32e <setModifiedBufferLength>
f0102362:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102365:	e8 d2 af 00 00       	call   f010d33c <getModifiedBufferLength>
f010236a:	83 ec 08             	sub    $0x8,%esp
f010236d:	50                   	push   %eax
f010236e:	68 f8 43 13 f0       	push   $0xf01343f8
f0102373:	e8 b5 e8 ff ff       	call   f0100c2d <cprintf>
f0102378:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f010237b:	83 ec 0c             	sub    $0xc,%esp
f010237e:	68 1d 44 13 f0       	push   $0xf013441d
f0102383:	e8 a5 e8 ff ff       	call   f0100c2d <cprintf>
f0102388:	83 c4 10             	add    $0x10,%esp
	return 0;
f010238b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102390:	c9                   	leave  
f0102391:	c3                   	ret    

f0102392 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102392:	55                   	push   %ebp
f0102393:	89 e5                	mov    %esp,%ebp
f0102395:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102398:	e8 87 af 00 00       	call   f010d324 <isBufferingEnabled>
f010239d:	84 c0                	test   %al,%al
f010239f:	75 12                	jne    f01023b3 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01023a1:	83 ec 0c             	sub    $0xc,%esp
f01023a4:	68 38 44 13 f0       	push   $0xf0134438
f01023a9:	e8 7f e8 ff ff       	call   f0100c2d <cprintf>
f01023ae:	83 c4 10             	add    $0x10,%esp
f01023b1:	eb 19                	jmp    f01023cc <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01023b3:	e8 54 af 00 00       	call   f010d30c <isModifiedBufferEnabled>
f01023b8:	84 c0                	test   %al,%al
f01023ba:	75 10                	jne    f01023cc <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01023bc:	83 ec 0c             	sub    $0xc,%esp
f01023bf:	68 88 44 13 f0       	push   $0xf0134488
f01023c4:	e8 64 e8 ff ff       	call   f0100c2d <cprintf>
f01023c9:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01023cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023cf:	83 c0 04             	add    $0x4,%eax
f01023d2:	8b 00                	mov    (%eax),%eax
f01023d4:	83 ec 04             	sub    $0x4,%esp
f01023d7:	6a 0a                	push   $0xa
f01023d9:	6a 00                	push   $0x0
f01023db:	50                   	push   %eax
f01023dc:	e8 9e e3 02 00       	call   f013077f <strtol>
f01023e1:	83 c4 10             	add    $0x10,%esp
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	50                   	push   %eax
f01023e8:	e8 41 af 00 00       	call   f010d32e <setModifiedBufferLength>
f01023ed:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01023f0:	e8 47 af 00 00       	call   f010d33c <getModifiedBufferLength>
f01023f5:	83 ec 08             	sub    $0x8,%esp
f01023f8:	50                   	push   %eax
f01023f9:	68 f8 43 13 f0       	push   $0xf01343f8
f01023fe:	e8 2a e8 ff ff       	call   f0100c2d <cprintf>
f0102403:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102406:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010240b:	c9                   	leave  
f010240c:	c3                   	ret    

f010240d <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010240d:	55                   	push   %ebp
f010240e:	89 e5                	mov    %esp,%ebp
f0102410:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102413:	e8 0c af 00 00       	call   f010d324 <isBufferingEnabled>
f0102418:	84 c0                	test   %al,%al
f010241a:	75 12                	jne    f010242e <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010241c:	83 ec 0c             	sub    $0xc,%esp
f010241f:	68 38 44 13 f0       	push   $0xf0134438
f0102424:	e8 04 e8 ff ff       	call   f0100c2d <cprintf>
f0102429:	83 c4 10             	add    $0x10,%esp
f010242c:	eb 19                	jmp    f0102447 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010242e:	e8 d9 ae 00 00       	call   f010d30c <isModifiedBufferEnabled>
f0102433:	84 c0                	test   %al,%al
f0102435:	75 10                	jne    f0102447 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102437:	83 ec 0c             	sub    $0xc,%esp
f010243a:	68 88 44 13 f0       	push   $0xf0134488
f010243f:	e8 e9 e7 ff ff       	call   f0100c2d <cprintf>
f0102444:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102447:	e8 f0 ae 00 00       	call   f010d33c <getModifiedBufferLength>
f010244c:	83 ec 08             	sub    $0x8,%esp
f010244f:	50                   	push   %eax
f0102450:	68 ce 44 13 f0       	push   $0xf01344ce
f0102455:	e8 d3 e7 ff ff       	call   f0100c2d <cprintf>
f010245a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010245d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102462:	c9                   	leave  
f0102463:	c3                   	ret    

f0102464 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102464:	55                   	push   %ebp
f0102465:	89 e5                	mov    %esp,%ebp
f0102467:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f010246a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102471:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102475:	75 1b                	jne    f0102492 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102477:	8b 45 0c             	mov    0xc(%ebp),%eax
f010247a:	83 c0 04             	add    $0x4,%eax
f010247d:	8b 00                	mov    (%eax),%eax
f010247f:	83 ec 04             	sub    $0x4,%esp
f0102482:	6a 0a                	push   $0xa
f0102484:	6a 00                	push   $0x0
f0102486:	50                   	push   %eax
f0102487:	e8 f3 e2 02 00       	call   f013077f <strtol>
f010248c:	83 c4 10             	add    $0x10,%esp
f010248f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102492:	e8 b3 e9 ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f0102497:	84 c0                	test   %al,%al
f0102499:	74 0a                	je     f01024a5 <command_test_kmalloc+0x41>
		test_kmalloc();
f010249b:	e8 8b 46 01 00       	call   f0116b2b <test_kmalloc>
f01024a0:	e9 e8 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01024a5:	e8 b4 e9 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01024aa:	84 c0                	test   %al,%al
f01024ac:	74 44                	je     f01024f2 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01024ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024b2:	75 1a                	jne    f01024ce <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01024b4:	83 ec 0c             	sub    $0xc,%esp
f01024b7:	68 ec 44 13 f0       	push   $0xf01344ec
f01024bc:	e8 6c e7 ff ff       	call   f0100c2d <cprintf>
f01024c1:	83 c4 10             	add    $0x10,%esp
			return 0;
f01024c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01024c9:	e9 c4 00 00 00       	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01024ce:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01024d2:	75 0a                	jne    f01024de <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01024d4:	e8 db 94 01 00       	call   f011b9b4 <test_kmalloc_firstfit1>
f01024d9:	e9 af 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01024de:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01024e2:	0f 85 a5 00 00 00    	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01024e8:	e8 69 a8 01 00       	call   f011cd56 <test_kmalloc_firstfit2>
f01024ed:	e9 9b 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01024f2:	e8 7c e9 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01024f7:	84 c0                	test   %al,%al
f01024f9:	74 44                	je     f010253f <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f01024fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024ff:	75 17                	jne    f0102518 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102501:	83 ec 0c             	sub    $0xc,%esp
f0102504:	68 3c 45 13 f0       	push   $0xf013453c
f0102509:	e8 1f e7 ff ff       	call   f0100c2d <cprintf>
f010250e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102511:	b8 00 00 00 00       	mov    $0x0,%eax
f0102516:	eb 7a                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102518:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010251c:	75 07                	jne    f0102525 <command_test_kmalloc+0xc1>
			test_kmalloc();
f010251e:	e8 08 46 01 00       	call   f0116b2b <test_kmalloc>
f0102523:	eb 68                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102525:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102529:	75 07                	jne    f0102532 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f010252b:	e8 4e 6f 01 00       	call   f011947e <test_kmalloc_bestfit1>
f0102530:	eb 5b                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 3)
f0102532:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102536:	75 55                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102538:	e8 97 81 01 00       	call   f011a6d4 <test_kmalloc_bestfit2>
f010253d:	eb 4e                	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010253f:	e8 44 e9 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102544:	84 c0                	test   %al,%al
f0102546:	74 37                	je     f010257f <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102548:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010254c:	75 17                	jne    f0102565 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010254e:	83 ec 0c             	sub    $0xc,%esp
f0102551:	68 8c 45 13 f0       	push   $0xf013458c
f0102556:	e8 d2 e6 ff ff       	call   f0100c2d <cprintf>
f010255b:	83 c4 10             	add    $0x10,%esp
			return 0;
f010255e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102563:	eb 2d                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102565:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102569:	75 07                	jne    f0102572 <command_test_kmalloc+0x10e>
			test_kmalloc();
f010256b:	e8 bb 45 01 00       	call   f0116b2b <test_kmalloc>
f0102570:	eb 1b                	jmp    f010258d <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102572:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102576:	75 15                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102578:	e8 0c 58 01 00       	call   f0117d89 <test_kmalloc_nextfit>
f010257d:	eb 0e                	jmp    f010258d <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010257f:	e8 19 e9 ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f0102584:	84 c0                	test   %al,%al
f0102586:	74 05                	je     f010258d <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102588:	e8 5e b6 01 00       	call   f011dbeb <test_kmalloc_worstfit>
	return 0;
f010258d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102592:	c9                   	leave  
f0102593:	c3                   	ret    

f0102594 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102594:	55                   	push   %ebp
f0102595:	89 e5                	mov    %esp,%ebp
f0102597:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010259a:	e8 d4 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f010259f:	84 c0                	test   %al,%al
f01025a1:	75 09                	jne    f01025ac <command_test_kfree+0x18>
f01025a3:	e8 b6 e8 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01025a8:	84 c0                	test   %al,%al
f01025aa:	74 07                	je     f01025b3 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01025ac:	e8 dc ed 01 00       	call   f012138d <test_kfree_bestfirstfit>
f01025b1:	eb 05                	jmp    f01025b8 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01025b3:	e8 83 cc 01 00       	call   f011f23b <test_kfree>
	}
	return 0;
f01025b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025bd:	c9                   	leave  
f01025be:	c3                   	ret    

f01025bf <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01025bf:	55                   	push   %ebp
f01025c0:	89 e5                	mov    %esp,%ebp
f01025c2:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01025c5:	e8 bf 07 02 00       	call   f0122d89 <test_kheap_phys_addr>
	return 0;
f01025ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025cf:	c9                   	leave  
f01025d0:	c3                   	ret    

f01025d1 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01025d1:	55                   	push   %ebp
f01025d2:	89 e5                	mov    %esp,%ebp
f01025d4:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01025d7:	e8 7d 1c 02 00       	call   f0124259 <test_kheap_virt_addr>
	return 0;
f01025dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025e1:	c9                   	leave  
f01025e2:	c3                   	ret    

f01025e3 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01025e3:	55                   	push   %ebp
f01025e4:	89 e5                	mov    %esp,%ebp
f01025e6:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01025e9:	e8 48 31 02 00       	call   f0125736 <test_three_creation_functions>
	return 0;
f01025ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025f3:	c9                   	leave  
f01025f4:	c3                   	ret    

f01025f5 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01025f5:	55                   	push   %ebp
f01025f6:	89 e5                	mov    %esp,%ebp
f01025f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f01025fb:	e8 88 e8 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102600:	84 c0                	test   %al,%al
f0102602:	74 07                	je     f010260b <command_test_krealloc+0x16>
		test_krealloc();
f0102604:	e8 44 8b 02 00       	call   f012b14d <test_krealloc>
f0102609:	eb 0e                	jmp    f0102619 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f010260b:	e8 63 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102610:	84 c0                	test   %al,%al
f0102612:	74 05                	je     f0102619 <command_test_krealloc+0x24>
		test_krealloc_BF();
f0102614:	e8 e4 aa 02 00       	call   f012d0fd <test_krealloc_BF>
	return 0;
f0102619:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010261e:	c9                   	leave  
f010261f:	c3                   	ret    

f0102620 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102620:	55                   	push   %ebp
f0102621:	89 e5                	mov    %esp,%ebp
f0102623:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102626:	e8 33 31 01 00       	call   f011575e <test_priority_normal_and_higher>
	return 0;
f010262b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102630:	c9                   	leave  
f0102631:	c3                   	ret    

f0102632 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102632:	55                   	push   %ebp
f0102633:	89 e5                	mov    %esp,%ebp
f0102635:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102638:	e8 fb 3a 01 00       	call   f0116138 <test_priority_normal_and_lower>
	return 0;
f010263d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102642:	c9                   	leave  
f0102643:	c3                   	ret    

f0102644 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f0102644:	55                   	push   %ebp
f0102645:	89 e5                	mov    %esp,%ebp
f0102647:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010264a:	e8 21 33 02 00       	call   f0125970 <test_kfreeall>
	return 0;
f010264f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102654:	c9                   	leave  
f0102655:	c3                   	ret    

f0102656 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102656:	55                   	push   %ebp
f0102657:	89 e5                	mov    %esp,%ebp
f0102659:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010265c:	e8 fb 49 02 00       	call   f012705c <test_kexpand>
	return 0;
f0102661:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102666:	c9                   	leave  
f0102667:	c3                   	ret    

f0102668 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102668:	55                   	push   %ebp
f0102669:	89 e5                	mov    %esp,%ebp
f010266b:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010266e:	e8 6a 57 02 00       	call   f0127ddd <test_kshrink>
	return 0;
f0102673:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102678:	c9                   	leave  
f0102679:	c3                   	ret    

f010267a <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f010267a:	55                   	push   %ebp
f010267b:	89 e5                	mov    %esp,%ebp
f010267d:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102680:	e8 45 66 02 00       	call   f0128cca <test_kfreelast>
	return 0;
f0102685:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010268a:	c9                   	leave  
f010268b:	c3                   	ret    

f010268c <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010268c:	55                   	push   %ebp
f010268d:	89 e5                	mov    %esp,%ebp
f010268f:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102692:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102695:	83 c0 04             	add    $0x4,%eax
f0102698:	8b 00                	mov    (%eax),%eax
f010269a:	83 ec 04             	sub    $0x4,%esp
f010269d:	6a 0a                	push   $0xa
f010269f:	6a 00                	push   $0x0
f01026a1:	50                   	push   %eax
f01026a2:	e8 d8 e0 02 00       	call   f013077f <strtol>
f01026a7:	83 c4 10             	add    $0x10,%esp
f01026aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01026ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01026b4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026bb:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f01026c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01026c3:	eb 3d                	jmp    f0102702 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01026c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01026c8:	05 18 da 01 00       	add    $0x1da18,%eax
f01026cd:	83 ec 08             	sub    $0x8,%esp
f01026d0:	68 da 45 13 f0       	push   $0xf01345da
f01026d5:	50                   	push   %eax
f01026d6:	e8 50 de 02 00       	call   f013052b <strcmp>
f01026db:	83 c4 10             	add    $0x10,%esp
f01026de:	85 c0                	test   %eax,%eax
f01026e0:	75 12                	jne    f01026f4 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01026e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026e6:	74 07                	je     f01026ef <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01026e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01026ef:	ff 45 f4             	incl   -0xc(%ebp)
f01026f2:	eb 06                	jmp    f01026fa <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01026f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026f8:	74 31                	je     f010272b <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026fa:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f01026ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102702:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102706:	74 08                	je     f0102710 <command_test_sc_MLFQ+0x84>
f0102708:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010270b:	8b 40 44             	mov    0x44(%eax),%eax
f010270e:	eb 05                	jmp    f0102715 <command_test_sc_MLFQ+0x89>
f0102710:	b8 00 00 00 00       	mov    $0x0,%eax
f0102715:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f010271a:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f010271f:	85 c0                	test   %eax,%eax
f0102721:	75 a2                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102723:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102727:	75 9c                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102729:	eb 01                	jmp    f010272c <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010272b:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010272c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010272f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0102732:	75 12                	jne    f0102746 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f0102734:	83 ec 0c             	sub    $0xc,%esp
f0102737:	68 e4 45 13 f0       	push   $0xf01345e4
f010273c:	e8 ec e4 ff ff       	call   f0100c2d <cprintf>
f0102741:	83 c4 10             	add    $0x10,%esp
f0102744:	eb 17                	jmp    f010275d <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102746:	83 ec 04             	sub    $0x4,%esp
f0102749:	68 1d 46 13 f0       	push   $0xf013461d
f010274e:	68 8b 04 00 00       	push   $0x48b
f0102753:	68 79 38 13 f0       	push   $0xf0133879
f0102758:	e8 49 da ff ff       	call   f01001a6 <_panic>
	}
	return 0;
f010275d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102762:	c9                   	leave  
f0102763:	c3                   	ret    

f0102764 <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f0102764:	55                   	push   %ebp
f0102765:	89 e5                	mov    %esp,%ebp
f0102767:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010276a:	e8 a0 d9 00 00       	call   f011010f <TestAutoCompleteCommand>
f010276f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102772:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102777:	c9                   	leave  
f0102778:	c3                   	ret    

f0102779 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102779:	55                   	push   %ebp
f010277a:	89 e5                	mov    %esp,%ebp
f010277c:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010277f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102783:	74 1a                	je     f010279f <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102785:	83 ec 0c             	sub    $0xc,%esp
f0102788:	68 34 46 13 f0       	push   $0xf0134634
f010278d:	e8 9b e4 ff ff       	call   f0100c2d <cprintf>
f0102792:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102795:	b8 00 00 00 00       	mov    $0x0,%eax
f010279a:	e9 82 01 00 00       	jmp    f0102921 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f010279f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027a2:	83 c0 04             	add    $0x4,%eax
f01027a5:	8b 00                	mov    (%eax),%eax
f01027a7:	83 ec 08             	sub    $0x8,%esp
f01027aa:	68 6c 46 13 f0       	push   $0xf013466c
f01027af:	50                   	push   %eax
f01027b0:	e8 76 dd 02 00       	call   f013052b <strcmp>
f01027b5:	83 c4 10             	add    $0x10,%esp
f01027b8:	85 c0                	test   %eax,%eax
f01027ba:	75 0a                	jne    f01027c6 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01027bc:	e8 f8 ae 00 00       	call   f010d6b9 <test_initialize_MemBlocksList>
f01027c1:	e9 56 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01027c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027c9:	83 c0 04             	add    $0x4,%eax
f01027cc:	8b 00                	mov    (%eax),%eax
f01027ce:	83 ec 08             	sub    $0x8,%esp
f01027d1:	68 71 46 13 f0       	push   $0xf0134671
f01027d6:	50                   	push   %eax
f01027d7:	e8 4f dd 02 00       	call   f013052b <strcmp>
f01027dc:	83 c4 10             	add    $0x10,%esp
f01027df:	85 c0                	test   %eax,%eax
f01027e1:	75 0a                	jne    f01027ed <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01027e3:	e8 e5 af 00 00       	call   f010d7cd <test_insert_sorted_allocList>
f01027e8:	e9 2f 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01027ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027f0:	83 c0 04             	add    $0x4,%eax
f01027f3:	8b 00                	mov    (%eax),%eax
f01027f5:	83 ec 08             	sub    $0x8,%esp
f01027f8:	68 77 46 13 f0       	push   $0xf0134677
f01027fd:	50                   	push   %eax
f01027fe:	e8 28 dd 02 00       	call   f013052b <strcmp>
f0102803:	83 c4 10             	add    $0x10,%esp
f0102806:	85 c0                	test   %eax,%eax
f0102808:	75 0a                	jne    f0102814 <command_test_lists+0x9b>
	{
		test_find_block();
f010280a:	e8 7c b4 00 00       	call   f010dc8b <test_find_block>
f010280f:	e9 08 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102814:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102817:	83 c0 04             	add    $0x4,%eax
f010281a:	8b 00                	mov    (%eax),%eax
f010281c:	83 ec 08             	sub    $0x8,%esp
f010281f:	68 7c 46 13 f0       	push   $0xf013467c
f0102824:	50                   	push   %eax
f0102825:	e8 01 dd 02 00       	call   f013052b <strcmp>
f010282a:	83 c4 10             	add    $0x10,%esp
f010282d:	85 c0                	test   %eax,%eax
f010282f:	74 1d                	je     f010284e <command_test_lists+0xd5>
f0102831:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102834:	83 c0 04             	add    $0x4,%eax
f0102837:	8b 00                	mov    (%eax),%eax
f0102839:	83 ec 08             	sub    $0x8,%esp
f010283c:	68 7f 46 13 f0       	push   $0xf013467f
f0102841:	50                   	push   %eax
f0102842:	e8 e4 dc 02 00       	call   f013052b <strcmp>
f0102847:	83 c4 10             	add    $0x10,%esp
f010284a:	85 c0                	test   %eax,%eax
f010284c:	75 0a                	jne    f0102858 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f010284e:	e8 93 b7 00 00       	call   f010dfe6 <test_alloc_block_FF>
f0102853:	e9 c4 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102858:	8b 45 0c             	mov    0xc(%ebp),%eax
f010285b:	83 c0 04             	add    $0x4,%eax
f010285e:	8b 00                	mov    (%eax),%eax
f0102860:	83 ec 08             	sub    $0x8,%esp
f0102863:	68 82 46 13 f0       	push   $0xf0134682
f0102868:	50                   	push   %eax
f0102869:	e8 bd dc 02 00       	call   f013052b <strcmp>
f010286e:	83 c4 10             	add    $0x10,%esp
f0102871:	85 c0                	test   %eax,%eax
f0102873:	74 1d                	je     f0102892 <command_test_lists+0x119>
f0102875:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102878:	83 c0 04             	add    $0x4,%eax
f010287b:	8b 00                	mov    (%eax),%eax
f010287d:	83 ec 08             	sub    $0x8,%esp
f0102880:	68 85 46 13 f0       	push   $0xf0134685
f0102885:	50                   	push   %eax
f0102886:	e8 a0 dc 02 00       	call   f013052b <strcmp>
f010288b:	83 c4 10             	add    $0x10,%esp
f010288e:	85 c0                	test   %eax,%eax
f0102890:	75 0a                	jne    f010289c <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102892:	e8 cd bb 00 00       	call   f010e464 <test_alloc_block_BF>
f0102897:	e9 80 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 08             	sub    $0x8,%esp
f01028a7:	68 88 46 13 f0       	push   $0xf0134688
f01028ac:	50                   	push   %eax
f01028ad:	e8 79 dc 02 00       	call   f013052b <strcmp>
f01028b2:	83 c4 10             	add    $0x10,%esp
f01028b5:	85 c0                	test   %eax,%eax
f01028b7:	74 1d                	je     f01028d6 <command_test_lists+0x15d>
f01028b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028bc:	83 c0 04             	add    $0x4,%eax
f01028bf:	8b 00                	mov    (%eax),%eax
f01028c1:	83 ec 08             	sub    $0x8,%esp
f01028c4:	68 8b 46 13 f0       	push   $0xf013468b
f01028c9:	50                   	push   %eax
f01028ca:	e8 5c dc 02 00       	call   f013052b <strcmp>
f01028cf:	83 c4 10             	add    $0x10,%esp
f01028d2:	85 c0                	test   %eax,%eax
f01028d4:	75 07                	jne    f01028dd <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f01028d6:	e8 10 c2 00 00       	call   f010eaeb <test_alloc_block_NF>
f01028db:	eb 3f                	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f01028dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e0:	83 c0 04             	add    $0x4,%eax
f01028e3:	8b 00                	mov    (%eax),%eax
f01028e5:	83 ec 08             	sub    $0x8,%esp
f01028e8:	68 8e 46 13 f0       	push   $0xf013468e
f01028ed:	50                   	push   %eax
f01028ee:	e8 38 dc 02 00       	call   f013052b <strcmp>
f01028f3:	83 c4 10             	add    $0x10,%esp
f01028f6:	85 c0                	test   %eax,%eax
f01028f8:	74 1d                	je     f0102917 <command_test_lists+0x19e>
f01028fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028fd:	83 c0 04             	add    $0x4,%eax
f0102900:	8b 00                	mov    (%eax),%eax
f0102902:	83 ec 08             	sub    $0x8,%esp
f0102905:	68 94 46 13 f0       	push   $0xf0134694
f010290a:	50                   	push   %eax
f010290b:	e8 1b dc 02 00       	call   f013052b <strcmp>
f0102910:	83 c4 10             	add    $0x10,%esp
f0102913:	85 c0                	test   %eax,%eax
f0102915:	75 05                	jne    f010291c <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102917:	e8 5d ca 00 00       	call   f010f379 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102929:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010292d:	74 1a                	je     f0102949 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010292f:	83 ec 0c             	sub    $0xc,%esp
f0102932:	68 9c 46 13 f0       	push   $0xf013469c
f0102937:	e8 f1 e2 ff ff       	call   f0100c2d <cprintf>
f010293c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010293f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102944:	e9 e1 00 00 00       	jmp    f0102a2a <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102949:	8b 45 0c             	mov    0xc(%ebp),%eax
f010294c:	83 c0 04             	add    $0x4,%eax
f010294f:	8b 00                	mov    (%eax),%eax
f0102951:	83 ec 08             	sub    $0x8,%esp
f0102954:	68 d5 46 13 f0       	push   $0xf01346d5
f0102959:	50                   	push   %eax
f010295a:	e8 cc db 02 00       	call   f013052b <strcmp>
f010295f:	83 c4 10             	add    $0x10,%esp
f0102962:	85 c0                	test   %eax,%eax
f0102964:	75 0a                	jne    f0102970 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102966:	e8 38 e2 00 00       	call   f0110ba3 <test_cut_paste_pages>
f010296b:	e9 b5 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102970:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102973:	83 c0 04             	add    $0x4,%eax
f0102976:	8b 00                	mov    (%eax),%eax
f0102978:	83 ec 08             	sub    $0x8,%esp
f010297b:	68 de 46 13 f0       	push   $0xf01346de
f0102980:	50                   	push   %eax
f0102981:	e8 a5 db 02 00       	call   f013052b <strcmp>
f0102986:	83 c4 10             	add    $0x10,%esp
f0102989:	85 c0                	test   %eax,%eax
f010298b:	75 0a                	jne    f0102997 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f010298d:	e8 5c ec 00 00       	call   f01115ee <test_copy_paste_chunk>
f0102992:	e9 8e 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102997:	8b 45 0c             	mov    0xc(%ebp),%eax
f010299a:	83 c0 04             	add    $0x4,%eax
f010299d:	8b 00                	mov    (%eax),%eax
f010299f:	83 ec 08             	sub    $0x8,%esp
f01029a2:	68 e8 46 13 f0       	push   $0xf01346e8
f01029a7:	50                   	push   %eax
f01029a8:	e8 7e db 02 00       	call   f013052b <strcmp>
f01029ad:	83 c4 10             	add    $0x10,%esp
f01029b0:	85 c0                	test   %eax,%eax
f01029b2:	75 07                	jne    f01029bb <command_test_chunks+0x98>
	{
		test_share_chunk();
f01029b4:	e8 33 fd 00 00       	call   f01126ec <test_share_chunk>
f01029b9:	eb 6a                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f01029bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029be:	83 c0 04             	add    $0x4,%eax
f01029c1:	8b 00                	mov    (%eax),%eax
f01029c3:	83 ec 08             	sub    $0x8,%esp
f01029c6:	68 ee 46 13 f0       	push   $0xf01346ee
f01029cb:	50                   	push   %eax
f01029cc:	e8 5a db 02 00       	call   f013052b <strcmp>
f01029d1:	83 c4 10             	add    $0x10,%esp
f01029d4:	85 c0                	test   %eax,%eax
f01029d6:	75 07                	jne    f01029df <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f01029d8:	e8 37 07 01 00       	call   f0113114 <test_allocate_chunk>
f01029dd:	eb 46                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f01029df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029e2:	83 c0 04             	add    $0x4,%eax
f01029e5:	8b 00                	mov    (%eax),%eax
f01029e7:	83 ec 08             	sub    $0x8,%esp
f01029ea:	68 f7 46 13 f0       	push   $0xf01346f7
f01029ef:	50                   	push   %eax
f01029f0:	e8 36 db 02 00       	call   f013052b <strcmp>
f01029f5:	83 c4 10             	add    $0x10,%esp
f01029f8:	85 c0                	test   %eax,%eax
f01029fa:	75 07                	jne    f0102a03 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f01029fc:	e8 c2 0f 01 00       	call   f01139c3 <test_calculate_required_frames>
f0102a01:	eb 22                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102a03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a06:	83 c0 04             	add    $0x4,%eax
f0102a09:	8b 00                	mov    (%eax),%eax
f0102a0b:	83 ec 08             	sub    $0x8,%esp
f0102a0e:	68 06 47 13 f0       	push   $0xf0134706
f0102a13:	50                   	push   %eax
f0102a14:	e8 12 db 02 00       	call   f013052b <strcmp>
f0102a19:	83 c4 10             	add    $0x10,%esp
f0102a1c:	85 c0                	test   %eax,%eax
f0102a1e:	75 05                	jne    f0102a25 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102a20:	e8 12 18 01 00       	call   f0114237 <test_calculate_allocated_space>
	}
	return 0;
f0102a25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a2a:	c9                   	leave  
f0102a2b:	c3                   	ret    

f0102a2c <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102a2c:	55                   	push   %ebp
f0102a2d:	89 e5                	mov    %esp,%ebp
f0102a2f:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a32:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a36:	74 1a                	je     f0102a52 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102a38:	83 ec 0c             	sub    $0xc,%esp
f0102a3b:	68 18 47 13 f0       	push   $0xf0134718
f0102a40:	e8 e8 e1 ff ff       	call   f0100c2d <cprintf>
f0102a45:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a48:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a4d:	e9 e1 00 00 00       	jmp    f0102b33 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102a52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a55:	83 c0 04             	add    $0x4,%eax
f0102a58:	8b 00                	mov    (%eax),%eax
f0102a5a:	83 ec 08             	sub    $0x8,%esp
f0102a5d:	68 4e 47 13 f0       	push   $0xf013474e
f0102a62:	50                   	push   %eax
f0102a63:	e8 c3 da 02 00       	call   f013052b <strcmp>
f0102a68:	83 c4 10             	add    $0x10,%esp
f0102a6b:	85 c0                	test   %eax,%eax
f0102a6d:	75 0a                	jne    f0102a79 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102a6f:	e8 20 d8 00 00       	call   f0110294 <test_pt_set_page_permissions>
f0102a74:	e9 b5 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102a79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a7c:	83 c0 04             	add    $0x4,%eax
f0102a7f:	8b 00                	mov    (%eax),%eax
f0102a81:	83 ec 08             	sub    $0x8,%esp
f0102a84:	68 56 47 13 f0       	push   $0xf0134756
f0102a89:	50                   	push   %eax
f0102a8a:	e8 9c da 02 00       	call   f013052b <strcmp>
f0102a8f:	83 c4 10             	add    $0x10,%esp
f0102a92:	85 c0                	test   %eax,%eax
f0102a94:	75 0a                	jne    f0102aa0 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102a96:	e8 5c da 00 00       	call   f01104f7 <test_pt_set_page_permissions_invalid_va>
f0102a9b:	e9 8e 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aa3:	83 c0 04             	add    $0x4,%eax
f0102aa6:	8b 00                	mov    (%eax),%eax
f0102aa8:	83 ec 08             	sub    $0x8,%esp
f0102aab:	68 5e 47 13 f0       	push   $0xf013475e
f0102ab0:	50                   	push   %eax
f0102ab1:	e8 75 da 02 00       	call   f013052b <strcmp>
f0102ab6:	83 c4 10             	add    $0x10,%esp
f0102ab9:	85 c0                	test   %eax,%eax
f0102abb:	75 07                	jne    f0102ac4 <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102abd:	e8 7e da 00 00       	call   f0110540 <test_pt_get_page_permissions>
f0102ac2:	eb 6a                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac7:	83 c0 04             	add    $0x4,%eax
f0102aca:	8b 00                	mov    (%eax),%eax
f0102acc:	83 ec 08             	sub    $0x8,%esp
f0102acf:	68 66 47 13 f0       	push   $0xf0134766
f0102ad4:	50                   	push   %eax
f0102ad5:	e8 51 da 02 00       	call   f013052b <strcmp>
f0102ada:	83 c4 10             	add    $0x10,%esp
f0102add:	85 c0                	test   %eax,%eax
f0102adf:	75 07                	jne    f0102ae8 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102ae1:	e8 9e db 00 00       	call   f0110684 <test_pt_clear_page_table_entry>
f0102ae6:	eb 46                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aeb:	83 c0 04             	add    $0x4,%eax
f0102aee:	8b 00                	mov    (%eax),%eax
f0102af0:	83 ec 08             	sub    $0x8,%esp
f0102af3:	68 6d 47 13 f0       	push   $0xf013476d
f0102af8:	50                   	push   %eax
f0102af9:	e8 2d da 02 00       	call   f013052b <strcmp>
f0102afe:	83 c4 10             	add    $0x10,%esp
f0102b01:	85 c0                	test   %eax,%eax
f0102b03:	75 07                	jne    f0102b0c <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102b05:	e8 d3 dc 00 00       	call   f01107dd <test_pt_clear_page_table_entry_invalid_va>
f0102b0a:	eb 22                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 74 47 13 f0       	push   $0xf0134774
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 09 da 02 00       	call   f013052b <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 05                	jne    f0102b2e <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102b29:	e8 e7 dc 00 00       	call   f0110815 <test_virtual_to_physical>
	}
	return 0;
f0102b2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b33:	c9                   	leave  
f0102b34:	c3                   	ret    

f0102b35 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102b35:	55                   	push   %ebp
f0102b36:	89 e5                	mov    %esp,%ebp
f0102b38:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b3e:	83 c0 08             	add    $0x8,%eax
f0102b41:	8b 00                	mov    (%eax),%eax
f0102b43:	83 ec 08             	sub    $0x8,%esp
f0102b46:	68 78 47 13 f0       	push   $0xf0134778
f0102b4b:	50                   	push   %eax
f0102b4c:	e8 da d9 02 00       	call   f013052b <strcmp>
f0102b51:	83 c4 10             	add    $0x10,%esp
f0102b54:	85 c0                	test   %eax,%eax
f0102b56:	75 20                	jne    f0102b78 <command_test_kheap+0x43>
f0102b58:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b5c:	74 1a                	je     f0102b78 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102b5e:	83 ec 0c             	sub    $0xc,%esp
f0102b61:	68 80 47 13 f0       	push   $0xf0134780
f0102b66:	e8 c2 e0 ff ff       	call   f0100c2d <cprintf>
f0102b6b:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b73:	e9 33 03 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7b:	83 c0 08             	add    $0x8,%eax
f0102b7e:	8b 00                	mov    (%eax),%eax
f0102b80:	83 ec 08             	sub    $0x8,%esp
f0102b83:	68 78 47 13 f0       	push   $0xf0134778
f0102b88:	50                   	push   %eax
f0102b89:	e8 9d d9 02 00       	call   f013052b <strcmp>
f0102b8e:	83 c4 10             	add    $0x10,%esp
f0102b91:	85 c0                	test   %eax,%eax
f0102b93:	74 20                	je     f0102bb5 <command_test_kheap+0x80>
f0102b95:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b99:	74 1a                	je     f0102bb5 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102b9b:	83 ec 0c             	sub    $0xc,%esp
f0102b9e:	68 d0 47 13 f0       	push   $0xf01347d0
f0102ba3:	e8 85 e0 ff ff       	call   f0100c2d <cprintf>
f0102ba8:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bab:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bb0:	e9 f6 02 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bb8:	83 c0 04             	add    $0x4,%eax
f0102bbb:	8b 00                	mov    (%eax),%eax
f0102bbd:	83 ec 08             	sub    $0x8,%esp
f0102bc0:	68 7c 46 13 f0       	push   $0xf013467c
f0102bc5:	50                   	push   %eax
f0102bc6:	e8 60 d9 02 00       	call   f013052b <strcmp>
f0102bcb:	83 c4 10             	add    $0x10,%esp
f0102bce:	85 c0                	test   %eax,%eax
f0102bd0:	74 1d                	je     f0102bef <command_test_kheap+0xba>
f0102bd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bd5:	83 c0 04             	add    $0x4,%eax
f0102bd8:	8b 00                	mov    (%eax),%eax
f0102bda:	83 ec 08             	sub    $0x8,%esp
f0102bdd:	68 7f 46 13 f0       	push   $0xf013467f
f0102be2:	50                   	push   %eax
f0102be3:	e8 43 d9 02 00       	call   f013052b <strcmp>
f0102be8:	83 c4 10             	add    $0x10,%esp
f0102beb:	85 c0                	test   %eax,%eax
f0102bed:	75 1a                	jne    f0102c09 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102bef:	e8 16 e2 ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102bf4:	83 ec 0c             	sub    $0xc,%esp
f0102bf7:	68 18 42 13 f0       	push   $0xf0134218
f0102bfc:	e8 2c e0 ff ff       	call   f0100c2d <cprintf>
f0102c01:	83 c4 10             	add    $0x10,%esp
f0102c04:	e9 a0 00 00 00       	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102c09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0c:	83 c0 04             	add    $0x4,%eax
f0102c0f:	8b 00                	mov    (%eax),%eax
f0102c11:	83 ec 08             	sub    $0x8,%esp
f0102c14:	68 82 46 13 f0       	push   $0xf0134682
f0102c19:	50                   	push   %eax
f0102c1a:	e8 0c d9 02 00       	call   f013052b <strcmp>
f0102c1f:	83 c4 10             	add    $0x10,%esp
f0102c22:	85 c0                	test   %eax,%eax
f0102c24:	74 1d                	je     f0102c43 <command_test_kheap+0x10e>
f0102c26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c29:	83 c0 04             	add    $0x4,%eax
f0102c2c:	8b 00                	mov    (%eax),%eax
f0102c2e:	83 ec 08             	sub    $0x8,%esp
f0102c31:	68 85 46 13 f0       	push   $0xf0134685
f0102c36:	50                   	push   %eax
f0102c37:	e8 ef d8 02 00       	call   f013052b <strcmp>
f0102c3c:	83 c4 10             	add    $0x10,%esp
f0102c3f:	85 c0                	test   %eax,%eax
f0102c41:	75 17                	jne    f0102c5a <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102c43:	e8 d2 e1 ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102c48:	83 ec 0c             	sub    $0xc,%esp
f0102c4b:	68 48 42 13 f0       	push   $0xf0134248
f0102c50:	e8 d8 df ff ff       	call   f0100c2d <cprintf>
f0102c55:	83 c4 10             	add    $0x10,%esp
f0102c58:	eb 4f                	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c5d:	83 c0 04             	add    $0x4,%eax
f0102c60:	8b 00                	mov    (%eax),%eax
f0102c62:	83 ec 08             	sub    $0x8,%esp
f0102c65:	68 88 46 13 f0       	push   $0xf0134688
f0102c6a:	50                   	push   %eax
f0102c6b:	e8 bb d8 02 00       	call   f013052b <strcmp>
f0102c70:	83 c4 10             	add    $0x10,%esp
f0102c73:	85 c0                	test   %eax,%eax
f0102c75:	74 1d                	je     f0102c94 <command_test_kheap+0x15f>
f0102c77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c7a:	83 c0 04             	add    $0x4,%eax
f0102c7d:	8b 00                	mov    (%eax),%eax
f0102c7f:	83 ec 08             	sub    $0x8,%esp
f0102c82:	68 8b 46 13 f0       	push   $0xf013468b
f0102c87:	50                   	push   %eax
f0102c88:	e8 9e d8 02 00       	call   f013052b <strcmp>
f0102c8d:	83 c4 10             	add    $0x10,%esp
f0102c90:	85 c0                	test   %eax,%eax
f0102c92:	75 15                	jne    f0102ca9 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102c94:	e8 91 e1 ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102c99:	83 ec 0c             	sub    $0xc,%esp
f0102c9c:	68 74 42 13 f0       	push   $0xf0134274
f0102ca1:	e8 87 df ff ff       	call   f0100c2d <cprintf>
f0102ca6:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102ca9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cac:	83 c0 08             	add    $0x8,%eax
f0102caf:	8b 00                	mov    (%eax),%eax
f0102cb1:	83 ec 08             	sub    $0x8,%esp
f0102cb4:	68 78 47 13 f0       	push   $0xf0134778
f0102cb9:	50                   	push   %eax
f0102cba:	e8 6c d8 02 00       	call   f013052b <strcmp>
f0102cbf:	83 c4 10             	add    $0x10,%esp
f0102cc2:	85 c0                	test   %eax,%eax
f0102cc4:	0f 85 13 01 00 00    	jne    f0102ddd <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102cca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ccd:	83 c0 0c             	add    $0xc,%eax
f0102cd0:	8b 00                	mov    (%eax),%eax
f0102cd2:	83 ec 04             	sub    $0x4,%esp
f0102cd5:	6a 0a                	push   $0xa
f0102cd7:	6a 00                	push   $0x0
f0102cd9:	50                   	push   %eax
f0102cda:	e8 a0 da 02 00       	call   f013077f <strtol>
f0102cdf:	83 c4 10             	add    $0x10,%esp
f0102ce2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ce5:	e8 74 e1 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102cea:	84 c0                	test   %al,%al
f0102cec:	74 54                	je     f0102d42 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102cee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102cf2:	75 1a                	jne    f0102d0e <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102cf4:	83 ec 0c             	sub    $0xc,%esp
f0102cf7:	68 ec 44 13 f0       	push   $0xf01344ec
f0102cfc:	e8 2c df ff ff       	call   f0100c2d <cprintf>
f0102d01:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d04:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d09:	e9 9d 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102d0e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d12:	75 0a                	jne    f0102d1e <command_test_kheap+0x1e9>
				test_kmalloc();
f0102d14:	e8 12 3e 01 00       	call   f0116b2b <test_kmalloc>
f0102d19:	e9 b5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d1e:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d22:	75 0a                	jne    f0102d2e <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102d24:	e8 8b 8c 01 00       	call   f011b9b4 <test_kmalloc_firstfit1>
f0102d29:	e9 a5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d2e:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d32:	0f 85 9b 00 00 00    	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102d38:	e8 19 a0 01 00       	call   f011cd56 <test_kmalloc_firstfit2>
f0102d3d:	e9 91 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102d42:	e8 2c e1 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102d47:	84 c0                	test   %al,%al
f0102d49:	74 47                	je     f0102d92 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102d4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d4f:	75 1a                	jne    f0102d6b <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102d51:	83 ec 0c             	sub    $0xc,%esp
f0102d54:	68 3c 45 13 f0       	push   $0xf013453c
f0102d59:	e8 cf de ff ff       	call   f0100c2d <cprintf>
f0102d5e:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d61:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d66:	e9 40 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102d6b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d6f:	75 07                	jne    f0102d78 <command_test_kheap+0x243>
				test_kmalloc();
f0102d71:	e8 b5 3d 01 00       	call   f0116b2b <test_kmalloc>
f0102d76:	eb 5b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d78:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d7c:	75 07                	jne    f0102d85 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102d7e:	e8 fb 66 01 00       	call   f011947e <test_kmalloc_bestfit1>
f0102d83:	eb 4e                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d85:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d89:	75 48                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102d8b:	e8 44 79 01 00       	call   f011a6d4 <test_kmalloc_bestfit2>
f0102d90:	eb 41                	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102d92:	e8 f1 e0 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102d97:	84 c0                	test   %al,%al
f0102d99:	74 38                	je     f0102dd3 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102d9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d9f:	75 1a                	jne    f0102dbb <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102da1:	83 ec 0c             	sub    $0xc,%esp
f0102da4:	68 8c 45 13 f0       	push   $0xf013458c
f0102da9:	e8 7f de ff ff       	call   f0100c2d <cprintf>
f0102dae:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102db6:	e9 f0 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102dbb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102dbf:	75 07                	jne    f0102dc8 <command_test_kheap+0x293>
				test_kmalloc();
f0102dc1:	e8 65 3d 01 00       	call   f0116b2b <test_kmalloc>
f0102dc6:	eb 0b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102dc8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102dcc:	75 05                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102dce:	e8 b6 4f 01 00       	call   f0117d89 <test_kmalloc_nextfit>
		}
		return 0;
f0102dd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dd8:	e9 ce 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de0:	83 c0 08             	add    $0x8,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	83 ec 08             	sub    $0x8,%esp
f0102de8:	68 14 48 13 f0       	push   $0xf0134814
f0102ded:	50                   	push   %eax
f0102dee:	e8 38 d7 02 00       	call   f013052b <strcmp>
f0102df3:	83 c4 10             	add    $0x10,%esp
f0102df6:	85 c0                	test   %eax,%eax
f0102df8:	75 28                	jne    f0102e22 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102dfa:	e8 74 e0 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102dff:	84 c0                	test   %al,%al
f0102e01:	75 09                	jne    f0102e0c <command_test_kheap+0x2d7>
f0102e03:	e8 56 e0 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102e08:	84 c0                	test   %al,%al
f0102e0a:	74 07                	je     f0102e13 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0102e0c:	e8 7c e5 01 00       	call   f012138d <test_kfree_bestfirstfit>
f0102e11:	eb 05                	jmp    f0102e18 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f0102e13:	e8 23 c4 01 00       	call   f011f23b <test_kfree>
		}
		return 0;
f0102e18:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e1d:	e9 89 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f0102e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e25:	83 c0 08             	add    $0x8,%eax
f0102e28:	8b 00                	mov    (%eax),%eax
f0102e2a:	83 ec 08             	sub    $0x8,%esp
f0102e2d:	68 1a 48 13 f0       	push   $0xf013481a
f0102e32:	50                   	push   %eax
f0102e33:	e8 f3 d6 02 00       	call   f013052b <strcmp>
f0102e38:	83 c4 10             	add    $0x10,%esp
f0102e3b:	85 c0                	test   %eax,%eax
f0102e3d:	75 0c                	jne    f0102e4b <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f0102e3f:	e8 45 ff 01 00       	call   f0122d89 <test_kheap_phys_addr>
		return 0;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e49:	eb 60                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0102e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4e:	83 c0 08             	add    $0x8,%eax
f0102e51:	8b 00                	mov    (%eax),%eax
f0102e53:	83 ec 08             	sub    $0x8,%esp
f0102e56:	68 24 48 13 f0       	push   $0xf0134824
f0102e5b:	50                   	push   %eax
f0102e5c:	e8 ca d6 02 00       	call   f013052b <strcmp>
f0102e61:	83 c4 10             	add    $0x10,%esp
f0102e64:	85 c0                	test   %eax,%eax
f0102e66:	75 0c                	jne    f0102e74 <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0102e68:	e8 ec 13 02 00       	call   f0124259 <test_kheap_virt_addr>
		return 0;
f0102e6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e72:	eb 37                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f0102e74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e77:	83 c0 08             	add    $0x8,%eax
f0102e7a:	8b 00                	mov    (%eax),%eax
f0102e7c:	83 ec 08             	sub    $0x8,%esp
f0102e7f:	68 2e 48 13 f0       	push   $0xf013482e
f0102e84:	50                   	push   %eax
f0102e85:	e8 a1 d6 02 00       	call   f013052b <strcmp>
f0102e8a:	83 c4 10             	add    $0x10,%esp
f0102e8d:	85 c0                	test   %eax,%eax
f0102e8f:	75 15                	jne    f0102ea6 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0102e91:	e8 dd df ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102e96:	84 c0                	test   %al,%al
f0102e98:	74 05                	je     f0102e9f <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0102e9a:	e8 5e a2 02 00       	call   f012d0fd <test_krealloc_BF>
		}
		return 0;
f0102e9f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ea4:	eb 05                	jmp    f0102eab <command_test_kheap+0x376>
	}
	return 0;
f0102ea6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eab:	c9                   	leave  
f0102eac:	c3                   	ret    

f0102ead <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0102ead:	55                   	push   %ebp
f0102eae:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0102eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0102eb3:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0102eb9:	29 d0                	sub    %edx,%eax
f0102ebb:	c1 f8 03             	sar    $0x3,%eax
f0102ebe:	89 c2                	mov    %eax,%edx
f0102ec0:	89 d0                	mov    %edx,%eax
f0102ec2:	c1 e0 02             	shl    $0x2,%eax
f0102ec5:	01 d0                	add    %edx,%eax
f0102ec7:	c1 e0 02             	shl    $0x2,%eax
f0102eca:	01 d0                	add    %edx,%eax
f0102ecc:	c1 e0 02             	shl    $0x2,%eax
f0102ecf:	01 d0                	add    %edx,%eax
f0102ed1:	89 c1                	mov    %eax,%ecx
f0102ed3:	c1 e1 08             	shl    $0x8,%ecx
f0102ed6:	01 c8                	add    %ecx,%eax
f0102ed8:	89 c1                	mov    %eax,%ecx
f0102eda:	c1 e1 10             	shl    $0x10,%ecx
f0102edd:	01 c8                	add    %ecx,%eax
f0102edf:	01 c0                	add    %eax,%eax
f0102ee1:	01 d0                	add    %edx,%eax
}
f0102ee3:	5d                   	pop    %ebp
f0102ee4:	c3                   	ret    

f0102ee5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0102ee5:	55                   	push   %ebp
f0102ee6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0102ee8:	ff 75 08             	pushl  0x8(%ebp)
f0102eeb:	e8 bd ff ff ff       	call   f0102ead <to_frame_number>
f0102ef0:	83 c4 04             	add    $0x4,%esp
f0102ef3:	c1 e0 0c             	shl    $0xc,%eax
}
f0102ef6:	c9                   	leave  
f0102ef7:	c3                   	ret    

f0102ef8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0102ef8:	55                   	push   %ebp
f0102ef9:	89 e5                	mov    %esp,%ebp
f0102efb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102efe:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f01:	c1 e8 0c             	shr    $0xc,%eax
f0102f04:	89 c2                	mov    %eax,%edx
f0102f06:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0102f0b:	39 c2                	cmp    %eax,%edx
f0102f0d:	72 14                	jb     f0102f23 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102f0f:	83 ec 04             	sub    $0x4,%esp
f0102f12:	68 38 48 13 f0       	push   $0xf0134838
f0102f17:	6a 55                	push   $0x55
f0102f19:	68 60 48 13 f0       	push   $0xf0134860
f0102f1e:	e8 83 d2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0102f23:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0102f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f2c:	c1 e8 0c             	shr    $0xc,%eax
f0102f2f:	89 c1                	mov    %eax,%ecx
f0102f31:	89 c8                	mov    %ecx,%eax
f0102f33:	01 c0                	add    %eax,%eax
f0102f35:	01 c8                	add    %ecx,%eax
f0102f37:	c1 e0 03             	shl    $0x3,%eax
f0102f3a:	01 d0                	add    %edx,%eax
}
f0102f3c:	c9                   	leave  
f0102f3d:	c3                   	ret    

f0102f3e <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0102f3e:	55                   	push   %ebp
f0102f3f:	89 e5                	mov    %esp,%ebp
f0102f41:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f47:	05 00 14 00 00       	add    $0x1400,%eax
f0102f4c:	c1 e0 03             	shl    $0x3,%eax
f0102f4f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f52:	83 ec 04             	sub    $0x4,%esp
f0102f55:	6a 08                	push   $0x8
f0102f57:	ff 75 0c             	pushl  0xc(%ebp)
f0102f5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f5d:	e8 10 dc 02 00       	call   f0130b72 <ide_read>
f0102f62:	83 c4 10             	add    $0x10,%esp
f0102f65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0102f68:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102f6b:	c9                   	leave  
f0102f6c:	c3                   	ret    

f0102f6d <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0102f6d:	55                   	push   %ebp
f0102f6e:	89 e5                	mov    %esp,%ebp
f0102f70:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f76:	05 00 14 00 00       	add    $0x1400,%eax
f0102f7b:	c1 e0 03             	shl    $0x3,%eax
f0102f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f81:	83 ec 04             	sub    $0x4,%esp
f0102f84:	6a 08                	push   $0x8
f0102f86:	ff 75 0c             	pushl  0xc(%ebp)
f0102f89:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f8c:	e8 21 dd 02 00       	call   f0130cb2 <ide_write>
f0102f91:	83 c4 10             	add    $0x10,%esp
f0102f94:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0102f97:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102f9b:	74 14                	je     f0102fb1 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0102f9d:	83 ec 04             	sub    $0x4,%esp
f0102fa0:	68 82 48 13 f0       	push   $0xf0134882
f0102fa5:	6a 2e                	push   $0x2e
f0102fa7:	68 99 48 13 f0       	push   $0xf0134899
f0102fac:	e8 f5 d1 ff ff       	call   f01001a6 <_panic>
	return success;
f0102fb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102fb4:	c9                   	leave  
f0102fb5:	c3                   	ret    

f0102fb6 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0102fb6:	55                   	push   %ebp
f0102fb7:	89 e5                	mov    %esp,%ebp
f0102fb9:	53                   	push   %ebx
f0102fba:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0102fbd:	c7 05 14 85 6e f0 00 	movl   $0x0,0xf06e8514
f0102fc4:	00 00 00 
f0102fc7:	c7 05 18 85 6e f0 00 	movl   $0x0,0xf06e8518
f0102fce:	00 00 00 
f0102fd1:	c7 05 20 85 6e f0 00 	movl   $0x0,0xf06e8520
f0102fd8:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0102fdb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0102fe2:	e9 e8 00 00 00       	jmp    f01030cf <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0102fe7:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0102fed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102ff0:	89 d0                	mov    %edx,%eax
f0102ff2:	01 c0                	add    %eax,%eax
f0102ff4:	01 d0                	add    %edx,%eax
f0102ff6:	c1 e0 03             	shl    $0x3,%eax
f0102ff9:	01 c8                	add    %ecx,%eax
f0102ffb:	83 ec 0c             	sub    $0xc,%esp
f0102ffe:	50                   	push   %eax
f0102fff:	e8 8b 37 00 00       	call   f010678f <initialize_frame_info>
f0103004:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103007:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f010300d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103010:	89 d0                	mov    %edx,%eax
f0103012:	01 c0                	add    %eax,%eax
f0103014:	01 d0                	add    %edx,%eax
f0103016:	c1 e0 03             	shl    $0x3,%eax
f0103019:	01 c8                	add    %ecx,%eax
f010301b:	85 c0                	test   %eax,%eax
f010301d:	75 14                	jne    f0103033 <initialize_disk_page_file+0x7d>
f010301f:	83 ec 04             	sub    $0x4,%esp
f0103022:	68 b8 48 13 f0       	push   $0xf01348b8
f0103027:	6a 59                	push   $0x59
f0103029:	68 99 48 13 f0       	push   $0xf0134899
f010302e:	e8 73 d1 ff ff       	call   f01001a6 <_panic>
f0103033:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103039:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010303c:	89 d0                	mov    %edx,%eax
f010303e:	01 c0                	add    %eax,%eax
f0103040:	01 d0                	add    %edx,%eax
f0103042:	c1 e0 03             	shl    $0x3,%eax
f0103045:	01 c8                	add    %ecx,%eax
f0103047:	8b 15 14 85 6e f0    	mov    0xf06e8514,%edx
f010304d:	89 10                	mov    %edx,(%eax)
f010304f:	8b 00                	mov    (%eax),%eax
f0103051:	85 c0                	test   %eax,%eax
f0103053:	74 1f                	je     f0103074 <initialize_disk_page_file+0xbe>
f0103055:	8b 15 14 85 6e f0    	mov    0xf06e8514,%edx
f010305b:	8b 1d 00 01 68 f0    	mov    0xf0680100,%ebx
f0103061:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103064:	89 c8                	mov    %ecx,%eax
f0103066:	01 c0                	add    %eax,%eax
f0103068:	01 c8                	add    %ecx,%eax
f010306a:	c1 e0 03             	shl    $0x3,%eax
f010306d:	01 d8                	add    %ebx,%eax
f010306f:	89 42 04             	mov    %eax,0x4(%edx)
f0103072:	eb 19                	jmp    f010308d <initialize_disk_page_file+0xd7>
f0103074:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f010307a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010307d:	89 d0                	mov    %edx,%eax
f010307f:	01 c0                	add    %eax,%eax
f0103081:	01 d0                	add    %edx,%eax
f0103083:	c1 e0 03             	shl    $0x3,%eax
f0103086:	01 c8                	add    %ecx,%eax
f0103088:	a3 18 85 6e f0       	mov    %eax,0xf06e8518
f010308d:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103093:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103096:	89 d0                	mov    %edx,%eax
f0103098:	01 c0                	add    %eax,%eax
f010309a:	01 d0                	add    %edx,%eax
f010309c:	c1 e0 03             	shl    $0x3,%eax
f010309f:	01 c8                	add    %ecx,%eax
f01030a1:	a3 14 85 6e f0       	mov    %eax,0xf06e8514
f01030a6:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f01030ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01030af:	89 d0                	mov    %edx,%eax
f01030b1:	01 c0                	add    %eax,%eax
f01030b3:	01 d0                	add    %edx,%eax
f01030b5:	c1 e0 03             	shl    $0x3,%eax
f01030b8:	01 c8                	add    %ecx,%eax
f01030ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01030c1:	a1 20 85 6e f0       	mov    0xf06e8520,%eax
f01030c6:	40                   	inc    %eax
f01030c7:	a3 20 85 6e f0       	mov    %eax,0xf06e8520
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01030cc:	ff 45 f4             	incl   -0xc(%ebp)
f01030cf:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01030d6:	0f 8e 0b ff ff ff    	jle    f0102fe7 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01030dc:	90                   	nop
f01030dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030e0:	c9                   	leave  
f01030e1:	c3                   	ret    

f01030e2 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01030e2:	55                   	push   %ebp
f01030e3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01030e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01030e8:	8b 15 00 01 68 f0    	mov    0xf0680100,%edx
f01030ee:	29 d0                	sub    %edx,%eax
f01030f0:	c1 f8 03             	sar    $0x3,%eax
f01030f3:	89 c2                	mov    %eax,%edx
f01030f5:	89 d0                	mov    %edx,%eax
f01030f7:	c1 e0 02             	shl    $0x2,%eax
f01030fa:	01 d0                	add    %edx,%eax
f01030fc:	c1 e0 02             	shl    $0x2,%eax
f01030ff:	01 d0                	add    %edx,%eax
f0103101:	c1 e0 02             	shl    $0x2,%eax
f0103104:	01 d0                	add    %edx,%eax
f0103106:	89 c1                	mov    %eax,%ecx
f0103108:	c1 e1 08             	shl    $0x8,%ecx
f010310b:	01 c8                	add    %ecx,%eax
f010310d:	89 c1                	mov    %eax,%ecx
f010310f:	c1 e1 10             	shl    $0x10,%ecx
f0103112:	01 c8                	add    %ecx,%eax
f0103114:	01 c0                	add    %eax,%eax
f0103116:	01 d0                	add    %edx,%eax
}
f0103118:	5d                   	pop    %ebp
f0103119:	c3                   	ret    

f010311a <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010311a:	55                   	push   %ebp
f010311b:	89 e5                	mov    %esp,%ebp
f010311d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103120:	a1 14 85 6e f0       	mov    0xf06e8514,%eax
f0103125:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103128:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010312c:	75 0a                	jne    f0103138 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010312e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103133:	e9 a7 00 00 00       	jmp    f01031df <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103138:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010313c:	75 14                	jne    f0103152 <allocate_disk_frame+0x38>
f010313e:	83 ec 04             	sub    $0x4,%esp
f0103141:	68 db 48 13 f0       	push   $0xf01348db
f0103146:	6a 78                	push   $0x78
f0103148:	68 99 48 13 f0       	push   $0xf0134899
f010314d:	e8 54 d0 ff ff       	call   f01001a6 <_panic>
f0103152:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103155:	8b 00                	mov    (%eax),%eax
f0103157:	85 c0                	test   %eax,%eax
f0103159:	74 10                	je     f010316b <allocate_disk_frame+0x51>
f010315b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010315e:	8b 00                	mov    (%eax),%eax
f0103160:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103163:	8b 52 04             	mov    0x4(%edx),%edx
f0103166:	89 50 04             	mov    %edx,0x4(%eax)
f0103169:	eb 0b                	jmp    f0103176 <allocate_disk_frame+0x5c>
f010316b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010316e:	8b 40 04             	mov    0x4(%eax),%eax
f0103171:	a3 18 85 6e f0       	mov    %eax,0xf06e8518
f0103176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103179:	8b 40 04             	mov    0x4(%eax),%eax
f010317c:	85 c0                	test   %eax,%eax
f010317e:	74 0f                	je     f010318f <allocate_disk_frame+0x75>
f0103180:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103183:	8b 40 04             	mov    0x4(%eax),%eax
f0103186:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103189:	8b 12                	mov    (%edx),%edx
f010318b:	89 10                	mov    %edx,(%eax)
f010318d:	eb 0a                	jmp    f0103199 <allocate_disk_frame+0x7f>
f010318f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103192:	8b 00                	mov    (%eax),%eax
f0103194:	a3 14 85 6e f0       	mov    %eax,0xf06e8514
f0103199:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010319c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01031a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031a5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01031ac:	a1 20 85 6e f0       	mov    0xf06e8520,%eax
f01031b1:	48                   	dec    %eax
f01031b2:	a3 20 85 6e f0       	mov    %eax,0xf06e8520
	initialize_frame_info(ptr_frame_info);
f01031b7:	83 ec 0c             	sub    $0xc,%esp
f01031ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01031bd:	e8 cd 35 00 00       	call   f010678f <initialize_frame_info>
f01031c2:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01031c5:	83 ec 0c             	sub    $0xc,%esp
f01031c8:	ff 75 f4             	pushl  -0xc(%ebp)
f01031cb:	e8 12 ff ff ff       	call   f01030e2 <to_disk_frame_number>
f01031d0:	83 c4 10             	add    $0x10,%esp
f01031d3:	89 c2                	mov    %eax,%edx
f01031d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01031d8:	89 10                	mov    %edx,(%eax)
	return 0;
f01031da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031df:	c9                   	leave  
f01031e0:	c3                   	ret    

f01031e1 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01031e1:	55                   	push   %ebp
f01031e2:	89 e5                	mov    %esp,%ebp
f01031e4:	53                   	push   %ebx
f01031e5:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01031e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01031ec:	0f 84 ca 00 00 00    	je     f01032bc <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01031f2:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f01031f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01031fb:	89 d0                	mov    %edx,%eax
f01031fd:	01 c0                	add    %eax,%eax
f01031ff:	01 d0                	add    %edx,%eax
f0103201:	c1 e0 03             	shl    $0x3,%eax
f0103204:	01 c8                	add    %ecx,%eax
f0103206:	85 c0                	test   %eax,%eax
f0103208:	75 17                	jne    f0103221 <free_disk_frame+0x40>
f010320a:	83 ec 04             	sub    $0x4,%esp
f010320d:	68 b8 48 13 f0       	push   $0xf01348b8
f0103212:	68 85 00 00 00       	push   $0x85
f0103217:	68 99 48 13 f0       	push   $0xf0134899
f010321c:	e8 85 cf ff ff       	call   f01001a6 <_panic>
f0103221:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103227:	8b 55 08             	mov    0x8(%ebp),%edx
f010322a:	89 d0                	mov    %edx,%eax
f010322c:	01 c0                	add    %eax,%eax
f010322e:	01 d0                	add    %edx,%eax
f0103230:	c1 e0 03             	shl    $0x3,%eax
f0103233:	01 c8                	add    %ecx,%eax
f0103235:	8b 15 14 85 6e f0    	mov    0xf06e8514,%edx
f010323b:	89 10                	mov    %edx,(%eax)
f010323d:	8b 00                	mov    (%eax),%eax
f010323f:	85 c0                	test   %eax,%eax
f0103241:	74 1f                	je     f0103262 <free_disk_frame+0x81>
f0103243:	8b 15 14 85 6e f0    	mov    0xf06e8514,%edx
f0103249:	8b 1d 00 01 68 f0    	mov    0xf0680100,%ebx
f010324f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103252:	89 c8                	mov    %ecx,%eax
f0103254:	01 c0                	add    %eax,%eax
f0103256:	01 c8                	add    %ecx,%eax
f0103258:	c1 e0 03             	shl    $0x3,%eax
f010325b:	01 d8                	add    %ebx,%eax
f010325d:	89 42 04             	mov    %eax,0x4(%edx)
f0103260:	eb 19                	jmp    f010327b <free_disk_frame+0x9a>
f0103262:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103268:	8b 55 08             	mov    0x8(%ebp),%edx
f010326b:	89 d0                	mov    %edx,%eax
f010326d:	01 c0                	add    %eax,%eax
f010326f:	01 d0                	add    %edx,%eax
f0103271:	c1 e0 03             	shl    $0x3,%eax
f0103274:	01 c8                	add    %ecx,%eax
f0103276:	a3 18 85 6e f0       	mov    %eax,0xf06e8518
f010327b:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103281:	8b 55 08             	mov    0x8(%ebp),%edx
f0103284:	89 d0                	mov    %edx,%eax
f0103286:	01 c0                	add    %eax,%eax
f0103288:	01 d0                	add    %edx,%eax
f010328a:	c1 e0 03             	shl    $0x3,%eax
f010328d:	01 c8                	add    %ecx,%eax
f010328f:	a3 14 85 6e f0       	mov    %eax,0xf06e8514
f0103294:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f010329a:	8b 55 08             	mov    0x8(%ebp),%edx
f010329d:	89 d0                	mov    %edx,%eax
f010329f:	01 c0                	add    %eax,%eax
f01032a1:	01 d0                	add    %edx,%eax
f01032a3:	c1 e0 03             	shl    $0x3,%eax
f01032a6:	01 c8                	add    %ecx,%eax
f01032a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032af:	a1 20 85 6e f0       	mov    0xf06e8520,%eax
f01032b4:	40                   	inc    %eax
f01032b5:	a3 20 85 6e f0       	mov    %eax,0xf06e8520
f01032ba:	eb 01                	jmp    f01032bd <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01032bc:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01032bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032c0:	c9                   	leave  
f01032c1:	c3                   	ret    

f01032c2 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01032c2:	55                   	push   %ebp
f01032c3:	89 e5                	mov    %esp,%ebp
f01032c5:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01032c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032cb:	c1 e8 16             	shr    $0x16,%eax
f01032ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01032d8:	01 d0                	add    %edx,%eax
f01032da:	8b 00                	mov    (%eax),%eax
f01032dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01032df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01032e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01032ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01032ed:	c1 e8 0c             	shr    $0xc,%eax
f01032f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01032f3:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01032f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01032fb:	72 17                	jb     f0103314 <get_disk_page_table+0x52>
f01032fd:	ff 75 f0             	pushl  -0x10(%ebp)
f0103300:	68 fc 48 13 f0       	push   $0xf01348fc
f0103305:	68 92 00 00 00       	push   $0x92
f010330a:	68 99 48 13 f0       	push   $0xf0134899
f010330f:	e8 92 ce ff ff       	call   f01001a6 <_panic>
f0103314:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103317:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010331c:	89 c2                	mov    %eax,%edx
f010331e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103321:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103323:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103327:	0f 85 b7 00 00 00    	jne    f01033e4 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010332d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103331:	0f 84 9d 00 00 00    	je     f01033d4 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103337:	83 ec 0c             	sub    $0xc,%esp
f010333a:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010333d:	50                   	push   %eax
f010333e:	e8 67 34 00 00       	call   f01067aa <allocate_frame>
f0103343:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103346:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103349:	83 ec 0c             	sub    $0xc,%esp
f010334c:	50                   	push   %eax
f010334d:	e8 93 fb ff ff       	call   f0102ee5 <to_physical_address>
f0103352:	83 c4 10             	add    $0x10,%esp
f0103355:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103358:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010335b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010335e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103361:	c1 e8 0c             	shr    $0xc,%eax
f0103364:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103367:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f010336c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010336f:	72 17                	jb     f0103388 <get_disk_page_table+0xc6>
f0103371:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103374:	68 fc 48 13 f0       	push   $0xf01348fc
f0103379:	68 ae 00 00 00       	push   $0xae
f010337e:	68 99 48 13 f0       	push   $0xf0134899
f0103383:	e8 1e ce ff ff       	call   f01001a6 <_panic>
f0103388:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010338b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103390:	89 c2                	mov    %eax,%edx
f0103392:	8b 45 14             	mov    0x14(%ebp),%eax
f0103395:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103397:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010339a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f01033a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033a3:	c1 e8 16             	shr    $0x16,%eax
f01033a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01033ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01033b0:	01 d0                	add    %edx,%eax
f01033b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01033b5:	83 ca 01             	or     $0x1,%edx
f01033b8:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01033ba:	8b 45 14             	mov    0x14(%ebp),%eax
f01033bd:	8b 00                	mov    (%eax),%eax
f01033bf:	83 ec 04             	sub    $0x4,%esp
f01033c2:	68 00 10 00 00       	push   $0x1000
f01033c7:	6a 00                	push   $0x0
f01033c9:	50                   	push   %eax
f01033ca:	e8 3e d2 02 00       	call   f013060d <memset>
f01033cf:	83 c4 10             	add    $0x10,%esp
f01033d2:	eb 10                	jmp    f01033e4 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01033d4:	8b 45 14             	mov    0x14(%ebp),%eax
f01033d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01033dd:	b8 00 00 00 00       	mov    $0x0,%eax
f01033e2:	eb 05                	jmp    f01033e9 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01033e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e9:	c9                   	leave  
f01033ea:	c3                   	ret    

f01033eb <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01033eb:	55                   	push   %ebp
f01033ec:	89 e5                	mov    %esp,%ebp
f01033ee:	83 ec 28             	sub    $0x28,%esp
f01033f1:	8b 45 10             	mov    0x10(%ebp),%eax
f01033f4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01033f7:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01033fb:	74 75                	je     f0103472 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01033fd:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103404:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103407:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010340c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010340f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103412:	ba 00 00 00 00       	mov    $0x0,%edx
f0103417:	f7 75 f4             	divl   -0xc(%ebp)
f010341a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010341d:	29 d0                	sub    %edx,%eax
f010341f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103422:	73 32                	jae    f0103456 <pf_add_empty_env_page+0x6b>
f0103424:	8b 45 08             	mov    0x8(%ebp),%eax
f0103427:	8b 90 14 da 01 00    	mov    0x1da14(%eax),%edx
f010342d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103432:	29 d0                	sub    %edx,%eax
f0103434:	c1 e0 0c             	shl    $0xc,%eax
f0103437:	2d 00 20 40 11       	sub    $0x11402000,%eax
f010343c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010343f:	76 15                	jbe    f0103456 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103441:	8b 45 08             	mov    0x8(%ebp),%eax
f0103444:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f010344a:	8d 50 01             	lea    0x1(%eax),%edx
f010344d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103450:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103456:	a1 bc 84 6e f0       	mov    0xf06e84bc,%eax
f010345b:	83 ec 04             	sub    $0x4,%esp
f010345e:	50                   	push   %eax
f010345f:	ff 75 0c             	pushl  0xc(%ebp)
f0103462:	ff 75 08             	pushl  0x8(%ebp)
f0103465:	e8 b2 00 00 00       	call   f010351c <pf_add_env_page>
f010346a:	83 c4 10             	add    $0x10,%esp
f010346d:	e9 a8 00 00 00       	jmp    f010351a <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103472:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103479:	76 19                	jbe    f0103494 <pf_add_empty_env_page+0xa9>
f010347b:	68 2c 49 13 f0       	push   $0xf013492c
f0103480:	68 52 49 13 f0       	push   $0xf0134952
f0103485:	68 d1 00 00 00       	push   $0xd1
f010348a:	68 99 48 13 f0       	push   $0xf0134899
f010348f:	e8 12 cd ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103494:	8b 45 08             	mov    0x8(%ebp),%eax
f0103497:	83 c0 64             	add    $0x64,%eax
f010349a:	83 ec 08             	sub    $0x8,%esp
f010349d:	50                   	push   %eax
f010349e:	ff 75 08             	pushl  0x8(%ebp)
f01034a1:	e8 46 06 00 00       	call   f0103aec <get_disk_page_directory>
f01034a6:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01034a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01034ac:	8b 40 64             	mov    0x64(%eax),%eax
f01034af:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01034b2:	52                   	push   %edx
f01034b3:	6a 01                	push   $0x1
f01034b5:	ff 75 0c             	pushl  0xc(%ebp)
f01034b8:	50                   	push   %eax
f01034b9:	e8 04 fe ff ff       	call   f01032c2 <get_disk_page_table>
f01034be:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01034c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01034c7:	c1 ea 0c             	shr    $0xc,%edx
f01034ca:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01034d0:	c1 e2 02             	shl    $0x2,%edx
f01034d3:	01 d0                	add    %edx,%eax
f01034d5:	8b 00                	mov    (%eax),%eax
f01034d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01034da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01034dd:	85 c0                	test   %eax,%eax
f01034df:	75 34                	jne    f0103515 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01034e1:	83 ec 0c             	sub    $0xc,%esp
f01034e4:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01034e7:	50                   	push   %eax
f01034e8:	e8 2d fc ff ff       	call   f010311a <allocate_disk_frame>
f01034ed:	83 c4 10             	add    $0x10,%esp
f01034f0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01034f3:	75 07                	jne    f01034fc <pf_add_empty_env_page+0x111>
f01034f5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01034fa:	eb 1e                	jmp    f010351a <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01034fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103502:	c1 ea 0c             	shr    $0xc,%edx
f0103505:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010350b:	c1 e2 02             	shl    $0x2,%edx
f010350e:	01 c2                	add    %eax,%edx
f0103510:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103513:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103515:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010351a:	c9                   	leave  
f010351b:	c3                   	ret    

f010351c <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010351c:	55                   	push   %ebp
f010351d:	89 e5                	mov    %esp,%ebp
f010351f:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103522:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103529:	76 19                	jbe    f0103544 <pf_add_env_page+0x28>
f010352b:	68 2c 49 13 f0       	push   $0xf013492c
f0103530:	68 52 49 13 f0       	push   $0xf0134952
f0103535:	68 e6 00 00 00       	push   $0xe6
f010353a:	68 99 48 13 f0       	push   $0xf0134899
f010353f:	e8 62 cc ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103544:	8b 45 08             	mov    0x8(%ebp),%eax
f0103547:	83 c0 64             	add    $0x64,%eax
f010354a:	83 ec 08             	sub    $0x8,%esp
f010354d:	50                   	push   %eax
f010354e:	ff 75 08             	pushl  0x8(%ebp)
f0103551:	e8 96 05 00 00       	call   f0103aec <get_disk_page_directory>
f0103556:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103559:	8b 45 08             	mov    0x8(%ebp),%eax
f010355c:	8b 40 64             	mov    0x64(%eax),%eax
f010355f:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103562:	52                   	push   %edx
f0103563:	6a 01                	push   $0x1
f0103565:	ff 75 0c             	pushl  0xc(%ebp)
f0103568:	50                   	push   %eax
f0103569:	e8 54 fd ff ff       	call   f01032c2 <get_disk_page_table>
f010356e:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103571:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103574:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103577:	c1 ea 0c             	shr    $0xc,%edx
f010357a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103580:	c1 e2 02             	shl    $0x2,%edx
f0103583:	01 d0                	add    %edx,%eax
f0103585:	8b 00                	mov    (%eax),%eax
f0103587:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010358a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010358d:	85 c0                	test   %eax,%eax
f010358f:	75 34                	jne    f01035c5 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103591:	83 ec 0c             	sub    $0xc,%esp
f0103594:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103597:	50                   	push   %eax
f0103598:	e8 7d fb ff ff       	call   f010311a <allocate_disk_frame>
f010359d:	83 c4 10             	add    $0x10,%esp
f01035a0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01035a3:	75 07                	jne    f01035ac <pf_add_env_page+0x90>
f01035a5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01035aa:	eb 31                	jmp    f01035dd <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01035ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035af:	8b 55 0c             	mov    0xc(%ebp),%edx
f01035b2:	c1 ea 0c             	shr    $0xc,%edx
f01035b5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01035bb:	c1 e2 02             	shl    $0x2,%edx
f01035be:	01 c2                	add    %eax,%edx
f01035c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c3:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01035c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c8:	83 ec 08             	sub    $0x8,%esp
f01035cb:	ff 75 10             	pushl  0x10(%ebp)
f01035ce:	50                   	push   %eax
f01035cf:	e8 99 f9 ff ff       	call   f0102f6d <write_disk_page>
f01035d4:	83 c4 10             	add    $0x10,%esp
f01035d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01035da:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01035dd:	c9                   	leave  
f01035de:	c3                   	ret    

f01035df <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01035df:	55                   	push   %ebp
f01035e0:	89 e5                	mov    %esp,%ebp
f01035e2:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01035e5:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035ec:	76 19                	jbe    f0103607 <pf_update_env_page+0x28>
f01035ee:	68 2c 49 13 f0       	push   $0xf013492c
f01035f3:	68 52 49 13 f0       	push   $0xf0134952
f01035f8:	68 08 01 00 00       	push   $0x108
f01035fd:	68 99 48 13 f0       	push   $0xf0134899
f0103602:	e8 9f cb ff ff       	call   f01001a6 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103607:	8b 45 08             	mov    0x8(%ebp),%eax
f010360a:	83 c0 64             	add    $0x64,%eax
f010360d:	83 ec 08             	sub    $0x8,%esp
f0103610:	50                   	push   %eax
f0103611:	ff 75 08             	pushl  0x8(%ebp)
f0103614:	e8 d3 04 00 00       	call   f0103aec <get_disk_page_directory>
f0103619:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010361c:	8b 45 08             	mov    0x8(%ebp),%eax
f010361f:	8b 40 64             	mov    0x64(%eax),%eax
f0103622:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103625:	52                   	push   %edx
f0103626:	6a 00                	push   $0x0
f0103628:	ff 75 0c             	pushl  0xc(%ebp)
f010362b:	50                   	push   %eax
f010362c:	e8 91 fc ff ff       	call   f01032c2 <get_disk_page_table>
f0103631:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103634:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103637:	85 c0                	test   %eax,%eax
f0103639:	74 29                	je     f0103664 <pf_update_env_page+0x85>
f010363b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010363e:	85 c0                	test   %eax,%eax
f0103640:	0f 84 43 01 00 00    	je     f0103789 <pf_update_env_page+0x1aa>
f0103646:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103649:	8b 55 0c             	mov    0xc(%ebp),%edx
f010364c:	c1 ea 0c             	shr    $0xc,%edx
f010364f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103655:	c1 e2 02             	shl    $0x2,%edx
f0103658:	01 d0                	add    %edx,%eax
f010365a:	8b 00                	mov    (%eax),%eax
f010365c:	85 c0                	test   %eax,%eax
f010365e:	0f 85 25 01 00 00    	jne    f0103789 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f0103664:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103667:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f010366a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010366d:	85 c0                	test   %eax,%eax
f010366f:	79 09                	jns    f010367a <pf_update_env_page+0x9b>
f0103671:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103678:	76 38                	jbe    f01036b2 <pf_update_env_page+0xd3>
f010367a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103681:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103684:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103689:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010368c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010368f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103694:	f7 75 f0             	divl   -0x10(%ebp)
f0103697:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010369a:	29 d0                	sub    %edx,%eax
f010369c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010369f:	0f 87 cd 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
f01036a5:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01036ac:	0f 87 c0 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01036b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01036b8:	83 ec 04             	sub    $0x4,%esp
f01036bb:	8d 55 d0             	lea    -0x30(%ebp),%edx
f01036be:	52                   	push   %edx
f01036bf:	ff 75 0c             	pushl  0xc(%ebp)
f01036c2:	50                   	push   %eax
f01036c3:	e8 39 35 00 00       	call   f0106c01 <get_frame_info>
f01036c8:	83 c4 10             	add    $0x10,%esp
f01036cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01036ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d1:	3b 45 10             	cmp    0x10(%ebp),%eax
f01036d4:	75 52                	jne    f0103728 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01036d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01036d9:	83 ec 04             	sub    $0x4,%esp
f01036dc:	50                   	push   %eax
f01036dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01036e0:	ff 75 08             	pushl  0x8(%ebp)
f01036e3:	e8 34 fe ff ff       	call   f010351c <pf_add_env_page>
f01036e8:	83 c4 10             	add    $0x10,%esp
f01036eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01036ee:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01036f2:	75 17                	jne    f010370b <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01036f4:	83 ec 04             	sub    $0x4,%esp
f01036f7:	68 68 49 13 f0       	push   $0xf0134968
f01036fc:	68 1d 01 00 00       	push   $0x11d
f0103701:	68 99 48 13 f0       	push   $0xf0134899
f0103706:	e8 9b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010370b:	8b 45 08             	mov    0x8(%ebp),%eax
f010370e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103714:	8d 50 01             	lea    0x1(%eax),%edx
f0103717:	8b 45 08             	mov    0x8(%ebp),%eax
f010371a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
				return ret ;
f0103720:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103723:	e9 ff 00 00 00       	jmp    f0103827 <pf_update_env_page+0x248>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103728:	83 ec 04             	sub    $0x4,%esp
f010372b:	6a 00                	push   $0x0
f010372d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103730:	ff 75 08             	pushl  0x8(%ebp)
f0103733:	e8 b3 fc ff ff       	call   f01033eb <pf_add_empty_env_page>
f0103738:	83 c4 10             	add    $0x10,%esp
f010373b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010373e:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103742:	75 17                	jne    f010375b <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103744:	83 ec 04             	sub    $0x4,%esp
f0103747:	68 94 49 13 f0       	push   $0xf0134994
f010374c:	68 28 01 00 00       	push   $0x128
f0103751:	68 99 48 13 f0       	push   $0xf0134899
f0103756:	e8 4b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010375b:	8b 45 08             	mov    0x8(%ebp),%eax
f010375e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103764:	8d 50 01             	lea    0x1(%eax),%edx
f0103767:	8b 45 08             	mov    0x8(%ebp),%eax
f010376a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103770:	eb 17                	jmp    f0103789 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103772:	83 ec 04             	sub    $0x4,%esp
f0103775:	68 e0 49 13 f0       	push   $0xf01349e0
f010377a:	68 2f 01 00 00       	push   $0x12f
f010377f:	68 99 48 13 f0       	push   $0xf0134899
f0103784:	e8 1d ca ff ff       	call   f01001a6 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103789:	8b 45 08             	mov    0x8(%ebp),%eax
f010378c:	8b 40 64             	mov    0x64(%eax),%eax
f010378f:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103792:	52                   	push   %edx
f0103793:	6a 00                	push   $0x0
f0103795:	ff 75 0c             	pushl  0xc(%ebp)
f0103798:	50                   	push   %eax
f0103799:	e8 24 fb ff ff       	call   f01032c2 <get_disk_page_table>
f010379e:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01037a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01037a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037a7:	c1 ea 0c             	shr    $0xc,%edx
f01037aa:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b0:	c1 e2 02             	shl    $0x2,%edx
f01037b3:	01 d0                	add    %edx,%eax
f01037b5:	8b 00                	mov    (%eax),%eax
f01037b7:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f01037ba:	83 ec 0c             	sub    $0xc,%esp
f01037bd:	ff 75 10             	pushl  0x10(%ebp)
f01037c0:	e8 20 f7 ff ff       	call   f0102ee5 <to_physical_address>
f01037c5:	83 c4 10             	add    $0x10,%esp
f01037c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01037cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037ce:	c1 e8 0c             	shr    $0xc,%eax
f01037d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01037d4:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01037d9:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f01037dc:	72 17                	jb     f01037f5 <pf_update_env_page+0x216>
f01037de:	ff 75 dc             	pushl  -0x24(%ebp)
f01037e1:	68 fc 48 13 f0       	push   $0xf01348fc
f01037e6:	68 47 01 00 00       	push   $0x147
f01037eb:	68 99 48 13 f0       	push   $0xf0134899
f01037f0:	e8 b1 c9 ff ff       	call   f01001a6 <_panic>
f01037f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037f8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01037fd:	83 ec 08             	sub    $0x8,%esp
f0103800:	50                   	push   %eax
f0103801:	ff 75 e0             	pushl  -0x20(%ebp)
f0103804:	e8 64 f7 ff ff       	call   f0102f6d <write_disk_page>
f0103809:	83 c4 10             	add    $0x10,%esp
f010380c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f010380f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103812:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f0103818:	8d 50 01             	lea    0x1(%eax),%edx
f010381b:	8b 45 08             	mov    0x8(%ebp),%eax
f010381e:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
	//======================

	return ret;
f0103824:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103827:	c9                   	leave  
f0103828:	c3                   	ret    

f0103829 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103829:	55                   	push   %ebp
f010382a:	89 e5                	mov    %esp,%ebp
f010382c:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f010382f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103832:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103835:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103838:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010383d:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103840:	8b 45 08             	mov    0x8(%ebp),%eax
f0103843:	8b 40 64             	mov    0x64(%eax),%eax
f0103846:	85 c0                	test   %eax,%eax
f0103848:	75 0a                	jne    f0103854 <pf_read_env_page+0x2b>
f010384a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010384f:	e9 90 00 00 00       	jmp    f01038e4 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103854:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103857:	8b 45 08             	mov    0x8(%ebp),%eax
f010385a:	8b 40 64             	mov    0x64(%eax),%eax
f010385d:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103860:	51                   	push   %ecx
f0103861:	6a 00                	push   $0x0
f0103863:	52                   	push   %edx
f0103864:	50                   	push   %eax
f0103865:	e8 58 fa ff ff       	call   f01032c2 <get_disk_page_table>
f010386a:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010386d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103870:	85 c0                	test   %eax,%eax
f0103872:	75 07                	jne    f010387b <pf_read_env_page+0x52>
f0103874:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103879:	eb 69                	jmp    f01038e4 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010387b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010387e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103881:	c1 ea 0c             	shr    $0xc,%edx
f0103884:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010388a:	c1 e2 02             	shl    $0x2,%edx
f010388d:	01 d0                	add    %edx,%eax
f010388f:	8b 00                	mov    (%eax),%eax
f0103891:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103894:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103898:	75 07                	jne    f01038a1 <pf_read_env_page+0x78>
f010389a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010389f:	eb 43                	jmp    f01038e4 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f01038a1:	83 ec 08             	sub    $0x8,%esp
f01038a4:	ff 75 0c             	pushl  0xc(%ebp)
f01038a7:	ff 75 f0             	pushl  -0x10(%ebp)
f01038aa:	e8 8f f6 ff ff       	call   f0102f3e <read_disk_page>
f01038af:	83 c4 10             	add    $0x10,%esp
f01038b2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f01038b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01038b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038bb:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038be:	6a 40                	push   $0x40
f01038c0:	6a 00                	push   $0x0
f01038c2:	52                   	push   %edx
f01038c3:	50                   	push   %eax
f01038c4:	e8 86 3c 00 00       	call   f010754f <pt_set_page_permissions>
f01038c9:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f01038cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01038cf:	8b 80 08 da 01 00    	mov    0x1da08(%eax),%eax
f01038d5:	8d 50 01             	lea    0x1(%eax),%edx
f01038d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038db:	89 90 08 da 01 00    	mov    %edx,0x1da08(%eax)
	//======================

	return disk_read_error;
f01038e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01038e4:	c9                   	leave  
f01038e5:	c3                   	ret    

f01038e6 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01038e6:	55                   	push   %ebp
f01038e7:	89 e5                	mov    %esp,%ebp
f01038e9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01038ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ef:	8b 40 64             	mov    0x64(%eax),%eax
f01038f2:	85 c0                	test   %eax,%eax
f01038f4:	74 62                	je     f0103958 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f9:	8b 40 64             	mov    0x64(%eax),%eax
f01038fc:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01038ff:	52                   	push   %edx
f0103900:	6a 00                	push   $0x0
f0103902:	ff 75 0c             	pushl  0xc(%ebp)
f0103905:	50                   	push   %eax
f0103906:	e8 b7 f9 ff ff       	call   f01032c2 <get_disk_page_table>
f010390b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010390e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103911:	85 c0                	test   %eax,%eax
f0103913:	74 46                	je     f010395b <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103915:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103918:	8b 55 0c             	mov    0xc(%ebp),%edx
f010391b:	c1 ea 0c             	shr    $0xc,%edx
f010391e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103924:	c1 e2 02             	shl    $0x2,%edx
f0103927:	01 d0                	add    %edx,%eax
f0103929:	8b 00                	mov    (%eax),%eax
f010392b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010392e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103931:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103934:	c1 ea 0c             	shr    $0xc,%edx
f0103937:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010393d:	c1 e2 02             	shl    $0x2,%edx
f0103940:	01 d0                	add    %edx,%eax
f0103942:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103948:	83 ec 0c             	sub    $0xc,%esp
f010394b:	ff 75 f4             	pushl  -0xc(%ebp)
f010394e:	e8 8e f8 ff ff       	call   f01031e1 <free_disk_frame>
f0103953:	83 c4 10             	add    $0x10,%esp
f0103956:	eb 04                	jmp    f010395c <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103958:	90                   	nop
f0103959:	eb 01                	jmp    f010395c <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010395b:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010395c:	c9                   	leave  
f010395d:	c3                   	ret    

f010395e <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010395e:	55                   	push   %ebp
f010395f:	89 e5                	mov    %esp,%ebp
f0103961:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103964:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010396b:	e9 ee 00 00 00       	jmp    f0103a5e <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103970:	8b 45 08             	mov    0x8(%ebp),%eax
f0103973:	8b 40 64             	mov    0x64(%eax),%eax
f0103976:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103979:	c1 e2 02             	shl    $0x2,%edx
f010397c:	01 d0                	add    %edx,%eax
f010397e:	8b 00                	mov    (%eax),%eax
f0103980:	83 e0 01             	and    $0x1,%eax
f0103983:	85 c0                	test   %eax,%eax
f0103985:	0f 84 cf 00 00 00    	je     f0103a5a <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010398b:	8b 45 08             	mov    0x8(%ebp),%eax
f010398e:	8b 40 64             	mov    0x64(%eax),%eax
f0103991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103994:	c1 e2 02             	shl    $0x2,%edx
f0103997:	01 d0                	add    %edx,%eax
f0103999:	8b 00                	mov    (%eax),%eax
f010399b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01039a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01039a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01039a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039ac:	c1 e8 0c             	shr    $0xc,%eax
f01039af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01039b2:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01039b7:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01039ba:	72 17                	jb     f01039d3 <pf_free_env+0x75>
f01039bc:	ff 75 e8             	pushl  -0x18(%ebp)
f01039bf:	68 fc 48 13 f0       	push   $0xf01348fc
f01039c4:	68 96 01 00 00       	push   $0x196
f01039c9:	68 99 48 13 f0       	push   $0xf0134899
f01039ce:	e8 d3 c7 ff ff       	call   f01001a6 <_panic>
f01039d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039d6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01039db:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01039de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01039e5:	eb 3a                	jmp    f0103a21 <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01039e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01039f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01039f4:	01 d0                	add    %edx,%eax
f01039f6:	8b 00                	mov    (%eax),%eax
f01039f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01039fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103a05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103a08:	01 d0                	add    %edx,%eax
f0103a0a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103a10:	83 ec 0c             	sub    $0xc,%esp
f0103a13:	ff 75 dc             	pushl  -0x24(%ebp)
f0103a16:	e8 c6 f7 ff ff       	call   f01031e1 <free_disk_frame>
f0103a1b:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103a1e:	ff 45 f0             	incl   -0x10(%ebp)
f0103a21:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103a28:	76 bd                	jbe    f01039e7 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2d:	8b 40 64             	mov    0x64(%eax),%eax
f0103a30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a33:	c1 e2 02             	shl    $0x2,%edx
f0103a36:	01 d0                	add    %edx,%eax
f0103a38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0103a3e:	83 ec 0c             	sub    $0xc,%esp
f0103a41:	ff 75 ec             	pushl  -0x14(%ebp)
f0103a44:	e8 af f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a49:	83 c4 10             	add    $0x10,%esp
f0103a4c:	83 ec 0c             	sub    $0xc,%esp
f0103a4f:	50                   	push   %eax
f0103a50:	e8 e4 2e 00 00       	call   f0106939 <decrement_references>
f0103a55:	83 c4 10             	add    $0x10,%esp
f0103a58:	eb 01                	jmp    f0103a5b <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103a5a:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103a5b:	ff 45 f4             	incl   -0xc(%ebp)
f0103a5e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103a65:	0f 86 05 ff ff ff    	jbe    f0103970 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0103a6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6e:	8b 40 68             	mov    0x68(%eax),%eax
f0103a71:	83 ec 0c             	sub    $0xc,%esp
f0103a74:	50                   	push   %eax
f0103a75:	e8 7e f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a7a:	83 c4 10             	add    $0x10,%esp
f0103a7d:	83 ec 0c             	sub    $0xc,%esp
f0103a80:	50                   	push   %eax
f0103a81:	e8 b3 2e 00 00       	call   f0106939 <decrement_references>
f0103a86:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a8c:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103a93:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a96:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103a9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103aa3:	85 c0                	test   %eax,%eax
f0103aa5:	74 42                	je     f0103ae9 <pf_free_env+0x18b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103aa7:	83 ec 0c             	sub    $0xc,%esp
f0103aaa:	ff 75 08             	pushl  0x8(%ebp)
f0103aad:	e8 ee 03 00 00       	call   f0103ea0 <__pf_remove_env_all_tables>
f0103ab2:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0103ab5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ab8:	8b 40 70             	mov    0x70(%eax),%eax
f0103abb:	83 ec 0c             	sub    $0xc,%esp
f0103abe:	50                   	push   %eax
f0103abf:	e8 34 f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103ac4:	83 c4 10             	add    $0x10,%esp
f0103ac7:	83 ec 0c             	sub    $0xc,%esp
f0103aca:	50                   	push   %eax
f0103acb:	e8 69 2e 00 00       	call   f0106939 <decrement_references>
f0103ad0:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ad6:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103ae7:	eb 01                	jmp    f0103aea <pf_free_env+0x18c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103ae9:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103aea:	c9                   	leave  
f0103aeb:	c3                   	ret    

f0103aec <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103aec:	55                   	push   %ebp
f0103aed:	89 e5                	mov    %esp,%ebp
f0103aef:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af5:	8b 50 64             	mov    0x64(%eax),%edx
f0103af8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103afb:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103afd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b00:	8b 00                	mov    (%eax),%eax
f0103b02:	85 c0                	test   %eax,%eax
f0103b04:	0f 85 aa 00 00 00    	jne    f0103bb4 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103b0a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103b11:	83 ec 0c             	sub    $0xc,%esp
f0103b14:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103b17:	50                   	push   %eax
f0103b18:	e8 8d 2c 00 00       	call   f01067aa <allocate_frame>
f0103b1d:	83 c4 10             	add    $0x10,%esp
f0103b20:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103b23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103b27:	79 08                	jns    f0103b31 <get_disk_page_directory+0x45>
				return r;
f0103b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b2c:	e9 88 00 00 00       	jmp    f0103bb9 <get_disk_page_directory+0xcd>
			p->references = 1;
f0103b31:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b34:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103b3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b3d:	83 ec 0c             	sub    $0xc,%esp
f0103b40:	50                   	push   %eax
f0103b41:	e8 9f f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b46:	83 c4 10             	add    $0x10,%esp
f0103b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103b4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b4f:	c1 e8 0c             	shr    $0xc,%eax
f0103b52:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103b55:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0103b5a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103b5d:	72 17                	jb     f0103b76 <get_disk_page_directory+0x8a>
f0103b5f:	ff 75 f0             	pushl  -0x10(%ebp)
f0103b62:	68 fc 48 13 f0       	push   $0xf01348fc
f0103b67:	68 ee 01 00 00       	push   $0x1ee
f0103b6c:	68 99 48 13 f0       	push   $0xf0134899
f0103b71:	e8 30 c6 ff ff       	call   f01001a6 <_panic>
f0103b76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b79:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103b7e:	89 c2                	mov    %eax,%edx
f0103b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b83:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0103b85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b88:	83 ec 0c             	sub    $0xc,%esp
f0103b8b:	50                   	push   %eax
f0103b8c:	e8 54 f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b91:	83 c4 10             	add    $0x10,%esp
f0103b94:	89 c2                	mov    %eax,%edx
f0103b96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b99:	89 50 68             	mov    %edx,0x68(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b9f:	8b 00                	mov    (%eax),%eax
f0103ba1:	83 ec 04             	sub    $0x4,%esp
f0103ba4:	68 00 10 00 00       	push   $0x1000
f0103ba9:	6a 00                	push   $0x0
f0103bab:	50                   	push   %eax
f0103bac:	e8 5c ca 02 00       	call   f013060d <memset>
f0103bb1:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103bb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103bb9:	c9                   	leave  
f0103bba:	c3                   	ret    

f0103bbb <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103bbb:	55                   	push   %ebp
f0103bbc:	89 e5                	mov    %esp,%ebp
f0103bbe:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103bc1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103bc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103bcf:	e9 a6 00 00 00       	jmp    f0103c7a <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bd7:	8b 40 64             	mov    0x64(%eax),%eax
f0103bda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bdd:	c1 e2 02             	shl    $0x2,%edx
f0103be0:	01 d0                	add    %edx,%eax
f0103be2:	8b 00                	mov    (%eax),%eax
f0103be4:	83 e0 01             	and    $0x1,%eax
f0103be7:	85 c0                	test   %eax,%eax
f0103be9:	0f 84 87 00 00 00    	je     f0103c76 <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103bef:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf2:	8b 40 64             	mov    0x64(%eax),%eax
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	c1 e2 02             	shl    $0x2,%edx
f0103bfb:	01 d0                	add    %edx,%eax
f0103bfd:	8b 00                	mov    (%eax),%eax
f0103bff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c04:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0103c07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c0a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c10:	c1 e8 0c             	shr    $0xc,%eax
f0103c13:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103c16:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0103c1b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103c1e:	72 17                	jb     f0103c37 <pf_calculate_allocated_pages+0x7c>
f0103c20:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103c23:	68 fc 48 13 f0       	push   $0xf01348fc
f0103c28:	68 0e 02 00 00       	push   $0x20e
f0103c2d:	68 99 48 13 f0       	push   $0xf0134899
f0103c32:	e8 6f c5 ff ff       	call   f01001a6 <_panic>
f0103c37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c3a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c3f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c42:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103c49:	eb 20                	jmp    f0103c6b <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103c4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103c58:	01 d0                	add    %edx,%eax
f0103c5a:	8b 00                	mov    (%eax),%eax
f0103c5c:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0103c5f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0103c63:	74 03                	je     f0103c68 <pf_calculate_allocated_pages+0xad>
				counter ++;
f0103c65:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c68:	ff 45 ec             	incl   -0x14(%ebp)
f0103c6b:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103c72:	76 d7                	jbe    f0103c4b <pf_calculate_allocated_pages+0x90>
f0103c74:	eb 01                	jmp    f0103c77 <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103c76:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103c77:	ff 45 f4             	incl   -0xc(%ebp)
f0103c7a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c81:	0f 86 4d ff ff ff    	jbe    f0103bd4 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103c87:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103c8a:	c9                   	leave  
f0103c8b:	c3                   	ret    

f0103c8c <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103c8c:	55                   	push   %ebp
f0103c8d:	89 e5                	mov    %esp,%ebp
f0103c8f:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103c92:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103c99:	a1 14 85 6e f0       	mov    0xf06e8514,%eax
f0103c9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ca1:	eb 0b                	jmp    f0103cae <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ca3:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103ca6:	a1 1c 85 6e f0       	mov    0xf06e851c,%eax
f0103cab:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103cae:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cb2:	74 07                	je     f0103cbb <pf_calculate_free_frames+0x2f>
f0103cb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103cb7:	8b 00                	mov    (%eax),%eax
f0103cb9:	eb 05                	jmp    f0103cc0 <pf_calculate_free_frames+0x34>
f0103cbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0103cc0:	a3 1c 85 6e f0       	mov    %eax,0xf06e851c
f0103cc5:	a1 1c 85 6e f0       	mov    0xf06e851c,%eax
f0103cca:	85 c0                	test   %eax,%eax
f0103ccc:	75 d5                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
f0103cce:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cd2:	75 cf                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103cd4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103cd7:	c9                   	leave  
f0103cd8:	c3                   	ret    

f0103cd9 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103cd9:	55                   	push   %ebp
f0103cda:	89 e5                	mov    %esp,%ebp
f0103cdc:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103cdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ce2:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103ce5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce8:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103cea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ced:	8b 00                	mov    (%eax),%eax
f0103cef:	85 c0                	test   %eax,%eax
f0103cf1:	0f 85 aa 00 00 00    	jne    f0103da1 <get_disk_table_directory+0xc8>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103cf7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103cfe:	83 ec 0c             	sub    $0xc,%esp
f0103d01:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103d04:	50                   	push   %eax
f0103d05:	e8 a0 2a 00 00       	call   f01067aa <allocate_frame>
f0103d0a:	83 c4 10             	add    $0x10,%esp
f0103d0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103d10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103d14:	79 08                	jns    f0103d1e <get_disk_table_directory+0x45>
				return r;
f0103d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d19:	e9 88 00 00 00       	jmp    f0103da6 <get_disk_table_directory+0xcd>
			p->references = 1;
f0103d1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d21:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103d27:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d2a:	83 ec 0c             	sub    $0xc,%esp
f0103d2d:	50                   	push   %eax
f0103d2e:	e8 b2 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d33:	83 c4 10             	add    $0x10,%esp
f0103d36:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d3c:	c1 e8 0c             	shr    $0xc,%eax
f0103d3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103d42:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0103d47:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103d4a:	72 17                	jb     f0103d63 <get_disk_table_directory+0x8a>
f0103d4c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103d4f:	68 fc 48 13 f0       	push   $0xf01348fc
f0103d54:	68 4c 02 00 00       	push   $0x24c
f0103d59:	68 99 48 13 f0       	push   $0xf0134899
f0103d5e:	e8 43 c4 ff ff       	call   f01001a6 <_panic>
f0103d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d66:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d6b:	89 c2                	mov    %eax,%edx
f0103d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d70:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f0103d72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d75:	83 ec 0c             	sub    $0xc,%esp
f0103d78:	50                   	push   %eax
f0103d79:	e8 67 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d7e:	83 c4 10             	add    $0x10,%esp
f0103d81:	89 c2                	mov    %eax,%edx
f0103d83:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d86:	89 50 70             	mov    %edx,0x70(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103d89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d8c:	8b 00                	mov    (%eax),%eax
f0103d8e:	83 ec 04             	sub    $0x4,%esp
f0103d91:	68 00 10 00 00       	push   $0x1000
f0103d96:	6a 00                	push   $0x0
f0103d98:	50                   	push   %eax
f0103d99:	e8 6f c8 02 00       	call   f013060d <memset>
f0103d9e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103da1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103da6:	c9                   	leave  
f0103da7:	c3                   	ret    

f0103da8 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103da8:	55                   	push   %ebp
f0103da9:	89 e5                	mov    %esp,%ebp
f0103dab:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103dae:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103db5:	76 19                	jbe    f0103dd0 <__pf_write_env_table+0x28>
f0103db7:	68 2c 49 13 f0       	push   $0xf013492c
f0103dbc:	68 52 49 13 f0       	push   $0xf0134952
f0103dc1:	68 5a 02 00 00       	push   $0x25a
f0103dc6:	68 99 48 13 f0       	push   $0xf0134899
f0103dcb:	e8 d6 c3 ff ff       	call   f01001a6 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103dd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd3:	83 c0 6c             	add    $0x6c,%eax
f0103dd6:	83 ec 08             	sub    $0x8,%esp
f0103dd9:	50                   	push   %eax
f0103dda:	ff 75 08             	pushl  0x8(%ebp)
f0103ddd:	e8 f7 fe ff ff       	call   f0103cd9 <get_disk_table_directory>
f0103de2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103de5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de8:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103deb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103dee:	c1 ea 16             	shr    $0x16,%edx
f0103df1:	c1 e2 02             	shl    $0x2,%edx
f0103df4:	01 d0                	add    %edx,%eax
f0103df6:	8b 00                	mov    (%eax),%eax
f0103df8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103dfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dfe:	85 c0                	test   %eax,%eax
f0103e00:	75 31                	jne    f0103e33 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e02:	83 ec 0c             	sub    $0xc,%esp
f0103e05:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e08:	50                   	push   %eax
f0103e09:	e8 0c f3 ff ff       	call   f010311a <allocate_disk_frame>
f0103e0e:	83 c4 10             	add    $0x10,%esp
f0103e11:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e14:	75 07                	jne    f0103e1d <__pf_write_env_table+0x75>
f0103e16:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e1b:	eb 2e                	jmp    f0103e4b <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e20:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e23:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e26:	c1 ea 16             	shr    $0x16,%edx
f0103e29:	c1 e2 02             	shl    $0x2,%edx
f0103e2c:	01 c2                	add    %eax,%edx
f0103e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e31:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e36:	83 ec 08             	sub    $0x8,%esp
f0103e39:	ff 75 10             	pushl  0x10(%ebp)
f0103e3c:	50                   	push   %eax
f0103e3d:	e8 2b f1 ff ff       	call   f0102f6d <write_disk_page>
f0103e42:	83 c4 10             	add    $0x10,%esp
f0103e45:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103e4b:	c9                   	leave  
f0103e4c:	c3                   	ret    

f0103e4d <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e4d:	55                   	push   %ebp
f0103e4e:	89 e5                	mov    %esp,%ebp
f0103e50:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e56:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e59:	85 c0                	test   %eax,%eax
f0103e5b:	75 07                	jne    f0103e64 <__pf_read_env_table+0x17>
f0103e5d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e62:	eb 3a                	jmp    f0103e9e <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e67:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e6d:	c1 ea 16             	shr    $0x16,%edx
f0103e70:	c1 e2 02             	shl    $0x2,%edx
f0103e73:	01 d0                	add    %edx,%eax
f0103e75:	8b 00                	mov    (%eax),%eax
f0103e77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103e7e:	75 07                	jne    f0103e87 <__pf_read_env_table+0x3a>
f0103e80:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e85:	eb 17                	jmp    f0103e9e <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103e87:	83 ec 08             	sub    $0x8,%esp
f0103e8a:	ff 75 10             	pushl  0x10(%ebp)
f0103e8d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e90:	e8 a9 f0 ff ff       	call   f0102f3e <read_disk_page>
f0103e95:	83 c4 10             	add    $0x10,%esp
f0103e98:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103e9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103e9e:	c9                   	leave  
f0103e9f:	c3                   	ret    

f0103ea0 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103ea0:	55                   	push   %ebp
f0103ea1:	89 e5                	mov    %esp,%ebp
f0103ea3:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103ea6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ea9:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eac:	85 c0                	test   %eax,%eax
f0103eae:	74 4c                	je     f0103efc <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103eb7:	eb 38                	jmp    f0103ef1 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103eb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ebc:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ebf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ec2:	c1 e2 02             	shl    $0x2,%edx
f0103ec5:	01 d0                	add    %edx,%eax
f0103ec7:	8b 00                	mov    (%eax),%eax
f0103ec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103ecc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ecf:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ed5:	c1 e2 02             	shl    $0x2,%edx
f0103ed8:	01 d0                	add    %edx,%eax
f0103eda:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103ee0:	83 ec 0c             	sub    $0xc,%esp
f0103ee3:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ee6:	e8 f6 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103eeb:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eee:	ff 45 f4             	incl   -0xc(%ebp)
f0103ef1:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103ef8:	76 bf                	jbe    f0103eb9 <__pf_remove_env_all_tables+0x19>
f0103efa:	eb 01                	jmp    f0103efd <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103efc:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103efd:	c9                   	leave  
f0103efe:	c3                   	ret    

f0103eff <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103eff:	55                   	push   %ebp
f0103f00:	89 e5                	mov    %esp,%ebp
f0103f02:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f05:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f09:	75 10                	jne    f0103f1b <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f0b:	83 ec 0c             	sub    $0xc,%esp
f0103f0e:	68 5c 4a 13 f0       	push   $0xf0134a5c
f0103f13:	e8 15 cd ff ff       	call   f0100c2d <cprintf>
f0103f18:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f1e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f21:	85 c0                	test   %eax,%eax
f0103f23:	74 3d                	je     f0103f62 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f28:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2e:	c1 ea 16             	shr    $0x16,%edx
f0103f31:	c1 e2 02             	shl    $0x2,%edx
f0103f34:	01 d0                	add    %edx,%eax
f0103f36:	8b 00                	mov    (%eax),%eax
f0103f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f41:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f44:	c1 ea 16             	shr    $0x16,%edx
f0103f47:	c1 e2 02             	shl    $0x2,%edx
f0103f4a:	01 d0                	add    %edx,%eax
f0103f4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103f52:	83 ec 0c             	sub    $0xc,%esp
f0103f55:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f58:	e8 84 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103f5d:	83 c4 10             	add    $0x10,%esp
f0103f60:	eb 01                	jmp    f0103f63 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f62:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103f63:	c9                   	leave  
f0103f64:	c3                   	ret    

f0103f65 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103f65:	55                   	push   %ebp
f0103f66:	89 e5                	mov    %esp,%ebp
f0103f68:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103f6b:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103f72:	eb 1f                	jmp    f0103f93 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f77:	83 ec 04             	sub    $0x4,%esp
f0103f7a:	6a 08                	push   $0x8
f0103f7c:	ff 75 08             	pushl  0x8(%ebp)
f0103f7f:	50                   	push   %eax
f0103f80:	e8 2d cd 02 00       	call   f0130cb2 <ide_write>
f0103f85:	83 c4 10             	add    $0x10,%esp
f0103f88:	85 c0                	test   %eax,%eax
f0103f8a:	75 12                	jne    f0103f9e <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103f8c:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103f93:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103f9a:	7e d8                	jle    f0103f74 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9c:	eb 01                	jmp    f0103f9f <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103f9e:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9f:	90                   	nop
f0103fa0:	c9                   	leave  
f0103fa1:	c3                   	ret    

f0103fa2 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103fa2:	55                   	push   %ebp
f0103fa3:	89 e5                	mov    %esp,%ebp
f0103fa5:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fa8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fab:	0f b6 c0             	movzbl %al,%eax
f0103fae:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fb5:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fb8:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103fbb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103fbe:	ee                   	out    %al,(%dx)
f0103fbf:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103fc6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103fc9:	89 c2                	mov    %eax,%edx
f0103fcb:	ec                   	in     (%dx),%al
f0103fcc:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0103fcf:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0103fd2:	0f b6 c0             	movzbl %al,%eax
}
f0103fd5:	c9                   	leave  
f0103fd6:	c3                   	ret    

f0103fd7 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0103fd7:	55                   	push   %ebp
f0103fd8:	89 e5                	mov    %esp,%ebp
f0103fda:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fe0:	0f b6 c0             	movzbl %al,%eax
f0103fe3:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fea:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fed:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103ff0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103ff3:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0103ff4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ff7:	0f b6 c0             	movzbl %al,%eax
f0103ffa:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104001:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104004:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104007:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010400a:	ee                   	out    %al,(%dx)
}
f010400b:	90                   	nop
f010400c:	c9                   	leave  
f010400d:	c3                   	ret    

f010400e <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f010400e:	55                   	push   %ebp
f010400f:	89 e5                	mov    %esp,%ebp
f0104011:	53                   	push   %ebx
f0104012:	83 ec 24             	sub    $0x24,%esp
f0104015:	8b 45 08             	mov    0x8(%ebp),%eax
f0104018:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010401b:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104022:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104026:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010402c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010402d:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104031:	77 48                	ja     f010407b <kclock_start+0x6d>
f0104033:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010403a:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f010403e:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104041:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104044:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104045:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104049:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010404e:	99                   	cltd   
f010404f:	f7 fb                	idiv   %ebx
f0104051:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104057:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010405b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104060:	99                   	cltd   
f0104061:	f7 fb                	idiv   %ebx
f0104063:	89 c3                	mov    %eax,%ebx
f0104065:	89 c8                	mov    %ecx,%eax
f0104067:	99                   	cltd   
f0104068:	f7 fb                	idiv   %ebx
f010406a:	0f b7 c0             	movzwl %ax,%eax
f010406d:	83 ec 0c             	sub    $0xc,%esp
f0104070:	50                   	push   %eax
f0104071:	e8 b8 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104076:	83 c4 10             	add    $0x10,%esp
f0104079:	eb 13                	jmp    f010408e <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010407b:	6a 35                	push   $0x35
f010407d:	68 80 4a 13 f0       	push   $0xf0134a80
f0104082:	6a 33                	push   $0x33
f0104084:	68 dc 4a 13 f0       	push   $0xf0134adc
f0104089:	e8 18 c1 ff ff       	call   f01001a6 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010408e:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0104094:	0f b7 c0             	movzwl %ax,%eax
f0104097:	25 fe ff 00 00       	and    $0xfffe,%eax
f010409c:	83 ec 0c             	sub    $0xc,%esp
f010409f:	50                   	push   %eax
f01040a0:	e8 2d 1b 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040a5:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01040a8:	90                   	nop
f01040a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01040ac:	c9                   	leave  
f01040ad:	c3                   	ret    

f01040ae <kclock_stop>:

void
kclock_stop(void)
{
f01040ae:	55                   	push   %ebp
f01040af:	89 e5                	mov    %esp,%ebp
f01040b1:	83 ec 18             	sub    $0x18,%esp
f01040b4:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01040bb:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01040bf:	8a 45 f3             	mov    -0xd(%ebp),%al
f01040c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01040c5:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01040c6:	83 ec 0c             	sub    $0xc,%esp
f01040c9:	68 ff ff 00 00       	push   $0xffff
f01040ce:	e8 ff 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040d3:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01040d6:	90                   	nop
f01040d7:	c9                   	leave  
f01040d8:	c3                   	ret    

f01040d9 <kclock_resume>:

void
kclock_resume(void)
{
f01040d9:	55                   	push   %ebp
f01040da:	89 e5                	mov    %esp,%ebp
f01040dc:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01040df:	e8 8c 01 00 00       	call   f0104270 <kclock_read_cnt0>
f01040e4:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01040e8:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01040ed:	77 06                	ja     f01040f5 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01040ef:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01040f5:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01040f9:	83 e0 01             	and    $0x1,%eax
f01040fc:	66 85 c0             	test   %ax,%ax
f01040ff:	74 09                	je     f010410a <kclock_resume+0x31>
		cnt0++;
f0104101:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104105:	40                   	inc    %eax
f0104106:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010410a:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104111:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104115:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104118:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010411b:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010411c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104120:	83 ec 0c             	sub    $0xc,%esp
f0104123:	50                   	push   %eax
f0104124:	e8 05 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104129:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010412c:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0104132:	0f b7 c0             	movzwl %ax,%eax
f0104135:	25 fe ff 00 00       	and    $0xfffe,%eax
f010413a:	83 ec 0c             	sub    $0xc,%esp
f010413d:	50                   	push   %eax
f010413e:	e8 8f 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0104143:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104146:	90                   	nop
f0104147:	c9                   	leave  
f0104148:	c3                   	ret    

f0104149 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104149:	55                   	push   %ebp
f010414a:	89 e5                	mov    %esp,%ebp
f010414c:	83 ec 28             	sub    $0x28,%esp
f010414f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104152:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104155:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010415c:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104160:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104163:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104166:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104167:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010416b:	83 ec 0c             	sub    $0xc,%esp
f010416e:	50                   	push   %eax
f010416f:	e8 ba 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104174:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104177:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f010417d:	0f b7 c0             	movzwl %ax,%eax
f0104180:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104185:	83 ec 0c             	sub    $0xc,%esp
f0104188:	50                   	push   %eax
f0104189:	e8 44 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f010418e:	83 c4 10             	add    $0x10,%esp

}
f0104191:	90                   	nop
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	53                   	push   %ebx
f0104198:	83 ec 24             	sub    $0x24,%esp
f010419b:	8b 45 08             	mov    0x8(%ebp),%eax
f010419e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041a1:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041a5:	77 6c                	ja     f0104213 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01041a7:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041ab:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01041b0:	99                   	cltd   
f01041b1:	f7 fb                	idiv   %ebx
f01041b3:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01041b9:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041bd:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01041c2:	99                   	cltd   
f01041c3:	f7 fb                	idiv   %ebx
f01041c5:	89 c3                	mov    %eax,%ebx
f01041c7:	89 c8                	mov    %ecx,%eax
f01041c9:	99                   	cltd   
f01041ca:	f7 fb                	idiv   %ebx
f01041cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01041cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041d2:	25 01 00 00 80       	and    $0x80000001,%eax
f01041d7:	85 c0                	test   %eax,%eax
f01041d9:	79 05                	jns    f01041e0 <kclock_set_quantum+0x4c>
f01041db:	48                   	dec    %eax
f01041dc:	83 c8 fe             	or     $0xfffffffe,%eax
f01041df:	40                   	inc    %eax
f01041e0:	83 f8 01             	cmp    $0x1,%eax
f01041e3:	75 03                	jne    f01041e8 <kclock_set_quantum+0x54>
			cnt++;
f01041e5:	ff 45 f4             	incl   -0xc(%ebp)
f01041e8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041ef:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041f3:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01041f9:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01041fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041fd:	0f b7 c0             	movzwl %ax,%eax
f0104200:	83 ec 0c             	sub    $0xc,%esp
f0104203:	50                   	push   %eax
f0104204:	e8 25 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104209:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f010420c:	e8 9d fe ff ff       	call   f01040ae <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104211:	eb 16                	jmp    f0104229 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104213:	6a 35                	push   $0x35
f0104215:	68 80 4a 13 f0       	push   $0xf0134a80
f010421a:	68 c9 00 00 00       	push   $0xc9
f010421f:	68 dc 4a 13 f0       	push   $0xf0134adc
f0104224:	e8 7d bf ff ff       	call   f01001a6 <_panic>
	}
}
f0104229:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010422c:	c9                   	leave  
f010422d:	c3                   	ret    

f010422e <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f010422e:	55                   	push   %ebp
f010422f:	89 e5                	mov    %esp,%ebp
f0104231:	83 ec 14             	sub    $0x14,%esp
f0104234:	8b 45 08             	mov    0x8(%ebp),%eax
f0104237:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f010423b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010423e:	0f b6 c0             	movzbl %al,%eax
f0104241:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104248:	88 45 f6             	mov    %al,-0xa(%ebp)
f010424b:	8a 45 f6             	mov    -0xa(%ebp),%al
f010424e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104251:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104252:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104255:	66 c1 e8 08          	shr    $0x8,%ax
f0104259:	0f b6 c0             	movzbl %al,%eax
f010425c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104263:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104266:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104269:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010426c:	ee                   	out    %al,(%dx)
}
f010426d:	90                   	nop
f010426e:	c9                   	leave  
f010426f:	c3                   	ret    

f0104270 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104270:	55                   	push   %ebp
f0104271:	89 e5                	mov    %esp,%ebp
f0104273:	83 ec 20             	sub    $0x20,%esp
f0104276:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010427d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104280:	89 c2                	mov    %eax,%edx
f0104282:	ec                   	in     (%dx),%al
f0104283:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104286:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104289:	88 45 ff             	mov    %al,-0x1(%ebp)
f010428c:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104293:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104296:	89 c2                	mov    %eax,%edx
f0104298:	ec                   	in     (%dx),%al
f0104299:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f010429c:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010429f:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042a2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01042a6:	c1 e0 08             	shl    $0x8,%eax
f01042a9:	89 c2                	mov    %eax,%edx
f01042ab:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01042af:	09 d0                	or     %edx,%eax
f01042b1:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01042b8:	c9                   	leave  
f01042b9:	c3                   	ret    

f01042ba <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01042ba:	55                   	push   %ebp
f01042bb:	89 e5                	mov    %esp,%ebp
f01042bd:	83 ec 30             	sub    $0x30,%esp
f01042c0:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042ca:	89 c2                	mov    %eax,%edx
f01042cc:	ec                   	in     (%dx),%al
f01042cd:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01042d0:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01042d3:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042d6:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01042dd:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01042e1:	8a 45 dc             	mov    -0x24(%ebp),%al
f01042e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01042e7:	ee                   	out    %al,(%dx)
f01042e8:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042f2:	89 c2                	mov    %eax,%edx
f01042f4:	ec                   	in     (%dx),%al
f01042f5:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01042f8:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042fb:	88 45 f3             	mov    %al,-0xd(%ebp)
f01042fe:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104305:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104308:	89 c2                	mov    %eax,%edx
f010430a:	ec                   	in     (%dx),%al
f010430b:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f010430e:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104311:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104314:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104318:	c1 e0 08             	shl    $0x8,%eax
f010431b:	89 c2                	mov    %eax,%edx
f010431d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104321:	09 d0                	or     %edx,%eax
f0104323:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104327:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f010432b:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104332:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104335:	8a 45 df             	mov    -0x21(%ebp),%al
f0104338:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010433b:	ee                   	out    %al,(%dx)

	return cnt0 ;
f010433c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010433f:	c9                   	leave  
f0104340:	c3                   	ret    

f0104341 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104341:	55                   	push   %ebp
f0104342:	89 e5                	mov    %esp,%ebp
f0104344:	a1 a8 84 6e f0       	mov    0xf06e84a8,%eax
f0104349:	85 c0                	test   %eax,%eax
f010434b:	75 07                	jne    f0104354 <isSchedMethodRR+0x13>
f010434d:	b8 01 00 00 00       	mov    $0x1,%eax
f0104352:	eb 05                	jmp    f0104359 <isSchedMethodRR+0x18>
f0104354:	b8 00 00 00 00       	mov    $0x0,%eax
f0104359:	5d                   	pop    %ebp
f010435a:	c3                   	ret    

f010435b <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010435b:	55                   	push   %ebp
f010435c:	89 e5                	mov    %esp,%ebp
f010435e:	a1 a8 84 6e f0       	mov    0xf06e84a8,%eax
f0104363:	83 f8 01             	cmp    $0x1,%eax
f0104366:	75 07                	jne    f010436f <isSchedMethodMLFQ+0x14>
f0104368:	b8 01 00 00 00       	mov    $0x1,%eax
f010436d:	eb 05                	jmp    f0104374 <isSchedMethodMLFQ+0x19>
f010436f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104374:	5d                   	pop    %ebp
f0104375:	c3                   	ret    

f0104376 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0104376:	55                   	push   %ebp
f0104377:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104379:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010437d:	74 1d                	je     f010439c <init_queue+0x26>
	{
		LIST_INIT(queue);
f010437f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104382:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104388:	8b 45 08             	mov    0x8(%ebp),%eax
f010438b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104392:	8b 45 08             	mov    0x8(%ebp),%eax
f0104395:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f010439c:	90                   	nop
f010439d:	5d                   	pop    %ebp
f010439e:	c3                   	ret    

f010439f <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f010439f:	55                   	push   %ebp
f01043a0:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043a6:	74 08                	je     f01043b0 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01043a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01043ae:	eb 05                	jmp    f01043b5 <queue_size+0x16>
	}
	else
	{
		return 0;
f01043b0:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01043b5:	5d                   	pop    %ebp
f01043b6:	c3                   	ret    

f01043b7 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01043b7:	55                   	push   %ebp
f01043b8:	89 e5                	mov    %esp,%ebp
f01043ba:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01043bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c1:	74 66                	je     f0104429 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f01043c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c7:	75 14                	jne    f01043dd <enqueue+0x26>
f01043c9:	83 ec 04             	sub    $0x4,%esp
f01043cc:	68 f0 4a 13 f0       	push   $0xf0134af0
f01043d1:	6a 2f                	push   $0x2f
f01043d3:	68 13 4b 13 f0       	push   $0xf0134b13
f01043d8:	e8 c9 bd ff ff       	call   f01001a6 <_panic>
f01043dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e0:	8b 10                	mov    (%eax),%edx
f01043e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043e5:	89 50 44             	mov    %edx,0x44(%eax)
f01043e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043eb:	8b 40 44             	mov    0x44(%eax),%eax
f01043ee:	85 c0                	test   %eax,%eax
f01043f0:	74 0d                	je     f01043ff <enqueue+0x48>
f01043f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f5:	8b 00                	mov    (%eax),%eax
f01043f7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043fa:	89 50 48             	mov    %edx,0x48(%eax)
f01043fd:	eb 09                	jmp    f0104408 <enqueue+0x51>
f01043ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104402:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104405:	89 50 04             	mov    %edx,0x4(%eax)
f0104408:	8b 45 08             	mov    0x8(%ebp),%eax
f010440b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010440e:	89 10                	mov    %edx,(%eax)
f0104410:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104413:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010441a:	8b 45 08             	mov    0x8(%ebp),%eax
f010441d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104420:	8d 50 01             	lea    0x1(%eax),%edx
f0104423:	8b 45 08             	mov    0x8(%ebp),%eax
f0104426:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104429:	90                   	nop
f010442a:	c9                   	leave  
f010442b:	c3                   	ret    

f010442c <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010442c:	55                   	push   %ebp
f010442d:	89 e5                	mov    %esp,%ebp
f010442f:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f0104432:	8b 45 08             	mov    0x8(%ebp),%eax
f0104435:	8b 40 04             	mov    0x4(%eax),%eax
f0104438:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010443b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010443f:	0f 84 8a 00 00 00    	je     f01044cf <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f0104445:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104449:	75 14                	jne    f010445f <dequeue+0x33>
f010444b:	83 ec 04             	sub    $0x4,%esp
f010444e:	68 24 4b 13 f0       	push   $0xf0134b24
f0104453:	6a 38                	push   $0x38
f0104455:	68 13 4b 13 f0       	push   $0xf0134b13
f010445a:	e8 47 bd ff ff       	call   f01001a6 <_panic>
f010445f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104462:	8b 40 44             	mov    0x44(%eax),%eax
f0104465:	85 c0                	test   %eax,%eax
f0104467:	74 11                	je     f010447a <dequeue+0x4e>
f0104469:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010446c:	8b 40 44             	mov    0x44(%eax),%eax
f010446f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104472:	8b 52 48             	mov    0x48(%edx),%edx
f0104475:	89 50 48             	mov    %edx,0x48(%eax)
f0104478:	eb 0c                	jmp    f0104486 <dequeue+0x5a>
f010447a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010447d:	8b 50 48             	mov    0x48(%eax),%edx
f0104480:	8b 45 08             	mov    0x8(%ebp),%eax
f0104483:	89 50 04             	mov    %edx,0x4(%eax)
f0104486:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104489:	8b 40 48             	mov    0x48(%eax),%eax
f010448c:	85 c0                	test   %eax,%eax
f010448e:	74 11                	je     f01044a1 <dequeue+0x75>
f0104490:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104493:	8b 40 48             	mov    0x48(%eax),%eax
f0104496:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104499:	8b 52 44             	mov    0x44(%edx),%edx
f010449c:	89 50 44             	mov    %edx,0x44(%eax)
f010449f:	eb 0b                	jmp    f01044ac <dequeue+0x80>
f01044a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044a4:	8b 50 44             	mov    0x44(%eax),%edx
f01044a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01044aa:	89 10                	mov    %edx,(%eax)
f01044ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044af:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01044b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044b9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01044c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01044c6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01044c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044cc:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01044cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01044d2:	c9                   	leave  
f01044d3:	c3                   	ret    

f01044d4 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01044d4:	55                   	push   %ebp
f01044d5:	89 e5                	mov    %esp,%ebp
f01044d7:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f01044da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044de:	0f 84 8a 00 00 00    	je     f010456e <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f01044e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044e8:	75 14                	jne    f01044fe <remove_from_queue+0x2a>
f01044ea:	83 ec 04             	sub    $0x4,%esp
f01044ed:	68 24 4b 13 f0       	push   $0xf0134b24
f01044f2:	6a 41                	push   $0x41
f01044f4:	68 13 4b 13 f0       	push   $0xf0134b13
f01044f9:	e8 a8 bc ff ff       	call   f01001a6 <_panic>
f01044fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104501:	8b 40 44             	mov    0x44(%eax),%eax
f0104504:	85 c0                	test   %eax,%eax
f0104506:	74 11                	je     f0104519 <remove_from_queue+0x45>
f0104508:	8b 45 0c             	mov    0xc(%ebp),%eax
f010450b:	8b 40 44             	mov    0x44(%eax),%eax
f010450e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104511:	8b 52 48             	mov    0x48(%edx),%edx
f0104514:	89 50 48             	mov    %edx,0x48(%eax)
f0104517:	eb 0c                	jmp    f0104525 <remove_from_queue+0x51>
f0104519:	8b 45 0c             	mov    0xc(%ebp),%eax
f010451c:	8b 50 48             	mov    0x48(%eax),%edx
f010451f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104522:	89 50 04             	mov    %edx,0x4(%eax)
f0104525:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104528:	8b 40 48             	mov    0x48(%eax),%eax
f010452b:	85 c0                	test   %eax,%eax
f010452d:	74 11                	je     f0104540 <remove_from_queue+0x6c>
f010452f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104532:	8b 40 48             	mov    0x48(%eax),%eax
f0104535:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104538:	8b 52 44             	mov    0x44(%edx),%edx
f010453b:	89 50 44             	mov    %edx,0x44(%eax)
f010453e:	eb 0b                	jmp    f010454b <remove_from_queue+0x77>
f0104540:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104543:	8b 50 44             	mov    0x44(%eax),%edx
f0104546:	8b 45 08             	mov    0x8(%ebp),%eax
f0104549:	89 10                	mov    %edx,(%eax)
f010454b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010454e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104555:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104558:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010455f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104562:	8b 40 0c             	mov    0xc(%eax),%eax
f0104565:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104568:	8b 45 08             	mov    0x8(%ebp),%eax
f010456b:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010456e:	90                   	nop
f010456f:	c9                   	leave  
f0104570:	c3                   	ret    

f0104571 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104571:	55                   	push   %ebp
f0104572:	89 e5                	mov    %esp,%ebp
f0104574:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0104577:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f010457e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104581:	8b 00                	mov    (%eax),%eax
f0104583:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104586:	eb 19                	jmp    f01045a1 <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0104588:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010458b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010458e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104591:	75 05                	jne    f0104598 <find_env_in_queue+0x27>
		{
			return ptr_env;
f0104593:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104596:	eb 37                	jmp    f01045cf <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104598:	8b 45 08             	mov    0x8(%ebp),%eax
f010459b:	8b 40 08             	mov    0x8(%eax),%eax
f010459e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045a1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045a5:	74 08                	je     f01045af <find_env_in_queue+0x3e>
f01045a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045aa:	8b 40 44             	mov    0x44(%eax),%eax
f01045ad:	eb 05                	jmp    f01045b4 <find_env_in_queue+0x43>
f01045af:	b8 00 00 00 00       	mov    $0x0,%eax
f01045b4:	8b 55 08             	mov    0x8(%ebp),%edx
f01045b7:	89 42 08             	mov    %eax,0x8(%edx)
f01045ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bd:	8b 40 08             	mov    0x8(%eax),%eax
f01045c0:	85 c0                	test   %eax,%eax
f01045c2:	75 c4                	jne    f0104588 <find_env_in_queue+0x17>
f01045c4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045c8:	75 be                	jne    f0104588 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01045ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045cf:	c9                   	leave  
f01045d0:	c3                   	ret    

f01045d1 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f01045d1:	55                   	push   %ebp
f01045d2:	89 e5                	mov    %esp,%ebp
f01045d4:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f01045d7:	83 ec 04             	sub    $0x4,%esp
f01045da:	68 44 4b 13 f0       	push   $0xf0134b44
f01045df:	6a 58                	push   $0x58
f01045e1:	68 13 4b 13 f0       	push   $0xf0134b13
f01045e6:	e8 bb bb ff ff       	call   f01001a6 <_panic>

f01045eb <fos_scheduler>:

}

void
fos_scheduler(void)
{
f01045eb:	55                   	push   %ebp
f01045ec:	89 e5                	mov    %esp,%ebp
f01045ee:	83 ec 18             	sub    $0x18,%esp
	chk1();
f01045f1:	e8 ff b0 02 00       	call   f012f6f5 <chk1>
	scheduler_status = SCH_STARTED;
f01045f6:	c7 05 b4 84 6e f0 01 	movl   $0x1,0xf06e84b4
f01045fd:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104600:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104607:	a1 a8 84 6e f0       	mov    0xf06e84a8,%eax
f010460c:	85 c0                	test   %eax,%eax
f010460e:	75 48                	jne    f0104658 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104610:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0104615:	85 c0                	test   %eax,%eax
f0104617:	74 16                	je     f010462f <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104619:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010461e:	83 ec 08             	sub    $0x8,%esp
f0104621:	50                   	push   %eax
f0104622:	68 0c 01 68 f0       	push   $0xf068010c
f0104627:	e8 8b fd ff ff       	call   f01043b7 <enqueue>
f010462c:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010462f:	83 ec 0c             	sub    $0xc,%esp
f0104632:	68 0c 01 68 f0       	push   $0xf068010c
f0104637:	e8 f0 fd ff ff       	call   f010442c <dequeue>
f010463c:	83 c4 10             	add    $0x10,%esp
f010463f:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104642:	a0 88 84 6e f0       	mov    0xf06e8488,%al
f0104647:	0f b6 c0             	movzbl %al,%eax
f010464a:	83 ec 0c             	sub    $0xc,%esp
f010464d:	50                   	push   %eax
f010464e:	e8 41 fb ff ff       	call   f0104194 <kclock_set_quantum>
f0104653:	83 c4 10             	add    $0x10,%esp
f0104656:	eb 12                	jmp    f010466a <fos_scheduler+0x7f>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104658:	a1 a8 84 6e f0       	mov    0xf06e84a8,%eax
f010465d:	83 f8 01             	cmp    $0x1,%eax
f0104660:	75 08                	jne    f010466a <fos_scheduler+0x7f>
	{
		next_env = fos_scheduler_MLFQ();
f0104662:	e8 6a ff ff ff       	call   f01045d1 <fos_scheduler_MLFQ>
f0104667:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010466a:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010466f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0104672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104675:	a3 34 87 65 f0       	mov    %eax,0xf0658734
	chk2(next_env) ;
f010467a:	83 ec 0c             	sub    $0xc,%esp
f010467d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104680:	e8 ad b0 02 00       	call   f012f732 <chk2>
f0104685:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0104688:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010468b:	a3 34 87 65 f0       	mov    %eax,0xf0658734

	//sched_print_all();

	if(next_env != NULL)
f0104690:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104694:	74 0b                	je     f01046a1 <fos_scheduler+0xb6>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0104696:	83 ec 0c             	sub    $0xc,%esp
f0104699:	ff 75 f4             	pushl  -0xc(%ebp)
f010469c:	e8 90 49 00 00       	call   f0109031 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01046a1:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f01046a8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01046ab:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01046b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01046b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01046b6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01046b9:	c7 05 b4 84 6e f0 00 	movl   $0x0,0xf06e84b4
f01046c0:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01046c3:	83 ec 0c             	sub    $0xc,%esp
f01046c6:	6a 00                	push   $0x0
f01046c8:	e8 86 c5 ff ff       	call   f0100c53 <run_command_prompt>
f01046cd:	83 c4 10             	add    $0x10,%esp
f01046d0:	eb f1                	jmp    f01046c3 <fos_scheduler+0xd8>

f01046d2 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01046d2:	55                   	push   %ebp
f01046d3:	89 e5                	mov    %esp,%ebp
f01046d5:	83 ec 18             	sub    $0x18,%esp
f01046d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01046db:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f01046de:	c7 05 b4 84 6e f0 00 	movl   $0x0,0xf06e84b4
f01046e5:	00 00 00 
	scheduler_method = SCH_RR;
f01046e8:	c7 05 a8 84 6e f0 00 	movl   $0x0,0xf06e84a8
f01046ef:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01046f2:	c6 05 dc 84 6e f0 01 	movb   $0x1,0xf06e84dc
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f01046f9:	8a 45 f4             	mov    -0xc(%ebp),%al
f01046fc:	a2 88 84 6e f0       	mov    %al,0xf06e8488
	kclock_set_quantum(quantums[0]);
f0104701:	a0 88 84 6e f0       	mov    0xf06e8488,%al
f0104706:	0f b6 c0             	movzbl %al,%eax
f0104709:	83 ec 0c             	sub    $0xc,%esp
f010470c:	50                   	push   %eax
f010470d:	e8 82 fa ff ff       	call   f0104194 <kclock_set_quantum>
f0104712:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104715:	83 ec 0c             	sub    $0xc,%esp
f0104718:	68 0c 01 68 f0       	push   $0xf068010c
f010471d:	e8 54 fc ff ff       	call   f0104376 <init_queue>
f0104722:	83 c4 10             	add    $0x10,%esp
}
f0104725:	90                   	nop
f0104726:	c9                   	leave  
f0104727:	c3                   	ret    

f0104728 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0104728:	55                   	push   %ebp
f0104729:	89 e5                	mov    %esp,%ebp
f010472b:	83 ec 18             	sub    $0x18,%esp
f010472e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104731:	88 45 f4             	mov    %al,-0xc(%ebp)

	//[1] Create the ready queues and initialize them using init_queue()
	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	//[3] Set the CPU quantum by the first level one
#else
	panic("sched_init_MLFQ: Kernel Heap is disabled");
f0104734:	83 ec 04             	sub    $0x4,%esp
f0104737:	68 78 4b 13 f0       	push   $0xf0134b78
f010473c:	68 cc 00 00 00       	push   $0xcc
f0104741:	68 13 4b 13 f0       	push   $0xf0134b13
f0104746:	e8 5b ba ff ff       	call   f01001a6 <_panic>

f010474b <sched_init>:
#endif
}


void sched_init()
{
f010474b:	55                   	push   %ebp
f010474c:	89 e5                	mov    %esp,%ebp
f010474e:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0104751:	c7 05 74 60 6e f0 00 	movl   $0x0,0xf06e6074
f0104758:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f010475b:	83 ec 0c             	sub    $0xc,%esp
f010475e:	6a 0a                	push   $0xa
f0104760:	e8 6d ff ff ff       	call   f01046d2 <sched_init_RR>
f0104765:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104768:	83 ec 0c             	sub    $0xc,%esp
f010476b:	68 98 84 6e f0       	push   $0xf06e8498
f0104770:	e8 01 fc ff ff       	call   f0104376 <init_queue>
f0104775:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104778:	83 ec 0c             	sub    $0xc,%esp
f010477b:	68 64 60 6e f0       	push   $0xf06e6064
f0104780:	e8 f1 fb ff ff       	call   f0104376 <init_queue>
f0104785:	83 c4 10             	add    $0x10,%esp
}
f0104788:	90                   	nop
f0104789:	c9                   	leave  
f010478a:	c3                   	ret    

f010478b <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010478b:	55                   	push   %ebp
f010478c:	89 e5                	mov    %esp,%ebp
f010478e:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
f0104791:	83 ec 0c             	sub    $0xc,%esp
f0104794:	68 0c 01 68 f0       	push   $0xf068010c
f0104799:	e8 9e 2c 00 00       	call   f010743c <kfree>
f010479e:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
	kfree(quantums);
f01047a1:	83 ec 0c             	sub    $0xc,%esp
f01047a4:	68 88 84 6e f0       	push   $0xf06e8488
f01047a9:	e8 8e 2c 00 00       	call   f010743c <kfree>
f01047ae:	83 c4 10             	add    $0x10,%esp
}
f01047b1:	90                   	nop
f01047b2:	c9                   	leave  
f01047b3:	c3                   	ret    

f01047b4 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f01047b4:	55                   	push   %ebp
f01047b5:	89 e5                	mov    %esp,%ebp
f01047b7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01047ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047be:	74 1d                	je     f01047dd <sched_insert_ready+0x29>
	{
		env->env_status = ENV_READY ;
f01047c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c3:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f01047ca:	83 ec 08             	sub    $0x8,%esp
f01047cd:	ff 75 08             	pushl  0x8(%ebp)
f01047d0:	68 0c 01 68 f0       	push   $0xf068010c
f01047d5:	e8 dd fb ff ff       	call   f01043b7 <enqueue>
f01047da:	83 c4 10             	add    $0x10,%esp
	}
}
f01047dd:	90                   	nop
f01047de:	c9                   	leave  
f01047df:	c3                   	ret    

f01047e0 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01047e0:	55                   	push   %ebp
f01047e1:	89 e5                	mov    %esp,%ebp
f01047e3:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01047e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047ea:	0f 84 02 01 00 00    	je     f01048f2 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01047f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01047f7:	e9 e5 00 00 00       	jmp    f01048e1 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01047fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01047ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104802:	89 c2                	mov    %eax,%edx
f0104804:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104807:	c1 e0 04             	shl    $0x4,%eax
f010480a:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f010480f:	52                   	push   %edx
f0104810:	50                   	push   %eax
f0104811:	e8 5b fd ff ff       	call   f0104571 <find_env_in_queue>
f0104816:	83 c4 08             	add    $0x8,%esp
f0104819:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f010481c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104820:	0f 84 b8 00 00 00    	je     f01048de <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0104826:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010482a:	75 17                	jne    f0104843 <sched_remove_ready+0x63>
f010482c:	83 ec 04             	sub    $0x4,%esp
f010482f:	68 24 4b 13 f0       	push   $0xf0134b24
f0104834:	68 f5 00 00 00       	push   $0xf5
f0104839:	68 13 4b 13 f0       	push   $0xf0134b13
f010483e:	e8 63 b9 ff ff       	call   f01001a6 <_panic>
f0104843:	8b 45 08             	mov    0x8(%ebp),%eax
f0104846:	8b 40 44             	mov    0x44(%eax),%eax
f0104849:	85 c0                	test   %eax,%eax
f010484b:	74 11                	je     f010485e <sched_remove_ready+0x7e>
f010484d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104850:	8b 40 44             	mov    0x44(%eax),%eax
f0104853:	8b 55 08             	mov    0x8(%ebp),%edx
f0104856:	8b 52 48             	mov    0x48(%edx),%edx
f0104859:	89 50 48             	mov    %edx,0x48(%eax)
f010485c:	eb 14                	jmp    f0104872 <sched_remove_ready+0x92>
f010485e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104861:	8b 40 48             	mov    0x48(%eax),%eax
f0104864:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104867:	c1 e2 04             	shl    $0x4,%edx
f010486a:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f0104870:	89 02                	mov    %eax,(%edx)
f0104872:	8b 45 08             	mov    0x8(%ebp),%eax
f0104875:	8b 40 48             	mov    0x48(%eax),%eax
f0104878:	85 c0                	test   %eax,%eax
f010487a:	74 11                	je     f010488d <sched_remove_ready+0xad>
f010487c:	8b 45 08             	mov    0x8(%ebp),%eax
f010487f:	8b 40 48             	mov    0x48(%eax),%eax
f0104882:	8b 55 08             	mov    0x8(%ebp),%edx
f0104885:	8b 52 44             	mov    0x44(%edx),%edx
f0104888:	89 50 44             	mov    %edx,0x44(%eax)
f010488b:	eb 14                	jmp    f01048a1 <sched_remove_ready+0xc1>
f010488d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104890:	8b 40 44             	mov    0x44(%eax),%eax
f0104893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104896:	c1 e2 04             	shl    $0x4,%edx
f0104899:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f010489f:	89 02                	mov    %eax,(%edx)
f01048a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01048ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01048b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048b8:	c1 e0 04             	shl    $0x4,%eax
f01048bb:	05 18 01 68 f0       	add    $0xf0680118,%eax
f01048c0:	8b 00                	mov    (%eax),%eax
f01048c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01048c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048c8:	c1 e0 04             	shl    $0x4,%eax
f01048cb:	05 18 01 68 f0       	add    $0xf0680118,%eax
f01048d0:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01048d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048d5:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f01048dc:	eb 14                	jmp    f01048f2 <sched_remove_ready+0x112>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048de:	ff 45 f4             	incl   -0xc(%ebp)
f01048e1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01048e6:	0f b6 c0             	movzbl %al,%eax
f01048e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01048ec:	0f 8f 0a ff ff ff    	jg     f01047fc <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01048f2:	c9                   	leave  
f01048f3:	c3                   	ret    

f01048f4 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01048f4:	55                   	push   %ebp
f01048f5:	89 e5                	mov    %esp,%ebp
f01048f7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01048fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048fe:	74 1d                	je     f010491d <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104900:	8b 45 08             	mov    0x8(%ebp),%eax
f0104903:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f010490a:	83 ec 08             	sub    $0x8,%esp
f010490d:	ff 75 08             	pushl  0x8(%ebp)
f0104910:	68 98 84 6e f0       	push   $0xf06e8498
f0104915:	e8 9d fa ff ff       	call   f01043b7 <enqueue>
f010491a:	83 c4 10             	add    $0x10,%esp
	}
}
f010491d:	90                   	nop
f010491e:	c9                   	leave  
f010491f:	c3                   	ret    

f0104920 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104920:	55                   	push   %ebp
f0104921:	89 e5                	mov    %esp,%ebp
f0104923:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104926:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010492a:	0f 84 92 00 00 00    	je     f01049c2 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104930:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104934:	75 17                	jne    f010494d <sched_remove_new+0x2d>
f0104936:	83 ec 04             	sub    $0x4,%esp
f0104939:	68 24 4b 13 f0       	push   $0xf0134b24
f010493e:	68 09 01 00 00       	push   $0x109
f0104943:	68 13 4b 13 f0       	push   $0xf0134b13
f0104948:	e8 59 b8 ff ff       	call   f01001a6 <_panic>
f010494d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104950:	8b 40 44             	mov    0x44(%eax),%eax
f0104953:	85 c0                	test   %eax,%eax
f0104955:	74 11                	je     f0104968 <sched_remove_new+0x48>
f0104957:	8b 45 08             	mov    0x8(%ebp),%eax
f010495a:	8b 40 44             	mov    0x44(%eax),%eax
f010495d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104960:	8b 52 48             	mov    0x48(%edx),%edx
f0104963:	89 50 48             	mov    %edx,0x48(%eax)
f0104966:	eb 0b                	jmp    f0104973 <sched_remove_new+0x53>
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	8b 40 48             	mov    0x48(%eax),%eax
f010496e:	a3 9c 84 6e f0       	mov    %eax,0xf06e849c
f0104973:	8b 45 08             	mov    0x8(%ebp),%eax
f0104976:	8b 40 48             	mov    0x48(%eax),%eax
f0104979:	85 c0                	test   %eax,%eax
f010497b:	74 11                	je     f010498e <sched_remove_new+0x6e>
f010497d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104980:	8b 40 48             	mov    0x48(%eax),%eax
f0104983:	8b 55 08             	mov    0x8(%ebp),%edx
f0104986:	8b 52 44             	mov    0x44(%edx),%edx
f0104989:	89 50 44             	mov    %edx,0x44(%eax)
f010498c:	eb 0b                	jmp    f0104999 <sched_remove_new+0x79>
f010498e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104991:	8b 40 44             	mov    0x44(%eax),%eax
f0104994:	a3 98 84 6e f0       	mov    %eax,0xf06e8498
f0104999:	8b 45 08             	mov    0x8(%ebp),%eax
f010499c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01049a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01049a6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01049ad:	a1 a4 84 6e f0       	mov    0xf06e84a4,%eax
f01049b2:	48                   	dec    %eax
f01049b3:	a3 a4 84 6e f0       	mov    %eax,0xf06e84a4
		env->env_status = ENV_UNKNOWN;
f01049b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bb:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01049c2:	90                   	nop
f01049c3:	c9                   	leave  
f01049c4:	c3                   	ret    

f01049c5 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f01049c5:	55                   	push   %ebp
f01049c6:	89 e5                	mov    %esp,%ebp
f01049c8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049cf:	74 34                	je     f0104a05 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01049d1:	e8 4e 89 00 00       	call   f010d324 <isBufferingEnabled>
f01049d6:	84 c0                	test   %al,%al
f01049d8:	74 0e                	je     f01049e8 <sched_insert_exit+0x23>
f01049da:	83 ec 0c             	sub    $0xc,%esp
f01049dd:	ff 75 08             	pushl  0x8(%ebp)
f01049e0:	e8 b5 5a 00 00       	call   f010a49a <cleanup_buffers>
f01049e5:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f01049f2:	83 ec 08             	sub    $0x8,%esp
f01049f5:	ff 75 08             	pushl  0x8(%ebp)
f01049f8:	68 64 60 6e f0       	push   $0xf06e6064
f01049fd:	e8 b5 f9 ff ff       	call   f01043b7 <enqueue>
f0104a02:	83 c4 10             	add    $0x10,%esp
	}
}
f0104a05:	90                   	nop
f0104a06:	c9                   	leave  
f0104a07:	c3                   	ret    

f0104a08 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104a08:	55                   	push   %ebp
f0104a09:	89 e5                	mov    %esp,%ebp
f0104a0b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a0e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a12:	0f 84 92 00 00 00    	je     f0104aaa <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104a18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a1c:	75 17                	jne    f0104a35 <sched_remove_exit+0x2d>
f0104a1e:	83 ec 04             	sub    $0x4,%esp
f0104a21:	68 24 4b 13 f0       	push   $0xf0134b24
f0104a26:	68 1b 01 00 00       	push   $0x11b
f0104a2b:	68 13 4b 13 f0       	push   $0xf0134b13
f0104a30:	e8 71 b7 ff ff       	call   f01001a6 <_panic>
f0104a35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a38:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3b:	85 c0                	test   %eax,%eax
f0104a3d:	74 11                	je     f0104a50 <sched_remove_exit+0x48>
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	8b 40 44             	mov    0x44(%eax),%eax
f0104a45:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a48:	8b 52 48             	mov    0x48(%edx),%edx
f0104a4b:	89 50 48             	mov    %edx,0x48(%eax)
f0104a4e:	eb 0b                	jmp    f0104a5b <sched_remove_exit+0x53>
f0104a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a53:	8b 40 48             	mov    0x48(%eax),%eax
f0104a56:	a3 68 60 6e f0       	mov    %eax,0xf06e6068
f0104a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a61:	85 c0                	test   %eax,%eax
f0104a63:	74 11                	je     f0104a76 <sched_remove_exit+0x6e>
f0104a65:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a68:	8b 40 48             	mov    0x48(%eax),%eax
f0104a6b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a6e:	8b 52 44             	mov    0x44(%edx),%edx
f0104a71:	89 50 44             	mov    %edx,0x44(%eax)
f0104a74:	eb 0b                	jmp    f0104a81 <sched_remove_exit+0x79>
f0104a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a79:	8b 40 44             	mov    0x44(%eax),%eax
f0104a7c:	a3 64 60 6e f0       	mov    %eax,0xf06e6064
f0104a81:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a84:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a8e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a95:	a1 70 60 6e f0       	mov    0xf06e6070,%eax
f0104a9a:	48                   	dec    %eax
f0104a9b:	a3 70 60 6e f0       	mov    %eax,0xf06e6070
		env->env_status = ENV_UNKNOWN;
f0104aa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa3:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104aaa:	90                   	nop
f0104aab:	c9                   	leave  
f0104aac:	c3                   	ret    

f0104aad <sched_print_all>:

void sched_print_all()
{
f0104aad:	55                   	push   %ebp
f0104aae:	89 e5                	mov    %esp,%ebp
f0104ab0:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ab3:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104ab8:	85 c0                	test   %eax,%eax
f0104aba:	74 6c                	je     f0104b28 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104abc:	83 ec 0c             	sub    $0xc,%esp
f0104abf:	68 a4 4b 13 f0       	push   $0xf0134ba4
f0104ac4:	e8 64 c1 ff ff       	call   f0100c2d <cprintf>
f0104ac9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104acc:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104ad1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ad4:	eb 29                	jmp    f0104aff <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ad9:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ae2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ae5:	83 ec 04             	sub    $0x4,%esp
f0104ae8:	52                   	push   %edx
f0104ae9:	50                   	push   %eax
f0104aea:	68 c6 4b 13 f0       	push   $0xf0134bc6
f0104aef:	e8 39 c1 ff ff       	call   f0100c2d <cprintf>
f0104af4:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104af7:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104afc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104aff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b03:	74 08                	je     f0104b0d <sched_print_all+0x60>
f0104b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b08:	8b 40 44             	mov    0x44(%eax),%eax
f0104b0b:	eb 05                	jmp    f0104b12 <sched_print_all+0x65>
f0104b0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104b12:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0104b17:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104b1c:	85 c0                	test   %eax,%eax
f0104b1e:	75 b6                	jne    f0104ad6 <sched_print_all+0x29>
f0104b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b24:	75 b0                	jne    f0104ad6 <sched_print_all+0x29>
f0104b26:	eb 10                	jmp    f0104b38 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104b28:	83 ec 0c             	sub    $0xc,%esp
f0104b2b:	68 d0 4b 13 f0       	push   $0xf0134bd0
f0104b30:	e8 f8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b35:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104b38:	83 ec 0c             	sub    $0xc,%esp
f0104b3b:	68 ec 4b 13 f0       	push   $0xf0134bec
f0104b40:	e8 e8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104b48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104b4f:	e9 cb 00 00 00       	jmp    f0104c1f <sched_print_all+0x172>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104b54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b57:	c1 e0 04             	shl    $0x4,%eax
f0104b5a:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0104b5f:	8b 00                	mov    (%eax),%eax
f0104b61:	85 c0                	test   %eax,%eax
f0104b63:	0f 84 90 00 00 00    	je     f0104bf9 <sched_print_all+0x14c>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104b69:	83 ec 08             	sub    $0x8,%esp
f0104b6c:	ff 75 f0             	pushl  -0x10(%ebp)
f0104b6f:	68 20 4c 13 f0       	push   $0xf0134c20
f0104b74:	e8 b4 c0 ff ff       	call   f0100c2d <cprintf>
f0104b79:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b7f:	c1 e0 04             	shl    $0x4,%eax
f0104b82:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0104b87:	8b 00                	mov    (%eax),%eax
f0104b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b8c:	eb 31                	jmp    f0104bbf <sched_print_all+0x112>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b91:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b9a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104b9d:	83 ec 04             	sub    $0x4,%esp
f0104ba0:	52                   	push   %edx
f0104ba1:	50                   	push   %eax
f0104ba2:	68 c6 4b 13 f0       	push   $0xf0134bc6
f0104ba7:	e8 81 c0 ff ff       	call   f0100c2d <cprintf>
f0104bac:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104baf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104bb2:	c1 e0 04             	shl    $0x4,%eax
f0104bb5:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0104bba:	8b 00                	mov    (%eax),%eax
f0104bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bc3:	74 08                	je     f0104bcd <sched_print_all+0x120>
f0104bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc8:	8b 40 44             	mov    0x44(%eax),%eax
f0104bcb:	eb 05                	jmp    f0104bd2 <sched_print_all+0x125>
f0104bcd:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104bd5:	c1 e2 04             	shl    $0x4,%edx
f0104bd8:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f0104bde:	89 02                	mov    %eax,(%edx)
f0104be0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104be3:	c1 e0 04             	shl    $0x4,%eax
f0104be6:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0104beb:	8b 00                	mov    (%eax),%eax
f0104bed:	85 c0                	test   %eax,%eax
f0104bef:	75 9d                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bf5:	75 97                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf7:	eb 13                	jmp    f0104c0c <sched_print_all+0x15f>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104bf9:	83 ec 08             	sub    $0x8,%esp
f0104bfc:	ff 75 f0             	pushl  -0x10(%ebp)
f0104bff:	68 48 4c 13 f0       	push   $0xf0134c48
f0104c04:	e8 24 c0 ff ff       	call   f0100c2d <cprintf>
f0104c09:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104c0c:	83 ec 0c             	sub    $0xc,%esp
f0104c0f:	68 ec 4b 13 f0       	push   $0xf0134bec
f0104c14:	e8 14 c0 ff ff       	call   f0100c2d <cprintf>
f0104c19:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c1c:	ff 45 f0             	incl   -0x10(%ebp)
f0104c1f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0104c24:	0f b6 c0             	movzbl %al,%eax
f0104c27:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104c2a:	0f 8f 24 ff ff ff    	jg     f0104b54 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104c30:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f0104c35:	85 c0                	test   %eax,%eax
f0104c37:	74 6c                	je     f0104ca5 <sched_print_all+0x1f8>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104c39:	83 ec 0c             	sub    $0xc,%esp
f0104c3c:	68 6c 4c 13 f0       	push   $0xf0134c6c
f0104c41:	e8 e7 bf ff ff       	call   f0100c2d <cprintf>
f0104c46:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c49:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f0104c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c51:	eb 29                	jmp    f0104c7c <sched_print_all+0x1cf>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c56:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c62:	83 ec 04             	sub    $0x4,%esp
f0104c65:	52                   	push   %edx
f0104c66:	50                   	push   %eax
f0104c67:	68 c6 4b 13 f0       	push   $0xf0134bc6
f0104c6c:	e8 bc bf ff ff       	call   f0100c2d <cprintf>
f0104c71:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c74:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0104c79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c80:	74 08                	je     f0104c8a <sched_print_all+0x1dd>
f0104c82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c85:	8b 40 44             	mov    0x44(%eax),%eax
f0104c88:	eb 05                	jmp    f0104c8f <sched_print_all+0x1e2>
f0104c8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c8f:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f0104c94:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0104c99:	85 c0                	test   %eax,%eax
f0104c9b:	75 b6                	jne    f0104c53 <sched_print_all+0x1a6>
f0104c9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ca1:	75 b0                	jne    f0104c53 <sched_print_all+0x1a6>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104ca3:	eb 10                	jmp    f0104cb5 <sched_print_all+0x208>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104ca5:	83 ec 0c             	sub    $0xc,%esp
f0104ca8:	68 8e 4c 13 f0       	push   $0xf0134c8e
f0104cad:	e8 7b bf ff ff       	call   f0100c2d <cprintf>
f0104cb2:	83 c4 10             	add    $0x10,%esp
	}
}
f0104cb5:	90                   	nop
f0104cb6:	c9                   	leave  
f0104cb7:	c3                   	ret    

f0104cb8 <sched_run_all>:

void sched_run_all()
{
f0104cb8:	55                   	push   %ebp
f0104cb9:	89 e5                	mov    %esp,%ebp
f0104cbb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104cbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104cc5:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104cca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ccd:	eb 24                	jmp    f0104cf3 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104ccf:	83 ec 0c             	sub    $0xc,%esp
f0104cd2:	ff 75 f4             	pushl  -0xc(%ebp)
f0104cd5:	e8 46 fc ff ff       	call   f0104920 <sched_remove_new>
f0104cda:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104cdd:	83 ec 0c             	sub    $0xc,%esp
f0104ce0:	ff 75 f4             	pushl  -0xc(%ebp)
f0104ce3:	e8 cc fa ff ff       	call   f01047b4 <sched_insert_ready>
f0104ce8:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104ceb:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cf3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cf7:	74 08                	je     f0104d01 <sched_run_all+0x49>
f0104cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cfc:	8b 40 44             	mov    0x44(%eax),%eax
f0104cff:	eb 05                	jmp    f0104d06 <sched_run_all+0x4e>
f0104d01:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d06:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0104d0b:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104d10:	85 c0                	test   %eax,%eax
f0104d12:	75 bb                	jne    f0104ccf <sched_run_all+0x17>
f0104d14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d18:	75 b5                	jne    f0104ccf <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104d1a:	a1 b4 84 6e f0       	mov    0xf06e84b4,%eax
f0104d1f:	85 c0                	test   %eax,%eax
f0104d21:	75 05                	jne    f0104d28 <sched_run_all+0x70>
		fos_scheduler();
f0104d23:	e8 c3 f8 ff ff       	call   f01045eb <fos_scheduler>
}
f0104d28:	90                   	nop
f0104d29:	c9                   	leave  
f0104d2a:	c3                   	ret    

f0104d2b <sched_kill_all>:

void sched_kill_all()
{
f0104d2b:	55                   	push   %ebp
f0104d2c:	89 e5                	mov    %esp,%ebp
f0104d2e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104d31:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104d36:	85 c0                	test   %eax,%eax
f0104d38:	0f 84 98 00 00 00    	je     f0104dd6 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104d3e:	83 ec 0c             	sub    $0xc,%esp
f0104d41:	68 ac 4c 13 f0       	push   $0xf0134cac
f0104d46:	e8 e2 be ff ff       	call   f0100c2d <cprintf>
f0104d4b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104d4e:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104d53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d56:	eb 55                	jmp    f0104dad <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d5b:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d64:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d67:	83 ec 04             	sub    $0x4,%esp
f0104d6a:	52                   	push   %edx
f0104d6b:	50                   	push   %eax
f0104d6c:	68 d8 4c 13 f0       	push   $0xf0134cd8
f0104d71:	e8 b7 be ff ff       	call   f0100c2d <cprintf>
f0104d76:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104d79:	83 ec 0c             	sub    $0xc,%esp
f0104d7c:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d7f:	e8 9c fb ff ff       	call   f0104920 <sched_remove_new>
f0104d84:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104d87:	83 ec 0c             	sub    $0xc,%esp
f0104d8a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d8d:	e8 f3 42 00 00       	call   f0109085 <env_free>
f0104d92:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104d95:	83 ec 0c             	sub    $0xc,%esp
f0104d98:	68 eb 4c 13 f0       	push   $0xf0134ceb
f0104d9d:	e8 8b be ff ff       	call   f0100c2d <cprintf>
f0104da2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104da5:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db1:	74 08                	je     f0104dbb <sched_kill_all+0x90>
f0104db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104db6:	8b 40 44             	mov    0x44(%eax),%eax
f0104db9:	eb 05                	jmp    f0104dc0 <sched_kill_all+0x95>
f0104dbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc0:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0104dc5:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104dca:	85 c0                	test   %eax,%eax
f0104dcc:	75 8a                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dd2:	75 84                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dd4:	eb 10                	jmp    f0104de6 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104dd6:	83 ec 0c             	sub    $0xc,%esp
f0104dd9:	68 f1 4c 13 f0       	push   $0xf0134cf1
f0104dde:	e8 4a be ff ff       	call   f0100c2d <cprintf>
f0104de3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104de6:	83 ec 0c             	sub    $0xc,%esp
f0104de9:	68 ec 4b 13 f0       	push   $0xf0134bec
f0104dee:	e8 3a be ff ff       	call   f0100c2d <cprintf>
f0104df3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104df6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104dfd:	e9 a0 01 00 00       	jmp    f0104fa2 <sched_kill_all+0x277>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e05:	c1 e0 04             	shl    $0x4,%eax
f0104e08:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0104e0d:	8b 00                	mov    (%eax),%eax
f0104e0f:	85 c0                	test   %eax,%eax
f0104e11:	0f 84 65 01 00 00    	je     f0104f7c <sched_kill_all+0x251>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104e17:	83 ec 08             	sub    $0x8,%esp
f0104e1a:	ff 75 f0             	pushl  -0x10(%ebp)
f0104e1d:	68 0c 4d 13 f0       	push   $0xf0134d0c
f0104e22:	e8 06 be ff ff       	call   f0100c2d <cprintf>
f0104e27:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e2d:	c1 e0 04             	shl    $0x4,%eax
f0104e30:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0104e35:	8b 00                	mov    (%eax),%eax
f0104e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e3a:	e9 fb 00 00 00       	jmp    f0104f3a <sched_kill_all+0x20f>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e42:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e4b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e4e:	83 ec 04             	sub    $0x4,%esp
f0104e51:	52                   	push   %edx
f0104e52:	50                   	push   %eax
f0104e53:	68 d8 4c 13 f0       	push   $0xf0134cd8
f0104e58:	e8 d0 bd ff ff       	call   f0100c2d <cprintf>
f0104e5d:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104e60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e64:	75 17                	jne    f0104e7d <sched_kill_all+0x152>
f0104e66:	83 ec 04             	sub    $0x4,%esp
f0104e69:	68 24 4b 13 f0       	push   $0xf0134b24
f0104e6e:	68 76 01 00 00       	push   $0x176
f0104e73:	68 13 4b 13 f0       	push   $0xf0134b13
f0104e78:	e8 29 b3 ff ff       	call   f01001a6 <_panic>
f0104e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e80:	8b 40 44             	mov    0x44(%eax),%eax
f0104e83:	85 c0                	test   %eax,%eax
f0104e85:	74 11                	je     f0104e98 <sched_kill_all+0x16d>
f0104e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e8a:	8b 40 44             	mov    0x44(%eax),%eax
f0104e8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e90:	8b 52 48             	mov    0x48(%edx),%edx
f0104e93:	89 50 48             	mov    %edx,0x48(%eax)
f0104e96:	eb 14                	jmp    f0104eac <sched_kill_all+0x181>
f0104e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9b:	8b 40 48             	mov    0x48(%eax),%eax
f0104e9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ea1:	c1 e2 04             	shl    $0x4,%edx
f0104ea4:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f0104eaa:	89 02                	mov    %eax,(%edx)
f0104eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eaf:	8b 40 48             	mov    0x48(%eax),%eax
f0104eb2:	85 c0                	test   %eax,%eax
f0104eb4:	74 11                	je     f0104ec7 <sched_kill_all+0x19c>
f0104eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb9:	8b 40 48             	mov    0x48(%eax),%eax
f0104ebc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ebf:	8b 52 44             	mov    0x44(%edx),%edx
f0104ec2:	89 50 44             	mov    %edx,0x44(%eax)
f0104ec5:	eb 14                	jmp    f0104edb <sched_kill_all+0x1b0>
f0104ec7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eca:	8b 40 44             	mov    0x44(%eax),%eax
f0104ecd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ed0:	c1 e2 04             	shl    $0x4,%edx
f0104ed3:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f0104ed9:	89 02                	mov    %eax,(%edx)
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104ef2:	c1 e0 04             	shl    $0x4,%eax
f0104ef5:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0104efa:	8b 00                	mov    (%eax),%eax
f0104efc:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104eff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f02:	c1 e0 04             	shl    $0x4,%eax
f0104f05:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0104f0a:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0104f0c:	83 ec 0c             	sub    $0xc,%esp
f0104f0f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f12:	e8 6e 41 00 00       	call   f0109085 <env_free>
f0104f17:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104f1a:	83 ec 0c             	sub    $0xc,%esp
f0104f1d:	68 eb 4c 13 f0       	push   $0xf0134ceb
f0104f22:	e8 06 bd ff ff       	call   f0100c2d <cprintf>
f0104f27:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f2d:	c1 e0 04             	shl    $0x4,%eax
f0104f30:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0104f35:	8b 00                	mov    (%eax),%eax
f0104f37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f3e:	74 08                	je     f0104f48 <sched_kill_all+0x21d>
f0104f40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f43:	8b 40 44             	mov    0x44(%eax),%eax
f0104f46:	eb 05                	jmp    f0104f4d <sched_kill_all+0x222>
f0104f48:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f50:	c1 e2 04             	shl    $0x4,%edx
f0104f53:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f0104f59:	89 02                	mov    %eax,(%edx)
f0104f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f5e:	c1 e0 04             	shl    $0x4,%eax
f0104f61:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0104f66:	8b 00                	mov    (%eax),%eax
f0104f68:	85 c0                	test   %eax,%eax
f0104f6a:	0f 85 cf fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f74:	0f 85 c5 fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f7a:	eb 13                	jmp    f0104f8f <sched_kill_all+0x264>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0104f7c:	83 ec 08             	sub    $0x8,%esp
f0104f7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f82:	68 48 4c 13 f0       	push   $0xf0134c48
f0104f87:	e8 a1 bc ff ff       	call   f0100c2d <cprintf>
f0104f8c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104f8f:	83 ec 0c             	sub    $0xc,%esp
f0104f92:	68 ec 4b 13 f0       	push   $0xf0134bec
f0104f97:	e8 91 bc ff ff       	call   f0100c2d <cprintf>
f0104f9c:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f9f:	ff 45 f0             	incl   -0x10(%ebp)
f0104fa2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0104fa7:	0f b6 c0             	movzbl %al,%eax
f0104faa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104fad:	0f 8f 4f fe ff ff    	jg     f0104e02 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0104fb3:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f0104fb8:	85 c0                	test   %eax,%eax
f0104fba:	0f 84 98 00 00 00    	je     f0105058 <sched_kill_all+0x32d>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0104fc0:	83 ec 0c             	sub    $0xc,%esp
f0104fc3:	68 40 4d 13 f0       	push   $0xf0134d40
f0104fc8:	e8 60 bc ff ff       	call   f0100c2d <cprintf>
f0104fcd:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104fd0:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f0104fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd8:	eb 55                	jmp    f010502f <sched_kill_all+0x304>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fdd:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe9:	83 ec 04             	sub    $0x4,%esp
f0104fec:	52                   	push   %edx
f0104fed:	50                   	push   %eax
f0104fee:	68 d8 4c 13 f0       	push   $0xf0134cd8
f0104ff3:	e8 35 bc ff ff       	call   f0100c2d <cprintf>
f0104ff8:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0104ffb:	83 ec 0c             	sub    $0xc,%esp
f0104ffe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105001:	e8 02 fa ff ff       	call   f0104a08 <sched_remove_exit>
f0105006:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105009:	83 ec 0c             	sub    $0xc,%esp
f010500c:	ff 75 f4             	pushl  -0xc(%ebp)
f010500f:	e8 71 40 00 00       	call   f0109085 <env_free>
f0105014:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105017:	83 ec 0c             	sub    $0xc,%esp
f010501a:	68 eb 4c 13 f0       	push   $0xf0134ceb
f010501f:	e8 09 bc ff ff       	call   f0100c2d <cprintf>
f0105024:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105027:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f010502c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010502f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105033:	74 08                	je     f010503d <sched_kill_all+0x312>
f0105035:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105038:	8b 40 44             	mov    0x44(%eax),%eax
f010503b:	eb 05                	jmp    f0105042 <sched_kill_all+0x317>
f010503d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105042:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f0105047:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	75 8a                	jne    f0104fda <sched_kill_all+0x2af>
f0105050:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105054:	75 84                	jne    f0104fda <sched_kill_all+0x2af>
f0105056:	eb 10                	jmp    f0105068 <sched_kill_all+0x33d>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105058:	83 ec 0c             	sub    $0xc,%esp
f010505b:	68 8e 4c 13 f0       	push   $0xf0134c8e
f0105060:	e8 c8 bb ff ff       	call   f0100c2d <cprintf>
f0105065:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105068:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f010506f:	00 00 00 
	fos_scheduler();
f0105072:	e8 74 f5 ff ff       	call   f01045eb <fos_scheduler>

f0105077 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105077:	55                   	push   %ebp
f0105078:	89 e5                	mov    %esp,%ebp
f010507a:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010507d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105081:	74 0e                	je     f0105091 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105083:	83 ec 0c             	sub    $0xc,%esp
f0105086:	ff 75 08             	pushl  0x8(%ebp)
f0105089:	e8 66 f8 ff ff       	call   f01048f4 <sched_insert_new>
f010508e:	83 c4 10             	add    $0x10,%esp
	}
}
f0105091:	90                   	nop
f0105092:	c9                   	leave  
f0105093:	c3                   	ret    

f0105094 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105094:	55                   	push   %ebp
f0105095:	89 e5                	mov    %esp,%ebp
f0105097:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010509a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050a1:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f01050a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050a9:	eb 3d                	jmp    f01050e8 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f01050ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ae:	8b 40 4c             	mov    0x4c(%eax),%eax
f01050b1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01050b4:	75 2a                	jne    f01050e0 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f01050b6:	83 ec 0c             	sub    $0xc,%esp
f01050b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01050bc:	e8 5f f8 ff ff       	call   f0104920 <sched_remove_new>
f01050c1:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f01050c4:	83 ec 0c             	sub    $0xc,%esp
f01050c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01050ca:	e8 e5 f6 ff ff       	call   f01047b4 <sched_insert_ready>
f01050cf:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f01050d2:	a1 b4 84 6e f0       	mov    0xf06e84b4,%eax
f01050d7:	85 c0                	test   %eax,%eax
f01050d9:	75 36                	jne    f0105111 <sched_run_env+0x7d>
			{
				fos_scheduler();
f01050db:	e8 0b f5 ff ff       	call   f01045eb <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050e0:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f01050e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050ec:	74 08                	je     f01050f6 <sched_run_env+0x62>
f01050ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f1:	8b 40 44             	mov    0x44(%eax),%eax
f01050f4:	eb 05                	jmp    f01050fb <sched_run_env+0x67>
f01050f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01050fb:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0105100:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0105105:	85 c0                	test   %eax,%eax
f0105107:	75 a2                	jne    f01050ab <sched_run_env+0x17>
f0105109:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510d:	75 9c                	jne    f01050ab <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010510f:	eb 01                	jmp    f0105112 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105111:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105112:	90                   	nop
f0105113:	c9                   	leave  
f0105114:	c3                   	ret    

f0105115 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0105115:	55                   	push   %ebp
f0105116:	89 e5                	mov    %esp,%ebp
f0105118:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010511b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105122:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105129:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010512d:	75 59                	jne    f0105188 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010512f:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0105134:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105137:	eb 28                	jmp    f0105161 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f0105139:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010513f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105142:	75 15                	jne    f0105159 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105144:	83 ec 0c             	sub    $0xc,%esp
f0105147:	ff 75 f4             	pushl  -0xc(%ebp)
f010514a:	e8 d1 f7 ff ff       	call   f0104920 <sched_remove_new>
f010514f:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105152:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105159:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f010515e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105161:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105165:	74 08                	je     f010516f <sched_exit_env+0x5a>
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8b 40 44             	mov    0x44(%eax),%eax
f010516d:	eb 05                	jmp    f0105174 <sched_exit_env+0x5f>
f010516f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105174:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0105179:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f010517e:	85 c0                	test   %eax,%eax
f0105180:	75 b7                	jne    f0105139 <sched_exit_env+0x24>
f0105182:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105186:	75 b1                	jne    f0105139 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105188:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010518c:	0f 85 6e 01 00 00    	jne    f0105300 <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105192:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105199:	e9 4e 01 00 00       	jmp    f01052ec <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010519e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051a1:	c1 e0 04             	shl    $0x4,%eax
f01051a4:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f01051a9:	8b 00                	mov    (%eax),%eax
f01051ab:	85 c0                	test   %eax,%eax
f01051ad:	0f 84 30 01 00 00    	je     f01052e3 <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f01051b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01051ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051bd:	c1 e0 04             	shl    $0x4,%eax
f01051c0:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f01051c5:	8b 00                	mov    (%eax),%eax
f01051c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051ca:	e9 d4 00 00 00       	jmp    f01052a3 <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f01051cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051d8:	0f 85 b5 00 00 00    	jne    f0105293 <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01051de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e2:	75 17                	jne    f01051fb <sched_exit_env+0xe6>
f01051e4:	83 ec 04             	sub    $0x4,%esp
f01051e7:	68 24 4b 13 f0       	push   $0xf0134b24
f01051ec:	68 e1 01 00 00       	push   $0x1e1
f01051f1:	68 13 4b 13 f0       	push   $0xf0134b13
f01051f6:	e8 ab af ff ff       	call   f01001a6 <_panic>
f01051fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051fe:	8b 40 44             	mov    0x44(%eax),%eax
f0105201:	85 c0                	test   %eax,%eax
f0105203:	74 11                	je     f0105216 <sched_exit_env+0x101>
f0105205:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105208:	8b 40 44             	mov    0x44(%eax),%eax
f010520b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010520e:	8b 52 48             	mov    0x48(%edx),%edx
f0105211:	89 50 48             	mov    %edx,0x48(%eax)
f0105214:	eb 14                	jmp    f010522a <sched_exit_env+0x115>
f0105216:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105219:	8b 40 48             	mov    0x48(%eax),%eax
f010521c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010521f:	c1 e2 04             	shl    $0x4,%edx
f0105222:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f0105228:	89 02                	mov    %eax,(%edx)
f010522a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010522d:	8b 40 48             	mov    0x48(%eax),%eax
f0105230:	85 c0                	test   %eax,%eax
f0105232:	74 11                	je     f0105245 <sched_exit_env+0x130>
f0105234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105237:	8b 40 48             	mov    0x48(%eax),%eax
f010523a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010523d:	8b 52 44             	mov    0x44(%edx),%edx
f0105240:	89 50 44             	mov    %edx,0x44(%eax)
f0105243:	eb 14                	jmp    f0105259 <sched_exit_env+0x144>
f0105245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105248:	8b 40 44             	mov    0x44(%eax),%eax
f010524b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010524e:	c1 e2 04             	shl    $0x4,%edx
f0105251:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f0105257:	89 02                	mov    %eax,(%edx)
f0105259:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010525c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105263:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105266:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010526d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105270:	c1 e0 04             	shl    $0x4,%eax
f0105273:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0105278:	8b 00                	mov    (%eax),%eax
f010527a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010527d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105280:	c1 e0 04             	shl    $0x4,%eax
f0105283:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0105288:	89 10                	mov    %edx,(%eax)
						found = 1;
f010528a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105291:	eb 50                	jmp    f01052e3 <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105293:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105296:	c1 e0 04             	shl    $0x4,%eax
f0105299:	05 14 01 68 f0       	add    $0xf0680114,%eax
f010529e:	8b 00                	mov    (%eax),%eax
f01052a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052a7:	74 08                	je     f01052b1 <sched_exit_env+0x19c>
f01052a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052ac:	8b 40 44             	mov    0x44(%eax),%eax
f01052af:	eb 05                	jmp    f01052b6 <sched_exit_env+0x1a1>
f01052b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01052b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052b9:	c1 e2 04             	shl    $0x4,%edx
f01052bc:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f01052c2:	89 02                	mov    %eax,(%edx)
f01052c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01052c7:	c1 e0 04             	shl    $0x4,%eax
f01052ca:	05 14 01 68 f0       	add    $0xf0680114,%eax
f01052cf:	8b 00                	mov    (%eax),%eax
f01052d1:	85 c0                	test   %eax,%eax
f01052d3:	0f 85 f6 fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
f01052d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052dd:	0f 85 ec fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f01052e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052e7:	75 16                	jne    f01052ff <sched_exit_env+0x1ea>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052e9:	ff 45 ec             	incl   -0x14(%ebp)
f01052ec:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01052f1:	0f b6 c0             	movzbl %al,%eax
f01052f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01052f7:	0f 8f a1 fe ff ff    	jg     f010519e <sched_exit_env+0x89>
f01052fd:	eb 01                	jmp    f0105300 <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01052ff:	90                   	nop
		}
	}
	if (!found)
f0105300:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105304:	75 1c                	jne    f0105322 <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f0105306:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010530b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010530e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105311:	75 0f                	jne    f0105322 <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f0105313:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0105318:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f010531b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105322:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105326:	74 2a                	je     f0105352 <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0105328:	83 ec 0c             	sub    $0xc,%esp
f010532b:	ff 75 f4             	pushl  -0xc(%ebp)
f010532e:	e8 92 f6 ff ff       	call   f01049c5 <sched_insert_exit>
f0105333:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0105336:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010533b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010533e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105341:	75 0f                	jne    f0105352 <sched_exit_env+0x23d>
		{
			curenv = NULL;
f0105343:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f010534a:	00 00 00 
			fos_scheduler();
f010534d:	e8 99 f2 ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105352:	90                   	nop
f0105353:	c9                   	leave  
f0105354:	c3                   	ret    

f0105355 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105355:	55                   	push   %ebp
f0105356:	89 e5                	mov    %esp,%ebp
f0105358:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010535b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105362:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105369:	e9 3e 01 00 00       	jmp    f01054ac <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010536e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105371:	c1 e0 04             	shl    $0x4,%eax
f0105374:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0105379:	8b 00                	mov    (%eax),%eax
f010537b:	85 c0                	test   %eax,%eax
f010537d:	0f 84 26 01 00 00    	je     f01054a9 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105383:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010538a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010538d:	c1 e0 04             	shl    $0x4,%eax
f0105390:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0105395:	8b 00                	mov    (%eax),%eax
f0105397:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010539a:	e9 ca 00 00 00       	jmp    f0105469 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010539f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a3:	75 17                	jne    f01053bc <sched_exit_all_ready_envs+0x67>
f01053a5:	83 ec 04             	sub    $0x4,%esp
f01053a8:	68 24 4b 13 f0       	push   $0xf0134b24
f01053ad:	68 0c 02 00 00       	push   $0x20c
f01053b2:	68 13 4b 13 f0       	push   $0xf0134b13
f01053b7:	e8 ea ad ff ff       	call   f01001a6 <_panic>
f01053bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053bf:	8b 40 44             	mov    0x44(%eax),%eax
f01053c2:	85 c0                	test   %eax,%eax
f01053c4:	74 11                	je     f01053d7 <sched_exit_all_ready_envs+0x82>
f01053c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c9:	8b 40 44             	mov    0x44(%eax),%eax
f01053cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053cf:	8b 52 48             	mov    0x48(%edx),%edx
f01053d2:	89 50 48             	mov    %edx,0x48(%eax)
f01053d5:	eb 14                	jmp    f01053eb <sched_exit_all_ready_envs+0x96>
f01053d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053da:	8b 40 48             	mov    0x48(%eax),%eax
f01053dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f01053e9:	89 02                	mov    %eax,(%edx)
f01053eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ee:	8b 40 48             	mov    0x48(%eax),%eax
f01053f1:	85 c0                	test   %eax,%eax
f01053f3:	74 11                	je     f0105406 <sched_exit_all_ready_envs+0xb1>
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 48             	mov    0x48(%eax),%eax
f01053fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053fe:	8b 52 44             	mov    0x44(%edx),%edx
f0105401:	89 50 44             	mov    %edx,0x44(%eax)
f0105404:	eb 14                	jmp    f010541a <sched_exit_all_ready_envs+0xc5>
f0105406:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105409:	8b 40 44             	mov    0x44(%eax),%eax
f010540c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010540f:	c1 e2 04             	shl    $0x4,%edx
f0105412:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f0105418:	89 02                	mov    %eax,(%edx)
f010541a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010541d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105424:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105427:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010542e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105431:	c1 e0 04             	shl    $0x4,%eax
f0105434:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0105439:	8b 00                	mov    (%eax),%eax
f010543b:	8d 50 ff             	lea    -0x1(%eax),%edx
f010543e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105441:	c1 e0 04             	shl    $0x4,%eax
f0105444:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0105449:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f010544b:	83 ec 0c             	sub    $0xc,%esp
f010544e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105451:	e8 6f f5 ff ff       	call   f01049c5 <sched_insert_exit>
f0105456:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105459:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010545c:	c1 e0 04             	shl    $0x4,%eax
f010545f:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0105464:	8b 00                	mov    (%eax),%eax
f0105466:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105469:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010546d:	74 08                	je     f0105477 <sched_exit_all_ready_envs+0x122>
f010546f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105472:	8b 40 44             	mov    0x44(%eax),%eax
f0105475:	eb 05                	jmp    f010547c <sched_exit_all_ready_envs+0x127>
f0105477:	b8 00 00 00 00       	mov    $0x0,%eax
f010547c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010547f:	c1 e2 04             	shl    $0x4,%edx
f0105482:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f0105488:	89 02                	mov    %eax,(%edx)
f010548a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010548d:	c1 e0 04             	shl    $0x4,%eax
f0105490:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0105495:	8b 00                	mov    (%eax),%eax
f0105497:	85 c0                	test   %eax,%eax
f0105499:	0f 85 00 ff ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>
f010549f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054a3:	0f 85 f6 fe ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054a9:	ff 45 f0             	incl   -0x10(%ebp)
f01054ac:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01054b1:	0f b6 c0             	movzbl %al,%eax
f01054b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01054b7:	0f 8f b1 fe ff ff    	jg     f010536e <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01054bd:	90                   	nop
f01054be:	c9                   	leave  
f01054bf:	c3                   	ret    

f01054c0 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f01054c0:	55                   	push   %ebp
f01054c1:	89 e5                	mov    %esp,%ebp
f01054c3:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01054cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01054d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054d8:	0f 85 a0 00 00 00    	jne    f010557e <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01054de:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f01054e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01054e6:	eb 67                	jmp    f010554f <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f01054e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054eb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054ee:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054f1:	75 54                	jne    f0105547 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f01054f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f6:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01054fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105502:	83 ec 04             	sub    $0x4,%esp
f0105505:	52                   	push   %edx
f0105506:	50                   	push   %eax
f0105507:	68 6c 4d 13 f0       	push   $0xf0134d6c
f010550c:	e8 1c b7 ff ff       	call   f0100c2d <cprintf>
f0105511:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105514:	83 ec 0c             	sub    $0xc,%esp
f0105517:	ff 75 f4             	pushl  -0xc(%ebp)
f010551a:	e8 01 f4 ff ff       	call   f0104920 <sched_remove_new>
f010551f:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105522:	83 ec 0c             	sub    $0xc,%esp
f0105525:	ff 75 f4             	pushl  -0xc(%ebp)
f0105528:	e8 58 3b 00 00       	call   f0109085 <env_free>
f010552d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105530:	83 ec 0c             	sub    $0xc,%esp
f0105533:	68 eb 4c 13 f0       	push   $0xf0134ceb
f0105538:	e8 f0 b6 ff ff       	call   f0100c2d <cprintf>
f010553d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105540:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105547:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f010554c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010554f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105553:	74 08                	je     f010555d <sched_kill_env+0x9d>
f0105555:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105558:	8b 40 44             	mov    0x44(%eax),%eax
f010555b:	eb 05                	jmp    f0105562 <sched_kill_env+0xa2>
f010555d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105562:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0105567:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f010556c:	85 c0                	test   %eax,%eax
f010556e:	0f 85 74 ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
f0105574:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105578:	0f 85 6a ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010557e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105582:	0f 85 ad 01 00 00    	jne    f0105735 <sched_kill_env+0x275>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105588:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010558f:	e9 8d 01 00 00       	jmp    f0105721 <sched_kill_env+0x261>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105594:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105597:	c1 e0 04             	shl    $0x4,%eax
f010559a:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f010559f:	8b 00                	mov    (%eax),%eax
f01055a1:	85 c0                	test   %eax,%eax
f01055a3:	0f 84 6f 01 00 00    	je     f0105718 <sched_kill_env+0x258>
			{
				ptr_env=NULL;
f01055a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01055b3:	c1 e0 04             	shl    $0x4,%eax
f01055b6:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f01055bb:	8b 00                	mov    (%eax),%eax
f01055bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055c0:	e9 13 01 00 00       	jmp    f01056d8 <sched_kill_env+0x218>
				{
					if(ptr_env->env_id == envId)
f01055c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055c8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055cb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055ce:	0f 85 f4 00 00 00    	jne    f01056c8 <sched_kill_env+0x208>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f01055d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055d7:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01055dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055e0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055e3:	ff 75 ec             	pushl  -0x14(%ebp)
f01055e6:	52                   	push   %edx
f01055e7:	50                   	push   %eax
f01055e8:	68 94 4d 13 f0       	push   $0xf0134d94
f01055ed:	e8 3b b6 ff ff       	call   f0100c2d <cprintf>
f01055f2:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01055f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055f9:	75 17                	jne    f0105612 <sched_kill_env+0x152>
f01055fb:	83 ec 04             	sub    $0x4,%esp
f01055fe:	68 24 4b 13 f0       	push   $0xf0134b24
f0105603:	68 33 02 00 00       	push   $0x233
f0105608:	68 13 4b 13 f0       	push   $0xf0134b13
f010560d:	e8 94 ab ff ff       	call   f01001a6 <_panic>
f0105612:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105615:	8b 40 44             	mov    0x44(%eax),%eax
f0105618:	85 c0                	test   %eax,%eax
f010561a:	74 11                	je     f010562d <sched_kill_env+0x16d>
f010561c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010561f:	8b 40 44             	mov    0x44(%eax),%eax
f0105622:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105625:	8b 52 48             	mov    0x48(%edx),%edx
f0105628:	89 50 48             	mov    %edx,0x48(%eax)
f010562b:	eb 14                	jmp    f0105641 <sched_kill_env+0x181>
f010562d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105630:	8b 40 48             	mov    0x48(%eax),%eax
f0105633:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105636:	c1 e2 04             	shl    $0x4,%edx
f0105639:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f010563f:	89 02                	mov    %eax,(%edx)
f0105641:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105644:	8b 40 48             	mov    0x48(%eax),%eax
f0105647:	85 c0                	test   %eax,%eax
f0105649:	74 11                	je     f010565c <sched_kill_env+0x19c>
f010564b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564e:	8b 40 48             	mov    0x48(%eax),%eax
f0105651:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105654:	8b 52 44             	mov    0x44(%edx),%edx
f0105657:	89 50 44             	mov    %edx,0x44(%eax)
f010565a:	eb 14                	jmp    f0105670 <sched_kill_env+0x1b0>
f010565c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010565f:	8b 40 44             	mov    0x44(%eax),%eax
f0105662:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105665:	c1 e2 04             	shl    $0x4,%edx
f0105668:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f010566e:	89 02                	mov    %eax,(%edx)
f0105670:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105673:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010567a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105684:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105687:	c1 e0 04             	shl    $0x4,%eax
f010568a:	05 18 01 68 f0       	add    $0xf0680118,%eax
f010568f:	8b 00                	mov    (%eax),%eax
f0105691:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105694:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105697:	c1 e0 04             	shl    $0x4,%eax
f010569a:	05 18 01 68 f0       	add    $0xf0680118,%eax
f010569f:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 d9 39 00 00       	call   f0109085 <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 eb 4c 13 f0       	push   $0xf0134ceb
f01056b7:	e8 71 b5 ff ff       	call   f0100c2d <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
						found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01056c6:	eb 50                	jmp    f0105718 <sched_kill_env+0x258>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056cb:	c1 e0 04             	shl    $0x4,%eax
f01056ce:	05 14 01 68 f0       	add    $0xf0680114,%eax
f01056d3:	8b 00                	mov    (%eax),%eax
f01056d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056dc:	74 08                	je     f01056e6 <sched_kill_env+0x226>
f01056de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e1:	8b 40 44             	mov    0x44(%eax),%eax
f01056e4:	eb 05                	jmp    f01056eb <sched_kill_env+0x22b>
f01056e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01056eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056ee:	c1 e2 04             	shl    $0x4,%edx
f01056f1:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f01056f7:	89 02                	mov    %eax,(%edx)
f01056f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056fc:	c1 e0 04             	shl    $0x4,%eax
f01056ff:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0105704:	8b 00                	mov    (%eax),%eax
f0105706:	85 c0                	test   %eax,%eax
f0105708:	0f 85 b7 fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
f010570e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105712:	0f 85 ad fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
						break;
						//return;
					}
				}
			}
			if (found)
f0105718:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010571c:	75 16                	jne    f0105734 <sched_kill_env+0x274>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010571e:	ff 45 ec             	incl   -0x14(%ebp)
f0105721:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0105726:	0f b6 c0             	movzbl %al,%eax
f0105729:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010572c:	0f 8f 62 fe ff ff    	jg     f0105594 <sched_kill_env+0xd4>
f0105732:	eb 01                	jmp    f0105735 <sched_kill_env+0x275>
						//return;
					}
				}
			}
			if (found)
				break;
f0105734:	90                   	nop
		}
	}
	if (!found)
f0105735:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105739:	0f 85 a7 00 00 00    	jne    f01057e6 <sched_kill_env+0x326>
	{
		ptr_env=NULL;
f010573f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105746:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f010574b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010574e:	eb 67                	jmp    f01057b7 <sched_kill_env+0x2f7>
		{
			if(ptr_env->env_id == envId)
f0105750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105753:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105756:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105759:	75 54                	jne    f01057af <sched_kill_env+0x2ef>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010575b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575e:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105767:	8b 40 4c             	mov    0x4c(%eax),%eax
f010576a:	83 ec 04             	sub    $0x4,%esp
f010576d:	52                   	push   %edx
f010576e:	50                   	push   %eax
f010576f:	68 c0 4d 13 f0       	push   $0xf0134dc0
f0105774:	e8 b4 b4 ff ff       	call   f0100c2d <cprintf>
f0105779:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010577c:	83 ec 0c             	sub    $0xc,%esp
f010577f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105782:	e8 81 f2 ff ff       	call   f0104a08 <sched_remove_exit>
f0105787:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010578a:	83 ec 0c             	sub    $0xc,%esp
f010578d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105790:	e8 f0 38 00 00       	call   f0109085 <env_free>
f0105795:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105798:	83 ec 0c             	sub    $0xc,%esp
f010579b:	68 eb 4c 13 f0       	push   $0xf0134ceb
f01057a0:	e8 88 b4 ff ff       	call   f0100c2d <cprintf>
f01057a5:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01057a8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057af:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f01057b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057bb:	74 08                	je     f01057c5 <sched_kill_env+0x305>
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 44             	mov    0x44(%eax),%eax
f01057c3:	eb 05                	jmp    f01057ca <sched_kill_env+0x30a>
f01057c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01057ca:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f01057cf:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f01057d4:	85 c0                	test   %eax,%eax
f01057d6:	0f 85 74 ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
f01057dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057e0:	0f 85 6a ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
				//return;
			}
		}
	}

	if (!found)
f01057e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057ea:	0f 85 a0 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
	{
		if (curenv->env_id == envId)
f01057f0:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01057f5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057f8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057fb:	0f 85 8f 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
		{
			ptr_env = curenv;
f0105801:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0105806:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105809:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010580c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010580f:	83 f8 02             	cmp    $0x2,%eax
f0105812:	74 19                	je     f010582d <sched_kill_env+0x36d>
f0105814:	68 e8 4d 13 f0       	push   $0xf0134de8
f0105819:	68 08 4e 13 f0       	push   $0xf0134e08
f010581e:	68 56 02 00 00       	push   $0x256
f0105823:	68 13 4b 13 f0       	push   $0xf0134b13
f0105828:	e8 79 a9 ff ff       	call   f01001a6 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010582d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105830:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105836:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105839:	8b 40 4c             	mov    0x4c(%eax),%eax
f010583c:	83 ec 04             	sub    $0x4,%esp
f010583f:	52                   	push   %edx
f0105840:	50                   	push   %eax
f0105841:	68 20 4e 13 f0       	push   $0xf0134e20
f0105846:	e8 e2 b3 ff ff       	call   f0100c2d <cprintf>
f010584b:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f010584e:	83 ec 0c             	sub    $0xc,%esp
f0105851:	ff 75 f4             	pushl  -0xc(%ebp)
f0105854:	e8 2c 38 00 00       	call   f0109085 <env_free>
f0105859:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010585c:	83 ec 0c             	sub    $0xc,%esp
f010585f:	68 eb 4c 13 f0       	push   $0xf0134ceb
f0105864:	e8 c4 b3 ff ff       	call   f0100c2d <cprintf>
f0105869:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010586c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105873:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f0105878:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010587b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010587e:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105881:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f0105888:	00 00 00 
			fos_scheduler();
f010588b:	e8 5b ed ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105890:	90                   	nop
f0105891:	c9                   	leave  
f0105892:	c3                   	ret    

f0105893 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105893:	55                   	push   %ebp
f0105894:	89 e5                	mov    %esp,%ebp
f0105896:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105899:	83 ec 0c             	sub    $0xc,%esp
f010589c:	6a 01                	push   $0x1
f010589e:	e8 be 79 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f01058a3:	83 c4 10             	add    $0x10,%esp
f01058a6:	85 c0                	test   %eax,%eax
f01058a8:	74 05                	je     f01058af <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f01058aa:	e8 05 00 00 00       	call   f01058b4 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01058af:	e8 37 ed ff ff       	call   f01045eb <fos_scheduler>

f01058b4 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f01058b4:	55                   	push   %ebp
f01058b5:	89 e5                	mov    %esp,%ebp
f01058b7:	53                   	push   %ebx
f01058b8:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f01058bb:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01058c0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f01058c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01058c7:	0f 84 cf 01 00 00    	je     f0105a9c <update_WS_time_stamps+0x1e8>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01058cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01058d4:	e9 ce 00 00 00       	jmp    f01059a7 <update_WS_time_stamps+0xf3>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f01058d9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058df:	89 d0                	mov    %edx,%eax
f01058e1:	01 c0                	add    %eax,%eax
f01058e3:	01 d0                	add    %edx,%eax
f01058e5:	c1 e0 03             	shl    $0x3,%eax
f01058e8:	01 c8                	add    %ecx,%eax
f01058ea:	83 c0 7c             	add    $0x7c,%eax
f01058ed:	8a 00                	mov    (%eax),%al
f01058ef:	3c 01                	cmp    $0x1,%al
f01058f1:	0f 84 ad 00 00 00    	je     f01059a4 <update_WS_time_stamps+0xf0>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f01058f7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058fd:	89 d0                	mov    %edx,%eax
f01058ff:	01 c0                	add    %eax,%eax
f0105901:	01 d0                	add    %edx,%eax
f0105903:	c1 e0 03             	shl    $0x3,%eax
f0105906:	01 c8                	add    %ecx,%eax
f0105908:	83 c0 78             	add    $0x78,%eax
f010590b:	8b 00                	mov    (%eax),%eax
f010590d:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105910:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105913:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105916:	83 ec 08             	sub    $0x8,%esp
f0105919:	ff 75 e8             	pushl  -0x18(%ebp)
f010591c:	50                   	push   %eax
f010591d:	e8 e1 1c 00 00       	call   f0107603 <pt_get_page_permissions>
f0105922:	83 c4 10             	add    $0x10,%esp
f0105925:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105928:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010592b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010592e:	89 d0                	mov    %edx,%eax
f0105930:	01 c0                	add    %eax,%eax
f0105932:	01 d0                	add    %edx,%eax
f0105934:	c1 e0 03             	shl    $0x3,%eax
f0105937:	01 c8                	add    %ecx,%eax
f0105939:	83 e8 80             	sub    $0xffffff80,%eax
f010593c:	8b 00                	mov    (%eax),%eax
f010593e:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105941:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105944:	83 e0 20             	and    $0x20,%eax
f0105947:	85 c0                	test   %eax,%eax
f0105949:	74 3b                	je     f0105986 <update_WS_time_stamps+0xd2>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010594b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010594e:	c1 e8 02             	shr    $0x2,%eax
f0105951:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105956:	89 c1                	mov    %eax,%ecx
f0105958:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010595b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010595e:	89 d0                	mov    %edx,%eax
f0105960:	01 c0                	add    %eax,%eax
f0105962:	01 d0                	add    %edx,%eax
f0105964:	c1 e0 03             	shl    $0x3,%eax
f0105967:	01 d8                	add    %ebx,%eax
f0105969:	83 e8 80             	sub    $0xffffff80,%eax
f010596c:	89 08                	mov    %ecx,(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010596e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105971:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105974:	6a 20                	push   $0x20
f0105976:	6a 00                	push   $0x0
f0105978:	ff 75 e8             	pushl  -0x18(%ebp)
f010597b:	50                   	push   %eax
f010597c:	e8 ce 1b 00 00       	call   f010754f <pt_set_page_permissions>
f0105981:	83 c4 10             	add    $0x10,%esp
f0105984:	eb 1e                	jmp    f01059a4 <update_WS_time_stamps+0xf0>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105986:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105989:	c1 e8 02             	shr    $0x2,%eax
f010598c:	89 c1                	mov    %eax,%ecx
f010598e:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105994:	89 d0                	mov    %edx,%eax
f0105996:	01 c0                	add    %eax,%eax
f0105998:	01 d0                	add    %edx,%eax
f010599a:	c1 e0 03             	shl    $0x3,%eax
f010599d:	01 d8                	add    %ebx,%eax
f010599f:	83 e8 80             	sub    $0xffffff80,%eax
f01059a2:	89 08                	mov    %ecx,(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01059a4:	ff 45 f4             	incl   -0xc(%ebp)
f01059a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059aa:	8b 50 74             	mov    0x74(%eax),%edx
f01059ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b0:	39 c2                	cmp    %eax,%edx
f01059b2:	0f 87 21 ff ff ff    	ja     f01058d9 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01059b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01059bf:	e9 ce 00 00 00       	jmp    f0105a92 <update_WS_time_stamps+0x1de>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01059c4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ca:	89 d0                	mov    %edx,%eax
f01059cc:	01 c0                	add    %eax,%eax
f01059ce:	01 d0                	add    %edx,%eax
f01059d0:	c1 e0 03             	shl    $0x3,%eax
f01059d3:	01 c8                	add    %ecx,%eax
f01059d5:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01059da:	8a 00                	mov    (%eax),%al
f01059dc:	3c 01                	cmp    $0x1,%al
f01059de:	0f 84 ab 00 00 00    	je     f0105a8f <update_WS_time_stamps+0x1db>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01059e4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059e7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ea:	89 d0                	mov    %edx,%eax
f01059ec:	01 c0                	add    %eax,%eax
f01059ee:	01 d0                	add    %edx,%eax
f01059f0:	c1 e0 03             	shl    $0x3,%eax
f01059f3:	01 c8                	add    %ecx,%eax
f01059f5:	05 38 d5 01 00       	add    $0x1d538,%eax
f01059fa:	8b 00                	mov    (%eax),%eax
f01059fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f01059ff:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a05:	89 d0                	mov    %edx,%eax
f0105a07:	01 c0                	add    %eax,%eax
f0105a09:	01 d0                	add    %edx,%eax
f0105a0b:	c1 e0 03             	shl    $0x3,%eax
f0105a0e:	01 c8                	add    %ecx,%eax
f0105a10:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a15:	8b 00                	mov    (%eax),%eax
f0105a17:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105a1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a1d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a20:	83 ec 08             	sub    $0x8,%esp
f0105a23:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a26:	50                   	push   %eax
f0105a27:	e8 f6 1c 00 00       	call   f0107722 <pd_is_table_used>
f0105a2c:	83 c4 10             	add    $0x10,%esp
f0105a2f:	85 c0                	test   %eax,%eax
f0105a31:	74 3c                	je     f0105a6f <update_WS_time_stamps+0x1bb>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105a33:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a36:	c1 e8 02             	shr    $0x2,%eax
f0105a39:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105a3e:	89 c1                	mov    %eax,%ecx
f0105a40:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a43:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a46:	89 d0                	mov    %edx,%eax
f0105a48:	01 c0                	add    %eax,%eax
f0105a4a:	01 d0                	add    %edx,%eax
f0105a4c:	c1 e0 03             	shl    $0x3,%eax
f0105a4f:	01 d8                	add    %ebx,%eax
f0105a51:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a56:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105a58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a5b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a5e:	83 ec 08             	sub    $0x8,%esp
f0105a61:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a64:	50                   	push   %eax
f0105a65:	e8 dc 1c 00 00       	call   f0107746 <pd_set_table_unused>
f0105a6a:	83 c4 10             	add    $0x10,%esp
f0105a6d:	eb 20                	jmp    f0105a8f <update_WS_time_stamps+0x1db>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105a6f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a72:	c1 e8 02             	shr    $0x2,%eax
f0105a75:	89 c1                	mov    %eax,%ecx
f0105a77:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a7d:	89 d0                	mov    %edx,%eax
f0105a7f:	01 c0                	add    %eax,%eax
f0105a81:	01 d0                	add    %edx,%eax
f0105a83:	c1 e0 03             	shl    $0x3,%eax
f0105a86:	01 d8                	add    %ebx,%eax
f0105a88:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a8d:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a8f:	ff 45 f0             	incl   -0x10(%ebp)
f0105a92:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105a96:	0f 8e 28 ff ff ff    	jle    f01059c4 <update_WS_time_stamps+0x110>
					}
				}
			}
		}
	}
}
f0105a9c:	90                   	nop
f0105a9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105aa0:	c9                   	leave  
f0105aa1:	c3                   	ret    

f0105aa2 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105aa2:	55                   	push   %ebp
f0105aa3:	89 e5                	mov    %esp,%ebp
f0105aa5:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105aa8:	c7 05 2c 87 65 f0 01 	movl   $0x1,0xf065872c
f0105aaf:	00 00 00 
f0105ab2:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105ab9:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105abd:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105ac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ac3:	ee                   	out    %al,(%dx)
f0105ac4:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105acb:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105acf:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105ad2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ad5:	ee                   	out    %al,(%dx)
f0105ad6:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105add:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105ae1:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105ae4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105ae7:	ee                   	out    %al,(%dx)
f0105ae8:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105aef:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105af3:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105af6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105af9:	ee                   	out    %al,(%dx)
f0105afa:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b01:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105b05:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105b08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105b0b:	ee                   	out    %al,(%dx)
f0105b0c:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105b13:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105b17:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105b1a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b1d:	ee                   	out    %al,(%dx)
f0105b1e:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105b25:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105b29:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105b2c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105b2f:	ee                   	out    %al,(%dx)
f0105b30:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105b37:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105b3b:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105b3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105b41:	ee                   	out    %al,(%dx)
f0105b42:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105b49:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105b4d:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105b50:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105b53:	ee                   	out    %al,(%dx)
f0105b54:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105b5b:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105b5f:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105b62:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105b65:	ee                   	out    %al,(%dx)
f0105b66:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105b6d:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105b71:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105b74:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105b77:	ee                   	out    %al,(%dx)
f0105b78:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105b7f:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105b83:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105b86:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105b89:	ee                   	out    %al,(%dx)
f0105b8a:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105b91:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105b95:	8a 45 be             	mov    -0x42(%ebp),%al
f0105b98:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105b9b:	ee                   	out    %al,(%dx)
f0105b9c:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105ba3:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105ba7:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105baa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105bad:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105bae:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0105bb4:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105bb8:	74 15                	je     f0105bcf <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105bba:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0105bc0:	0f b7 c0             	movzwl %ax,%eax
f0105bc3:	83 ec 0c             	sub    $0xc,%esp
f0105bc6:	50                   	push   %eax
f0105bc7:	e8 06 00 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0105bcc:	83 c4 10             	add    $0x10,%esp
}
f0105bcf:	90                   	nop
f0105bd0:	c9                   	leave  
f0105bd1:	c3                   	ret    

f0105bd2 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105bd2:	55                   	push   %ebp
f0105bd3:	89 e5                	mov    %esp,%ebp
f0105bd5:	83 ec 14             	sub    $0x14,%esp
f0105bd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0105bdb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105bdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105be2:	66 a3 b0 08 19 f0    	mov    %ax,0xf01908b0
	if (!didinit)
f0105be8:	a1 2c 87 65 f0       	mov    0xf065872c,%eax
f0105bed:	85 c0                	test   %eax,%eax
f0105bef:	74 34                	je     f0105c25 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bf4:	0f b6 c0             	movzbl %al,%eax
f0105bf7:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105bfe:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c01:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105c04:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105c07:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105c08:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c0b:	66 c1 e8 08          	shr    $0x8,%ax
f0105c0f:	0f b6 c0             	movzbl %al,%eax
f0105c12:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105c19:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105c1c:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105c1f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105c22:	ee                   	out    %al,(%dx)
f0105c23:	eb 01                	jmp    f0105c26 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105c25:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105c26:	c9                   	leave  
f0105c27:	c3                   	ret    

f0105c28 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105c28:	55                   	push   %ebp
f0105c29:	89 e5                	mov    %esp,%ebp
f0105c2b:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105c2e:	83 ec 08             	sub    $0x8,%esp
f0105c31:	68 00 10 00 00       	push   $0x1000
f0105c36:	68 00 10 00 00       	push   $0x1000
f0105c3b:	e8 5d 02 00 00       	call   f0105e9d <boot_allocate_space>
f0105c40:	83 c4 10             	add    $0x10,%esp
f0105c43:	a3 d8 84 6e f0       	mov    %eax,0xf06e84d8
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105c48:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105c4d:	83 ec 04             	sub    $0x4,%esp
f0105c50:	68 00 10 00 00       	push   $0x1000
f0105c55:	6a 00                	push   $0x0
f0105c57:	50                   	push   %eax
f0105c58:	e8 b0 a9 02 00       	call   f013060d <memset>
f0105c5d:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105c60:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105c65:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105c68:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105c6f:	77 14                	ja     f0105c85 <initialize_kernel_VM+0x5d>
f0105c71:	ff 75 e8             	pushl  -0x18(%ebp)
f0105c74:	68 4c 4e 13 f0       	push   $0xf0134e4c
f0105c79:	6a 45                	push   $0x45
f0105c7b:	68 80 4e 13 f0       	push   $0xf0134e80
f0105c80:	e8 21 a5 ff ff       	call   f01001a6 <_panic>
f0105c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105c88:	05 00 00 00 10       	add    $0x10000000,%eax
f0105c8d:	a3 08 85 6e f0       	mov    %eax,0xf06e8508
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105c92:	c7 45 e4 00 80 18 f0 	movl   $0xf0188000,-0x1c(%ebp)
f0105c99:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105ca0:	77 14                	ja     f0105cb6 <initialize_kernel_VM+0x8e>
f0105ca2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105ca5:	68 4c 4e 13 f0       	push   $0xf0134e4c
f0105caa:	6a 4d                	push   $0x4d
f0105cac:	68 80 4e 13 f0       	push   $0xf0134e80
f0105cb1:	e8 f0 a4 ff ff       	call   f01001a6 <_panic>
f0105cb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cb9:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105cbf:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105cc4:	83 ec 0c             	sub    $0xc,%esp
f0105cc7:	6a 02                	push   $0x2
f0105cc9:	52                   	push   %edx
f0105cca:	68 00 80 00 00       	push   $0x8000
f0105ccf:	68 00 80 bf ef       	push   $0xefbf8000
f0105cd4:	50                   	push   %eax
f0105cd5:	e8 24 02 00 00       	call   f0105efe <boot_map_range>
f0105cda:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105cdd:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105ce4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105ceb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105cf2:	eb 25                	jmp    f0105d19 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105cf4:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105cf7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105cfa:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105cff:	83 ec 04             	sub    $0x4,%esp
f0105d02:	6a 01                	push   $0x1
f0105d04:	52                   	push   %edx
f0105d05:	50                   	push   %eax
f0105d06:	e8 67 02 00 00       	call   f0105f72 <boot_get_page_table>
f0105d0b:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d0e:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105d15:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105d19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d1d:	72 d5                	jb     f0105cf4 <initialize_kernel_VM+0xcc>
f0105d1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d23:	77 06                	ja     f0105d2b <initialize_kernel_VM+0x103>
f0105d25:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105d29:	76 c9                	jbe    f0105cf4 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105d2b:	8b 15 70 84 6e f0    	mov    0xf06e8470,%edx
f0105d31:	89 d0                	mov    %edx,%eax
f0105d33:	01 c0                	add    %eax,%eax
f0105d35:	01 d0                	add    %edx,%eax
f0105d37:	c1 e0 03             	shl    $0x3,%eax
f0105d3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105d3d:	83 ec 08             	sub    $0x8,%esp
f0105d40:	68 00 10 00 00       	push   $0x1000
f0105d45:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d48:	e8 50 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d4d:	83 c4 10             	add    $0x10,%esp
f0105d50:	a3 b0 84 6e f0       	mov    %eax,0xf06e84b0
	memset(frames_info, 0, array_size);
f0105d55:	a1 b0 84 6e f0       	mov    0xf06e84b0,%eax
f0105d5a:	83 ec 04             	sub    $0x4,%esp
f0105d5d:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d60:	6a 00                	push   $0x0
f0105d62:	50                   	push   %eax
f0105d63:	e8 a5 a8 02 00       	call   f013060d <memset>
f0105d68:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105d6b:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105d72:	83 ec 08             	sub    $0x8,%esp
f0105d75:	68 00 10 00 00       	push   $0x1000
f0105d7a:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d7d:	e8 1b 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d82:	83 c4 10             	add    $0x10,%esp
f0105d85:	a3 00 01 68 f0       	mov    %eax,0xf0680100
	memset(disk_frames_info , 0, disk_array_size);
f0105d8a:	a1 00 01 68 f0       	mov    0xf0680100,%eax
f0105d8f:	83 ec 04             	sub    $0x4,%esp
f0105d92:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d95:	6a 00                	push   $0x0
f0105d97:	50                   	push   %eax
f0105d98:	e8 70 a8 02 00       	call   f013060d <memset>
f0105d9d:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105da0:	e8 02 05 00 00       	call   f01062a7 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105da5:	83 ec 0c             	sub    $0xc,%esp
f0105da8:	6a 08                	push   $0x8
f0105daa:	e8 fb 93 02 00       	call   f012f1aa <nearest_pow2_ceil>
f0105daf:	83 c4 10             	add    $0x10,%esp
f0105db2:	83 ec 04             	sub    $0x4,%esp
f0105db5:	50                   	push   %eax
f0105db6:	6a 08                	push   $0x8
f0105db8:	68 a0 4e 13 f0       	push   $0xf0134ea0
f0105dbd:	e8 6b ae ff ff       	call   f0100c2d <cprintf>
f0105dc2:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105dc5:	c7 45 d8 40 55 0f 00 	movl   $0xf5540,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105dcc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105dcf:	83 ec 08             	sub    $0x8,%esp
f0105dd2:	68 00 10 00 00       	push   $0x1000
f0105dd7:	50                   	push   %eax
f0105dd8:	e8 c0 00 00 00       	call   f0105e9d <boot_allocate_space>
f0105ddd:	83 c4 10             	add    $0x10,%esp
f0105de0:	a3 30 87 65 f0       	mov    %eax,0xf0658730
	memset(envs , 0, envs_size);
f0105de5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105de8:	a1 30 87 65 f0       	mov    0xf0658730,%eax
f0105ded:	83 ec 04             	sub    $0x4,%esp
f0105df0:	52                   	push   %edx
f0105df1:	6a 00                	push   $0x0
f0105df3:	50                   	push   %eax
f0105df4:	e8 14 a8 02 00       	call   f013060d <memset>
f0105df9:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105dfc:	a1 30 87 65 f0       	mov    0xf0658730,%eax
f0105e01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105e04:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105e0b:	77 17                	ja     f0105e24 <initialize_kernel_VM+0x1fc>
f0105e0d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105e10:	68 4c 4e 13 f0       	push   $0xf0134e4c
f0105e15:	68 96 00 00 00       	push   $0x96
f0105e1a:	68 80 4e 13 f0       	push   $0xf0134e80
f0105e1f:	e8 82 a3 ff ff       	call   f01001a6 <_panic>
f0105e24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105e27:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105e2d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e30:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105e35:	83 ec 0c             	sub    $0xc,%esp
f0105e38:	6a 04                	push   $0x4
f0105e3a:	51                   	push   %ecx
f0105e3b:	52                   	push   %edx
f0105e3c:	68 00 00 c0 ee       	push   $0xeec00000
f0105e41:	50                   	push   %eax
f0105e42:	e8 b7 00 00 00       	call   f0105efe <boot_map_range>
f0105e47:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105e4a:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105e4f:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105e54:	8b 15 d8 84 6e f0    	mov    0xf06e84d8,%edx
f0105e5a:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105e60:	8b 12                	mov    (%edx),%edx
f0105e62:	83 ca 05             	or     $0x5,%edx
f0105e65:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105e67:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105e6c:	83 ec 0c             	sub    $0xc,%esp
f0105e6f:	6a 02                	push   $0x2
f0105e71:	6a 00                	push   $0x0
f0105e73:	68 ff ff ff 0f       	push   $0xfffffff
f0105e78:	68 00 00 00 f0       	push   $0xf0000000
f0105e7d:	50                   	push   %eax
f0105e7e:	e8 7b 00 00 00       	call   f0105efe <boot_map_range>
f0105e83:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105e86:	e8 f6 9a 02 00       	call   f012f981 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105e8b:	c7 05 60 60 6e f0 19 	movl   $0x19,0xf06e6060
f0105e92:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105e95:	e8 0d 03 00 00       	call   f01061a7 <turn_on_paging>
}
f0105e9a:	90                   	nop
f0105e9b:	c9                   	leave  
f0105e9c:	c3                   	ret    

f0105e9d <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105e9d:	55                   	push   %ebp
f0105e9e:	89 e5                	mov    %esp,%ebp
f0105ea0:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105ea3:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f0105ea8:	85 c0                	test   %eax,%eax
f0105eaa:	75 0a                	jne    f0105eb6 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105eac:	c7 05 d4 84 6e f0 1c 	movl   $0xf06e861c,0xf06e84d4
f0105eb3:	86 6e f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105ebc:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f0105ec1:	89 c2                	mov    %eax,%edx
f0105ec3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105ec6:	01 d0                	add    %edx,%eax
f0105ec8:	48                   	dec    %eax
f0105ec9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105ecc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105ecf:	ba 00 00 00 00       	mov    $0x0,%edx
f0105ed4:	f7 75 fc             	divl   -0x4(%ebp)
f0105ed7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105eda:	29 d0                	sub    %edx,%eax
f0105edc:	a3 d4 84 6e f0       	mov    %eax,0xf06e84d4

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105ee1:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f0105ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105ee9:	8b 15 d4 84 6e f0    	mov    0xf06e84d4,%edx
f0105eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0105ef2:	01 d0                	add    %edx,%eax
f0105ef4:	a3 d4 84 6e f0       	mov    %eax,0xf06e84d4

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105efc:	c9                   	leave  
f0105efd:	c3                   	ret    

f0105efe <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105efe:	55                   	push   %ebp
f0105eff:	89 e5                	mov    %esp,%ebp
f0105f01:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105f04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105f12:	eb 53                	jmp    f0105f67 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105f14:	83 ec 04             	sub    $0x4,%esp
f0105f17:	6a 01                	push   $0x1
f0105f19:	ff 75 0c             	pushl  0xc(%ebp)
f0105f1c:	ff 75 08             	pushl  0x8(%ebp)
f0105f1f:	e8 4e 00 00 00       	call   f0105f72 <boot_get_page_table>
f0105f24:	83 c4 10             	add    $0x10,%esp
f0105f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f2d:	c1 e8 0c             	shr    $0xc,%eax
f0105f30:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105f35:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105f3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f45:	01 c2                	add    %eax,%edx
f0105f47:	8b 45 18             	mov    0x18(%ebp),%eax
f0105f4a:	0b 45 14             	or     0x14(%ebp),%eax
f0105f4d:	83 c8 01             	or     $0x1,%eax
f0105f50:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105f52:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0105f59:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f60:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f6a:	3b 45 10             	cmp    0x10(%ebp),%eax
f0105f6d:	72 a5                	jb     f0105f14 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0105f6f:	90                   	nop
f0105f70:	c9                   	leave  
f0105f71:	c3                   	ret    

f0105f72 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0105f72:	55                   	push   %ebp
f0105f73:	89 e5                	mov    %esp,%ebp
f0105f75:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0105f78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f7b:	c1 e8 16             	shr    $0x16,%eax
f0105f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0105f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f8e:	01 d0                	add    %edx,%eax
f0105f90:	8b 00                	mov    (%eax),%eax
f0105f92:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0105f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f98:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105f9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0105fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fa3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105fa6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fa9:	c1 e8 0c             	shr    $0xc,%eax
f0105fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105faf:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0105fb4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0105fb7:	72 17                	jb     f0105fd0 <boot_get_page_table+0x5e>
f0105fb9:	ff 75 e8             	pushl  -0x18(%ebp)
f0105fbc:	68 c8 4e 13 f0       	push   $0xf0134ec8
f0105fc1:	68 15 01 00 00       	push   $0x115
f0105fc6:	68 80 4e 13 f0       	push   $0xf0134e80
f0105fcb:	e8 d6 a1 ff ff       	call   f01001a6 <_panic>
f0105fd0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fd3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105fd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0105fdb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105fdf:	75 72                	jne    f0106053 <boot_get_page_table+0xe1>
	{
		if (create)
f0105fe1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0105fe5:	74 65                	je     f010604c <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0105fe7:	83 ec 08             	sub    $0x8,%esp
f0105fea:	68 00 10 00 00       	push   $0x1000
f0105fef:	68 00 10 00 00       	push   $0x1000
f0105ff4:	e8 a4 fe ff ff       	call   f0105e9d <boot_allocate_space>
f0105ff9:	83 c4 10             	add    $0x10,%esp
f0105ffc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0105fff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106002:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106005:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010600c:	77 17                	ja     f0106025 <boot_get_page_table+0xb3>
f010600e:	ff 75 dc             	pushl  -0x24(%ebp)
f0106011:	68 4c 4e 13 f0       	push   $0xf0134e4c
f0106016:	68 1b 01 00 00       	push   $0x11b
f010601b:	68 80 4e 13 f0       	push   $0xf0134e80
f0106020:	e8 81 a1 ff ff       	call   f01001a6 <_panic>
f0106025:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106028:	05 00 00 00 10       	add    $0x10000000,%eax
f010602d:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010603a:	8b 45 08             	mov    0x8(%ebp),%eax
f010603d:	01 d0                	add    %edx,%eax
f010603f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106042:	83 ca 03             	or     $0x3,%edx
f0106045:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106047:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010604a:	eb 0a                	jmp    f0106056 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f010604c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106051:	eb 03                	jmp    f0106056 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106053:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106056:	c9                   	leave  
f0106057:	c3                   	ret    

f0106058 <nvram_read>:


int nvram_read(int r)
{
f0106058:	55                   	push   %ebp
f0106059:	89 e5                	mov    %esp,%ebp
f010605b:	53                   	push   %ebx
f010605c:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010605f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106062:	83 ec 0c             	sub    $0xc,%esp
f0106065:	50                   	push   %eax
f0106066:	e8 37 df ff ff       	call   f0103fa2 <mc146818_read>
f010606b:	83 c4 10             	add    $0x10,%esp
f010606e:	89 c3                	mov    %eax,%ebx
f0106070:	8b 45 08             	mov    0x8(%ebp),%eax
f0106073:	40                   	inc    %eax
f0106074:	83 ec 0c             	sub    $0xc,%esp
f0106077:	50                   	push   %eax
f0106078:	e8 25 df ff ff       	call   f0103fa2 <mc146818_read>
f010607d:	83 c4 10             	add    $0x10,%esp
f0106080:	c1 e0 08             	shl    $0x8,%eax
f0106083:	09 d8                	or     %ebx,%eax
}
f0106085:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106088:	c9                   	leave  
f0106089:	c3                   	ret    

f010608a <detect_memory>:

void detect_memory()
{
f010608a:	55                   	push   %ebp
f010608b:	89 e5                	mov    %esp,%ebp
f010608d:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106090:	83 ec 0c             	sub    $0xc,%esp
f0106093:	6a 15                	push   $0x15
f0106095:	e8 be ff ff ff       	call   f0106058 <nvram_read>
f010609a:	83 c4 10             	add    $0x10,%esp
f010609d:	c1 e0 0a             	shl    $0xa,%eax
f01060a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01060a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f01060ae:	83 ec 0c             	sub    $0xc,%esp
f01060b1:	6a 17                	push   $0x17
f01060b3:	e8 a0 ff ff ff       	call   f0106058 <nvram_read>
f01060b8:	83 c4 10             	add    $0x10,%esp
f01060bb:	c1 e0 0a             	shl    $0xa,%eax
f01060be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01060c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01060c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01060cc:	83 ec 0c             	sub    $0xc,%esp
f01060cf:	6a 34                	push   $0x34
f01060d1:	e8 82 ff ff ff       	call   f0106058 <nvram_read>
f01060d6:	83 c4 10             	add    $0x10,%esp
f01060d9:	c1 e0 10             	shl    $0x10,%eax
f01060dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01060df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f01060ea:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01060ee:	74 18                	je     f0106108 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f01060f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060f3:	05 00 00 00 01       	add    $0x1000000,%eax
f01060f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01060fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060fe:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106103:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106106:	eb 19                	jmp    f0106121 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106108:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010610c:	74 0d                	je     f010611b <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f010610e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106111:	05 00 00 10 00       	add    $0x100000,%eax
f0106116:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106119:	eb 06                	jmp    f0106121 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010611b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106121:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106128:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010612b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010612e:	76 32                	jbe    f0106162 <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106130:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106133:	c1 e8 0a             	shr    $0xa,%eax
f0106136:	89 c2                	mov    %eax,%edx
f0106138:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010613b:	c1 e8 0a             	shr    $0xa,%eax
f010613e:	83 ec 04             	sub    $0x4,%esp
f0106141:	52                   	push   %edx
f0106142:	50                   	push   %eax
f0106143:	68 f8 4e 13 f0       	push   $0xf0134ef8
f0106148:	e8 e0 aa ff ff       	call   f0100c2d <cprintf>
f010614d:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106150:	83 ec 0c             	sub    $0xc,%esp
f0106153:	68 40 4f 13 f0       	push   $0xf0134f40
f0106158:	e8 d0 aa ff ff       	call   f0100c2d <cprintf>
f010615d:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106160:	eb fe                	jmp    f0106160 <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106162:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106165:	c1 e8 0c             	shr    $0xc,%eax
f0106168:	a3 70 84 6e f0       	mov    %eax,0xf06e8470

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f010616d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106170:	c1 e8 0a             	shr    $0xa,%eax
f0106173:	83 ec 08             	sub    $0x8,%esp
f0106176:	50                   	push   %eax
f0106177:	68 d4 4f 13 f0       	push   $0xf0134fd4
f010617c:	e8 ac aa ff ff       	call   f0100c2d <cprintf>
f0106181:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106184:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106187:	c1 e8 0a             	shr    $0xa,%eax
f010618a:	89 c2                	mov    %eax,%edx
f010618c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010618f:	c1 e8 0a             	shr    $0xa,%eax
f0106192:	83 ec 04             	sub    $0x4,%esp
f0106195:	52                   	push   %edx
f0106196:	50                   	push   %eax
f0106197:	68 f5 4f 13 f0       	push   $0xf0134ff5
f010619c:	e8 8c aa ff ff       	call   f0100c2d <cprintf>
f01061a1:	83 c4 10             	add    $0x10,%esp
}
f01061a4:	90                   	nop
f01061a5:	c9                   	leave  
f01061a6:	c3                   	ret    

f01061a7 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01061a7:	55                   	push   %ebp
f01061a8:	89 e5                	mov    %esp,%ebp
f01061aa:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01061ad:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01061b4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061bb:	eb 24                	jmp    f01061e1 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01061bd:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01061c2:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061c5:	c1 e2 02             	shl    $0x2,%edx
f01061c8:	01 c2                	add    %eax,%edx
f01061ca:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01061cf:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01061d2:	c1 e1 02             	shl    $0x2,%ecx
f01061d5:	01 c8                	add    %ecx,%eax
f01061d7:	8b 00                	mov    (%eax),%eax
f01061d9:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061db:	ff 45 fc             	incl   -0x4(%ebp)
f01061de:	ff 45 f8             	incl   -0x8(%ebp)
f01061e1:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f01061e6:	c1 e8 16             	shr    $0x16,%eax
f01061e9:	89 c2                	mov    %eax,%edx
f01061eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01061ee:	39 c2                	cmp    %eax,%edx
f01061f0:	77 cb                	ja     f01061bd <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f01061f2:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01061f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01061fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01061fd:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106200:	0f 20 c0             	mov    %cr0,%eax
f0106203:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106206:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106209:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010620c:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106213:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106217:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010621a:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010621d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106220:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106223:	0f 01 15 f0 08 19 f0 	lgdtl  0xf01908f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010622a:	b8 23 00 00 00       	mov    $0x23,%eax
f010622f:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106231:	b8 23 00 00 00       	mov    $0x23,%eax
f0106236:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106238:	b8 10 00 00 00       	mov    $0x10,%eax
f010623d:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010623f:	b8 10 00 00 00       	mov    $0x10,%eax
f0106244:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106246:	b8 10 00 00 00       	mov    $0x10,%eax
f010624b:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010624d:	ea 54 62 10 f0 08 00 	ljmp   $0x8,$0xf0106254
	asm volatile("lldt %%ax" :: "a" (0));
f0106254:	b8 00 00 00 00       	mov    $0x0,%eax
f0106259:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010625c:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106263:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010626a:	eb 19                	jmp    f0106285 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010626c:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0106271:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106274:	c1 e2 02             	shl    $0x2,%edx
f0106277:	01 d0                	add    %edx,%eax
f0106279:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010627f:	ff 45 f4             	incl   -0xc(%ebp)
f0106282:	ff 45 f0             	incl   -0x10(%ebp)
f0106285:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f010628a:	c1 e8 16             	shr    $0x16,%eax
f010628d:	89 c2                	mov    %eax,%edx
f010628f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106292:	39 c2                	cmp    %eax,%edx
f0106294:	77 d6                	ja     f010626c <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106296:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f010629b:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010629e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062a1:	0f 22 d8             	mov    %eax,%cr3
}
f01062a4:	90                   	nop
f01062a5:	c9                   	leave  
f01062a6:	c3                   	ret    

f01062a7 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01062a7:	55                   	push   %ebp
f01062a8:	89 e5                	mov    %esp,%ebp
f01062aa:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01062ad:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01062b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01062b5:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01062bc:	77 17                	ja     f01062d5 <setup_listing_to_all_page_tables_entries+0x2e>
f01062be:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c1:	68 4c 4e 13 f0       	push   $0xf0134e4c
f01062c6:	68 ab 01 00 00       	push   $0x1ab
f01062cb:	68 80 4e 13 f0       	push   $0xf0134e80
f01062d0:	e8 d1 9e ff ff       	call   f01001a6 <_panic>
f01062d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062d8:	05 00 00 00 10       	add    $0x10000000,%eax
f01062dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01062e0:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01062e5:	05 fc 0e 00 00       	add    $0xefc,%eax
f01062ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062ed:	83 ca 03             	or     $0x3,%edx
f01062f0:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f01062f2:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01062f7:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01062fd:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0106302:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106305:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010630c:	77 17                	ja     f0106325 <setup_listing_to_all_page_tables_entries+0x7e>
f010630e:	ff 75 ec             	pushl  -0x14(%ebp)
f0106311:	68 4c 4e 13 f0       	push   $0xf0134e4c
f0106316:	68 b0 01 00 00       	push   $0x1b0
f010631b:	68 80 4e 13 f0       	push   $0xf0134e80
f0106320:	e8 81 9e ff ff       	call   f01001a6 <_panic>
f0106325:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106328:	05 00 00 00 10       	add    $0x10000000,%eax
f010632d:	83 c8 05             	or     $0x5,%eax
f0106330:	89 02                	mov    %eax,(%edx)

}
f0106332:	90                   	nop
f0106333:	c9                   	leave  
f0106334:	c3                   	ret    

f0106335 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106335:	55                   	push   %ebp
f0106336:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106338:	8b 45 08             	mov    0x8(%ebp),%eax
f010633b:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0106341:	29 d0                	sub    %edx,%eax
f0106343:	c1 f8 03             	sar    $0x3,%eax
f0106346:	89 c2                	mov    %eax,%edx
f0106348:	89 d0                	mov    %edx,%eax
f010634a:	c1 e0 02             	shl    $0x2,%eax
f010634d:	01 d0                	add    %edx,%eax
f010634f:	c1 e0 02             	shl    $0x2,%eax
f0106352:	01 d0                	add    %edx,%eax
f0106354:	c1 e0 02             	shl    $0x2,%eax
f0106357:	01 d0                	add    %edx,%eax
f0106359:	89 c1                	mov    %eax,%ecx
f010635b:	c1 e1 08             	shl    $0x8,%ecx
f010635e:	01 c8                	add    %ecx,%eax
f0106360:	89 c1                	mov    %eax,%ecx
f0106362:	c1 e1 10             	shl    $0x10,%ecx
f0106365:	01 c8                	add    %ecx,%eax
f0106367:	01 c0                	add    %eax,%eax
f0106369:	01 d0                	add    %edx,%eax
}
f010636b:	5d                   	pop    %ebp
f010636c:	c3                   	ret    

f010636d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010636d:	55                   	push   %ebp
f010636e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106370:	ff 75 08             	pushl  0x8(%ebp)
f0106373:	e8 bd ff ff ff       	call   f0106335 <to_frame_number>
f0106378:	83 c4 04             	add    $0x4,%esp
f010637b:	c1 e0 0c             	shl    $0xc,%eax
}
f010637e:	c9                   	leave  
f010637f:	c3                   	ret    

f0106380 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106380:	55                   	push   %ebp
f0106381:	89 e5                	mov    %esp,%ebp
f0106383:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106386:	8b 45 08             	mov    0x8(%ebp),%eax
f0106389:	c1 e8 0c             	shr    $0xc,%eax
f010638c:	89 c2                	mov    %eax,%edx
f010638e:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106393:	39 c2                	cmp    %eax,%edx
f0106395:	72 14                	jb     f01063ab <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106397:	83 ec 04             	sub    $0x4,%esp
f010639a:	68 14 50 13 f0       	push   $0xf0135014
f010639f:	6a 55                	push   $0x55
f01063a1:	68 39 50 13 f0       	push   $0xf0135039
f01063a6:	e8 fb 9d ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f01063ab:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f01063b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01063b4:	c1 e8 0c             	shr    $0xc,%eax
f01063b7:	89 c1                	mov    %eax,%ecx
f01063b9:	89 c8                	mov    %ecx,%eax
f01063bb:	01 c0                	add    %eax,%eax
f01063bd:	01 c8                	add    %ecx,%eax
f01063bf:	c1 e0 03             	shl    $0x3,%eax
f01063c2:	01 d0                	add    %edx,%eax
}
f01063c4:	c9                   	leave  
f01063c5:	c3                   	ret    

f01063c6 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f01063c6:	55                   	push   %ebp
f01063c7:	89 e5                	mov    %esp,%ebp
f01063c9:	83 ec 10             	sub    $0x10,%esp
f01063cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01063cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f01063d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01063d5:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f01063d8:	90                   	nop
f01063d9:	c9                   	leave  
f01063da:	c3                   	ret    

f01063db <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f01063db:	55                   	push   %ebp
f01063dc:	89 e5                	mov    %esp,%ebp
f01063de:	53                   	push   %ebx
f01063df:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f01063e2:	c7 05 78 84 6e f0 00 	movl   $0x0,0xf06e8478
f01063e9:	00 00 00 
f01063ec:	c7 05 7c 84 6e f0 00 	movl   $0x0,0xf06e847c
f01063f3:	00 00 00 
f01063f6:	c7 05 84 84 6e f0 00 	movl   $0x0,0xf06e8484
f01063fd:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106400:	c7 05 e0 8f 65 f0 00 	movl   $0x0,0xf0658fe0
f0106407:	00 00 00 
f010640a:	c7 05 e4 8f 65 f0 00 	movl   $0x0,0xf0658fe4
f0106411:	00 00 00 
f0106414:	c7 05 ec 8f 65 f0 00 	movl   $0x0,0xf0658fec
f010641b:	00 00 00 

	frames_info[0].references = 1;
f010641e:	a1 b0 84 6e f0       	mov    0xf06e84b0,%eax
f0106423:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106429:	a1 b0 84 6e f0       	mov    0xf06e84b0,%eax
f010642e:	83 c0 18             	add    $0x18,%eax
f0106431:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106437:	a1 b0 84 6e f0       	mov    0xf06e84b0,%eax
f010643c:	83 c0 30             	add    $0x30,%eax
f010643f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106445:	c7 05 bc 84 6e f0 00 	movl   $0xf0001000,0xf06e84bc
f010644c:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f010644f:	c7 05 e0 84 6e f0 00 	movl   $0xf0002000,0xf06e84e0
f0106456:	20 00 f0 
	i =0;
f0106459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106460:	eb 1f                	jmp    f0106481 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f0106462:	8b 15 bc 84 6e f0    	mov    0xf06e84bc,%edx
f0106468:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010646b:	01 d0                	add    %edx,%eax
f010646d:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106470:	8b 15 e0 84 6e f0    	mov    0xf06e84e0,%edx
f0106476:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106479:	01 d0                	add    %edx,%eax
f010647b:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f010647e:	ff 45 f4             	incl   -0xc(%ebp)
f0106481:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106488:	7e d8                	jle    f0106462 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f010648a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106491:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106494:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106499:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010649c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649f:	ba 00 00 00 00       	mov    $0x0,%edx
f01064a4:	f7 75 f0             	divl   -0x10(%ebp)
f01064a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064aa:	29 d0                	sub    %edx,%eax
f01064ac:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01064af:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01064b6:	e9 e8 00 00 00       	jmp    f01065a3 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f01064bb:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01064c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064c4:	89 d0                	mov    %edx,%eax
f01064c6:	01 c0                	add    %eax,%eax
f01064c8:	01 d0                	add    %edx,%eax
f01064ca:	c1 e0 03             	shl    $0x3,%eax
f01064cd:	01 c8                	add    %ecx,%eax
f01064cf:	83 ec 0c             	sub    $0xc,%esp
f01064d2:	50                   	push   %eax
f01064d3:	e8 b7 02 00 00       	call   f010678f <initialize_frame_info>
f01064d8:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01064db:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01064e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064e4:	89 d0                	mov    %edx,%eax
f01064e6:	01 c0                	add    %eax,%eax
f01064e8:	01 d0                	add    %edx,%eax
f01064ea:	c1 e0 03             	shl    $0x3,%eax
f01064ed:	01 c8                	add    %ecx,%eax
f01064ef:	85 c0                	test   %eax,%eax
f01064f1:	75 14                	jne    f0106507 <initialize_paging+0x12c>
f01064f3:	83 ec 04             	sub    $0x4,%esp
f01064f6:	68 54 50 13 f0       	push   $0xf0135054
f01064fb:	6a 5c                	push   $0x5c
f01064fd:	68 77 50 13 f0       	push   $0xf0135077
f0106502:	e8 9f 9c ff ff       	call   f01001a6 <_panic>
f0106507:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f010650d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106510:	89 d0                	mov    %edx,%eax
f0106512:	01 c0                	add    %eax,%eax
f0106514:	01 d0                	add    %edx,%eax
f0106516:	c1 e0 03             	shl    $0x3,%eax
f0106519:	01 c8                	add    %ecx,%eax
f010651b:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f0106521:	89 10                	mov    %edx,(%eax)
f0106523:	8b 00                	mov    (%eax),%eax
f0106525:	85 c0                	test   %eax,%eax
f0106527:	74 1f                	je     f0106548 <initialize_paging+0x16d>
f0106529:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f010652f:	8b 1d b0 84 6e f0    	mov    0xf06e84b0,%ebx
f0106535:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106538:	89 c8                	mov    %ecx,%eax
f010653a:	01 c0                	add    %eax,%eax
f010653c:	01 c8                	add    %ecx,%eax
f010653e:	c1 e0 03             	shl    $0x3,%eax
f0106541:	01 d8                	add    %ebx,%eax
f0106543:	89 42 04             	mov    %eax,0x4(%edx)
f0106546:	eb 19                	jmp    f0106561 <initialize_paging+0x186>
f0106548:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f010654e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106551:	89 d0                	mov    %edx,%eax
f0106553:	01 c0                	add    %eax,%eax
f0106555:	01 d0                	add    %edx,%eax
f0106557:	c1 e0 03             	shl    $0x3,%eax
f010655a:	01 c8                	add    %ecx,%eax
f010655c:	a3 7c 84 6e f0       	mov    %eax,0xf06e847c
f0106561:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106567:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010656a:	89 d0                	mov    %edx,%eax
f010656c:	01 c0                	add    %eax,%eax
f010656e:	01 d0                	add    %edx,%eax
f0106570:	c1 e0 03             	shl    $0x3,%eax
f0106573:	01 c8                	add    %ecx,%eax
f0106575:	a3 78 84 6e f0       	mov    %eax,0xf06e8478
f010657a:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106580:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106583:	89 d0                	mov    %edx,%eax
f0106585:	01 c0                	add    %eax,%eax
f0106587:	01 d0                	add    %edx,%eax
f0106589:	c1 e0 03             	shl    $0x3,%eax
f010658c:	01 c8                	add    %ecx,%eax
f010658e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106595:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f010659a:	40                   	inc    %eax
f010659b:	a3 84 84 6e f0       	mov    %eax,0xf06e8484
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065a0:	ff 45 f4             	incl   -0xc(%ebp)
f01065a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01065a6:	85 c0                	test   %eax,%eax
f01065a8:	79 05                	jns    f01065af <initialize_paging+0x1d4>
f01065aa:	05 ff 0f 00 00       	add    $0xfff,%eax
f01065af:	c1 f8 0c             	sar    $0xc,%eax
f01065b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01065b5:	0f 8f 00 ff ff ff    	jg     f01064bb <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065bb:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01065c2:	eb 1d                	jmp    f01065e1 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f01065c4:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01065ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065cd:	89 d0                	mov    %edx,%eax
f01065cf:	01 c0                	add    %eax,%eax
f01065d1:	01 d0                	add    %edx,%eax
f01065d3:	c1 e0 03             	shl    $0x3,%eax
f01065d6:	01 c8                	add    %ecx,%eax
f01065d8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065de:	ff 45 f4             	incl   -0xc(%ebp)
f01065e1:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01065e8:	7e da                	jle    f01065c4 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01065ea:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01065f1:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f01065f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01065f9:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106600:	77 14                	ja     f0106616 <initialize_paging+0x23b>
f0106602:	ff 75 e0             	pushl  -0x20(%ebp)
f0106605:	68 94 50 13 f0       	push   $0xf0135094
f010660a:	6a 64                	push   $0x64
f010660c:	68 77 50 13 f0       	push   $0xf0135077
f0106611:	e8 90 9b ff ff       	call   f01001a6 <_panic>
f0106616:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106619:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f010661f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106622:	01 d0                	add    %edx,%eax
f0106624:	48                   	dec    %eax
f0106625:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106628:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010662b:	ba 00 00 00 00       	mov    $0x0,%edx
f0106630:	f7 75 e4             	divl   -0x1c(%ebp)
f0106633:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106636:	29 d0                	sub    %edx,%eax
f0106638:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010663b:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0106642:	eb 1d                	jmp    f0106661 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f0106644:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f010664a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010664d:	89 d0                	mov    %edx,%eax
f010664f:	01 c0                	add    %eax,%eax
f0106651:	01 d0                	add    %edx,%eax
f0106653:	c1 e0 03             	shl    $0x3,%eax
f0106656:	01 c8                	add    %ecx,%eax
f0106658:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010665e:	ff 45 f4             	incl   -0xc(%ebp)
f0106661:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106664:	85 c0                	test   %eax,%eax
f0106666:	79 05                	jns    f010666d <initialize_paging+0x292>
f0106668:	05 ff 0f 00 00       	add    $0xfff,%eax
f010666d:	c1 f8 0c             	sar    $0xc,%eax
f0106670:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106673:	7f cf                	jg     f0106644 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106675:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106678:	85 c0                	test   %eax,%eax
f010667a:	79 05                	jns    f0106681 <initialize_paging+0x2a6>
f010667c:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106681:	c1 f8 0c             	sar    $0xc,%eax
f0106684:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106687:	e9 e8 00 00 00       	jmp    f0106774 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f010668c:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106692:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106695:	89 d0                	mov    %edx,%eax
f0106697:	01 c0                	add    %eax,%eax
f0106699:	01 d0                	add    %edx,%eax
f010669b:	c1 e0 03             	shl    $0x3,%eax
f010669e:	01 c8                	add    %ecx,%eax
f01066a0:	83 ec 0c             	sub    $0xc,%esp
f01066a3:	50                   	push   %eax
f01066a4:	e8 e6 00 00 00       	call   f010678f <initialize_frame_info>
f01066a9:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01066ac:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01066b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b5:	89 d0                	mov    %edx,%eax
f01066b7:	01 c0                	add    %eax,%eax
f01066b9:	01 d0                	add    %edx,%eax
f01066bb:	c1 e0 03             	shl    $0x3,%eax
f01066be:	01 c8                	add    %ecx,%eax
f01066c0:	85 c0                	test   %eax,%eax
f01066c2:	75 14                	jne    f01066d8 <initialize_paging+0x2fd>
f01066c4:	83 ec 04             	sub    $0x4,%esp
f01066c7:	68 54 50 13 f0       	push   $0xf0135054
f01066cc:	6a 70                	push   $0x70
f01066ce:	68 77 50 13 f0       	push   $0xf0135077
f01066d3:	e8 ce 9a ff ff       	call   f01001a6 <_panic>
f01066d8:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01066de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066e1:	89 d0                	mov    %edx,%eax
f01066e3:	01 c0                	add    %eax,%eax
f01066e5:	01 d0                	add    %edx,%eax
f01066e7:	c1 e0 03             	shl    $0x3,%eax
f01066ea:	01 c8                	add    %ecx,%eax
f01066ec:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f01066f2:	89 10                	mov    %edx,(%eax)
f01066f4:	8b 00                	mov    (%eax),%eax
f01066f6:	85 c0                	test   %eax,%eax
f01066f8:	74 1f                	je     f0106719 <initialize_paging+0x33e>
f01066fa:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f0106700:	8b 1d b0 84 6e f0    	mov    0xf06e84b0,%ebx
f0106706:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106709:	89 c8                	mov    %ecx,%eax
f010670b:	01 c0                	add    %eax,%eax
f010670d:	01 c8                	add    %ecx,%eax
f010670f:	c1 e0 03             	shl    $0x3,%eax
f0106712:	01 d8                	add    %ebx,%eax
f0106714:	89 42 04             	mov    %eax,0x4(%edx)
f0106717:	eb 19                	jmp    f0106732 <initialize_paging+0x357>
f0106719:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f010671f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106722:	89 d0                	mov    %edx,%eax
f0106724:	01 c0                	add    %eax,%eax
f0106726:	01 d0                	add    %edx,%eax
f0106728:	c1 e0 03             	shl    $0x3,%eax
f010672b:	01 c8                	add    %ecx,%eax
f010672d:	a3 7c 84 6e f0       	mov    %eax,0xf06e847c
f0106732:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106738:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010673b:	89 d0                	mov    %edx,%eax
f010673d:	01 c0                	add    %eax,%eax
f010673f:	01 d0                	add    %edx,%eax
f0106741:	c1 e0 03             	shl    $0x3,%eax
f0106744:	01 c8                	add    %ecx,%eax
f0106746:	a3 78 84 6e f0       	mov    %eax,0xf06e8478
f010674b:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106751:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106754:	89 d0                	mov    %edx,%eax
f0106756:	01 c0                	add    %eax,%eax
f0106758:	01 d0                	add    %edx,%eax
f010675a:	c1 e0 03             	shl    $0x3,%eax
f010675d:	01 c8                	add    %ecx,%eax
f010675f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106766:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f010676b:	40                   	inc    %eax
f010676c:	a3 84 84 6e f0       	mov    %eax,0xf06e8484
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106771:	ff 45 f4             	incl   -0xc(%ebp)
f0106774:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106777:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f010677c:	39 c2                	cmp    %eax,%edx
f010677e:	0f 82 08 ff ff ff    	jb     f010668c <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0106784:	e8 2d c8 ff ff       	call   f0102fb6 <initialize_disk_page_file>
}
f0106789:	90                   	nop
f010678a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010678d:	c9                   	leave  
f010678e:	c3                   	ret    

f010678f <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010678f:	55                   	push   %ebp
f0106790:	89 e5                	mov    %esp,%ebp
f0106792:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106795:	83 ec 04             	sub    $0x4,%esp
f0106798:	6a 18                	push   $0x18
f010679a:	6a 00                	push   $0x0
f010679c:	ff 75 08             	pushl  0x8(%ebp)
f010679f:	e8 69 9e 02 00       	call   f013060d <memset>
f01067a4:	83 c4 10             	add    $0x10,%esp
}
f01067a7:	90                   	nop
f01067a8:	c9                   	leave  
f01067a9:	c3                   	ret    

f01067aa <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01067aa:	55                   	push   %ebp
f01067ab:	89 e5                	mov    %esp,%ebp
f01067ad:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01067b0:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f01067b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01067b9:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01067bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01067c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067c5:	8b 00                	mov    (%eax),%eax
f01067c7:	85 c0                	test   %eax,%eax
f01067c9:	75 17                	jne    f01067e2 <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01067cb:	83 ec 04             	sub    $0x4,%esp
f01067ce:	68 c8 50 13 f0       	push   $0xf01350c8
f01067d3:	68 99 00 00 00       	push   $0x99
f01067d8:	68 77 50 13 f0       	push   $0xf0135077
f01067dd:	e8 c4 99 ff ff       	call   f01001a6 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01067e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067e5:	8b 00                	mov    (%eax),%eax
f01067e7:	85 c0                	test   %eax,%eax
f01067e9:	75 17                	jne    f0106802 <allocate_frame+0x58>
f01067eb:	83 ec 04             	sub    $0x4,%esp
f01067ee:	68 15 51 13 f0       	push   $0xf0135115
f01067f3:	68 9c 00 00 00       	push   $0x9c
f01067f8:	68 77 50 13 f0       	push   $0xf0135077
f01067fd:	e8 a4 99 ff ff       	call   f01001a6 <_panic>
f0106802:	8b 45 08             	mov    0x8(%ebp),%eax
f0106805:	8b 00                	mov    (%eax),%eax
f0106807:	8b 00                	mov    (%eax),%eax
f0106809:	85 c0                	test   %eax,%eax
f010680b:	74 14                	je     f0106821 <allocate_frame+0x77>
f010680d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106810:	8b 00                	mov    (%eax),%eax
f0106812:	8b 00                	mov    (%eax),%eax
f0106814:	8b 55 08             	mov    0x8(%ebp),%edx
f0106817:	8b 12                	mov    (%edx),%edx
f0106819:	8b 52 04             	mov    0x4(%edx),%edx
f010681c:	89 50 04             	mov    %edx,0x4(%eax)
f010681f:	eb 0d                	jmp    f010682e <allocate_frame+0x84>
f0106821:	8b 45 08             	mov    0x8(%ebp),%eax
f0106824:	8b 00                	mov    (%eax),%eax
f0106826:	8b 40 04             	mov    0x4(%eax),%eax
f0106829:	a3 7c 84 6e f0       	mov    %eax,0xf06e847c
f010682e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106831:	8b 00                	mov    (%eax),%eax
f0106833:	8b 40 04             	mov    0x4(%eax),%eax
f0106836:	85 c0                	test   %eax,%eax
f0106838:	74 13                	je     f010684d <allocate_frame+0xa3>
f010683a:	8b 45 08             	mov    0x8(%ebp),%eax
f010683d:	8b 00                	mov    (%eax),%eax
f010683f:	8b 40 04             	mov    0x4(%eax),%eax
f0106842:	8b 55 08             	mov    0x8(%ebp),%edx
f0106845:	8b 12                	mov    (%edx),%edx
f0106847:	8b 12                	mov    (%edx),%edx
f0106849:	89 10                	mov    %edx,(%eax)
f010684b:	eb 0c                	jmp    f0106859 <allocate_frame+0xaf>
f010684d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106850:	8b 00                	mov    (%eax),%eax
f0106852:	8b 00                	mov    (%eax),%eax
f0106854:	a3 78 84 6e f0       	mov    %eax,0xf06e8478
f0106859:	8b 45 08             	mov    0x8(%ebp),%eax
f010685c:	8b 00                	mov    (%eax),%eax
f010685e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106864:	8b 45 08             	mov    0x8(%ebp),%eax
f0106867:	8b 00                	mov    (%eax),%eax
f0106869:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106870:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f0106875:	48                   	dec    %eax
f0106876:	a3 84 84 6e f0       	mov    %eax,0xf06e8484

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f010687b:	8b 45 08             	mov    0x8(%ebp),%eax
f010687e:	8b 00                	mov    (%eax),%eax
f0106880:	8a 40 14             	mov    0x14(%eax),%al
f0106883:	84 c0                	test   %al,%al
f0106885:	74 20                	je     f01068a7 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0106887:	8b 45 08             	mov    0x8(%ebp),%eax
f010688a:	8b 00                	mov    (%eax),%eax
f010688c:	8b 50 0c             	mov    0xc(%eax),%edx
f010688f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106892:	8b 00                	mov    (%eax),%eax
f0106894:	8b 40 10             	mov    0x10(%eax),%eax
f0106897:	8b 40 5c             	mov    0x5c(%eax),%eax
f010689a:	83 ec 08             	sub    $0x8,%esp
f010689d:	52                   	push   %edx
f010689e:	50                   	push   %eax
f010689f:	e8 ba 0d 00 00       	call   f010765e <pt_clear_page_table_entry>
f01068a4:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01068a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01068aa:	8b 00                	mov    (%eax),%eax
f01068ac:	83 ec 0c             	sub    $0xc,%esp
f01068af:	50                   	push   %eax
f01068b0:	e8 da fe ff ff       	call   f010678f <initialize_frame_info>
f01068b5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01068b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01068bd:	c9                   	leave  
f01068be:	c3                   	ret    

f01068bf <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01068bf:	55                   	push   %ebp
f01068c0:	89 e5                	mov    %esp,%ebp
f01068c2:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01068c5:	83 ec 0c             	sub    $0xc,%esp
f01068c8:	ff 75 08             	pushl  0x8(%ebp)
f01068cb:	e8 bf fe ff ff       	call   f010678f <initialize_frame_info>
f01068d0:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f01068d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01068d7:	75 17                	jne    f01068f0 <free_frame+0x31>
f01068d9:	83 ec 04             	sub    $0x4,%esp
f01068dc:	68 54 50 13 f0       	push   $0xf0135054
f01068e1:	68 b9 00 00 00       	push   $0xb9
f01068e6:	68 77 50 13 f0       	push   $0xf0135077
f01068eb:	e8 b6 98 ff ff       	call   f01001a6 <_panic>
f01068f0:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f01068f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01068f9:	89 10                	mov    %edx,(%eax)
f01068fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01068fe:	8b 00                	mov    (%eax),%eax
f0106900:	85 c0                	test   %eax,%eax
f0106902:	74 0d                	je     f0106911 <free_frame+0x52>
f0106904:	a1 78 84 6e f0       	mov    0xf06e8478,%eax
f0106909:	8b 55 08             	mov    0x8(%ebp),%edx
f010690c:	89 50 04             	mov    %edx,0x4(%eax)
f010690f:	eb 08                	jmp    f0106919 <free_frame+0x5a>
f0106911:	8b 45 08             	mov    0x8(%ebp),%eax
f0106914:	a3 7c 84 6e f0       	mov    %eax,0xf06e847c
f0106919:	8b 45 08             	mov    0x8(%ebp),%eax
f010691c:	a3 78 84 6e f0       	mov    %eax,0xf06e8478
f0106921:	8b 45 08             	mov    0x8(%ebp),%eax
f0106924:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010692b:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f0106930:	40                   	inc    %eax
f0106931:	a3 84 84 6e f0       	mov    %eax,0xf06e8484
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106936:	90                   	nop
f0106937:	c9                   	leave  
f0106938:	c3                   	ret    

f0106939 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106939:	55                   	push   %ebp
f010693a:	89 e5                	mov    %esp,%ebp
f010693c:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f010693f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106942:	8b 40 08             	mov    0x8(%eax),%eax
f0106945:	48                   	dec    %eax
f0106946:	8b 55 08             	mov    0x8(%ebp),%edx
f0106949:	66 89 42 08          	mov    %ax,0x8(%edx)
f010694d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106950:	8b 40 08             	mov    0x8(%eax),%eax
f0106953:	66 85 c0             	test   %ax,%ax
f0106956:	75 0e                	jne    f0106966 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106958:	83 ec 0c             	sub    $0xc,%esp
f010695b:	ff 75 08             	pushl  0x8(%ebp)
f010695e:	e8 5c ff ff ff       	call   f01068bf <free_frame>
f0106963:	83 c4 10             	add    $0x10,%esp
}
f0106966:	90                   	nop
f0106967:	c9                   	leave  
f0106968:	c3                   	ret    

f0106969 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106969:	55                   	push   %ebp
f010696a:	89 e5                	mov    %esp,%ebp
f010696c:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010696f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106972:	c1 e8 16             	shr    $0x16,%eax
f0106975:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010697c:	8b 45 08             	mov    0x8(%ebp),%eax
f010697f:	01 d0                	add    %edx,%eax
f0106981:	8b 00                	mov    (%eax),%eax
f0106983:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106986:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106989:	83 e0 01             	and    $0x1,%eax
f010698c:	85 c0                	test   %eax,%eax
f010698e:	74 4e                	je     f01069de <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106990:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106993:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106998:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010699b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010699e:	c1 e8 0c             	shr    $0xc,%eax
f01069a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01069a4:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01069a9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01069ac:	72 17                	jb     f01069c5 <get_page_table+0x5c>
f01069ae:	ff 75 f0             	pushl  -0x10(%ebp)
f01069b1:	68 34 51 13 f0       	push   $0xf0135134
f01069b6:	68 e2 00 00 00       	push   $0xe2
f01069bb:	68 77 50 13 f0       	push   $0xf0135077
f01069c0:	e8 e1 97 ff ff       	call   f01001a6 <_panic>
f01069c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069c8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01069cd:	89 c2                	mov    %eax,%edx
f01069cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01069d2:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f01069d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01069d9:	e9 8f 00 00 00       	jmp    f0106a6d <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01069de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069e2:	74 7b                	je     f0106a5f <get_page_table+0xf6>
f01069e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069e7:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f01069ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01069ed:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f01069f0:	83 ec 0c             	sub    $0xc,%esp
f01069f3:	6a 00                	push   $0x0
f01069f5:	e8 5f 52 00 00       	call   f010bc59 <fault_handler>
f01069fa:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01069fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a00:	c1 e8 16             	shr    $0x16,%eax
f0106a03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a0d:	01 d0                	add    %edx,%eax
f0106a0f:	8b 00                	mov    (%eax),%eax
f0106a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a22:	c1 e8 0c             	shr    $0xc,%eax
f0106a25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a28:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106a2d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106a30:	72 17                	jb     f0106a49 <get_page_table+0xe0>
f0106a32:	ff 75 e8             	pushl  -0x18(%ebp)
f0106a35:	68 34 51 13 f0       	push   $0xf0135134
f0106a3a:	68 fa 00 00 00       	push   $0xfa
f0106a3f:	68 77 50 13 f0       	push   $0xf0135077
f0106a44:	e8 5d 97 ff ff       	call   f01001a6 <_panic>
f0106a49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a4c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a51:	89 c2                	mov    %eax,%edx
f0106a53:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a56:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106a58:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a5d:	eb 0e                	jmp    f0106a6d <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106a5f:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106a68:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106a6d:	c9                   	leave  
f0106a6e:	c3                   	ret    

f0106a6f <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106a6f:	55                   	push   %ebp
f0106a70:	89 e5                	mov    %esp,%ebp
f0106a72:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0106a75:	83 ec 04             	sub    $0x4,%esp
f0106a78:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106a7b:	50                   	push   %eax
f0106a7c:	ff 75 0c             	pushl  0xc(%ebp)
f0106a7f:	ff 75 08             	pushl  0x8(%ebp)
f0106a82:	e8 08 00 00 00       	call   f0106a8f <__static_cpt>
f0106a87:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0106a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106a8d:	c9                   	leave  
f0106a8e:	c3                   	ret    

f0106a8f <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106a8f:	55                   	push   %ebp
f0106a90:	89 e5                	mov    %esp,%ebp
f0106a92:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106a95:	83 ec 0c             	sub    $0xc,%esp
f0106a98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106a9b:	50                   	push   %eax
f0106a9c:	e8 09 fd ff ff       	call   f01067aa <allocate_frame>
f0106aa1:	83 c4 10             	add    $0x10,%esp
f0106aa4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106aa7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aaa:	83 ec 0c             	sub    $0xc,%esp
f0106aad:	50                   	push   %eax
f0106aae:	e8 ba f8 ff ff       	call   f010636d <to_physical_address>
f0106ab3:	83 c4 10             	add    $0x10,%esp
f0106ab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106abc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ac2:	c1 e8 0c             	shr    $0xc,%eax
f0106ac5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ac8:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106acd:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ad0:	72 17                	jb     f0106ae9 <__static_cpt+0x5a>
f0106ad2:	ff 75 ec             	pushl  -0x14(%ebp)
f0106ad5:	68 34 51 13 f0       	push   $0xf0135134
f0106ada:	68 30 01 00 00       	push   $0x130
f0106adf:	68 77 50 13 f0       	push   $0xf0135077
f0106ae4:	e8 bd 96 ff ff       	call   f01001a6 <_panic>
f0106ae9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106aec:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106af1:	89 c2                	mov    %eax,%edx
f0106af3:	8b 45 10             	mov    0x10(%ebp),%eax
f0106af6:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106af8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106afb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106b01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b04:	c1 e8 16             	shr    $0x16,%eax
f0106b07:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b11:	01 d0                	add    %edx,%eax
f0106b13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106b16:	83 ca 07             	or     $0x7,%edx
f0106b19:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106b1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b1e:	8b 00                	mov    (%eax),%eax
f0106b20:	83 ec 04             	sub    $0x4,%esp
f0106b23:	68 00 10 00 00       	push   $0x1000
f0106b28:	6a 00                	push   $0x0
f0106b2a:	50                   	push   %eax
f0106b2b:	e8 dd 9a 02 00       	call   f013060d <memset>
f0106b30:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106b33:	0f 20 d8             	mov    %cr3,%eax
f0106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106b39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b3c:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106b3f:	90                   	nop
f0106b40:	c9                   	leave  
f0106b41:	c3                   	ret    

f0106b42 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106b42:	55                   	push   %ebp
f0106b43:	89 e5                	mov    %esp,%ebp
f0106b45:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106b48:	ff 75 0c             	pushl  0xc(%ebp)
f0106b4b:	e8 1d f8 ff ff       	call   f010636d <to_physical_address>
f0106b50:	83 c4 04             	add    $0x4,%esp
f0106b53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106b56:	83 ec 04             	sub    $0x4,%esp
f0106b59:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b5c:	50                   	push   %eax
f0106b5d:	ff 75 10             	pushl  0x10(%ebp)
f0106b60:	ff 75 08             	pushl  0x8(%ebp)
f0106b63:	e8 01 fe ff ff       	call   f0106969 <get_page_table>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	83 f8 01             	cmp    $0x1,%eax
f0106b6e:	75 15                	jne    f0106b85 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0106b70:	83 ec 04             	sub    $0x4,%esp
f0106b73:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b76:	50                   	push   %eax
f0106b77:	ff 75 10             	pushl  0x10(%ebp)
f0106b7a:	ff 75 08             	pushl  0x8(%ebp)
f0106b7d:	e8 0d ff ff ff       	call   f0106a8f <__static_cpt>
f0106b82:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106b85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b88:	8b 55 10             	mov    0x10(%ebp),%edx
f0106b8b:	c1 ea 0c             	shr    $0xc,%edx
f0106b8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106b94:	c1 e2 02             	shl    $0x2,%edx
f0106b97:	01 d0                	add    %edx,%eax
f0106b99:	8b 00                	mov    (%eax),%eax
f0106b9b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ba1:	83 e0 01             	and    $0x1,%eax
f0106ba4:	85 c0                	test   %eax,%eax
f0106ba6:	74 25                	je     f0106bcd <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106bb3:	75 07                	jne    f0106bbc <map_frame+0x7a>
			return 0;
f0106bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bba:	eb 43                	jmp    f0106bff <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106bbc:	83 ec 08             	sub    $0x8,%esp
f0106bbf:	ff 75 10             	pushl  0x10(%ebp)
f0106bc2:	ff 75 08             	pushl  0x8(%ebp)
f0106bc5:	e8 a7 00 00 00       	call   f0106c71 <unmap_frame>
f0106bca:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106bd0:	8b 40 08             	mov    0x8(%eax),%eax
f0106bd3:	40                   	inc    %eax
f0106bd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106bd7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106bdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bde:	8b 55 10             	mov    0x10(%ebp),%edx
f0106be1:	c1 ea 0c             	shr    $0xc,%edx
f0106be4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106bea:	c1 e2 02             	shl    $0x2,%edx
f0106bed:	01 c2                	add    %eax,%edx
f0106bef:	8b 45 14             	mov    0x14(%ebp),%eax
f0106bf2:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106bf5:	83 c8 01             	or     $0x1,%eax
f0106bf8:	89 02                	mov    %eax,(%edx)

	return 0;
f0106bfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106bff:	c9                   	leave  
f0106c00:	c3                   	ret    

f0106c01 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c01:	55                   	push   %ebp
f0106c02:	89 e5                	mov    %esp,%ebp
f0106c04:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106c07:	83 ec 04             	sub    $0x4,%esp
f0106c0a:	ff 75 10             	pushl  0x10(%ebp)
f0106c0d:	ff 75 0c             	pushl  0xc(%ebp)
f0106c10:	ff 75 08             	pushl  0x8(%ebp)
f0106c13:	e8 51 fd ff ff       	call   f0106969 <get_page_table>
f0106c18:	83 c4 10             	add    $0x10,%esp
f0106c1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106c1e:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c21:	8b 00                	mov    (%eax),%eax
f0106c23:	85 c0                	test   %eax,%eax
f0106c25:	74 43                	je     f0106c6a <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106c27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c2a:	c1 e8 0c             	shr    $0xc,%eax
f0106c2d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106c32:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106c35:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c38:	8b 00                	mov    (%eax),%eax
f0106c3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c3d:	c1 e2 02             	shl    $0x2,%edx
f0106c40:	01 d0                	add    %edx,%eax
f0106c42:	8b 00                	mov    (%eax),%eax
f0106c44:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106c47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c4b:	74 16                	je     f0106c63 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106c4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106c55:	83 ec 0c             	sub    $0xc,%esp
f0106c58:	50                   	push   %eax
f0106c59:	e8 22 f7 ff ff       	call   f0106380 <to_frame_info>
f0106c5e:	83 c4 10             	add    $0x10,%esp
f0106c61:	eb 0c                	jmp    f0106c6f <get_frame_info+0x6e>
		}
		return 0;
f0106c63:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c68:	eb 05                	jmp    f0106c6f <get_frame_info+0x6e>
	}
	return 0;
f0106c6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106c6f:	c9                   	leave  
f0106c70:	c3                   	ret    

f0106c71 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106c71:	55                   	push   %ebp
f0106c72:	89 e5                	mov    %esp,%ebp
f0106c74:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106c77:	83 ec 04             	sub    $0x4,%esp
f0106c7a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106c7d:	50                   	push   %eax
f0106c7e:	ff 75 0c             	pushl  0xc(%ebp)
f0106c81:	ff 75 08             	pushl  0x8(%ebp)
f0106c84:	e8 78 ff ff ff       	call   f0106c01 <get_frame_info>
f0106c89:	83 c4 10             	add    $0x10,%esp
f0106c8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106c8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c93:	74 60                	je     f0106cf5 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c98:	8a 40 14             	mov    0x14(%eax),%al
f0106c9b:	84 c0                	test   %al,%al
f0106c9d:	74 1c                	je     f0106cbb <unmap_frame+0x4a>
f0106c9f:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ca6:	77 13                	ja     f0106cbb <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ca8:	83 ec 08             	sub    $0x8,%esp
f0106cab:	ff 75 0c             	pushl  0xc(%ebp)
f0106cae:	68 64 51 13 f0       	push   $0xf0135164
f0106cb3:	e8 75 9f ff ff       	call   f0100c2d <cprintf>
f0106cb8:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106cbb:	83 ec 0c             	sub    $0xc,%esp
f0106cbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0106cc1:	e8 73 fc ff ff       	call   f0106939 <decrement_references>
f0106cc6:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106cc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ccc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ccf:	c1 ea 0c             	shr    $0xc,%edx
f0106cd2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cd8:	c1 e2 02             	shl    $0x2,%edx
f0106cdb:	01 d0                	add    %edx,%eax
f0106cdd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ce3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ce6:	83 ec 08             	sub    $0x8,%esp
f0106ce9:	50                   	push   %eax
f0106cea:	ff 75 08             	pushl  0x8(%ebp)
f0106ced:	e8 d4 f6 ff ff       	call   f01063c6 <tlb_invalidate>
f0106cf2:	83 c4 10             	add    $0x10,%esp
	}
}
f0106cf5:	90                   	nop
f0106cf6:	c9                   	leave  
f0106cf7:	c3                   	ret    

f0106cf8 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106cf8:	55                   	push   %ebp
f0106cf9:	89 e5                	mov    %esp,%ebp
f0106cfb:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106cfe:	ff 75 0c             	pushl  0xc(%ebp)
f0106d01:	e8 67 f6 ff ff       	call   f010636d <to_physical_address>
f0106d06:	83 c4 04             	add    $0x4,%esp
f0106d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106d0c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d0f:	c1 e8 16             	shr    $0x16,%eax
f0106d12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d19:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d1c:	01 d0                	add    %edx,%eax
f0106d1e:	8b 00                	mov    (%eax),%eax
f0106d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106d26:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106d2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d31:	c1 e8 0c             	shr    $0xc,%eax
f0106d34:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106d37:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106d3c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106d3f:	72 17                	jb     f0106d58 <loadtime_map_frame+0x60>
f0106d41:	ff 75 ec             	pushl  -0x14(%ebp)
f0106d44:	68 34 51 13 f0       	push   $0xf0135134
f0106d49:	68 e6 01 00 00       	push   $0x1e6
f0106d4e:	68 77 50 13 f0       	push   $0xf0135077
f0106d53:	e8 4e 94 ff ff       	call   f01001a6 <_panic>
f0106d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d5b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106d60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106d63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106d67:	75 15                	jne    f0106d7e <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0106d69:	83 ec 04             	sub    $0x4,%esp
f0106d6c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0106d6f:	50                   	push   %eax
f0106d70:	ff 75 10             	pushl  0x10(%ebp)
f0106d73:	ff 75 08             	pushl  0x8(%ebp)
f0106d76:	e8 14 fd ff ff       	call   f0106a8f <__static_cpt>
f0106d7b:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0106d7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d81:	8b 40 08             	mov    0x8(%eax),%eax
f0106d84:	40                   	inc    %eax
f0106d85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d88:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d8f:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d92:	c1 ea 0c             	shr    $0xc,%edx
f0106d95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d9b:	c1 e2 02             	shl    $0x2,%edx
f0106d9e:	01 c2                	add    %eax,%edx
f0106da0:	8b 45 14             	mov    0x14(%ebp),%eax
f0106da3:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106da6:	83 c8 01             	or     $0x1,%eax
f0106da9:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106db0:	c9                   	leave  
f0106db1:	c3                   	ret    

f0106db2 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106db2:	55                   	push   %ebp
f0106db3:	89 e5                	mov    %esp,%ebp
f0106db5:	57                   	push   %edi
f0106db6:	56                   	push   %esi
f0106db7:	53                   	push   %ebx
f0106db8:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106dbb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106dc2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106dc9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106dd0:	a1 78 84 6e f0       	mov    0xf06e8478,%eax
f0106dd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106dd8:	eb 1a                	jmp    f0106df4 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ddd:	8a 40 14             	mov    0x14(%eax),%al
f0106de0:	84 c0                	test   %al,%al
f0106de2:	74 05                	je     f0106de9 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106de4:	ff 45 e8             	incl   -0x18(%ebp)
f0106de7:	eb 03                	jmp    f0106dec <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106de9:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106dec:	a1 80 84 6e f0       	mov    0xf06e8480,%eax
f0106df1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106df4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106df8:	74 07                	je     f0106e01 <calculate_available_frames+0x4f>
f0106dfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106dfd:	8b 00                	mov    (%eax),%eax
f0106dff:	eb 05                	jmp    f0106e06 <calculate_available_frames+0x54>
f0106e01:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e06:	a3 80 84 6e f0       	mov    %eax,0xf06e8480
f0106e0b:	a1 80 84 6e f0       	mov    0xf06e8480,%eax
f0106e10:	85 c0                	test   %eax,%eax
f0106e12:	75 c6                	jne    f0106dda <calculate_available_frames+0x28>
f0106e14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e18:	75 c0                	jne    f0106dda <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e1a:	a1 e0 8f 65 f0       	mov    0xf0658fe0,%eax
f0106e1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e22:	eb 0b                	jmp    f0106e2f <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106e24:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e27:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f0106e2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e33:	74 07                	je     f0106e3c <calculate_available_frames+0x8a>
f0106e35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106e38:	8b 00                	mov    (%eax),%eax
f0106e3a:	eb 05                	jmp    f0106e41 <calculate_available_frames+0x8f>
f0106e3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e41:	a3 e8 8f 65 f0       	mov    %eax,0xf0658fe8
f0106e46:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f0106e4b:	85 c0                	test   %eax,%eax
f0106e4d:	75 d5                	jne    f0106e24 <calculate_available_frames+0x72>
f0106e4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e53:	75 cf                	jne    f0106e24 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106e55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e58:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106e5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106e61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106e64:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106e67:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e6a:	89 c3                	mov    %eax,%ebx
f0106e6c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106e6f:	ba 03 00 00 00       	mov    $0x3,%edx
f0106e74:	89 df                	mov    %ebx,%edi
f0106e76:	89 c6                	mov    %eax,%esi
f0106e78:	89 d1                	mov    %edx,%ecx
f0106e7a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106e7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e7f:	83 c4 20             	add    $0x20,%esp
f0106e82:	5b                   	pop    %ebx
f0106e83:	5e                   	pop    %esi
f0106e84:	5f                   	pop    %edi
f0106e85:	5d                   	pop    %ebp
f0106e86:	c2 04 00             	ret    $0x4

f0106e89 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e89:	55                   	push   %ebp
f0106e8a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e8f:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0106e95:	29 d0                	sub    %edx,%eax
f0106e97:	c1 f8 03             	sar    $0x3,%eax
f0106e9a:	89 c2                	mov    %eax,%edx
f0106e9c:	89 d0                	mov    %edx,%eax
f0106e9e:	c1 e0 02             	shl    $0x2,%eax
f0106ea1:	01 d0                	add    %edx,%eax
f0106ea3:	c1 e0 02             	shl    $0x2,%eax
f0106ea6:	01 d0                	add    %edx,%eax
f0106ea8:	c1 e0 02             	shl    $0x2,%eax
f0106eab:	01 d0                	add    %edx,%eax
f0106ead:	89 c1                	mov    %eax,%ecx
f0106eaf:	c1 e1 08             	shl    $0x8,%ecx
f0106eb2:	01 c8                	add    %ecx,%eax
f0106eb4:	89 c1                	mov    %eax,%ecx
f0106eb6:	c1 e1 10             	shl    $0x10,%ecx
f0106eb9:	01 c8                	add    %ecx,%eax
f0106ebb:	01 c0                	add    %eax,%eax
f0106ebd:	01 d0                	add    %edx,%eax
}
f0106ebf:	5d                   	pop    %ebp
f0106ec0:	c3                   	ret    

f0106ec1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106ec1:	55                   	push   %ebp
f0106ec2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106ec4:	ff 75 08             	pushl  0x8(%ebp)
f0106ec7:	e8 bd ff ff ff       	call   f0106e89 <to_frame_number>
f0106ecc:	83 c4 04             	add    $0x4,%esp
f0106ecf:	c1 e0 0c             	shl    $0xc,%eax
}
f0106ed2:	c9                   	leave  
f0106ed3:	c3                   	ret    

f0106ed4 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106ed4:	55                   	push   %ebp
f0106ed5:	89 e5                	mov    %esp,%ebp
f0106ed7:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0106edd:	c1 e8 0c             	shr    $0xc,%eax
f0106ee0:	89 c2                	mov    %eax,%edx
f0106ee2:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106ee7:	39 c2                	cmp    %eax,%edx
f0106ee9:	72 14                	jb     f0106eff <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106eeb:	83 ec 04             	sub    $0x4,%esp
f0106eee:	68 88 51 13 f0       	push   $0xf0135188
f0106ef3:	6a 55                	push   $0x55
f0106ef5:	68 ad 51 13 f0       	push   $0xf01351ad
f0106efa:	e8 a7 92 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0106eff:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0106f05:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f08:	c1 e8 0c             	shr    $0xc,%eax
f0106f0b:	89 c1                	mov    %eax,%ecx
f0106f0d:	89 c8                	mov    %ecx,%eax
f0106f0f:	01 c0                	add    %eax,%eax
f0106f11:	01 c8                	add    %ecx,%eax
f0106f13:	c1 e0 03             	shl    $0x3,%eax
f0106f16:	01 d0                	add    %edx,%eax
}
f0106f18:	c9                   	leave  
f0106f19:	c3                   	ret    

f0106f1a <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0106f1a:	55                   	push   %ebp
f0106f1b:	89 e5                	mov    %esp,%ebp
f0106f1d:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106f27:	eb 5f                	jmp    f0106f88 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0106f29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f2c:	89 d0                	mov    %edx,%eax
f0106f2e:	01 c0                	add    %eax,%eax
f0106f30:	01 d0                	add    %edx,%eax
f0106f32:	01 c0                	add    %eax,%eax
f0106f34:	01 d0                	add    %edx,%eax
f0106f36:	c1 e0 02             	shl    $0x2,%eax
f0106f39:	01 d0                	add    %edx,%eax
f0106f3b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f42:	01 d0                	add    %edx,%eax
f0106f44:	c1 e0 04             	shl    $0x4,%eax
f0106f47:	05 20 01 68 f0       	add    $0xf0680120,%eax
f0106f4c:	83 ec 04             	sub    $0x4,%esp
f0106f4f:	68 50 10 00 00       	push   $0x1050
f0106f54:	6a 00                	push   $0x0
f0106f56:	50                   	push   %eax
f0106f57:	e8 b1 96 02 00       	call   f013060d <memset>
f0106f5c:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0106f5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f62:	89 d0                	mov    %edx,%eax
f0106f64:	01 c0                	add    %eax,%eax
f0106f66:	01 d0                	add    %edx,%eax
f0106f68:	01 c0                	add    %eax,%eax
f0106f6a:	01 d0                	add    %edx,%eax
f0106f6c:	c1 e0 02             	shl    $0x2,%eax
f0106f6f:	01 d0                	add    %edx,%eax
f0106f71:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f78:	01 d0                	add    %edx,%eax
f0106f7a:	c1 e0 04             	shl    $0x4,%eax
f0106f7d:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f0106f82:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f85:	ff 45 f4             	incl   -0xc(%ebp)
f0106f88:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0106f8c:	7e 9b                	jle    f0106f29 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0106f8e:	90                   	nop
f0106f8f:	c9                   	leave  
f0106f90:	c3                   	ret    

f0106f91 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0106f91:	55                   	push   %ebp
f0106f92:	89 e5                	mov    %esp,%ebp
f0106f94:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0106f97:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106fa5:	eb 34                	jmp    f0106fdb <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0106fa7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106faa:	89 d0                	mov    %edx,%eax
f0106fac:	01 c0                	add    %eax,%eax
f0106fae:	01 d0                	add    %edx,%eax
f0106fb0:	01 c0                	add    %eax,%eax
f0106fb2:	01 d0                	add    %edx,%eax
f0106fb4:	c1 e0 02             	shl    $0x2,%eax
f0106fb7:	01 d0                	add    %edx,%eax
f0106fb9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106fc0:	01 d0                	add    %edx,%eax
f0106fc2:	c1 e0 04             	shl    $0x4,%eax
f0106fc5:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f0106fca:	8a 00                	mov    (%eax),%al
f0106fcc:	84 c0                	test   %al,%al
f0106fce:	74 08                	je     f0106fd8 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0106fd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106fd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0106fd6:	eb 09                	jmp    f0106fe1 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0106fd8:	ff 45 f0             	incl   -0x10(%ebp)
f0106fdb:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0106fdf:	7e c6                	jle    f0106fa7 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0106fe1:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0106fe5:	75 14                	jne    f0106ffb <allocate_share_object+0x6a>
				MAX_SHARES *= 2;
			}
		}
#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f0106fe7:	83 ec 04             	sub    $0x4,%esp
f0106fea:	68 c8 51 13 f0       	push   $0xf01351c8
f0106fef:	6a 54                	push   $0x54
f0106ff1:	68 18 52 13 f0       	push   $0xf0135218
f0106ff6:	e8 ab 91 ff ff       	call   f01001a6 <_panic>
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0106ffb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ffe:	89 d0                	mov    %edx,%eax
f0107000:	01 c0                	add    %eax,%eax
f0107002:	01 d0                	add    %edx,%eax
f0107004:	01 c0                	add    %eax,%eax
f0107006:	01 d0                	add    %edx,%eax
f0107008:	c1 e0 02             	shl    $0x2,%eax
f010700b:	01 d0                	add    %edx,%eax
f010700d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107014:	01 d0                	add    %edx,%eax
f0107016:	c1 e0 04             	shl    $0x4,%eax
f0107019:	8d 90 20 01 68 f0    	lea    -0xf97fee0(%eax),%edx
f010701f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107022:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107024:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107027:	89 d0                	mov    %edx,%eax
f0107029:	01 c0                	add    %eax,%eax
f010702b:	01 d0                	add    %edx,%eax
f010702d:	01 c0                	add    %eax,%eax
f010702f:	01 d0                	add    %edx,%eax
f0107031:	c1 e0 02             	shl    $0x2,%eax
f0107034:	01 d0                	add    %edx,%eax
f0107036:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010703d:	01 d0                	add    %edx,%eax
f010703f:	c1 e0 04             	shl    $0x4,%eax
f0107042:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f0107047:	c6 00 00             	movb   $0x0,(%eax)
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010704a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010704d:	89 d0                	mov    %edx,%eax
f010704f:	01 c0                	add    %eax,%eax
f0107051:	01 d0                	add    %edx,%eax
f0107053:	01 c0                	add    %eax,%eax
f0107055:	01 d0                	add    %edx,%eax
f0107057:	c1 e0 02             	shl    $0x2,%eax
f010705a:	01 d0                	add    %edx,%eax
f010705c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107063:	01 d0                	add    %edx,%eax
f0107065:	c1 e0 04             	shl    $0x4,%eax
f0107068:	83 c0 50             	add    $0x50,%eax
f010706b:	05 20 01 68 f0       	add    $0xf0680120,%eax
f0107070:	83 ec 04             	sub    $0x4,%esp
f0107073:	68 00 10 00 00       	push   $0x1000
f0107078:	6a 00                	push   $0x0
f010707a:	50                   	push   %eax
f010707b:	e8 8d 95 02 00       	call   f013060d <memset>
f0107080:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107083:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107086:	c9                   	leave  
f0107087:	c3                   	ret    

f0107088 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107088:	55                   	push   %ebp
f0107089:	89 e5                	mov    %esp,%ebp
f010708b:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010708e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107095:	e9 95 00 00 00       	jmp    f010712f <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f010709a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010709d:	89 d0                	mov    %edx,%eax
f010709f:	01 c0                	add    %eax,%eax
f01070a1:	01 d0                	add    %edx,%eax
f01070a3:	01 c0                	add    %eax,%eax
f01070a5:	01 d0                	add    %edx,%eax
f01070a7:	c1 e0 02             	shl    $0x2,%eax
f01070aa:	01 d0                	add    %edx,%eax
f01070ac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070b3:	01 d0                	add    %edx,%eax
f01070b5:	c1 e0 04             	shl    $0x4,%eax
f01070b8:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f01070bd:	8a 00                	mov    (%eax),%al
f01070bf:	84 c0                	test   %al,%al
f01070c1:	75 68                	jne    f010712b <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01070c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070c6:	89 d0                	mov    %edx,%eax
f01070c8:	01 c0                	add    %eax,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	01 c0                	add    %eax,%eax
f01070ce:	01 d0                	add    %edx,%eax
f01070d0:	c1 e0 02             	shl    $0x2,%eax
f01070d3:	01 d0                	add    %edx,%eax
f01070d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070dc:	01 d0                	add    %edx,%eax
f01070de:	c1 e0 04             	shl    $0x4,%eax
f01070e1:	05 20 01 68 f0       	add    $0xf0680120,%eax
f01070e6:	8b 00                	mov    (%eax),%eax
f01070e8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01070eb:	75 3f                	jne    f010712c <get_share_object_ID+0xa4>
f01070ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070f0:	89 d0                	mov    %edx,%eax
f01070f2:	01 c0                	add    %eax,%eax
f01070f4:	01 d0                	add    %edx,%eax
f01070f6:	01 c0                	add    %eax,%eax
f01070f8:	01 d0                	add    %edx,%eax
f01070fa:	c1 e0 02             	shl    $0x2,%eax
f01070fd:	01 d0                	add    %edx,%eax
f01070ff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107106:	01 d0                	add    %edx,%eax
f0107108:	c1 e0 04             	shl    $0x4,%eax
f010710b:	05 20 01 68 f0       	add    $0xf0680120,%eax
f0107110:	83 c0 04             	add    $0x4,%eax
f0107113:	83 ec 08             	sub    $0x8,%esp
f0107116:	50                   	push   %eax
f0107117:	ff 75 0c             	pushl  0xc(%ebp)
f010711a:	e8 0c 94 02 00       	call   f013052b <strcmp>
f010711f:	83 c4 10             	add    $0x10,%esp
f0107122:	85 c0                	test   %eax,%eax
f0107124:	75 06                	jne    f010712c <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107126:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107129:	eb 13                	jmp    f010713e <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010712b:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010712c:	ff 45 f4             	incl   -0xc(%ebp)
f010712f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107133:	0f 8e 61 ff ff ff    	jle    f010709a <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107139:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f010713e:	c9                   	leave  
f010713f:	c3                   	ret    

f0107140 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107140:	55                   	push   %ebp
f0107141:	89 e5                	mov    %esp,%ebp
f0107143:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107146:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010714a:	76 0a                	jbe    f0107156 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f010714c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107151:	e9 93 00 00 00       	jmp    f01071e9 <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107156:	8b 55 08             	mov    0x8(%ebp),%edx
f0107159:	89 d0                	mov    %edx,%eax
f010715b:	01 c0                	add    %eax,%eax
f010715d:	01 d0                	add    %edx,%eax
f010715f:	01 c0                	add    %eax,%eax
f0107161:	01 d0                	add    %edx,%eax
f0107163:	c1 e0 02             	shl    $0x2,%eax
f0107166:	01 d0                	add    %edx,%eax
f0107168:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010716f:	01 d0                	add    %edx,%eax
f0107171:	c1 e0 04             	shl    $0x4,%eax
f0107174:	83 c0 50             	add    $0x50,%eax
f0107177:	05 20 01 68 f0       	add    $0xf0680120,%eax
f010717c:	83 ec 0c             	sub    $0xc,%esp
f010717f:	50                   	push   %eax
f0107180:	e8 3e 01 00 00       	call   f01072c3 <clear_frames_storage>
f0107185:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107188:	8b 55 08             	mov    0x8(%ebp),%edx
f010718b:	89 d0                	mov    %edx,%eax
f010718d:	01 c0                	add    %eax,%eax
f010718f:	01 d0                	add    %edx,%eax
f0107191:	01 c0                	add    %eax,%eax
f0107193:	01 d0                	add    %edx,%eax
f0107195:	c1 e0 02             	shl    $0x2,%eax
f0107198:	01 d0                	add    %edx,%eax
f010719a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071a1:	01 d0                	add    %edx,%eax
f01071a3:	c1 e0 04             	shl    $0x4,%eax
f01071a6:	05 20 01 68 f0       	add    $0xf0680120,%eax
f01071ab:	83 ec 04             	sub    $0x4,%esp
f01071ae:	68 50 10 00 00       	push   $0x1050
f01071b3:	6a 00                	push   $0x0
f01071b5:	50                   	push   %eax
f01071b6:	e8 52 94 02 00       	call   f013060d <memset>
f01071bb:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01071be:	8b 55 08             	mov    0x8(%ebp),%edx
f01071c1:	89 d0                	mov    %edx,%eax
f01071c3:	01 c0                	add    %eax,%eax
f01071c5:	01 d0                	add    %edx,%eax
f01071c7:	01 c0                	add    %eax,%eax
f01071c9:	01 d0                	add    %edx,%eax
f01071cb:	c1 e0 02             	shl    $0x2,%eax
f01071ce:	01 d0                	add    %edx,%eax
f01071d0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071d7:	01 d0                	add    %edx,%eax
f01071d9:	c1 e0 04             	shl    $0x4,%eax
f01071dc:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f01071e1:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f01071e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01071e9:	c9                   	leave  
f01071ea:	c3                   	ret    

f01071eb <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01071eb:	55                   	push   %ebp
f01071ec:	89 e5                	mov    %esp,%ebp
f01071ee:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01071f1:	83 ec 0c             	sub    $0xc,%esp
f01071f4:	68 00 10 00 00       	push   $0x1000
f01071f9:	e8 24 02 00 00       	call   f0107422 <kmalloc>
f01071fe:	83 c4 10             	add    $0x10,%esp
f0107201:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107204:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107208:	75 17                	jne    f0107221 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010720a:	83 ec 04             	sub    $0x4,%esp
f010720d:	68 39 52 13 f0       	push   $0xf0135239
f0107212:	68 a9 00 00 00       	push   $0xa9
f0107217:	68 18 52 13 f0       	push   $0xf0135218
f010721c:	e8 85 8f ff ff       	call   f01001a6 <_panic>
	}
	return frames_storage;
f0107221:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107224:	c9                   	leave  
f0107225:	c3                   	ret    

f0107226 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107226:	55                   	push   %ebp
f0107227:	89 e5                	mov    %esp,%ebp
f0107229:	53                   	push   %ebx
f010722a:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f010722d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107230:	c1 e0 0c             	shl    $0xc,%eax
f0107233:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107236:	83 ec 04             	sub    $0x4,%esp
f0107239:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010723c:	50                   	push   %eax
f010723d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107240:	ff 75 08             	pushl  0x8(%ebp)
f0107243:	e8 21 f7 ff ff       	call   f0106969 <get_page_table>
f0107248:	83 c4 10             	add    $0x10,%esp
f010724b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f010724e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107252:	75 15                	jne    f0107269 <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107254:	83 ec 04             	sub    $0x4,%esp
f0107257:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010725a:	50                   	push   %eax
f010725b:	ff 75 f4             	pushl  -0xc(%ebp)
f010725e:	ff 75 08             	pushl  0x8(%ebp)
f0107261:	e8 29 f8 ff ff       	call   f0106a8f <__static_cpt>
f0107266:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107269:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010726c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726f:	c1 ea 0c             	shr    $0xc,%edx
f0107272:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107278:	c1 e2 02             	shl    $0x2,%edx
f010727b:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f010727e:	83 ec 0c             	sub    $0xc,%esp
f0107281:	ff 75 0c             	pushl  0xc(%ebp)
f0107284:	e8 38 fc ff ff       	call   f0106ec1 <to_physical_address>
f0107289:	83 c4 10             	add    $0x10,%esp
f010728c:	83 c8 01             	or     $0x1,%eax
f010728f:	89 03                	mov    %eax,(%ebx)
}
f0107291:	90                   	nop
f0107292:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107295:	c9                   	leave  
f0107296:	c3                   	ret    

f0107297 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107297:	55                   	push   %ebp
f0107298:	89 e5                	mov    %esp,%ebp
f010729a:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f010729d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01072a0:	c1 e0 0c             	shl    $0xc,%eax
f01072a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01072a6:	83 ec 04             	sub    $0x4,%esp
f01072a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01072ac:	50                   	push   %eax
f01072ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01072b0:	ff 75 08             	pushl  0x8(%ebp)
f01072b3:	e8 49 f9 ff ff       	call   f0106c01 <get_frame_info>
f01072b8:	83 c4 10             	add    $0x10,%esp
f01072bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01072be:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01072c1:	c9                   	leave  
f01072c2:	c3                   	ret    

f01072c3 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01072c3:	55                   	push   %ebp
f01072c4:	89 e5                	mov    %esp,%ebp
f01072c6:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01072c9:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01072d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01072d7:	eb 5b                	jmp    f0107334 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01072d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01072e6:	01 d0                	add    %edx,%eax
f01072e8:	8b 00                	mov    (%eax),%eax
f01072ea:	85 c0                	test   %eax,%eax
f01072ec:	74 43                	je     f0107331 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f01072ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01072fb:	01 d0                	add    %edx,%eax
f01072fd:	8b 00                	mov    (%eax),%eax
f01072ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107304:	83 ec 0c             	sub    $0xc,%esp
f0107307:	50                   	push   %eax
f0107308:	e8 c7 fb ff ff       	call   f0106ed4 <to_frame_info>
f010730d:	83 c4 10             	add    $0x10,%esp
f0107310:	83 ec 0c             	sub    $0xc,%esp
f0107313:	50                   	push   %eax
f0107314:	e8 a6 f5 ff ff       	call   f01068bf <free_frame>
f0107319:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f010731c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010731f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107326:	8b 45 08             	mov    0x8(%ebp),%eax
f0107329:	01 d0                	add    %edx,%eax
f010732b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107331:	ff 45 f4             	incl   -0xc(%ebp)
f0107334:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010733b:	7e 9c                	jle    f01072d9 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f010733d:	90                   	nop
f010733e:	c9                   	leave  
f010733f:	c3                   	ret    

f0107340 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107340:	55                   	push   %ebp
f0107341:	89 e5                	mov    %esp,%ebp
f0107343:	83 ec 18             	sub    $0x18,%esp
f0107346:	8b 45 14             	mov    0x14(%ebp),%eax
f0107349:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f010734c:	83 ec 04             	sub    $0x4,%esp
f010734f:	68 58 52 13 f0       	push   $0xf0135258
f0107354:	68 fa 00 00 00       	push   $0xfa
f0107359:	68 18 52 13 f0       	push   $0xf0135218
f010735e:	e8 43 8e ff ff       	call   f01001a6 <_panic>

f0107363 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107363:	55                   	push   %ebp
f0107364:	89 e5                	mov    %esp,%ebp
f0107366:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107369:	83 ec 04             	sub    $0x4,%esp
f010736c:	68 8c 52 13 f0       	push   $0xf013528c
f0107371:	68 0c 01 00 00       	push   $0x10c
f0107376:	68 18 52 13 f0       	push   $0xf0135218
f010737b:	e8 26 8e ff ff       	call   f01001a6 <_panic>

f0107380 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107380:	55                   	push   %ebp
f0107381:	89 e5                	mov    %esp,%ebp
f0107383:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f0107386:	83 ec 04             	sub    $0x4,%esp
f0107389:	68 c0 52 13 f0       	push   $0xf01352c0
f010738e:	68 1b 01 00 00       	push   $0x11b
f0107393:	68 18 52 13 f0       	push   $0xf0135218
f0107398:	e8 09 8e ff ff       	call   f01001a6 <_panic>

f010739d <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010739d:	55                   	push   %ebp
f010739e:	89 e5                	mov    %esp,%ebp
f01073a0:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f01073a3:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01073a8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01073ab:	83 ec 04             	sub    $0x4,%esp
f01073ae:	68 f0 52 13 f0       	push   $0xf01352f0
f01073b3:	68 33 01 00 00       	push   $0x133
f01073b8:	68 18 52 13 f0       	push   $0xf0135218
f01073bd:	e8 e4 8d ff ff       	call   f01001a6 <_panic>

f01073c2 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01073c2:	55                   	push   %ebp
f01073c3:	89 e5                	mov    %esp,%ebp
f01073c5:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01073c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01073cb:	c1 e8 0c             	shr    $0xc,%eax
f01073ce:	89 c2                	mov    %eax,%edx
f01073d0:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01073d5:	39 c2                	cmp    %eax,%edx
f01073d7:	72 14                	jb     f01073ed <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01073d9:	83 ec 04             	sub    $0x4,%esp
f01073dc:	68 20 53 13 f0       	push   $0xf0135320
f01073e1:	6a 55                	push   $0x55
f01073e3:	68 45 53 13 f0       	push   $0xf0135345
f01073e8:	e8 b9 8d ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f01073ed:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f01073f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01073f6:	c1 e8 0c             	shr    $0xc,%eax
f01073f9:	89 c1                	mov    %eax,%ecx
f01073fb:	89 c8                	mov    %ecx,%eax
f01073fd:	01 c0                	add    %eax,%eax
f01073ff:	01 c8                	add    %ecx,%eax
f0107401:	c1 e0 03             	shl    $0x3,%eax
f0107404:	01 d0                	add    %edx,%eax
}
f0107406:	c9                   	leave  
f0107407:	c3                   	ret    

f0107408 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0107408:	55                   	push   %ebp
f0107409:	89 e5                	mov    %esp,%ebp
f010740b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");
f010740e:	83 ec 04             	sub    $0x4,%esp
f0107411:	68 60 53 13 f0       	push   $0xf0135360
f0107416:	6a 11                	push   $0x11
f0107418:	68 9a 53 13 f0       	push   $0xf013539a
f010741d:	e8 69 8e ff ff       	call   f010028b <_panic_into_prompt>

f0107422 <kmalloc>:
	//[3] Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	//[4] Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
}

void* kmalloc(unsigned int size)
{
f0107422:	55                   	push   %ebp
f0107423:	89 e5                	mov    %esp,%ebp
f0107425:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0107428:	83 ec 04             	sub    $0x4,%esp
f010742b:	68 ac 53 13 f0       	push   $0xf01353ac
f0107430:	6a 26                	push   $0x26
f0107432:	68 9a 53 13 f0       	push   $0xf013539a
f0107437:	e8 4f 8e ff ff       	call   f010028b <_panic_into_prompt>

f010743c <kfree>:


}

void kfree(void* virtual_address)
{
f010743c:	55                   	push   %ebp
f010743d:	89 e5                	mov    %esp,%ebp
f010743f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0107442:	83 ec 04             	sub    $0x4,%esp
f0107445:	68 d4 53 13 f0       	push   $0xf01353d4
f010744a:	6a 35                	push   $0x35
f010744c:	68 9a 53 13 f0       	push   $0xf013539a
f0107451:	e8 50 8d ff ff       	call   f01001a6 <_panic>

f0107456 <kheap_virtual_address>:

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107456:	55                   	push   %ebp
f0107457:	89 e5                	mov    %esp,%ebp
f0107459:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f010745c:	83 ec 0c             	sub    $0xc,%esp
f010745f:	ff 75 08             	pushl  0x8(%ebp)
f0107462:	e8 5b ff ff ff       	call   f01073c2 <to_frame_info>
f0107467:	83 c4 10             	add    $0x10,%esp
f010746a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(physical_address!=E_NO_MEM)
f010746d:	83 7d 08 fc          	cmpl   $0xfffffffc,0x8(%ebp)
f0107471:	74 08                	je     f010747b <kheap_virtual_address+0x25>
		{
		return convert_to_va->va;
f0107473:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107476:	8b 40 0c             	mov    0xc(%eax),%eax
f0107479:	eb 05                	jmp    f0107480 <kheap_virtual_address+0x2a>
		}
		else
		{
			return 0;
f010747b:	b8 00 00 00 00       	mov    $0x0,%eax
		}

	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107480:	c9                   	leave  
f0107481:	c3                   	ret    

f0107482 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107482:	55                   	push   %ebp
f0107483:	89 e5                	mov    %esp,%ebp
f0107485:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107488:	83 ec 04             	sub    $0x4,%esp
f010748b:	68 f8 53 13 f0       	push   $0xf01353f8
f0107490:	6a 52                	push   $0x52
f0107492:	68 9a 53 13 f0       	push   $0xf013539a
f0107497:	e8 0a 8d ff ff       	call   f01001a6 <_panic>

f010749c <kfreeall>:
	//refer to the project presentation and documentation for details
}


void kfreeall()
{
f010749c:	55                   	push   %ebp
f010749d:	89 e5                	mov    %esp,%ebp
f010749f:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f01074a2:	83 ec 04             	sub    $0x4,%esp
f01074a5:	68 2d 54 13 f0       	push   $0xf013542d
f01074aa:	6a 5b                	push   $0x5b
f01074ac:	68 9a 53 13 f0       	push   $0xf013539a
f01074b1:	e8 f0 8c ff ff       	call   f01001a6 <_panic>

f01074b6 <kshrink>:

}

void kshrink(uint32 newSize)
{
f01074b6:	55                   	push   %ebp
f01074b7:	89 e5                	mov    %esp,%ebp
f01074b9:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	68 2d 54 13 f0       	push   $0xf013542d
f01074c4:	6a 61                	push   $0x61
f01074c6:	68 9a 53 13 f0       	push   $0xf013539a
f01074cb:	e8 d6 8c ff ff       	call   f01001a6 <_panic>

f01074d0 <kexpand>:
}

void kexpand(uint32 newSize)
{
f01074d0:	55                   	push   %ebp
f01074d1:	89 e5                	mov    %esp,%ebp
f01074d3:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f01074d6:	83 ec 04             	sub    $0x4,%esp
f01074d9:	68 2d 54 13 f0       	push   $0xf013542d
f01074de:	6a 66                	push   $0x66
f01074e0:	68 9a 53 13 f0       	push   $0xf013539a
f01074e5:	e8 bc 8c ff ff       	call   f01001a6 <_panic>

f01074ea <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f01074ea:	55                   	push   %ebp
f01074eb:	89 e5                	mov    %esp,%ebp
f01074ed:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f01074f0:	83 ec 04             	sub    $0x4,%esp
f01074f3:	68 40 54 13 f0       	push   $0xf0135440
f01074f8:	6a 7d                	push   $0x7d
f01074fa:	68 9a 53 13 f0       	push   $0xf013539a
f01074ff:	e8 a2 8c ff ff       	call   f01001a6 <_panic>

f0107504 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107504:	55                   	push   %ebp
f0107505:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107507:	8b 45 08             	mov    0x8(%ebp),%eax
f010750a:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0107510:	29 d0                	sub    %edx,%eax
f0107512:	c1 f8 03             	sar    $0x3,%eax
f0107515:	89 c2                	mov    %eax,%edx
f0107517:	89 d0                	mov    %edx,%eax
f0107519:	c1 e0 02             	shl    $0x2,%eax
f010751c:	01 d0                	add    %edx,%eax
f010751e:	c1 e0 02             	shl    $0x2,%eax
f0107521:	01 d0                	add    %edx,%eax
f0107523:	c1 e0 02             	shl    $0x2,%eax
f0107526:	01 d0                	add    %edx,%eax
f0107528:	89 c1                	mov    %eax,%ecx
f010752a:	c1 e1 08             	shl    $0x8,%ecx
f010752d:	01 c8                	add    %ecx,%eax
f010752f:	89 c1                	mov    %eax,%ecx
f0107531:	c1 e1 10             	shl    $0x10,%ecx
f0107534:	01 c8                	add    %ecx,%eax
f0107536:	01 c0                	add    %eax,%eax
f0107538:	01 d0                	add    %edx,%eax
}
f010753a:	5d                   	pop    %ebp
f010753b:	c3                   	ret    

f010753c <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010753c:	55                   	push   %ebp
f010753d:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010753f:	ff 75 08             	pushl  0x8(%ebp)
f0107542:	e8 bd ff ff ff       	call   f0107504 <to_frame_number>
f0107547:	83 c4 04             	add    $0x4,%esp
f010754a:	c1 e0 0c             	shl    $0xc,%eax
}
f010754d:	c9                   	leave  
f010754e:	c3                   	ret    

f010754f <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f010754f:	55                   	push   %ebp
f0107550:	89 e5                	mov    %esp,%ebp
f0107552:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107555:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f010755c:	83 ec 04             	sub    $0x4,%esp
f010755f:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107562:	50                   	push   %eax
f0107563:	ff 75 0c             	pushl  0xc(%ebp)
f0107566:	ff 75 08             	pushl  0x8(%ebp)
f0107569:	e8 fb f3 ff ff       	call   f0106969 <get_page_table>
f010756e:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107574:	85 c0                	test   %eax,%eax
f0107576:	74 75                	je     f01075ed <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107578:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010757b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010757e:	c1 ea 0c             	shr    $0xc,%edx
f0107581:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107587:	c1 e2 02             	shl    $0x2,%edx
f010758a:	01 d0                	add    %edx,%eax
f010758c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010758f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107592:	c1 e9 0c             	shr    $0xc,%ecx
f0107595:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010759b:	c1 e1 02             	shl    $0x2,%ecx
f010759e:	01 ca                	add    %ecx,%edx
f01075a0:	8b 12                	mov    (%edx),%edx
f01075a2:	8b 4d 14             	mov    0x14(%ebp),%ecx
f01075a5:	f7 d1                	not    %ecx
f01075a7:	21 ca                	and    %ecx,%edx
f01075a9:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f01075ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075ae:	8b 55 0c             	mov    0xc(%ebp),%edx
f01075b1:	c1 ea 0c             	shr    $0xc,%edx
f01075b4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01075ba:	c1 e2 02             	shl    $0x2,%edx
f01075bd:	01 c2                	add    %eax,%edx
f01075bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075c2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01075c5:	c1 e9 0c             	shr    $0xc,%ecx
f01075c8:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01075ce:	c1 e1 02             	shl    $0x2,%ecx
f01075d1:	01 c8                	add    %ecx,%eax
f01075d3:	8b 00                	mov    (%eax),%eax
f01075d5:	0b 45 10             	or     0x10(%ebp),%eax
f01075d8:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f01075da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01075dd:	83 ec 08             	sub    $0x8,%esp
f01075e0:	50                   	push   %eax
f01075e1:	6a 00                	push   $0x0
f01075e3:	e8 de ed ff ff       	call   f01063c6 <tlb_invalidate>
f01075e8:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f01075eb:	eb 14                	jmp    f0107601 <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f01075ed:	83 ec 04             	sub    $0x4,%esp
f01075f0:	68 67 54 13 f0       	push   $0xf0135467
f01075f5:	6a 19                	push   $0x19
f01075f7:	68 84 54 13 f0       	push   $0xf0135484
f01075fc:	e8 a5 8b ff ff       	call   f01001a6 <_panic>
	}
}
f0107601:	c9                   	leave  
f0107602:	c3                   	ret    

f0107603 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107603:	55                   	push   %ebp
f0107604:	89 e5                	mov    %esp,%ebp
f0107606:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107609:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107610:	83 ec 04             	sub    $0x4,%esp
f0107613:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107616:	50                   	push   %eax
f0107617:	ff 75 0c             	pushl  0xc(%ebp)
f010761a:	ff 75 08             	pushl  0x8(%ebp)
f010761d:	e8 47 f3 ff ff       	call   f0106969 <get_page_table>
f0107622:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107625:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107628:	85 c0                	test   %eax,%eax
f010762a:	74 2b                	je     f0107657 <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f010762c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010762f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107632:	c1 ea 0c             	shr    $0xc,%edx
f0107635:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010763b:	c1 e2 02             	shl    $0x2,%edx
f010763e:	01 d0                	add    %edx,%eax
f0107640:	8b 00                	mov    (%eax),%eax
f0107642:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107645:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f010764c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010764f:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107652:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107655:	eb 05                	jmp    f010765c <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107657:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f010765c:	c9                   	leave  
f010765d:	c3                   	ret    

f010765e <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f010765e:	55                   	push   %ebp
f010765f:	89 e5                	mov    %esp,%ebp
f0107661:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107664:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f010766b:	83 ec 04             	sub    $0x4,%esp
f010766e:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107671:	50                   	push   %eax
f0107672:	ff 75 0c             	pushl  0xc(%ebp)
f0107675:	ff 75 08             	pushl  0x8(%ebp)
f0107678:	e8 ec f2 ff ff       	call   f0106969 <get_page_table>
f010767d:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107680:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107683:	85 c0                	test   %eax,%eax
f0107685:	74 2d                	je     f01076b4 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107687:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010768a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010768d:	c1 ea 0c             	shr    $0xc,%edx
f0107690:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107696:	c1 e2 02             	shl    $0x2,%edx
f0107699:	01 d0                	add    %edx,%eax
f010769b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f01076a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01076a4:	83 ec 08             	sub    $0x8,%esp
f01076a7:	50                   	push   %eax
f01076a8:	6a 00                	push   $0x0
f01076aa:	e8 17 ed ff ff       	call   f01063c6 <tlb_invalidate>
f01076af:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f01076b2:	eb 14                	jmp    f01076c8 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f01076b4:	83 ec 04             	sub    $0x4,%esp
f01076b7:	68 67 54 13 f0       	push   $0xf0135467
f01076bc:	6a 42                	push   $0x42
f01076be:	68 84 54 13 f0       	push   $0xf0135484
f01076c3:	e8 de 8a ff ff       	call   f01001a6 <_panic>
	}
}
f01076c8:	c9                   	leave  
f01076c9:	c3                   	ret    

f01076ca <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f01076ca:	55                   	push   %ebp
f01076cb:	89 e5                	mov    %esp,%ebp
f01076cd:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f01076d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f01076d7:	83 ec 04             	sub    $0x4,%esp
f01076da:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01076dd:	50                   	push   %eax
f01076de:	ff 75 0c             	pushl  0xc(%ebp)
f01076e1:	ff 75 08             	pushl  0x8(%ebp)
f01076e4:	e8 80 f2 ff ff       	call   f0106969 <get_page_table>
f01076e9:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f01076ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01076ef:	85 c0                	test   %eax,%eax
f01076f1:	74 28                	je     f010771b <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f01076f3:	83 ec 04             	sub    $0x4,%esp
f01076f6:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01076f9:	50                   	push   %eax
f01076fa:	ff 75 0c             	pushl  0xc(%ebp)
f01076fd:	ff 75 08             	pushl  0x8(%ebp)
f0107700:	e8 fc f4 ff ff       	call   f0106c01 <get_frame_info>
f0107705:	83 c4 10             	add    $0x10,%esp
f0107708:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f010770b:	83 ec 0c             	sub    $0xc,%esp
f010770e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107711:	e8 26 fe ff ff       	call   f010753c <to_physical_address>
f0107716:	83 c4 10             	add    $0x10,%esp
f0107719:	eb 05                	jmp    f0107720 <virtual_to_physical+0x56>
	}
	return -1;
f010771b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107720:	c9                   	leave  
f0107721:	c3                   	ret    

f0107722 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107722:	55                   	push   %ebp
f0107723:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107725:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107728:	c1 e8 16             	shr    $0x16,%eax
f010772b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107732:	8b 45 08             	mov    0x8(%ebp),%eax
f0107735:	01 d0                	add    %edx,%eax
f0107737:	8b 00                	mov    (%eax),%eax
f0107739:	83 e0 20             	and    $0x20,%eax
f010773c:	85 c0                	test   %eax,%eax
f010773e:	0f 95 c0             	setne  %al
f0107741:	0f b6 c0             	movzbl %al,%eax
}
f0107744:	5d                   	pop    %ebp
f0107745:	c3                   	ret    

f0107746 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107746:	55                   	push   %ebp
f0107747:	89 e5                	mov    %esp,%ebp
f0107749:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f010774c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010774f:	c1 e8 16             	shr    $0x16,%eax
f0107752:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107759:	8b 45 08             	mov    0x8(%ebp),%eax
f010775c:	01 d0                	add    %edx,%eax
f010775e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107761:	c1 ea 16             	shr    $0x16,%edx
f0107764:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f010776b:	8b 55 08             	mov    0x8(%ebp),%edx
f010776e:	01 ca                	add    %ecx,%edx
f0107770:	8b 12                	mov    (%edx),%edx
f0107772:	83 e2 df             	and    $0xffffffdf,%edx
f0107775:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107777:	8b 45 0c             	mov    0xc(%ebp),%eax
f010777a:	83 ec 08             	sub    $0x8,%esp
f010777d:	50                   	push   %eax
f010777e:	6a 00                	push   $0x0
f0107780:	e8 41 ec ff ff       	call   f01063c6 <tlb_invalidate>
f0107785:	83 c4 10             	add    $0x10,%esp
}
f0107788:	90                   	nop
f0107789:	c9                   	leave  
f010778a:	c3                   	ret    

f010778b <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f010778b:	55                   	push   %ebp
f010778c:	89 e5                	mov    %esp,%ebp
f010778e:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107791:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107794:	c1 e8 16             	shr    $0x16,%eax
f0107797:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010779e:	8b 45 08             	mov    0x8(%ebp),%eax
f01077a1:	01 d0                	add    %edx,%eax
f01077a3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01077a9:	0f 20 d8             	mov    %cr3,%eax
f01077ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01077af:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01077b2:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01077b5:	90                   	nop
f01077b6:	c9                   	leave  
f01077b7:	c3                   	ret    

f01077b8 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f01077b8:	55                   	push   %ebp
f01077b9:	89 e5                	mov    %esp,%ebp
f01077bb:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01077be:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01077c5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f01077cc:	eb 20                	jmp    f01077ee <env_page_ws_get_size+0x36>
f01077ce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01077d1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01077d4:	89 d0                	mov    %edx,%eax
f01077d6:	01 c0                	add    %eax,%eax
f01077d8:	01 d0                	add    %edx,%eax
f01077da:	c1 e0 03             	shl    $0x3,%eax
f01077dd:	01 c8                	add    %ecx,%eax
f01077df:	83 c0 7c             	add    $0x7c,%eax
f01077e2:	8a 00                	mov    (%eax),%al
f01077e4:	84 c0                	test   %al,%al
f01077e6:	75 03                	jne    f01077eb <env_page_ws_get_size+0x33>
f01077e8:	ff 45 f8             	incl   -0x8(%ebp)
f01077eb:	ff 45 fc             	incl   -0x4(%ebp)
f01077ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01077f1:	8b 50 74             	mov    0x74(%eax),%edx
f01077f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01077f7:	39 c2                	cmp    %eax,%edx
f01077f9:	77 d3                	ja     f01077ce <env_page_ws_get_size+0x16>
	return counter;
f01077fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01077fe:	c9                   	leave  
f01077ff:	c3                   	ret    

f0107800 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107800:	55                   	push   %ebp
f0107801:	89 e5                	mov    %esp,%ebp
f0107803:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107806:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f010780d:	eb 4c                	jmp    f010785b <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f010780f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107812:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107815:	89 d0                	mov    %edx,%eax
f0107817:	01 c0                	add    %eax,%eax
f0107819:	01 d0                	add    %edx,%eax
f010781b:	c1 e0 03             	shl    $0x3,%eax
f010781e:	01 c8                	add    %ecx,%eax
f0107820:	83 c0 78             	add    $0x78,%eax
f0107823:	8b 00                	mov    (%eax),%eax
f0107825:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107828:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010782b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107830:	89 c2                	mov    %eax,%edx
f0107832:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107835:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107838:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010783b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107840:	39 c2                	cmp    %eax,%edx
f0107842:	75 14                	jne    f0107858 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107844:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107847:	83 ec 08             	sub    $0x8,%esp
f010784a:	50                   	push   %eax
f010784b:	ff 75 08             	pushl  0x8(%ebp)
f010784e:	e8 bc 00 00 00       	call   f010790f <env_page_ws_clear_entry>
f0107853:	83 c4 10             	add    $0x10,%esp
			break;
f0107856:	eb 10                	jmp    f0107868 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107858:	ff 45 f4             	incl   -0xc(%ebp)
f010785b:	8b 45 08             	mov    0x8(%ebp),%eax
f010785e:	8b 50 74             	mov    0x74(%eax),%edx
f0107861:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107864:	39 c2                	cmp    %eax,%edx
f0107866:	77 a7                	ja     f010780f <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107868:	90                   	nop
f0107869:	c9                   	leave  
f010786a:	c3                   	ret    

f010786b <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f010786b:	55                   	push   %ebp
f010786c:	89 e5                	mov    %esp,%ebp
f010786e:	53                   	push   %ebx
f010786f:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107872:	8b 45 08             	mov    0x8(%ebp),%eax
f0107875:	8b 40 74             	mov    0x74(%eax),%eax
f0107878:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010787b:	77 16                	ja     f0107893 <env_page_ws_set_entry+0x28>
f010787d:	68 a0 54 13 f0       	push   $0xf01354a0
f0107882:	68 d6 54 13 f0       	push   $0xf01354d6
f0107887:	6a 26                	push   $0x26
f0107889:	68 ec 54 13 f0       	push   $0xf01354ec
f010788e:	e8 13 89 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107893:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f010789a:	76 16                	jbe    f01078b2 <env_page_ws_set_entry+0x47>
f010789c:	68 0c 55 13 f0       	push   $0xf013550c
f01078a1:	68 d6 54 13 f0       	push   $0xf01354d6
f01078a6:	6a 27                	push   $0x27
f01078a8:	68 ec 54 13 f0       	push   $0xf01354ec
f01078ad:	e8 f4 88 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01078b2:	8b 45 10             	mov    0x10(%ebp),%eax
f01078b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01078b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01078bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01078c0:	89 c1                	mov    %eax,%ecx
f01078c2:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01078c5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01078c8:	89 d0                	mov    %edx,%eax
f01078ca:	01 c0                	add    %eax,%eax
f01078cc:	01 d0                	add    %edx,%eax
f01078ce:	c1 e0 03             	shl    $0x3,%eax
f01078d1:	01 d8                	add    %ebx,%eax
f01078d3:	83 c0 78             	add    $0x78,%eax
f01078d6:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f01078d8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01078db:	8b 55 0c             	mov    0xc(%ebp),%edx
f01078de:	89 d0                	mov    %edx,%eax
f01078e0:	01 c0                	add    %eax,%eax
f01078e2:	01 d0                	add    %edx,%eax
f01078e4:	c1 e0 03             	shl    $0x3,%eax
f01078e7:	01 c8                	add    %ecx,%eax
f01078e9:	83 c0 7c             	add    $0x7c,%eax
f01078ec:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f01078ef:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01078f2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01078f5:	89 d0                	mov    %edx,%eax
f01078f7:	01 c0                	add    %eax,%eax
f01078f9:	01 d0                	add    %edx,%eax
f01078fb:	c1 e0 03             	shl    $0x3,%eax
f01078fe:	01 c8                	add    %ecx,%eax
f0107900:	83 e8 80             	sub    $0xffffff80,%eax
f0107903:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107909:	90                   	nop
}
f010790a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010790d:	c9                   	leave  
f010790e:	c3                   	ret    

f010790f <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010790f:	55                   	push   %ebp
f0107910:	89 e5                	mov    %esp,%ebp
f0107912:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107915:	8b 45 08             	mov    0x8(%ebp),%eax
f0107918:	8b 40 74             	mov    0x74(%eax),%eax
f010791b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010791e:	77 16                	ja     f0107936 <env_page_ws_clear_entry+0x27>
f0107920:	68 40 55 13 f0       	push   $0xf0135540
f0107925:	68 d6 54 13 f0       	push   $0xf01354d6
f010792a:	6a 32                	push   $0x32
f010792c:	68 ec 54 13 f0       	push   $0xf01354ec
f0107931:	e8 70 88 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107936:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107939:	8b 55 0c             	mov    0xc(%ebp),%edx
f010793c:	89 d0                	mov    %edx,%eax
f010793e:	01 c0                	add    %eax,%eax
f0107940:	01 d0                	add    %edx,%eax
f0107942:	c1 e0 03             	shl    $0x3,%eax
f0107945:	01 c8                	add    %ecx,%eax
f0107947:	83 c0 78             	add    $0x78,%eax
f010794a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107950:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107953:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107956:	89 d0                	mov    %edx,%eax
f0107958:	01 c0                	add    %eax,%eax
f010795a:	01 d0                	add    %edx,%eax
f010795c:	c1 e0 03             	shl    $0x3,%eax
f010795f:	01 c8                	add    %ecx,%eax
f0107961:	83 c0 7c             	add    $0x7c,%eax
f0107964:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107967:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010796a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010796d:	89 d0                	mov    %edx,%eax
f010796f:	01 c0                	add    %eax,%eax
f0107971:	01 d0                	add    %edx,%eax
f0107973:	c1 e0 03             	shl    $0x3,%eax
f0107976:	01 c8                	add    %ecx,%eax
f0107978:	83 e8 80             	sub    $0xffffff80,%eax
f010797b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0107981:	90                   	nop
f0107982:	c9                   	leave  
f0107983:	c3                   	ret    

f0107984 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107984:	55                   	push   %ebp
f0107985:	89 e5                	mov    %esp,%ebp
f0107987:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010798a:	8b 45 08             	mov    0x8(%ebp),%eax
f010798d:	8b 40 74             	mov    0x74(%eax),%eax
f0107990:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107993:	77 16                	ja     f01079ab <env_page_ws_get_virtual_address+0x27>
f0107995:	68 40 55 13 f0       	push   $0xf0135540
f010799a:	68 d6 54 13 f0       	push   $0xf01354d6
f010799f:	6a 3a                	push   $0x3a
f01079a1:	68 ec 54 13 f0       	push   $0xf01354ec
f01079a6:	e8 fb 87 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01079ab:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01079ae:	8b 55 0c             	mov    0xc(%ebp),%edx
f01079b1:	89 d0                	mov    %edx,%eax
f01079b3:	01 c0                	add    %eax,%eax
f01079b5:	01 d0                	add    %edx,%eax
f01079b7:	c1 e0 03             	shl    $0x3,%eax
f01079ba:	01 c8                	add    %ecx,%eax
f01079bc:	83 c0 78             	add    $0x78,%eax
f01079bf:	8b 00                	mov    (%eax),%eax
f01079c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01079c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01079c7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01079cc:	c9                   	leave  
f01079cd:	c3                   	ret    

f01079ce <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01079ce:	55                   	push   %ebp
f01079cf:	89 e5                	mov    %esp,%ebp
f01079d1:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01079d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01079d7:	8b 40 74             	mov    0x74(%eax),%eax
f01079da:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01079dd:	77 16                	ja     f01079f5 <env_page_ws_get_time_stamp+0x27>
f01079df:	68 40 55 13 f0       	push   $0xf0135540
f01079e4:	68 d6 54 13 f0       	push   $0xf01354d6
f01079e9:	6a 40                	push   $0x40
f01079eb:	68 ec 54 13 f0       	push   $0xf01354ec
f01079f0:	e8 b1 87 ff ff       	call   f01001a6 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01079f5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01079f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01079fb:	89 d0                	mov    %edx,%eax
f01079fd:	01 c0                	add    %eax,%eax
f01079ff:	01 d0                	add    %edx,%eax
f0107a01:	c1 e0 03             	shl    $0x3,%eax
f0107a04:	01 c8                	add    %ecx,%eax
f0107a06:	83 e8 80             	sub    $0xffffff80,%eax
f0107a09:	8b 00                	mov    (%eax),%eax
}
f0107a0b:	c9                   	leave  
f0107a0c:	c3                   	ret    

f0107a0d <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107a0d:	55                   	push   %ebp
f0107a0e:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0107a10:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107a13:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107a16:	89 d0                	mov    %edx,%eax
f0107a18:	01 c0                	add    %eax,%eax
f0107a1a:	01 d0                	add    %edx,%eax
f0107a1c:	c1 e0 03             	shl    $0x3,%eax
f0107a1f:	01 c8                	add    %ecx,%eax
f0107a21:	83 c0 7c             	add    $0x7c,%eax
f0107a24:	8a 00                	mov    (%eax),%al
f0107a26:	0f b6 c0             	movzbl %al,%eax
}
f0107a29:	5d                   	pop    %ebp
f0107a2a:	c3                   	ret    

f0107a2b <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0107a2b:	55                   	push   %ebp
f0107a2c:	89 e5                	mov    %esp,%ebp
f0107a2e:	53                   	push   %ebx
f0107a2f:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0107a32:	83 ec 0c             	sub    $0xc,%esp
f0107a35:	6a 02                	push   $0x2
f0107a37:	e8 25 58 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f0107a3c:	83 c4 10             	add    $0x10,%esp
f0107a3f:	85 c0                	test   %eax,%eax
f0107a41:	0f 84 fe 00 00 00    	je     f0107b45 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0107a47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0107a4e:	83 ec 0c             	sub    $0xc,%esp
f0107a51:	68 78 55 13 f0       	push   $0xf0135578
f0107a56:	e8 d2 91 ff ff       	call   f0100c2d <cprintf>
f0107a5b:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a61:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f0107a67:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107a6a:	eb 2c                	jmp    f0107a98 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0107a6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a6f:	8b 10                	mov    (%eax),%edx
f0107a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a74:	8d 48 01             	lea    0x1(%eax),%ecx
f0107a77:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0107a7a:	83 ec 04             	sub    $0x4,%esp
f0107a7d:	52                   	push   %edx
f0107a7e:	50                   	push   %eax
f0107a7f:	68 92 55 13 f0       	push   $0xf0135592
f0107a84:	e8 a4 91 ff ff       	call   f0100c2d <cprintf>
f0107a89:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107a8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a8f:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f0107a95:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107a98:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107a9c:	74 08                	je     f0107aa6 <env_page_ws_print+0x7b>
f0107a9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107aa1:	8b 40 10             	mov    0x10(%eax),%eax
f0107aa4:	eb 05                	jmp    f0107aab <env_page_ws_print+0x80>
f0107aa6:	b8 00 00 00 00       	mov    $0x0,%eax
f0107aab:	8b 55 08             	mov    0x8(%ebp),%edx
f0107aae:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f0107ab4:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ab7:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f0107abd:	85 c0                	test   %eax,%eax
f0107abf:	75 ab                	jne    f0107a6c <env_page_ws_print+0x41>
f0107ac1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107ac5:	75 a5                	jne    f0107a6c <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0107ac7:	83 ec 0c             	sub    $0xc,%esp
f0107aca:	68 9a 55 13 f0       	push   $0xf013559a
f0107acf:	e8 59 91 ff ff       	call   f0100c2d <cprintf>
f0107ad4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0107ad7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ada:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f0107ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107ae3:	eb 2c                	jmp    f0107b11 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0107ae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ae8:	8b 10                	mov    (%eax),%edx
f0107aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107aed:	8d 48 01             	lea    0x1(%eax),%ecx
f0107af0:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0107af3:	83 ec 04             	sub    $0x4,%esp
f0107af6:	52                   	push   %edx
f0107af7:	50                   	push   %eax
f0107af8:	68 92 55 13 f0       	push   $0xf0135592
f0107afd:	e8 2b 91 ff ff       	call   f0100c2d <cprintf>
f0107b02:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0107b05:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b08:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107b0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107b11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107b15:	74 08                	je     f0107b1f <env_page_ws_print+0xf4>
f0107b17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b1a:	8b 40 10             	mov    0x10(%eax),%eax
f0107b1d:	eb 05                	jmp    f0107b24 <env_page_ws_print+0xf9>
f0107b1f:	b8 00 00 00 00       	mov    $0x0,%eax
f0107b24:	8b 55 08             	mov    0x8(%ebp),%edx
f0107b27:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f0107b2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b30:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107b36:	85 c0                	test   %eax,%eax
f0107b38:	75 ab                	jne    f0107ae5 <env_page_ws_print+0xba>
f0107b3a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107b3e:	75 a5                	jne    f0107ae5 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107b40:	e9 94 01 00 00       	jmp    f0107cd9 <env_page_ws_print+0x2ae>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0107b45:	83 ec 0c             	sub    $0xc,%esp
f0107b48:	68 b5 55 13 f0       	push   $0xf01355b5
f0107b4d:	e8 db 90 ff ff       	call   f0100c2d <cprintf>
f0107b52:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107b55:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107b5c:	e9 69 01 00 00       	jmp    f0107cca <env_page_ws_print+0x29f>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0107b61:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b64:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107b67:	89 d0                	mov    %edx,%eax
f0107b69:	01 c0                	add    %eax,%eax
f0107b6b:	01 d0                	add    %edx,%eax
f0107b6d:	c1 e0 03             	shl    $0x3,%eax
f0107b70:	01 c8                	add    %ecx,%eax
f0107b72:	83 c0 7c             	add    $0x7c,%eax
f0107b75:	8a 00                	mov    (%eax),%al
f0107b77:	84 c0                	test   %al,%al
f0107b79:	74 43                	je     f0107bbe <env_page_ws_print+0x193>
			{
				cprintf("EMPTY LOCATION");
f0107b7b:	83 ec 0c             	sub    $0xc,%esp
f0107b7e:	68 bf 55 13 f0       	push   $0xf01355bf
f0107b83:	e8 a5 90 ff ff       	call   f0100c2d <cprintf>
f0107b88:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f0107b8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b8e:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107b94:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107b97:	75 10                	jne    f0107ba9 <env_page_ws_print+0x17e>
				{
					cprintf("		<--");
f0107b99:	83 ec 0c             	sub    $0xc,%esp
f0107b9c:	68 ce 55 13 f0       	push   $0xf01355ce
f0107ba1:	e8 87 90 ff ff       	call   f0100c2d <cprintf>
f0107ba6:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0107ba9:	83 ec 0c             	sub    $0xc,%esp
f0107bac:	68 d4 55 13 f0       	push   $0xf01355d4
f0107bb1:	e8 77 90 ff ff       	call   f0100c2d <cprintf>
f0107bb6:	83 c4 10             	add    $0x10,%esp
				continue;
f0107bb9:	e9 09 01 00 00       	jmp    f0107cc7 <env_page_ws_print+0x29c>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0107bbe:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107bc1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107bc4:	89 d0                	mov    %edx,%eax
f0107bc6:	01 c0                	add    %eax,%eax
f0107bc8:	01 d0                	add    %edx,%eax
f0107bca:	c1 e0 03             	shl    $0x3,%eax
f0107bcd:	01 c8                	add    %ecx,%eax
f0107bcf:	83 c0 78             	add    $0x78,%eax
f0107bd2:	8b 00                	mov    (%eax),%eax
f0107bd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0107bd7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107bda:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107bdd:	89 d0                	mov    %edx,%eax
f0107bdf:	01 c0                	add    %eax,%eax
f0107be1:	01 d0                	add    %edx,%eax
f0107be3:	c1 e0 03             	shl    $0x3,%eax
f0107be6:	01 c8                	add    %ecx,%eax
f0107be8:	83 e8 80             	sub    $0xffffff80,%eax
f0107beb:	8b 00                	mov    (%eax),%eax
f0107bed:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0107bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107bf3:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107bf6:	83 ec 08             	sub    $0x8,%esp
f0107bf9:	ff 75 e8             	pushl  -0x18(%ebp)
f0107bfc:	50                   	push   %eax
f0107bfd:	e8 01 fa ff ff       	call   f0107603 <pt_get_page_permissions>
f0107c02:	83 c4 10             	add    $0x10,%esp
f0107c05:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0107c08:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107c0b:	83 e0 40             	and    $0x40,%eax
f0107c0e:	85 c0                	test   %eax,%eax
f0107c10:	0f 95 c0             	setne  %al
f0107c13:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0107c16:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107c19:	83 e0 20             	and    $0x20,%eax
f0107c1c:	85 c0                	test   %eax,%eax
f0107c1e:	0f 95 c0             	setne  %al
f0107c21:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0107c24:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107c27:	25 00 02 00 00       	and    $0x200,%eax
f0107c2c:	85 c0                	test   %eax,%eax
f0107c2e:	0f 95 c0             	setne  %al
f0107c31:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0107c34:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107c37:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107c3a:	89 d0                	mov    %edx,%eax
f0107c3c:	01 c0                	add    %eax,%eax
f0107c3e:	01 d0                	add    %edx,%eax
f0107c40:	c1 e0 03             	shl    $0x3,%eax
f0107c43:	01 c8                	add    %ecx,%eax
f0107c45:	83 c0 78             	add    $0x78,%eax
f0107c48:	8b 00                	mov    (%eax),%eax
f0107c4a:	83 ec 04             	sub    $0x4,%esp
f0107c4d:	50                   	push   %eax
f0107c4e:	ff 75 ec             	pushl  -0x14(%ebp)
f0107c51:	68 d6 55 13 f0       	push   $0xf01355d6
f0107c56:	e8 d2 8f ff ff       	call   f0100c2d <cprintf>
f0107c5b:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0107c5e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107c61:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107c64:	89 d0                	mov    %edx,%eax
f0107c66:	01 c0                	add    %eax,%eax
f0107c68:	01 d0                	add    %edx,%eax
f0107c6a:	c1 e0 03             	shl    $0x3,%eax
f0107c6d:	01 c8                	add    %ecx,%eax
f0107c6f:	05 84 00 00 00       	add    $0x84,%eax
f0107c74:	8b 18                	mov    (%eax),%ebx
f0107c76:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0107c7a:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0107c7e:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0107c82:	83 ec 08             	sub    $0x8,%esp
f0107c85:	53                   	push   %ebx
f0107c86:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107c89:	51                   	push   %ecx
f0107c8a:	52                   	push   %edx
f0107c8b:	50                   	push   %eax
f0107c8c:	68 e8 55 13 f0       	push   $0xf01355e8
f0107c91:	e8 97 8f ff ff       	call   f0100c2d <cprintf>
f0107c96:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0107c99:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c9c:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107ca2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107ca5:	75 10                	jne    f0107cb7 <env_page_ws_print+0x28c>
			{
				cprintf(" <--");
f0107ca7:	83 ec 0c             	sub    $0xc,%esp
f0107caa:	68 2f 56 13 f0       	push   $0xf013562f
f0107caf:	e8 79 8f ff ff       	call   f0100c2d <cprintf>
f0107cb4:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107cb7:	83 ec 0c             	sub    $0xc,%esp
f0107cba:	68 d4 55 13 f0       	push   $0xf01355d4
f0107cbf:	e8 69 8f ff ff       	call   f0100c2d <cprintf>
f0107cc4:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107cc7:	ff 45 ec             	incl   -0x14(%ebp)
f0107cca:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ccd:	8b 40 74             	mov    0x74(%eax),%eax
f0107cd0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107cd3:	0f 87 88 fe ff ff    	ja     f0107b61 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107cd9:	90                   	nop
f0107cda:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107cdd:	c9                   	leave  
f0107cde:	c3                   	ret    

f0107cdf <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0107cdf:	55                   	push   %ebp
f0107ce0:	89 e5                	mov    %esp,%ebp
f0107ce2:	53                   	push   %ebx
f0107ce3:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0107ce6:	83 ec 0c             	sub    $0xc,%esp
f0107ce9:	68 34 56 13 f0       	push   $0xf0135634
f0107cee:	e8 3a 8f ff ff       	call   f0100c2d <cprintf>
f0107cf3:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0107cf6:	83 ec 0c             	sub    $0xc,%esp
f0107cf9:	68 69 56 13 f0       	push   $0xf0135669
f0107cfe:	e8 2a 8f ff ff       	call   f0100c2d <cprintf>
f0107d03:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107d06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107d0d:	e9 16 01 00 00       	jmp    f0107e28 <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f0107d12:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107d18:	89 d0                	mov    %edx,%eax
f0107d1a:	01 c0                	add    %eax,%eax
f0107d1c:	01 d0                	add    %edx,%eax
f0107d1e:	c1 e0 03             	shl    $0x3,%eax
f0107d21:	01 c8                	add    %ecx,%eax
f0107d23:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107d28:	8a 00                	mov    (%eax),%al
f0107d2a:	84 c0                	test   %al,%al
f0107d2c:	74 43                	je     f0107d71 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0107d2e:	83 ec 0c             	sub    $0xc,%esp
f0107d31:	68 bf 55 13 f0       	push   $0xf01355bf
f0107d36:	e8 f2 8e ff ff       	call   f0100c2d <cprintf>
f0107d3b:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0107d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d41:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107d47:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107d4a:	75 10                	jne    f0107d5c <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0107d4c:	83 ec 0c             	sub    $0xc,%esp
f0107d4f:	68 ce 55 13 f0       	push   $0xf01355ce
f0107d54:	e8 d4 8e ff ff       	call   f0100c2d <cprintf>
f0107d59:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107d5c:	83 ec 0c             	sub    $0xc,%esp
f0107d5f:	68 d4 55 13 f0       	push   $0xf01355d4
f0107d64:	e8 c4 8e ff ff       	call   f0100c2d <cprintf>
f0107d69:	83 c4 10             	add    $0x10,%esp
			continue;
f0107d6c:	e9 b4 00 00 00       	jmp    f0107e25 <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0107d71:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107d77:	89 d0                	mov    %edx,%eax
f0107d79:	01 c0                	add    %eax,%eax
f0107d7b:	01 d0                	add    %edx,%eax
f0107d7d:	c1 e0 03             	shl    $0x3,%eax
f0107d80:	01 c8                	add    %ecx,%eax
f0107d82:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107d87:	8b 00                	mov    (%eax),%eax
f0107d89:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0107d8c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107d92:	89 d0                	mov    %edx,%eax
f0107d94:	01 c0                	add    %eax,%eax
f0107d96:	01 d0                	add    %edx,%eax
f0107d98:	c1 e0 03             	shl    $0x3,%eax
f0107d9b:	01 c8                	add    %ecx,%eax
f0107d9d:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107da2:	8b 00                	mov    (%eax),%eax
f0107da4:	83 ec 04             	sub    $0x4,%esp
f0107da7:	50                   	push   %eax
f0107da8:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dab:	68 74 56 13 f0       	push   $0xf0135674
f0107db0:	e8 78 8e ff ff       	call   f0100c2d <cprintf>
f0107db5:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0107db8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107dbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107dbe:	89 d0                	mov    %edx,%eax
f0107dc0:	01 c0                	add    %eax,%eax
f0107dc2:	01 d0                	add    %edx,%eax
f0107dc4:	c1 e0 03             	shl    $0x3,%eax
f0107dc7:	01 c8                	add    %ecx,%eax
f0107dc9:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107dce:	8b 18                	mov    (%eax),%ebx
f0107dd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dd3:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107dd6:	83 ec 08             	sub    $0x8,%esp
f0107dd9:	ff 75 f0             	pushl  -0x10(%ebp)
f0107ddc:	50                   	push   %eax
f0107ddd:	e8 40 f9 ff ff       	call   f0107722 <pd_is_table_used>
f0107de2:	83 c4 10             	add    $0x10,%esp
f0107de5:	83 ec 04             	sub    $0x4,%esp
f0107de8:	53                   	push   %ebx
f0107de9:	50                   	push   %eax
f0107dea:	68 8c 56 13 f0       	push   $0xf013568c
f0107def:	e8 39 8e ff ff       	call   f0100c2d <cprintf>
f0107df4:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0107df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dfa:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107e00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107e03:	75 10                	jne    f0107e15 <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f0107e05:	83 ec 0c             	sub    $0xc,%esp
f0107e08:	68 2f 56 13 f0       	push   $0xf013562f
f0107e0d:	e8 1b 8e ff ff       	call   f0100c2d <cprintf>
f0107e12:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0107e15:	83 ec 0c             	sub    $0xc,%esp
f0107e18:	68 d4 55 13 f0       	push   $0xf01355d4
f0107e1d:	e8 0b 8e ff ff       	call   f0100c2d <cprintf>
f0107e22:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107e25:	ff 45 f4             	incl   -0xc(%ebp)
f0107e28:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107e2c:	0f 86 e0 fe ff ff    	jbe    f0107d12 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0107e32:	90                   	nop
f0107e33:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107e36:	c9                   	leave  
f0107e37:	c3                   	ret    

f0107e38 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0107e38:	55                   	push   %ebp
f0107e39:	89 e5                	mov    %esp,%ebp
f0107e3b:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107e3e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107e45:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0107e4c:	eb 22                	jmp    f0107e70 <env_table_ws_get_size+0x38>
f0107e4e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e51:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107e54:	89 d0                	mov    %edx,%eax
f0107e56:	01 c0                	add    %eax,%eax
f0107e58:	01 d0                	add    %edx,%eax
f0107e5a:	c1 e0 03             	shl    $0x3,%eax
f0107e5d:	01 c8                	add    %ecx,%eax
f0107e5f:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107e64:	8a 00                	mov    (%eax),%al
f0107e66:	84 c0                	test   %al,%al
f0107e68:	75 03                	jne    f0107e6d <env_table_ws_get_size+0x35>
f0107e6a:	ff 45 f8             	incl   -0x8(%ebp)
f0107e6d:	ff 45 fc             	incl   -0x4(%ebp)
f0107e70:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0107e74:	7e d8                	jle    f0107e4e <env_table_ws_get_size+0x16>
	return counter;
f0107e76:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107e79:	c9                   	leave  
f0107e7a:	c3                   	ret    

f0107e7b <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107e7b:	55                   	push   %ebp
f0107e7c:	89 e5                	mov    %esp,%ebp
f0107e7e:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107e81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0107e88:	eb 4e                	jmp    f0107ed8 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0107e8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107e90:	89 d0                	mov    %edx,%eax
f0107e92:	01 c0                	add    %eax,%eax
f0107e94:	01 d0                	add    %edx,%eax
f0107e96:	c1 e0 03             	shl    $0x3,%eax
f0107e99:	01 c8                	add    %ecx,%eax
f0107e9b:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107ea0:	8b 00                	mov    (%eax),%eax
f0107ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107ea5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ea8:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107ead:	89 c2                	mov    %eax,%edx
f0107eaf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107eb2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107eb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107eb8:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107ebd:	39 c2                	cmp    %eax,%edx
f0107ebf:	75 14                	jne    f0107ed5 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0107ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ec4:	83 ec 08             	sub    $0x8,%esp
f0107ec7:	50                   	push   %eax
f0107ec8:	ff 75 08             	pushl  0x8(%ebp)
f0107ecb:	e8 bc 00 00 00       	call   f0107f8c <env_table_ws_clear_entry>
f0107ed0:	83 c4 10             	add    $0x10,%esp
			break;
f0107ed3:	eb 09                	jmp    f0107ede <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0107ed5:	ff 45 f4             	incl   -0xc(%ebp)
f0107ed8:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107edc:	7e ac                	jle    f0107e8a <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107ede:	90                   	nop
f0107edf:	c9                   	leave  
f0107ee0:	c3                   	ret    

f0107ee1 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107ee1:	55                   	push   %ebp
f0107ee2:	89 e5                	mov    %esp,%ebp
f0107ee4:	53                   	push   %ebx
f0107ee5:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107ee8:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107eec:	76 19                	jbe    f0107f07 <env_table_ws_set_entry+0x26>
f0107eee:	68 b0 56 13 f0       	push   $0xf01356b0
f0107ef3:	68 d6 54 13 f0       	push   $0xf01354d6
f0107ef8:	68 b6 00 00 00       	push   $0xb6
f0107efd:	68 ec 54 13 f0       	push   $0xf01354ec
f0107f02:	e8 9f 82 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107f07:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107f0e:	76 19                	jbe    f0107f29 <env_table_ws_set_entry+0x48>
f0107f10:	68 0c 55 13 f0       	push   $0xf013550c
f0107f15:	68 d6 54 13 f0       	push   $0xf01354d6
f0107f1a:	68 b7 00 00 00       	push   $0xb7
f0107f1f:	68 ec 54 13 f0       	push   $0xf01354ec
f0107f24:	e8 7d 82 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0107f29:	8b 45 10             	mov    0x10(%ebp),%eax
f0107f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f32:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107f37:	89 c1                	mov    %eax,%ecx
f0107f39:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107f3c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f3f:	89 d0                	mov    %edx,%eax
f0107f41:	01 c0                	add    %eax,%eax
f0107f43:	01 d0                	add    %edx,%eax
f0107f45:	c1 e0 03             	shl    $0x3,%eax
f0107f48:	01 d8                	add    %ebx,%eax
f0107f4a:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107f4f:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0107f51:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f54:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f57:	89 d0                	mov    %edx,%eax
f0107f59:	01 c0                	add    %eax,%eax
f0107f5b:	01 d0                	add    %edx,%eax
f0107f5d:	c1 e0 03             	shl    $0x3,%eax
f0107f60:	01 c8                	add    %ecx,%eax
f0107f62:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107f67:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0107f6a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f6d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f70:	89 d0                	mov    %edx,%eax
f0107f72:	01 c0                	add    %eax,%eax
f0107f74:	01 d0                	add    %edx,%eax
f0107f76:	c1 e0 03             	shl    $0x3,%eax
f0107f79:	01 c8                	add    %ecx,%eax
f0107f7b:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107f80:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0107f86:	90                   	nop
}
f0107f87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107f8a:	c9                   	leave  
f0107f8b:	c3                   	ret    

f0107f8c <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107f8c:	55                   	push   %ebp
f0107f8d:	89 e5                	mov    %esp,%ebp
f0107f8f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107f92:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107f96:	76 19                	jbe    f0107fb1 <env_table_ws_clear_entry+0x25>
f0107f98:	68 b0 56 13 f0       	push   $0xf01356b0
f0107f9d:	68 d6 54 13 f0       	push   $0xf01354d6
f0107fa2:	68 c2 00 00 00       	push   $0xc2
f0107fa7:	68 ec 54 13 f0       	push   $0xf01354ec
f0107fac:	e8 f5 81 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0107fb1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107fb4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fb7:	89 d0                	mov    %edx,%eax
f0107fb9:	01 c0                	add    %eax,%eax
f0107fbb:	01 d0                	add    %edx,%eax
f0107fbd:	c1 e0 03             	shl    $0x3,%eax
f0107fc0:	01 c8                	add    %ecx,%eax
f0107fc2:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107fc7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0107fcd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107fd0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fd3:	89 d0                	mov    %edx,%eax
f0107fd5:	01 c0                	add    %eax,%eax
f0107fd7:	01 d0                	add    %edx,%eax
f0107fd9:	c1 e0 03             	shl    $0x3,%eax
f0107fdc:	01 c8                	add    %ecx,%eax
f0107fde:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107fe3:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0107fe6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107fe9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fec:	89 d0                	mov    %edx,%eax
f0107fee:	01 c0                	add    %eax,%eax
f0107ff0:	01 d0                	add    %edx,%eax
f0107ff2:	c1 e0 03             	shl    $0x3,%eax
f0107ff5:	01 c8                	add    %ecx,%eax
f0107ff7:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107ffc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108002:	90                   	nop
f0108003:	c9                   	leave  
f0108004:	c3                   	ret    

f0108005 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108005:	55                   	push   %ebp
f0108006:	89 e5                	mov    %esp,%ebp
f0108008:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010800b:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010800f:	76 19                	jbe    f010802a <env_table_ws_get_virtual_address+0x25>
f0108011:	68 b0 56 13 f0       	push   $0xf01356b0
f0108016:	68 d6 54 13 f0       	push   $0xf01354d6
f010801b:	68 ca 00 00 00       	push   $0xca
f0108020:	68 ec 54 13 f0       	push   $0xf01354ec
f0108025:	e8 7c 81 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f010802a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010802d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108030:	89 d0                	mov    %edx,%eax
f0108032:	01 c0                	add    %eax,%eax
f0108034:	01 d0                	add    %edx,%eax
f0108036:	c1 e0 03             	shl    $0x3,%eax
f0108039:	01 c8                	add    %ecx,%eax
f010803b:	05 38 d5 01 00       	add    $0x1d538,%eax
f0108040:	8b 00                	mov    (%eax),%eax
f0108042:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108045:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108048:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010804d:	c9                   	leave  
f010804e:	c3                   	ret    

f010804f <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010804f:	55                   	push   %ebp
f0108050:	89 e5                	mov    %esp,%ebp
f0108052:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108055:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108059:	76 19                	jbe    f0108074 <env_table_ws_get_time_stamp+0x25>
f010805b:	68 b0 56 13 f0       	push   $0xf01356b0
f0108060:	68 d6 54 13 f0       	push   $0xf01354d6
f0108065:	68 d1 00 00 00       	push   $0xd1
f010806a:	68 ec 54 13 f0       	push   $0xf01354ec
f010806f:	e8 32 81 ff ff       	call   f01001a6 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108074:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108077:	8b 55 0c             	mov    0xc(%ebp),%edx
f010807a:	89 d0                	mov    %edx,%eax
f010807c:	01 c0                	add    %eax,%eax
f010807e:	01 d0                	add    %edx,%eax
f0108080:	c1 e0 03             	shl    $0x3,%eax
f0108083:	01 c8                	add    %ecx,%eax
f0108085:	05 40 d5 01 00       	add    $0x1d540,%eax
f010808a:	8b 00                	mov    (%eax),%eax
}
f010808c:	c9                   	leave  
f010808d:	c3                   	ret    

f010808e <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010808e:	55                   	push   %ebp
f010808f:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108091:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108094:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108097:	89 d0                	mov    %edx,%eax
f0108099:	01 c0                	add    %eax,%eax
f010809b:	01 d0                	add    %edx,%eax
f010809d:	c1 e0 03             	shl    $0x3,%eax
f01080a0:	01 c8                	add    %ecx,%eax
f01080a2:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01080a7:	8a 00                	mov    (%eax),%al
f01080a9:	0f b6 c0             	movzbl %al,%eax
}
f01080ac:	5d                   	pop    %ebp
f01080ad:	c3                   	ret    

f01080ae <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f01080ae:	55                   	push   %ebp
f01080af:	89 e5                	mov    %esp,%ebp
f01080b1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f01080b4:	83 ec 04             	sub    $0x4,%esp
f01080b7:	68 e4 56 13 f0       	push   $0xf01356e4
f01080bc:	68 e5 00 00 00       	push   $0xe5
f01080c1:	68 ec 54 13 f0       	push   $0xf01354ec
f01080c6:	e8 db 80 ff ff       	call   f01001a6 <_panic>

f01080cb <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f01080cb:	55                   	push   %ebp
f01080cc:	89 e5                	mov    %esp,%ebp
f01080ce:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f01080d1:	83 ec 04             	sub    $0x4,%esp
f01080d4:	68 10 57 13 f0       	push   $0xf0135710
f01080d9:	68 ec 00 00 00       	push   $0xec
f01080de:	68 ec 54 13 f0       	push   $0xf01354ec
f01080e3:	e8 be 80 ff ff       	call   f01001a6 <_panic>

f01080e8 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01080e8:	55                   	push   %ebp
f01080e9:	89 e5                	mov    %esp,%ebp
f01080eb:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f01080ee:	83 ec 04             	sub    $0x4,%esp
f01080f1:	68 40 57 13 f0       	push   $0xf0135740
f01080f6:	68 f3 00 00 00       	push   $0xf3
f01080fb:	68 ec 54 13 f0       	push   $0xf01354ec
f0108100:	e8 a1 80 ff ff       	call   f01001a6 <_panic>

f0108105 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108105:	55                   	push   %ebp
f0108106:	89 e5                	mov    %esp,%ebp
f0108108:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	panic("cut_paste_pages() is not implemented yet...!!");
f010810b:	83 ec 04             	sub    $0x4,%esp
f010810e:	68 6c 57 13 f0       	push   $0xf013576c
f0108113:	6a 1c                	push   $0x1c
f0108115:	68 9a 57 13 f0       	push   $0xf013579a
f010811a:	e8 87 80 ff ff       	call   f01001a6 <_panic>

f010811f <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f010811f:	55                   	push   %ebp
f0108120:	89 e5                	mov    %esp,%ebp
f0108122:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f0108125:	83 ec 04             	sub    $0x4,%esp
f0108128:	68 b8 57 13 f0       	push   $0xf01357b8
f010812d:	6a 29                	push   $0x29
f010812f:	68 9a 57 13 f0       	push   $0xf013579a
f0108134:	e8 6d 80 ff ff       	call   f01001a6 <_panic>

f0108139 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108139:	55                   	push   %ebp
f010813a:	89 e5                	mov    %esp,%ebp
f010813c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f010813f:	83 ec 04             	sub    $0x4,%esp
f0108142:	68 e8 57 13 f0       	push   $0xf01357e8
f0108147:	6a 35                	push   $0x35
f0108149:	68 9a 57 13 f0       	push   $0xf013579a
f010814e:	e8 53 80 ff ff       	call   f01001a6 <_panic>

f0108153 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108153:	55                   	push   %ebp
f0108154:	89 e5                	mov    %esp,%ebp
f0108156:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
//	panic("allocate_chunk() is not implemented yet...!!");
	uint32 virtual_address=0;
f0108159:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108160:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108163:	8b 45 10             	mov    0x10(%ebp),%eax
f0108166:	01 d0                	add    %edx,%eax
f0108168:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f010816b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
//	uint32 pageSize=4*1024;
	struct FrameInfo *sb_chunck= NULL ;
f0108172:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108179:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108180:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    struct FrameInfo *ptr_frame_info ;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108187:	8b 45 0c             	mov    0xc(%ebp),%eax
f010818a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010818d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108190:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108195:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108198:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010819f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01081a5:	01 d0                	add    %edx,%eax
f01081a7:	48                   	dec    %eax
f01081a8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01081ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01081ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01081b3:	f7 75 dc             	divl   -0x24(%ebp)
f01081b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01081b9:	29 d0                	sub    %edx,%eax
f01081bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f01081be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01081c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01081c4:	e9 94 00 00 00       	jmp    f010825d <allocate_chunk+0x10a>
	{    new_virtual_address=count;
f01081c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	      get_page_table(page_directory,new_virtual_address,&page_table_point);
f01081cf:	83 ec 04             	sub    $0x4,%esp
f01081d2:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01081d5:	50                   	push   %eax
f01081d6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01081d9:	ff 75 08             	pushl  0x8(%ebp)
f01081dc:	e8 88 e7 ff ff       	call   f0106969 <get_page_table>
f01081e1:	83 c4 10             	add    $0x10,%esp
	       if(page_table_point==NULL)
f01081e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01081e7:	85 c0                	test   %eax,%eax
f01081e9:	75 14                	jne    f01081ff <allocate_chunk+0xac>
	       {
	    	   page_table_point=create_page_table(page_directory,new_virtual_address);
f01081eb:	83 ec 08             	sub    $0x8,%esp
f01081ee:	ff 75 d4             	pushl  -0x2c(%ebp)
f01081f1:	ff 75 08             	pushl  0x8(%ebp)
f01081f4:	e8 76 e8 ff ff       	call   f0106a6f <create_page_table>
f01081f9:	83 c4 10             	add    $0x10,%esp
f01081fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
	       }

	       sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f01081ff:	83 ec 04             	sub    $0x4,%esp
f0108202:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108205:	50                   	push   %eax
f0108206:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108209:	ff 75 08             	pushl  0x8(%ebp)
f010820c:	e8 f0 e9 ff ff       	call   f0106c01 <get_frame_info>
f0108211:	83 c4 10             	add    $0x10,%esp
f0108214:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if(sb_chunck!=NULL)
f0108217:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010821a:	85 c0                	test   %eax,%eax
f010821c:	74 07                	je     f0108225 <allocate_chunk+0xd2>
            {
            	return -1;
f010821e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108223:	eb 49                	jmp    f010826e <allocate_chunk+0x11b>
            }


		       result= allocate_frame(&sb_chunck);
f0108225:	83 ec 0c             	sub    $0xc,%esp
f0108228:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010822b:	50                   	push   %eax
f010822c:	e8 79 e5 ff ff       	call   f01067aa <allocate_frame>
f0108231:	83 c4 10             	add    $0x10,%esp
f0108234:	89 45 e4             	mov    %eax,-0x1c(%ebp)


			     if(result != E_NO_MEM)
f0108237:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f010823b:	74 19                	je     f0108256 <allocate_chunk+0x103>
			      {

				     result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f010823d:	8b 55 14             	mov    0x14(%ebp),%edx
f0108240:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108243:	52                   	push   %edx
f0108244:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108247:	50                   	push   %eax
f0108248:	ff 75 08             	pushl  0x8(%ebp)
f010824b:	e8 f2 e8 ff ff       	call   f0106b42 <map_frame>
f0108250:	83 c4 10             	add    $0x10,%esp
f0108253:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct FrameInfo *ptr_frame_info ;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108256:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010825d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108260:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108263:	0f 82 60 ff ff ff    	jb     f01081c9 <allocate_chunk+0x76>



	}

	return 0;
f0108269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010826e:	c9                   	leave  
f010826f:	c3                   	ret    

f0108270 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108270:	55                   	push   %ebp
f0108271:	89 e5                	mov    %esp,%ebp
f0108273:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108276:	83 ec 04             	sub    $0x4,%esp
f0108279:	68 14 58 13 f0       	push   $0xf0135814
f010827e:	6a 77                	push   $0x77
f0108280:	68 9a 57 13 f0       	push   $0xf013579a
f0108285:	e8 1c 7f ff ff       	call   f01001a6 <_panic>

f010828a <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f010828a:	55                   	push   %ebp
f010828b:	89 e5                	mov    %esp,%ebp
f010828d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0108290:	83 ec 04             	sub    $0x4,%esp
f0108293:	68 4c 58 13 f0       	push   $0xf013584c
f0108298:	68 86 00 00 00       	push   $0x86
f010829d:	68 9a 57 13 f0       	push   $0xf013579a
f01082a2:	e8 ff 7e ff ff       	call   f01001a6 <_panic>

f01082a7 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01082a7:	55                   	push   %ebp
f01082a8:	89 e5                	mov    %esp,%ebp
f01082aa:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01082ad:	83 ec 04             	sub    $0x4,%esp
f01082b0:	68 84 58 13 f0       	push   $0xf0135884
f01082b5:	68 9b 00 00 00       	push   $0x9b
f01082ba:	68 9a 57 13 f0       	push   $0xf013579a
f01082bf:	e8 e2 7e ff ff       	call   f01001a6 <_panic>

f01082c4 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01082c4:	55                   	push   %ebp
f01082c5:	89 e5                	mov    %esp,%ebp
f01082c7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f01082ca:	83 ec 04             	sub    $0x4,%esp
f01082cd:	68 b4 58 13 f0       	push   $0xf01358b4
f01082d2:	68 a5 00 00 00       	push   $0xa5
f01082d7:	68 9a 57 13 f0       	push   $0xf013579a
f01082dc:	e8 c5 7e ff ff       	call   f01001a6 <_panic>

f01082e1 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f01082e1:	55                   	push   %ebp
f01082e2:	89 e5                	mov    %esp,%ebp
f01082e4:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01082e7:	83 ec 04             	sub    $0x4,%esp
f01082ea:	68 e0 58 13 f0       	push   $0xf01358e0
f01082ef:	68 b3 00 00 00       	push   $0xb3
f01082f4:	68 9a 57 13 f0       	push   $0xf013579a
f01082f9:	e8 a8 7e ff ff       	call   f01001a6 <_panic>

f01082fe <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f01082fe:	55                   	push   %ebp
f01082ff:	89 e5                	mov    %esp,%ebp
f0108301:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108304:	83 ec 04             	sub    $0x4,%esp
f0108307:	68 20 59 13 f0       	push   $0xf0135920
f010830c:	68 c3 00 00 00       	push   $0xc3
f0108311:	68 9a 57 13 f0       	push   $0xf013579a
f0108316:	e8 8b 7e ff ff       	call   f01001a6 <_panic>

f010831b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010831b:	55                   	push   %ebp
f010831c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010831e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108321:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0108327:	29 d0                	sub    %edx,%eax
f0108329:	c1 f8 03             	sar    $0x3,%eax
f010832c:	89 c2                	mov    %eax,%edx
f010832e:	89 d0                	mov    %edx,%eax
f0108330:	c1 e0 02             	shl    $0x2,%eax
f0108333:	01 d0                	add    %edx,%eax
f0108335:	c1 e0 02             	shl    $0x2,%eax
f0108338:	01 d0                	add    %edx,%eax
f010833a:	c1 e0 02             	shl    $0x2,%eax
f010833d:	01 d0                	add    %edx,%eax
f010833f:	89 c1                	mov    %eax,%ecx
f0108341:	c1 e1 08             	shl    $0x8,%ecx
f0108344:	01 c8                	add    %ecx,%eax
f0108346:	89 c1                	mov    %eax,%ecx
f0108348:	c1 e1 10             	shl    $0x10,%ecx
f010834b:	01 c8                	add    %ecx,%eax
f010834d:	01 c0                	add    %eax,%eax
f010834f:	01 d0                	add    %edx,%eax
}
f0108351:	5d                   	pop    %ebp
f0108352:	c3                   	ret    

f0108353 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108353:	55                   	push   %ebp
f0108354:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108356:	ff 75 08             	pushl  0x8(%ebp)
f0108359:	e8 bd ff ff ff       	call   f010831b <to_frame_number>
f010835e:	83 c4 04             	add    $0x4,%esp
f0108361:	c1 e0 0c             	shl    $0xc,%eax
}
f0108364:	c9                   	leave  
f0108365:	c3                   	ret    

f0108366 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108366:	55                   	push   %ebp
f0108367:	89 e5                	mov    %esp,%ebp
f0108369:	57                   	push   %edi
f010836a:	56                   	push   %esi
f010836b:	53                   	push   %ebx
f010836c:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108372:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108379:	83 ec 0c             	sub    $0xc,%esp
f010837c:	ff 75 08             	pushl  0x8(%ebp)
f010837f:	e8 c8 22 00 00       	call   f010a64c <get_user_program_info>
f0108384:	83 c4 10             	add    $0x10,%esp
f0108387:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f010838a:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f010838e:	75 0a                	jne    f010839a <env_create+0x34>
f0108390:	b8 00 00 00 00       	mov    $0x0,%eax
f0108395:	e9 8f 0c 00 00       	jmp    f0109029 <env_create+0xcc3>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f010839a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010839d:	8b 40 08             	mov    0x8(%eax),%eax
f01083a0:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01083a3:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%ebp)
f01083aa:	00 00 00 
	if(allocate_environment(&e) < 0)
f01083ad:	83 ec 0c             	sub    $0xc,%esp
f01083b0:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01083b6:	50                   	push   %eax
f01083b7:	e8 32 10 00 00       	call   f01093ee <allocate_environment>
f01083bc:	83 c4 10             	add    $0x10,%esp
f01083bf:	85 c0                	test   %eax,%eax
f01083c1:	79 0a                	jns    f01083cd <env_create+0x67>
	{
		return 0;
f01083c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01083c8:	e9 5c 0c 00 00       	jmp    f0109029 <env_create+0xcc3>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01083cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01083d0:	8b 00                	mov    (%eax),%eax
f01083d2:	83 ec 0c             	sub    $0xc,%esp
f01083d5:	50                   	push   %eax
f01083d6:	e8 44 80 02 00       	call   f013041f <strlen>
f01083db:	83 c4 10             	add    $0x10,%esp
f01083de:	83 f8 3f             	cmp    $0x3f,%eax
f01083e1:	7f 20                	jg     f0108403 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01083e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01083e6:	8b 00                	mov    (%eax),%eax
f01083e8:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01083ee:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f01083f4:	83 ec 08             	sub    $0x8,%esp
f01083f7:	50                   	push   %eax
f01083f8:	52                   	push   %edx
f01083f9:	e8 70 80 02 00       	call   f013046e <strcpy>
f01083fe:	83 c4 10             	add    $0x10,%esp
f0108401:	eb 20                	jmp    f0108423 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108403:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108406:	8b 00                	mov    (%eax),%eax
f0108408:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f010840e:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f0108414:	83 ec 04             	sub    $0x4,%esp
f0108417:	6a 3f                	push   $0x3f
f0108419:	50                   	push   %eax
f010841a:	52                   	push   %edx
f010841b:	e8 7c 80 02 00       	call   f013049c <strncpy>
f0108420:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108423:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010842a:	00 00 00 

		allocate_frame(&p) ;
f010842d:	83 ec 0c             	sub    $0xc,%esp
f0108430:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108436:	50                   	push   %eax
f0108437:	e8 6e e3 ff ff       	call   f01067aa <allocate_frame>
f010843c:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f010843f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0108445:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f010844b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0108451:	83 ec 0c             	sub    $0xc,%esp
f0108454:	50                   	push   %eax
f0108455:	e8 f9 fe ff ff       	call   f0108353 <to_physical_address>
f010845a:	83 c4 10             	add    $0x10,%esp
f010845d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108460:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108463:	c1 e8 0c             	shr    $0xc,%eax
f0108466:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108469:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f010846e:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108471:	72 17                	jb     f010848a <env_create+0x124>
f0108473:	ff 75 b0             	pushl  -0x50(%ebp)
f0108476:	68 4c 59 13 f0       	push   $0xf013594c
f010847b:	68 8d 00 00 00       	push   $0x8d
f0108480:	68 7b 59 13 f0       	push   $0xf013597b
f0108485:	e8 1c 7d ff ff       	call   f01001a6 <_panic>
f010848a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010848d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108492:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0108495:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010849b:	83 ec 0c             	sub    $0xc,%esp
f010849e:	50                   	push   %eax
f010849f:	e8 af fe ff ff       	call   f0108353 <to_physical_address>
f01084a4:	83 c4 10             	add    $0x10,%esp
f01084a7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f01084aa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084b0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084b3:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01084b6:	83 ec 0c             	sub    $0xc,%esp
f01084b9:	6a 02                	push   $0x2
f01084bb:	e8 a1 4d 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f01084c0:	83 c4 10             	add    $0x10,%esp
f01084c3:	85 c0                	test   %eax,%eax
f01084c5:	74 21                	je     f01084e8 <env_create+0x182>
	{
		e->SecondListSize = LRU_second_list_size;
f01084c7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084cd:	8b 55 10             	mov    0x10(%ebp),%edx
f01084d0:	89 90 a4 ea 01 00    	mov    %edx,0x1eaa4(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f01084d6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084dc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084df:	2b 55 10             	sub    0x10(%ebp),%edx
f01084e2:	89 90 a0 ea 01 00    	mov    %edx,0x1eaa0(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f01084e8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f01084ec:	75 12                	jne    f0108500 <env_create+0x19a>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f01084ee:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084f4:	c7 80 5c da 01 00 0a 	movl   $0xa,0x1da5c(%eax)
f01084fb:	00 00 00 
f01084fe:	eb 0f                	jmp    f010850f <env_create+0x1a9>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108500:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108506:	8b 55 14             	mov    0x14(%ebp),%edx
f0108509:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f010850f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108515:	83 ec 04             	sub    $0x4,%esp
f0108518:	ff 75 a4             	pushl  -0x5c(%ebp)
f010851b:	ff 75 a8             	pushl  -0x58(%ebp)
f010851e:	50                   	push   %eax
f010851f:	e8 ed 16 00 00       	call   f0109c11 <initialize_environment>
f0108524:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108527:	0f 20 d8             	mov    %cr3,%eax
f010852a:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f010852d:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108530:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108533:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108539:	8b 40 60             	mov    0x60(%eax),%eax
f010853c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108542:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0108548:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f010854b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108552:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108559:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010855f:	8b 40 74             	mov    0x74(%eax),%eax
f0108562:	48                   	dec    %eax
f0108563:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108566:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
f010856d:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108570:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108576:	83 ec 08             	sub    $0x8,%esp
f0108579:	ff 75 b8             	pushl  -0x48(%ebp)
f010857c:	50                   	push   %eax
f010857d:	e8 ff 1d 00 00       	call   f010a381 <PROGRAM_SEGMENT_FIRST>
f0108582:	83 c4 0c             	add    $0xc,%esp
f0108585:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010858b:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108591:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108596:	89 c7                	mov    %eax,%edi
f0108598:	89 d6                	mov    %edx,%esi
f010859a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010859c:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f01085a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01085a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01085a8:	8b 40 10             	mov    0x10(%eax),%eax
f01085ab:	83 f8 ff             	cmp    $0xffffffff,%eax
f01085ae:	75 07                	jne    f01085b7 <env_create+0x251>
f01085b0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01085b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01085ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01085bd:	e9 24 03 00 00       	jmp    f01088e6 <env_create+0x580>
	{
		segment_counter++;
f01085c2:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f01085c5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01085cc:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f01085cf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01085d5:	83 ec 0c             	sub    $0xc,%esp
f01085d8:	8d 95 40 ff ff ff    	lea    -0xc0(%ebp),%edx
f01085de:	52                   	push   %edx
f01085df:	ff 75 dc             	pushl  -0x24(%ebp)
f01085e2:	8d 95 24 ff ff ff    	lea    -0xdc(%ebp),%edx
f01085e8:	52                   	push   %edx
f01085e9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01085ec:	50                   	push   %eax
f01085ed:	e8 f4 0e 00 00       	call   f01094e6 <program_segment_alloc_map_copy_workingset>
f01085f2:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f01085f5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01085fb:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f01085fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108601:	8b 00                	mov    (%eax),%eax
f0108603:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108606:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108609:	8b 40 0c             	mov    0xc(%eax),%eax
f010860c:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010860f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108612:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108615:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108618:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010861d:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108620:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108627:	8b 55 90             	mov    -0x70(%ebp),%edx
f010862a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010862d:	01 d0                	add    %edx,%eax
f010862f:	48                   	dec    %eax
f0108630:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108633:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108636:	ba 00 00 00 00       	mov    $0x0,%edx
f010863b:	f7 75 84             	divl   -0x7c(%ebp)
f010863e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108641:	29 d0                	sub    %edx,%eax
f0108643:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108649:	8b 45 90             	mov    -0x70(%ebp),%eax
f010864c:	2b 45 88             	sub    -0x78(%ebp),%eax
f010864f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108655:	a1 e0 84 6e f0       	mov    0xf06e84e0,%eax
f010865a:	83 ec 04             	sub    $0x4,%esp
f010865d:	68 00 10 00 00       	push   $0x1000
f0108662:	6a 00                	push   $0x0
f0108664:	50                   	push   %eax
f0108665:	e8 a3 7f 02 00       	call   f013060d <memset>
f010866a:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f010866d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108670:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108673:	8b 15 e0 84 6e f0    	mov    0xf06e84e0,%edx
f0108679:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010867f:	01 d0                	add    %edx,%eax
f0108681:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108684:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108687:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010868a:	eb 13                	jmp    f010869f <env_create+0x339>
		{
			*dst_ptr = *src_ptr ;
f010868c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010868f:	8a 10                	mov    (%eax),%dl
f0108691:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108694:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108696:	ff 45 cc             	incl   -0x34(%ebp)
f0108699:	ff 45 d4             	incl   -0x2c(%ebp)
f010869c:	ff 45 d0             	incl   -0x30(%ebp)
f010869f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01086a2:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f01086a8:	72 e2                	jb     f010868c <env_create+0x326>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01086aa:	8b 15 e0 84 6e f0    	mov    0xf06e84e0,%edx
f01086b0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01086b6:	83 ec 04             	sub    $0x4,%esp
f01086b9:	52                   	push   %edx
f01086ba:	ff 75 88             	pushl  -0x78(%ebp)
f01086bd:	50                   	push   %eax
f01086be:	e8 59 ae ff ff       	call   f010351c <pf_add_env_page>
f01086c3:	83 c4 10             	add    $0x10,%esp
f01086c6:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01086c9:	75 17                	jne    f01086e2 <env_create+0x37c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01086cb:	83 ec 04             	sub    $0x4,%esp
f01086ce:	68 98 59 13 f0       	push   $0xf0135998
f01086d3:	68 e1 00 00 00       	push   $0xe1
f01086d8:	68 7b 59 13 f0       	push   $0xf013597b
f01086dd:	e8 c4 7a ff ff       	call   f01001a6 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f01086e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01086e5:	8b 50 04             	mov    0x4(%eax),%edx
f01086e8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01086eb:	01 d0                	add    %edx,%eax
f01086ed:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01086f3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01086f9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01086fe:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0108704:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108707:	8b 50 04             	mov    0x4(%eax),%edx
f010870a:	8b 45 90             	mov    -0x70(%ebp),%eax
f010870d:	01 d0                	add    %edx,%eax
f010870f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108715:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010871b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010871e:	eb 43                	jmp    f0108763 <env_create+0x3fd>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0108720:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0108723:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108729:	83 ec 04             	sub    $0x4,%esp
f010872c:	ff 75 d4             	pushl  -0x2c(%ebp)
f010872f:	52                   	push   %edx
f0108730:	50                   	push   %eax
f0108731:	e8 e6 ad ff ff       	call   f010351c <pf_add_env_page>
f0108736:	83 c4 10             	add    $0x10,%esp
f0108739:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010873c:	75 17                	jne    f0108755 <env_create+0x3ef>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010873e:	83 ec 04             	sub    $0x4,%esp
f0108741:	68 98 59 13 f0       	push   $0xf0135998
f0108746:	68 ee 00 00 00       	push   $0xee
f010874b:	68 7b 59 13 f0       	push   $0xf013597b
f0108750:	e8 51 7a ff ff       	call   f01001a6 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108755:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010875c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0108763:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108766:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f010876c:	72 b2                	jb     f0108720 <env_create+0x3ba>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f010876e:	a1 e0 84 6e f0       	mov    0xf06e84e0,%eax
f0108773:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0108776:	83 ec 04             	sub    $0x4,%esp
f0108779:	68 00 10 00 00       	push   $0x1000
f010877e:	6a 00                	push   $0x0
f0108780:	ff 75 d0             	pushl  -0x30(%ebp)
f0108783:	e8 85 7e 02 00       	call   f013060d <memset>
f0108788:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010878b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0108791:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108794:	eb 13                	jmp    f01087a9 <env_create+0x443>
		{
			*dst_ptr = *src_ptr;
f0108796:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108799:	8a 10                	mov    (%eax),%dl
f010879b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010879e:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01087a0:	ff 45 cc             	incl   -0x34(%ebp)
f01087a3:	ff 45 d4             	incl   -0x2c(%ebp)
f01087a6:	ff 45 d0             	incl   -0x30(%ebp)
f01087a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01087ac:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f01087b2:	72 e2                	jb     f0108796 <env_create+0x430>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01087b4:	8b 15 e0 84 6e f0    	mov    0xf06e84e0,%edx
f01087ba:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087c0:	83 ec 04             	sub    $0x4,%esp
f01087c3:	52                   	push   %edx
f01087c4:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f01087ca:	50                   	push   %eax
f01087cb:	e8 4c ad ff ff       	call   f010351c <pf_add_env_page>
f01087d0:	83 c4 10             	add    $0x10,%esp
f01087d3:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01087d6:	75 17                	jne    f01087ef <env_create+0x489>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01087d8:	83 ec 04             	sub    $0x4,%esp
f01087db:	68 98 59 13 f0       	push   $0xf0135998
f01087e0:	68 fd 00 00 00       	push   $0xfd
f01087e5:	68 7b 59 13 f0       	push   $0xf013597b
f01087ea:	e8 b7 79 ff ff       	call   f01001a6 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f01087ef:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01087f6:	10 00 00 
f01087f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01087fc:	8b 50 04             	mov    0x4(%eax),%edx
f01087ff:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108802:	01 c2                	add    %eax,%edx
f0108804:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010880a:	01 d0                	add    %edx,%eax
f010880c:	48                   	dec    %eax
f010880d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0108813:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108819:	ba 00 00 00 00       	mov    $0x0,%edx
f010881e:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0108824:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010882a:	29 d0                	sub    %edx,%eax
f010882c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f010882f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108832:	8b 50 08             	mov    0x8(%eax),%edx
f0108835:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108838:	01 d0                	add    %edx,%eax
f010883a:	2b 45 c8             	sub    -0x38(%ebp),%eax
f010883d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108843:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010884a:	eb 41                	jmp    f010888d <env_create+0x527>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f010884c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108852:	83 ec 04             	sub    $0x4,%esp
f0108855:	6a 01                	push   $0x1
f0108857:	ff 75 c8             	pushl  -0x38(%ebp)
f010885a:	50                   	push   %eax
f010885b:	e8 8b ab ff ff       	call   f01033eb <pf_add_empty_env_page>
f0108860:	83 c4 10             	add    $0x10,%esp
f0108863:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108866:	75 17                	jne    f010887f <env_create+0x519>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108868:	83 ec 04             	sub    $0x4,%esp
f010886b:	68 98 59 13 f0       	push   $0xf0135998
f0108870:	68 0a 01 00 00       	push   $0x10a
f0108875:	68 7b 59 13 f0       	push   $0xf013597b
f010887a:	e8 27 79 ff ff       	call   f01001a6 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010887f:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108886:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f010888d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0108894:	10 00 00 
f0108897:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f010889d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01088a3:	01 d0                	add    %edx,%eax
f01088a5:	48                   	dec    %eax
f01088a6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01088ac:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01088b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01088b7:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01088bd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01088c3:	29 d0                	sub    %edx,%eax
f01088c5:	89 c2                	mov    %eax,%edx
f01088c7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088ca:	39 c2                	cmp    %eax,%edx
f01088cc:	0f 87 7a ff ff ff    	ja     f010884c <env_create+0x4e6>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01088d2:	83 ec 08             	sub    $0x8,%esp
f01088d5:	ff 75 b8             	pushl  -0x48(%ebp)
f01088d8:	ff 75 e4             	pushl  -0x1c(%ebp)
f01088db:	e8 96 19 00 00       	call   f010a276 <PROGRAM_SEGMENT_NEXT>
f01088e0:	83 c4 10             	add    $0x10,%esp
f01088e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01088e6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01088ea:	0f 85 d2 fc ff ff    	jne    f01085c2 <env_create+0x25c>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f01088f0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f01088f7:	e9 9c 00 00 00       	jmp    f0108998 <env_create+0x632>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f01088fc:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108902:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108905:	89 d0                	mov    %edx,%eax
f0108907:	01 c0                	add    %eax,%eax
f0108909:	01 d0                	add    %edx,%eax
f010890b:	c1 e0 03             	shl    $0x3,%eax
f010890e:	01 c8                	add    %ecx,%eax
f0108910:	83 c0 7c             	add    $0x7c,%eax
f0108913:	8a 00                	mov    (%eax),%al
f0108915:	84 c0                	test   %al,%al
f0108917:	75 7c                	jne    f0108995 <env_create+0x62f>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108919:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010891f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108922:	89 d0                	mov    %edx,%eax
f0108924:	01 c0                	add    %eax,%eax
f0108926:	01 d0                	add    %edx,%eax
f0108928:	c1 e0 03             	shl    $0x3,%eax
f010892b:	01 c8                	add    %ecx,%eax
f010892d:	83 c0 78             	add    $0x78,%eax
f0108930:	8b 00                	mov    (%eax),%eax
f0108932:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0108938:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010893e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108941:	83 ec 04             	sub    $0x4,%esp
f0108944:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f010894a:	52                   	push   %edx
f010894b:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0108951:	50                   	push   %eax
f0108952:	e8 12 e0 ff ff       	call   f0106969 <get_page_table>
f0108957:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f010895a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108960:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0108966:	c1 ea 0c             	shr    $0xc,%edx
f0108969:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010896f:	c1 e2 02             	shl    $0x2,%edx
f0108972:	01 d0                	add    %edx,%eax
f0108974:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010897a:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0108980:	c1 e9 0c             	shr    $0xc,%ecx
f0108983:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108989:	c1 e1 02             	shl    $0x2,%ecx
f010898c:	01 ca                	add    %ecx,%edx
f010898e:	8b 12                	mov    (%edx),%edx
f0108990:	83 e2 bf             	and    $0xffffffbf,%edx
f0108993:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0108995:	ff 45 c4             	incl   -0x3c(%ebp)
f0108998:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010899e:	8b 50 74             	mov    0x74(%eax),%edx
f01089a1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01089a4:	39 c2                	cmp    %eax,%edx
f01089a6:	0f 87 50 ff ff ff    	ja     f01088fc <env_create+0x596>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01089ac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01089af:	8b 50 08             	mov    0x8(%eax),%edx
f01089b2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089b8:	83 ec 08             	sub    $0x8,%esp
f01089bb:	52                   	push   %edx
f01089bc:	50                   	push   %eax
f01089bd:	e8 3a 18 00 00       	call   f010a1fc <set_environment_entry_point>
f01089c2:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f01089c5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089cb:	c7 80 14 da 01 00 01 	movl   $0x1,0x1da14(%eax)
f01089d2:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01089d5:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f01089dc:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01089df:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01089e6:	e9 9a 05 00 00       	jmp    f0108f85 <env_create+0xc1f>
	{
		struct FrameInfo *pp = NULL;
f01089eb:	c7 85 1c ff ff ff 00 	movl   $0x0,-0xe4(%ebp)
f01089f2:	00 00 00 
		allocate_frame(&pp);
f01089f5:	83 ec 0c             	sub    $0xc,%esp
f01089f8:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01089fe:	50                   	push   %eax
f01089ff:	e8 a6 dd ff ff       	call   f01067aa <allocate_frame>
f0108a04:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0108a07:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0108a0d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a13:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108a16:	6a 06                	push   $0x6
f0108a18:	ff 75 c0             	pushl  -0x40(%ebp)
f0108a1b:	52                   	push   %edx
f0108a1c:	50                   	push   %eax
f0108a1d:	e8 d6 e2 ff ff       	call   f0106cf8 <loadtime_map_frame>
f0108a22:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0108a25:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108a28:	83 ec 04             	sub    $0x4,%esp
f0108a2b:	68 00 10 00 00       	push   $0x1000
f0108a30:	6a 00                	push   $0x0
f0108a32:	50                   	push   %eax
f0108a33:	e8 d5 7b 02 00       	call   f013060d <memset>
f0108a38:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0108a3b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a41:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108a47:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a4d:	83 ec 04             	sub    $0x4,%esp
f0108a50:	ff 75 c0             	pushl  -0x40(%ebp)
f0108a53:	52                   	push   %edx
f0108a54:	50                   	push   %eax
f0108a55:	e8 11 ee ff ff       	call   f010786b <env_page_ws_set_entry>
f0108a5a:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108a5d:	83 ec 0c             	sub    $0xc,%esp
f0108a60:	6a 02                	push   $0x2
f0108a62:	e8 fa 47 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f0108a67:	83 c4 10             	add    $0x10,%esp
f0108a6a:	85 c0                	test   %eax,%eax
f0108a6c:	0f 84 b2 04 00 00    	je     f0108f24 <env_create+0xbbe>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108a72:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108a78:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a7e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108a84:	89 d0                	mov    %edx,%eax
f0108a86:	01 c0                	add    %eax,%eax
f0108a88:	01 d0                	add    %edx,%eax
f0108a8a:	c1 e0 03             	shl    $0x3,%eax
f0108a8d:	83 c0 70             	add    $0x70,%eax
f0108a90:	01 c8                	add    %ecx,%eax
f0108a92:	83 c0 08             	add    $0x8,%eax
f0108a95:	85 c0                	test   %eax,%eax
f0108a97:	75 17                	jne    f0108ab0 <env_create+0x74a>
f0108a99:	83 ec 04             	sub    $0x4,%esp
f0108a9c:	68 dd 59 13 f0       	push   $0xf01359dd
f0108aa1:	68 41 01 00 00       	push   $0x141
f0108aa6:	68 7b 59 13 f0       	push   $0xf013597b
f0108aab:	e8 f6 76 ff ff       	call   f01001a6 <_panic>
f0108ab0:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108ab6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108abc:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ac2:	89 d0                	mov    %edx,%eax
f0108ac4:	01 c0                	add    %eax,%eax
f0108ac6:	01 d0                	add    %edx,%eax
f0108ac8:	c1 e0 03             	shl    $0x3,%eax
f0108acb:	01 c8                	add    %ecx,%eax
f0108acd:	05 88 00 00 00       	add    $0x88,%eax
f0108ad2:	8b 00                	mov    (%eax),%eax
f0108ad4:	85 c0                	test   %eax,%eax
f0108ad6:	74 4d                	je     f0108b25 <env_create+0x7bf>
f0108ad8:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108ade:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ae4:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108aea:	89 d0                	mov    %edx,%eax
f0108aec:	01 c0                	add    %eax,%eax
f0108aee:	01 d0                	add    %edx,%eax
f0108af0:	c1 e0 03             	shl    $0x3,%eax
f0108af3:	01 c8                	add    %ecx,%eax
f0108af5:	05 88 00 00 00       	add    $0x88,%eax
f0108afa:	8b 10                	mov    (%eax),%edx
f0108afc:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108b02:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b08:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108b0e:	89 c8                	mov    %ecx,%eax
f0108b10:	01 c0                	add    %eax,%eax
f0108b12:	01 c8                	add    %ecx,%eax
f0108b14:	c1 e0 03             	shl    $0x3,%eax
f0108b17:	01 d8                	add    %ebx,%eax
f0108b19:	05 8c 00 00 00       	add    $0x8c,%eax
f0108b1e:	8b 00                	mov    (%eax),%eax
f0108b20:	89 42 14             	mov    %eax,0x14(%edx)
f0108b23:	eb 30                	jmp    f0108b55 <env_create+0x7ef>
f0108b25:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108b2b:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108b31:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b37:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108b3d:	89 c8                	mov    %ecx,%eax
f0108b3f:	01 c0                	add    %eax,%eax
f0108b41:	01 c8                	add    %ecx,%eax
f0108b43:	c1 e0 03             	shl    $0x3,%eax
f0108b46:	01 d8                	add    %ebx,%eax
f0108b48:	05 8c 00 00 00       	add    $0x8c,%eax
f0108b4d:	8b 00                	mov    (%eax),%eax
f0108b4f:	89 82 74 ea 01 00    	mov    %eax,0x1ea74(%edx)
f0108b55:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108b5b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b61:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108b67:	89 d0                	mov    %edx,%eax
f0108b69:	01 c0                	add    %eax,%eax
f0108b6b:	01 d0                	add    %edx,%eax
f0108b6d:	c1 e0 03             	shl    $0x3,%eax
f0108b70:	01 c8                	add    %ecx,%eax
f0108b72:	05 8c 00 00 00       	add    $0x8c,%eax
f0108b77:	8b 00                	mov    (%eax),%eax
f0108b79:	85 c0                	test   %eax,%eax
f0108b7b:	74 4d                	je     f0108bca <env_create+0x864>
f0108b7d:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108b83:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b89:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108b8f:	89 d0                	mov    %edx,%eax
f0108b91:	01 c0                	add    %eax,%eax
f0108b93:	01 d0                	add    %edx,%eax
f0108b95:	c1 e0 03             	shl    $0x3,%eax
f0108b98:	01 c8                	add    %ecx,%eax
f0108b9a:	05 8c 00 00 00       	add    $0x8c,%eax
f0108b9f:	8b 10                	mov    (%eax),%edx
f0108ba1:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108ba7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108bad:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108bb3:	89 c8                	mov    %ecx,%eax
f0108bb5:	01 c0                	add    %eax,%eax
f0108bb7:	01 c8                	add    %ecx,%eax
f0108bb9:	c1 e0 03             	shl    $0x3,%eax
f0108bbc:	01 d8                	add    %ebx,%eax
f0108bbe:	05 88 00 00 00       	add    $0x88,%eax
f0108bc3:	8b 00                	mov    (%eax),%eax
f0108bc5:	89 42 10             	mov    %eax,0x10(%edx)
f0108bc8:	eb 30                	jmp    f0108bfa <env_create+0x894>
f0108bca:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108bd0:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108bd6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108bdc:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108be2:	89 c8                	mov    %ecx,%eax
f0108be4:	01 c0                	add    %eax,%eax
f0108be6:	01 c8                	add    %ecx,%eax
f0108be8:	c1 e0 03             	shl    $0x3,%eax
f0108beb:	01 d8                	add    %ebx,%eax
f0108bed:	05 88 00 00 00       	add    $0x88,%eax
f0108bf2:	8b 00                	mov    (%eax),%eax
f0108bf4:	89 82 70 ea 01 00    	mov    %eax,0x1ea70(%edx)
f0108bfa:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c00:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c06:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c0c:	89 d0                	mov    %edx,%eax
f0108c0e:	01 c0                	add    %eax,%eax
f0108c10:	01 d0                	add    %edx,%eax
f0108c12:	c1 e0 03             	shl    $0x3,%eax
f0108c15:	01 c8                	add    %ecx,%eax
f0108c17:	05 88 00 00 00       	add    $0x88,%eax
f0108c1c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c22:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c28:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c2e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c34:	89 d0                	mov    %edx,%eax
f0108c36:	01 c0                	add    %eax,%eax
f0108c38:	01 d0                	add    %edx,%eax
f0108c3a:	c1 e0 03             	shl    $0x3,%eax
f0108c3d:	01 c8                	add    %ecx,%eax
f0108c3f:	05 8c 00 00 00       	add    $0x8c,%eax
f0108c44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c4a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c50:	8b 90 7c ea 01 00    	mov    0x1ea7c(%eax),%edx
f0108c56:	4a                   	dec    %edx
f0108c57:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0108c5d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c63:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108c69:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c6f:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f0108c75:	39 c2                	cmp    %eax,%edx
f0108c77:	0f 83 56 01 00 00    	jae    f0108dd3 <env_create+0xa6d>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108c7d:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c83:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c89:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c8f:	89 d0                	mov    %edx,%eax
f0108c91:	01 c0                	add    %eax,%eax
f0108c93:	01 d0                	add    %edx,%eax
f0108c95:	c1 e0 03             	shl    $0x3,%eax
f0108c98:	83 c0 70             	add    $0x70,%eax
f0108c9b:	01 c8                	add    %ecx,%eax
f0108c9d:	83 c0 08             	add    $0x8,%eax
f0108ca0:	85 c0                	test   %eax,%eax
f0108ca2:	75 17                	jne    f0108cbb <env_create+0x955>
f0108ca4:	83 ec 04             	sub    $0x4,%esp
f0108ca7:	68 fc 59 13 f0       	push   $0xf01359fc
f0108cac:	68 46 01 00 00       	push   $0x146
f0108cb1:	68 7b 59 13 f0       	push   $0xf013597b
f0108cb6:	e8 eb 74 ff ff       	call   f01001a6 <_panic>
f0108cbb:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108cc1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cc7:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ccd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cd3:	8b 98 80 ea 01 00    	mov    0x1ea80(%eax),%ebx
f0108cd9:	89 d0                	mov    %edx,%eax
f0108cdb:	01 c0                	add    %eax,%eax
f0108cdd:	01 d0                	add    %edx,%eax
f0108cdf:	c1 e0 03             	shl    $0x3,%eax
f0108ce2:	01 c8                	add    %ecx,%eax
f0108ce4:	05 88 00 00 00       	add    $0x88,%eax
f0108ce9:	89 18                	mov    %ebx,(%eax)
f0108ceb:	89 d0                	mov    %edx,%eax
f0108ced:	01 c0                	add    %eax,%eax
f0108cef:	01 d0                	add    %edx,%eax
f0108cf1:	c1 e0 03             	shl    $0x3,%eax
f0108cf4:	01 c8                	add    %ecx,%eax
f0108cf6:	05 88 00 00 00       	add    $0x88,%eax
f0108cfb:	8b 00                	mov    (%eax),%eax
f0108cfd:	85 c0                	test   %eax,%eax
f0108cff:	74 34                	je     f0108d35 <env_create+0x9cf>
f0108d01:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d07:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0108d0d:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108d13:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d19:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108d1f:	89 c8                	mov    %ecx,%eax
f0108d21:	01 c0                	add    %eax,%eax
f0108d23:	01 c8                	add    %ecx,%eax
f0108d25:	c1 e0 03             	shl    $0x3,%eax
f0108d28:	83 c0 70             	add    $0x70,%eax
f0108d2b:	01 d8                	add    %ebx,%eax
f0108d2d:	83 c0 08             	add    $0x8,%eax
f0108d30:	89 42 14             	mov    %eax,0x14(%edx)
f0108d33:	eb 2f                	jmp    f0108d64 <env_create+0x9fe>
f0108d35:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108d3b:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108d41:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d47:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108d4d:	89 c8                	mov    %ecx,%eax
f0108d4f:	01 c0                	add    %eax,%eax
f0108d51:	01 c8                	add    %ecx,%eax
f0108d53:	c1 e0 03             	shl    $0x3,%eax
f0108d56:	83 c0 70             	add    $0x70,%eax
f0108d59:	01 d8                	add    %ebx,%eax
f0108d5b:	83 c0 08             	add    $0x8,%eax
f0108d5e:	89 82 84 ea 01 00    	mov    %eax,0x1ea84(%edx)
f0108d64:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108d6a:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108d70:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d76:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108d7c:	89 c8                	mov    %ecx,%eax
f0108d7e:	01 c0                	add    %eax,%eax
f0108d80:	01 c8                	add    %ecx,%eax
f0108d82:	c1 e0 03             	shl    $0x3,%eax
f0108d85:	83 c0 70             	add    $0x70,%eax
f0108d88:	01 d8                	add    %ebx,%eax
f0108d8a:	83 c0 08             	add    $0x8,%eax
f0108d8d:	89 82 80 ea 01 00    	mov    %eax,0x1ea80(%edx)
f0108d93:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108d99:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d9f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108da5:	89 d0                	mov    %edx,%eax
f0108da7:	01 c0                	add    %eax,%eax
f0108da9:	01 d0                	add    %edx,%eax
f0108dab:	c1 e0 03             	shl    $0x3,%eax
f0108dae:	01 c8                	add    %ecx,%eax
f0108db0:	05 8c 00 00 00       	add    $0x8c,%eax
f0108db5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108dbb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108dc1:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108dc7:	42                   	inc    %edx
f0108dc8:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0108dce:	e9 51 01 00 00       	jmp    f0108f24 <env_create+0xbbe>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108dd3:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108dd9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ddf:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108de5:	89 d0                	mov    %edx,%eax
f0108de7:	01 c0                	add    %eax,%eax
f0108de9:	01 d0                	add    %edx,%eax
f0108deb:	c1 e0 03             	shl    $0x3,%eax
f0108dee:	83 c0 70             	add    $0x70,%eax
f0108df1:	01 c8                	add    %ecx,%eax
f0108df3:	83 c0 08             	add    $0x8,%eax
f0108df6:	85 c0                	test   %eax,%eax
f0108df8:	75 17                	jne    f0108e11 <env_create+0xaab>
f0108dfa:	83 ec 04             	sub    $0x4,%esp
f0108dfd:	68 fc 59 13 f0       	push   $0xf01359fc
f0108e02:	68 4a 01 00 00       	push   $0x14a
f0108e07:	68 7b 59 13 f0       	push   $0xf013597b
f0108e0c:	e8 95 73 ff ff       	call   f01001a6 <_panic>
f0108e11:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108e17:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e1d:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108e23:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e29:	8b 98 90 ea 01 00    	mov    0x1ea90(%eax),%ebx
f0108e2f:	89 d0                	mov    %edx,%eax
f0108e31:	01 c0                	add    %eax,%eax
f0108e33:	01 d0                	add    %edx,%eax
f0108e35:	c1 e0 03             	shl    $0x3,%eax
f0108e38:	01 c8                	add    %ecx,%eax
f0108e3a:	05 88 00 00 00       	add    $0x88,%eax
f0108e3f:	89 18                	mov    %ebx,(%eax)
f0108e41:	89 d0                	mov    %edx,%eax
f0108e43:	01 c0                	add    %eax,%eax
f0108e45:	01 d0                	add    %edx,%eax
f0108e47:	c1 e0 03             	shl    $0x3,%eax
f0108e4a:	01 c8                	add    %ecx,%eax
f0108e4c:	05 88 00 00 00       	add    $0x88,%eax
f0108e51:	8b 00                	mov    (%eax),%eax
f0108e53:	85 c0                	test   %eax,%eax
f0108e55:	74 34                	je     f0108e8b <env_create+0xb25>
f0108e57:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e5d:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0108e63:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108e69:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e6f:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108e75:	89 c8                	mov    %ecx,%eax
f0108e77:	01 c0                	add    %eax,%eax
f0108e79:	01 c8                	add    %ecx,%eax
f0108e7b:	c1 e0 03             	shl    $0x3,%eax
f0108e7e:	83 c0 70             	add    $0x70,%eax
f0108e81:	01 d8                	add    %ebx,%eax
f0108e83:	83 c0 08             	add    $0x8,%eax
f0108e86:	89 42 14             	mov    %eax,0x14(%edx)
f0108e89:	eb 2f                	jmp    f0108eba <env_create+0xb54>
f0108e8b:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108e91:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108e97:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e9d:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108ea3:	89 c8                	mov    %ecx,%eax
f0108ea5:	01 c0                	add    %eax,%eax
f0108ea7:	01 c8                	add    %ecx,%eax
f0108ea9:	c1 e0 03             	shl    $0x3,%eax
f0108eac:	83 c0 70             	add    $0x70,%eax
f0108eaf:	01 d8                	add    %ebx,%eax
f0108eb1:	83 c0 08             	add    $0x8,%eax
f0108eb4:	89 82 94 ea 01 00    	mov    %eax,0x1ea94(%edx)
f0108eba:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108ec0:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108ec6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ecc:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108ed2:	89 c8                	mov    %ecx,%eax
f0108ed4:	01 c0                	add    %eax,%eax
f0108ed6:	01 c8                	add    %ecx,%eax
f0108ed8:	c1 e0 03             	shl    $0x3,%eax
f0108edb:	83 c0 70             	add    $0x70,%eax
f0108ede:	01 d8                	add    %ebx,%eax
f0108ee0:	83 c0 08             	add    $0x8,%eax
f0108ee3:	89 82 90 ea 01 00    	mov    %eax,0x1ea90(%edx)
f0108ee9:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108eef:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ef5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108efb:	89 d0                	mov    %edx,%eax
f0108efd:	01 c0                	add    %eax,%eax
f0108eff:	01 d0                	add    %edx,%eax
f0108f01:	c1 e0 03             	shl    $0x3,%eax
f0108f04:	01 c8                	add    %ecx,%eax
f0108f06:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f0b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108f11:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f17:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f0108f1d:	42                   	inc    %edx
f0108f1e:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
				}
			}
			e->page_last_WS_index ++;
f0108f24:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f2a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108f30:	42                   	inc    %edx
f0108f31:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0108f37:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108f3d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f43:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0108f49:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108f4f:	8b 5a 74             	mov    0x74(%edx),%ebx
f0108f52:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f57:	f7 f3                	div    %ebx
f0108f59:	89 d0                	mov    %edx,%eax
f0108f5b:	89 81 e8 d9 01 00    	mov    %eax,0x1d9e8(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0108f61:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f67:	83 ec 04             	sub    $0x4,%esp
f0108f6a:	6a 01                	push   $0x1
f0108f6c:	ff 75 c0             	pushl  -0x40(%ebp)
f0108f6f:	50                   	push   %eax
f0108f70:	e8 76 a4 ff ff       	call   f01033eb <pf_add_empty_env_page>
f0108f75:	83 c4 10             	add    $0x10,%esp
f0108f78:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0108f7e:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0108f85:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108f88:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0108f8e:	0f 83 57 fa ff ff    	jae    f01089eb <env_create+0x685>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108f94:	83 ec 0c             	sub    $0xc,%esp
f0108f97:	6a 02                	push   $0x2
f0108f99:	e8 c3 42 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f0108f9e:	83 c4 10             	add    $0x10,%esp
f0108fa1:	85 c0                	test   %eax,%eax
f0108fa3:	74 72                	je     f0109017 <env_create+0xcb1>
	{
		struct WorkingSetElement * elm = NULL;
f0108fa5:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0108fac:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fb2:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f0108fb8:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0108fbb:	eb 2b                	jmp    f0108fe8 <env_create+0xc82>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0108fbd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108fc0:	8b 10                	mov    (%eax),%edx
f0108fc2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fc8:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108fcb:	6a 01                	push   $0x1
f0108fcd:	6a 00                	push   $0x0
f0108fcf:	52                   	push   %edx
f0108fd0:	50                   	push   %eax
f0108fd1:	e8 79 e5 ff ff       	call   f010754f <pt_set_page_permissions>
f0108fd6:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0108fd9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fdf:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0108fe5:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0108fe8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fee:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0108ff2:	74 08                	je     f0108ffc <env_create+0xc96>
f0108ff4:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0108ff7:	8b 52 10             	mov    0x10(%edx),%edx
f0108ffa:	eb 05                	jmp    f0109001 <env_create+0xc9b>
f0108ffc:	ba 00 00 00 00       	mov    $0x0,%edx
f0109001:	89 90 98 ea 01 00    	mov    %edx,0x1ea98(%eax)
f0109007:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010900d:	85 c0                	test   %eax,%eax
f010900f:	75 ac                	jne    f0108fbd <env_create+0xc57>
f0109011:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109015:	75 a6                	jne    f0108fbd <env_create+0xc57>
f0109017:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010901a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010901d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0109020:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109023:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
}
f0109029:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010902c:	5b                   	pop    %ebx
f010902d:	5e                   	pop    %esi
f010902e:	5f                   	pop    %edi
f010902f:	5d                   	pop    %ebp
f0109030:	c3                   	ret    

f0109031 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109031:	55                   	push   %ebp
f0109032:	89 e5                	mov    %esp,%ebp
f0109034:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109037:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010903c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010903f:	74 25                	je     f0109066 <env_run+0x35>
	{
		curenv = e ;
f0109041:	8b 45 08             	mov    0x8(%ebp),%eax
f0109044:	a3 34 87 65 f0       	mov    %eax,0xf0658734
		curenv->env_runs++ ;
f0109049:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010904e:	8b 50 58             	mov    0x58(%eax),%edx
f0109051:	42                   	inc    %edx
f0109052:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109055:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010905a:	8b 40 60             	mov    0x60(%eax),%eax
f010905d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109060:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109063:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109066:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010906b:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109072:	e8 62 b0 ff ff       	call   f01040d9 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109077:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010907c:	83 ec 0c             	sub    $0xc,%esp
f010907f:	50                   	push   %eax
f0109080:	e8 11 01 00 00       	call   f0109196 <env_pop_tf>

f0109085 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109085:	55                   	push   %ebp
f0109086:	89 e5                	mov    %esp,%ebp
f0109088:	83 ec 08             	sub    $0x8,%esp
	unshare_pws_at_user_space(e);
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f010908b:	83 ec 04             	sub    $0x4,%esp
f010908e:	68 20 5a 13 f0       	push   $0xf0135a20
f0109093:	68 9d 01 00 00       	push   $0x19d
f0109098:	68 7b 59 13 f0       	push   $0xf013597b
f010909d:	e8 04 71 ff ff       	call   f01001a6 <_panic>

f01090a2 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01090a2:	55                   	push   %ebp
f01090a3:	89 e5                	mov    %esp,%ebp
f01090a5:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01090a8:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01090ad:	8b 40 4c             	mov    0x4c(%eax),%eax
f01090b0:	83 ec 0c             	sub    $0xc,%esp
f01090b3:	50                   	push   %eax
f01090b4:	e8 5c c0 ff ff       	call   f0105115 <sched_exit_env>
f01090b9:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01090bc:	e8 2a b5 ff ff       	call   f01045eb <fos_scheduler>

f01090c1 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01090c1:	55                   	push   %ebp
f01090c2:	89 e5                	mov    %esp,%ebp
f01090c4:	53                   	push   %ebx
f01090c5:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01090c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01090cc:	75 15                	jne    f01090e3 <envid2env+0x22>
		*env_store = curenv;
f01090ce:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f01090d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01090d7:	89 10                	mov    %edx,(%eax)
		return 0;
f01090d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01090de:	e9 ae 00 00 00       	jmp    f0109191 <envid2env+0xd0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01090e3:	8b 1d 30 87 65 f0    	mov    0xf0658730,%ebx
f01090e9:	83 ec 0c             	sub    $0xc,%esp
f01090ec:	6a 08                	push   $0x8
f01090ee:	e8 b7 60 02 00       	call   f012f1aa <nearest_pow2_ceil>
f01090f3:	83 c4 10             	add    $0x10,%esp
f01090f6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01090f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01090fc:	21 c2                	and    %eax,%edx
f01090fe:	89 d0                	mov    %edx,%eax
f0109100:	01 c0                	add    %eax,%eax
f0109102:	01 d0                	add    %edx,%eax
f0109104:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f010910b:	01 c8                	add    %ecx,%eax
f010910d:	c1 e0 02             	shl    $0x2,%eax
f0109110:	01 d0                	add    %edx,%eax
f0109112:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109119:	01 c8                	add    %ecx,%eax
f010911b:	c1 e0 02             	shl    $0x2,%eax
f010911e:	01 d0                	add    %edx,%eax
f0109120:	c1 e0 02             	shl    $0x2,%eax
f0109123:	01 d0                	add    %edx,%eax
f0109125:	c1 e0 03             	shl    $0x3,%eax
f0109128:	01 d8                	add    %ebx,%eax
f010912a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010912d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109130:	8b 40 54             	mov    0x54(%eax),%eax
f0109133:	85 c0                	test   %eax,%eax
f0109135:	74 0b                	je     f0109142 <envid2env+0x81>
f0109137:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010913a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010913d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109140:	74 10                	je     f0109152 <envid2env+0x91>
		*env_store = 0;
f0109142:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109145:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010914b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109150:	eb 3f                	jmp    f0109191 <envid2env+0xd0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109152:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109156:	74 2c                	je     f0109184 <envid2env+0xc3>
f0109158:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010915d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109160:	74 22                	je     f0109184 <envid2env+0xc3>
f0109162:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109165:	8b 50 50             	mov    0x50(%eax),%edx
f0109168:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010916d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109170:	39 c2                	cmp    %eax,%edx
f0109172:	74 10                	je     f0109184 <envid2env+0xc3>
		*env_store = 0;
f0109174:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109177:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010917d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109182:	eb 0d                	jmp    f0109191 <envid2env+0xd0>
	}

	*env_store = e;
f0109184:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109187:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010918a:	89 10                	mov    %edx,(%eax)
	return 0;
f010918c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109191:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109194:	c9                   	leave  
f0109195:	c3                   	ret    

f0109196 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109196:	55                   	push   %ebp
f0109197:	89 e5                	mov    %esp,%ebp
f0109199:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010919c:	8b 65 08             	mov    0x8(%ebp),%esp
f010919f:	61                   	popa   
f01091a0:	07                   	pop    %es
f01091a1:	1f                   	pop    %ds
f01091a2:	83 c4 08             	add    $0x8,%esp
f01091a5:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f01091a6:	83 ec 04             	sub    $0x4,%esp
f01091a9:	68 47 5a 13 f0       	push   $0xf0135a47
f01091ae:	68 fc 01 00 00       	push   $0x1fc
f01091b3:	68 7b 59 13 f0       	push   $0xf013597b
f01091b8:	e8 e9 6f ff ff       	call   f01001a6 <_panic>

f01091bd <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01091bd:	55                   	push   %ebp
f01091be:	89 e5                	mov    %esp,%ebp
f01091c0:	56                   	push   %esi
f01091c1:	53                   	push   %ebx
f01091c2:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f01091c5:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f01091cc:	e9 0b 02 00 00       	jmp    f01093dc <env_init+0x21f>
	{
		envs[iEnv].env_status = ENV_FREE;
f01091d1:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f01091d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01091da:	89 d0                	mov    %edx,%eax
f01091dc:	01 c0                	add    %eax,%eax
f01091de:	01 d0                	add    %edx,%eax
f01091e0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01091e7:	01 d8                	add    %ebx,%eax
f01091e9:	c1 e0 02             	shl    $0x2,%eax
f01091ec:	01 d0                	add    %edx,%eax
f01091ee:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01091f5:	01 d8                	add    %ebx,%eax
f01091f7:	c1 e0 02             	shl    $0x2,%eax
f01091fa:	01 d0                	add    %edx,%eax
f01091fc:	c1 e0 02             	shl    $0x2,%eax
f01091ff:	01 d0                	add    %edx,%eax
f0109201:	c1 e0 03             	shl    $0x3,%eax
f0109204:	01 c8                	add    %ecx,%eax
f0109206:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010920d:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f0109213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109216:	89 d0                	mov    %edx,%eax
f0109218:	01 c0                	add    %eax,%eax
f010921a:	01 d0                	add    %edx,%eax
f010921c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109223:	01 d8                	add    %ebx,%eax
f0109225:	c1 e0 02             	shl    $0x2,%eax
f0109228:	01 d0                	add    %edx,%eax
f010922a:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109231:	01 d8                	add    %ebx,%eax
f0109233:	c1 e0 02             	shl    $0x2,%eax
f0109236:	01 d0                	add    %edx,%eax
f0109238:	c1 e0 02             	shl    $0x2,%eax
f010923b:	01 d0                	add    %edx,%eax
f010923d:	c1 e0 03             	shl    $0x3,%eax
f0109240:	01 c8                	add    %ecx,%eax
f0109242:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109249:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f010924f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109252:	89 d0                	mov    %edx,%eax
f0109254:	01 c0                	add    %eax,%eax
f0109256:	01 d0                	add    %edx,%eax
f0109258:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010925f:	01 d8                	add    %ebx,%eax
f0109261:	c1 e0 02             	shl    $0x2,%eax
f0109264:	01 d0                	add    %edx,%eax
f0109266:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010926d:	01 d8                	add    %ebx,%eax
f010926f:	c1 e0 02             	shl    $0x2,%eax
f0109272:	01 d0                	add    %edx,%eax
f0109274:	c1 e0 02             	shl    $0x2,%eax
f0109277:	01 d0                	add    %edx,%eax
f0109279:	c1 e0 03             	shl    $0x3,%eax
f010927c:	01 c8                	add    %ecx,%eax
f010927e:	85 c0                	test   %eax,%eax
f0109280:	75 17                	jne    f0109299 <env_init+0xdc>
f0109282:	83 ec 04             	sub    $0x4,%esp
f0109285:	68 fc 59 13 f0       	push   $0xf01359fc
f010928a:	68 18 02 00 00       	push   $0x218
f010928f:	68 7b 59 13 f0       	push   $0xf013597b
f0109294:	e8 0d 6f ff ff       	call   f01001a6 <_panic>
f0109299:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f010929f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01092a2:	89 d0                	mov    %edx,%eax
f01092a4:	01 c0                	add    %eax,%eax
f01092a6:	01 d0                	add    %edx,%eax
f01092a8:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01092af:	01 d8                	add    %ebx,%eax
f01092b1:	c1 e0 02             	shl    $0x2,%eax
f01092b4:	01 d0                	add    %edx,%eax
f01092b6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01092bd:	01 d8                	add    %ebx,%eax
f01092bf:	c1 e0 02             	shl    $0x2,%eax
f01092c2:	01 d0                	add    %edx,%eax
f01092c4:	c1 e0 02             	shl    $0x2,%eax
f01092c7:	01 d0                	add    %edx,%eax
f01092c9:	c1 e0 03             	shl    $0x3,%eax
f01092cc:	01 c8                	add    %ecx,%eax
f01092ce:	8b 15 38 87 65 f0    	mov    0xf0658738,%edx
f01092d4:	89 50 44             	mov    %edx,0x44(%eax)
f01092d7:	8b 40 44             	mov    0x44(%eax),%eax
f01092da:	85 c0                	test   %eax,%eax
f01092dc:	74 40                	je     f010931e <env_init+0x161>
f01092de:	8b 0d 38 87 65 f0    	mov    0xf0658738,%ecx
f01092e4:	8b 1d 30 87 65 f0    	mov    0xf0658730,%ebx
f01092ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01092ed:	89 d0                	mov    %edx,%eax
f01092ef:	01 c0                	add    %eax,%eax
f01092f1:	01 d0                	add    %edx,%eax
f01092f3:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01092fa:	01 f0                	add    %esi,%eax
f01092fc:	c1 e0 02             	shl    $0x2,%eax
f01092ff:	01 d0                	add    %edx,%eax
f0109301:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0109308:	01 f0                	add    %esi,%eax
f010930a:	c1 e0 02             	shl    $0x2,%eax
f010930d:	01 d0                	add    %edx,%eax
f010930f:	c1 e0 02             	shl    $0x2,%eax
f0109312:	01 d0                	add    %edx,%eax
f0109314:	c1 e0 03             	shl    $0x3,%eax
f0109317:	01 d8                	add    %ebx,%eax
f0109319:	89 41 48             	mov    %eax,0x48(%ecx)
f010931c:	eb 3a                	jmp    f0109358 <env_init+0x19b>
f010931e:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f0109324:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109327:	89 d0                	mov    %edx,%eax
f0109329:	01 c0                	add    %eax,%eax
f010932b:	01 d0                	add    %edx,%eax
f010932d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109334:	01 d8                	add    %ebx,%eax
f0109336:	c1 e0 02             	shl    $0x2,%eax
f0109339:	01 d0                	add    %edx,%eax
f010933b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109342:	01 d8                	add    %ebx,%eax
f0109344:	c1 e0 02             	shl    $0x2,%eax
f0109347:	01 d0                	add    %edx,%eax
f0109349:	c1 e0 02             	shl    $0x2,%eax
f010934c:	01 d0                	add    %edx,%eax
f010934e:	c1 e0 03             	shl    $0x3,%eax
f0109351:	01 c8                	add    %ecx,%eax
f0109353:	a3 3c 87 65 f0       	mov    %eax,0xf065873c
f0109358:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f010935e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109361:	89 d0                	mov    %edx,%eax
f0109363:	01 c0                	add    %eax,%eax
f0109365:	01 d0                	add    %edx,%eax
f0109367:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010936e:	01 d8                	add    %ebx,%eax
f0109370:	c1 e0 02             	shl    $0x2,%eax
f0109373:	01 d0                	add    %edx,%eax
f0109375:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010937c:	01 d8                	add    %ebx,%eax
f010937e:	c1 e0 02             	shl    $0x2,%eax
f0109381:	01 d0                	add    %edx,%eax
f0109383:	c1 e0 02             	shl    $0x2,%eax
f0109386:	01 d0                	add    %edx,%eax
f0109388:	c1 e0 03             	shl    $0x3,%eax
f010938b:	01 c8                	add    %ecx,%eax
f010938d:	a3 38 87 65 f0       	mov    %eax,0xf0658738
f0109392:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f0109398:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010939b:	89 d0                	mov    %edx,%eax
f010939d:	01 c0                	add    %eax,%eax
f010939f:	01 d0                	add    %edx,%eax
f01093a1:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01093a8:	01 d8                	add    %ebx,%eax
f01093aa:	c1 e0 02             	shl    $0x2,%eax
f01093ad:	01 d0                	add    %edx,%eax
f01093af:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01093b6:	01 d8                	add    %ebx,%eax
f01093b8:	c1 e0 02             	shl    $0x2,%eax
f01093bb:	01 d0                	add    %edx,%eax
f01093bd:	c1 e0 02             	shl    $0x2,%eax
f01093c0:	01 d0                	add    %edx,%eax
f01093c2:	c1 e0 03             	shl    $0x3,%eax
f01093c5:	01 c8                	add    %ecx,%eax
f01093c7:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01093ce:	a1 44 87 65 f0       	mov    0xf0658744,%eax
f01093d3:	40                   	inc    %eax
f01093d4:	a3 44 87 65 f0       	mov    %eax,0xf0658744
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01093d9:	ff 4d f4             	decl   -0xc(%ebp)
f01093dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01093e0:	0f 89 eb fd ff ff    	jns    f01091d1 <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01093e6:	90                   	nop
f01093e7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01093ea:	5b                   	pop    %ebx
f01093eb:	5e                   	pop    %esi
f01093ec:	5d                   	pop    %ebp
f01093ed:	c3                   	ret    

f01093ee <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f01093ee:	55                   	push   %ebp
f01093ef:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f01093f1:	8b 15 38 87 65 f0    	mov    0xf0658738,%edx
f01093f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01093fa:	89 10                	mov    %edx,(%eax)
f01093fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01093ff:	8b 00                	mov    (%eax),%eax
f0109401:	85 c0                	test   %eax,%eax
f0109403:	75 07                	jne    f010940c <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109405:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010940a:	eb 11                	jmp    f010941d <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010940c:	8b 45 08             	mov    0x8(%ebp),%eax
f010940f:	8b 00                	mov    (%eax),%eax
f0109411:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109418:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010941d:	5d                   	pop    %ebp
f010941e:	c3                   	ret    

f010941f <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010941f:	55                   	push   %ebp
f0109420:	89 e5                	mov    %esp,%ebp
f0109422:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109425:	83 ec 04             	sub    $0x4,%esp
f0109428:	68 a8 ea 01 00       	push   $0x1eaa8
f010942d:	6a 00                	push   $0x0
f010942f:	ff 75 08             	pushl  0x8(%ebp)
f0109432:	e8 d6 71 02 00       	call   f013060d <memset>
f0109437:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010943a:	8b 45 08             	mov    0x8(%ebp),%eax
f010943d:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109444:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109448:	75 17                	jne    f0109461 <free_environment+0x42>
f010944a:	83 ec 04             	sub    $0x4,%esp
f010944d:	68 fc 59 13 f0       	push   $0xf01359fc
f0109452:	68 35 02 00 00       	push   $0x235
f0109457:	68 7b 59 13 f0       	push   $0xf013597b
f010945c:	e8 45 6d ff ff       	call   f01001a6 <_panic>
f0109461:	8b 15 38 87 65 f0    	mov    0xf0658738,%edx
f0109467:	8b 45 08             	mov    0x8(%ebp),%eax
f010946a:	89 50 44             	mov    %edx,0x44(%eax)
f010946d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109470:	8b 40 44             	mov    0x44(%eax),%eax
f0109473:	85 c0                	test   %eax,%eax
f0109475:	74 0d                	je     f0109484 <free_environment+0x65>
f0109477:	a1 38 87 65 f0       	mov    0xf0658738,%eax
f010947c:	8b 55 08             	mov    0x8(%ebp),%edx
f010947f:	89 50 48             	mov    %edx,0x48(%eax)
f0109482:	eb 08                	jmp    f010948c <free_environment+0x6d>
f0109484:	8b 45 08             	mov    0x8(%ebp),%eax
f0109487:	a3 3c 87 65 f0       	mov    %eax,0xf065873c
f010948c:	8b 45 08             	mov    0x8(%ebp),%eax
f010948f:	a3 38 87 65 f0       	mov    %eax,0xf0658738
f0109494:	8b 45 08             	mov    0x8(%ebp),%eax
f0109497:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010949e:	a1 44 87 65 f0       	mov    0xf0658744,%eax
f01094a3:	40                   	inc    %eax
f01094a4:	a3 44 87 65 f0       	mov    %eax,0xf0658744
}
f01094a9:	90                   	nop
f01094aa:	c9                   	leave  
f01094ab:	c3                   	ret    

f01094ac <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f01094ac:	55                   	push   %ebp
f01094ad:	89 e5                	mov    %esp,%ebp
f01094af:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f01094b2:	83 ec 04             	sub    $0x4,%esp
f01094b5:	68 54 5a 13 f0       	push   $0xf0135a54
f01094ba:	68 3f 02 00 00       	push   $0x23f
f01094bf:	68 7b 59 13 f0       	push   $0xf013597b
f01094c4:	e8 dd 6c ff ff       	call   f01001a6 <_panic>

f01094c9 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f01094c9:	55                   	push   %ebp
f01094ca:	89 e5                	mov    %esp,%ebp
f01094cc:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f01094cf:	83 ec 04             	sub    $0x4,%esp
f01094d2:	68 88 5a 13 f0       	push   $0xf0135a88
f01094d7:	68 4b 02 00 00       	push   $0x24b
f01094dc:	68 7b 59 13 f0       	push   $0xf013597b
f01094e1:	e8 c0 6c ff ff       	call   f01001a6 <_panic>

f01094e6 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01094e6:	55                   	push   %ebp
f01094e7:	89 e5                	mov    %esp,%ebp
f01094e9:	53                   	push   %ebx
f01094ea:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f01094ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01094f0:	8b 40 0c             	mov    0xc(%eax),%eax
f01094f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f01094f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01094f9:	8b 40 08             	mov    0x8(%eax),%eax
f01094fc:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f01094ff:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109506:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109509:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010950c:	01 c2                	add    %eax,%edx
f010950e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109511:	01 d0                	add    %edx,%eax
f0109513:	48                   	dec    %eax
f0109514:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109517:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010951a:	ba 00 00 00 00       	mov    $0x0,%edx
f010951f:	f7 75 dc             	divl   -0x24(%ebp)
f0109522:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109525:	29 d0                	sub    %edx,%eax
f0109527:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010952a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010952d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109530:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109533:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109538:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010953b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109542:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109549:	8b 45 10             	mov    0x10(%ebp),%eax
f010954c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109552:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109559:	0f 85 12 06 00 00    	jne    f0109b71 <program_segment_alloc_map_copy_workingset+0x68b>
f010955f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109562:	05 18 da 01 00       	add    $0x1da18,%eax
f0109567:	83 ec 08             	sub    $0x8,%esp
f010956a:	68 bc 5a 13 f0       	push   $0xf0135abc
f010956f:	50                   	push   %eax
f0109570:	e8 b6 6f 02 00       	call   f013052b <strcmp>
f0109575:	83 c4 10             	add    $0x10,%esp
f0109578:	85 c0                	test   %eax,%eax
f010957a:	0f 84 f1 05 00 00    	je     f0109b71 <program_segment_alloc_map_copy_workingset+0x68b>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109580:	8b 45 14             	mov    0x14(%ebp),%eax
f0109583:	83 f8 06             	cmp    $0x6,%eax
f0109586:	76 05                	jbe    f010958d <program_segment_alloc_map_copy_workingset+0xa7>
f0109588:	b8 06 00 00 00       	mov    $0x6,%eax
f010958d:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109590:	e9 dc 05 00 00       	jmp    f0109b71 <program_segment_alloc_map_copy_workingset+0x68b>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109595:	83 ec 0c             	sub    $0xc,%esp
f0109598:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010959b:	50                   	push   %eax
f010959c:	e8 09 d2 ff ff       	call   f01067aa <allocate_frame>
f01095a1:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f01095a4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01095a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01095aa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01095ad:	6a 06                	push   $0x6
f01095af:	ff 75 f4             	pushl  -0xc(%ebp)
f01095b2:	52                   	push   %edx
f01095b3:	50                   	push   %eax
f01095b4:	e8 3f d7 ff ff       	call   f0106cf8 <loadtime_map_frame>
f01095b9:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f01095bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01095bf:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01095c5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095c8:	89 d0                	mov    %edx,%eax
f01095ca:	01 c0                	add    %eax,%eax
f01095cc:	01 d0                	add    %edx,%eax
f01095ce:	c1 e0 03             	shl    $0x3,%eax
f01095d1:	01 c8                	add    %ecx,%eax
f01095d3:	8d 50 78             	lea    0x78(%eax),%edx
f01095d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01095d9:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f01095db:	8b 45 08             	mov    0x8(%ebp),%eax
f01095de:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01095e4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095e7:	89 d0                	mov    %edx,%eax
f01095e9:	01 c0                	add    %eax,%eax
f01095eb:	01 d0                	add    %edx,%eax
f01095ed:	c1 e0 03             	shl    $0x3,%eax
f01095f0:	01 c8                	add    %ecx,%eax
f01095f2:	83 c0 7c             	add    $0x7c,%eax
f01095f5:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f01095f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01095fb:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109601:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109604:	89 d0                	mov    %edx,%eax
f0109606:	01 c0                	add    %eax,%eax
f0109608:	01 d0                	add    %edx,%eax
f010960a:	c1 e0 03             	shl    $0x3,%eax
f010960d:	01 c8                	add    %ecx,%eax
f010960f:	83 e8 80             	sub    $0xffffff80,%eax
f0109612:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109618:	83 ec 0c             	sub    $0xc,%esp
f010961b:	6a 02                	push   $0x2
f010961d:	e8 3f 3c 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f0109622:	83 c4 10             	add    $0x10,%esp
f0109625:	85 c0                	test   %eax,%eax
f0109627:	0f 84 11 04 00 00    	je     f0109a3e <program_segment_alloc_map_copy_workingset+0x558>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010962d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109630:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109636:	89 d0                	mov    %edx,%eax
f0109638:	01 c0                	add    %eax,%eax
f010963a:	01 d0                	add    %edx,%eax
f010963c:	c1 e0 03             	shl    $0x3,%eax
f010963f:	8d 50 70             	lea    0x70(%eax),%edx
f0109642:	8b 45 08             	mov    0x8(%ebp),%eax
f0109645:	01 d0                	add    %edx,%eax
f0109647:	83 c0 08             	add    $0x8,%eax
f010964a:	85 c0                	test   %eax,%eax
f010964c:	75 17                	jne    f0109665 <program_segment_alloc_map_copy_workingset+0x17f>
f010964e:	83 ec 04             	sub    $0x4,%esp
f0109651:	68 dd 59 13 f0       	push   $0xf01359dd
f0109656:	68 7d 02 00 00       	push   $0x27d
f010965b:	68 7b 59 13 f0       	push   $0xf013597b
f0109660:	e8 41 6b ff ff       	call   f01001a6 <_panic>
f0109665:	8b 45 08             	mov    0x8(%ebp),%eax
f0109668:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010966e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109671:	89 d0                	mov    %edx,%eax
f0109673:	01 c0                	add    %eax,%eax
f0109675:	01 d0                	add    %edx,%eax
f0109677:	c1 e0 03             	shl    $0x3,%eax
f010967a:	01 c8                	add    %ecx,%eax
f010967c:	05 88 00 00 00       	add    $0x88,%eax
f0109681:	8b 00                	mov    (%eax),%eax
f0109683:	85 c0                	test   %eax,%eax
f0109685:	74 41                	je     f01096c8 <program_segment_alloc_map_copy_workingset+0x1e2>
f0109687:	8b 45 08             	mov    0x8(%ebp),%eax
f010968a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109690:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109693:	89 d0                	mov    %edx,%eax
f0109695:	01 c0                	add    %eax,%eax
f0109697:	01 d0                	add    %edx,%eax
f0109699:	c1 e0 03             	shl    $0x3,%eax
f010969c:	01 c8                	add    %ecx,%eax
f010969e:	05 88 00 00 00       	add    $0x88,%eax
f01096a3:	8b 10                	mov    (%eax),%edx
f01096a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01096a8:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01096ae:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01096b1:	89 c8                	mov    %ecx,%eax
f01096b3:	01 c0                	add    %eax,%eax
f01096b5:	01 c8                	add    %ecx,%eax
f01096b7:	c1 e0 03             	shl    $0x3,%eax
f01096ba:	01 d8                	add    %ebx,%eax
f01096bc:	05 8c 00 00 00       	add    $0x8c,%eax
f01096c1:	8b 00                	mov    (%eax),%eax
f01096c3:	89 42 14             	mov    %eax,0x14(%edx)
f01096c6:	eb 27                	jmp    f01096ef <program_segment_alloc_map_copy_workingset+0x209>
f01096c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01096cb:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01096d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01096d4:	89 d0                	mov    %edx,%eax
f01096d6:	01 c0                	add    %eax,%eax
f01096d8:	01 d0                	add    %edx,%eax
f01096da:	c1 e0 03             	shl    $0x3,%eax
f01096dd:	01 c8                	add    %ecx,%eax
f01096df:	05 8c 00 00 00       	add    $0x8c,%eax
f01096e4:	8b 10                	mov    (%eax),%edx
f01096e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01096e9:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f01096ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01096f2:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01096f8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01096fb:	89 d0                	mov    %edx,%eax
f01096fd:	01 c0                	add    %eax,%eax
f01096ff:	01 d0                	add    %edx,%eax
f0109701:	c1 e0 03             	shl    $0x3,%eax
f0109704:	01 c8                	add    %ecx,%eax
f0109706:	05 8c 00 00 00       	add    $0x8c,%eax
f010970b:	8b 00                	mov    (%eax),%eax
f010970d:	85 c0                	test   %eax,%eax
f010970f:	74 41                	je     f0109752 <program_segment_alloc_map_copy_workingset+0x26c>
f0109711:	8b 45 08             	mov    0x8(%ebp),%eax
f0109714:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010971a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010971d:	89 d0                	mov    %edx,%eax
f010971f:	01 c0                	add    %eax,%eax
f0109721:	01 d0                	add    %edx,%eax
f0109723:	c1 e0 03             	shl    $0x3,%eax
f0109726:	01 c8                	add    %ecx,%eax
f0109728:	05 8c 00 00 00       	add    $0x8c,%eax
f010972d:	8b 10                	mov    (%eax),%edx
f010972f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109732:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109738:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010973b:	89 c8                	mov    %ecx,%eax
f010973d:	01 c0                	add    %eax,%eax
f010973f:	01 c8                	add    %ecx,%eax
f0109741:	c1 e0 03             	shl    $0x3,%eax
f0109744:	01 d8                	add    %ebx,%eax
f0109746:	05 88 00 00 00       	add    $0x88,%eax
f010974b:	8b 00                	mov    (%eax),%eax
f010974d:	89 42 10             	mov    %eax,0x10(%edx)
f0109750:	eb 27                	jmp    f0109779 <program_segment_alloc_map_copy_workingset+0x293>
f0109752:	8b 45 08             	mov    0x8(%ebp),%eax
f0109755:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010975b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010975e:	89 d0                	mov    %edx,%eax
f0109760:	01 c0                	add    %eax,%eax
f0109762:	01 d0                	add    %edx,%eax
f0109764:	c1 e0 03             	shl    $0x3,%eax
f0109767:	01 c8                	add    %ecx,%eax
f0109769:	05 88 00 00 00       	add    $0x88,%eax
f010976e:	8b 10                	mov    (%eax),%edx
f0109770:	8b 45 08             	mov    0x8(%ebp),%eax
f0109773:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109779:	8b 45 08             	mov    0x8(%ebp),%eax
f010977c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109782:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109785:	89 d0                	mov    %edx,%eax
f0109787:	01 c0                	add    %eax,%eax
f0109789:	01 d0                	add    %edx,%eax
f010978b:	c1 e0 03             	shl    $0x3,%eax
f010978e:	01 c8                	add    %ecx,%eax
f0109790:	05 88 00 00 00       	add    $0x88,%eax
f0109795:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010979b:	8b 45 08             	mov    0x8(%ebp),%eax
f010979e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01097a4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097a7:	89 d0                	mov    %edx,%eax
f01097a9:	01 c0                	add    %eax,%eax
f01097ab:	01 d0                	add    %edx,%eax
f01097ad:	c1 e0 03             	shl    $0x3,%eax
f01097b0:	01 c8                	add    %ecx,%eax
f01097b2:	05 8c 00 00 00       	add    $0x8c,%eax
f01097b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01097bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01097c0:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f01097c6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01097c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01097cc:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f01097d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01097d5:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f01097db:	8b 45 08             	mov    0x8(%ebp),%eax
f01097de:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f01097e4:	48                   	dec    %eax
f01097e5:	39 c2                	cmp    %eax,%edx
f01097e7:	0f 83 2b 01 00 00    	jae    f0109918 <program_segment_alloc_map_copy_workingset+0x432>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01097ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01097f0:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01097f6:	89 d0                	mov    %edx,%eax
f01097f8:	01 c0                	add    %eax,%eax
f01097fa:	01 d0                	add    %edx,%eax
f01097fc:	c1 e0 03             	shl    $0x3,%eax
f01097ff:	8d 50 70             	lea    0x70(%eax),%edx
f0109802:	8b 45 08             	mov    0x8(%ebp),%eax
f0109805:	01 d0                	add    %edx,%eax
f0109807:	83 c0 08             	add    $0x8,%eax
f010980a:	85 c0                	test   %eax,%eax
f010980c:	75 17                	jne    f0109825 <program_segment_alloc_map_copy_workingset+0x33f>
f010980e:	83 ec 04             	sub    $0x4,%esp
f0109811:	68 fc 59 13 f0       	push   $0xf01359fc
f0109816:	68 81 02 00 00       	push   $0x281
f010981b:	68 7b 59 13 f0       	push   $0xf013597b
f0109820:	e8 81 69 ff ff       	call   f01001a6 <_panic>
f0109825:	8b 45 08             	mov    0x8(%ebp),%eax
f0109828:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010982e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109831:	8b 88 80 ea 01 00    	mov    0x1ea80(%eax),%ecx
f0109837:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010983a:	89 d0                	mov    %edx,%eax
f010983c:	01 c0                	add    %eax,%eax
f010983e:	01 d0                	add    %edx,%eax
f0109840:	c1 e0 03             	shl    $0x3,%eax
f0109843:	01 d8                	add    %ebx,%eax
f0109845:	05 88 00 00 00       	add    $0x88,%eax
f010984a:	89 08                	mov    %ecx,(%eax)
f010984c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010984f:	89 d0                	mov    %edx,%eax
f0109851:	01 c0                	add    %eax,%eax
f0109853:	01 d0                	add    %edx,%eax
f0109855:	c1 e0 03             	shl    $0x3,%eax
f0109858:	01 c8                	add    %ecx,%eax
f010985a:	05 88 00 00 00       	add    $0x88,%eax
f010985f:	8b 00                	mov    (%eax),%eax
f0109861:	85 c0                	test   %eax,%eax
f0109863:	74 2b                	je     f0109890 <program_segment_alloc_map_copy_workingset+0x3aa>
f0109865:	8b 45 08             	mov    0x8(%ebp),%eax
f0109868:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f010986e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109871:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109877:	89 c8                	mov    %ecx,%eax
f0109879:	01 c0                	add    %eax,%eax
f010987b:	01 c8                	add    %ecx,%eax
f010987d:	c1 e0 03             	shl    $0x3,%eax
f0109880:	8d 48 70             	lea    0x70(%eax),%ecx
f0109883:	8b 45 08             	mov    0x8(%ebp),%eax
f0109886:	01 c8                	add    %ecx,%eax
f0109888:	83 c0 08             	add    $0x8,%eax
f010988b:	89 42 14             	mov    %eax,0x14(%edx)
f010988e:	eb 26                	jmp    f01098b6 <program_segment_alloc_map_copy_workingset+0x3d0>
f0109890:	8b 45 08             	mov    0x8(%ebp),%eax
f0109893:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109899:	89 d0                	mov    %edx,%eax
f010989b:	01 c0                	add    %eax,%eax
f010989d:	01 d0                	add    %edx,%eax
f010989f:	c1 e0 03             	shl    $0x3,%eax
f01098a2:	8d 50 70             	lea    0x70(%eax),%edx
f01098a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01098a8:	01 d0                	add    %edx,%eax
f01098aa:	8d 50 08             	lea    0x8(%eax),%edx
f01098ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01098b0:	89 90 84 ea 01 00    	mov    %edx,0x1ea84(%eax)
f01098b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01098b9:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01098bf:	89 d0                	mov    %edx,%eax
f01098c1:	01 c0                	add    %eax,%eax
f01098c3:	01 d0                	add    %edx,%eax
f01098c5:	c1 e0 03             	shl    $0x3,%eax
f01098c8:	8d 50 70             	lea    0x70(%eax),%edx
f01098cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01098ce:	01 d0                	add    %edx,%eax
f01098d0:	8d 50 08             	lea    0x8(%eax),%edx
f01098d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01098d6:	89 90 80 ea 01 00    	mov    %edx,0x1ea80(%eax)
f01098dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01098df:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01098e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01098e8:	89 d0                	mov    %edx,%eax
f01098ea:	01 c0                	add    %eax,%eax
f01098ec:	01 d0                	add    %edx,%eax
f01098ee:	c1 e0 03             	shl    $0x3,%eax
f01098f1:	01 c8                	add    %ecx,%eax
f01098f3:	05 8c 00 00 00       	add    $0x8c,%eax
f01098f8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01098fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0109901:	8b 80 8c ea 01 00    	mov    0x1ea8c(%eax),%eax
f0109907:	8d 50 01             	lea    0x1(%eax),%edx
f010990a:	8b 45 08             	mov    0x8(%ebp),%eax
f010990d:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0109913:	e9 26 01 00 00       	jmp    f0109a3e <program_segment_alloc_map_copy_workingset+0x558>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109918:	8b 45 08             	mov    0x8(%ebp),%eax
f010991b:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109921:	89 d0                	mov    %edx,%eax
f0109923:	01 c0                	add    %eax,%eax
f0109925:	01 d0                	add    %edx,%eax
f0109927:	c1 e0 03             	shl    $0x3,%eax
f010992a:	8d 50 70             	lea    0x70(%eax),%edx
f010992d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109930:	01 d0                	add    %edx,%eax
f0109932:	83 c0 08             	add    $0x8,%eax
f0109935:	85 c0                	test   %eax,%eax
f0109937:	75 17                	jne    f0109950 <program_segment_alloc_map_copy_workingset+0x46a>
f0109939:	83 ec 04             	sub    $0x4,%esp
f010993c:	68 fc 59 13 f0       	push   $0xf01359fc
f0109941:	68 86 02 00 00       	push   $0x286
f0109946:	68 7b 59 13 f0       	push   $0xf013597b
f010994b:	e8 56 68 ff ff       	call   f01001a6 <_panic>
f0109950:	8b 45 08             	mov    0x8(%ebp),%eax
f0109953:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109959:	8b 45 08             	mov    0x8(%ebp),%eax
f010995c:	8b 88 90 ea 01 00    	mov    0x1ea90(%eax),%ecx
f0109962:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109965:	89 d0                	mov    %edx,%eax
f0109967:	01 c0                	add    %eax,%eax
f0109969:	01 d0                	add    %edx,%eax
f010996b:	c1 e0 03             	shl    $0x3,%eax
f010996e:	01 d8                	add    %ebx,%eax
f0109970:	05 88 00 00 00       	add    $0x88,%eax
f0109975:	89 08                	mov    %ecx,(%eax)
f0109977:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010997a:	89 d0                	mov    %edx,%eax
f010997c:	01 c0                	add    %eax,%eax
f010997e:	01 d0                	add    %edx,%eax
f0109980:	c1 e0 03             	shl    $0x3,%eax
f0109983:	01 c8                	add    %ecx,%eax
f0109985:	05 88 00 00 00       	add    $0x88,%eax
f010998a:	8b 00                	mov    (%eax),%eax
f010998c:	85 c0                	test   %eax,%eax
f010998e:	74 2b                	je     f01099bb <program_segment_alloc_map_copy_workingset+0x4d5>
f0109990:	8b 45 08             	mov    0x8(%ebp),%eax
f0109993:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0109999:	8b 45 08             	mov    0x8(%ebp),%eax
f010999c:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01099a2:	89 c8                	mov    %ecx,%eax
f01099a4:	01 c0                	add    %eax,%eax
f01099a6:	01 c8                	add    %ecx,%eax
f01099a8:	c1 e0 03             	shl    $0x3,%eax
f01099ab:	8d 48 70             	lea    0x70(%eax),%ecx
f01099ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01099b1:	01 c8                	add    %ecx,%eax
f01099b3:	83 c0 08             	add    $0x8,%eax
f01099b6:	89 42 14             	mov    %eax,0x14(%edx)
f01099b9:	eb 26                	jmp    f01099e1 <program_segment_alloc_map_copy_workingset+0x4fb>
f01099bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01099be:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01099c4:	89 d0                	mov    %edx,%eax
f01099c6:	01 c0                	add    %eax,%eax
f01099c8:	01 d0                	add    %edx,%eax
f01099ca:	c1 e0 03             	shl    $0x3,%eax
f01099cd:	8d 50 70             	lea    0x70(%eax),%edx
f01099d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01099d3:	01 d0                	add    %edx,%eax
f01099d5:	8d 50 08             	lea    0x8(%eax),%edx
f01099d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01099db:	89 90 94 ea 01 00    	mov    %edx,0x1ea94(%eax)
f01099e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01099e4:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01099ea:	89 d0                	mov    %edx,%eax
f01099ec:	01 c0                	add    %eax,%eax
f01099ee:	01 d0                	add    %edx,%eax
f01099f0:	c1 e0 03             	shl    $0x3,%eax
f01099f3:	8d 50 70             	lea    0x70(%eax),%edx
f01099f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01099f9:	01 d0                	add    %edx,%eax
f01099fb:	8d 50 08             	lea    0x8(%eax),%edx
f01099fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a01:	89 90 90 ea 01 00    	mov    %edx,0x1ea90(%eax)
f0109a07:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a0a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a10:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a13:	89 d0                	mov    %edx,%eax
f0109a15:	01 c0                	add    %eax,%eax
f0109a17:	01 d0                	add    %edx,%eax
f0109a19:	c1 e0 03             	shl    $0x3,%eax
f0109a1c:	01 c8                	add    %ecx,%eax
f0109a1e:	05 8c 00 00 00       	add    $0x8c,%eax
f0109a23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109a29:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a2c:	8b 80 9c ea 01 00    	mov    0x1ea9c(%eax),%eax
f0109a32:	8d 50 01             	lea    0x1(%eax),%edx
f0109a35:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a38:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f0109a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a41:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109a47:	8d 50 01             	lea    0x1(%eax),%edx
f0109a4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a4d:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0109a53:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a56:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109a5c:	8b 55 08             	mov    0x8(%ebp),%edx
f0109a5f:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109a62:	ba 00 00 00 00       	mov    $0x0,%edx
f0109a67:	f7 f1                	div    %ecx
f0109a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a6c:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0109a72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a75:	c1 e8 16             	shr    $0x16,%eax
f0109a78:	89 c2                	mov    %eax,%edx
f0109a7a:	8b 45 18             	mov    0x18(%ebp),%eax
f0109a7d:	8b 00                	mov    (%eax),%eax
f0109a7f:	39 c2                	cmp    %eax,%edx
f0109a81:	0f 84 d3 00 00 00    	je     f0109b5a <program_segment_alloc_map_copy_workingset+0x674>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f0109a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a8a:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109a90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a93:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109a96:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109a99:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109a9e:	89 c1                	mov    %eax,%ecx
f0109aa0:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109aa3:	89 d0                	mov    %edx,%eax
f0109aa5:	01 c0                	add    %eax,%eax
f0109aa7:	01 d0                	add    %edx,%eax
f0109aa9:	c1 e0 03             	shl    $0x3,%eax
f0109aac:	01 d8                	add    %ebx,%eax
f0109aae:	05 38 d5 01 00       	add    $0x1d538,%eax
f0109ab3:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0109ab5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ab8:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109abe:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ac1:	89 d0                	mov    %edx,%eax
f0109ac3:	01 c0                	add    %eax,%eax
f0109ac5:	01 d0                	add    %edx,%eax
f0109ac7:	c1 e0 03             	shl    $0x3,%eax
f0109aca:	01 c8                	add    %ecx,%eax
f0109acc:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0109ad1:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0109ad4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ad7:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109add:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ae0:	89 d0                	mov    %edx,%eax
f0109ae2:	01 c0                	add    %eax,%eax
f0109ae4:	01 d0                	add    %edx,%eax
f0109ae6:	c1 e0 03             	shl    $0x3,%eax
f0109ae9:	01 c8                	add    %ecx,%eax
f0109aeb:	05 40 d5 01 00       	add    $0x1d540,%eax
f0109af0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f0109af6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109af9:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109aff:	8d 50 01             	lea    0x1(%eax),%edx
f0109b02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b05:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f0109b0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b0e:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109b14:	b9 32 00 00 00       	mov    $0x32,%ecx
f0109b19:	ba 00 00 00 00       	mov    $0x0,%edx
f0109b1e:	f7 f1                	div    %ecx
f0109b20:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b23:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			if (e->table_last_WS_index == 0)
f0109b29:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b2c:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109b32:	85 c0                	test   %eax,%eax
f0109b34:	75 17                	jne    f0109b4d <program_segment_alloc_map_copy_workingset+0x667>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f0109b36:	83 ec 04             	sub    $0x4,%esp
f0109b39:	68 c0 5a 13 f0       	push   $0xf0135ac0
f0109b3e:	68 96 02 00 00       	push   $0x296
f0109b43:	68 7b 59 13 f0       	push   $0xf013597b
f0109b48:	e8 59 66 ff ff       	call   f01001a6 <_panic>
			(*lastTableNumber) = PDX(iVA);
f0109b4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b50:	c1 e8 16             	shr    $0x16,%eax
f0109b53:	89 c2                	mov    %eax,%edx
f0109b55:	8b 45 18             	mov    0x18(%ebp),%eax
f0109b58:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0109b5a:	8b 45 10             	mov    0x10(%ebp),%eax
f0109b5d:	8b 00                	mov    (%eax),%eax
f0109b5f:	8d 50 01             	lea    0x1(%eax),%edx
f0109b62:	8b 45 10             	mov    0x10(%ebp),%eax
f0109b65:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109b67:	ff 45 f0             	incl   -0x10(%ebp)
f0109b6a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109b71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b74:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0109b77:	73 0c                	jae    f0109b85 <program_segment_alloc_map_copy_workingset+0x69f>
f0109b79:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109b7c:	3b 45 14             	cmp    0x14(%ebp),%eax
f0109b7f:	0f 82 10 fa ff ff    	jb     f0109595 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f0109b85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b88:	8b 00                	mov    (%eax),%eax
f0109b8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f0109b8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109b90:	8b 40 0c             	mov    0xc(%eax),%eax
f0109b93:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109b96:	eb 10                	jmp    f0109ba8 <program_segment_alloc_map_copy_workingset+0x6c2>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f0109b98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109b9b:	8a 10                	mov    (%eax),%dl
f0109b9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109ba0:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f0109ba2:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f0109ba5:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109ba8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109bab:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0109bae:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0109bb1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109bb6:	89 c2                	mov    %eax,%edx
f0109bb8:	8b 45 10             	mov    0x10(%ebp),%eax
f0109bbb:	8b 00                	mov    (%eax),%eax
f0109bbd:	c1 e0 0c             	shl    $0xc,%eax
f0109bc0:	01 c2                	add    %eax,%edx
f0109bc2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109bc5:	39 c2                	cmp    %eax,%edx
f0109bc7:	76 1d                	jbe    f0109be6 <program_segment_alloc_map_copy_workingset+0x700>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f0109bc9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bcc:	8b 50 04             	mov    0x4(%eax),%edx
f0109bcf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109bd2:	01 c2                	add    %eax,%edx
f0109bd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109bd7:	39 c2                	cmp    %eax,%edx
f0109bd9:	77 bd                	ja     f0109b98 <program_segment_alloc_map_copy_workingset+0x6b2>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0109bdb:	eb 09                	jmp    f0109be6 <program_segment_alloc_map_copy_workingset+0x700>
	{
		*dst_ptr = 0;
f0109bdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109be0:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f0109be3:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0109be6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109be9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0109bec:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109bef:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109bf4:	89 c2                	mov    %eax,%edx
f0109bf6:	8b 45 10             	mov    0x10(%ebp),%eax
f0109bf9:	8b 00                	mov    (%eax),%eax
f0109bfb:	c1 e0 0c             	shl    $0xc,%eax
f0109bfe:	01 c2                	add    %eax,%edx
f0109c00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109c03:	39 c2                	cmp    %eax,%edx
f0109c05:	77 d6                	ja     f0109bdd <program_segment_alloc_map_copy_workingset+0x6f7>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f0109c07:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109c0c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109c0f:	c9                   	leave  
f0109c10:	c3                   	ret    

f0109c11 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f0109c11:	55                   	push   %ebp
f0109c12:	89 e5                	mov    %esp,%ebp
f0109c14:	53                   	push   %ebx
f0109c15:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f0109c18:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c1b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109c1e:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f0109c21:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c24:	8b 55 10             	mov    0x10(%ebp),%edx
f0109c27:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109c2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109c31:	eb 17                	jmp    f0109c4a <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f0109c33:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109c39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c3c:	c1 e2 02             	shl    $0x2,%edx
f0109c3f:	01 d0                	add    %edx,%eax
f0109c41:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109c47:	ff 45 f4             	incl   -0xc(%ebp)
f0109c4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c4d:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0109c52:	76 df                	jbe    f0109c33 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0109c54:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f0109c5b:	eb 22                	jmp    f0109c7f <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f0109c5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c60:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109c63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c66:	c1 e2 02             	shl    $0x2,%edx
f0109c69:	01 c2                	add    %eax,%edx
f0109c6b:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0109c70:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0109c73:	c1 e1 02             	shl    $0x2,%ecx
f0109c76:	01 c8                	add    %ecx,%eax
f0109c78:	8b 00                	mov    (%eax),%eax
f0109c7a:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0109c7c:	ff 45 f4             	incl   -0xc(%ebp)
f0109c7f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0109c86:	7e d5                	jle    f0109c5d <initialize_environment+0x4c>
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
		share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f0109c88:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c8b:	8b 15 30 87 65 f0    	mov    0xf0658730,%edx
f0109c91:	29 d0                	sub    %edx,%eax
f0109c93:	c1 f8 03             	sar    $0x3,%eax
f0109c96:	89 c2                	mov    %eax,%edx
f0109c98:	89 d0                	mov    %edx,%eax
f0109c9a:	c1 e0 03             	shl    $0x3,%eax
f0109c9d:	01 d0                	add    %edx,%eax
f0109c9f:	c1 e0 03             	shl    $0x3,%eax
f0109ca2:	01 d0                	add    %edx,%eax
f0109ca4:	01 c0                	add    %eax,%eax
f0109ca6:	01 d0                	add    %edx,%eax
f0109ca8:	01 c0                	add    %eax,%eax
f0109caa:	01 d0                	add    %edx,%eax
f0109cac:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109cb3:	01 c8                	add    %ecx,%eax
f0109cb5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109cbc:	01 c8                	add    %ecx,%eax
f0109cbe:	c1 e0 02             	shl    $0x2,%eax
f0109cc1:	01 d0                	add    %edx,%eax
f0109cc3:	01 c0                	add    %eax,%eax
f0109cc5:	01 d0                	add    %edx,%eax
f0109cc7:	01 c0                	add    %eax,%eax
f0109cc9:	01 d0                	add    %edx,%eax
f0109ccb:	c1 e0 02             	shl    $0x2,%eax
f0109cce:	01 d0                	add    %edx,%eax
f0109cd0:	01 c0                	add    %eax,%eax
f0109cd2:	01 d0                	add    %edx,%eax
f0109cd4:	c1 e0 09             	shl    $0x9,%eax
f0109cd7:	29 d0                	sub    %edx,%eax
f0109cd9:	c1 e0 02             	shl    $0x2,%eax
f0109cdc:	01 d0                	add    %edx,%eax
f0109cde:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f0109ce1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109ce4:	89 d0                	mov    %edx,%eax
f0109ce6:	01 c0                	add    %eax,%eax
f0109ce8:	01 d0                	add    %edx,%eax
f0109cea:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109cf1:	01 c8                	add    %ecx,%eax
f0109cf3:	c1 e0 02             	shl    $0x2,%eax
f0109cf6:	01 d0                	add    %edx,%eax
f0109cf8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109cff:	01 c8                	add    %ecx,%eax
f0109d01:	c1 e0 02             	shl    $0x2,%eax
f0109d04:	01 d0                	add    %edx,%eax
f0109d06:	c1 e0 02             	shl    $0x2,%eax
f0109d09:	01 d0                	add    %edx,%eax
f0109d0b:	c1 e0 03             	shl    $0x3,%eax
f0109d0e:	2d 00 00 40 11       	sub    $0x11400000,%eax
f0109d13:	8d 50 78             	lea    0x78(%eax),%edx
f0109d16:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d19:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109d1f:	83 ec 0c             	sub    $0xc,%esp
f0109d22:	6a 02                	push   $0x2
f0109d24:	e8 38 35 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f0109d29:	83 c4 10             	add    $0x10,%esp
f0109d2c:	85 c0                	test   %eax,%eax
f0109d2e:	0f 84 25 01 00 00    	je     f0109e59 <initialize_environment+0x248>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109d34:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109d3b:	e9 08 01 00 00       	jmp    f0109e48 <initialize_environment+0x237>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f0109d40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109d43:	89 d0                	mov    %edx,%eax
f0109d45:	01 c0                	add    %eax,%eax
f0109d47:	01 d0                	add    %edx,%eax
f0109d49:	c1 e0 03             	shl    $0x3,%eax
f0109d4c:	8d 50 70             	lea    0x70(%eax),%edx
f0109d4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d52:	01 d0                	add    %edx,%eax
f0109d54:	83 c0 08             	add    $0x8,%eax
f0109d57:	85 c0                	test   %eax,%eax
f0109d59:	75 17                	jne    f0109d72 <initialize_environment+0x161>
f0109d5b:	83 ec 04             	sub    $0x4,%esp
f0109d5e:	68 fc 59 13 f0       	push   $0xf01359fc
f0109d63:	68 f4 02 00 00       	push   $0x2f4
f0109d68:	68 7b 59 13 f0       	push   $0xf013597b
f0109d6d:	e8 34 64 ff ff       	call   f01001a6 <_panic>
f0109d72:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d75:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f0109d7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109d7e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0109d81:	89 c8                	mov    %ecx,%eax
f0109d83:	01 c0                	add    %eax,%eax
f0109d85:	01 c8                	add    %ecx,%eax
f0109d87:	c1 e0 03             	shl    $0x3,%eax
f0109d8a:	01 d8                	add    %ebx,%eax
f0109d8c:	05 88 00 00 00       	add    $0x88,%eax
f0109d91:	89 10                	mov    %edx,(%eax)
f0109d93:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109d96:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109d99:	89 d0                	mov    %edx,%eax
f0109d9b:	01 c0                	add    %eax,%eax
f0109d9d:	01 d0                	add    %edx,%eax
f0109d9f:	c1 e0 03             	shl    $0x3,%eax
f0109da2:	01 c8                	add    %ecx,%eax
f0109da4:	05 88 00 00 00       	add    $0x88,%eax
f0109da9:	8b 00                	mov    (%eax),%eax
f0109dab:	85 c0                	test   %eax,%eax
f0109dad:	74 25                	je     f0109dd4 <initialize_environment+0x1c3>
f0109daf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109db2:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f0109db8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0109dbb:	89 c8                	mov    %ecx,%eax
f0109dbd:	01 c0                	add    %eax,%eax
f0109dbf:	01 c8                	add    %ecx,%eax
f0109dc1:	c1 e0 03             	shl    $0x3,%eax
f0109dc4:	8d 48 70             	lea    0x70(%eax),%ecx
f0109dc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dca:	01 c8                	add    %ecx,%eax
f0109dcc:	83 c0 08             	add    $0x8,%eax
f0109dcf:	89 42 14             	mov    %eax,0x14(%edx)
f0109dd2:	eb 20                	jmp    f0109df4 <initialize_environment+0x1e3>
f0109dd4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109dd7:	89 d0                	mov    %edx,%eax
f0109dd9:	01 c0                	add    %eax,%eax
f0109ddb:	01 d0                	add    %edx,%eax
f0109ddd:	c1 e0 03             	shl    $0x3,%eax
f0109de0:	8d 50 70             	lea    0x70(%eax),%edx
f0109de3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109de6:	01 d0                	add    %edx,%eax
f0109de8:	8d 50 08             	lea    0x8(%eax),%edx
f0109deb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dee:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f0109df4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109df7:	89 d0                	mov    %edx,%eax
f0109df9:	01 c0                	add    %eax,%eax
f0109dfb:	01 d0                	add    %edx,%eax
f0109dfd:	c1 e0 03             	shl    $0x3,%eax
f0109e00:	8d 50 70             	lea    0x70(%eax),%edx
f0109e03:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e06:	01 d0                	add    %edx,%eax
f0109e08:	8d 50 08             	lea    0x8(%eax),%edx
f0109e0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e0e:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109e14:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109e1a:	89 d0                	mov    %edx,%eax
f0109e1c:	01 c0                	add    %eax,%eax
f0109e1e:	01 d0                	add    %edx,%eax
f0109e20:	c1 e0 03             	shl    $0x3,%eax
f0109e23:	01 c8                	add    %ecx,%eax
f0109e25:	05 8c 00 00 00       	add    $0x8c,%eax
f0109e2a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109e30:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e33:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f0109e39:	8d 50 01             	lea    0x1(%eax),%edx
f0109e3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e3f:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109e45:	ff 45 f0             	incl   -0x10(%ebp)
f0109e48:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e4b:	8b 50 74             	mov    0x74(%eax),%edx
f0109e4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109e51:	39 c2                	cmp    %eax,%edx
f0109e53:	0f 87 e7 fe ff ff    	ja     f0109d40 <initialize_environment+0x12f>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0109e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109e60:	eb 4e                	jmp    f0109eb0 <initialize_environment+0x29f>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f0109e62:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e68:	89 d0                	mov    %edx,%eax
f0109e6a:	01 c0                	add    %eax,%eax
f0109e6c:	01 d0                	add    %edx,%eax
f0109e6e:	c1 e0 03             	shl    $0x3,%eax
f0109e71:	01 c8                	add    %ecx,%eax
f0109e73:	83 c0 78             	add    $0x78,%eax
f0109e76:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f0109e7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e82:	89 d0                	mov    %edx,%eax
f0109e84:	01 c0                	add    %eax,%eax
f0109e86:	01 d0                	add    %edx,%eax
f0109e88:	c1 e0 03             	shl    $0x3,%eax
f0109e8b:	01 c8                	add    %ecx,%eax
f0109e8d:	83 c0 7c             	add    $0x7c,%eax
f0109e90:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f0109e93:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e99:	89 d0                	mov    %edx,%eax
f0109e9b:	01 c0                	add    %eax,%eax
f0109e9d:	01 d0                	add    %edx,%eax
f0109e9f:	c1 e0 03             	shl    $0x3,%eax
f0109ea2:	01 c8                	add    %ecx,%eax
f0109ea4:	83 e8 80             	sub    $0xffffff80,%eax
f0109ea7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0109ead:	ff 45 f4             	incl   -0xc(%ebp)
f0109eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eb3:	8b 50 74             	mov    0x74(%eax),%edx
f0109eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109eb9:	39 c2                	cmp    %eax,%edx
f0109ebb:	77 a5                	ja     f0109e62 <initialize_environment+0x251>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f0109ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ec0:	c7 80 e8 d9 01 00 00 	movl   $0x0,0x1d9e8(%eax)
f0109ec7:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0109eca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109ed1:	eb 54                	jmp    f0109f27 <initialize_environment+0x316>
	{
		e->__ptr_tws[i].virtual_address = 0;
f0109ed3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ed6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ed9:	89 d0                	mov    %edx,%eax
f0109edb:	01 c0                	add    %eax,%eax
f0109edd:	01 d0                	add    %edx,%eax
f0109edf:	c1 e0 03             	shl    $0x3,%eax
f0109ee2:	01 c8                	add    %ecx,%eax
f0109ee4:	05 38 d5 01 00       	add    $0x1d538,%eax
f0109ee9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f0109eef:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ef2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ef5:	89 d0                	mov    %edx,%eax
f0109ef7:	01 c0                	add    %eax,%eax
f0109ef9:	01 d0                	add    %edx,%eax
f0109efb:	c1 e0 03             	shl    $0x3,%eax
f0109efe:	01 c8                	add    %ecx,%eax
f0109f00:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0109f05:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f0109f08:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f0e:	89 d0                	mov    %edx,%eax
f0109f10:	01 c0                	add    %eax,%eax
f0109f12:	01 d0                	add    %edx,%eax
f0109f14:	c1 e0 03             	shl    $0x3,%eax
f0109f17:	01 c8                	add    %ecx,%eax
f0109f19:	05 40 d5 01 00       	add    $0x1d540,%eax
f0109f1e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0109f24:	ff 45 f4             	incl   -0xc(%ebp)
f0109f27:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109f2b:	7e a6                	jle    f0109ed3 <initialize_environment+0x2c2>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f0109f2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f30:	c7 80 ec d9 01 00 00 	movl   $0x0,0x1d9ec(%eax)
f0109f37:	00 00 00 

	e->pageFaultsCounter=0;
f0109f3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f3d:	c7 80 f0 d9 01 00 00 	movl   $0x0,0x1d9f0(%eax)
f0109f44:	00 00 00 
	e->tableFaultsCounter=0;
f0109f47:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f4a:	c7 80 f4 d9 01 00 00 	movl   $0x0,0x1d9f4(%eax)
f0109f51:	00 00 00 

	e->freeingFullWSCounter = 0;
f0109f54:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f57:	c7 80 f8 d9 01 00 00 	movl   $0x0,0x1d9f8(%eax)
f0109f5e:	00 00 00 
	e->freeingScarceMemCounter = 0;
f0109f61:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f64:	c7 80 fc d9 01 00 00 	movl   $0x0,0x1d9fc(%eax)
f0109f6b:	00 00 00 

	e->nModifiedPages=0;
f0109f6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f71:	c7 80 00 da 01 00 00 	movl   $0x0,0x1da00(%eax)
f0109f78:	00 00 00 
	e->nNotModifiedPages=0;
f0109f7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f7e:	c7 80 04 da 01 00 00 	movl   $0x0,0x1da04(%eax)
f0109f85:	00 00 00 
	e->nClocks = 0;
f0109f88:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f8b:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f0109f92:	00 00 00 

	//2020
	e->nPageIn = 0;
f0109f95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f98:	c7 80 08 da 01 00 00 	movl   $0x0,0x1da08(%eax)
f0109f9f:	00 00 00 
	e->nPageOut = 0;
f0109fa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa5:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f0109fac:	00 00 00 
	e->nNewPageAdded = 0;
f0109faf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb2:	c7 80 10 da 01 00 00 	movl   $0x0,0x1da10(%eax)
f0109fb9:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f0109fbc:	83 ec 0c             	sub    $0xc,%esp
f0109fbf:	ff 75 08             	pushl  0x8(%ebp)
f0109fc2:	e8 09 00 00 00       	call   f0109fd0 <complete_environment_initialization>
f0109fc7:	83 c4 10             	add    $0x10,%esp
}
f0109fca:	90                   	nop
f0109fcb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109fce:	c9                   	leave  
f0109fcf:	c3                   	ret    

f0109fd0 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f0109fd0:	55                   	push   %ebp
f0109fd1:	89 e5                	mov    %esp,%ebp
f0109fd3:	53                   	push   %ebx
f0109fd4:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f0109fd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fda:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109fdd:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f0109fe3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe6:	8b 40 60             	mov    0x60(%eax),%eax
f0109fe9:	83 c8 03             	or     $0x3,%eax
f0109fec:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f0109fee:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff1:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109ff4:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0109ffa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ffd:	8b 40 60             	mov    0x60(%eax),%eax
f010a000:	83 c8 05             	or     $0x5,%eax
f010a003:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a005:	8b 45 08             	mov    0x8(%ebp),%eax
f010a008:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a00f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a012:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a019:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01c:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a023:	8b 45 08             	mov    0x8(%ebp),%eax
f010a026:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a02d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a030:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a033:	83 ec 0c             	sub    $0xc,%esp
f010a036:	6a 08                	push   $0x8
f010a038:	e8 a2 51 02 00       	call   f012f1df <log2_ceil>
f010a03d:	83 c4 10             	add    $0x10,%esp
f010a040:	ba 01 00 00 00       	mov    $0x1,%edx
f010a045:	88 c1                	mov    %al,%cl
f010a047:	d3 e2                	shl    %cl,%edx
f010a049:	89 d0                	mov    %edx,%eax
f010a04b:	01 d8                	add    %ebx,%eax
f010a04d:	89 c3                	mov    %eax,%ebx
f010a04f:	83 ec 0c             	sub    $0xc,%esp
f010a052:	6a 08                	push   $0x8
f010a054:	e8 51 51 02 00       	call   f012f1aa <nearest_pow2_ceil>
f010a059:	83 c4 10             	add    $0x10,%esp
f010a05c:	f7 d8                	neg    %eax
f010a05e:	21 d8                	and    %ebx,%eax
f010a060:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a063:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a067:	7f 1b                	jg     f010a084 <complete_environment_initialization+0xb4>
		generation = 1 << ENVGENSHIFT;
f010a069:	83 ec 0c             	sub    $0xc,%esp
f010a06c:	6a 08                	push   $0x8
f010a06e:	e8 6c 51 02 00       	call   f012f1df <log2_ceil>
f010a073:	83 c4 10             	add    $0x10,%esp
f010a076:	ba 01 00 00 00       	mov    $0x1,%edx
f010a07b:	88 c1                	mov    %al,%cl
f010a07d:	d3 e2                	shl    %cl,%edx
f010a07f:	89 d0                	mov    %edx,%eax
f010a081:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a084:	8b 45 08             	mov    0x8(%ebp),%eax
f010a087:	8b 15 30 87 65 f0    	mov    0xf0658730,%edx
f010a08d:	29 d0                	sub    %edx,%eax
f010a08f:	c1 f8 03             	sar    $0x3,%eax
f010a092:	89 c2                	mov    %eax,%edx
f010a094:	89 d0                	mov    %edx,%eax
f010a096:	c1 e0 03             	shl    $0x3,%eax
f010a099:	01 d0                	add    %edx,%eax
f010a09b:	c1 e0 03             	shl    $0x3,%eax
f010a09e:	01 d0                	add    %edx,%eax
f010a0a0:	01 c0                	add    %eax,%eax
f010a0a2:	01 d0                	add    %edx,%eax
f010a0a4:	01 c0                	add    %eax,%eax
f010a0a6:	01 d0                	add    %edx,%eax
f010a0a8:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a0af:	01 c8                	add    %ecx,%eax
f010a0b1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a0b8:	01 c8                	add    %ecx,%eax
f010a0ba:	c1 e0 02             	shl    $0x2,%eax
f010a0bd:	01 d0                	add    %edx,%eax
f010a0bf:	01 c0                	add    %eax,%eax
f010a0c1:	01 d0                	add    %edx,%eax
f010a0c3:	01 c0                	add    %eax,%eax
f010a0c5:	01 d0                	add    %edx,%eax
f010a0c7:	c1 e0 02             	shl    $0x2,%eax
f010a0ca:	01 d0                	add    %edx,%eax
f010a0cc:	01 c0                	add    %eax,%eax
f010a0ce:	01 d0                	add    %edx,%eax
f010a0d0:	c1 e0 09             	shl    $0x9,%eax
f010a0d3:	29 d0                	sub    %edx,%eax
f010a0d5:	c1 e0 02             	shl    $0x2,%eax
f010a0d8:	01 d0                	add    %edx,%eax
f010a0da:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a0dd:	89 c2                	mov    %eax,%edx
f010a0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e2:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a0e5:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010a0ea:	85 c0                	test   %eax,%eax
f010a0ec:	75 0c                	jne    f010a0fa <complete_environment_initialization+0x12a>
		e->env_parent_id = 0;//no parent;
f010a0ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f1:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a0f8:	eb 0e                	jmp    f010a108 <complete_environment_initialization+0x138>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a0fa:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010a0ff:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a102:	8b 45 08             	mov    0x8(%ebp),%eax
f010a105:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a108:	8b 45 08             	mov    0x8(%ebp),%eax
f010a10b:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a112:	8b 45 08             	mov    0x8(%ebp),%eax
f010a115:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a11c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a11f:	83 ec 04             	sub    $0x4,%esp
f010a122:	6a 44                	push   $0x44
f010a124:	6a 00                	push   $0x0
f010a126:	50                   	push   %eax
f010a127:	e8 e1 64 02 00       	call   f013060d <memset>
f010a12c:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a12f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a132:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a138:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13b:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a141:	8b 45 08             	mov    0x8(%ebp),%eax
f010a144:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a14a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a14d:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a154:	8b 45 08             	mov    0x8(%ebp),%eax
f010a157:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a15d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a160:	8b 40 38             	mov    0x38(%eax),%eax
f010a163:	80 cc 02             	or     $0x2,%ah
f010a166:	89 c2                	mov    %eax,%edx
f010a168:	8b 45 08             	mov    0x8(%ebp),%eax
f010a16b:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a16e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a172:	75 17                	jne    f010a18b <complete_environment_initialization+0x1bb>
f010a174:	83 ec 04             	sub    $0x4,%esp
f010a177:	68 dd 59 13 f0       	push   $0xf01359dd
f010a17c:	68 58 03 00 00       	push   $0x358
f010a181:	68 7b 59 13 f0       	push   $0xf013597b
f010a186:	e8 1b 60 ff ff       	call   f01001a6 <_panic>
f010a18b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a18e:	8b 40 44             	mov    0x44(%eax),%eax
f010a191:	85 c0                	test   %eax,%eax
f010a193:	74 11                	je     f010a1a6 <complete_environment_initialization+0x1d6>
f010a195:	8b 45 08             	mov    0x8(%ebp),%eax
f010a198:	8b 40 44             	mov    0x44(%eax),%eax
f010a19b:	8b 55 08             	mov    0x8(%ebp),%edx
f010a19e:	8b 52 48             	mov    0x48(%edx),%edx
f010a1a1:	89 50 48             	mov    %edx,0x48(%eax)
f010a1a4:	eb 0b                	jmp    f010a1b1 <complete_environment_initialization+0x1e1>
f010a1a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a9:	8b 40 48             	mov    0x48(%eax),%eax
f010a1ac:	a3 3c 87 65 f0       	mov    %eax,0xf065873c
f010a1b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b4:	8b 40 48             	mov    0x48(%eax),%eax
f010a1b7:	85 c0                	test   %eax,%eax
f010a1b9:	74 11                	je     f010a1cc <complete_environment_initialization+0x1fc>
f010a1bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1be:	8b 40 48             	mov    0x48(%eax),%eax
f010a1c1:	8b 55 08             	mov    0x8(%ebp),%edx
f010a1c4:	8b 52 44             	mov    0x44(%edx),%edx
f010a1c7:	89 50 44             	mov    %edx,0x44(%eax)
f010a1ca:	eb 0b                	jmp    f010a1d7 <complete_environment_initialization+0x207>
f010a1cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1cf:	8b 40 44             	mov    0x44(%eax),%eax
f010a1d2:	a3 38 87 65 f0       	mov    %eax,0xf0658738
f010a1d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1da:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a1e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1e4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a1eb:	a1 44 87 65 f0       	mov    0xf0658744,%eax
f010a1f0:	48                   	dec    %eax
f010a1f1:	a3 44 87 65 f0       	mov    %eax,0xf0658744
	return ;
f010a1f6:	90                   	nop
}
f010a1f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a1fa:	c9                   	leave  
f010a1fb:	c3                   	ret    

f010a1fc <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010a1fc:	55                   	push   %ebp
f010a1fd:	89 e5                	mov    %esp,%ebp
f010a1ff:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a202:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a205:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a208:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a20b:	8b 00                	mov    (%eax),%eax
f010a20d:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a212:	74 17                	je     f010a22b <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010a214:	83 ec 04             	sub    $0x4,%esp
f010a217:	68 63 5b 13 f0       	push   $0xf0135b63
f010a21c:	68 64 03 00 00       	push   $0x364
f010a221:	68 7b 59 13 f0       	push   $0xf013597b
f010a226:	e8 7b 5f ff ff       	call   f01001a6 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010a22b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a22e:	8b 40 18             	mov    0x18(%eax),%eax
f010a231:	89 c2                	mov    %eax,%edx
f010a233:	8b 45 08             	mov    0x8(%ebp),%eax
f010a236:	89 50 30             	mov    %edx,0x30(%eax)
}
f010a239:	90                   	nop
f010a23a:	c9                   	leave  
f010a23b:	c3                   	ret    

f010a23c <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010a23c:	55                   	push   %ebp
f010a23d:	89 e5                	mov    %esp,%ebp
f010a23f:	83 ec 08             	sub    $0x8,%esp
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
f010a242:	83 ec 04             	sub    $0x4,%esp
f010a245:	68 7c 5b 13 f0       	push   $0xf0135b7c
f010a24a:	68 81 03 00 00       	push   $0x381
f010a24f:	68 7b 59 13 f0       	push   $0xf013597b
f010a254:	e8 4d 5f ff ff       	call   f01001a6 <_panic>

f010a259 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010a259:	55                   	push   %ebp
f010a25a:	89 e5                	mov    %esp,%ebp
f010a25c:	83 ec 08             	sub    $0x8,%esp
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
f010a25f:	83 ec 04             	sub    $0x4,%esp
f010a262:	68 cc 5b 13 f0       	push   $0xf0135bcc
f010a267:	68 a0 03 00 00       	push   $0x3a0
f010a26c:	68 7b 59 13 f0       	push   $0xf013597b
f010a271:	e8 30 5f ff ff       	call   f01001a6 <_panic>

f010a276 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010a276:	55                   	push   %ebp
f010a277:	89 e5                	mov    %esp,%ebp
f010a279:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010a27c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27f:	8b 40 10             	mov    0x10(%eax),%eax
f010a282:	8d 48 01             	lea    0x1(%eax),%ecx
f010a285:	8b 55 08             	mov    0x8(%ebp),%edx
f010a288:	89 4a 10             	mov    %ecx,0x10(%edx)
f010a28b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a28e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a291:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a294:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a297:	8b 00                	mov    (%eax),%eax
f010a299:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a29e:	74 17                	je     f010a2b7 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010a2a0:	83 ec 04             	sub    $0x4,%esp
f010a2a3:	68 63 5b 13 f0       	push   $0xf0135b63
f010a2a8:	68 ae 03 00 00       	push   $0x3ae
f010a2ad:	68 7b 59 13 f0       	push   $0xf013597b
f010a2b2:	e8 ef 5e ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a2b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a2ba:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a2bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2c0:	01 d0                	add    %edx,%eax
f010a2c2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010a2c5:	eb 0f                	jmp    f010a2d6 <PROGRAM_SEGMENT_NEXT+0x60>
f010a2c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2ca:	8b 40 10             	mov    0x10(%eax),%eax
f010a2cd:	8d 50 01             	lea    0x1(%eax),%edx
f010a2d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d3:	89 50 10             	mov    %edx,0x10(%eax)
f010a2d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d9:	8b 40 10             	mov    0x10(%eax),%eax
f010a2dc:	c1 e0 05             	shl    $0x5,%eax
f010a2df:	89 c2                	mov    %eax,%edx
f010a2e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a2e4:	01 d0                	add    %edx,%eax
f010a2e6:	8b 00                	mov    (%eax),%eax
f010a2e8:	83 f8 01             	cmp    $0x1,%eax
f010a2eb:	74 13                	je     f010a300 <PROGRAM_SEGMENT_NEXT+0x8a>
f010a2ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f0:	8b 50 10             	mov    0x10(%eax),%edx
f010a2f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a2f6:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a2f9:	0f b7 c0             	movzwl %ax,%eax
f010a2fc:	39 c2                	cmp    %eax,%edx
f010a2fe:	72 c7                	jb     f010a2c7 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010a300:	8b 45 08             	mov    0x8(%ebp),%eax
f010a303:	8b 40 10             	mov    0x10(%eax),%eax
f010a306:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010a309:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a30c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a30f:	0f b7 c0             	movzwl %ax,%eax
f010a312:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a315:	7e 63                	jle    f010a37a <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a317:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a31a:	c1 e0 05             	shl    $0x5,%eax
f010a31d:	89 c2                	mov    %eax,%edx
f010a31f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a322:	01 d0                	add    %edx,%eax
f010a324:	8b 50 04             	mov    0x4(%eax),%edx
f010a327:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a32a:	01 c2                	add    %eax,%edx
f010a32c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a32f:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010a331:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a334:	c1 e0 05             	shl    $0x5,%eax
f010a337:	89 c2                	mov    %eax,%edx
f010a339:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a33c:	01 d0                	add    %edx,%eax
f010a33e:	8b 50 14             	mov    0x14(%eax),%edx
f010a341:	8b 45 08             	mov    0x8(%ebp),%eax
f010a344:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010a347:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a34a:	c1 e0 05             	shl    $0x5,%eax
f010a34d:	89 c2                	mov    %eax,%edx
f010a34f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a352:	01 d0                	add    %edx,%eax
f010a354:	8b 50 10             	mov    0x10(%eax),%edx
f010a357:	8b 45 08             	mov    0x8(%ebp),%eax
f010a35a:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010a35d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a360:	c1 e0 05             	shl    $0x5,%eax
f010a363:	89 c2                	mov    %eax,%edx
f010a365:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a368:	01 d0                	add    %edx,%eax
f010a36a:	8b 40 08             	mov    0x8(%eax),%eax
f010a36d:	89 c2                	mov    %eax,%edx
f010a36f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a372:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010a375:	8b 45 08             	mov    0x8(%ebp),%eax
f010a378:	eb 05                	jmp    f010a37f <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010a37a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a37f:	c9                   	leave  
f010a380:	c3                   	ret    

f010a381 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010a381:	55                   	push   %ebp
f010a382:	89 e5                	mov    %esp,%ebp
f010a384:	57                   	push   %edi
f010a385:	56                   	push   %esi
f010a386:	53                   	push   %ebx
f010a387:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010a38a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a391:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a394:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a397:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a39a:	8b 00                	mov    (%eax),%eax
f010a39c:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a3a1:	74 17                	je     f010a3ba <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010a3a3:	83 ec 04             	sub    $0x4,%esp
f010a3a6:	68 63 5b 13 f0       	push   $0xf0135b63
f010a3ab:	68 ca 03 00 00       	push   $0x3ca
f010a3b0:	68 7b 59 13 f0       	push   $0xf013597b
f010a3b5:	e8 ec 5d ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a3ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a3bd:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a3c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a3c3:	01 d0                	add    %edx,%eax
f010a3c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010a3c8:	eb 07                	jmp    f010a3d1 <PROGRAM_SEGMENT_FIRST+0x50>
f010a3ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a3cd:	40                   	inc    %eax
f010a3ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a3d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a3d4:	c1 e0 05             	shl    $0x5,%eax
f010a3d7:	89 c2                	mov    %eax,%edx
f010a3d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a3dc:	01 d0                	add    %edx,%eax
f010a3de:	8b 00                	mov    (%eax),%eax
f010a3e0:	83 f8 01             	cmp    $0x1,%eax
f010a3e3:	74 10                	je     f010a3f5 <PROGRAM_SEGMENT_FIRST+0x74>
f010a3e5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a3e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a3eb:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a3ee:	0f b7 c0             	movzwl %ax,%eax
f010a3f1:	39 c2                	cmp    %eax,%edx
f010a3f3:	72 d5                	jb     f010a3ca <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010a3f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a3f8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010a3fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a3fe:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a401:	0f b7 c0             	movzwl %ax,%eax
f010a404:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010a407:	7e 68                	jle    f010a471 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a409:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a40c:	c1 e0 05             	shl    $0x5,%eax
f010a40f:	89 c2                	mov    %eax,%edx
f010a411:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a414:	01 d0                	add    %edx,%eax
f010a416:	8b 50 04             	mov    0x4(%eax),%edx
f010a419:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a41c:	01 d0                	add    %edx,%eax
f010a41e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010a421:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a424:	c1 e0 05             	shl    $0x5,%eax
f010a427:	89 c2                	mov    %eax,%edx
f010a429:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a42c:	01 d0                	add    %edx,%eax
f010a42e:	8b 40 14             	mov    0x14(%eax),%eax
f010a431:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010a434:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a437:	c1 e0 05             	shl    $0x5,%eax
f010a43a:	89 c2                	mov    %eax,%edx
f010a43c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a43f:	01 d0                	add    %edx,%eax
f010a441:	8b 40 10             	mov    0x10(%eax),%eax
f010a444:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010a447:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a44a:	c1 e0 05             	shl    $0x5,%eax
f010a44d:	89 c2                	mov    %eax,%edx
f010a44f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a452:	01 d0                	add    %edx,%eax
f010a454:	8b 40 08             	mov    0x8(%eax),%eax
f010a457:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010a45a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a45d:	89 c3                	mov    %eax,%ebx
f010a45f:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a462:	ba 05 00 00 00       	mov    $0x5,%edx
f010a467:	89 df                	mov    %ebx,%edi
f010a469:	89 c6                	mov    %eax,%esi
f010a46b:	89 d1                	mov    %edx,%ecx
f010a46d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010a46f:	eb 1c                	jmp    f010a48d <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010a471:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010a478:	8b 45 08             	mov    0x8(%ebp),%eax
f010a47b:	89 c3                	mov    %eax,%ebx
f010a47d:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a480:	ba 05 00 00 00       	mov    $0x5,%edx
f010a485:	89 df                	mov    %ebx,%edi
f010a487:	89 c6                	mov    %eax,%esi
f010a489:	89 d1                	mov    %edx,%ecx
f010a48b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010a48d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a490:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a493:	5b                   	pop    %ebx
f010a494:	5e                   	pop    %esi
f010a495:	5f                   	pop    %edi
f010a496:	5d                   	pop    %ebp
f010a497:	c2 04 00             	ret    $0x4

f010a49a <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010a49a:	55                   	push   %ebp
f010a49b:	89 e5                	mov    %esp,%ebp
f010a49d:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010a4a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a4a7:	a1 e0 8f 65 f0       	mov    0xf0658fe0,%eax
f010a4ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a4af:	e9 c3 00 00 00       	jmp    f010a577 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010a4b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4b7:	8b 40 10             	mov    0x10(%eax),%eax
f010a4ba:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a4bd:	0f 85 ac 00 00 00    	jne    f010a56f <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010a4c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4c6:	8b 50 0c             	mov    0xc(%eax),%edx
f010a4c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4cc:	8b 40 10             	mov    0x10(%eax),%eax
f010a4cf:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a4d2:	83 ec 08             	sub    $0x8,%esp
f010a4d5:	52                   	push   %edx
f010a4d6:	50                   	push   %eax
f010a4d7:	e8 82 d1 ff ff       	call   f010765e <pt_clear_page_table_entry>
f010a4dc:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010a4df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a4e3:	75 17                	jne    f010a4fc <cleanup_buffers+0x62>
f010a4e5:	83 ec 04             	sub    $0x4,%esp
f010a4e8:	68 dd 59 13 f0       	push   $0xf01359dd
f010a4ed:	68 f1 03 00 00       	push   $0x3f1
f010a4f2:	68 7b 59 13 f0       	push   $0xf013597b
f010a4f7:	e8 aa 5c ff ff       	call   f01001a6 <_panic>
f010a4fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4ff:	8b 00                	mov    (%eax),%eax
f010a501:	85 c0                	test   %eax,%eax
f010a503:	74 10                	je     f010a515 <cleanup_buffers+0x7b>
f010a505:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a508:	8b 00                	mov    (%eax),%eax
f010a50a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a50d:	8b 52 04             	mov    0x4(%edx),%edx
f010a510:	89 50 04             	mov    %edx,0x4(%eax)
f010a513:	eb 0b                	jmp    f010a520 <cleanup_buffers+0x86>
f010a515:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a518:	8b 40 04             	mov    0x4(%eax),%eax
f010a51b:	a3 e4 8f 65 f0       	mov    %eax,0xf0658fe4
f010a520:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a523:	8b 40 04             	mov    0x4(%eax),%eax
f010a526:	85 c0                	test   %eax,%eax
f010a528:	74 0f                	je     f010a539 <cleanup_buffers+0x9f>
f010a52a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a52d:	8b 40 04             	mov    0x4(%eax),%eax
f010a530:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a533:	8b 12                	mov    (%edx),%edx
f010a535:	89 10                	mov    %edx,(%eax)
f010a537:	eb 0a                	jmp    f010a543 <cleanup_buffers+0xa9>
f010a539:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a53c:	8b 00                	mov    (%eax),%eax
f010a53e:	a3 e0 8f 65 f0       	mov    %eax,0xf0658fe0
f010a543:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a546:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a54c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a54f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a556:	a1 ec 8f 65 f0       	mov    0xf0658fec,%eax
f010a55b:	48                   	dec    %eax
f010a55c:	a3 ec 8f 65 f0       	mov    %eax,0xf0658fec

			free_frame(ptr_fi);
f010a561:	83 ec 0c             	sub    $0xc,%esp
f010a564:	ff 75 f4             	pushl  -0xc(%ebp)
f010a567:	e8 53 c3 ff ff       	call   f01068bf <free_frame>
f010a56c:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a56f:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f010a574:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a577:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a57b:	74 07                	je     f010a584 <cleanup_buffers+0xea>
f010a57d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a580:	8b 00                	mov    (%eax),%eax
f010a582:	eb 05                	jmp    f010a589 <cleanup_buffers+0xef>
f010a584:	b8 00 00 00 00       	mov    $0x0,%eax
f010a589:	a3 e8 8f 65 f0       	mov    %eax,0xf0658fe8
f010a58e:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f010a593:	85 c0                	test   %eax,%eax
f010a595:	0f 85 19 ff ff ff    	jne    f010a4b4 <cleanup_buffers+0x1a>
f010a59b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a59f:	0f 85 0f ff ff ff    	jne    f010a4b4 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010a5a5:	90                   	nop
f010a5a6:	c9                   	leave  
f010a5a7:	c3                   	ret    

f010a5a8 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010a5a8:	55                   	push   %ebp
f010a5a9:	89 e5                	mov    %esp,%ebp
f010a5ab:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010a5ae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010a5b2:	7e 06                	jle    f010a5ba <set_program_priority+0x12>
f010a5b4:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a5b8:	7e 14                	jle    f010a5ce <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010a5ba:	83 ec 04             	sub    $0x4,%esp
f010a5bd:	68 1c 5c 13 f0       	push   $0xf0135c1c
f010a5c2:	6a 10                	push   $0x10
f010a5c4:	68 40 5c 13 f0       	push   $0xf0135c40
f010a5c9:	e8 d8 5b ff ff       	call   f01001a6 <_panic>
		return;
	}
	if(env == NULL)
f010a5ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a5d2:	74 75                	je     f010a649 <set_program_priority+0xa1>
		return;
	switch(priority)
f010a5d4:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a5d8:	77 56                	ja     f010a630 <set_program_priority+0x88>
f010a5da:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a5dd:	c1 e0 02             	shl    $0x2,%eax
f010a5e0:	05 7c 5c 13 f0       	add    $0xf0135c7c,%eax
f010a5e5:	8b 00                	mov    (%eax),%eax
f010a5e7:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010a5e9:	83 ec 08             	sub    $0x8,%esp
f010a5ec:	6a 01                	push   $0x1
f010a5ee:	ff 75 08             	pushl  0x8(%ebp)
f010a5f1:	e8 f2 da ff ff       	call   f01080e8 <half_WS_Size>
f010a5f6:	83 c4 10             	add    $0x10,%esp
			break;
f010a5f9:	eb 35                	jmp    f010a630 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010a5fb:	83 ec 08             	sub    $0x8,%esp
f010a5fe:	6a 00                	push   $0x0
f010a600:	ff 75 08             	pushl  0x8(%ebp)
f010a603:	e8 e0 da ff ff       	call   f01080e8 <half_WS_Size>
f010a608:	83 c4 10             	add    $0x10,%esp
			break;
f010a60b:	eb 23                	jmp    f010a630 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010a60d:	83 ec 08             	sub    $0x8,%esp
f010a610:	6a 01                	push   $0x1
f010a612:	ff 75 08             	pushl  0x8(%ebp)
f010a615:	e8 b1 da ff ff       	call   f01080cb <double_WS_Size>
f010a61a:	83 c4 10             	add    $0x10,%esp
			break;
f010a61d:	eb 11                	jmp    f010a630 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010a61f:	83 ec 08             	sub    $0x8,%esp
f010a622:	6a 00                	push   $0x0
f010a624:	ff 75 08             	pushl  0x8(%ebp)
f010a627:	e8 9f da ff ff       	call   f01080cb <double_WS_Size>
f010a62c:	83 c4 10             	add    $0x10,%esp
			break;
f010a62f:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010a630:	8b 45 08             	mov    0x8(%ebp),%eax
f010a633:	8b 40 74             	mov    0x74(%eax),%eax
f010a636:	83 ec 08             	sub    $0x8,%esp
f010a639:	50                   	push   %eax
f010a63a:	68 5d 5c 13 f0       	push   $0xf0135c5d
f010a63f:	e8 e9 65 ff ff       	call   f0100c2d <cprintf>
f010a644:	83 c4 10             	add    $0x10,%esp
f010a647:	eb 01                	jmp    f010a64a <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010a649:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010a64a:	c9                   	leave  
f010a64b:	c3                   	ret    

f010a64c <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010a64c:	55                   	push   %ebp
f010a64d:	89 e5                	mov    %esp,%ebp
f010a64f:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a652:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a659:	eb 29                	jmp    f010a684 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010a65b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a65e:	89 d0                	mov    %edx,%eax
f010a660:	01 c0                	add    %eax,%eax
f010a662:	01 d0                	add    %edx,%eax
f010a664:	c1 e0 02             	shl    $0x2,%eax
f010a667:	05 00 09 19 f0       	add    $0xf0190900,%eax
f010a66c:	8b 00                	mov    (%eax),%eax
f010a66e:	83 ec 08             	sub    $0x8,%esp
f010a671:	50                   	push   %eax
f010a672:	ff 75 08             	pushl  0x8(%ebp)
f010a675:	e8 b1 5e 02 00       	call   f013052b <strcmp>
f010a67a:	83 c4 10             	add    $0x10,%esp
f010a67d:	85 c0                	test   %eax,%eax
f010a67f:	74 0f                	je     f010a690 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a681:	ff 45 f4             	incl   -0xc(%ebp)
f010a684:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a689:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a68c:	7c cd                	jl     f010a65b <get_user_program_info+0xf>
f010a68e:	eb 01                	jmp    f010a691 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010a690:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010a691:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a696:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a699:	75 1a                	jne    f010a6b5 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010a69b:	83 ec 08             	sub    $0x8,%esp
f010a69e:	ff 75 08             	pushl  0x8(%ebp)
f010a6a1:	68 a9 66 13 f0       	push   $0xf01366a9
f010a6a6:	e8 82 65 ff ff       	call   f0100c2d <cprintf>
f010a6ab:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a6ae:	b8 00 00 00 00       	mov    $0x0,%eax
f010a6b3:	eb 11                	jmp    f010a6c6 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010a6b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a6b8:	89 d0                	mov    %edx,%eax
f010a6ba:	01 c0                	add    %eax,%eax
f010a6bc:	01 d0                	add    %edx,%eax
f010a6be:	c1 e0 02             	shl    $0x2,%eax
f010a6c1:	05 00 09 19 f0       	add    $0xf0190900,%eax
}
f010a6c6:	c9                   	leave  
f010a6c7:	c3                   	ret    

f010a6c8 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010a6c8:	55                   	push   %ebp
f010a6c9:	89 e5                	mov    %esp,%ebp
f010a6cb:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a6ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a6d5:	eb 30                	jmp    f010a707 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010a6d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a6da:	89 d0                	mov    %edx,%eax
f010a6dc:	01 c0                	add    %eax,%eax
f010a6de:	01 d0                	add    %edx,%eax
f010a6e0:	c1 e0 02             	shl    $0x2,%eax
f010a6e3:	05 00 09 19 f0       	add    $0xf0190900,%eax
f010a6e8:	8b 00                	mov    (%eax),%eax
f010a6ea:	8b 55 08             	mov    0x8(%ebp),%edx
f010a6ed:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010a6f3:	83 ec 08             	sub    $0x8,%esp
f010a6f6:	50                   	push   %eax
f010a6f7:	52                   	push   %edx
f010a6f8:	e8 2e 5e 02 00       	call   f013052b <strcmp>
f010a6fd:	83 c4 10             	add    $0x10,%esp
f010a700:	85 c0                	test   %eax,%eax
f010a702:	74 0f                	je     f010a713 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a704:	ff 45 f4             	incl   -0xc(%ebp)
f010a707:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a70c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a70f:	7c c6                	jl     f010a6d7 <get_user_program_info_by_env+0xf>
f010a711:	eb 01                	jmp    f010a714 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010a713:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010a714:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a719:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a71c:	75 17                	jne    f010a735 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010a71e:	83 ec 0c             	sub    $0xc,%esp
f010a721:	68 c4 66 13 f0       	push   $0xf01366c4
f010a726:	e8 02 65 ff ff       	call   f0100c2d <cprintf>
f010a72b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a72e:	b8 00 00 00 00       	mov    $0x0,%eax
f010a733:	eb 11                	jmp    f010a746 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010a735:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a738:	89 d0                	mov    %edx,%eax
f010a73a:	01 c0                	add    %eax,%eax
f010a73c:	01 d0                	add    %edx,%eax
f010a73e:	c1 e0 02             	shl    $0x2,%eax
f010a741:	05 00 09 19 f0       	add    $0xf0190900,%eax
}
f010a746:	c9                   	leave  
f010a747:	c3                   	ret    

f010a748 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010a748:	55                   	push   %ebp
f010a749:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010a74b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74e:	83 f8 13             	cmp    $0x13,%eax
f010a751:	77 0c                	ja     f010a75f <trapname+0x17>
		return excnames[trapno];
f010a753:	8b 45 08             	mov    0x8(%ebp),%eax
f010a756:	8b 04 85 40 6a 13 f0 	mov    -0xfec95c0(,%eax,4),%eax
f010a75d:	eb 12                	jmp    f010a771 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010a75f:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010a763:	75 07                	jne    f010a76c <trapname+0x24>
		return "System call";
f010a765:	b8 e0 66 13 f0       	mov    $0xf01366e0,%eax
f010a76a:	eb 05                	jmp    f010a771 <trapname+0x29>
	return "(unknown trap)";
f010a76c:	b8 ec 66 13 f0       	mov    $0xf01366ec,%eax
}
f010a771:	5d                   	pop    %ebp
f010a772:	c3                   	ret    

f010a773 <idt_init>:


void
idt_init(void)
{
f010a773:	55                   	push   %ebp
f010a774:	89 e5                	mov    %esp,%ebp
f010a776:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010a779:	b8 76 bd 10 f0       	mov    $0xf010bd76,%eax
f010a77e:	66 a3 d0 87 65 f0    	mov    %ax,0xf06587d0
f010a784:	66 c7 05 d2 87 65 f0 	movw   $0x8,0xf06587d2
f010a78b:	08 00 
f010a78d:	a0 d4 87 65 f0       	mov    0xf06587d4,%al
f010a792:	83 e0 e0             	and    $0xffffffe0,%eax
f010a795:	a2 d4 87 65 f0       	mov    %al,0xf06587d4
f010a79a:	a0 d4 87 65 f0       	mov    0xf06587d4,%al
f010a79f:	83 e0 1f             	and    $0x1f,%eax
f010a7a2:	a2 d4 87 65 f0       	mov    %al,0xf06587d4
f010a7a7:	a0 d5 87 65 f0       	mov    0xf06587d5,%al
f010a7ac:	83 e0 f0             	and    $0xfffffff0,%eax
f010a7af:	83 c8 0e             	or     $0xe,%eax
f010a7b2:	a2 d5 87 65 f0       	mov    %al,0xf06587d5
f010a7b7:	a0 d5 87 65 f0       	mov    0xf06587d5,%al
f010a7bc:	83 e0 ef             	and    $0xffffffef,%eax
f010a7bf:	a2 d5 87 65 f0       	mov    %al,0xf06587d5
f010a7c4:	a0 d5 87 65 f0       	mov    0xf06587d5,%al
f010a7c9:	83 e0 9f             	and    $0xffffff9f,%eax
f010a7cc:	a2 d5 87 65 f0       	mov    %al,0xf06587d5
f010a7d1:	a0 d5 87 65 f0       	mov    0xf06587d5,%al
f010a7d6:	83 c8 80             	or     $0xffffff80,%eax
f010a7d9:	a2 d5 87 65 f0       	mov    %al,0xf06587d5
f010a7de:	b8 76 bd 10 f0       	mov    $0xf010bd76,%eax
f010a7e3:	c1 e8 10             	shr    $0x10,%eax
f010a7e6:	66 a3 d6 87 65 f0    	mov    %ax,0xf06587d6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010a7ec:	b8 7e bd 10 f0       	mov    $0xf010bd7e,%eax
f010a7f1:	66 a3 e0 88 65 f0    	mov    %ax,0xf06588e0
f010a7f7:	66 c7 05 e2 88 65 f0 	movw   $0x8,0xf06588e2
f010a7fe:	08 00 
f010a800:	a0 e4 88 65 f0       	mov    0xf06588e4,%al
f010a805:	83 e0 e0             	and    $0xffffffe0,%eax
f010a808:	a2 e4 88 65 f0       	mov    %al,0xf06588e4
f010a80d:	a0 e4 88 65 f0       	mov    0xf06588e4,%al
f010a812:	83 e0 1f             	and    $0x1f,%eax
f010a815:	a2 e4 88 65 f0       	mov    %al,0xf06588e4
f010a81a:	a0 e5 88 65 f0       	mov    0xf06588e5,%al
f010a81f:	83 e0 f0             	and    $0xfffffff0,%eax
f010a822:	83 c8 0e             	or     $0xe,%eax
f010a825:	a2 e5 88 65 f0       	mov    %al,0xf06588e5
f010a82a:	a0 e5 88 65 f0       	mov    0xf06588e5,%al
f010a82f:	83 e0 ef             	and    $0xffffffef,%eax
f010a832:	a2 e5 88 65 f0       	mov    %al,0xf06588e5
f010a837:	a0 e5 88 65 f0       	mov    0xf06588e5,%al
f010a83c:	83 c8 60             	or     $0x60,%eax
f010a83f:	a2 e5 88 65 f0       	mov    %al,0xf06588e5
f010a844:	a0 e5 88 65 f0       	mov    0xf06588e5,%al
f010a849:	83 c8 80             	or     $0xffffff80,%eax
f010a84c:	a2 e5 88 65 f0       	mov    %al,0xf06588e5
f010a851:	b8 7e bd 10 f0       	mov    $0xf010bd7e,%eax
f010a856:	c1 e8 10             	shr    $0x10,%eax
f010a859:	66 a3 e6 88 65 f0    	mov    %ax,0xf06588e6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010a85f:	b8 88 bd 10 f0       	mov    $0xf010bd88,%eax
f010a864:	66 a3 a0 87 65 f0    	mov    %ax,0xf06587a0
f010a86a:	66 c7 05 a2 87 65 f0 	movw   $0x8,0xf06587a2
f010a871:	08 00 
f010a873:	a0 a4 87 65 f0       	mov    0xf06587a4,%al
f010a878:	83 e0 e0             	and    $0xffffffe0,%eax
f010a87b:	a2 a4 87 65 f0       	mov    %al,0xf06587a4
f010a880:	a0 a4 87 65 f0       	mov    0xf06587a4,%al
f010a885:	83 e0 1f             	and    $0x1f,%eax
f010a888:	a2 a4 87 65 f0       	mov    %al,0xf06587a4
f010a88d:	a0 a5 87 65 f0       	mov    0xf06587a5,%al
f010a892:	83 e0 f0             	and    $0xfffffff0,%eax
f010a895:	83 c8 0e             	or     $0xe,%eax
f010a898:	a2 a5 87 65 f0       	mov    %al,0xf06587a5
f010a89d:	a0 a5 87 65 f0       	mov    0xf06587a5,%al
f010a8a2:	83 e0 ef             	and    $0xffffffef,%eax
f010a8a5:	a2 a5 87 65 f0       	mov    %al,0xf06587a5
f010a8aa:	a0 a5 87 65 f0       	mov    0xf06587a5,%al
f010a8af:	83 e0 9f             	and    $0xffffff9f,%eax
f010a8b2:	a2 a5 87 65 f0       	mov    %al,0xf06587a5
f010a8b7:	a0 a5 87 65 f0       	mov    0xf06587a5,%al
f010a8bc:	83 c8 80             	or     $0xffffff80,%eax
f010a8bf:	a2 a5 87 65 f0       	mov    %al,0xf06587a5
f010a8c4:	b8 88 bd 10 f0       	mov    $0xf010bd88,%eax
f010a8c9:	c1 e8 10             	shr    $0x10,%eax
f010a8cc:	66 a3 a6 87 65 f0    	mov    %ax,0xf06587a6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010a8d2:	b8 90 bd 10 f0       	mov    $0xf010bd90,%eax
f010a8d7:	66 a3 60 87 65 f0    	mov    %ax,0xf0658760
f010a8dd:	66 c7 05 62 87 65 f0 	movw   $0x8,0xf0658762
f010a8e4:	08 00 
f010a8e6:	a0 64 87 65 f0       	mov    0xf0658764,%al
f010a8eb:	83 e0 e0             	and    $0xffffffe0,%eax
f010a8ee:	a2 64 87 65 f0       	mov    %al,0xf0658764
f010a8f3:	a0 64 87 65 f0       	mov    0xf0658764,%al
f010a8f8:	83 e0 1f             	and    $0x1f,%eax
f010a8fb:	a2 64 87 65 f0       	mov    %al,0xf0658764
f010a900:	a0 65 87 65 f0       	mov    0xf0658765,%al
f010a905:	83 e0 f0             	and    $0xfffffff0,%eax
f010a908:	83 c8 0e             	or     $0xe,%eax
f010a90b:	a2 65 87 65 f0       	mov    %al,0xf0658765
f010a910:	a0 65 87 65 f0       	mov    0xf0658765,%al
f010a915:	83 e0 ef             	and    $0xffffffef,%eax
f010a918:	a2 65 87 65 f0       	mov    %al,0xf0658765
f010a91d:	a0 65 87 65 f0       	mov    0xf0658765,%al
f010a922:	83 c8 60             	or     $0x60,%eax
f010a925:	a2 65 87 65 f0       	mov    %al,0xf0658765
f010a92a:	a0 65 87 65 f0       	mov    0xf0658765,%al
f010a92f:	83 c8 80             	or     $0xffffff80,%eax
f010a932:	a2 65 87 65 f0       	mov    %al,0xf0658765
f010a937:	b8 90 bd 10 f0       	mov    $0xf010bd90,%eax
f010a93c:	c1 e8 10             	shr    $0x10,%eax
f010a93f:	66 a3 66 87 65 f0    	mov    %ax,0xf0658766
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010a945:	b8 9a bd 10 f0       	mov    $0xf010bd9a,%eax
f010a94a:	66 a3 68 87 65 f0    	mov    %ax,0xf0658768
f010a950:	66 c7 05 6a 87 65 f0 	movw   $0x8,0xf065876a
f010a957:	08 00 
f010a959:	a0 6c 87 65 f0       	mov    0xf065876c,%al
f010a95e:	83 e0 e0             	and    $0xffffffe0,%eax
f010a961:	a2 6c 87 65 f0       	mov    %al,0xf065876c
f010a966:	a0 6c 87 65 f0       	mov    0xf065876c,%al
f010a96b:	83 e0 1f             	and    $0x1f,%eax
f010a96e:	a2 6c 87 65 f0       	mov    %al,0xf065876c
f010a973:	a0 6d 87 65 f0       	mov    0xf065876d,%al
f010a978:	83 c8 0f             	or     $0xf,%eax
f010a97b:	a2 6d 87 65 f0       	mov    %al,0xf065876d
f010a980:	a0 6d 87 65 f0       	mov    0xf065876d,%al
f010a985:	83 e0 ef             	and    $0xffffffef,%eax
f010a988:	a2 6d 87 65 f0       	mov    %al,0xf065876d
f010a98d:	a0 6d 87 65 f0       	mov    0xf065876d,%al
f010a992:	83 c8 60             	or     $0x60,%eax
f010a995:	a2 6d 87 65 f0       	mov    %al,0xf065876d
f010a99a:	a0 6d 87 65 f0       	mov    0xf065876d,%al
f010a99f:	83 c8 80             	or     $0xffffff80,%eax
f010a9a2:	a2 6d 87 65 f0       	mov    %al,0xf065876d
f010a9a7:	b8 9a bd 10 f0       	mov    $0xf010bd9a,%eax
f010a9ac:	c1 e8 10             	shr    $0x10,%eax
f010a9af:	66 a3 6e 87 65 f0    	mov    %ax,0xf065876e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010a9b5:	b8 a4 bd 10 f0       	mov    $0xf010bda4,%eax
f010a9ba:	66 a3 70 87 65 f0    	mov    %ax,0xf0658770
f010a9c0:	66 c7 05 72 87 65 f0 	movw   $0x8,0xf0658772
f010a9c7:	08 00 
f010a9c9:	a0 74 87 65 f0       	mov    0xf0658774,%al
f010a9ce:	83 e0 e0             	and    $0xffffffe0,%eax
f010a9d1:	a2 74 87 65 f0       	mov    %al,0xf0658774
f010a9d6:	a0 74 87 65 f0       	mov    0xf0658774,%al
f010a9db:	83 e0 1f             	and    $0x1f,%eax
f010a9de:	a2 74 87 65 f0       	mov    %al,0xf0658774
f010a9e3:	a0 75 87 65 f0       	mov    0xf0658775,%al
f010a9e8:	83 e0 f0             	and    $0xfffffff0,%eax
f010a9eb:	83 c8 0e             	or     $0xe,%eax
f010a9ee:	a2 75 87 65 f0       	mov    %al,0xf0658775
f010a9f3:	a0 75 87 65 f0       	mov    0xf0658775,%al
f010a9f8:	83 e0 ef             	and    $0xffffffef,%eax
f010a9fb:	a2 75 87 65 f0       	mov    %al,0xf0658775
f010aa00:	a0 75 87 65 f0       	mov    0xf0658775,%al
f010aa05:	83 c8 60             	or     $0x60,%eax
f010aa08:	a2 75 87 65 f0       	mov    %al,0xf0658775
f010aa0d:	a0 75 87 65 f0       	mov    0xf0658775,%al
f010aa12:	83 c8 80             	or     $0xffffff80,%eax
f010aa15:	a2 75 87 65 f0       	mov    %al,0xf0658775
f010aa1a:	b8 a4 bd 10 f0       	mov    $0xf010bda4,%eax
f010aa1f:	c1 e8 10             	shr    $0x10,%eax
f010aa22:	66 a3 76 87 65 f0    	mov    %ax,0xf0658776
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010aa28:	b8 ae bd 10 f0       	mov    $0xf010bdae,%eax
f010aa2d:	66 a3 78 87 65 f0    	mov    %ax,0xf0658778
f010aa33:	66 c7 05 7a 87 65 f0 	movw   $0x8,0xf065877a
f010aa3a:	08 00 
f010aa3c:	a0 7c 87 65 f0       	mov    0xf065877c,%al
f010aa41:	83 e0 e0             	and    $0xffffffe0,%eax
f010aa44:	a2 7c 87 65 f0       	mov    %al,0xf065877c
f010aa49:	a0 7c 87 65 f0       	mov    0xf065877c,%al
f010aa4e:	83 e0 1f             	and    $0x1f,%eax
f010aa51:	a2 7c 87 65 f0       	mov    %al,0xf065877c
f010aa56:	a0 7d 87 65 f0       	mov    0xf065877d,%al
f010aa5b:	83 c8 0f             	or     $0xf,%eax
f010aa5e:	a2 7d 87 65 f0       	mov    %al,0xf065877d
f010aa63:	a0 7d 87 65 f0       	mov    0xf065877d,%al
f010aa68:	83 e0 ef             	and    $0xffffffef,%eax
f010aa6b:	a2 7d 87 65 f0       	mov    %al,0xf065877d
f010aa70:	a0 7d 87 65 f0       	mov    0xf065877d,%al
f010aa75:	83 c8 60             	or     $0x60,%eax
f010aa78:	a2 7d 87 65 f0       	mov    %al,0xf065877d
f010aa7d:	a0 7d 87 65 f0       	mov    0xf065877d,%al
f010aa82:	83 c8 80             	or     $0xffffff80,%eax
f010aa85:	a2 7d 87 65 f0       	mov    %al,0xf065877d
f010aa8a:	b8 ae bd 10 f0       	mov    $0xf010bdae,%eax
f010aa8f:	c1 e8 10             	shr    $0x10,%eax
f010aa92:	66 a3 7e 87 65 f0    	mov    %ax,0xf065877e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010aa98:	b8 b8 bd 10 f0       	mov    $0xf010bdb8,%eax
f010aa9d:	66 a3 80 87 65 f0    	mov    %ax,0xf0658780
f010aaa3:	66 c7 05 82 87 65 f0 	movw   $0x8,0xf0658782
f010aaaa:	08 00 
f010aaac:	a0 84 87 65 f0       	mov    0xf0658784,%al
f010aab1:	83 e0 e0             	and    $0xffffffe0,%eax
f010aab4:	a2 84 87 65 f0       	mov    %al,0xf0658784
f010aab9:	a0 84 87 65 f0       	mov    0xf0658784,%al
f010aabe:	83 e0 1f             	and    $0x1f,%eax
f010aac1:	a2 84 87 65 f0       	mov    %al,0xf0658784
f010aac6:	a0 85 87 65 f0       	mov    0xf0658785,%al
f010aacb:	83 c8 0f             	or     $0xf,%eax
f010aace:	a2 85 87 65 f0       	mov    %al,0xf0658785
f010aad3:	a0 85 87 65 f0       	mov    0xf0658785,%al
f010aad8:	83 e0 ef             	and    $0xffffffef,%eax
f010aadb:	a2 85 87 65 f0       	mov    %al,0xf0658785
f010aae0:	a0 85 87 65 f0       	mov    0xf0658785,%al
f010aae5:	83 c8 60             	or     $0x60,%eax
f010aae8:	a2 85 87 65 f0       	mov    %al,0xf0658785
f010aaed:	a0 85 87 65 f0       	mov    0xf0658785,%al
f010aaf2:	83 c8 80             	or     $0xffffff80,%eax
f010aaf5:	a2 85 87 65 f0       	mov    %al,0xf0658785
f010aafa:	b8 b8 bd 10 f0       	mov    $0xf010bdb8,%eax
f010aaff:	c1 e8 10             	shr    $0x10,%eax
f010ab02:	66 a3 86 87 65 f0    	mov    %ax,0xf0658786
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010ab08:	b8 c2 bd 10 f0       	mov    $0xf010bdc2,%eax
f010ab0d:	66 a3 88 87 65 f0    	mov    %ax,0xf0658788
f010ab13:	66 c7 05 8a 87 65 f0 	movw   $0x8,0xf065878a
f010ab1a:	08 00 
f010ab1c:	a0 8c 87 65 f0       	mov    0xf065878c,%al
f010ab21:	83 e0 e0             	and    $0xffffffe0,%eax
f010ab24:	a2 8c 87 65 f0       	mov    %al,0xf065878c
f010ab29:	a0 8c 87 65 f0       	mov    0xf065878c,%al
f010ab2e:	83 e0 1f             	and    $0x1f,%eax
f010ab31:	a2 8c 87 65 f0       	mov    %al,0xf065878c
f010ab36:	a0 8d 87 65 f0       	mov    0xf065878d,%al
f010ab3b:	83 e0 f0             	and    $0xfffffff0,%eax
f010ab3e:	83 c8 0e             	or     $0xe,%eax
f010ab41:	a2 8d 87 65 f0       	mov    %al,0xf065878d
f010ab46:	a0 8d 87 65 f0       	mov    0xf065878d,%al
f010ab4b:	83 e0 ef             	and    $0xffffffef,%eax
f010ab4e:	a2 8d 87 65 f0       	mov    %al,0xf065878d
f010ab53:	a0 8d 87 65 f0       	mov    0xf065878d,%al
f010ab58:	83 c8 60             	or     $0x60,%eax
f010ab5b:	a2 8d 87 65 f0       	mov    %al,0xf065878d
f010ab60:	a0 8d 87 65 f0       	mov    0xf065878d,%al
f010ab65:	83 c8 80             	or     $0xffffff80,%eax
f010ab68:	a2 8d 87 65 f0       	mov    %al,0xf065878d
f010ab6d:	b8 c2 bd 10 f0       	mov    $0xf010bdc2,%eax
f010ab72:	c1 e8 10             	shr    $0x10,%eax
f010ab75:	66 a3 8e 87 65 f0    	mov    %ax,0xf065878e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010ab7b:	b8 cc bd 10 f0       	mov    $0xf010bdcc,%eax
f010ab80:	66 a3 90 87 65 f0    	mov    %ax,0xf0658790
f010ab86:	66 c7 05 92 87 65 f0 	movw   $0x8,0xf0658792
f010ab8d:	08 00 
f010ab8f:	a0 94 87 65 f0       	mov    0xf0658794,%al
f010ab94:	83 e0 e0             	and    $0xffffffe0,%eax
f010ab97:	a2 94 87 65 f0       	mov    %al,0xf0658794
f010ab9c:	a0 94 87 65 f0       	mov    0xf0658794,%al
f010aba1:	83 e0 1f             	and    $0x1f,%eax
f010aba4:	a2 94 87 65 f0       	mov    %al,0xf0658794
f010aba9:	a0 95 87 65 f0       	mov    0xf0658795,%al
f010abae:	83 e0 f0             	and    $0xfffffff0,%eax
f010abb1:	83 c8 0e             	or     $0xe,%eax
f010abb4:	a2 95 87 65 f0       	mov    %al,0xf0658795
f010abb9:	a0 95 87 65 f0       	mov    0xf0658795,%al
f010abbe:	83 e0 ef             	and    $0xffffffef,%eax
f010abc1:	a2 95 87 65 f0       	mov    %al,0xf0658795
f010abc6:	a0 95 87 65 f0       	mov    0xf0658795,%al
f010abcb:	83 c8 60             	or     $0x60,%eax
f010abce:	a2 95 87 65 f0       	mov    %al,0xf0658795
f010abd3:	a0 95 87 65 f0       	mov    0xf0658795,%al
f010abd8:	83 c8 80             	or     $0xffffff80,%eax
f010abdb:	a2 95 87 65 f0       	mov    %al,0xf0658795
f010abe0:	b8 cc bd 10 f0       	mov    $0xf010bdcc,%eax
f010abe5:	c1 e8 10             	shr    $0x10,%eax
f010abe8:	66 a3 96 87 65 f0    	mov    %ax,0xf0658796
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010abee:	b8 d6 bd 10 f0       	mov    $0xf010bdd6,%eax
f010abf3:	66 a3 98 87 65 f0    	mov    %ax,0xf0658798
f010abf9:	66 c7 05 9a 87 65 f0 	movw   $0x8,0xf065879a
f010ac00:	08 00 
f010ac02:	a0 9c 87 65 f0       	mov    0xf065879c,%al
f010ac07:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac0a:	a2 9c 87 65 f0       	mov    %al,0xf065879c
f010ac0f:	a0 9c 87 65 f0       	mov    0xf065879c,%al
f010ac14:	83 e0 1f             	and    $0x1f,%eax
f010ac17:	a2 9c 87 65 f0       	mov    %al,0xf065879c
f010ac1c:	a0 9d 87 65 f0       	mov    0xf065879d,%al
f010ac21:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac24:	83 c8 0e             	or     $0xe,%eax
f010ac27:	a2 9d 87 65 f0       	mov    %al,0xf065879d
f010ac2c:	a0 9d 87 65 f0       	mov    0xf065879d,%al
f010ac31:	83 e0 ef             	and    $0xffffffef,%eax
f010ac34:	a2 9d 87 65 f0       	mov    %al,0xf065879d
f010ac39:	a0 9d 87 65 f0       	mov    0xf065879d,%al
f010ac3e:	83 c8 60             	or     $0x60,%eax
f010ac41:	a2 9d 87 65 f0       	mov    %al,0xf065879d
f010ac46:	a0 9d 87 65 f0       	mov    0xf065879d,%al
f010ac4b:	83 c8 80             	or     $0xffffff80,%eax
f010ac4e:	a2 9d 87 65 f0       	mov    %al,0xf065879d
f010ac53:	b8 d6 bd 10 f0       	mov    $0xf010bdd6,%eax
f010ac58:	c1 e8 10             	shr    $0x10,%eax
f010ac5b:	66 a3 9e 87 65 f0    	mov    %ax,0xf065879e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010ac61:	b8 e0 bd 10 f0       	mov    $0xf010bde0,%eax
f010ac66:	66 a3 b0 87 65 f0    	mov    %ax,0xf06587b0
f010ac6c:	66 c7 05 b2 87 65 f0 	movw   $0x8,0xf06587b2
f010ac73:	08 00 
f010ac75:	a0 b4 87 65 f0       	mov    0xf06587b4,%al
f010ac7a:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac7d:	a2 b4 87 65 f0       	mov    %al,0xf06587b4
f010ac82:	a0 b4 87 65 f0       	mov    0xf06587b4,%al
f010ac87:	83 e0 1f             	and    $0x1f,%eax
f010ac8a:	a2 b4 87 65 f0       	mov    %al,0xf06587b4
f010ac8f:	a0 b5 87 65 f0       	mov    0xf06587b5,%al
f010ac94:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac97:	83 c8 0e             	or     $0xe,%eax
f010ac9a:	a2 b5 87 65 f0       	mov    %al,0xf06587b5
f010ac9f:	a0 b5 87 65 f0       	mov    0xf06587b5,%al
f010aca4:	83 e0 ef             	and    $0xffffffef,%eax
f010aca7:	a2 b5 87 65 f0       	mov    %al,0xf06587b5
f010acac:	a0 b5 87 65 f0       	mov    0xf06587b5,%al
f010acb1:	83 c8 60             	or     $0x60,%eax
f010acb4:	a2 b5 87 65 f0       	mov    %al,0xf06587b5
f010acb9:	a0 b5 87 65 f0       	mov    0xf06587b5,%al
f010acbe:	83 c8 80             	or     $0xffffff80,%eax
f010acc1:	a2 b5 87 65 f0       	mov    %al,0xf06587b5
f010acc6:	b8 e0 bd 10 f0       	mov    $0xf010bde0,%eax
f010accb:	c1 e8 10             	shr    $0x10,%eax
f010acce:	66 a3 b6 87 65 f0    	mov    %ax,0xf06587b6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010acd4:	b8 e8 bd 10 f0       	mov    $0xf010bde8,%eax
f010acd9:	66 a3 b8 87 65 f0    	mov    %ax,0xf06587b8
f010acdf:	66 c7 05 ba 87 65 f0 	movw   $0x8,0xf06587ba
f010ace6:	08 00 
f010ace8:	a0 bc 87 65 f0       	mov    0xf06587bc,%al
f010aced:	83 e0 e0             	and    $0xffffffe0,%eax
f010acf0:	a2 bc 87 65 f0       	mov    %al,0xf06587bc
f010acf5:	a0 bc 87 65 f0       	mov    0xf06587bc,%al
f010acfa:	83 e0 1f             	and    $0x1f,%eax
f010acfd:	a2 bc 87 65 f0       	mov    %al,0xf06587bc
f010ad02:	a0 bd 87 65 f0       	mov    0xf06587bd,%al
f010ad07:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad0a:	83 c8 0e             	or     $0xe,%eax
f010ad0d:	a2 bd 87 65 f0       	mov    %al,0xf06587bd
f010ad12:	a0 bd 87 65 f0       	mov    0xf06587bd,%al
f010ad17:	83 e0 ef             	and    $0xffffffef,%eax
f010ad1a:	a2 bd 87 65 f0       	mov    %al,0xf06587bd
f010ad1f:	a0 bd 87 65 f0       	mov    0xf06587bd,%al
f010ad24:	83 c8 60             	or     $0x60,%eax
f010ad27:	a2 bd 87 65 f0       	mov    %al,0xf06587bd
f010ad2c:	a0 bd 87 65 f0       	mov    0xf06587bd,%al
f010ad31:	83 c8 80             	or     $0xffffff80,%eax
f010ad34:	a2 bd 87 65 f0       	mov    %al,0xf06587bd
f010ad39:	b8 e8 bd 10 f0       	mov    $0xf010bde8,%eax
f010ad3e:	c1 e8 10             	shr    $0x10,%eax
f010ad41:	66 a3 be 87 65 f0    	mov    %ax,0xf06587be
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010ad47:	b8 ec bd 10 f0       	mov    $0xf010bdec,%eax
f010ad4c:	66 a3 c0 87 65 f0    	mov    %ax,0xf06587c0
f010ad52:	66 c7 05 c2 87 65 f0 	movw   $0x8,0xf06587c2
f010ad59:	08 00 
f010ad5b:	a0 c4 87 65 f0       	mov    0xf06587c4,%al
f010ad60:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad63:	a2 c4 87 65 f0       	mov    %al,0xf06587c4
f010ad68:	a0 c4 87 65 f0       	mov    0xf06587c4,%al
f010ad6d:	83 e0 1f             	and    $0x1f,%eax
f010ad70:	a2 c4 87 65 f0       	mov    %al,0xf06587c4
f010ad75:	a0 c5 87 65 f0       	mov    0xf06587c5,%al
f010ad7a:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad7d:	83 c8 0e             	or     $0xe,%eax
f010ad80:	a2 c5 87 65 f0       	mov    %al,0xf06587c5
f010ad85:	a0 c5 87 65 f0       	mov    0xf06587c5,%al
f010ad8a:	83 e0 ef             	and    $0xffffffef,%eax
f010ad8d:	a2 c5 87 65 f0       	mov    %al,0xf06587c5
f010ad92:	a0 c5 87 65 f0       	mov    0xf06587c5,%al
f010ad97:	83 c8 60             	or     $0x60,%eax
f010ad9a:	a2 c5 87 65 f0       	mov    %al,0xf06587c5
f010ad9f:	a0 c5 87 65 f0       	mov    0xf06587c5,%al
f010ada4:	83 c8 80             	or     $0xffffff80,%eax
f010ada7:	a2 c5 87 65 f0       	mov    %al,0xf06587c5
f010adac:	b8 ec bd 10 f0       	mov    $0xf010bdec,%eax
f010adb1:	c1 e8 10             	shr    $0x10,%eax
f010adb4:	66 a3 c6 87 65 f0    	mov    %ax,0xf06587c6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010adba:	b8 f0 bd 10 f0       	mov    $0xf010bdf0,%eax
f010adbf:	66 a3 c8 87 65 f0    	mov    %ax,0xf06587c8
f010adc5:	66 c7 05 ca 87 65 f0 	movw   $0x8,0xf06587ca
f010adcc:	08 00 
f010adce:	a0 cc 87 65 f0       	mov    0xf06587cc,%al
f010add3:	83 e0 e0             	and    $0xffffffe0,%eax
f010add6:	a2 cc 87 65 f0       	mov    %al,0xf06587cc
f010addb:	a0 cc 87 65 f0       	mov    0xf06587cc,%al
f010ade0:	83 e0 1f             	and    $0x1f,%eax
f010ade3:	a2 cc 87 65 f0       	mov    %al,0xf06587cc
f010ade8:	a0 cd 87 65 f0       	mov    0xf06587cd,%al
f010aded:	83 e0 f0             	and    $0xfffffff0,%eax
f010adf0:	83 c8 0e             	or     $0xe,%eax
f010adf3:	a2 cd 87 65 f0       	mov    %al,0xf06587cd
f010adf8:	a0 cd 87 65 f0       	mov    0xf06587cd,%al
f010adfd:	83 e0 ef             	and    $0xffffffef,%eax
f010ae00:	a2 cd 87 65 f0       	mov    %al,0xf06587cd
f010ae05:	a0 cd 87 65 f0       	mov    0xf06587cd,%al
f010ae0a:	83 c8 60             	or     $0x60,%eax
f010ae0d:	a2 cd 87 65 f0       	mov    %al,0xf06587cd
f010ae12:	a0 cd 87 65 f0       	mov    0xf06587cd,%al
f010ae17:	83 c8 80             	or     $0xffffff80,%eax
f010ae1a:	a2 cd 87 65 f0       	mov    %al,0xf06587cd
f010ae1f:	b8 f0 bd 10 f0       	mov    $0xf010bdf0,%eax
f010ae24:	c1 e8 10             	shr    $0x10,%eax
f010ae27:	66 a3 ce 87 65 f0    	mov    %ax,0xf06587ce
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010ae2d:	b8 f4 bd 10 f0       	mov    $0xf010bdf4,%eax
f010ae32:	66 a3 e0 87 65 f0    	mov    %ax,0xf06587e0
f010ae38:	66 c7 05 e2 87 65 f0 	movw   $0x8,0xf06587e2
f010ae3f:	08 00 
f010ae41:	a0 e4 87 65 f0       	mov    0xf06587e4,%al
f010ae46:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae49:	a2 e4 87 65 f0       	mov    %al,0xf06587e4
f010ae4e:	a0 e4 87 65 f0       	mov    0xf06587e4,%al
f010ae53:	83 e0 1f             	and    $0x1f,%eax
f010ae56:	a2 e4 87 65 f0       	mov    %al,0xf06587e4
f010ae5b:	a0 e5 87 65 f0       	mov    0xf06587e5,%al
f010ae60:	83 e0 f0             	and    $0xfffffff0,%eax
f010ae63:	83 c8 0e             	or     $0xe,%eax
f010ae66:	a2 e5 87 65 f0       	mov    %al,0xf06587e5
f010ae6b:	a0 e5 87 65 f0       	mov    0xf06587e5,%al
f010ae70:	83 e0 ef             	and    $0xffffffef,%eax
f010ae73:	a2 e5 87 65 f0       	mov    %al,0xf06587e5
f010ae78:	a0 e5 87 65 f0       	mov    0xf06587e5,%al
f010ae7d:	83 c8 60             	or     $0x60,%eax
f010ae80:	a2 e5 87 65 f0       	mov    %al,0xf06587e5
f010ae85:	a0 e5 87 65 f0       	mov    0xf06587e5,%al
f010ae8a:	83 c8 80             	or     $0xffffff80,%eax
f010ae8d:	a2 e5 87 65 f0       	mov    %al,0xf06587e5
f010ae92:	b8 f4 bd 10 f0       	mov    $0xf010bdf4,%eax
f010ae97:	c1 e8 10             	shr    $0x10,%eax
f010ae9a:	66 a3 e6 87 65 f0    	mov    %ax,0xf06587e6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010aea0:	b8 fa bd 10 f0       	mov    $0xf010bdfa,%eax
f010aea5:	66 a3 e8 87 65 f0    	mov    %ax,0xf06587e8
f010aeab:	66 c7 05 ea 87 65 f0 	movw   $0x8,0xf06587ea
f010aeb2:	08 00 
f010aeb4:	a0 ec 87 65 f0       	mov    0xf06587ec,%al
f010aeb9:	83 e0 e0             	and    $0xffffffe0,%eax
f010aebc:	a2 ec 87 65 f0       	mov    %al,0xf06587ec
f010aec1:	a0 ec 87 65 f0       	mov    0xf06587ec,%al
f010aec6:	83 e0 1f             	and    $0x1f,%eax
f010aec9:	a2 ec 87 65 f0       	mov    %al,0xf06587ec
f010aece:	a0 ed 87 65 f0       	mov    0xf06587ed,%al
f010aed3:	83 e0 f0             	and    $0xfffffff0,%eax
f010aed6:	83 c8 0e             	or     $0xe,%eax
f010aed9:	a2 ed 87 65 f0       	mov    %al,0xf06587ed
f010aede:	a0 ed 87 65 f0       	mov    0xf06587ed,%al
f010aee3:	83 e0 ef             	and    $0xffffffef,%eax
f010aee6:	a2 ed 87 65 f0       	mov    %al,0xf06587ed
f010aeeb:	a0 ed 87 65 f0       	mov    0xf06587ed,%al
f010aef0:	83 c8 60             	or     $0x60,%eax
f010aef3:	a2 ed 87 65 f0       	mov    %al,0xf06587ed
f010aef8:	a0 ed 87 65 f0       	mov    0xf06587ed,%al
f010aefd:	83 c8 80             	or     $0xffffff80,%eax
f010af00:	a2 ed 87 65 f0       	mov    %al,0xf06587ed
f010af05:	b8 fa bd 10 f0       	mov    $0xf010bdfa,%eax
f010af0a:	c1 e8 10             	shr    $0x10,%eax
f010af0d:	66 a3 ee 87 65 f0    	mov    %ax,0xf06587ee
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010af13:	b8 fe bd 10 f0       	mov    $0xf010bdfe,%eax
f010af18:	66 a3 f0 87 65 f0    	mov    %ax,0xf06587f0
f010af1e:	66 c7 05 f2 87 65 f0 	movw   $0x8,0xf06587f2
f010af25:	08 00 
f010af27:	a0 f4 87 65 f0       	mov    0xf06587f4,%al
f010af2c:	83 e0 e0             	and    $0xffffffe0,%eax
f010af2f:	a2 f4 87 65 f0       	mov    %al,0xf06587f4
f010af34:	a0 f4 87 65 f0       	mov    0xf06587f4,%al
f010af39:	83 e0 1f             	and    $0x1f,%eax
f010af3c:	a2 f4 87 65 f0       	mov    %al,0xf06587f4
f010af41:	a0 f5 87 65 f0       	mov    0xf06587f5,%al
f010af46:	83 e0 f0             	and    $0xfffffff0,%eax
f010af49:	83 c8 0e             	or     $0xe,%eax
f010af4c:	a2 f5 87 65 f0       	mov    %al,0xf06587f5
f010af51:	a0 f5 87 65 f0       	mov    0xf06587f5,%al
f010af56:	83 e0 ef             	and    $0xffffffef,%eax
f010af59:	a2 f5 87 65 f0       	mov    %al,0xf06587f5
f010af5e:	a0 f5 87 65 f0       	mov    0xf06587f5,%al
f010af63:	83 c8 60             	or     $0x60,%eax
f010af66:	a2 f5 87 65 f0       	mov    %al,0xf06587f5
f010af6b:	a0 f5 87 65 f0       	mov    0xf06587f5,%al
f010af70:	83 c8 80             	or     $0xffffff80,%eax
f010af73:	a2 f5 87 65 f0       	mov    %al,0xf06587f5
f010af78:	b8 fe bd 10 f0       	mov    $0xf010bdfe,%eax
f010af7d:	c1 e8 10             	shr    $0x10,%eax
f010af80:	66 a3 f6 87 65 f0    	mov    %ax,0xf06587f6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010af86:	b8 04 be 10 f0       	mov    $0xf010be04,%eax
f010af8b:	66 a3 f8 87 65 f0    	mov    %ax,0xf06587f8
f010af91:	66 c7 05 fa 87 65 f0 	movw   $0x8,0xf06587fa
f010af98:	08 00 
f010af9a:	a0 fc 87 65 f0       	mov    0xf06587fc,%al
f010af9f:	83 e0 e0             	and    $0xffffffe0,%eax
f010afa2:	a2 fc 87 65 f0       	mov    %al,0xf06587fc
f010afa7:	a0 fc 87 65 f0       	mov    0xf06587fc,%al
f010afac:	83 e0 1f             	and    $0x1f,%eax
f010afaf:	a2 fc 87 65 f0       	mov    %al,0xf06587fc
f010afb4:	a0 fd 87 65 f0       	mov    0xf06587fd,%al
f010afb9:	83 e0 f0             	and    $0xfffffff0,%eax
f010afbc:	83 c8 0e             	or     $0xe,%eax
f010afbf:	a2 fd 87 65 f0       	mov    %al,0xf06587fd
f010afc4:	a0 fd 87 65 f0       	mov    0xf06587fd,%al
f010afc9:	83 e0 ef             	and    $0xffffffef,%eax
f010afcc:	a2 fd 87 65 f0       	mov    %al,0xf06587fd
f010afd1:	a0 fd 87 65 f0       	mov    0xf06587fd,%al
f010afd6:	83 c8 60             	or     $0x60,%eax
f010afd9:	a2 fd 87 65 f0       	mov    %al,0xf06587fd
f010afde:	a0 fd 87 65 f0       	mov    0xf06587fd,%al
f010afe3:	83 c8 80             	or     $0xffffff80,%eax
f010afe6:	a2 fd 87 65 f0       	mov    %al,0xf06587fd
f010afeb:	b8 04 be 10 f0       	mov    $0xf010be04,%eax
f010aff0:	c1 e8 10             	shr    $0x10,%eax
f010aff3:	66 a3 fe 87 65 f0    	mov    %ax,0xf06587fe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010aff9:	b8 0a be 10 f0       	mov    $0xf010be0a,%eax
f010affe:	66 a3 60 88 65 f0    	mov    %ax,0xf0658860
f010b004:	66 c7 05 62 88 65 f0 	movw   $0x8,0xf0658862
f010b00b:	08 00 
f010b00d:	a0 64 88 65 f0       	mov    0xf0658864,%al
f010b012:	83 e0 e0             	and    $0xffffffe0,%eax
f010b015:	a2 64 88 65 f0       	mov    %al,0xf0658864
f010b01a:	a0 64 88 65 f0       	mov    0xf0658864,%al
f010b01f:	83 e0 1f             	and    $0x1f,%eax
f010b022:	a2 64 88 65 f0       	mov    %al,0xf0658864
f010b027:	a0 65 88 65 f0       	mov    0xf0658865,%al
f010b02c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b02f:	83 c8 0e             	or     $0xe,%eax
f010b032:	a2 65 88 65 f0       	mov    %al,0xf0658865
f010b037:	a0 65 88 65 f0       	mov    0xf0658865,%al
f010b03c:	83 e0 ef             	and    $0xffffffef,%eax
f010b03f:	a2 65 88 65 f0       	mov    %al,0xf0658865
f010b044:	a0 65 88 65 f0       	mov    0xf0658865,%al
f010b049:	83 c8 60             	or     $0x60,%eax
f010b04c:	a2 65 88 65 f0       	mov    %al,0xf0658865
f010b051:	a0 65 88 65 f0       	mov    0xf0658865,%al
f010b056:	83 c8 80             	or     $0xffffff80,%eax
f010b059:	a2 65 88 65 f0       	mov    %al,0xf0658865
f010b05e:	b8 0a be 10 f0       	mov    $0xf010be0a,%eax
f010b063:	c1 e8 10             	shr    $0x10,%eax
f010b066:	66 a3 66 88 65 f0    	mov    %ax,0xf0658866
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b06c:	b8 10 be 10 f0       	mov    $0xf010be10,%eax
f010b071:	66 a3 68 88 65 f0    	mov    %ax,0xf0658868
f010b077:	66 c7 05 6a 88 65 f0 	movw   $0x8,0xf065886a
f010b07e:	08 00 
f010b080:	a0 6c 88 65 f0       	mov    0xf065886c,%al
f010b085:	83 e0 e0             	and    $0xffffffe0,%eax
f010b088:	a2 6c 88 65 f0       	mov    %al,0xf065886c
f010b08d:	a0 6c 88 65 f0       	mov    0xf065886c,%al
f010b092:	83 e0 1f             	and    $0x1f,%eax
f010b095:	a2 6c 88 65 f0       	mov    %al,0xf065886c
f010b09a:	a0 6d 88 65 f0       	mov    0xf065886d,%al
f010b09f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0a2:	83 c8 0e             	or     $0xe,%eax
f010b0a5:	a2 6d 88 65 f0       	mov    %al,0xf065886d
f010b0aa:	a0 6d 88 65 f0       	mov    0xf065886d,%al
f010b0af:	83 e0 ef             	and    $0xffffffef,%eax
f010b0b2:	a2 6d 88 65 f0       	mov    %al,0xf065886d
f010b0b7:	a0 6d 88 65 f0       	mov    0xf065886d,%al
f010b0bc:	83 c8 60             	or     $0x60,%eax
f010b0bf:	a2 6d 88 65 f0       	mov    %al,0xf065886d
f010b0c4:	a0 6d 88 65 f0       	mov    0xf065886d,%al
f010b0c9:	83 c8 80             	or     $0xffffff80,%eax
f010b0cc:	a2 6d 88 65 f0       	mov    %al,0xf065886d
f010b0d1:	b8 10 be 10 f0       	mov    $0xf010be10,%eax
f010b0d6:	c1 e8 10             	shr    $0x10,%eax
f010b0d9:	66 a3 6e 88 65 f0    	mov    %ax,0xf065886e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b0df:	b8 16 be 10 f0       	mov    $0xf010be16,%eax
f010b0e4:	66 a3 70 88 65 f0    	mov    %ax,0xf0658870
f010b0ea:	66 c7 05 72 88 65 f0 	movw   $0x8,0xf0658872
f010b0f1:	08 00 
f010b0f3:	a0 74 88 65 f0       	mov    0xf0658874,%al
f010b0f8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0fb:	a2 74 88 65 f0       	mov    %al,0xf0658874
f010b100:	a0 74 88 65 f0       	mov    0xf0658874,%al
f010b105:	83 e0 1f             	and    $0x1f,%eax
f010b108:	a2 74 88 65 f0       	mov    %al,0xf0658874
f010b10d:	a0 75 88 65 f0       	mov    0xf0658875,%al
f010b112:	83 e0 f0             	and    $0xfffffff0,%eax
f010b115:	83 c8 0e             	or     $0xe,%eax
f010b118:	a2 75 88 65 f0       	mov    %al,0xf0658875
f010b11d:	a0 75 88 65 f0       	mov    0xf0658875,%al
f010b122:	83 e0 ef             	and    $0xffffffef,%eax
f010b125:	a2 75 88 65 f0       	mov    %al,0xf0658875
f010b12a:	a0 75 88 65 f0       	mov    0xf0658875,%al
f010b12f:	83 c8 60             	or     $0x60,%eax
f010b132:	a2 75 88 65 f0       	mov    %al,0xf0658875
f010b137:	a0 75 88 65 f0       	mov    0xf0658875,%al
f010b13c:	83 c8 80             	or     $0xffffff80,%eax
f010b13f:	a2 75 88 65 f0       	mov    %al,0xf0658875
f010b144:	b8 16 be 10 f0       	mov    $0xf010be16,%eax
f010b149:	c1 e8 10             	shr    $0x10,%eax
f010b14c:	66 a3 76 88 65 f0    	mov    %ax,0xf0658876
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b152:	b8 1c be 10 f0       	mov    $0xf010be1c,%eax
f010b157:	66 a3 78 88 65 f0    	mov    %ax,0xf0658878
f010b15d:	66 c7 05 7a 88 65 f0 	movw   $0x8,0xf065887a
f010b164:	08 00 
f010b166:	a0 7c 88 65 f0       	mov    0xf065887c,%al
f010b16b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b16e:	a2 7c 88 65 f0       	mov    %al,0xf065887c
f010b173:	a0 7c 88 65 f0       	mov    0xf065887c,%al
f010b178:	83 e0 1f             	and    $0x1f,%eax
f010b17b:	a2 7c 88 65 f0       	mov    %al,0xf065887c
f010b180:	a0 7d 88 65 f0       	mov    0xf065887d,%al
f010b185:	83 e0 f0             	and    $0xfffffff0,%eax
f010b188:	83 c8 0e             	or     $0xe,%eax
f010b18b:	a2 7d 88 65 f0       	mov    %al,0xf065887d
f010b190:	a0 7d 88 65 f0       	mov    0xf065887d,%al
f010b195:	83 e0 ef             	and    $0xffffffef,%eax
f010b198:	a2 7d 88 65 f0       	mov    %al,0xf065887d
f010b19d:	a0 7d 88 65 f0       	mov    0xf065887d,%al
f010b1a2:	83 c8 60             	or     $0x60,%eax
f010b1a5:	a2 7d 88 65 f0       	mov    %al,0xf065887d
f010b1aa:	a0 7d 88 65 f0       	mov    0xf065887d,%al
f010b1af:	83 c8 80             	or     $0xffffff80,%eax
f010b1b2:	a2 7d 88 65 f0       	mov    %al,0xf065887d
f010b1b7:	b8 1c be 10 f0       	mov    $0xf010be1c,%eax
f010b1bc:	c1 e8 10             	shr    $0x10,%eax
f010b1bf:	66 a3 7e 88 65 f0    	mov    %ax,0xf065887e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010b1c5:	b8 22 be 10 f0       	mov    $0xf010be22,%eax
f010b1ca:	66 a3 80 88 65 f0    	mov    %ax,0xf0658880
f010b1d0:	66 c7 05 82 88 65 f0 	movw   $0x8,0xf0658882
f010b1d7:	08 00 
f010b1d9:	a0 84 88 65 f0       	mov    0xf0658884,%al
f010b1de:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1e1:	a2 84 88 65 f0       	mov    %al,0xf0658884
f010b1e6:	a0 84 88 65 f0       	mov    0xf0658884,%al
f010b1eb:	83 e0 1f             	and    $0x1f,%eax
f010b1ee:	a2 84 88 65 f0       	mov    %al,0xf0658884
f010b1f3:	a0 85 88 65 f0       	mov    0xf0658885,%al
f010b1f8:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1fb:	83 c8 0e             	or     $0xe,%eax
f010b1fe:	a2 85 88 65 f0       	mov    %al,0xf0658885
f010b203:	a0 85 88 65 f0       	mov    0xf0658885,%al
f010b208:	83 e0 ef             	and    $0xffffffef,%eax
f010b20b:	a2 85 88 65 f0       	mov    %al,0xf0658885
f010b210:	a0 85 88 65 f0       	mov    0xf0658885,%al
f010b215:	83 c8 60             	or     $0x60,%eax
f010b218:	a2 85 88 65 f0       	mov    %al,0xf0658885
f010b21d:	a0 85 88 65 f0       	mov    0xf0658885,%al
f010b222:	83 c8 80             	or     $0xffffff80,%eax
f010b225:	a2 85 88 65 f0       	mov    %al,0xf0658885
f010b22a:	b8 22 be 10 f0       	mov    $0xf010be22,%eax
f010b22f:	c1 e8 10             	shr    $0x10,%eax
f010b232:	66 a3 86 88 65 f0    	mov    %ax,0xf0658886
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010b238:	b8 28 be 10 f0       	mov    $0xf010be28,%eax
f010b23d:	66 a3 88 88 65 f0    	mov    %ax,0xf0658888
f010b243:	66 c7 05 8a 88 65 f0 	movw   $0x8,0xf065888a
f010b24a:	08 00 
f010b24c:	a0 8c 88 65 f0       	mov    0xf065888c,%al
f010b251:	83 e0 e0             	and    $0xffffffe0,%eax
f010b254:	a2 8c 88 65 f0       	mov    %al,0xf065888c
f010b259:	a0 8c 88 65 f0       	mov    0xf065888c,%al
f010b25e:	83 e0 1f             	and    $0x1f,%eax
f010b261:	a2 8c 88 65 f0       	mov    %al,0xf065888c
f010b266:	a0 8d 88 65 f0       	mov    0xf065888d,%al
f010b26b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b26e:	83 c8 0e             	or     $0xe,%eax
f010b271:	a2 8d 88 65 f0       	mov    %al,0xf065888d
f010b276:	a0 8d 88 65 f0       	mov    0xf065888d,%al
f010b27b:	83 e0 ef             	and    $0xffffffef,%eax
f010b27e:	a2 8d 88 65 f0       	mov    %al,0xf065888d
f010b283:	a0 8d 88 65 f0       	mov    0xf065888d,%al
f010b288:	83 c8 60             	or     $0x60,%eax
f010b28b:	a2 8d 88 65 f0       	mov    %al,0xf065888d
f010b290:	a0 8d 88 65 f0       	mov    0xf065888d,%al
f010b295:	83 c8 80             	or     $0xffffff80,%eax
f010b298:	a2 8d 88 65 f0       	mov    %al,0xf065888d
f010b29d:	b8 28 be 10 f0       	mov    $0xf010be28,%eax
f010b2a2:	c1 e8 10             	shr    $0x10,%eax
f010b2a5:	66 a3 8e 88 65 f0    	mov    %ax,0xf065888e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010b2ab:	b8 2e be 10 f0       	mov    $0xf010be2e,%eax
f010b2b0:	66 a3 90 88 65 f0    	mov    %ax,0xf0658890
f010b2b6:	66 c7 05 92 88 65 f0 	movw   $0x8,0xf0658892
f010b2bd:	08 00 
f010b2bf:	a0 94 88 65 f0       	mov    0xf0658894,%al
f010b2c4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2c7:	a2 94 88 65 f0       	mov    %al,0xf0658894
f010b2cc:	a0 94 88 65 f0       	mov    0xf0658894,%al
f010b2d1:	83 e0 1f             	and    $0x1f,%eax
f010b2d4:	a2 94 88 65 f0       	mov    %al,0xf0658894
f010b2d9:	a0 95 88 65 f0       	mov    0xf0658895,%al
f010b2de:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2e1:	83 c8 0e             	or     $0xe,%eax
f010b2e4:	a2 95 88 65 f0       	mov    %al,0xf0658895
f010b2e9:	a0 95 88 65 f0       	mov    0xf0658895,%al
f010b2ee:	83 e0 ef             	and    $0xffffffef,%eax
f010b2f1:	a2 95 88 65 f0       	mov    %al,0xf0658895
f010b2f6:	a0 95 88 65 f0       	mov    0xf0658895,%al
f010b2fb:	83 c8 60             	or     $0x60,%eax
f010b2fe:	a2 95 88 65 f0       	mov    %al,0xf0658895
f010b303:	a0 95 88 65 f0       	mov    0xf0658895,%al
f010b308:	83 c8 80             	or     $0xffffff80,%eax
f010b30b:	a2 95 88 65 f0       	mov    %al,0xf0658895
f010b310:	b8 2e be 10 f0       	mov    $0xf010be2e,%eax
f010b315:	c1 e8 10             	shr    $0x10,%eax
f010b318:	66 a3 96 88 65 f0    	mov    %ax,0xf0658896
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010b31e:	b8 34 be 10 f0       	mov    $0xf010be34,%eax
f010b323:	66 a3 98 88 65 f0    	mov    %ax,0xf0658898
f010b329:	66 c7 05 9a 88 65 f0 	movw   $0x8,0xf065889a
f010b330:	08 00 
f010b332:	a0 9c 88 65 f0       	mov    0xf065889c,%al
f010b337:	83 e0 e0             	and    $0xffffffe0,%eax
f010b33a:	a2 9c 88 65 f0       	mov    %al,0xf065889c
f010b33f:	a0 9c 88 65 f0       	mov    0xf065889c,%al
f010b344:	83 e0 1f             	and    $0x1f,%eax
f010b347:	a2 9c 88 65 f0       	mov    %al,0xf065889c
f010b34c:	a0 9d 88 65 f0       	mov    0xf065889d,%al
f010b351:	83 e0 f0             	and    $0xfffffff0,%eax
f010b354:	83 c8 0e             	or     $0xe,%eax
f010b357:	a2 9d 88 65 f0       	mov    %al,0xf065889d
f010b35c:	a0 9d 88 65 f0       	mov    0xf065889d,%al
f010b361:	83 e0 ef             	and    $0xffffffef,%eax
f010b364:	a2 9d 88 65 f0       	mov    %al,0xf065889d
f010b369:	a0 9d 88 65 f0       	mov    0xf065889d,%al
f010b36e:	83 c8 60             	or     $0x60,%eax
f010b371:	a2 9d 88 65 f0       	mov    %al,0xf065889d
f010b376:	a0 9d 88 65 f0       	mov    0xf065889d,%al
f010b37b:	83 c8 80             	or     $0xffffff80,%eax
f010b37e:	a2 9d 88 65 f0       	mov    %al,0xf065889d
f010b383:	b8 34 be 10 f0       	mov    $0xf010be34,%eax
f010b388:	c1 e8 10             	shr    $0x10,%eax
f010b38b:	66 a3 9e 88 65 f0    	mov    %ax,0xf065889e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010b391:	b8 3a be 10 f0       	mov    $0xf010be3a,%eax
f010b396:	66 a3 a0 88 65 f0    	mov    %ax,0xf06588a0
f010b39c:	66 c7 05 a2 88 65 f0 	movw   $0x8,0xf06588a2
f010b3a3:	08 00 
f010b3a5:	a0 a4 88 65 f0       	mov    0xf06588a4,%al
f010b3aa:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3ad:	a2 a4 88 65 f0       	mov    %al,0xf06588a4
f010b3b2:	a0 a4 88 65 f0       	mov    0xf06588a4,%al
f010b3b7:	83 e0 1f             	and    $0x1f,%eax
f010b3ba:	a2 a4 88 65 f0       	mov    %al,0xf06588a4
f010b3bf:	a0 a5 88 65 f0       	mov    0xf06588a5,%al
f010b3c4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3c7:	83 c8 0e             	or     $0xe,%eax
f010b3ca:	a2 a5 88 65 f0       	mov    %al,0xf06588a5
f010b3cf:	a0 a5 88 65 f0       	mov    0xf06588a5,%al
f010b3d4:	83 e0 ef             	and    $0xffffffef,%eax
f010b3d7:	a2 a5 88 65 f0       	mov    %al,0xf06588a5
f010b3dc:	a0 a5 88 65 f0       	mov    0xf06588a5,%al
f010b3e1:	83 c8 60             	or     $0x60,%eax
f010b3e4:	a2 a5 88 65 f0       	mov    %al,0xf06588a5
f010b3e9:	a0 a5 88 65 f0       	mov    0xf06588a5,%al
f010b3ee:	83 c8 80             	or     $0xffffff80,%eax
f010b3f1:	a2 a5 88 65 f0       	mov    %al,0xf06588a5
f010b3f6:	b8 3a be 10 f0       	mov    $0xf010be3a,%eax
f010b3fb:	c1 e8 10             	shr    $0x10,%eax
f010b3fe:	66 a3 a6 88 65 f0    	mov    %ax,0xf06588a6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010b404:	b8 40 be 10 f0       	mov    $0xf010be40,%eax
f010b409:	66 a3 a8 88 65 f0    	mov    %ax,0xf06588a8
f010b40f:	66 c7 05 aa 88 65 f0 	movw   $0x8,0xf06588aa
f010b416:	08 00 
f010b418:	a0 ac 88 65 f0       	mov    0xf06588ac,%al
f010b41d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b420:	a2 ac 88 65 f0       	mov    %al,0xf06588ac
f010b425:	a0 ac 88 65 f0       	mov    0xf06588ac,%al
f010b42a:	83 e0 1f             	and    $0x1f,%eax
f010b42d:	a2 ac 88 65 f0       	mov    %al,0xf06588ac
f010b432:	a0 ad 88 65 f0       	mov    0xf06588ad,%al
f010b437:	83 e0 f0             	and    $0xfffffff0,%eax
f010b43a:	83 c8 0e             	or     $0xe,%eax
f010b43d:	a2 ad 88 65 f0       	mov    %al,0xf06588ad
f010b442:	a0 ad 88 65 f0       	mov    0xf06588ad,%al
f010b447:	83 e0 ef             	and    $0xffffffef,%eax
f010b44a:	a2 ad 88 65 f0       	mov    %al,0xf06588ad
f010b44f:	a0 ad 88 65 f0       	mov    0xf06588ad,%al
f010b454:	83 c8 60             	or     $0x60,%eax
f010b457:	a2 ad 88 65 f0       	mov    %al,0xf06588ad
f010b45c:	a0 ad 88 65 f0       	mov    0xf06588ad,%al
f010b461:	83 c8 80             	or     $0xffffff80,%eax
f010b464:	a2 ad 88 65 f0       	mov    %al,0xf06588ad
f010b469:	b8 40 be 10 f0       	mov    $0xf010be40,%eax
f010b46e:	c1 e8 10             	shr    $0x10,%eax
f010b471:	66 a3 ae 88 65 f0    	mov    %ax,0xf06588ae
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010b477:	b8 46 be 10 f0       	mov    $0xf010be46,%eax
f010b47c:	66 a3 b0 88 65 f0    	mov    %ax,0xf06588b0
f010b482:	66 c7 05 b2 88 65 f0 	movw   $0x8,0xf06588b2
f010b489:	08 00 
f010b48b:	a0 b4 88 65 f0       	mov    0xf06588b4,%al
f010b490:	83 e0 e0             	and    $0xffffffe0,%eax
f010b493:	a2 b4 88 65 f0       	mov    %al,0xf06588b4
f010b498:	a0 b4 88 65 f0       	mov    0xf06588b4,%al
f010b49d:	83 e0 1f             	and    $0x1f,%eax
f010b4a0:	a2 b4 88 65 f0       	mov    %al,0xf06588b4
f010b4a5:	a0 b5 88 65 f0       	mov    0xf06588b5,%al
f010b4aa:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4ad:	83 c8 0e             	or     $0xe,%eax
f010b4b0:	a2 b5 88 65 f0       	mov    %al,0xf06588b5
f010b4b5:	a0 b5 88 65 f0       	mov    0xf06588b5,%al
f010b4ba:	83 e0 ef             	and    $0xffffffef,%eax
f010b4bd:	a2 b5 88 65 f0       	mov    %al,0xf06588b5
f010b4c2:	a0 b5 88 65 f0       	mov    0xf06588b5,%al
f010b4c7:	83 c8 60             	or     $0x60,%eax
f010b4ca:	a2 b5 88 65 f0       	mov    %al,0xf06588b5
f010b4cf:	a0 b5 88 65 f0       	mov    0xf06588b5,%al
f010b4d4:	83 c8 80             	or     $0xffffff80,%eax
f010b4d7:	a2 b5 88 65 f0       	mov    %al,0xf06588b5
f010b4dc:	b8 46 be 10 f0       	mov    $0xf010be46,%eax
f010b4e1:	c1 e8 10             	shr    $0x10,%eax
f010b4e4:	66 a3 b6 88 65 f0    	mov    %ax,0xf06588b6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010b4ea:	b8 4c be 10 f0       	mov    $0xf010be4c,%eax
f010b4ef:	66 a3 b8 88 65 f0    	mov    %ax,0xf06588b8
f010b4f5:	66 c7 05 ba 88 65 f0 	movw   $0x8,0xf06588ba
f010b4fc:	08 00 
f010b4fe:	a0 bc 88 65 f0       	mov    0xf06588bc,%al
f010b503:	83 e0 e0             	and    $0xffffffe0,%eax
f010b506:	a2 bc 88 65 f0       	mov    %al,0xf06588bc
f010b50b:	a0 bc 88 65 f0       	mov    0xf06588bc,%al
f010b510:	83 e0 1f             	and    $0x1f,%eax
f010b513:	a2 bc 88 65 f0       	mov    %al,0xf06588bc
f010b518:	a0 bd 88 65 f0       	mov    0xf06588bd,%al
f010b51d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b520:	83 c8 0e             	or     $0xe,%eax
f010b523:	a2 bd 88 65 f0       	mov    %al,0xf06588bd
f010b528:	a0 bd 88 65 f0       	mov    0xf06588bd,%al
f010b52d:	83 e0 ef             	and    $0xffffffef,%eax
f010b530:	a2 bd 88 65 f0       	mov    %al,0xf06588bd
f010b535:	a0 bd 88 65 f0       	mov    0xf06588bd,%al
f010b53a:	83 c8 60             	or     $0x60,%eax
f010b53d:	a2 bd 88 65 f0       	mov    %al,0xf06588bd
f010b542:	a0 bd 88 65 f0       	mov    0xf06588bd,%al
f010b547:	83 c8 80             	or     $0xffffff80,%eax
f010b54a:	a2 bd 88 65 f0       	mov    %al,0xf06588bd
f010b54f:	b8 4c be 10 f0       	mov    $0xf010be4c,%eax
f010b554:	c1 e8 10             	shr    $0x10,%eax
f010b557:	66 a3 be 88 65 f0    	mov    %ax,0xf06588be
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010b55d:	b8 52 be 10 f0       	mov    $0xf010be52,%eax
f010b562:	66 a3 c0 88 65 f0    	mov    %ax,0xf06588c0
f010b568:	66 c7 05 c2 88 65 f0 	movw   $0x8,0xf06588c2
f010b56f:	08 00 
f010b571:	a0 c4 88 65 f0       	mov    0xf06588c4,%al
f010b576:	83 e0 e0             	and    $0xffffffe0,%eax
f010b579:	a2 c4 88 65 f0       	mov    %al,0xf06588c4
f010b57e:	a0 c4 88 65 f0       	mov    0xf06588c4,%al
f010b583:	83 e0 1f             	and    $0x1f,%eax
f010b586:	a2 c4 88 65 f0       	mov    %al,0xf06588c4
f010b58b:	a0 c5 88 65 f0       	mov    0xf06588c5,%al
f010b590:	83 e0 f0             	and    $0xfffffff0,%eax
f010b593:	83 c8 0e             	or     $0xe,%eax
f010b596:	a2 c5 88 65 f0       	mov    %al,0xf06588c5
f010b59b:	a0 c5 88 65 f0       	mov    0xf06588c5,%al
f010b5a0:	83 e0 ef             	and    $0xffffffef,%eax
f010b5a3:	a2 c5 88 65 f0       	mov    %al,0xf06588c5
f010b5a8:	a0 c5 88 65 f0       	mov    0xf06588c5,%al
f010b5ad:	83 c8 60             	or     $0x60,%eax
f010b5b0:	a2 c5 88 65 f0       	mov    %al,0xf06588c5
f010b5b5:	a0 c5 88 65 f0       	mov    0xf06588c5,%al
f010b5ba:	83 c8 80             	or     $0xffffff80,%eax
f010b5bd:	a2 c5 88 65 f0       	mov    %al,0xf06588c5
f010b5c2:	b8 52 be 10 f0       	mov    $0xf010be52,%eax
f010b5c7:	c1 e8 10             	shr    $0x10,%eax
f010b5ca:	66 a3 c6 88 65 f0    	mov    %ax,0xf06588c6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010b5d0:	b8 58 be 10 f0       	mov    $0xf010be58,%eax
f010b5d5:	66 a3 c8 88 65 f0    	mov    %ax,0xf06588c8
f010b5db:	66 c7 05 ca 88 65 f0 	movw   $0x8,0xf06588ca
f010b5e2:	08 00 
f010b5e4:	a0 cc 88 65 f0       	mov    0xf06588cc,%al
f010b5e9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5ec:	a2 cc 88 65 f0       	mov    %al,0xf06588cc
f010b5f1:	a0 cc 88 65 f0       	mov    0xf06588cc,%al
f010b5f6:	83 e0 1f             	and    $0x1f,%eax
f010b5f9:	a2 cc 88 65 f0       	mov    %al,0xf06588cc
f010b5fe:	a0 cd 88 65 f0       	mov    0xf06588cd,%al
f010b603:	83 e0 f0             	and    $0xfffffff0,%eax
f010b606:	83 c8 0e             	or     $0xe,%eax
f010b609:	a2 cd 88 65 f0       	mov    %al,0xf06588cd
f010b60e:	a0 cd 88 65 f0       	mov    0xf06588cd,%al
f010b613:	83 e0 ef             	and    $0xffffffef,%eax
f010b616:	a2 cd 88 65 f0       	mov    %al,0xf06588cd
f010b61b:	a0 cd 88 65 f0       	mov    0xf06588cd,%al
f010b620:	83 c8 60             	or     $0x60,%eax
f010b623:	a2 cd 88 65 f0       	mov    %al,0xf06588cd
f010b628:	a0 cd 88 65 f0       	mov    0xf06588cd,%al
f010b62d:	83 c8 80             	or     $0xffffff80,%eax
f010b630:	a2 cd 88 65 f0       	mov    %al,0xf06588cd
f010b635:	b8 58 be 10 f0       	mov    $0xf010be58,%eax
f010b63a:	c1 e8 10             	shr    $0x10,%eax
f010b63d:	66 a3 ce 88 65 f0    	mov    %ax,0xf06588ce
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010b643:	b8 5e be 10 f0       	mov    $0xf010be5e,%eax
f010b648:	66 a3 d0 88 65 f0    	mov    %ax,0xf06588d0
f010b64e:	66 c7 05 d2 88 65 f0 	movw   $0x8,0xf06588d2
f010b655:	08 00 
f010b657:	a0 d4 88 65 f0       	mov    0xf06588d4,%al
f010b65c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b65f:	a2 d4 88 65 f0       	mov    %al,0xf06588d4
f010b664:	a0 d4 88 65 f0       	mov    0xf06588d4,%al
f010b669:	83 e0 1f             	and    $0x1f,%eax
f010b66c:	a2 d4 88 65 f0       	mov    %al,0xf06588d4
f010b671:	a0 d5 88 65 f0       	mov    0xf06588d5,%al
f010b676:	83 e0 f0             	and    $0xfffffff0,%eax
f010b679:	83 c8 0e             	or     $0xe,%eax
f010b67c:	a2 d5 88 65 f0       	mov    %al,0xf06588d5
f010b681:	a0 d5 88 65 f0       	mov    0xf06588d5,%al
f010b686:	83 e0 ef             	and    $0xffffffef,%eax
f010b689:	a2 d5 88 65 f0       	mov    %al,0xf06588d5
f010b68e:	a0 d5 88 65 f0       	mov    0xf06588d5,%al
f010b693:	83 c8 60             	or     $0x60,%eax
f010b696:	a2 d5 88 65 f0       	mov    %al,0xf06588d5
f010b69b:	a0 d5 88 65 f0       	mov    0xf06588d5,%al
f010b6a0:	83 c8 80             	or     $0xffffff80,%eax
f010b6a3:	a2 d5 88 65 f0       	mov    %al,0xf06588d5
f010b6a8:	b8 5e be 10 f0       	mov    $0xf010be5e,%eax
f010b6ad:	c1 e8 10             	shr    $0x10,%eax
f010b6b0:	66 a3 d6 88 65 f0    	mov    %ax,0xf06588d6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010b6b6:	b8 64 be 10 f0       	mov    $0xf010be64,%eax
f010b6bb:	66 a3 d8 88 65 f0    	mov    %ax,0xf06588d8
f010b6c1:	66 c7 05 da 88 65 f0 	movw   $0x8,0xf06588da
f010b6c8:	08 00 
f010b6ca:	a0 dc 88 65 f0       	mov    0xf06588dc,%al
f010b6cf:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6d2:	a2 dc 88 65 f0       	mov    %al,0xf06588dc
f010b6d7:	a0 dc 88 65 f0       	mov    0xf06588dc,%al
f010b6dc:	83 e0 1f             	and    $0x1f,%eax
f010b6df:	a2 dc 88 65 f0       	mov    %al,0xf06588dc
f010b6e4:	a0 dd 88 65 f0       	mov    0xf06588dd,%al
f010b6e9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6ec:	83 c8 0e             	or     $0xe,%eax
f010b6ef:	a2 dd 88 65 f0       	mov    %al,0xf06588dd
f010b6f4:	a0 dd 88 65 f0       	mov    0xf06588dd,%al
f010b6f9:	83 e0 ef             	and    $0xffffffef,%eax
f010b6fc:	a2 dd 88 65 f0       	mov    %al,0xf06588dd
f010b701:	a0 dd 88 65 f0       	mov    0xf06588dd,%al
f010b706:	83 c8 60             	or     $0x60,%eax
f010b709:	a2 dd 88 65 f0       	mov    %al,0xf06588dd
f010b70e:	a0 dd 88 65 f0       	mov    0xf06588dd,%al
f010b713:	83 c8 80             	or     $0xffffff80,%eax
f010b716:	a2 dd 88 65 f0       	mov    %al,0xf06588dd
f010b71b:	b8 64 be 10 f0       	mov    $0xf010be64,%eax
f010b720:	c1 e8 10             	shr    $0x10,%eax
f010b723:	66 a3 de 88 65 f0    	mov    %ax,0xf06588de



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010b729:	c7 05 64 8f 65 f0 00 	movl   $0xefc00000,0xf0658f64
f010b730:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010b733:	66 c7 05 68 8f 65 f0 	movw   $0x10,0xf0658f68
f010b73a:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010b73c:	66 c7 05 e8 08 19 f0 	movw   $0x68,0xf01908e8
f010b743:	68 00 
f010b745:	b8 60 8f 65 f0       	mov    $0xf0658f60,%eax
f010b74a:	66 a3 ea 08 19 f0    	mov    %ax,0xf01908ea
f010b750:	b8 60 8f 65 f0       	mov    $0xf0658f60,%eax
f010b755:	c1 e8 10             	shr    $0x10,%eax
f010b758:	a2 ec 08 19 f0       	mov    %al,0xf01908ec
f010b75d:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b762:	83 e0 f0             	and    $0xfffffff0,%eax
f010b765:	83 c8 09             	or     $0x9,%eax
f010b768:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b76d:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b772:	83 c8 10             	or     $0x10,%eax
f010b775:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b77a:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b77f:	83 e0 9f             	and    $0xffffff9f,%eax
f010b782:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b787:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b78c:	83 c8 80             	or     $0xffffff80,%eax
f010b78f:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b794:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b799:	83 e0 f0             	and    $0xfffffff0,%eax
f010b79c:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7a1:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b7a6:	83 e0 ef             	and    $0xffffffef,%eax
f010b7a9:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7ae:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b7b3:	83 e0 df             	and    $0xffffffdf,%eax
f010b7b6:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7bb:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b7c0:	83 c8 40             	or     $0x40,%eax
f010b7c3:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7c8:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b7cd:	83 e0 7f             	and    $0x7f,%eax
f010b7d0:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7d5:	b8 60 8f 65 f0       	mov    $0xf0658f60,%eax
f010b7da:	c1 e8 18             	shr    $0x18,%eax
f010b7dd:	a2 ef 08 19 f0       	mov    %al,0xf01908ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010b7e2:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b7e7:	83 e0 ef             	and    $0xffffffef,%eax
f010b7ea:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b7ef:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010b7f5:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010b7f9:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010b7fc:	0f 01 1d c8 0c 19 f0 	lidtl  0xf0190cc8
}
f010b803:	90                   	nop
f010b804:	c9                   	leave  
f010b805:	c3                   	ret    

f010b806 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010b806:	55                   	push   %ebp
f010b807:	89 e5                	mov    %esp,%ebp
f010b809:	53                   	push   %ebx
f010b80a:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010b80d:	83 ec 08             	sub    $0x8,%esp
f010b810:	ff 75 08             	pushl  0x8(%ebp)
f010b813:	68 fb 66 13 f0       	push   $0xf01366fb
f010b818:	e8 10 54 ff ff       	call   f0100c2d <cprintf>
f010b81d:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010b820:	8b 45 08             	mov    0x8(%ebp),%eax
f010b823:	83 ec 0c             	sub    $0xc,%esp
f010b826:	50                   	push   %eax
f010b827:	e8 fd 00 00 00       	call   f010b929 <print_regs>
f010b82c:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010b82f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b832:	8b 40 20             	mov    0x20(%eax),%eax
f010b835:	0f b7 c0             	movzwl %ax,%eax
f010b838:	83 ec 08             	sub    $0x8,%esp
f010b83b:	50                   	push   %eax
f010b83c:	68 0d 67 13 f0       	push   $0xf013670d
f010b841:	e8 e7 53 ff ff       	call   f0100c2d <cprintf>
f010b846:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010b849:	8b 45 08             	mov    0x8(%ebp),%eax
f010b84c:	8b 40 24             	mov    0x24(%eax),%eax
f010b84f:	0f b7 c0             	movzwl %ax,%eax
f010b852:	83 ec 08             	sub    $0x8,%esp
f010b855:	50                   	push   %eax
f010b856:	68 20 67 13 f0       	push   $0xf0136720
f010b85b:	e8 cd 53 ff ff       	call   f0100c2d <cprintf>
f010b860:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010b863:	8b 45 08             	mov    0x8(%ebp),%eax
f010b866:	8b 58 28             	mov    0x28(%eax),%ebx
f010b869:	8b 45 08             	mov    0x8(%ebp),%eax
f010b86c:	8b 40 28             	mov    0x28(%eax),%eax
f010b86f:	83 ec 0c             	sub    $0xc,%esp
f010b872:	50                   	push   %eax
f010b873:	e8 d0 ee ff ff       	call   f010a748 <trapname>
f010b878:	83 c4 10             	add    $0x10,%esp
f010b87b:	89 c2                	mov    %eax,%edx
f010b87d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b880:	8b 40 28             	mov    0x28(%eax),%eax
f010b883:	53                   	push   %ebx
f010b884:	52                   	push   %edx
f010b885:	50                   	push   %eax
f010b886:	68 33 67 13 f0       	push   $0xf0136733
f010b88b:	e8 9d 53 ff ff       	call   f0100c2d <cprintf>
f010b890:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010b893:	8b 45 08             	mov    0x8(%ebp),%eax
f010b896:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b899:	83 ec 08             	sub    $0x8,%esp
f010b89c:	50                   	push   %eax
f010b89d:	68 4a 67 13 f0       	push   $0xf013674a
f010b8a2:	e8 86 53 ff ff       	call   f0100c2d <cprintf>
f010b8a7:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010b8aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8ad:	8b 40 30             	mov    0x30(%eax),%eax
f010b8b0:	83 ec 08             	sub    $0x8,%esp
f010b8b3:	50                   	push   %eax
f010b8b4:	68 59 67 13 f0       	push   $0xf0136759
f010b8b9:	e8 6f 53 ff ff       	call   f0100c2d <cprintf>
f010b8be:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010b8c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8c4:	8b 40 34             	mov    0x34(%eax),%eax
f010b8c7:	0f b7 c0             	movzwl %ax,%eax
f010b8ca:	83 ec 08             	sub    $0x8,%esp
f010b8cd:	50                   	push   %eax
f010b8ce:	68 68 67 13 f0       	push   $0xf0136768
f010b8d3:	e8 55 53 ff ff       	call   f0100c2d <cprintf>
f010b8d8:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010b8db:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8de:	8b 40 38             	mov    0x38(%eax),%eax
f010b8e1:	83 ec 08             	sub    $0x8,%esp
f010b8e4:	50                   	push   %eax
f010b8e5:	68 7b 67 13 f0       	push   $0xf013677b
f010b8ea:	e8 3e 53 ff ff       	call   f0100c2d <cprintf>
f010b8ef:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010b8f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8f5:	8b 40 3c             	mov    0x3c(%eax),%eax
f010b8f8:	83 ec 08             	sub    $0x8,%esp
f010b8fb:	50                   	push   %eax
f010b8fc:	68 8a 67 13 f0       	push   $0xf013678a
f010b901:	e8 27 53 ff ff       	call   f0100c2d <cprintf>
f010b906:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010b909:	8b 45 08             	mov    0x8(%ebp),%eax
f010b90c:	8b 40 40             	mov    0x40(%eax),%eax
f010b90f:	0f b7 c0             	movzwl %ax,%eax
f010b912:	83 ec 08             	sub    $0x8,%esp
f010b915:	50                   	push   %eax
f010b916:	68 99 67 13 f0       	push   $0xf0136799
f010b91b:	e8 0d 53 ff ff       	call   f0100c2d <cprintf>
f010b920:	83 c4 10             	add    $0x10,%esp
}
f010b923:	90                   	nop
f010b924:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b927:	c9                   	leave  
f010b928:	c3                   	ret    

f010b929 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010b929:	55                   	push   %ebp
f010b92a:	89 e5                	mov    %esp,%ebp
f010b92c:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010b92f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b932:	8b 00                	mov    (%eax),%eax
f010b934:	83 ec 08             	sub    $0x8,%esp
f010b937:	50                   	push   %eax
f010b938:	68 ac 67 13 f0       	push   $0xf01367ac
f010b93d:	e8 eb 52 ff ff       	call   f0100c2d <cprintf>
f010b942:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010b945:	8b 45 08             	mov    0x8(%ebp),%eax
f010b948:	8b 40 04             	mov    0x4(%eax),%eax
f010b94b:	83 ec 08             	sub    $0x8,%esp
f010b94e:	50                   	push   %eax
f010b94f:	68 bb 67 13 f0       	push   $0xf01367bb
f010b954:	e8 d4 52 ff ff       	call   f0100c2d <cprintf>
f010b959:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010b95c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b95f:	8b 40 08             	mov    0x8(%eax),%eax
f010b962:	83 ec 08             	sub    $0x8,%esp
f010b965:	50                   	push   %eax
f010b966:	68 ca 67 13 f0       	push   $0xf01367ca
f010b96b:	e8 bd 52 ff ff       	call   f0100c2d <cprintf>
f010b970:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010b973:	8b 45 08             	mov    0x8(%ebp),%eax
f010b976:	8b 40 0c             	mov    0xc(%eax),%eax
f010b979:	83 ec 08             	sub    $0x8,%esp
f010b97c:	50                   	push   %eax
f010b97d:	68 d9 67 13 f0       	push   $0xf01367d9
f010b982:	e8 a6 52 ff ff       	call   f0100c2d <cprintf>
f010b987:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010b98a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b98d:	8b 40 10             	mov    0x10(%eax),%eax
f010b990:	83 ec 08             	sub    $0x8,%esp
f010b993:	50                   	push   %eax
f010b994:	68 e8 67 13 f0       	push   $0xf01367e8
f010b999:	e8 8f 52 ff ff       	call   f0100c2d <cprintf>
f010b99e:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010b9a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9a4:	8b 40 14             	mov    0x14(%eax),%eax
f010b9a7:	83 ec 08             	sub    $0x8,%esp
f010b9aa:	50                   	push   %eax
f010b9ab:	68 f7 67 13 f0       	push   $0xf01367f7
f010b9b0:	e8 78 52 ff ff       	call   f0100c2d <cprintf>
f010b9b5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010b9b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9bb:	8b 40 18             	mov    0x18(%eax),%eax
f010b9be:	83 ec 08             	sub    $0x8,%esp
f010b9c1:	50                   	push   %eax
f010b9c2:	68 06 68 13 f0       	push   $0xf0136806
f010b9c7:	e8 61 52 ff ff       	call   f0100c2d <cprintf>
f010b9cc:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010b9cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9d2:	8b 40 1c             	mov    0x1c(%eax),%eax
f010b9d5:	83 ec 08             	sub    $0x8,%esp
f010b9d8:	50                   	push   %eax
f010b9d9:	68 15 68 13 f0       	push   $0xf0136815
f010b9de:	e8 4a 52 ff ff       	call   f0100c2d <cprintf>
f010b9e3:	83 c4 10             	add    $0x10,%esp
}
f010b9e6:	90                   	nop
f010b9e7:	c9                   	leave  
f010b9e8:	c3                   	ret    

f010b9e9 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010b9e9:	55                   	push   %ebp
f010b9ea:	89 e5                	mov    %esp,%ebp
f010b9ec:	57                   	push   %edi
f010b9ed:	56                   	push   %esi
f010b9ee:	53                   	push   %ebx
f010b9ef:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010b9f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9f5:	8b 40 28             	mov    0x28(%eax),%eax
f010b9f8:	83 f8 0e             	cmp    $0xe,%eax
f010b9fb:	75 29                	jne    f010ba26 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010b9fd:	83 ec 0c             	sub    $0xc,%esp
f010ba00:	6a 01                	push   $0x1
f010ba02:	e8 5a 18 00 00       	call   f010d261 <isPageReplacmentAlgorithmLRU>
f010ba07:	83 c4 10             	add    $0x10,%esp
f010ba0a:	85 c0                	test   %eax,%eax
f010ba0c:	74 05                	je     f010ba13 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010ba0e:	e8 a1 9e ff ff       	call   f01058b4 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010ba13:	83 ec 0c             	sub    $0xc,%esp
f010ba16:	ff 75 08             	pushl  0x8(%ebp)
f010ba19:	e8 3b 02 00 00       	call   f010bc59 <fault_handler>
f010ba1e:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010ba21:	e9 a5 00 00 00       	jmp    f010bacb <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010ba26:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba29:	8b 40 28             	mov    0x28(%eax),%eax
f010ba2c:	83 f8 30             	cmp    $0x30,%eax
f010ba2f:	75 42                	jne    f010ba73 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010ba31:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba34:	8b 78 04             	mov    0x4(%eax),%edi
f010ba37:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba3a:	8b 30                	mov    (%eax),%esi
f010ba3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba3f:	8b 58 10             	mov    0x10(%eax),%ebx
f010ba42:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba45:	8b 48 18             	mov    0x18(%eax),%ecx
f010ba48:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba4b:	8b 50 14             	mov    0x14(%eax),%edx
f010ba4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba51:	8b 40 1c             	mov    0x1c(%eax),%eax
f010ba54:	83 ec 08             	sub    $0x8,%esp
f010ba57:	57                   	push   %edi
f010ba58:	56                   	push   %esi
f010ba59:	53                   	push   %ebx
f010ba5a:	51                   	push   %ecx
f010ba5b:	52                   	push   %edx
f010ba5c:	50                   	push   %eax
f010ba5d:	e8 4a 0f 00 00       	call   f010c9ac <syscall>
f010ba62:	83 c4 20             	add    $0x20,%esp
f010ba65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010ba68:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba6b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ba6e:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010ba71:	eb 58                	jmp    f010bacb <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010ba73:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba76:	8b 40 28             	mov    0x28(%eax),%eax
f010ba79:	83 f8 08             	cmp    $0x8,%eax
f010ba7c:	75 17                	jne    f010ba95 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010ba7e:	83 ec 04             	sub    $0x4,%esp
f010ba81:	68 24 68 13 f0       	push   $0xf0136824
f010ba86:	68 e7 00 00 00       	push   $0xe7
f010ba8b:	68 33 68 13 f0       	push   $0xf0136833
f010ba90:	e8 11 47 ff ff       	call   f01001a6 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010ba95:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba98:	8b 40 28             	mov    0x28(%eax),%eax
f010ba9b:	83 f8 20             	cmp    $0x20,%eax
f010ba9e:	75 07                	jne    f010baa7 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010baa0:	e8 ee 9d ff ff       	call   f0105893 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010baa5:	eb 24                	jmp    f010bacb <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010baa7:	8b 45 08             	mov    0x8(%ebp),%eax
f010baaa:	8b 40 34             	mov    0x34(%eax),%eax
f010baad:	66 83 f8 08          	cmp    $0x8,%ax
f010bab1:	75 17                	jne    f010baca <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010bab3:	83 ec 04             	sub    $0x4,%esp
f010bab6:	68 44 68 13 f0       	push   $0xf0136844
f010babb:	68 f4 00 00 00       	push   $0xf4
f010bac0:	68 33 68 13 f0       	push   $0xf0136833
f010bac5:	e8 dc 46 ff ff       	call   f01001a6 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010baca:	90                   	nop
		}
	}
	return;
}
f010bacb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010bace:	5b                   	pop    %ebx
f010bacf:	5e                   	pop    %esi
f010bad0:	5f                   	pop    %edi
f010bad1:	5d                   	pop    %ebp
f010bad2:	c3                   	ret    

f010bad3 <trap>:

void trap(struct Trapframe *tf)
{
f010bad3:	55                   	push   %ebp
f010bad4:	89 e5                	mov    %esp,%ebp
f010bad6:	57                   	push   %edi
f010bad7:	56                   	push   %esi
f010bad8:	53                   	push   %ebx
f010bad9:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010badc:	e8 cd 85 ff ff       	call   f01040ae <kclock_stop>

	int userTrap = 0;
f010bae1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010bae8:	8b 45 08             	mov    0x8(%ebp),%eax
f010baeb:	8b 40 34             	mov    0x34(%eax),%eax
f010baee:	0f b7 c0             	movzwl %ax,%eax
f010baf1:	83 e0 03             	and    $0x3,%eax
f010baf4:	83 f8 03             	cmp    $0x3,%eax
f010baf7:	75 49                	jne    f010bb42 <trap+0x6f>
		assert(curenv);
f010baf9:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bafe:	85 c0                	test   %eax,%eax
f010bb00:	75 19                	jne    f010bb1b <trap+0x48>
f010bb02:	68 5d 68 13 f0       	push   $0xf013685d
f010bb07:	68 64 68 13 f0       	push   $0xf0136864
f010bb0c:	68 04 01 00 00       	push   $0x104
f010bb11:	68 33 68 13 f0       	push   $0xf0136833
f010bb16:	e8 8b 46 ff ff       	call   f01001a6 <_panic>
		curenv->env_tf = *tf;
f010bb1b:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010bb21:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb24:	89 c3                	mov    %eax,%ebx
f010bb26:	b8 11 00 00 00       	mov    $0x11,%eax
f010bb2b:	89 d7                	mov    %edx,%edi
f010bb2d:	89 de                	mov    %ebx,%esi
f010bb2f:	89 c1                	mov    %eax,%ecx
f010bb31:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010bb33:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bb38:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010bb3b:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010bb42:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb45:	8b 40 28             	mov    0x28(%eax),%eax
f010bb48:	83 f8 20             	cmp    $0x20,%eax
f010bb4b:	75 40                	jne    f010bb8d <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010bb4d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010bb51:	0f 84 a6 00 00 00    	je     f010bbfd <trap+0x12a>
		{
			assert(curenv);
f010bb57:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bb5c:	85 c0                	test   %eax,%eax
f010bb5e:	75 19                	jne    f010bb79 <trap+0xa6>
f010bb60:	68 5d 68 13 f0       	push   $0xf013685d
f010bb65:	68 64 68 13 f0       	push   $0xf0136864
f010bb6a:	68 10 01 00 00       	push   $0x110
f010bb6f:	68 33 68 13 f0       	push   $0xf0136833
f010bb74:	e8 2d 46 ff ff       	call   f01001a6 <_panic>
			curenv->nClocks++ ;
f010bb79:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bb7e:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f010bb84:	42                   	inc    %edx
f010bb85:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
f010bb8b:	eb 70                	jmp    f010bbfd <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010bb8d:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb90:	8b 40 28             	mov    0x28(%eax),%eax
f010bb93:	83 f8 0e             	cmp    $0xe,%eax
f010bb96:	75 65                	jne    f010bbfd <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010bb98:	a0 c8 8f 65 f0       	mov    0xf0658fc8,%al
f010bb9d:	84 c0                	test   %al,%al
f010bb9f:	74 5c                	je     f010bbfd <trap+0x12a>
			if (userTrap){
f010bba1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010bba5:	74 2c                	je     f010bbd3 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010bba7:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bbac:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010bbb2:	8b 52 30             	mov    0x30(%edx),%edx
f010bbb5:	89 d1                	mov    %edx,%ecx
f010bbb7:	8a 15 c8 8f 65 f0    	mov    0xf0658fc8,%dl
f010bbbd:	0f b6 d2             	movzbl %dl,%edx
f010bbc0:	01 ca                	add    %ecx,%edx
f010bbc2:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010bbc5:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bbca:	83 ec 0c             	sub    $0xc,%esp
f010bbcd:	50                   	push   %eax
f010bbce:	e8 5e d4 ff ff       	call   f0109031 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010bbd3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbd6:	8b 40 30             	mov    0x30(%eax),%eax
f010bbd9:	89 c2                	mov    %eax,%edx
f010bbdb:	a0 c8 8f 65 f0       	mov    0xf0658fc8,%al
f010bbe0:	0f b6 c0             	movzbl %al,%eax
f010bbe3:	01 d0                	add    %edx,%eax
f010bbe5:	89 c2                	mov    %eax,%edx
f010bbe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbea:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010bbed:	e8 e7 84 ff ff       	call   f01040d9 <kclock_resume>
				env_pop_tf(tf);
f010bbf2:	83 ec 0c             	sub    $0xc,%esp
f010bbf5:	ff 75 08             	pushl  0x8(%ebp)
f010bbf8:	e8 99 d5 ff ff       	call   f0109196 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010bbfd:	83 ec 0c             	sub    $0xc,%esp
f010bc00:	ff 75 08             	pushl  0x8(%ebp)
f010bc03:	e8 e1 fd ff ff       	call   f010b9e9 <trap_dispatch>
f010bc08:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010bc0b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010bc0f:	74 3d                	je     f010bc4e <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010bc11:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bc16:	85 c0                	test   %eax,%eax
f010bc18:	74 0d                	je     f010bc27 <trap+0x154>
f010bc1a:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bc1f:	8b 40 54             	mov    0x54(%eax),%eax
f010bc22:	83 f8 02             	cmp    $0x2,%eax
f010bc25:	74 19                	je     f010bc40 <trap+0x16d>
f010bc27:	68 7c 68 13 f0       	push   $0xf013687c
f010bc2c:	68 64 68 13 f0       	push   $0xf0136864
f010bc31:	68 25 01 00 00       	push   $0x125
f010bc36:	68 33 68 13 f0       	push   $0xf0136833
f010bc3b:	e8 66 45 ff ff       	call   f01001a6 <_panic>
		env_run(curenv);
f010bc40:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bc45:	83 ec 0c             	sub    $0xc,%esp
f010bc48:	50                   	push   %eax
f010bc49:	e8 e3 d3 ff ff       	call   f0109031 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010bc4e:	83 ec 0c             	sub    $0xc,%esp
f010bc51:	ff 75 08             	pushl  0x8(%ebp)
f010bc54:	e8 3d d5 ff ff       	call   f0109196 <env_pop_tf>

f010bc59 <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010bc59:	55                   	push   %ebp
f010bc5a:	89 e5                	mov    %esp,%ebp
f010bc5c:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010bc5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010bc66:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc69:	8b 40 34             	mov    0x34(%eax),%eax
f010bc6c:	0f b7 c0             	movzwl %ax,%eax
f010bc6f:	83 e0 03             	and    $0x3,%eax
f010bc72:	83 f8 03             	cmp    $0x3,%eax
f010bc75:	75 07                	jne    f010bc7e <fault_handler+0x25>
		userTrap = 1;
f010bc77:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010bc7e:	0f 20 d0             	mov    %cr2,%eax
f010bc81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010bc84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010bc87:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010bc8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bc8e:	75 29                	jne    f010bcb9 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010bc90:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010bc97:	77 40                	ja     f010bcd9 <fault_handler+0x80>
f010bc99:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010bca0:	76 37                	jbe    f010bcd9 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010bca2:	83 ec 04             	sub    $0x4,%esp
f010bca5:	68 ac 68 13 f0       	push   $0xf01368ac
f010bcaa:	68 42 01 00 00       	push   $0x142
f010bcaf:	68 33 68 13 f0       	push   $0xf0136833
f010bcb4:	e8 ed 44 ff ff       	call   f01001a6 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010bcb9:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010bcc0:	76 17                	jbe    f010bcd9 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010bcc2:	83 ec 04             	sub    $0x4,%esp
f010bcc5:	68 d0 68 13 f0       	push   $0xf01368d0
f010bcca:	68 48 01 00 00       	push   $0x148
f010bccf:	68 33 68 13 f0       	push   $0xf0136833
f010bcd4:	e8 cd 44 ff ff       	call   f01001a6 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010bcd9:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bcde:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010bce1:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bce6:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bce9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010bcec:	c1 ea 16             	shr    $0x16,%edx
f010bcef:	c1 e2 02             	shl    $0x2,%edx
f010bcf2:	01 d0                	add    %edx,%eax
f010bcf4:	8b 00                	mov    (%eax),%eax
f010bcf6:	83 e0 01             	and    $0x1,%eax
f010bcf9:	85 c0                	test   %eax,%eax
f010bcfb:	75 28                	jne    f010bd25 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010bcfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd00:	8b 80 f4 d9 01 00    	mov    0x1d9f4(%eax),%eax
f010bd06:	8d 50 01             	lea    0x1(%eax),%edx
f010bd09:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd0c:	89 90 f4 d9 01 00    	mov    %edx,0x1d9f4(%eax)

		table_fault_handler(faulted_env, fault_va);
f010bd12:	83 ec 08             	sub    $0x8,%esp
f010bd15:	ff 75 ec             	pushl  -0x14(%ebp)
f010bd18:	ff 75 e8             	pushl  -0x18(%ebp)
f010bd1b:	e8 26 16 00 00       	call   f010d346 <table_fault_handler>
f010bd20:	83 c4 10             	add    $0x10,%esp
f010bd23:	eb 42                	jmp    f010bd67 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010bd25:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd28:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f010bd2e:	8d 50 01             	lea    0x1(%eax),%edx
f010bd31:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd34:	89 90 f0 d9 01 00    	mov    %edx,0x1d9f0(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010bd3a:	e8 e5 15 00 00       	call   f010d324 <isBufferingEnabled>
f010bd3f:	84 c0                	test   %al,%al
f010bd41:	74 13                	je     f010bd56 <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010bd43:	83 ec 08             	sub    $0x8,%esp
f010bd46:	ff 75 ec             	pushl  -0x14(%ebp)
f010bd49:	ff 75 e8             	pushl  -0x18(%ebp)
f010bd4c:	e8 31 16 00 00       	call   f010d382 <__page_fault_handler_with_buffering>
f010bd51:	83 c4 10             	add    $0x10,%esp
f010bd54:	eb 11                	jmp    f010bd67 <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010bd56:	83 ec 08             	sub    $0x8,%esp
f010bd59:	ff 75 ec             	pushl  -0x14(%ebp)
f010bd5c:	ff 75 e8             	pushl  -0x18(%ebp)
f010bd5f:	e8 04 16 00 00       	call   f010d368 <page_fault_handler>
f010bd64:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010bd67:	0f 20 d8             	mov    %cr3,%eax
f010bd6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010bd6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bd70:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010bd73:	90                   	nop
f010bd74:	c9                   	leave  
f010bd75:	c3                   	ret    

f010bd76 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010bd76:	6a 0e                	push   $0xe
f010bd78:	e9 ed 00 00 00       	jmp    f010be6a <_alltraps>
f010bd7d:	90                   	nop

f010bd7e <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010bd7e:	6a 00                	push   $0x0
f010bd80:	6a 30                	push   $0x30
f010bd82:	e9 e3 00 00 00       	jmp    f010be6a <_alltraps>
f010bd87:	90                   	nop

f010bd88 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010bd88:	6a 08                	push   $0x8
f010bd8a:	e9 db 00 00 00       	jmp    f010be6a <_alltraps>
f010bd8f:	90                   	nop

f010bd90 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010bd90:	6a 00                	push   $0x0
f010bd92:	6a 00                	push   $0x0
f010bd94:	e9 d1 00 00 00       	jmp    f010be6a <_alltraps>
f010bd99:	90                   	nop

f010bd9a <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010bd9a:	6a 00                	push   $0x0
f010bd9c:	6a 01                	push   $0x1
f010bd9e:	e9 c7 00 00 00       	jmp    f010be6a <_alltraps>
f010bda3:	90                   	nop

f010bda4 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010bda4:	6a 00                	push   $0x0
f010bda6:	6a 02                	push   $0x2
f010bda8:	e9 bd 00 00 00       	jmp    f010be6a <_alltraps>
f010bdad:	90                   	nop

f010bdae <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010bdae:	6a 00                	push   $0x0
f010bdb0:	6a 03                	push   $0x3
f010bdb2:	e9 b3 00 00 00       	jmp    f010be6a <_alltraps>
f010bdb7:	90                   	nop

f010bdb8 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010bdb8:	6a 00                	push   $0x0
f010bdba:	6a 04                	push   $0x4
f010bdbc:	e9 a9 00 00 00       	jmp    f010be6a <_alltraps>
f010bdc1:	90                   	nop

f010bdc2 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010bdc2:	6a 00                	push   $0x0
f010bdc4:	6a 05                	push   $0x5
f010bdc6:	e9 9f 00 00 00       	jmp    f010be6a <_alltraps>
f010bdcb:	90                   	nop

f010bdcc <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010bdcc:	6a 00                	push   $0x0
f010bdce:	6a 06                	push   $0x6
f010bdd0:	e9 95 00 00 00       	jmp    f010be6a <_alltraps>
f010bdd5:	90                   	nop

f010bdd6 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010bdd6:	6a 00                	push   $0x0
f010bdd8:	6a 07                	push   $0x7
f010bdda:	e9 8b 00 00 00       	jmp    f010be6a <_alltraps>
f010bddf:	90                   	nop

f010bde0 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010bde0:	6a 0a                	push   $0xa
f010bde2:	e9 83 00 00 00       	jmp    f010be6a <_alltraps>
f010bde7:	90                   	nop

f010bde8 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010bde8:	6a 0b                	push   $0xb
f010bdea:	eb 7e                	jmp    f010be6a <_alltraps>

f010bdec <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010bdec:	6a 0c                	push   $0xc
f010bdee:	eb 7a                	jmp    f010be6a <_alltraps>

f010bdf0 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010bdf0:	6a 0d                	push   $0xd
f010bdf2:	eb 76                	jmp    f010be6a <_alltraps>

f010bdf4 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010bdf4:	6a 00                	push   $0x0
f010bdf6:	6a 10                	push   $0x10
f010bdf8:	eb 70                	jmp    f010be6a <_alltraps>

f010bdfa <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010bdfa:	6a 11                	push   $0x11
f010bdfc:	eb 6c                	jmp    f010be6a <_alltraps>

f010bdfe <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010bdfe:	6a 00                	push   $0x0
f010be00:	6a 12                	push   $0x12
f010be02:	eb 66                	jmp    f010be6a <_alltraps>

f010be04 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010be04:	6a 00                	push   $0x0
f010be06:	6a 13                	push   $0x13
f010be08:	eb 60                	jmp    f010be6a <_alltraps>

f010be0a <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010be0a:	6a 00                	push   $0x0
f010be0c:	6a 20                	push   $0x20
f010be0e:	eb 5a                	jmp    f010be6a <_alltraps>

f010be10 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010be10:	6a 00                	push   $0x0
f010be12:	6a 21                	push   $0x21
f010be14:	eb 54                	jmp    f010be6a <_alltraps>

f010be16 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010be16:	6a 00                	push   $0x0
f010be18:	6a 22                	push   $0x22
f010be1a:	eb 4e                	jmp    f010be6a <_alltraps>

f010be1c <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010be1c:	6a 00                	push   $0x0
f010be1e:	6a 23                	push   $0x23
f010be20:	eb 48                	jmp    f010be6a <_alltraps>

f010be22 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010be22:	6a 00                	push   $0x0
f010be24:	6a 24                	push   $0x24
f010be26:	eb 42                	jmp    f010be6a <_alltraps>

f010be28 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010be28:	6a 00                	push   $0x0
f010be2a:	6a 25                	push   $0x25
f010be2c:	eb 3c                	jmp    f010be6a <_alltraps>

f010be2e <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010be2e:	6a 00                	push   $0x0
f010be30:	6a 26                	push   $0x26
f010be32:	eb 36                	jmp    f010be6a <_alltraps>

f010be34 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010be34:	6a 00                	push   $0x0
f010be36:	6a 27                	push   $0x27
f010be38:	eb 30                	jmp    f010be6a <_alltraps>

f010be3a <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010be3a:	6a 00                	push   $0x0
f010be3c:	6a 28                	push   $0x28
f010be3e:	eb 2a                	jmp    f010be6a <_alltraps>

f010be40 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010be40:	6a 00                	push   $0x0
f010be42:	6a 29                	push   $0x29
f010be44:	eb 24                	jmp    f010be6a <_alltraps>

f010be46 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010be46:	6a 00                	push   $0x0
f010be48:	6a 2a                	push   $0x2a
f010be4a:	eb 1e                	jmp    f010be6a <_alltraps>

f010be4c <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010be4c:	6a 00                	push   $0x0
f010be4e:	6a 2b                	push   $0x2b
f010be50:	eb 18                	jmp    f010be6a <_alltraps>

f010be52 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010be52:	6a 00                	push   $0x0
f010be54:	6a 2c                	push   $0x2c
f010be56:	eb 12                	jmp    f010be6a <_alltraps>

f010be58 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010be58:	6a 00                	push   $0x0
f010be5a:	6a 2d                	push   $0x2d
f010be5c:	eb 0c                	jmp    f010be6a <_alltraps>

f010be5e <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010be5e:	6a 00                	push   $0x0
f010be60:	6a 2e                	push   $0x2e
f010be62:	eb 06                	jmp    f010be6a <_alltraps>

f010be64 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010be64:	6a 00                	push   $0x0
f010be66:	6a 2f                	push   $0x2f
f010be68:	eb 00                	jmp    f010be6a <_alltraps>

f010be6a <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010be6a:	1e                   	push   %ds
push %es
f010be6b:	06                   	push   %es
pushal
f010be6c:	60                   	pusha  

mov $(GD_KD), %ax
f010be6d:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010be71:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010be73:	8e c0                	mov    %eax,%es

push %esp
f010be75:	54                   	push   %esp

call trap
f010be76:	e8 58 fc ff ff       	call   f010bad3 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010be7b:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010be7c:	61                   	popa   
pop %es
f010be7d:	07                   	pop    %es
pop %ds
f010be7e:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010be7f:	83 c4 08             	add    $0x8,%esp

iret
f010be82:	cf                   	iret   

f010be83 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010be83:	55                   	push   %ebp
f010be84:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010be86:	8b 45 08             	mov    0x8(%ebp),%eax
f010be89:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f010be8f:	29 d0                	sub    %edx,%eax
f010be91:	c1 f8 03             	sar    $0x3,%eax
f010be94:	89 c2                	mov    %eax,%edx
f010be96:	89 d0                	mov    %edx,%eax
f010be98:	c1 e0 02             	shl    $0x2,%eax
f010be9b:	01 d0                	add    %edx,%eax
f010be9d:	c1 e0 02             	shl    $0x2,%eax
f010bea0:	01 d0                	add    %edx,%eax
f010bea2:	c1 e0 02             	shl    $0x2,%eax
f010bea5:	01 d0                	add    %edx,%eax
f010bea7:	89 c1                	mov    %eax,%ecx
f010bea9:	c1 e1 08             	shl    $0x8,%ecx
f010beac:	01 c8                	add    %ecx,%eax
f010beae:	89 c1                	mov    %eax,%ecx
f010beb0:	c1 e1 10             	shl    $0x10,%ecx
f010beb3:	01 c8                	add    %ecx,%eax
f010beb5:	01 c0                	add    %eax,%eax
f010beb7:	01 d0                	add    %edx,%eax
}
f010beb9:	5d                   	pop    %ebp
f010beba:	c3                   	ret    

f010bebb <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010bebb:	55                   	push   %ebp
f010bebc:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010bebe:	ff 75 08             	pushl  0x8(%ebp)
f010bec1:	e8 bd ff ff ff       	call   f010be83 <to_frame_number>
f010bec6:	83 c4 04             	add    $0x4,%esp
f010bec9:	c1 e0 0c             	shl    $0xc,%eax
}
f010becc:	c9                   	leave  
f010becd:	c3                   	ret    

f010bece <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010bece:	55                   	push   %ebp
f010becf:	89 e5                	mov    %esp,%ebp
f010bed1:	83 ec 18             	sub    $0x18,%esp
f010bed4:	8b 45 10             	mov    0x10(%ebp),%eax
f010bed7:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010beda:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010bede:	74 26                	je     f010bf06 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010bee0:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bee5:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bee8:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010beee:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010bef4:	83 ec 04             	sub    $0x4,%esp
f010bef7:	50                   	push   %eax
f010bef8:	52                   	push   %edx
f010bef9:	68 90 6a 13 f0       	push   $0xf0136a90
f010befe:	e8 2a 4d ff ff       	call   f0100c2d <cprintf>
f010bf03:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010bf06:	83 ec 04             	sub    $0x4,%esp
f010bf09:	ff 75 08             	pushl  0x8(%ebp)
f010bf0c:	ff 75 0c             	pushl  0xc(%ebp)
f010bf0f:	68 99 6a 13 f0       	push   $0xf0136a99
f010bf14:	e8 14 4d ff ff       	call   f0100c2d <cprintf>
f010bf19:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010bf1c:	90                   	nop
f010bf1d:	c9                   	leave  
f010bf1e:	c3                   	ret    

f010bf1f <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010bf1f:	55                   	push   %ebp
f010bf20:	89 e5                	mov    %esp,%ebp
f010bf22:	83 ec 18             	sub    $0x18,%esp
f010bf25:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf28:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010bf2b:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010bf2f:	83 ec 08             	sub    $0x8,%esp
f010bf32:	50                   	push   %eax
f010bf33:	68 9e 6a 13 f0       	push   $0xf0136a9e
f010bf38:	e8 f0 4c ff ff       	call   f0100c2d <cprintf>
f010bf3d:	83 c4 10             	add    $0x10,%esp
}
f010bf40:	90                   	nop
f010bf41:	c9                   	leave  
f010bf42:	c3                   	ret    

f010bf43 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010bf43:	55                   	push   %ebp
f010bf44:	89 e5                	mov    %esp,%ebp
f010bf46:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010bf49:	e8 19 4b ff ff       	call   f0100a67 <cons_getc2>
f010bf4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010bf51:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010bf54:	c9                   	leave  
f010bf55:	c3                   	ret    

f010bf56 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010bf56:	55                   	push   %ebp
f010bf57:	89 e5                	mov    %esp,%ebp
f010bf59:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010bf5c:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bf61:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010bf64:	83 ec 0c             	sub    $0xc,%esp
f010bf67:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010bf6a:	50                   	push   %eax
f010bf6b:	e8 3a a8 ff ff       	call   f01067aa <allocate_frame>
f010bf70:	83 c4 10             	add    $0x10,%esp
f010bf73:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010bf76:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010bf7a:	75 08                	jne    f010bf84 <__sys_allocate_page+0x2e>
		return r ;
f010bf7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bf7f:	e9 d0 00 00 00       	jmp    f010c054 <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010bf84:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf87:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010bf8c:	77 0c                	ja     f010bf9a <__sys_allocate_page+0x44>
f010bf8e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf91:	25 ff 0f 00 00       	and    $0xfff,%eax
f010bf96:	85 c0                	test   %eax,%eax
f010bf98:	74 0a                	je     f010bfa4 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010bf9a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010bf9f:	e9 b0 00 00 00       	jmp    f010c054 <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010bfa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bfa7:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010bfac:	83 f8 04             	cmp    $0x4,%eax
f010bfaf:	74 0a                	je     f010bfbb <__sys_allocate_page+0x65>
		return E_INVAL;
f010bfb1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010bfb6:	e9 99 00 00 00       	jmp    f010c054 <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010bfbb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bfbe:	83 ec 0c             	sub    $0xc,%esp
f010bfc1:	50                   	push   %eax
f010bfc2:	e8 f4 fe ff ff       	call   f010bebb <to_physical_address>
f010bfc7:	83 c4 10             	add    $0x10,%esp
f010bfca:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010bfcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bfd0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010bfd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bfd6:	c1 e8 0c             	shr    $0xc,%eax
f010bfd9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010bfdc:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f010bfe1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010bfe4:	72 17                	jb     f010bffd <__sys_allocate_page+0xa7>
f010bfe6:	ff 75 e8             	pushl  -0x18(%ebp)
f010bfe9:	68 a4 6a 13 f0       	push   $0xf0136aa4
f010bfee:	68 8c 00 00 00       	push   $0x8c
f010bff3:	68 d3 6a 13 f0       	push   $0xf0136ad3
f010bff8:	e8 a9 41 ff ff       	call   f01001a6 <_panic>
f010bffd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c000:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c005:	83 ec 04             	sub    $0x4,%esp
f010c008:	68 00 10 00 00       	push   $0x1000
f010c00d:	6a 00                	push   $0x0
f010c00f:	50                   	push   %eax
f010c010:	e8 f8 45 02 00       	call   f013060d <memset>
f010c015:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c018:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c01b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c01e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c021:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c024:	ff 75 0c             	pushl  0xc(%ebp)
f010c027:	51                   	push   %ecx
f010c028:	52                   	push   %edx
f010c029:	50                   	push   %eax
f010c02a:	e8 13 ab ff ff       	call   f0106b42 <map_frame>
f010c02f:	83 c4 10             	add    $0x10,%esp
f010c032:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c035:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c039:	75 14                	jne    f010c04f <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010c03b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c03e:	83 ec 0c             	sub    $0xc,%esp
f010c041:	50                   	push   %eax
f010c042:	e8 f2 a8 ff ff       	call   f0106939 <decrement_references>
f010c047:	83 c4 10             	add    $0x10,%esp
		return r;
f010c04a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c04d:	eb 05                	jmp    f010c054 <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010c04f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c054:	c9                   	leave  
f010c055:	c3                   	ret    

f010c056 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c056:	55                   	push   %ebp
f010c057:	89 e5                	mov    %esp,%ebp
f010c059:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c05c:	83 ec 04             	sub    $0x4,%esp
f010c05f:	68 e7 6a 13 f0       	push   $0xf0136ae7
f010c064:	68 b3 00 00 00       	push   $0xb3
f010c069:	68 d3 6a 13 f0       	push   $0xf0136ad3
f010c06e:	e8 33 41 ff ff       	call   f01001a6 <_panic>

f010c073 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c073:	55                   	push   %ebp
f010c074:	89 e5                	mov    %esp,%ebp
f010c076:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c079:	83 ec 04             	sub    $0x4,%esp
f010c07c:	68 08 6b 13 f0       	push   $0xf0136b08
f010c081:	68 c3 00 00 00       	push   $0xc3
f010c086:	68 d3 6a 13 f0       	push   $0xf0136ad3
f010c08b:	e8 16 41 ff ff       	call   f01001a6 <_panic>

f010c090 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c090:	55                   	push   %ebp
f010c091:	89 e5                	mov    %esp,%ebp
f010c093:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c096:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c09b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c09e:	83 ec 04             	sub    $0x4,%esp
f010c0a1:	ff 75 0c             	pushl  0xc(%ebp)
f010c0a4:	ff 75 08             	pushl  0x8(%ebp)
f010c0a7:	50                   	push   %eax
f010c0a8:	e8 dd c1 ff ff       	call   f010828a <calculate_required_frames>
f010c0ad:	83 c4 10             	add    $0x10,%esp
}
f010c0b0:	c9                   	leave  
f010c0b1:	c3                   	ret    

f010c0b2 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c0b2:	55                   	push   %ebp
f010c0b3:	89 e5                	mov    %esp,%ebp
f010c0b5:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c0b8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c0bb:	83 ec 0c             	sub    $0xc,%esp
f010c0be:	50                   	push   %eax
f010c0bf:	e8 ee ac ff ff       	call   f0106db2 <calculate_available_frames>
f010c0c4:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c0c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c0ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c0cd:	01 d0                	add    %edx,%eax
}
f010c0cf:	c9                   	leave  
f010c0d0:	c3                   	ret    

f010c0d1 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c0d1:	55                   	push   %ebp
f010c0d2:	89 e5                	mov    %esp,%ebp
f010c0d4:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c0d7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c0da:	83 ec 0c             	sub    $0xc,%esp
f010c0dd:	50                   	push   %eax
f010c0de:	e8 cf ac ff ff       	call   f0106db2 <calculate_available_frames>
f010c0e3:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c0e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c0e9:	c9                   	leave  
f010c0ea:	c3                   	ret    

f010c0eb <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c0eb:	55                   	push   %ebp
f010c0ec:	89 e5                	mov    %esp,%ebp
f010c0ee:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c0f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c0f4:	83 ec 0c             	sub    $0xc,%esp
f010c0f7:	50                   	push   %eax
f010c0f8:	e8 b5 ac ff ff       	call   f0106db2 <calculate_available_frames>
f010c0fd:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c100:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c103:	c9                   	leave  
f010c104:	c3                   	ret    

f010c105 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c105:	55                   	push   %ebp
f010c106:	89 e5                	mov    %esp,%ebp
f010c108:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c10b:	83 ec 0c             	sub    $0xc,%esp
f010c10e:	ff 75 08             	pushl  0x8(%ebp)
f010c111:	e8 2d 32 02 00       	call   f012f343 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c116:	83 c4 10             	add    $0x10,%esp
}
f010c119:	c9                   	leave  
f010c11a:	c3                   	ret    

f010c11b <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c11b:	55                   	push   %ebp
f010c11c:	89 e5                	mov    %esp,%ebp
f010c11e:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c121:	e8 75 31 02 00       	call   f012f29b <scarce_memory>
}
f010c126:	90                   	nop
f010c127:	c9                   	leave  
f010c128:	c3                   	ret    

f010c129 <sys_clearFFL>:

void sys_clearFFL()
{
f010c129:	55                   	push   %ebp
f010c12a:	89 e5                	mov    %esp,%ebp
f010c12c:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c12f:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f010c134:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c137:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c13e:	eb 12                	jmp    f010c152 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c140:	83 ec 0c             	sub    $0xc,%esp
f010c143:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c146:	50                   	push   %eax
f010c147:	e8 5e a6 ff ff       	call   f01067aa <allocate_frame>
f010c14c:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c14f:	ff 45 f4             	incl   -0xc(%ebp)
f010c152:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c155:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c158:	7c e6                	jl     f010c140 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010c15a:	90                   	nop
f010c15b:	c9                   	leave  
f010c15c:	c3                   	ret    

f010c15d <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010c15d:	55                   	push   %ebp
f010c15e:	89 e5                	mov    %esp,%ebp
f010c160:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010c163:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c168:	83 ec 0c             	sub    $0xc,%esp
f010c16b:	50                   	push   %eax
f010c16c:	e8 4a 7a ff ff       	call   f0103bbb <pf_calculate_allocated_pages>
f010c171:	83 c4 10             	add    $0x10,%esp
}
f010c174:	c9                   	leave  
f010c175:	c3                   	ret    

f010c176 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010c176:	55                   	push   %ebp
f010c177:	89 e5                	mov    %esp,%ebp
f010c179:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010c17c:	e8 a3 11 00 00       	call   f010d324 <isBufferingEnabled>
f010c181:	84 c0                	test   %al,%al
f010c183:	74 19                	je     f010c19e <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010c185:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c18a:	83 ec 04             	sub    $0x4,%esp
f010c18d:	ff 75 0c             	pushl  0xc(%ebp)
f010c190:	ff 75 08             	pushl  0x8(%ebp)
f010c193:	50                   	push   %eax
f010c194:	e8 48 c1 ff ff       	call   f01082e1 <__free_user_mem_with_buffering>
f010c199:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010c19c:	eb 18                	jmp    f010c1b6 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010c19e:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c1a3:	83 ec 04             	sub    $0x4,%esp
f010c1a6:	ff 75 0c             	pushl  0xc(%ebp)
f010c1a9:	ff 75 08             	pushl  0x8(%ebp)
f010c1ac:	50                   	push   %eax
f010c1ad:	e8 12 c1 ff ff       	call   f01082c4 <free_user_mem>
f010c1b2:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010c1b5:	90                   	nop
}
f010c1b6:	c9                   	leave  
f010c1b7:	c3                   	ret    

f010c1b8 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010c1b8:	55                   	push   %ebp
f010c1b9:	89 e5                	mov    %esp,%ebp
f010c1bb:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010c1be:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c1c3:	83 ec 04             	sub    $0x4,%esp
f010c1c6:	ff 75 0c             	pushl  0xc(%ebp)
f010c1c9:	ff 75 08             	pushl  0x8(%ebp)
f010c1cc:	50                   	push   %eax
f010c1cd:	e8 d5 c0 ff ff       	call   f01082a7 <allocate_user_mem>
f010c1d2:	83 c4 10             	add    $0x10,%esp
	return;
f010c1d5:	90                   	nop
}
f010c1d6:	c9                   	leave  
f010c1d7:	c3                   	ret    

f010c1d8 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010c1d8:	55                   	push   %ebp
f010c1d9:	89 e5                	mov    %esp,%ebp
f010c1db:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010c1de:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c1e3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c1e6:	ff 75 10             	pushl  0x10(%ebp)
f010c1e9:	ff 75 0c             	pushl  0xc(%ebp)
f010c1ec:	ff 75 08             	pushl  0x8(%ebp)
f010c1ef:	50                   	push   %eax
f010c1f0:	e8 5e bf ff ff       	call   f0108153 <allocate_chunk>
f010c1f5:	83 c4 10             	add    $0x10,%esp
	return;
f010c1f8:	90                   	nop
}
f010c1f9:	c9                   	leave  
f010c1fa:	c3                   	ret    

f010c1fb <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010c1fb:	55                   	push   %ebp
f010c1fc:	89 e5                	mov    %esp,%ebp
f010c1fe:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010c201:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c206:	ff 75 10             	pushl  0x10(%ebp)
f010c209:	ff 75 0c             	pushl  0xc(%ebp)
f010c20c:	ff 75 08             	pushl  0x8(%ebp)
f010c20f:	50                   	push   %eax
f010c210:	e8 e9 c0 ff ff       	call   f01082fe <move_user_mem>
f010c215:	83 c4 10             	add    $0x10,%esp
	return;
f010c218:	90                   	nop
}
f010c219:	c9                   	leave  
f010c21a:	c3                   	ret    

f010c21b <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010c21b:	55                   	push   %ebp
f010c21c:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010c21e:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
}
f010c223:	5d                   	pop    %ebp
f010c224:	c3                   	ret    

f010c225 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010c225:	55                   	push   %ebp
f010c226:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010c228:	8b 45 08             	mov    0x8(%ebp),%eax
f010c22b:	a3 8c 84 6e f0       	mov    %eax,0xf06e848c
}
f010c230:	90                   	nop
f010c231:	5d                   	pop    %ebp
f010c232:	c3                   	ret    

f010c233 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010c233:	55                   	push   %ebp
f010c234:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010c236:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c23b:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010c241:	8b 52 38             	mov    0x38(%edx),%edx
f010c244:	80 e6 fd             	and    $0xfd,%dh
f010c247:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c24a:	90                   	nop
f010c24b:	5d                   	pop    %ebp
f010c24c:	c3                   	ret    

f010c24d <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010c24d:	55                   	push   %ebp
f010c24e:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010c250:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c255:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010c25b:	8b 52 38             	mov    0x38(%edx),%edx
f010c25e:	80 ce 02             	or     $0x2,%dh
f010c261:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c264:	90                   	nop
f010c265:	5d                   	pop    %ebp
f010c266:	c3                   	ret    

f010c267 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010c267:	55                   	push   %ebp
f010c268:	89 e5                	mov    %esp,%ebp
f010c26a:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010c26d:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c272:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c275:	83 ec 04             	sub    $0x4,%esp
f010c278:	ff 75 0c             	pushl  0xc(%ebp)
f010c27b:	ff 75 08             	pushl  0x8(%ebp)
f010c27e:	50                   	push   %eax
f010c27f:	e8 de 13 00 00       	call   f010d662 <createSemaphore>
f010c284:	83 c4 10             	add    $0x10,%esp
}
f010c287:	c9                   	leave  
f010c288:	c3                   	ret    

f010c289 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c289:	55                   	push   %ebp
f010c28a:	89 e5                	mov    %esp,%ebp
f010c28c:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010c28f:	83 ec 08             	sub    $0x8,%esp
f010c292:	ff 75 0c             	pushl  0xc(%ebp)
f010c295:	ff 75 08             	pushl  0x8(%ebp)
f010c298:	e8 e2 13 00 00       	call   f010d67f <waitSemaphore>
f010c29d:	83 c4 10             	add    $0x10,%esp
}
f010c2a0:	90                   	nop
f010c2a1:	c9                   	leave  
f010c2a2:	c3                   	ret    

f010c2a3 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c2a3:	55                   	push   %ebp
f010c2a4:	89 e5                	mov    %esp,%ebp
f010c2a6:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010c2a9:	83 ec 08             	sub    $0x8,%esp
f010c2ac:	ff 75 0c             	pushl  0xc(%ebp)
f010c2af:	ff 75 08             	pushl  0x8(%ebp)
f010c2b2:	e8 e5 13 00 00       	call   f010d69c <signalSemaphore>
f010c2b7:	83 c4 10             	add    $0x10,%esp
}
f010c2ba:	90                   	nop
f010c2bb:	c9                   	leave  
f010c2bc:	c3                   	ret    

f010c2bd <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010c2bd:	55                   	push   %ebp
f010c2be:	89 e5                	mov    %esp,%ebp
f010c2c0:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010c2c3:	83 ec 08             	sub    $0x8,%esp
f010c2c6:	ff 75 0c             	pushl  0xc(%ebp)
f010c2c9:	ff 75 08             	pushl  0x8(%ebp)
f010c2cc:	e8 37 12 00 00       	call   f010d508 <get_semaphore_object_ID>
f010c2d1:	83 c4 10             	add    $0x10,%esp
f010c2d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010c2d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c2db:	78 06                	js     f010c2e3 <sys_getSemaphoreValue+0x26>
f010c2dd:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010c2e1:	7e 19                	jle    f010c2fc <sys_getSemaphoreValue+0x3f>
f010c2e3:	68 28 6b 13 f0       	push   $0xf0136b28
f010c2e8:	68 4d 6b 13 f0       	push   $0xf0136b4d
f010c2ed:	68 4a 01 00 00       	push   $0x14a
f010c2f2:	68 d3 6a 13 f0       	push   $0xf0136ad3
f010c2f7:	e8 aa 3e ff ff       	call   f01001a6 <_panic>

	return semaphores[semID].value ;
f010c2fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c2ff:	89 d0                	mov    %edx,%eax
f010c301:	c1 e0 02             	shl    $0x2,%eax
f010c304:	01 d0                	add    %edx,%eax
f010c306:	01 c0                	add    %eax,%eax
f010c308:	01 d0                	add    %edx,%eax
f010c30a:	01 c0                	add    %eax,%eax
f010c30c:	01 d0                	add    %edx,%eax
f010c30e:	c1 e0 02             	shl    $0x2,%eax
f010c311:	05 d4 60 6e f0       	add    $0xf06e60d4,%eax
f010c316:	8b 00                	mov    (%eax),%eax
}
f010c318:	c9                   	leave  
f010c319:	c3                   	ret    

f010c31a <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010c31a:	55                   	push   %ebp
f010c31b:	89 e5                	mov    %esp,%ebp
f010c31d:	83 ec 18             	sub    $0x18,%esp
f010c320:	8b 45 10             	mov    0x10(%ebp),%eax
f010c323:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010c326:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010c32a:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c32f:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c332:	83 ec 0c             	sub    $0xc,%esp
f010c335:	ff 75 14             	pushl  0x14(%ebp)
f010c338:	52                   	push   %edx
f010c339:	ff 75 0c             	pushl  0xc(%ebp)
f010c33c:	ff 75 08             	pushl  0x8(%ebp)
f010c33f:	50                   	push   %eax
f010c340:	e8 fb af ff ff       	call   f0107340 <createSharedObject>
f010c345:	83 c4 20             	add    $0x20,%esp
}
f010c348:	c9                   	leave  
f010c349:	c3                   	ret    

f010c34a <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010c34a:	55                   	push   %ebp
f010c34b:	89 e5                	mov    %esp,%ebp
f010c34d:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010c350:	83 ec 08             	sub    $0x8,%esp
f010c353:	ff 75 0c             	pushl  0xc(%ebp)
f010c356:	ff 75 08             	pushl  0x8(%ebp)
f010c359:	e8 05 b0 ff ff       	call   f0107363 <getSizeOfSharedObject>
f010c35e:	83 c4 10             	add    $0x10,%esp
}
f010c361:	c9                   	leave  
f010c362:	c3                   	ret    

f010c363 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010c363:	55                   	push   %ebp
f010c364:	89 e5                	mov    %esp,%ebp
f010c366:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010c369:	83 ec 04             	sub    $0x4,%esp
f010c36c:	ff 75 10             	pushl  0x10(%ebp)
f010c36f:	ff 75 0c             	pushl  0xc(%ebp)
f010c372:	ff 75 08             	pushl  0x8(%ebp)
f010c375:	e8 06 b0 ff ff       	call   f0107380 <getSharedObject>
f010c37a:	83 c4 10             	add    $0x10,%esp
}
f010c37d:	c9                   	leave  
f010c37e:	c3                   	ret    

f010c37f <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010c37f:	55                   	push   %ebp
f010c380:	89 e5                	mov    %esp,%ebp
f010c382:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010c385:	83 ec 08             	sub    $0x8,%esp
f010c388:	ff 75 0c             	pushl  0xc(%ebp)
f010c38b:	ff 75 08             	pushl  0x8(%ebp)
f010c38e:	e8 0a b0 ff ff       	call   f010739d <freeSharedObject>
f010c393:	83 c4 10             	add    $0x10,%esp
}
f010c396:	c9                   	leave  
f010c397:	c3                   	ret    

f010c398 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010c398:	55                   	push   %ebp
f010c399:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010c39b:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010c3a0:	5d                   	pop    %ebp
f010c3a1:	c3                   	ret    

f010c3a2 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010c3a2:	55                   	push   %ebp
f010c3a3:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010c3a5:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c3aa:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c3ad:	5d                   	pop    %ebp
f010c3ae:	c3                   	ret    

f010c3af <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010c3af:	55                   	push   %ebp
f010c3b0:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010c3b2:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c3b7:	89 c2                	mov    %eax,%edx
f010c3b9:	a1 30 87 65 f0       	mov    0xf0658730,%eax
f010c3be:	29 c2                	sub    %eax,%edx
f010c3c0:	89 d0                	mov    %edx,%eax
f010c3c2:	c1 f8 03             	sar    $0x3,%eax
f010c3c5:	89 c2                	mov    %eax,%edx
f010c3c7:	89 d0                	mov    %edx,%eax
f010c3c9:	c1 e0 03             	shl    $0x3,%eax
f010c3cc:	01 d0                	add    %edx,%eax
f010c3ce:	c1 e0 03             	shl    $0x3,%eax
f010c3d1:	01 d0                	add    %edx,%eax
f010c3d3:	01 c0                	add    %eax,%eax
f010c3d5:	01 d0                	add    %edx,%eax
f010c3d7:	01 c0                	add    %eax,%eax
f010c3d9:	01 d0                	add    %edx,%eax
f010c3db:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c3e2:	01 c8                	add    %ecx,%eax
f010c3e4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c3eb:	01 c8                	add    %ecx,%eax
f010c3ed:	c1 e0 02             	shl    $0x2,%eax
f010c3f0:	01 d0                	add    %edx,%eax
f010c3f2:	01 c0                	add    %eax,%eax
f010c3f4:	01 d0                	add    %edx,%eax
f010c3f6:	01 c0                	add    %eax,%eax
f010c3f8:	01 d0                	add    %edx,%eax
f010c3fa:	c1 e0 02             	shl    $0x2,%eax
f010c3fd:	01 d0                	add    %edx,%eax
f010c3ff:	01 c0                	add    %eax,%eax
f010c401:	01 d0                	add    %edx,%eax
f010c403:	c1 e0 09             	shl    $0x9,%eax
f010c406:	29 d0                	sub    %edx,%eax
f010c408:	c1 e0 02             	shl    $0x2,%eax
f010c40b:	01 d0                	add    %edx,%eax
}
f010c40d:	5d                   	pop    %ebp
f010c40e:	c3                   	ret    

f010c40f <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010c40f:	55                   	push   %ebp
f010c410:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010c412:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c417:	8b 40 50             	mov    0x50(%eax),%eax
}
f010c41a:	5d                   	pop    %ebp
f010c41b:	c3                   	ret    

f010c41c <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010c41c:	55                   	push   %ebp
f010c41d:	89 e5                	mov    %esp,%ebp
f010c41f:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010c422:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c426:	75 0a                	jne    f010c432 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010c428:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c42d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c430:	eb 22                	jmp    f010c454 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010c432:	83 ec 04             	sub    $0x4,%esp
f010c435:	6a 00                	push   $0x0
f010c437:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c43a:	50                   	push   %eax
f010c43b:	ff 75 08             	pushl  0x8(%ebp)
f010c43e:	e8 7e cc ff ff       	call   f01090c1 <envid2env>
f010c443:	83 c4 10             	add    $0x10,%esp
f010c446:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c449:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c44d:	79 05                	jns    f010c454 <sys_destroy_env+0x38>
	{
		return r;
f010c44f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c452:	eb 5e                	jmp    f010c4b2 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010c454:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c457:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c45c:	39 c2                	cmp    %eax,%edx
f010c45e:	75 1b                	jne    f010c47b <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010c460:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c465:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c468:	83 ec 08             	sub    $0x8,%esp
f010c46b:	50                   	push   %eax
f010c46c:	68 62 6b 13 f0       	push   $0xf0136b62
f010c471:	e8 b7 47 ff ff       	call   f0100c2d <cprintf>
f010c476:	83 c4 10             	add    $0x10,%esp
f010c479:	eb 20                	jmp    f010c49b <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010c47b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c47e:	8b 50 4c             	mov    0x4c(%eax),%edx
f010c481:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c486:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c489:	83 ec 04             	sub    $0x4,%esp
f010c48c:	52                   	push   %edx
f010c48d:	50                   	push   %eax
f010c48e:	68 7d 6b 13 f0       	push   $0xf0136b7d
f010c493:	e8 95 47 ff ff       	call   f0100c2d <cprintf>
f010c498:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010c49b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c49e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c4a1:	83 ec 0c             	sub    $0xc,%esp
f010c4a4:	50                   	push   %eax
f010c4a5:	e8 16 90 ff ff       	call   f01054c0 <sched_kill_env>
f010c4aa:	83 c4 10             	add    $0x10,%esp

	return 0;
f010c4ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c4b2:	c9                   	leave  
f010c4b3:	c3                   	ret    

f010c4b4 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010c4b4:	55                   	push   %ebp
f010c4b5:	89 e5                	mov    %esp,%ebp
f010c4b7:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010c4ba:	e8 e3 cb ff ff       	call   f01090a2 <env_exit>
	//env_run_cmd_prmpt();
}
f010c4bf:	90                   	nop
f010c4c0:	c9                   	leave  
f010c4c1:	c3                   	ret    

f010c4c2 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010c4c2:	55                   	push   %ebp
f010c4c3:	89 e5                	mov    %esp,%ebp
f010c4c5:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010c4c8:	ff 75 14             	pushl  0x14(%ebp)
f010c4cb:	ff 75 10             	pushl  0x10(%ebp)
f010c4ce:	ff 75 0c             	pushl  0xc(%ebp)
f010c4d1:	ff 75 08             	pushl  0x8(%ebp)
f010c4d4:	e8 8d be ff ff       	call   f0108366 <env_create>
f010c4d9:	83 c4 10             	add    $0x10,%esp
f010c4dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010c4df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c4e3:	75 07                	jne    f010c4ec <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010c4e5:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010c4ea:	eb 14                	jmp    f010c500 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010c4ec:	83 ec 0c             	sub    $0xc,%esp
f010c4ef:	ff 75 f4             	pushl  -0xc(%ebp)
f010c4f2:	e8 80 8b ff ff       	call   f0105077 <sched_new_env>
f010c4f7:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010c4fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c4fd:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c500:	c9                   	leave  
f010c501:	c3                   	ret    

f010c502 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010c502:	55                   	push   %ebp
f010c503:	89 e5                	mov    %esp,%ebp
f010c505:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010c508:	8b 45 08             	mov    0x8(%ebp),%eax
f010c50b:	83 ec 0c             	sub    $0xc,%esp
f010c50e:	50                   	push   %eax
f010c50f:	e8 80 8b ff ff       	call   f0105094 <sched_run_env>
f010c514:	83 c4 10             	add    $0x10,%esp
}
f010c517:	90                   	nop
f010c518:	c9                   	leave  
f010c519:	c3                   	ret    

f010c51a <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010c51a:	55                   	push   %ebp
f010c51b:	89 e5                	mov    %esp,%ebp
f010c51d:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010c520:	0f 31                	rdtsc  
f010c522:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c525:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010c528:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c52b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c52e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c531:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010c534:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c537:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c53a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c53d:	89 01                	mov    %eax,(%ecx)
f010c53f:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010c542:	8b 45 08             	mov    0x8(%ebp),%eax
f010c545:	c9                   	leave  
f010c546:	c2 04 00             	ret    $0x4

f010c549 <sys_rcr2>:

uint32 sys_rcr2()
{
f010c549:	55                   	push   %ebp
f010c54a:	89 e5                	mov    %esp,%ebp
f010c54c:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c54f:	0f 20 d0             	mov    %cr2,%eax
f010c552:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010c555:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010c558:	90                   	nop
}
f010c559:	c9                   	leave  
f010c55a:	c3                   	ret    

f010c55b <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010c55b:	55                   	push   %ebp
f010c55c:	89 e5                	mov    %esp,%ebp
f010c55e:	83 ec 04             	sub    $0x4,%esp
f010c561:	8b 45 08             	mov    0x8(%ebp),%eax
f010c564:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010c567:	8a 45 fc             	mov    -0x4(%ebp),%al
f010c56a:	a2 c8 8f 65 f0       	mov    %al,0xf0658fc8
}
f010c56f:	90                   	nop
f010c570:	c9                   	leave  
f010c571:	c3                   	ret    

f010c572 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010c572:	55                   	push   %ebp
f010c573:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010c575:	c7 05 10 86 6e f0 00 	movl   $0x0,0xf06e8610
f010c57c:	00 00 00 
}
f010c57f:	90                   	nop
f010c580:	5d                   	pop    %ebp
f010c581:	c3                   	ret    

f010c582 <inctst>:
void inctst()
{
f010c582:	55                   	push   %ebp
f010c583:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010c585:	a1 10 86 6e f0       	mov    0xf06e8610,%eax
f010c58a:	40                   	inc    %eax
f010c58b:	a3 10 86 6e f0       	mov    %eax,0xf06e8610
}
f010c590:	90                   	nop
f010c591:	5d                   	pop    %ebp
f010c592:	c3                   	ret    

f010c593 <gettst>:
uint32 gettst()
{
f010c593:	55                   	push   %ebp
f010c594:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010c596:	a1 10 86 6e f0       	mov    0xf06e8610,%eax
}
f010c59b:	5d                   	pop    %ebp
f010c59c:	c3                   	ret    

f010c59d <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010c59d:	55                   	push   %ebp
f010c59e:	89 e5                	mov    %esp,%ebp
f010c5a0:	83 ec 28             	sub    $0x28,%esp
f010c5a3:	8b 45 14             	mov    0x14(%ebp),%eax
f010c5a6:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010c5a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010c5b0:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010c5b4:	83 f8 65             	cmp    $0x65,%eax
f010c5b7:	74 5d                	je     f010c616 <tst+0x79>
f010c5b9:	83 f8 65             	cmp    $0x65,%eax
f010c5bc:	7f 0a                	jg     f010c5c8 <tst+0x2b>
f010c5be:	83 f8 62             	cmp    $0x62,%eax
f010c5c1:	74 73                	je     f010c636 <tst+0x99>
f010c5c3:	e9 91 00 00 00       	jmp    f010c659 <tst+0xbc>
f010c5c8:	83 f8 67             	cmp    $0x67,%eax
f010c5cb:	74 29                	je     f010c5f6 <tst+0x59>
f010c5cd:	83 f8 6c             	cmp    $0x6c,%eax
f010c5d0:	0f 85 83 00 00 00    	jne    f010c659 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010c5d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5d9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c5dc:	73 09                	jae    f010c5e7 <tst+0x4a>
			chk = 1;
f010c5de:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c5e5:	eb 68                	jmp    f010c64f <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010c5e7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c5eb:	74 62                	je     f010c64f <tst+0xb2>
			chk = 1;
f010c5ed:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c5f4:	eb 59                	jmp    f010c64f <tst+0xb2>
	case 'g':
		if (n > v1)
f010c5f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5f9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c5fc:	76 09                	jbe    f010c607 <tst+0x6a>
			chk = 1;
f010c5fe:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c605:	eb 4b                	jmp    f010c652 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010c607:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c60b:	74 45                	je     f010c652 <tst+0xb5>
			chk = 1;
f010c60d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c614:	eb 3c                	jmp    f010c652 <tst+0xb5>
	case 'e':
		if (n == v1)
f010c616:	8b 45 08             	mov    0x8(%ebp),%eax
f010c619:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c61c:	75 09                	jne    f010c627 <tst+0x8a>
			chk = 1;
f010c61e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c625:	eb 2e                	jmp    f010c655 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010c627:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c62b:	74 28                	je     f010c655 <tst+0xb8>
			chk = 1;
f010c62d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c634:	eb 1f                	jmp    f010c655 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010c636:	8b 45 08             	mov    0x8(%ebp),%eax
f010c639:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c63c:	72 1a                	jb     f010c658 <tst+0xbb>
f010c63e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c641:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c644:	77 12                	ja     f010c658 <tst+0xbb>
			chk = 1;
f010c646:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c64d:	eb 09                	jmp    f010c658 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c64f:	90                   	nop
f010c650:	eb 07                	jmp    f010c659 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c652:	90                   	nop
f010c653:	eb 04                	jmp    f010c659 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c655:	90                   	nop
f010c656:	eb 01                	jmp    f010c659 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010c658:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010c659:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c65d:	75 17                	jne    f010c676 <tst+0xd9>
f010c65f:	83 ec 04             	sub    $0x4,%esp
f010c662:	68 95 6b 13 f0       	push   $0xf0136b95
f010c667:	68 00 02 00 00       	push   $0x200
f010c66c:	68 d3 6a 13 f0       	push   $0xf0136ad3
f010c671:	e8 30 3b ff ff       	call   f01001a6 <_panic>
	tstcnt++ ;
f010c676:	a1 10 86 6e f0       	mov    0xf06e8610,%eax
f010c67b:	40                   	inc    %eax
f010c67c:	a3 10 86 6e f0       	mov    %eax,0xf06e8610
	return;
f010c681:	90                   	nop
}
f010c682:	c9                   	leave  
f010c683:	c3                   	ret    

f010c684 <chktst>:

void chktst(uint32 n)
{
f010c684:	55                   	push   %ebp
f010c685:	89 e5                	mov    %esp,%ebp
f010c687:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010c68a:	a1 10 86 6e f0       	mov    0xf06e8610,%eax
f010c68f:	3b 45 08             	cmp    0x8(%ebp),%eax
f010c692:	75 12                	jne    f010c6a6 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010c694:	83 ec 0c             	sub    $0xc,%esp
f010c697:	68 a8 6b 13 f0       	push   $0xf0136ba8
f010c69c:	e8 8c 45 ff ff       	call   f0100c2d <cprintf>
f010c6a1:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010c6a4:	eb 17                	jmp    f010c6bd <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010c6a6:	83 ec 04             	sub    $0x4,%esp
f010c6a9:	68 d4 6b 13 f0       	push   $0xf0136bd4
f010c6ae:	68 0a 02 00 00       	push   $0x20a
f010c6b3:	68 d3 6a 13 f0       	push   $0xf0136ad3
f010c6b8:	e8 e9 3a ff ff       	call   f01001a6 <_panic>
}
f010c6bd:	c9                   	leave  
f010c6be:	c3                   	ret    

f010c6bf <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010c6bf:	55                   	push   %ebp
f010c6c0:	89 e5                	mov    %esp,%ebp
f010c6c2:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c6c5:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c6ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010c6cd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010c6d4:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010c6db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c6df:	0f 84 a5 00 00 00    	je     f010c78a <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010c6e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c6ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c6ef:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010c6f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c6f8:	eb 4a                	jmp    f010c744 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010c6fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c6fd:	8b 00                	mov    (%eax),%eax
f010c6ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c705:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c70a:	89 c2                	mov    %eax,%edx
f010c70c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c70f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c716:	8b 45 08             	mov    0x8(%ebp),%eax
f010c719:	01 c8                	add    %ecx,%eax
f010c71b:	8b 00                	mov    (%eax),%eax
f010c71d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c720:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c723:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c728:	39 c2                	cmp    %eax,%edx
f010c72a:	74 09                	je     f010c735 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010c72c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010c733:	eb 3e                	jmp    f010c773 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010c735:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c738:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c73b:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c741:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c744:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c748:	74 08                	je     f010c752 <sys_check_LRU_lists+0x93>
f010c74a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c74d:	8b 40 10             	mov    0x10(%eax),%eax
f010c750:	eb 05                	jmp    f010c757 <sys_check_LRU_lists+0x98>
f010c752:	b8 00 00 00 00       	mov    $0x0,%eax
f010c757:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c75a:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010c760:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c763:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c769:	85 c0                	test   %eax,%eax
f010c76b:	75 8d                	jne    f010c6fa <sys_check_LRU_lists+0x3b>
f010c76d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c771:	75 87                	jne    f010c6fa <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010c773:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c776:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f010c77c:	8b 45 10             	mov    0x10(%ebp),%eax
f010c77f:	39 c2                	cmp    %eax,%edx
f010c781:	74 07                	je     f010c78a <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010c783:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010c78a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010c78e:	0f 84 a5 00 00 00    	je     f010c839 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010c794:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c79b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c79e:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010c7a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c7a7:	eb 4a                	jmp    f010c7f3 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010c7a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c7ac:	8b 00                	mov    (%eax),%eax
f010c7ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c7b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c7b4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c7b9:	89 c2                	mov    %eax,%edx
f010c7bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c7be:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c7c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c7c8:	01 c8                	add    %ecx,%eax
f010c7ca:	8b 00                	mov    (%eax),%eax
f010c7cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010c7cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c7d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c7d7:	39 c2                	cmp    %eax,%edx
f010c7d9:	74 09                	je     f010c7e4 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010c7db:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010c7e2:	eb 3e                	jmp    f010c822 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010c7e4:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c7e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7ea:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c7f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c7f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c7f7:	74 08                	je     f010c801 <sys_check_LRU_lists+0x142>
f010c7f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c7fc:	8b 40 10             	mov    0x10(%eax),%eax
f010c7ff:	eb 05                	jmp    f010c806 <sys_check_LRU_lists+0x147>
f010c801:	b8 00 00 00 00       	mov    $0x0,%eax
f010c806:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c809:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010c80f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c812:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c818:	85 c0                	test   %eax,%eax
f010c81a:	75 8d                	jne    f010c7a9 <sys_check_LRU_lists+0xea>
f010c81c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c820:	75 87                	jne    f010c7a9 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010c822:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c825:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f010c82b:	8b 45 14             	mov    0x14(%ebp),%eax
f010c82e:	39 c2                	cmp    %eax,%edx
f010c830:	74 07                	je     f010c839 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010c832:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010c839:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c83c:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010c83f:	c9                   	leave  
f010c840:	c3                   	ret    

f010c841 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010c841:	55                   	push   %ebp
f010c842:	89 e5                	mov    %esp,%ebp
f010c844:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c847:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c84c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010c84f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c856:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c859:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010c85f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c862:	eb 65                	jmp    f010c8c9 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010c864:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c86b:	eb 3a                	jmp    f010c8a7 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010c86d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c870:	8b 00                	mov    (%eax),%eax
f010c872:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c875:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c878:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c87d:	89 c2                	mov    %eax,%edx
f010c87f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c882:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c889:	8b 45 08             	mov    0x8(%ebp),%eax
f010c88c:	01 c8                	add    %ecx,%eax
f010c88e:	8b 00                	mov    (%eax),%eax
f010c890:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c893:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c896:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c89b:	39 c2                	cmp    %eax,%edx
f010c89d:	75 05                	jne    f010c8a4 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010c89f:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010c8a2:	eb 0b                	jmp    f010c8af <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010c8a4:	ff 45 f4             	incl   -0xc(%ebp)
f010c8a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c8aa:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c8ad:	7c be                	jl     f010c86d <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010c8af:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c8b3:	7e 08                	jle    f010c8bd <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010c8b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c8b8:	e9 ed 00 00 00       	jmp    f010c9aa <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c8bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c8c0:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c8c6:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c8c9:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c8cd:	74 08                	je     f010c8d7 <sys_check_LRU_lists_free+0x96>
f010c8cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c8d2:	8b 40 10             	mov    0x10(%eax),%eax
f010c8d5:	eb 05                	jmp    f010c8dc <sys_check_LRU_lists_free+0x9b>
f010c8d7:	b8 00 00 00 00       	mov    $0x0,%eax
f010c8dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c8df:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010c8e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c8e8:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c8ee:	85 c0                	test   %eax,%eax
f010c8f0:	0f 85 6e ff ff ff    	jne    f010c864 <sys_check_LRU_lists_free+0x23>
f010c8f6:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c8fa:	0f 85 64 ff ff ff    	jne    f010c864 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c900:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c903:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010c909:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c90c:	eb 62                	jmp    f010c970 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010c90e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010c915:	eb 3a                	jmp    f010c951 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010c917:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c91a:	8b 00                	mov    (%eax),%eax
f010c91c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c91f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c922:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c927:	89 c2                	mov    %eax,%edx
f010c929:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c92c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c933:	8b 45 08             	mov    0x8(%ebp),%eax
f010c936:	01 c8                	add    %ecx,%eax
f010c938:	8b 00                	mov    (%eax),%eax
f010c93a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c93d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c940:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c945:	39 c2                	cmp    %eax,%edx
f010c947:	75 05                	jne    f010c94e <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010c949:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010c94c:	eb 0b                	jmp    f010c959 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010c94e:	ff 45 f0             	incl   -0x10(%ebp)
f010c951:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c954:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c957:	7c be                	jl     f010c917 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010c959:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c95d:	7e 05                	jle    f010c964 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010c95f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c962:	eb 46                	jmp    f010c9aa <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c964:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c967:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c96d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c970:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c974:	74 08                	je     f010c97e <sys_check_LRU_lists_free+0x13d>
f010c976:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c979:	8b 40 10             	mov    0x10(%eax),%eax
f010c97c:	eb 05                	jmp    f010c983 <sys_check_LRU_lists_free+0x142>
f010c97e:	b8 00 00 00 00       	mov    $0x0,%eax
f010c983:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c986:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010c98c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c98f:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c995:	85 c0                	test   %eax,%eax
f010c997:	0f 85 71 ff ff ff    	jne    f010c90e <sys_check_LRU_lists_free+0xcd>
f010c99d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c9a1:	0f 85 67 ff ff ff    	jne    f010c90e <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010c9a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010c9aa:	c9                   	leave  
f010c9ab:	c3                   	ret    

f010c9ac <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010c9ac:	55                   	push   %ebp
f010c9ad:	89 e5                	mov    %esp,%ebp
f010c9af:	56                   	push   %esi
f010c9b0:	53                   	push   %ebx
f010c9b1:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010c9b4:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010c9b8:	0f 87 0e 04 00 00    	ja     f010cdcc <syscall+0x420>
f010c9be:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9c1:	c1 e0 02             	shl    $0x2,%eax
f010c9c4:	05 f0 6b 13 f0       	add    $0xf0136bf0,%eax
f010c9c9:	8b 00                	mov    (%eax),%eax
f010c9cb:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010c9cd:	8b 45 14             	mov    0x14(%ebp),%eax
f010c9d0:	0f b6 d0             	movzbl %al,%edx
f010c9d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c9d6:	83 ec 04             	sub    $0x4,%esp
f010c9d9:	52                   	push   %edx
f010c9da:	ff 75 10             	pushl  0x10(%ebp)
f010c9dd:	50                   	push   %eax
f010c9de:	e8 eb f4 ff ff       	call   f010bece <sys_cputs>
f010c9e3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c9e6:	b8 00 00 00 00       	mov    $0x0,%eax
f010c9eb:	e9 e1 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010c9f0:	e8 4e f5 ff ff       	call   f010bf43 <sys_cgetc>
f010c9f5:	e9 d7 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010c9fa:	83 ec 08             	sub    $0x8,%esp
f010c9fd:	ff 75 10             	pushl  0x10(%ebp)
f010ca00:	ff 75 0c             	pushl  0xc(%ebp)
f010ca03:	e8 88 f6 ff ff       	call   f010c090 <sys_calculate_required_frames>
f010ca08:	83 c4 10             	add    $0x10,%esp
f010ca0b:	e9 c1 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010ca10:	e8 9d f6 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f010ca15:	e9 b7 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010ca1a:	e8 b2 f6 ff ff       	call   f010c0d1 <sys_calculate_modified_frames>
f010ca1f:	e9 ad 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010ca24:	e8 c2 f6 ff ff       	call   f010c0eb <sys_calculate_notmod_frames>
f010ca29:	e9 a3 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010ca2e:	e8 2a f7 ff ff       	call   f010c15d <sys_pf_calculate_allocated_pages>
f010ca33:	e9 99 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010ca38:	83 ec 0c             	sub    $0xc,%esp
f010ca3b:	ff 75 0c             	pushl  0xc(%ebp)
f010ca3e:	e8 c2 f6 ff ff       	call   f010c105 <sys_calculate_pages_tobe_removed_ready_exit>
f010ca43:	83 c4 10             	add    $0x10,%esp
f010ca46:	e9 86 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010ca4b:	e8 cb f6 ff ff       	call   f010c11b <sys_scarce_memory>
		return 0;
f010ca50:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca55:	e9 77 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010ca5a:	83 ec 08             	sub    $0x8,%esp
f010ca5d:	ff 75 10             	pushl  0x10(%ebp)
f010ca60:	ff 75 0c             	pushl  0xc(%ebp)
f010ca63:	e8 0e f7 ff ff       	call   f010c176 <sys_free_user_mem>
f010ca68:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ca6b:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca70:	e9 5c 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010ca75:	8b 55 10             	mov    0x10(%ebp),%edx
f010ca78:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca7b:	83 ec 08             	sub    $0x8,%esp
f010ca7e:	52                   	push   %edx
f010ca7f:	50                   	push   %eax
f010ca80:	e8 d1 f4 ff ff       	call   f010bf56 <__sys_allocate_page>
f010ca85:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ca88:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca8d:	e9 3f 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010ca92:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010ca95:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010ca98:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010ca9b:	8b 55 10             	mov    0x10(%ebp),%edx
f010ca9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010caa1:	83 ec 0c             	sub    $0xc,%esp
f010caa4:	56                   	push   %esi
f010caa5:	53                   	push   %ebx
f010caa6:	51                   	push   %ecx
f010caa7:	52                   	push   %edx
f010caa8:	50                   	push   %eax
f010caa9:	e8 a8 f5 ff ff       	call   f010c056 <__sys_map_frame>
f010caae:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cab1:	b8 00 00 00 00       	mov    $0x0,%eax
f010cab6:	e9 16 03 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cabb:	8b 55 10             	mov    0x10(%ebp),%edx
f010cabe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cac1:	83 ec 08             	sub    $0x8,%esp
f010cac4:	52                   	push   %edx
f010cac5:	50                   	push   %eax
f010cac6:	e8 a8 f5 ff ff       	call   f010c073 <__sys_unmap_frame>
f010cacb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cace:	b8 00 00 00 00       	mov    $0x0,%eax
f010cad3:	e9 f9 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010cad8:	83 ec 04             	sub    $0x4,%esp
f010cadb:	ff 75 14             	pushl  0x14(%ebp)
f010cade:	ff 75 10             	pushl  0x10(%ebp)
f010cae1:	ff 75 0c             	pushl  0xc(%ebp)
f010cae4:	e8 ef f6 ff ff       	call   f010c1d8 <sys_allocate_chunk>
f010cae9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010caec:	b8 00 00 00 00       	mov    $0x0,%eax
f010caf1:	e9 db 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010caf6:	e8 38 f7 ff ff       	call   f010c233 <sys_disable_interrupt>
		return 0;
f010cafb:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb00:	e9 cc 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010cb05:	e8 43 f7 ff ff       	call   f010c24d <sys_enable_interrupt>
		return 0;
f010cb0a:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb0f:	e9 bd 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010cb14:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb17:	0f be c0             	movsbl %al,%eax
f010cb1a:	83 ec 0c             	sub    $0xc,%esp
f010cb1d:	50                   	push   %eax
f010cb1e:	e8 fc f3 ff ff       	call   f010bf1f <sys_cputc>
f010cb23:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb26:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb2b:	e9 a1 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010cb30:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb33:	0f be c0             	movsbl %al,%eax
f010cb36:	83 ec 0c             	sub    $0xc,%esp
f010cb39:	50                   	push   %eax
f010cb3a:	e8 ea f5 ff ff       	call   f010c129 <sys_clearFFL>
f010cb3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb42:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb47:	e9 85 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010cb4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb4f:	83 ec 08             	sub    $0x8,%esp
f010cb52:	ff 75 10             	pushl  0x10(%ebp)
f010cb55:	50                   	push   %eax
f010cb56:	e8 0c f7 ff ff       	call   f010c267 <sys_createSemaphore>
f010cb5b:	83 c4 10             	add    $0x10,%esp
f010cb5e:	e9 6e 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010cb63:	8b 55 10             	mov    0x10(%ebp),%edx
f010cb66:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb69:	83 ec 08             	sub    $0x8,%esp
f010cb6c:	52                   	push   %edx
f010cb6d:	50                   	push   %eax
f010cb6e:	e8 16 f7 ff ff       	call   f010c289 <sys_waitSemaphore>
f010cb73:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb76:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb7b:	e9 51 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010cb80:	8b 55 10             	mov    0x10(%ebp),%edx
f010cb83:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb86:	83 ec 08             	sub    $0x8,%esp
f010cb89:	52                   	push   %edx
f010cb8a:	50                   	push   %eax
f010cb8b:	e8 13 f7 ff ff       	call   f010c2a3 <sys_signalSemaphore>
f010cb90:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb93:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb98:	e9 34 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010cb9d:	8b 55 10             	mov    0x10(%ebp),%edx
f010cba0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cba3:	83 ec 08             	sub    $0x8,%esp
f010cba6:	52                   	push   %edx
f010cba7:	50                   	push   %eax
f010cba8:	e8 10 f7 ff ff       	call   f010c2bd <sys_getSemaphoreValue>
f010cbad:	83 c4 10             	add    $0x10,%esp
f010cbb0:	e9 1c 02 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010cbb5:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010cbb8:	8b 45 14             	mov    0x14(%ebp),%eax
f010cbbb:	0f b6 d0             	movzbl %al,%edx
f010cbbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbc1:	51                   	push   %ecx
f010cbc2:	52                   	push   %edx
f010cbc3:	ff 75 10             	pushl  0x10(%ebp)
f010cbc6:	50                   	push   %eax
f010cbc7:	e8 4e f7 ff ff       	call   f010c31a <sys_createSharedObject>
f010cbcc:	83 c4 10             	add    $0x10,%esp
f010cbcf:	e9 fd 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010cbd4:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cbd7:	8b 55 10             	mov    0x10(%ebp),%edx
f010cbda:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbdd:	83 ec 04             	sub    $0x4,%esp
f010cbe0:	51                   	push   %ecx
f010cbe1:	52                   	push   %edx
f010cbe2:	50                   	push   %eax
f010cbe3:	e8 7b f7 ff ff       	call   f010c363 <sys_getSharedObject>
f010cbe8:	83 c4 10             	add    $0x10,%esp
f010cbeb:	e9 e1 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010cbf0:	8b 55 10             	mov    0x10(%ebp),%edx
f010cbf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbf6:	83 ec 08             	sub    $0x8,%esp
f010cbf9:	52                   	push   %edx
f010cbfa:	50                   	push   %eax
f010cbfb:	e8 7f f7 ff ff       	call   f010c37f <sys_freeSharedObject>
f010cc00:	83 c4 10             	add    $0x10,%esp
f010cc03:	e9 c9 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010cc08:	8b 55 10             	mov    0x10(%ebp),%edx
f010cc0b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc0e:	83 ec 08             	sub    $0x8,%esp
f010cc11:	52                   	push   %edx
f010cc12:	50                   	push   %eax
f010cc13:	e8 32 f7 ff ff       	call   f010c34a <sys_getSizeOfSharedObject>
f010cc18:	83 c4 10             	add    $0x10,%esp
f010cc1b:	e9 b1 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010cc20:	e8 73 f7 ff ff       	call   f010c398 <sys_getMaxShares>
f010cc25:	e9 a7 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010cc2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc2d:	ff 75 18             	pushl  0x18(%ebp)
f010cc30:	ff 75 14             	pushl  0x14(%ebp)
f010cc33:	ff 75 10             	pushl  0x10(%ebp)
f010cc36:	50                   	push   %eax
f010cc37:	e8 86 f8 ff ff       	call   f010c4c2 <sys_create_env>
f010cc3c:	83 c4 10             	add    $0x10,%esp
f010cc3f:	e9 8d 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010cc44:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc47:	83 ec 0c             	sub    $0xc,%esp
f010cc4a:	50                   	push   %eax
f010cc4b:	e8 b2 f8 ff ff       	call   f010c502 <sys_run_env>
f010cc50:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc53:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc58:	e9 74 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010cc5d:	e8 4d f7 ff ff       	call   f010c3af <sys_getenvindex>
f010cc62:	e9 6a 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010cc67:	e8 36 f7 ff ff       	call   f010c3a2 <sys_getenvid>
f010cc6c:	e9 60 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010cc71:	e8 99 f7 ff ff       	call   f010c40f <sys_getparentenvid>
f010cc76:	e9 56 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010cc7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc7e:	83 ec 0c             	sub    $0xc,%esp
f010cc81:	50                   	push   %eax
f010cc82:	e8 95 f7 ff ff       	call   f010c41c <sys_destroy_env>
f010cc87:	83 c4 10             	add    $0x10,%esp
f010cc8a:	e9 42 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010cc8f:	e8 20 f8 ff ff       	call   f010c4b4 <sys_exit_env>
		return 0;
f010cc94:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc99:	e9 33 01 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010cc9e:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cca1:	83 ec 0c             	sub    $0xc,%esp
f010cca4:	50                   	push   %eax
f010cca5:	e8 70 f8 ff ff       	call   f010c51a <sys_get_virtual_time>
f010ccaa:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010ccad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010ccb3:	8b 45 10             	mov    0x10(%ebp),%eax
f010ccb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010ccb9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ccbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ccbf:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010ccc1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ccc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ccc7:	89 10                	mov    %edx,(%eax)
		return 0;
f010ccc9:	b8 00 00 00 00       	mov    $0x0,%eax
f010ccce:	e9 fe 00 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010ccd3:	83 ec 04             	sub    $0x4,%esp
f010ccd6:	ff 75 14             	pushl  0x14(%ebp)
f010ccd9:	ff 75 10             	pushl  0x10(%ebp)
f010ccdc:	ff 75 0c             	pushl  0xc(%ebp)
f010ccdf:	e8 17 f5 ff ff       	call   f010c1fb <sys_move_user_mem>
f010cce4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cce7:	b8 00 00 00 00       	mov    $0x0,%eax
f010ccec:	e9 e0 00 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010ccf1:	e8 53 f8 ff ff       	call   f010c549 <sys_rcr2>
f010ccf6:	e9 d6 00 00 00       	jmp    f010cdd1 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010ccfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccfe:	0f b6 c0             	movzbl %al,%eax
f010cd01:	83 ec 0c             	sub    $0xc,%esp
f010cd04:	50                   	push   %eax
f010cd05:	e8 51 f8 ff ff       	call   f010c55b <sys_bypassPageFault>
f010cd0a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd0d:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd12:	e9 ba 00 00 00       	jmp    f010cdd1 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010cd17:	e8 56 f8 ff ff       	call   f010c572 <rsttst>
		return 0;
f010cd1c:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd21:	e9 ab 00 00 00       	jmp    f010cdd1 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010cd26:	e8 57 f8 ff ff       	call   f010c582 <inctst>
		return 0;
f010cd2b:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd30:	e9 9c 00 00 00       	jmp    f010cdd1 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010cd35:	83 ec 0c             	sub    $0xc,%esp
f010cd38:	ff 75 0c             	pushl  0xc(%ebp)
f010cd3b:	e8 44 f9 ff ff       	call   f010c684 <chktst>
f010cd40:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd43:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd48:	e9 84 00 00 00       	jmp    f010cdd1 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010cd4d:	e8 41 f8 ff ff       	call   f010c593 <gettst>
f010cd52:	eb 7d                	jmp    f010cdd1 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010cd54:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010cd57:	8b 45 18             	mov    0x18(%ebp),%eax
f010cd5a:	0f be c0             	movsbl %al,%eax
f010cd5d:	83 ec 0c             	sub    $0xc,%esp
f010cd60:	52                   	push   %edx
f010cd61:	50                   	push   %eax
f010cd62:	ff 75 14             	pushl  0x14(%ebp)
f010cd65:	ff 75 10             	pushl  0x10(%ebp)
f010cd68:	ff 75 0c             	pushl  0xc(%ebp)
f010cd6b:	e8 2d f8 ff ff       	call   f010c59d <tst>
f010cd70:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cd73:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd78:	eb 57                	jmp    f010cdd1 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010cd7a:	e8 9c f4 ff ff       	call   f010c21b <sys_get_heap_strategy>
f010cd7f:	eb 50                	jmp    f010cdd1 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010cd81:	83 ec 0c             	sub    $0xc,%esp
f010cd84:	ff 75 0c             	pushl  0xc(%ebp)
f010cd87:	e8 99 f4 ff ff       	call   f010c225 <sys_set_uheap_strategy>
f010cd8c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd8f:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd94:	eb 3b                	jmp    f010cdd1 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010cd96:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cd99:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cd9c:	8b 55 10             	mov    0x10(%ebp),%edx
f010cd9f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cda2:	53                   	push   %ebx
f010cda3:	51                   	push   %ecx
f010cda4:	52                   	push   %edx
f010cda5:	50                   	push   %eax
f010cda6:	e8 14 f9 ff ff       	call   f010c6bf <sys_check_LRU_lists>
f010cdab:	83 c4 10             	add    $0x10,%esp
f010cdae:	eb 21                	jmp    f010cdd1 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010cdb0:	8b 55 10             	mov    0x10(%ebp),%edx
f010cdb3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdb6:	83 ec 08             	sub    $0x8,%esp
f010cdb9:	52                   	push   %edx
f010cdba:	50                   	push   %eax
f010cdbb:	e8 81 fa ff ff       	call   f010c841 <sys_check_LRU_lists_free>
f010cdc0:	83 c4 10             	add    $0x10,%esp
f010cdc3:	eb 0c                	jmp    f010cdd1 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010cdc5:	b8 03 00 00 00       	mov    $0x3,%eax
f010cdca:	eb 05                	jmp    f010cdd1 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010cdcc:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010cdd1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010cdd4:	5b                   	pop    %ebx
f010cdd5:	5e                   	pop    %esi
f010cdd6:	5d                   	pop    %ebp
f010cdd7:	c3                   	ret    

f010cdd8 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010cdd8:	55                   	push   %ebp
f010cdd9:	89 e5                	mov    %esp,%ebp
f010cddb:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010cdde:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cde1:	8b 00                	mov    (%eax),%eax
f010cde3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cde6:	8b 45 10             	mov    0x10(%ebp),%eax
f010cde9:	8b 00                	mov    (%eax),%eax
f010cdeb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cdee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010cdf5:	e9 ca 00 00 00       	jmp    f010cec4 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010cdfa:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cdfd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ce00:	01 d0                	add    %edx,%eax
f010ce02:	89 c2                	mov    %eax,%edx
f010ce04:	c1 ea 1f             	shr    $0x1f,%edx
f010ce07:	01 d0                	add    %edx,%eax
f010ce09:	d1 f8                	sar    %eax
f010ce0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010ce0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ce11:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010ce14:	eb 03                	jmp    f010ce19 <stab_binsearch+0x41>
			m--;
f010ce16:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010ce19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce1c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010ce1f:	7c 1e                	jl     f010ce3f <stab_binsearch+0x67>
f010ce21:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ce24:	89 d0                	mov    %edx,%eax
f010ce26:	01 c0                	add    %eax,%eax
f010ce28:	01 d0                	add    %edx,%eax
f010ce2a:	c1 e0 02             	shl    $0x2,%eax
f010ce2d:	89 c2                	mov    %eax,%edx
f010ce2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce32:	01 d0                	add    %edx,%eax
f010ce34:	8a 40 04             	mov    0x4(%eax),%al
f010ce37:	0f b6 c0             	movzbl %al,%eax
f010ce3a:	3b 45 14             	cmp    0x14(%ebp),%eax
f010ce3d:	75 d7                	jne    f010ce16 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010ce3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce42:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010ce45:	7d 09                	jge    f010ce50 <stab_binsearch+0x78>
			l = true_m + 1;
f010ce47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ce4a:	40                   	inc    %eax
f010ce4b:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010ce4e:	eb 74                	jmp    f010cec4 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010ce50:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010ce57:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ce5a:	89 d0                	mov    %edx,%eax
f010ce5c:	01 c0                	add    %eax,%eax
f010ce5e:	01 d0                	add    %edx,%eax
f010ce60:	c1 e0 02             	shl    $0x2,%eax
f010ce63:	89 c2                	mov    %eax,%edx
f010ce65:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce68:	01 d0                	add    %edx,%eax
f010ce6a:	8b 40 08             	mov    0x8(%eax),%eax
f010ce6d:	3b 45 18             	cmp    0x18(%ebp),%eax
f010ce70:	73 11                	jae    f010ce83 <stab_binsearch+0xab>
			*region_left = m;
f010ce72:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce75:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ce78:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010ce7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ce7d:	40                   	inc    %eax
f010ce7e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010ce81:	eb 41                	jmp    f010cec4 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010ce83:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ce86:	89 d0                	mov    %edx,%eax
f010ce88:	01 c0                	add    %eax,%eax
f010ce8a:	01 d0                	add    %edx,%eax
f010ce8c:	c1 e0 02             	shl    $0x2,%eax
f010ce8f:	89 c2                	mov    %eax,%edx
f010ce91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce94:	01 d0                	add    %edx,%eax
f010ce96:	8b 40 08             	mov    0x8(%eax),%eax
f010ce99:	3b 45 18             	cmp    0x18(%ebp),%eax
f010ce9c:	76 14                	jbe    f010ceb2 <stab_binsearch+0xda>
			*region_right = m - 1;
f010ce9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cea1:	8d 50 ff             	lea    -0x1(%eax),%edx
f010cea4:	8b 45 10             	mov    0x10(%ebp),%eax
f010cea7:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010cea9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ceac:	48                   	dec    %eax
f010cead:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ceb0:	eb 12                	jmp    f010cec4 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010ceb2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ceb5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ceb8:	89 10                	mov    %edx,(%eax)
			l = m;
f010ceba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cebd:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010cec0:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010cec4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cec7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010ceca:	0f 8e 2a ff ff ff    	jle    f010cdfa <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010ced0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ced4:	75 0f                	jne    f010cee5 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010ced6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ced9:	8b 00                	mov    (%eax),%eax
f010cedb:	8d 50 ff             	lea    -0x1(%eax),%edx
f010cede:	8b 45 10             	mov    0x10(%ebp),%eax
f010cee1:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010cee3:	eb 3d                	jmp    f010cf22 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010cee5:	8b 45 10             	mov    0x10(%ebp),%eax
f010cee8:	8b 00                	mov    (%eax),%eax
f010ceea:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010ceed:	eb 03                	jmp    f010cef2 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010ceef:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010cef2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cef5:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010cef7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cefa:	7d 1e                	jge    f010cf1a <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010cefc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ceff:	89 d0                	mov    %edx,%eax
f010cf01:	01 c0                	add    %eax,%eax
f010cf03:	01 d0                	add    %edx,%eax
f010cf05:	c1 e0 02             	shl    $0x2,%eax
f010cf08:	89 c2                	mov    %eax,%edx
f010cf0a:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf0d:	01 d0                	add    %edx,%eax
f010cf0f:	8a 40 04             	mov    0x4(%eax),%al
f010cf12:	0f b6 c0             	movzbl %al,%eax
f010cf15:	3b 45 14             	cmp    0x14(%ebp),%eax
f010cf18:	75 d5                	jne    f010ceef <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010cf1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf1d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cf20:	89 10                	mov    %edx,(%eax)
	}
}
f010cf22:	90                   	nop
f010cf23:	c9                   	leave  
f010cf24:	c3                   	ret    

f010cf25 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010cf25:	55                   	push   %ebp
f010cf26:	89 e5                	mov    %esp,%ebp
f010cf28:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010cf2b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf2e:	c7 00 b4 6c 13 f0    	movl   $0xf0136cb4,(%eax)
	info->eip_line = 0;
f010cf34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf37:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010cf3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf41:	c7 40 08 b4 6c 13 f0 	movl   $0xf0136cb4,0x8(%eax)
	info->eip_fn_namelen = 9;
f010cf48:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf4b:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010cf52:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf55:	8b 55 08             	mov    0x8(%ebp),%edx
f010cf58:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010cf5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf5e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010cf65:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf68:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010cf6d:	76 1e                	jbe    f010cf8d <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010cf6f:	c7 45 f4 50 c7 13 f0 	movl   $0xf013c750,-0xc(%ebp)
		stab_end = __STAB_END__;
f010cf76:	c7 45 f0 a0 a9 17 f0 	movl   $0xf017a9a0,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010cf7d:	c7 45 ec a1 a9 17 f0 	movl   $0xf017a9a1,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010cf84:	c7 45 e8 b5 75 18 f0 	movl   $0xf01875b5,-0x18(%ebp)
f010cf8b:	eb 2a                	jmp    f010cfb7 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010cf8d:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010cf94:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cf97:	8b 00                	mov    (%eax),%eax
f010cf99:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010cf9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cf9f:	8b 40 04             	mov    0x4(%eax),%eax
f010cfa2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010cfa5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfa8:	8b 40 08             	mov    0x8(%eax),%eax
f010cfab:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010cfae:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfb1:	8b 40 0c             	mov    0xc(%eax),%eax
f010cfb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010cfb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010cfbd:	76 0a                	jbe    f010cfc9 <debuginfo_eip+0xa4>
f010cfbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfc2:	48                   	dec    %eax
f010cfc3:	8a 00                	mov    (%eax),%al
f010cfc5:	84 c0                	test   %al,%al
f010cfc7:	74 0a                	je     f010cfd3 <debuginfo_eip+0xae>
		return -1;
f010cfc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010cfce:	e9 01 02 00 00       	jmp    f010d1d4 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010cfd3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010cfda:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cfdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfe0:	29 c2                	sub    %eax,%edx
f010cfe2:	89 d0                	mov    %edx,%eax
f010cfe4:	c1 f8 02             	sar    $0x2,%eax
f010cfe7:	89 c2                	mov    %eax,%edx
f010cfe9:	89 d0                	mov    %edx,%eax
f010cfeb:	c1 e0 02             	shl    $0x2,%eax
f010cfee:	01 d0                	add    %edx,%eax
f010cff0:	c1 e0 02             	shl    $0x2,%eax
f010cff3:	01 d0                	add    %edx,%eax
f010cff5:	c1 e0 02             	shl    $0x2,%eax
f010cff8:	01 d0                	add    %edx,%eax
f010cffa:	89 c1                	mov    %eax,%ecx
f010cffc:	c1 e1 08             	shl    $0x8,%ecx
f010cfff:	01 c8                	add    %ecx,%eax
f010d001:	89 c1                	mov    %eax,%ecx
f010d003:	c1 e1 10             	shl    $0x10,%ecx
f010d006:	01 c8                	add    %ecx,%eax
f010d008:	01 c0                	add    %eax,%eax
f010d00a:	01 d0                	add    %edx,%eax
f010d00c:	48                   	dec    %eax
f010d00d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d010:	ff 75 08             	pushl  0x8(%ebp)
f010d013:	6a 64                	push   $0x64
f010d015:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d018:	50                   	push   %eax
f010d019:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d01c:	50                   	push   %eax
f010d01d:	ff 75 f4             	pushl  -0xc(%ebp)
f010d020:	e8 b3 fd ff ff       	call   f010cdd8 <stab_binsearch>
f010d025:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d028:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d02b:	85 c0                	test   %eax,%eax
f010d02d:	75 0a                	jne    f010d039 <debuginfo_eip+0x114>
		return -1;
f010d02f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d034:	e9 9b 01 00 00       	jmp    f010d1d4 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d039:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d03c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d03f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d042:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d045:	ff 75 08             	pushl  0x8(%ebp)
f010d048:	6a 24                	push   $0x24
f010d04a:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d04d:	50                   	push   %eax
f010d04e:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d051:	50                   	push   %eax
f010d052:	ff 75 f4             	pushl  -0xc(%ebp)
f010d055:	e8 7e fd ff ff       	call   f010cdd8 <stab_binsearch>
f010d05a:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d05d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d060:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d063:	39 c2                	cmp    %eax,%edx
f010d065:	0f 8f 86 00 00 00    	jg     f010d0f1 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d06b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d06e:	89 c2                	mov    %eax,%edx
f010d070:	89 d0                	mov    %edx,%eax
f010d072:	01 c0                	add    %eax,%eax
f010d074:	01 d0                	add    %edx,%eax
f010d076:	c1 e0 02             	shl    $0x2,%eax
f010d079:	89 c2                	mov    %eax,%edx
f010d07b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d07e:	01 d0                	add    %edx,%eax
f010d080:	8b 00                	mov    (%eax),%eax
f010d082:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d085:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d088:	29 d1                	sub    %edx,%ecx
f010d08a:	89 ca                	mov    %ecx,%edx
f010d08c:	39 d0                	cmp    %edx,%eax
f010d08e:	73 22                	jae    f010d0b2 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d090:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d093:	89 c2                	mov    %eax,%edx
f010d095:	89 d0                	mov    %edx,%eax
f010d097:	01 c0                	add    %eax,%eax
f010d099:	01 d0                	add    %edx,%eax
f010d09b:	c1 e0 02             	shl    $0x2,%eax
f010d09e:	89 c2                	mov    %eax,%edx
f010d0a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0a3:	01 d0                	add    %edx,%eax
f010d0a5:	8b 10                	mov    (%eax),%edx
f010d0a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0aa:	01 c2                	add    %eax,%edx
f010d0ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0af:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d0b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d0b5:	89 c2                	mov    %eax,%edx
f010d0b7:	89 d0                	mov    %edx,%eax
f010d0b9:	01 c0                	add    %eax,%eax
f010d0bb:	01 d0                	add    %edx,%eax
f010d0bd:	c1 e0 02             	shl    $0x2,%eax
f010d0c0:	89 c2                	mov    %eax,%edx
f010d0c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0c5:	01 d0                	add    %edx,%eax
f010d0c7:	8b 50 08             	mov    0x8(%eax),%edx
f010d0ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0cd:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d0d0:	8b 55 08             	mov    0x8(%ebp),%edx
f010d0d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0d6:	8b 40 10             	mov    0x10(%eax),%eax
f010d0d9:	29 c2                	sub    %eax,%edx
f010d0db:	89 d0                	mov    %edx,%eax
f010d0dd:	c1 f8 02             	sar    $0x2,%eax
f010d0e0:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d0e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d0e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d0e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d0ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d0ef:	eb 15                	jmp    f010d106 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d0f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0f4:	8b 55 08             	mov    0x8(%ebp),%edx
f010d0f7:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d0fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d0fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d100:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d103:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d106:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d109:	8b 40 08             	mov    0x8(%eax),%eax
f010d10c:	83 ec 08             	sub    $0x8,%esp
f010d10f:	6a 3a                	push   $0x3a
f010d111:	50                   	push   %eax
f010d112:	e8 ca 34 02 00       	call   f01305e1 <strfind>
f010d117:	83 c4 10             	add    $0x10,%esp
f010d11a:	89 c2                	mov    %eax,%edx
f010d11c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d11f:	8b 40 08             	mov    0x8(%eax),%eax
f010d122:	29 c2                	sub    %eax,%edx
f010d124:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d127:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d12a:	eb 03                	jmp    f010d12f <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d12c:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d12f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d132:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d135:	7c 4e                	jl     f010d185 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d137:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d13a:	89 d0                	mov    %edx,%eax
f010d13c:	01 c0                	add    %eax,%eax
f010d13e:	01 d0                	add    %edx,%eax
f010d140:	c1 e0 02             	shl    $0x2,%eax
f010d143:	89 c2                	mov    %eax,%edx
f010d145:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d148:	01 d0                	add    %edx,%eax
f010d14a:	8a 40 04             	mov    0x4(%eax),%al
f010d14d:	3c 84                	cmp    $0x84,%al
f010d14f:	74 34                	je     f010d185 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d151:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d154:	89 d0                	mov    %edx,%eax
f010d156:	01 c0                	add    %eax,%eax
f010d158:	01 d0                	add    %edx,%eax
f010d15a:	c1 e0 02             	shl    $0x2,%eax
f010d15d:	89 c2                	mov    %eax,%edx
f010d15f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d162:	01 d0                	add    %edx,%eax
f010d164:	8a 40 04             	mov    0x4(%eax),%al
f010d167:	3c 64                	cmp    $0x64,%al
f010d169:	75 c1                	jne    f010d12c <debuginfo_eip+0x207>
f010d16b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d16e:	89 d0                	mov    %edx,%eax
f010d170:	01 c0                	add    %eax,%eax
f010d172:	01 d0                	add    %edx,%eax
f010d174:	c1 e0 02             	shl    $0x2,%eax
f010d177:	89 c2                	mov    %eax,%edx
f010d179:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d17c:	01 d0                	add    %edx,%eax
f010d17e:	8b 40 08             	mov    0x8(%eax),%eax
f010d181:	85 c0                	test   %eax,%eax
f010d183:	74 a7                	je     f010d12c <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d185:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d188:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d18b:	7c 42                	jl     f010d1cf <debuginfo_eip+0x2aa>
f010d18d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d190:	89 d0                	mov    %edx,%eax
f010d192:	01 c0                	add    %eax,%eax
f010d194:	01 d0                	add    %edx,%eax
f010d196:	c1 e0 02             	shl    $0x2,%eax
f010d199:	89 c2                	mov    %eax,%edx
f010d19b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d19e:	01 d0                	add    %edx,%eax
f010d1a0:	8b 00                	mov    (%eax),%eax
f010d1a2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d1a5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d1a8:	29 d1                	sub    %edx,%ecx
f010d1aa:	89 ca                	mov    %ecx,%edx
f010d1ac:	39 d0                	cmp    %edx,%eax
f010d1ae:	73 1f                	jae    f010d1cf <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d1b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d1b3:	89 d0                	mov    %edx,%eax
f010d1b5:	01 c0                	add    %eax,%eax
f010d1b7:	01 d0                	add    %edx,%eax
f010d1b9:	c1 e0 02             	shl    $0x2,%eax
f010d1bc:	89 c2                	mov    %eax,%edx
f010d1be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1c1:	01 d0                	add    %edx,%eax
f010d1c3:	8b 10                	mov    (%eax),%edx
f010d1c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d1c8:	01 c2                	add    %eax,%edx
f010d1ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1cd:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d1cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d1d4:	c9                   	leave  
f010d1d5:	c3                   	ret    

f010d1d6 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d1d6:	55                   	push   %ebp
f010d1d7:	89 e5                	mov    %esp,%ebp
f010d1d9:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d1dc:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d1e0:	74 1c                	je     f010d1fe <setPageReplacmentAlgorithmLRU+0x28>
f010d1e2:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d1e6:	74 16                	je     f010d1fe <setPageReplacmentAlgorithmLRU+0x28>
f010d1e8:	68 c0 6c 13 f0       	push   $0xf0136cc0
f010d1ed:	68 0a 6d 13 f0       	push   $0xf0136d0a
f010d1f2:	6a 18                	push   $0x18
f010d1f4:	68 1f 6d 13 f0       	push   $0xf0136d1f
f010d1f9:	e8 a8 2f ff ff       	call   f01001a6 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d1fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010d201:	a3 e4 84 6e f0       	mov    %eax,0xf06e84e4
}
f010d206:	90                   	nop
f010d207:	c9                   	leave  
f010d208:	c3                   	ret    

f010d209 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d209:	55                   	push   %ebp
f010d20a:	89 e5                	mov    %esp,%ebp
f010d20c:	c7 05 e4 84 6e f0 03 	movl   $0x3,0xf06e84e4
f010d213:	00 00 00 
f010d216:	90                   	nop
f010d217:	5d                   	pop    %ebp
f010d218:	c3                   	ret    

f010d219 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d219:	55                   	push   %ebp
f010d21a:	89 e5                	mov    %esp,%ebp
f010d21c:	c7 05 e4 84 6e f0 04 	movl   $0x4,0xf06e84e4
f010d223:	00 00 00 
f010d226:	90                   	nop
f010d227:	5d                   	pop    %ebp
f010d228:	c3                   	ret    

f010d229 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d229:	55                   	push   %ebp
f010d22a:	89 e5                	mov    %esp,%ebp
f010d22c:	c7 05 e4 84 6e f0 05 	movl   $0x5,0xf06e84e4
f010d233:	00 00 00 
f010d236:	90                   	nop
f010d237:	5d                   	pop    %ebp
f010d238:	c3                   	ret    

f010d239 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d239:	55                   	push   %ebp
f010d23a:	89 e5                	mov    %esp,%ebp
f010d23c:	c7 05 e4 84 6e f0 07 	movl   $0x7,0xf06e84e4
f010d243:	00 00 00 
f010d246:	90                   	nop
f010d247:	5d                   	pop    %ebp
f010d248:	c3                   	ret    

f010d249 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d249:	55                   	push   %ebp
f010d24a:	89 e5                	mov    %esp,%ebp
f010d24c:	c7 05 e4 84 6e f0 06 	movl   $0x6,0xf06e84e4
f010d253:	00 00 00 
f010d256:	8b 45 08             	mov    0x8(%ebp),%eax
f010d259:	a3 08 01 68 f0       	mov    %eax,0xf0680108
f010d25e:	90                   	nop
f010d25f:	5d                   	pop    %ebp
f010d260:	c3                   	ret    

f010d261 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d261:	55                   	push   %ebp
f010d262:	89 e5                	mov    %esp,%ebp
f010d264:	8b 15 e4 84 6e f0    	mov    0xf06e84e4,%edx
f010d26a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d26d:	39 c2                	cmp    %eax,%edx
f010d26f:	0f 94 c0             	sete   %al
f010d272:	0f b6 c0             	movzbl %al,%eax
f010d275:	5d                   	pop    %ebp
f010d276:	c3                   	ret    

f010d277 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d277:	55                   	push   %ebp
f010d278:	89 e5                	mov    %esp,%ebp
f010d27a:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d27f:	83 f8 03             	cmp    $0x3,%eax
f010d282:	75 07                	jne    f010d28b <isPageReplacmentAlgorithmCLOCK+0x14>
f010d284:	b8 01 00 00 00       	mov    $0x1,%eax
f010d289:	eb 05                	jmp    f010d290 <isPageReplacmentAlgorithmCLOCK+0x19>
f010d28b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d290:	5d                   	pop    %ebp
f010d291:	c3                   	ret    

f010d292 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d292:	55                   	push   %ebp
f010d293:	89 e5                	mov    %esp,%ebp
f010d295:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d29a:	83 f8 04             	cmp    $0x4,%eax
f010d29d:	75 07                	jne    f010d2a6 <isPageReplacmentAlgorithmFIFO+0x14>
f010d29f:	b8 01 00 00 00       	mov    $0x1,%eax
f010d2a4:	eb 05                	jmp    f010d2ab <isPageReplacmentAlgorithmFIFO+0x19>
f010d2a6:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2ab:	5d                   	pop    %ebp
f010d2ac:	c3                   	ret    

f010d2ad <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d2ad:	55                   	push   %ebp
f010d2ae:	89 e5                	mov    %esp,%ebp
f010d2b0:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d2b5:	83 f8 05             	cmp    $0x5,%eax
f010d2b8:	75 07                	jne    f010d2c1 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d2ba:	b8 01 00 00 00       	mov    $0x1,%eax
f010d2bf:	eb 05                	jmp    f010d2c6 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d2c1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2c6:	5d                   	pop    %ebp
f010d2c7:	c3                   	ret    

f010d2c8 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d2c8:	55                   	push   %ebp
f010d2c9:	89 e5                	mov    %esp,%ebp
f010d2cb:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d2d0:	83 f8 07             	cmp    $0x7,%eax
f010d2d3:	75 07                	jne    f010d2dc <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d2d5:	b8 01 00 00 00       	mov    $0x1,%eax
f010d2da:	eb 05                	jmp    f010d2e1 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d2dc:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2e1:	5d                   	pop    %ebp
f010d2e2:	c3                   	ret    

f010d2e3 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d2e3:	55                   	push   %ebp
f010d2e4:	89 e5                	mov    %esp,%ebp
f010d2e6:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d2eb:	83 f8 06             	cmp    $0x6,%eax
f010d2ee:	75 07                	jne    f010d2f7 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d2f0:	b8 01 00 00 00       	mov    $0x1,%eax
f010d2f5:	eb 05                	jmp    f010d2fc <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d2f7:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2fc:	5d                   	pop    %ebp
f010d2fd:	c3                   	ret    

f010d2fe <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d2fe:	55                   	push   %ebp
f010d2ff:	89 e5                	mov    %esp,%ebp
f010d301:	8b 45 08             	mov    0x8(%ebp),%eax
f010d304:	a3 ac 84 6e f0       	mov    %eax,0xf06e84ac
f010d309:	90                   	nop
f010d30a:	5d                   	pop    %ebp
f010d30b:	c3                   	ret    

f010d30c <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d30c:	55                   	push   %ebp
f010d30d:	89 e5                	mov    %esp,%ebp
f010d30f:	a1 ac 84 6e f0       	mov    0xf06e84ac,%eax
f010d314:	5d                   	pop    %ebp
f010d315:	c3                   	ret    

f010d316 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d316:	55                   	push   %ebp
f010d317:	89 e5                	mov    %esp,%ebp
f010d319:	8b 45 08             	mov    0x8(%ebp),%eax
f010d31c:	a3 ec 84 6e f0       	mov    %eax,0xf06e84ec
f010d321:	90                   	nop
f010d322:	5d                   	pop    %ebp
f010d323:	c3                   	ret    

f010d324 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d324:	55                   	push   %ebp
f010d325:	89 e5                	mov    %esp,%ebp
f010d327:	a1 ec 84 6e f0       	mov    0xf06e84ec,%eax
f010d32c:	5d                   	pop    %ebp
f010d32d:	c3                   	ret    

f010d32e <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d32e:	55                   	push   %ebp
f010d32f:	89 e5                	mov    %esp,%ebp
f010d331:	8b 45 08             	mov    0x8(%ebp),%eax
f010d334:	a3 0c 85 6e f0       	mov    %eax,0xf06e850c
f010d339:	90                   	nop
f010d33a:	5d                   	pop    %ebp
f010d33b:	c3                   	ret    

f010d33c <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d33c:	55                   	push   %ebp
f010d33d:	89 e5                	mov    %esp,%ebp
f010d33f:	a1 0c 85 6e f0       	mov    0xf06e850c,%eax
f010d344:	5d                   	pop    %ebp
f010d345:	c3                   	ret    

f010d346 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d346:	55                   	push   %ebp
f010d347:	89 e5                	mov    %esp,%ebp
f010d349:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d34c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d34f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d352:	83 ec 04             	sub    $0x4,%esp
f010d355:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d358:	52                   	push   %edx
f010d359:	ff 75 0c             	pushl  0xc(%ebp)
f010d35c:	50                   	push   %eax
f010d35d:	e8 2d 97 ff ff       	call   f0106a8f <__static_cpt>
f010d362:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d365:	90                   	nop
f010d366:	c9                   	leave  
f010d367:	c3                   	ret    

f010d368 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d368:	55                   	push   %ebp
f010d369:	89 e5                	mov    %esp,%ebp
f010d36b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010d36e:	83 ec 04             	sub    $0x4,%esp
f010d371:	68 3c 6d 13 f0       	push   $0xf0136d3c
f010d376:	6a 50                	push   $0x50
f010d378:	68 1f 6d 13 f0       	push   $0xf0136d1f
f010d37d:	e8 24 2e ff ff       	call   f01001a6 <_panic>

f010d382 <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d382:	55                   	push   %ebp
f010d383:	89 e5                	mov    %esp,%ebp
f010d385:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010d388:	83 ec 04             	sub    $0x4,%esp
f010d38b:	68 70 6d 13 f0       	push   $0xf0136d70
f010d390:	6a 57                	push   $0x57
f010d392:	68 1f 6d 13 f0       	push   $0xf0136d1f
f010d397:	e8 0a 2e ff ff       	call   f01001a6 <_panic>

f010d39c <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d39c:	55                   	push   %ebp
f010d39d:	89 e5                	mov    %esp,%ebp
f010d39f:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d3a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d3a9:	e9 aa 00 00 00       	jmp    f010d458 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d3ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d3b1:	89 d0                	mov    %edx,%eax
f010d3b3:	c1 e0 02             	shl    $0x2,%eax
f010d3b6:	01 d0                	add    %edx,%eax
f010d3b8:	01 c0                	add    %eax,%eax
f010d3ba:	01 d0                	add    %edx,%eax
f010d3bc:	01 c0                	add    %eax,%eax
f010d3be:	01 d0                	add    %edx,%eax
f010d3c0:	c1 e0 02             	shl    $0x2,%eax
f010d3c3:	05 80 60 6e f0       	add    $0xf06e6080,%eax
f010d3c8:	83 ec 04             	sub    $0x4,%esp
f010d3cb:	6a 5c                	push   $0x5c
f010d3cd:	6a 00                	push   $0x0
f010d3cf:	50                   	push   %eax
f010d3d0:	e8 38 32 02 00       	call   f013060d <memset>
f010d3d5:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d3d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d3db:	89 d0                	mov    %edx,%eax
f010d3dd:	c1 e0 02             	shl    $0x2,%eax
f010d3e0:	01 d0                	add    %edx,%eax
f010d3e2:	01 c0                	add    %eax,%eax
f010d3e4:	01 d0                	add    %edx,%eax
f010d3e6:	01 c0                	add    %eax,%eax
f010d3e8:	01 d0                	add    %edx,%eax
f010d3ea:	c1 e0 02             	shl    $0x2,%eax
f010d3ed:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d3f2:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d3f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d3f8:	89 d0                	mov    %edx,%eax
f010d3fa:	c1 e0 02             	shl    $0x2,%eax
f010d3fd:	01 d0                	add    %edx,%eax
f010d3ff:	01 c0                	add    %eax,%eax
f010d401:	01 d0                	add    %edx,%eax
f010d403:	01 c0                	add    %eax,%eax
f010d405:	01 d0                	add    %edx,%eax
f010d407:	c1 e0 02             	shl    $0x2,%eax
f010d40a:	05 c4 60 6e f0       	add    $0xf06e60c4,%eax
f010d40f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d415:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d418:	89 d0                	mov    %edx,%eax
f010d41a:	c1 e0 02             	shl    $0x2,%eax
f010d41d:	01 d0                	add    %edx,%eax
f010d41f:	01 c0                	add    %eax,%eax
f010d421:	01 d0                	add    %edx,%eax
f010d423:	01 c0                	add    %eax,%eax
f010d425:	01 d0                	add    %edx,%eax
f010d427:	c1 e0 02             	shl    $0x2,%eax
f010d42a:	05 c8 60 6e f0       	add    $0xf06e60c8,%eax
f010d42f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d435:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d438:	89 d0                	mov    %edx,%eax
f010d43a:	c1 e0 02             	shl    $0x2,%eax
f010d43d:	01 d0                	add    %edx,%eax
f010d43f:	01 c0                	add    %eax,%eax
f010d441:	01 d0                	add    %edx,%eax
f010d443:	01 c0                	add    %eax,%eax
f010d445:	01 d0                	add    %edx,%eax
f010d447:	c1 e0 02             	shl    $0x2,%eax
f010d44a:	05 d0 60 6e f0       	add    $0xf06e60d0,%eax
f010d44f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d455:	ff 45 f4             	incl   -0xc(%ebp)
f010d458:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d45c:	0f 8e 4c ff ff ff    	jle    f010d3ae <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d462:	90                   	nop
f010d463:	c9                   	leave  
f010d464:	c3                   	ret    

f010d465 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d465:	55                   	push   %ebp
f010d466:	89 e5                	mov    %esp,%ebp
f010d468:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010d46b:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d472:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d479:	eb 2b                	jmp    f010d4a6 <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d47b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d47e:	89 d0                	mov    %edx,%eax
f010d480:	c1 e0 02             	shl    $0x2,%eax
f010d483:	01 d0                	add    %edx,%eax
f010d485:	01 c0                	add    %eax,%eax
f010d487:	01 d0                	add    %edx,%eax
f010d489:	01 c0                	add    %eax,%eax
f010d48b:	01 d0                	add    %edx,%eax
f010d48d:	c1 e0 02             	shl    $0x2,%eax
f010d490:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d495:	8a 00                	mov    (%eax),%al
f010d497:	84 c0                	test   %al,%al
f010d499:	74 08                	je     f010d4a3 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d49b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d49e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010d4a1:	eb 09                	jmp    f010d4ac <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d4a3:	ff 45 f0             	incl   -0x10(%ebp)
f010d4a6:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010d4aa:	7e cf                	jle    f010d47b <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d4ac:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010d4b0:	75 14                	jne    f010d4c6 <allocate_semaphore_object+0x61>
				MAX_SEMAPHORES *= 2;
			}
		}
		#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010d4b2:	83 ec 04             	sub    $0x4,%esp
f010d4b5:	68 b4 6d 13 f0       	push   $0xf0136db4
f010d4ba:	6a 53                	push   $0x53
f010d4bc:	68 04 6e 13 f0       	push   $0xf0136e04
f010d4c1:	e8 e0 2c ff ff       	call   f01001a6 <_panic>
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d4c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d4c9:	89 d0                	mov    %edx,%eax
f010d4cb:	c1 e0 02             	shl    $0x2,%eax
f010d4ce:	01 d0                	add    %edx,%eax
f010d4d0:	01 c0                	add    %eax,%eax
f010d4d2:	01 d0                	add    %edx,%eax
f010d4d4:	01 c0                	add    %eax,%eax
f010d4d6:	01 d0                	add    %edx,%eax
f010d4d8:	c1 e0 02             	shl    $0x2,%eax
f010d4db:	8d 90 80 60 6e f0    	lea    -0xf919f80(%eax),%edx
f010d4e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4e4:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010d4e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d4e9:	89 d0                	mov    %edx,%eax
f010d4eb:	c1 e0 02             	shl    $0x2,%eax
f010d4ee:	01 d0                	add    %edx,%eax
f010d4f0:	01 c0                	add    %eax,%eax
f010d4f2:	01 d0                	add    %edx,%eax
f010d4f4:	01 c0                	add    %eax,%eax
f010d4f6:	01 d0                	add    %edx,%eax
f010d4f8:	c1 e0 02             	shl    $0x2,%eax
f010d4fb:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d500:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010d503:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d506:	c9                   	leave  
f010d507:	c3                   	ret    

f010d508 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010d508:	55                   	push   %ebp
f010d509:	89 e5                	mov    %esp,%ebp
f010d50b:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010d50e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010d515:	eb 7a                	jmp    f010d591 <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010d517:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d51a:	89 d0                	mov    %edx,%eax
f010d51c:	c1 e0 02             	shl    $0x2,%eax
f010d51f:	01 d0                	add    %edx,%eax
f010d521:	01 c0                	add    %eax,%eax
f010d523:	01 d0                	add    %edx,%eax
f010d525:	01 c0                	add    %eax,%eax
f010d527:	01 d0                	add    %edx,%eax
f010d529:	c1 e0 02             	shl    $0x2,%eax
f010d52c:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d531:	8a 00                	mov    (%eax),%al
f010d533:	84 c0                	test   %al,%al
f010d535:	75 56                	jne    f010d58d <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010d537:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d53a:	89 d0                	mov    %edx,%eax
f010d53c:	c1 e0 02             	shl    $0x2,%eax
f010d53f:	01 d0                	add    %edx,%eax
f010d541:	01 c0                	add    %eax,%eax
f010d543:	01 d0                	add    %edx,%eax
f010d545:	01 c0                	add    %eax,%eax
f010d547:	01 d0                	add    %edx,%eax
f010d549:	c1 e0 02             	shl    $0x2,%eax
f010d54c:	05 80 60 6e f0       	add    $0xf06e6080,%eax
f010d551:	8b 00                	mov    (%eax),%eax
f010d553:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d556:	75 36                	jne    f010d58e <get_semaphore_object_ID+0x86>
f010d558:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d55b:	89 d0                	mov    %edx,%eax
f010d55d:	c1 e0 02             	shl    $0x2,%eax
f010d560:	01 d0                	add    %edx,%eax
f010d562:	01 c0                	add    %eax,%eax
f010d564:	01 d0                	add    %edx,%eax
f010d566:	01 c0                	add    %eax,%eax
f010d568:	01 d0                	add    %edx,%eax
f010d56a:	c1 e0 02             	shl    $0x2,%eax
f010d56d:	05 80 60 6e f0       	add    $0xf06e6080,%eax
f010d572:	83 c0 04             	add    $0x4,%eax
f010d575:	83 ec 08             	sub    $0x8,%esp
f010d578:	50                   	push   %eax
f010d579:	ff 75 0c             	pushl  0xc(%ebp)
f010d57c:	e8 aa 2f 02 00       	call   f013052b <strcmp>
f010d581:	83 c4 10             	add    $0x10,%esp
f010d584:	85 c0                	test   %eax,%eax
f010d586:	75 06                	jne    f010d58e <get_semaphore_object_ID+0x86>
		{
			return i;
f010d588:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d58b:	eb 0f                	jmp    f010d59c <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010d58d:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010d58e:	ff 45 f4             	incl   -0xc(%ebp)
f010d591:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d595:	7e 80                	jle    f010d517 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010d597:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010d59c:	c9                   	leave  
f010d59d:	c3                   	ret    

f010d59e <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010d59e:	55                   	push   %ebp
f010d59f:	89 e5                	mov    %esp,%ebp
f010d5a1:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010d5a4:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010d5a8:	76 0a                	jbe    f010d5b4 <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010d5aa:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010d5af:	e9 ac 00 00 00       	jmp    f010d660 <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010d5b4:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5b7:	89 d0                	mov    %edx,%eax
f010d5b9:	c1 e0 02             	shl    $0x2,%eax
f010d5bc:	01 d0                	add    %edx,%eax
f010d5be:	01 c0                	add    %eax,%eax
f010d5c0:	01 d0                	add    %edx,%eax
f010d5c2:	01 c0                	add    %eax,%eax
f010d5c4:	01 d0                	add    %edx,%eax
f010d5c6:	c1 e0 02             	shl    $0x2,%eax
f010d5c9:	05 80 60 6e f0       	add    $0xf06e6080,%eax
f010d5ce:	83 ec 04             	sub    $0x4,%esp
f010d5d1:	6a 5c                	push   $0x5c
f010d5d3:	6a 00                	push   $0x0
f010d5d5:	50                   	push   %eax
f010d5d6:	e8 32 30 02 00       	call   f013060d <memset>
f010d5db:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010d5de:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5e1:	89 d0                	mov    %edx,%eax
f010d5e3:	c1 e0 02             	shl    $0x2,%eax
f010d5e6:	01 d0                	add    %edx,%eax
f010d5e8:	01 c0                	add    %eax,%eax
f010d5ea:	01 d0                	add    %edx,%eax
f010d5ec:	01 c0                	add    %eax,%eax
f010d5ee:	01 d0                	add    %edx,%eax
f010d5f0:	c1 e0 02             	shl    $0x2,%eax
f010d5f3:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d5f8:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010d5fb:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5fe:	89 d0                	mov    %edx,%eax
f010d600:	c1 e0 02             	shl    $0x2,%eax
f010d603:	01 d0                	add    %edx,%eax
f010d605:	01 c0                	add    %eax,%eax
f010d607:	01 d0                	add    %edx,%eax
f010d609:	01 c0                	add    %eax,%eax
f010d60b:	01 d0                	add    %edx,%eax
f010d60d:	c1 e0 02             	shl    $0x2,%eax
f010d610:	05 c4 60 6e f0       	add    $0xf06e60c4,%eax
f010d615:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d61b:	8b 55 08             	mov    0x8(%ebp),%edx
f010d61e:	89 d0                	mov    %edx,%eax
f010d620:	c1 e0 02             	shl    $0x2,%eax
f010d623:	01 d0                	add    %edx,%eax
f010d625:	01 c0                	add    %eax,%eax
f010d627:	01 d0                	add    %edx,%eax
f010d629:	01 c0                	add    %eax,%eax
f010d62b:	01 d0                	add    %edx,%eax
f010d62d:	c1 e0 02             	shl    $0x2,%eax
f010d630:	05 c8 60 6e f0       	add    $0xf06e60c8,%eax
f010d635:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d63b:	8b 55 08             	mov    0x8(%ebp),%edx
f010d63e:	89 d0                	mov    %edx,%eax
f010d640:	c1 e0 02             	shl    $0x2,%eax
f010d643:	01 d0                	add    %edx,%eax
f010d645:	01 c0                	add    %eax,%eax
f010d647:	01 d0                	add    %edx,%eax
f010d649:	01 c0                	add    %eax,%eax
f010d64b:	01 d0                	add    %edx,%eax
f010d64d:	c1 e0 02             	shl    $0x2,%eax
f010d650:	05 d0 60 6e f0       	add    $0xf06e60d0,%eax
f010d655:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010d65b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d660:	c9                   	leave  
f010d661:	c3                   	ret    

f010d662 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010d662:	55                   	push   %ebp
f010d663:	89 e5                	mov    %esp,%ebp
f010d665:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010d668:	83 ec 04             	sub    $0x4,%esp
f010d66b:	68 24 6e 13 f0       	push   $0xf0136e24
f010d670:	68 94 00 00 00       	push   $0x94
f010d675:	68 04 6e 13 f0       	push   $0xf0136e04
f010d67a:	e8 27 2b ff ff       	call   f01001a6 <_panic>

f010d67f <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d67f:	55                   	push   %ebp
f010d680:	89 e5                	mov    %esp,%ebp
f010d682:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010d685:	83 ec 04             	sub    $0x4,%esp
f010d688:	68 54 6e 13 f0       	push   $0xf0136e54
f010d68d:	68 a6 00 00 00       	push   $0xa6
f010d692:	68 04 6e 13 f0       	push   $0xf0136e04
f010d697:	e8 0a 2b ff ff       	call   f01001a6 <_panic>

f010d69c <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010d69c:	55                   	push   %ebp
f010d69d:	89 e5                	mov    %esp,%ebp
f010d69f:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010d6a2:	83 ec 04             	sub    $0x4,%esp
f010d6a5:	68 80 6e 13 f0       	push   $0xf0136e80
f010d6aa:	68 ba 00 00 00       	push   $0xba
f010d6af:	68 04 6e 13 f0       	push   $0xf0136e04
f010d6b4:	e8 ed 2a ff ff       	call   f01001a6 <_panic>

f010d6b9 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010d6b9:	55                   	push   %ebp
f010d6ba:	89 e5                	mov    %esp,%ebp
f010d6bc:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010d6bf:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d6c6:	83 ec 0c             	sub    $0xc,%esp
f010d6c9:	ff 75 ec             	pushl  -0x14(%ebp)
f010d6cc:	e8 b8 38 02 00       	call   f0130f89 <initialize_MemBlocksList>
f010d6d1:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010d6d4:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d6d9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d6dc:	74 17                	je     f010d6f5 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010d6de:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d6e3:	50                   	push   %eax
f010d6e4:	68 c0 6e 13 f0       	push   $0xf0136ec0
f010d6e9:	6a 1f                	push   $0x1f
f010d6eb:	68 14 6f 13 f0       	push   $0xf0136f14
f010d6f0:	e8 b1 2a ff ff       	call   f01001a6 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010d6f5:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010d6fa:	85 c0                	test   %eax,%eax
f010d6fc:	74 17                	je     f010d715 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010d6fe:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010d703:	50                   	push   %eax
f010d704:	68 38 6f 13 f0       	push   $0xf0136f38
f010d709:	6a 26                	push   $0x26
f010d70b:	68 14 6f 13 f0       	push   $0xf0136f14
f010d710:	e8 91 2a ff ff       	call   f01001a6 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010d715:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010d71a:	85 c0                	test   %eax,%eax
f010d71c:	74 17                	je     f010d735 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010d71e:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010d723:	50                   	push   %eax
f010d724:	68 88 6f 13 f0       	push   $0xf0136f88
f010d729:	6a 2c                	push   $0x2c
f010d72b:	68 14 6f 13 f0       	push   $0xf0136f14
f010d730:	e8 71 2a ff ff       	call   f01001a6 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010d735:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010d73c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010d743:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f010d748:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d74b:	eb 29                	jmp    f010d776 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010d74d:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010d750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d753:	8b 50 0c             	mov    0xc(%eax),%edx
f010d756:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d759:	8b 40 08             	mov    0x8(%eax),%eax
f010d75c:	83 ec 04             	sub    $0x4,%esp
f010d75f:	52                   	push   %edx
f010d760:	50                   	push   %eax
f010d761:	68 d8 6f 13 f0       	push   $0xf0136fd8
f010d766:	e8 c2 34 ff ff       	call   f0100c2d <cprintf>
f010d76b:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010d76e:	a1 fc 84 6e f0       	mov    0xf06e84fc,%eax
f010d773:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d776:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d77a:	74 07                	je     f010d783 <test_initialize_MemBlocksList+0xca>
f010d77c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d77f:	8b 00                	mov    (%eax),%eax
f010d781:	eb 05                	jmp    f010d788 <test_initialize_MemBlocksList+0xcf>
f010d783:	b8 00 00 00 00       	mov    $0x0,%eax
f010d788:	a3 fc 84 6e f0       	mov    %eax,0xf06e84fc
f010d78d:	a1 fc 84 6e f0       	mov    0xf06e84fc,%eax
f010d792:	85 c0                	test   %eax,%eax
f010d794:	75 b7                	jne    f010d74d <test_initialize_MemBlocksList+0x94>
f010d796:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d79a:	75 b1                	jne    f010d74d <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010d79c:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d7a1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d7a4:	74 14                	je     f010d7ba <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010d7a6:	83 ec 04             	sub    $0x4,%esp
f010d7a9:	68 f8 6f 13 f0       	push   $0xf0136ff8
f010d7ae:	6a 38                	push   $0x38
f010d7b0:	68 14 6f 13 f0       	push   $0xf0136f14
f010d7b5:	e8 ec 29 ff ff       	call   f01001a6 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010d7ba:	83 ec 0c             	sub    $0xc,%esp
f010d7bd:	68 50 70 13 f0       	push   $0xf0137050
f010d7c2:	e8 66 34 ff ff       	call   f0100c2d <cprintf>
f010d7c7:	83 c4 10             	add    $0x10,%esp
}
f010d7ca:	90                   	nop
f010d7cb:	c9                   	leave  
f010d7cc:	c3                   	ret    

f010d7cd <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010d7cd:	55                   	push   %ebp
f010d7ce:	89 e5                	mov    %esp,%ebp
f010d7d0:	57                   	push   %edi
f010d7d1:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010d7d7:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d7de:	83 ec 0c             	sub    $0xc,%esp
f010d7e1:	ff 75 f4             	pushl  -0xc(%ebp)
f010d7e4:	e8 a0 37 02 00       	call   f0130f89 <initialize_MemBlocksList>
f010d7e9:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010d7ec:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010d7f3:	00 00 00 
f010d7f6:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010d7fd:	00 00 00 
f010d800:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010d807:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010d80a:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010d811:	00 00 00 
f010d814:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010d81b:	00 00 00 
f010d81e:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010d825:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010d828:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010d82b:	b9 05 00 00 00       	mov    $0x5,%ecx
f010d830:	b8 00 00 00 00       	mov    $0x0,%eax
f010d835:	89 d7                	mov    %edx,%edi
f010d837:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010d839:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010d83c:	b9 05 00 00 00       	mov    $0x5,%ecx
f010d841:	b8 00 00 00 00       	mov    $0x0,%eax
f010d846:	89 d7                	mov    %edx,%edi
f010d848:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010d84a:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010d851:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010d858:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010d85f:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010d866:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d869:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010d86c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d86f:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010d872:	83 ec 0c             	sub    $0xc,%esp
f010d875:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010d878:	50                   	push   %eax
f010d879:	e8 18 38 02 00       	call   f0131096 <insert_sorted_allocList>
f010d87e:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010d881:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d888:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010d88d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d890:	74 14                	je     f010d8a6 <test_insert_sorted_allocList+0xd9>
f010d892:	83 ec 04             	sub    $0x4,%esp
f010d895:	68 9c 70 13 f0       	push   $0xf013709c
f010d89a:	6a 56                	push   $0x56
f010d89c:	68 14 6f 13 f0       	push   $0xf0136f14
f010d8a1:	e8 00 29 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d8a6:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d8ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d8ae:	74 14                	je     f010d8c4 <test_insert_sorted_allocList+0xf7>
f010d8b0:	83 ec 04             	sub    $0x4,%esp
f010d8b3:	68 e8 70 13 f0       	push   $0xf01370e8
f010d8b8:	6a 59                	push   $0x59
f010d8ba:	68 14 6f 13 f0       	push   $0xf0136f14
f010d8bf:	e8 e2 28 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d8c4:	83 ec 0c             	sub    $0xc,%esp
f010d8c7:	ff 75 f0             	pushl  -0x10(%ebp)
f010d8ca:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d8cd:	50                   	push   %eax
f010d8ce:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d8d1:	50                   	push   %eax
f010d8d2:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d8d5:	50                   	push   %eax
f010d8d6:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010d8db:	e8 7d 26 00 00       	call   f010ff5d <check_list_data>
f010d8e0:	83 c4 20             	add    $0x20,%esp
f010d8e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d8e6:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d8ea:	74 14                	je     f010d900 <test_insert_sorted_allocList+0x133>
f010d8ec:	83 ec 04             	sub    $0x4,%esp
f010d8ef:	68 38 71 13 f0       	push   $0xf0137138
f010d8f4:	6a 5d                	push   $0x5d
f010d8f6:	68 14 6f 13 f0       	push   $0xf0136f14
f010d8fb:	e8 a6 28 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d900:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d903:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d906:	74 14                	je     f010d91c <test_insert_sorted_allocList+0x14f>
f010d908:	83 ec 04             	sub    $0x4,%esp
f010d90b:	68 88 71 13 f0       	push   $0xf0137188
f010d910:	6a 5e                	push   $0x5e
f010d912:	68 14 6f 13 f0       	push   $0xf0136f14
f010d917:	e8 8a 28 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010d91c:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010d923:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010d92a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d92d:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010d930:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d933:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010d936:	83 ec 0c             	sub    $0xc,%esp
f010d939:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010d93c:	50                   	push   %eax
f010d93d:	e8 54 37 02 00       	call   f0131096 <insert_sorted_allocList>
f010d942:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010d945:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d94c:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010d951:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d954:	74 14                	je     f010d96a <test_insert_sorted_allocList+0x19d>
f010d956:	83 ec 04             	sub    $0x4,%esp
f010d959:	68 9c 70 13 f0       	push   $0xf013709c
f010d95e:	6a 6d                	push   $0x6d
f010d960:	68 14 6f 13 f0       	push   $0xf0136f14
f010d965:	e8 3c 28 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d96a:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d96f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d972:	74 14                	je     f010d988 <test_insert_sorted_allocList+0x1bb>
f010d974:	83 ec 04             	sub    $0x4,%esp
f010d977:	68 e8 70 13 f0       	push   $0xf01370e8
f010d97c:	6a 70                	push   $0x70
f010d97e:	68 14 6f 13 f0       	push   $0xf0136f14
f010d983:	e8 1e 28 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d988:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d98f:	83 ec 0c             	sub    $0xc,%esp
f010d992:	ff 75 f0             	pushl  -0x10(%ebp)
f010d995:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d998:	50                   	push   %eax
f010d999:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d99c:	50                   	push   %eax
f010d99d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d9a0:	50                   	push   %eax
f010d9a1:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010d9a6:	e8 b2 25 00 00       	call   f010ff5d <check_list_data>
f010d9ab:	83 c4 20             	add    $0x20,%esp
f010d9ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d9b1:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d9b5:	74 14                	je     f010d9cb <test_insert_sorted_allocList+0x1fe>
f010d9b7:	83 ec 04             	sub    $0x4,%esp
f010d9ba:	68 38 71 13 f0       	push   $0xf0137138
f010d9bf:	6a 75                	push   $0x75
f010d9c1:	68 14 6f 13 f0       	push   $0xf0136f14
f010d9c6:	e8 db 27 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d9cb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d9ce:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d9d1:	74 14                	je     f010d9e7 <test_insert_sorted_allocList+0x21a>
f010d9d3:	83 ec 04             	sub    $0x4,%esp
f010d9d6:	68 88 71 13 f0       	push   $0xf0137188
f010d9db:	6a 76                	push   $0x76
f010d9dd:	68 14 6f 13 f0       	push   $0xf0136f14
f010d9e2:	e8 bf 27 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010d9e7:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010d9ee:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010d9f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d9f8:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010d9fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d9fe:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010da01:	83 ec 0c             	sub    $0xc,%esp
f010da04:	8d 45 90             	lea    -0x70(%ebp),%eax
f010da07:	50                   	push   %eax
f010da08:	e8 89 36 02 00       	call   f0131096 <insert_sorted_allocList>
f010da0d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010da10:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010da17:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010da1c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010da1f:	74 17                	je     f010da38 <test_insert_sorted_allocList+0x26b>
f010da21:	83 ec 04             	sub    $0x4,%esp
f010da24:	68 9c 70 13 f0       	push   $0xf013709c
f010da29:	68 85 00 00 00       	push   $0x85
f010da2e:	68 14 6f 13 f0       	push   $0xf0136f14
f010da33:	e8 6e 27 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010da38:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010da3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010da40:	74 17                	je     f010da59 <test_insert_sorted_allocList+0x28c>
f010da42:	83 ec 04             	sub    $0x4,%esp
f010da45:	68 d4 71 13 f0       	push   $0xf01371d4
f010da4a:	68 88 00 00 00       	push   $0x88
f010da4f:	68 14 6f 13 f0       	push   $0xf0136f14
f010da54:	e8 4d 27 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010da59:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010da60:	83 ec 0c             	sub    $0xc,%esp
f010da63:	ff 75 f0             	pushl  -0x10(%ebp)
f010da66:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010da69:	50                   	push   %eax
f010da6a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010da6d:	50                   	push   %eax
f010da6e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010da71:	50                   	push   %eax
f010da72:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010da77:	e8 e1 24 00 00       	call   f010ff5d <check_list_data>
f010da7c:	83 c4 20             	add    $0x20,%esp
f010da7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010da82:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010da86:	74 17                	je     f010da9f <test_insert_sorted_allocList+0x2d2>
f010da88:	83 ec 04             	sub    $0x4,%esp
f010da8b:	68 38 71 13 f0       	push   $0xf0137138
f010da90:	68 8d 00 00 00       	push   $0x8d
f010da95:	68 14 6f 13 f0       	push   $0xf0136f14
f010da9a:	e8 07 27 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010da9f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010daa2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010daa5:	74 17                	je     f010dabe <test_insert_sorted_allocList+0x2f1>
f010daa7:	83 ec 04             	sub    $0x4,%esp
f010daaa:	68 88 71 13 f0       	push   $0xf0137188
f010daaf:	68 8e 00 00 00       	push   $0x8e
f010dab4:	68 14 6f 13 f0       	push   $0xf0136f14
f010dab9:	e8 e8 26 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010dabe:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010dac5:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010dacc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dacf:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010dad2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010dad5:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010dad8:	83 ec 0c             	sub    $0xc,%esp
f010dadb:	8d 45 80             	lea    -0x80(%ebp),%eax
f010dade:	50                   	push   %eax
f010dadf:	e8 b2 35 02 00       	call   f0131096 <insert_sorted_allocList>
f010dae4:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010dae7:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010daee:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010daf3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010daf6:	74 17                	je     f010db0f <test_insert_sorted_allocList+0x342>
f010daf8:	83 ec 04             	sub    $0x4,%esp
f010dafb:	68 9c 70 13 f0       	push   $0xf013709c
f010db00:	68 9c 00 00 00       	push   $0x9c
f010db05:	68 14 6f 13 f0       	push   $0xf0136f14
f010db0a:	e8 97 26 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010db0f:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010db14:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010db17:	74 17                	je     f010db30 <test_insert_sorted_allocList+0x363>
f010db19:	83 ec 04             	sub    $0x4,%esp
f010db1c:	68 e8 70 13 f0       	push   $0xf01370e8
f010db21:	68 9f 00 00 00       	push   $0x9f
f010db26:	68 14 6f 13 f0       	push   $0xf0136f14
f010db2b:	e8 76 26 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010db30:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010db37:	83 ec 0c             	sub    $0xc,%esp
f010db3a:	ff 75 f0             	pushl  -0x10(%ebp)
f010db3d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010db40:	50                   	push   %eax
f010db41:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010db44:	50                   	push   %eax
f010db45:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010db48:	50                   	push   %eax
f010db49:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010db4e:	e8 0a 24 00 00       	call   f010ff5d <check_list_data>
f010db53:	83 c4 20             	add    $0x20,%esp
f010db56:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010db59:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010db5d:	74 17                	je     f010db76 <test_insert_sorted_allocList+0x3a9>
f010db5f:	83 ec 04             	sub    $0x4,%esp
f010db62:	68 38 71 13 f0       	push   $0xf0137138
f010db67:	68 a4 00 00 00       	push   $0xa4
f010db6c:	68 14 6f 13 f0       	push   $0xf0136f14
f010db71:	e8 30 26 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010db76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010db79:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010db7c:	74 17                	je     f010db95 <test_insert_sorted_allocList+0x3c8>
f010db7e:	83 ec 04             	sub    $0x4,%esp
f010db81:	68 88 71 13 f0       	push   $0xf0137188
f010db86:	68 a5 00 00 00       	push   $0xa5
f010db8b:	68 14 6f 13 f0       	push   $0xf0136f14
f010db90:	e8 11 26 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010db95:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010db9c:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010dba3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dba6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010dbac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dbaf:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010dbb5:	83 ec 0c             	sub    $0xc,%esp
f010dbb8:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010dbbe:	50                   	push   %eax
f010dbbf:	e8 d2 34 02 00       	call   f0131096 <insert_sorted_allocList>
f010dbc4:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010dbc7:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010dbce:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010dbd3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dbd6:	74 17                	je     f010dbef <test_insert_sorted_allocList+0x422>
f010dbd8:	83 ec 04             	sub    $0x4,%esp
f010dbdb:	68 9c 70 13 f0       	push   $0xf013709c
f010dbe0:	68 b3 00 00 00       	push   $0xb3
f010dbe5:	68 14 6f 13 f0       	push   $0xf0136f14
f010dbea:	e8 b7 25 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010dbef:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010dbf4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dbf7:	74 17                	je     f010dc10 <test_insert_sorted_allocList+0x443>
f010dbf9:	83 ec 04             	sub    $0x4,%esp
f010dbfc:	68 e8 70 13 f0       	push   $0xf01370e8
f010dc01:	68 b6 00 00 00       	push   $0xb6
f010dc06:	68 14 6f 13 f0       	push   $0xf0136f14
f010dc0b:	e8 96 25 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010dc10:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010dc17:	83 ec 0c             	sub    $0xc,%esp
f010dc1a:	ff 75 f0             	pushl  -0x10(%ebp)
f010dc1d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010dc20:	50                   	push   %eax
f010dc21:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dc24:	50                   	push   %eax
f010dc25:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dc28:	50                   	push   %eax
f010dc29:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010dc2e:	e8 2a 23 00 00       	call   f010ff5d <check_list_data>
f010dc33:	83 c4 20             	add    $0x20,%esp
f010dc36:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010dc39:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010dc3d:	74 17                	je     f010dc56 <test_insert_sorted_allocList+0x489>
f010dc3f:	83 ec 04             	sub    $0x4,%esp
f010dc42:	68 38 71 13 f0       	push   $0xf0137138
f010dc47:	68 bb 00 00 00       	push   $0xbb
f010dc4c:	68 14 6f 13 f0       	push   $0xf0136f14
f010dc51:	e8 50 25 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010dc56:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010dc59:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dc5c:	74 17                	je     f010dc75 <test_insert_sorted_allocList+0x4a8>
f010dc5e:	83 ec 04             	sub    $0x4,%esp
f010dc61:	68 88 71 13 f0       	push   $0xf0137188
f010dc66:	68 bc 00 00 00       	push   $0xbc
f010dc6b:	68 14 6f 13 f0       	push   $0xf0136f14
f010dc70:	e8 31 25 ff ff       	call   f01001a6 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010dc75:	83 ec 0c             	sub    $0xc,%esp
f010dc78:	68 24 72 13 f0       	push   $0xf0137224
f010dc7d:	e8 ab 2f ff ff       	call   f0100c2d <cprintf>
f010dc82:	83 c4 10             	add    $0x10,%esp
}
f010dc85:	90                   	nop
f010dc86:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010dc89:	c9                   	leave  
f010dc8a:	c3                   	ret    

f010dc8b <test_find_block>:

void test_find_block()
{
f010dc8b:	55                   	push   %ebp
f010dc8c:	89 e5                	mov    %esp,%ebp
f010dc8e:	57                   	push   %edi
f010dc8f:	56                   	push   %esi
f010dc90:	53                   	push   %ebx
f010dc91:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010dc97:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dc9e:	83 ec 0c             	sub    $0xc,%esp
f010dca1:	ff 75 e0             	pushl  -0x20(%ebp)
f010dca4:	e8 e0 32 02 00       	call   f0130f89 <initialize_MemBlocksList>
f010dca9:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010dcac:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010dcb3:	00 00 00 
f010dcb6:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010dcbd:	00 00 00 
f010dcc0:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010dcc7:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010dcca:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dccd:	bb 9c 73 13 f0       	mov    $0xf013739c,%ebx
f010dcd2:	ba 06 00 00 00       	mov    $0x6,%edx
f010dcd7:	89 c7                	mov    %eax,%edi
f010dcd9:	89 de                	mov    %ebx,%esi
f010dcdb:	89 d1                	mov    %edx,%ecx
f010dcdd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010dcdf:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010dce2:	bb b4 73 13 f0       	mov    $0xf01373b4,%ebx
f010dce7:	ba 06 00 00 00       	mov    $0x6,%edx
f010dcec:	89 c7                	mov    %eax,%edi
f010dcee:	89 de                	mov    %ebx,%esi
f010dcf0:	89 d1                	mov    %edx,%ecx
f010dcf2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010dcf4:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010dcfb:	00 00 00 
f010dcfe:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010dd05:	00 00 00 
f010dd08:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010dd0f:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010dd12:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010dd19:	e9 5f 01 00 00       	jmp    f010de7d <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010dd1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dd21:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010dd25:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dd28:	c1 e2 04             	shl    $0x4,%edx
f010dd2b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010dd2e:	01 da                	add    %ebx,%edx
f010dd30:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010dd36:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010dd38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dd3b:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010dd3f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dd42:	c1 e2 04             	shl    $0x4,%edx
f010dd45:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010dd48:	01 f2                	add    %esi,%edx
f010dd4a:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010dd50:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010dd52:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010dd56:	0f 85 92 00 00 00    	jne    f010ddee <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010dd5c:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f010dd61:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dd64:	c1 e2 04             	shl    $0x4,%edx
f010dd67:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010dd6a:	01 fa                	add    %edi,%edx
f010dd6c:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010dd72:	89 02                	mov    %eax,(%edx)
f010dd74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dd77:	c1 e0 04             	shl    $0x4,%eax
f010dd7a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010dd7d:	01 d8                	add    %ebx,%eax
f010dd7f:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010dd84:	8b 00                	mov    (%eax),%eax
f010dd86:	85 c0                	test   %eax,%eax
f010dd88:	74 18                	je     f010dda2 <test_find_block+0x117>
f010dd8a:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f010dd8f:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010dd95:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010dd98:	c1 e1 04             	shl    $0x4,%ecx
f010dd9b:	01 ca                	add    %ecx,%edx
f010dd9d:	89 50 04             	mov    %edx,0x4(%eax)
f010dda0:	eb 13                	jmp    f010ddb5 <test_find_block+0x12a>
f010dda2:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010dda8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ddab:	c1 e2 04             	shl    $0x4,%edx
f010ddae:	01 d0                	add    %edx,%eax
f010ddb0:	a3 f4 8f 65 f0       	mov    %eax,0xf0658ff4
f010ddb5:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ddbb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ddbe:	c1 e2 04             	shl    $0x4,%edx
f010ddc1:	01 d0                	add    %edx,%eax
f010ddc3:	a3 f0 8f 65 f0       	mov    %eax,0xf0658ff0
f010ddc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ddcb:	c1 e0 04             	shl    $0x4,%eax
f010ddce:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ddd1:	01 f0                	add    %esi,%eax
f010ddd3:	2d 98 00 00 00       	sub    $0x98,%eax
f010ddd8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ddde:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010dde3:	40                   	inc    %eax
f010dde4:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
f010dde9:	e9 8c 00 00 00       	jmp    f010de7a <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010ddee:	a1 f4 8f 65 f0       	mov    0xf0658ff4,%eax
f010ddf3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ddf6:	c1 e2 04             	shl    $0x4,%edx
f010ddf9:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ddfc:	01 fa                	add    %edi,%edx
f010ddfe:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010de04:	89 02                	mov    %eax,(%edx)
f010de06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010de09:	c1 e0 04             	shl    $0x4,%eax
f010de0c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010de0f:	01 d8                	add    %ebx,%eax
f010de11:	2d 98 00 00 00       	sub    $0x98,%eax
f010de16:	8b 00                	mov    (%eax),%eax
f010de18:	85 c0                	test   %eax,%eax
f010de1a:	74 17                	je     f010de33 <test_find_block+0x1a8>
f010de1c:	a1 f4 8f 65 f0       	mov    0xf0658ff4,%eax
f010de21:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010de27:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010de2a:	c1 e1 04             	shl    $0x4,%ecx
f010de2d:	01 ca                	add    %ecx,%edx
f010de2f:	89 10                	mov    %edx,(%eax)
f010de31:	eb 13                	jmp    f010de46 <test_find_block+0x1bb>
f010de33:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010de39:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de3c:	c1 e2 04             	shl    $0x4,%edx
f010de3f:	01 d0                	add    %edx,%eax
f010de41:	a3 f0 8f 65 f0       	mov    %eax,0xf0658ff0
f010de46:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010de4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de4f:	c1 e2 04             	shl    $0x4,%edx
f010de52:	01 d0                	add    %edx,%eax
f010de54:	a3 f4 8f 65 f0       	mov    %eax,0xf0658ff4
f010de59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010de5c:	c1 e0 04             	shl    $0x4,%eax
f010de5f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010de62:	01 f0                	add    %esi,%eax
f010de64:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010de69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010de6f:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010de74:	40                   	inc    %eax
f010de75:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010de7a:	ff 45 e4             	incl   -0x1c(%ebp)
f010de7d:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010de81:	0f 8e 97 fe ff ff    	jle    f010dd1e <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010de87:	83 ec 08             	sub    $0x8,%esp
f010de8a:	68 00 10 00 00       	push   $0x1000
f010de8f:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010de94:	e8 a5 31 02 00       	call   f013103e <find_block>
f010de99:	83 c4 10             	add    $0x10,%esp
f010de9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010de9f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dea3:	74 17                	je     f010debc <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010dea5:	83 ec 04             	sub    $0x4,%esp
f010dea8:	68 64 72 13 f0       	push   $0xf0137264
f010dead:	68 de 00 00 00       	push   $0xde
f010deb2:	68 14 6f 13 f0       	push   $0xf0136f14
f010deb7:	e8 ea 22 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010debc:	83 ec 08             	sub    $0x8,%esp
f010debf:	6a 00                	push   $0x0
f010dec1:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010dec6:	e8 73 31 02 00       	call   f013103e <find_block>
f010decb:	83 c4 10             	add    $0x10,%esp
f010dece:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010ded1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ded5:	74 17                	je     f010deee <test_find_block+0x263>
f010ded7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010deda:	8b 40 0c             	mov    0xc(%eax),%eax
f010dedd:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010dee2:	75 0a                	jne    f010deee <test_find_block+0x263>
f010dee4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dee7:	8b 40 08             	mov    0x8(%eax),%eax
f010deea:	85 c0                	test   %eax,%eax
f010deec:	74 17                	je     f010df05 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010deee:	83 ec 04             	sub    $0x4,%esp
f010def1:	68 c8 72 13 f0       	push   $0xf01372c8
f010def6:	68 e3 00 00 00       	push   $0xe3
f010defb:	68 14 6f 13 f0       	push   $0xf0136f14
f010df00:	e8 a1 22 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010df05:	83 ec 08             	sub    $0x8,%esp
f010df08:	68 00 70 00 00       	push   $0x7000
f010df0d:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010df12:	e8 27 31 02 00       	call   f013103e <find_block>
f010df17:	83 c4 10             	add    $0x10,%esp
f010df1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010df1d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010df21:	74 1a                	je     f010df3d <test_find_block+0x2b2>
f010df23:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df26:	8b 40 0c             	mov    0xc(%eax),%eax
f010df29:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010df2e:	75 0d                	jne    f010df3d <test_find_block+0x2b2>
f010df30:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df33:	8b 40 08             	mov    0x8(%eax),%eax
f010df36:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010df3b:	74 17                	je     f010df54 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010df3d:	83 ec 04             	sub    $0x4,%esp
f010df40:	68 c8 72 13 f0       	push   $0xf01372c8
f010df45:	68 e8 00 00 00       	push   $0xe8
f010df4a:	68 14 6f 13 f0       	push   $0xf0136f14
f010df4f:	e8 52 22 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010df54:	83 ec 08             	sub    $0x8,%esp
f010df57:	68 00 a4 01 00       	push   $0x1a400
f010df5c:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010df61:	e8 d8 30 02 00       	call   f013103e <find_block>
f010df66:	83 c4 10             	add    $0x10,%esp
f010df69:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010df6c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010df70:	74 1a                	je     f010df8c <test_find_block+0x301>
f010df72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df75:	8b 40 0c             	mov    0xc(%eax),%eax
f010df78:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010df7d:	75 0d                	jne    f010df8c <test_find_block+0x301>
f010df7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df82:	8b 40 08             	mov    0x8(%eax),%eax
f010df85:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010df8a:	74 17                	je     f010dfa3 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010df8c:	83 ec 04             	sub    $0x4,%esp
f010df8f:	68 c8 72 13 f0       	push   $0xf01372c8
f010df94:	68 ed 00 00 00       	push   $0xed
f010df99:	68 14 6f 13 f0       	push   $0xf0136f14
f010df9e:	e8 03 22 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010dfa3:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010dfa8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010dfab:	75 09                	jne    f010dfb6 <test_find_block+0x32b>
f010dfad:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010dfb2:	85 c0                	test   %eax,%eax
f010dfb4:	74 17                	je     f010dfcd <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010dfb6:	83 ec 04             	sub    $0x4,%esp
f010dfb9:	68 fc 72 13 f0       	push   $0xf01372fc
f010dfbe:	68 f2 00 00 00       	push   $0xf2
f010dfc3:	68 14 6f 13 f0       	push   $0xf0136f14
f010dfc8:	e8 d9 21 ff ff       	call   f01001a6 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010dfcd:	83 ec 0c             	sub    $0xc,%esp
f010dfd0:	68 60 73 13 f0       	push   $0xf0137360
f010dfd5:	e8 53 2c ff ff       	call   f0100c2d <cprintf>
f010dfda:	83 c4 10             	add    $0x10,%esp
}
f010dfdd:	90                   	nop
f010dfde:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010dfe1:	5b                   	pop    %ebx
f010dfe2:	5e                   	pop    %esi
f010dfe3:	5f                   	pop    %edi
f010dfe4:	5d                   	pop    %ebp
f010dfe5:	c3                   	ret    

f010dfe6 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010dfe6:	55                   	push   %ebp
f010dfe7:	89 e5                	mov    %esp,%ebp
f010dfe9:	57                   	push   %edi
f010dfea:	56                   	push   %esi
f010dfeb:	53                   	push   %ebx
f010dfec:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010dff2:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dff9:	83 ec 0c             	sub    $0xc,%esp
f010dffc:	ff 75 e0             	pushl  -0x20(%ebp)
f010dfff:	e8 85 2f 02 00       	call   f0130f89 <initialize_MemBlocksList>
f010e004:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e007:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010e00e:	00 00 00 
f010e011:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010e018:	00 00 00 
f010e01b:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010e022:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010e025:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e028:	bb 40 76 13 f0       	mov    $0xf0137640,%ebx
f010e02d:	ba 08 00 00 00       	mov    $0x8,%edx
f010e032:	89 c7                	mov    %eax,%edi
f010e034:	89 de                	mov    %ebx,%esi
f010e036:	89 d1                	mov    %edx,%ecx
f010e038:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010e03a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e03d:	bb 60 76 13 f0       	mov    $0xf0137660,%ebx
f010e042:	ba 08 00 00 00       	mov    $0x8,%edx
f010e047:	89 c7                	mov    %eax,%edi
f010e049:	89 de                	mov    %ebx,%esi
f010e04b:	89 d1                	mov    %edx,%ecx
f010e04d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e04f:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010e056:	00 00 00 
f010e059:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010e060:	00 00 00 
f010e063:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010e06a:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e06d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e074:	e9 5f 01 00 00       	jmp    f010e1d8 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e079:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e07c:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010e080:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e083:	c1 e2 04             	shl    $0x4,%edx
f010e086:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e089:	01 da                	add    %ebx,%edx
f010e08b:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010e091:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e093:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e096:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e09a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e09d:	c1 e2 04             	shl    $0x4,%edx
f010e0a0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e0a3:	01 f2                	add    %esi,%edx
f010e0a5:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010e0ab:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e0ad:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e0b1:	0f 85 92 00 00 00    	jne    f010e149 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e0b7:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010e0bc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0bf:	c1 e2 04             	shl    $0x4,%edx
f010e0c2:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e0c5:	01 fa                	add    %edi,%edx
f010e0c7:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010e0cd:	89 02                	mov    %eax,(%edx)
f010e0cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e0d2:	c1 e0 04             	shl    $0x4,%eax
f010e0d5:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e0d8:	01 d8                	add    %ebx,%eax
f010e0da:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e0df:	8b 00                	mov    (%eax),%eax
f010e0e1:	85 c0                	test   %eax,%eax
f010e0e3:	74 18                	je     f010e0fd <test_alloc_block_FF+0x117>
f010e0e5:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010e0ea:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e0f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e0f3:	c1 e1 04             	shl    $0x4,%ecx
f010e0f6:	01 ca                	add    %ecx,%edx
f010e0f8:	89 50 04             	mov    %edx,0x4(%eax)
f010e0fb:	eb 13                	jmp    f010e110 <test_alloc_block_FF+0x12a>
f010e0fd:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e103:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e106:	c1 e2 04             	shl    $0x4,%edx
f010e109:	01 d0                	add    %edx,%eax
f010e10b:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010e110:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e116:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e119:	c1 e2 04             	shl    $0x4,%edx
f010e11c:	01 d0                	add    %edx,%eax
f010e11e:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010e123:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e126:	c1 e0 04             	shl    $0x4,%eax
f010e129:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e12c:	01 f0                	add    %esi,%eax
f010e12e:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e133:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e139:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e13e:	40                   	inc    %eax
f010e13f:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
f010e144:	e9 8c 00 00 00       	jmp    f010e1d5 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e149:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010e14e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e151:	c1 e2 04             	shl    $0x4,%edx
f010e154:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e157:	01 fa                	add    %edi,%edx
f010e159:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010e15f:	89 02                	mov    %eax,(%edx)
f010e161:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e164:	c1 e0 04             	shl    $0x4,%eax
f010e167:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e16a:	01 d8                	add    %ebx,%eax
f010e16c:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e171:	8b 00                	mov    (%eax),%eax
f010e173:	85 c0                	test   %eax,%eax
f010e175:	74 17                	je     f010e18e <test_alloc_block_FF+0x1a8>
f010e177:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010e17c:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e182:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e185:	c1 e1 04             	shl    $0x4,%ecx
f010e188:	01 ca                	add    %ecx,%edx
f010e18a:	89 10                	mov    %edx,(%eax)
f010e18c:	eb 13                	jmp    f010e1a1 <test_alloc_block_FF+0x1bb>
f010e18e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e194:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e197:	c1 e2 04             	shl    $0x4,%edx
f010e19a:	01 d0                	add    %edx,%eax
f010e19c:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010e1a1:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e1a7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1aa:	c1 e2 04             	shl    $0x4,%edx
f010e1ad:	01 d0                	add    %edx,%eax
f010e1af:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010e1b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e1b7:	c1 e0 04             	shl    $0x4,%eax
f010e1ba:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e1bd:	01 f0                	add    %esi,%eax
f010e1bf:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e1c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e1ca:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e1cf:	40                   	inc    %eax
f010e1d0:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e1d5:	ff 45 e4             	incl   -0x1c(%ebp)
f010e1d8:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010e1dc:	0f 8e 97 fe ff ff    	jle    f010e079 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010e1e2:	83 ec 0c             	sub    $0xc,%esp
f010e1e5:	68 00 00 30 00       	push   $0x300000
f010e1ea:	e8 34 31 02 00       	call   f0131323 <alloc_block_FF>
f010e1ef:	83 c4 10             	add    $0x10,%esp
f010e1f2:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010e1f5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e1f9:	74 17                	je     f010e212 <test_alloc_block_FF+0x22c>
f010e1fb:	83 ec 04             	sub    $0x4,%esp
f010e1fe:	68 cc 73 13 f0       	push   $0xf01373cc
f010e203:	68 15 01 00 00       	push   $0x115
f010e208:	68 14 6f 13 f0       	push   $0xf0136f14
f010e20d:	e8 94 1f ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e212:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e217:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e21a:	75 13                	jne    f010e22f <test_alloc_block_FF+0x249>
f010e21c:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e221:	83 f8 08             	cmp    $0x8,%eax
f010e224:	75 09                	jne    f010e22f <test_alloc_block_FF+0x249>
f010e226:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e22b:	85 c0                	test   %eax,%eax
f010e22d:	74 17                	je     f010e246 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e22f:	83 ec 04             	sub    $0x4,%esp
f010e232:	68 40 74 13 f0       	push   $0xf0137440
f010e237:	68 19 01 00 00       	push   $0x119
f010e23c:	68 14 6f 13 f0       	push   $0xf0136f14
f010e241:	e8 60 1f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010e246:	83 ec 0c             	sub    $0xc,%esp
f010e249:	68 00 24 00 00       	push   $0x2400
f010e24e:	e8 d0 30 02 00       	call   f0131323 <alloc_block_FF>
f010e253:	83 c4 10             	add    $0x10,%esp
f010e256:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010e259:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e25d:	74 1a                	je     f010e279 <test_alloc_block_FF+0x293>
f010e25f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e262:	8b 40 0c             	mov    0xc(%eax),%eax
f010e265:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e26a:	75 0d                	jne    f010e279 <test_alloc_block_FF+0x293>
f010e26c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e26f:	8b 40 08             	mov    0x8(%eax),%eax
f010e272:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e277:	74 17                	je     f010e290 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e279:	83 ec 04             	sub    $0x4,%esp
f010e27c:	68 b8 74 13 f0       	push   $0xf01374b8
f010e281:	68 21 01 00 00       	push   $0x121
f010e286:	68 14 6f 13 f0       	push   $0xf0136f14
f010e28b:	e8 16 1f ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e290:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e295:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e298:	75 13                	jne    f010e2ad <test_alloc_block_FF+0x2c7>
f010e29a:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e29f:	83 f8 07             	cmp    $0x7,%eax
f010e2a2:	75 09                	jne    f010e2ad <test_alloc_block_FF+0x2c7>
f010e2a4:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e2a9:	85 c0                	test   %eax,%eax
f010e2ab:	74 17                	je     f010e2c4 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e2ad:	83 ec 04             	sub    $0x4,%esp
f010e2b0:	68 fc 74 13 f0       	push   $0xf01374fc
f010e2b5:	68 25 01 00 00       	push   $0x125
f010e2ba:	68 14 6f 13 f0       	push   $0xf0136f14
f010e2bf:	e8 e2 1e ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010e2c4:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e2cb:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010e2ce:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010e2d5:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010e2dc:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e2e3:	83 ec 0c             	sub    $0xc,%esp
f010e2e6:	ff 75 d8             	pushl  -0x28(%ebp)
f010e2e9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e2ef:	50                   	push   %eax
f010e2f0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e2f3:	50                   	push   %eax
f010e2f4:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e2f7:	50                   	push   %eax
f010e2f8:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e2fd:	e8 5b 1c 00 00       	call   f010ff5d <check_list_data>
f010e302:	83 c4 20             	add    $0x20,%esp
f010e305:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e308:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e30c:	74 17                	je     f010e325 <test_alloc_block_FF+0x33f>
f010e30e:	83 ec 04             	sub    $0x4,%esp
f010e311:	68 60 75 13 f0       	push   $0xf0137560
f010e316:	68 2d 01 00 00       	push   $0x12d
f010e31b:	68 14 6f 13 f0       	push   $0xf0136f14
f010e320:	e8 81 1e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e325:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e32b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e32e:	74 17                	je     f010e347 <test_alloc_block_FF+0x361>
f010e330:	83 ec 04             	sub    $0x4,%esp
f010e333:	68 ac 75 13 f0       	push   $0xf01375ac
f010e338:	68 2e 01 00 00       	push   $0x12e
f010e33d:	68 14 6f 13 f0       	push   $0xf0136f14
f010e342:	e8 5f 1e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010e347:	83 ec 0c             	sub    $0xc,%esp
f010e34a:	68 00 00 10 00       	push   $0x100000
f010e34f:	e8 cf 2f 02 00       	call   f0131323 <alloc_block_FF>
f010e354:	83 c4 10             	add    $0x10,%esp
f010e357:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e35a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e35e:	74 1a                	je     f010e37a <test_alloc_block_FF+0x394>
f010e360:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e363:	8b 40 0c             	mov    0xc(%eax),%eax
f010e366:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e36b:	75 0d                	jne    f010e37a <test_alloc_block_FF+0x394>
f010e36d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e370:	8b 40 08             	mov    0x8(%eax),%eax
f010e373:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e378:	74 17                	je     f010e391 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e37a:	83 ec 04             	sub    $0x4,%esp
f010e37d:	68 b8 74 13 f0       	push   $0xf01374b8
f010e382:	68 36 01 00 00       	push   $0x136
f010e387:	68 14 6f 13 f0       	push   $0xf0136f14
f010e38c:	e8 15 1e ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e391:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e396:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e399:	4a                   	dec    %edx
f010e39a:	39 d0                	cmp    %edx,%eax
f010e39c:	75 13                	jne    f010e3b1 <test_alloc_block_FF+0x3cb>
f010e39e:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e3a3:	83 f8 07             	cmp    $0x7,%eax
f010e3a6:	75 09                	jne    f010e3b1 <test_alloc_block_FF+0x3cb>
f010e3a8:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e3ad:	85 c0                	test   %eax,%eax
f010e3af:	74 17                	je     f010e3c8 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e3b1:	83 ec 04             	sub    $0x4,%esp
f010e3b4:	68 fc 74 13 f0       	push   $0xf01374fc
f010e3b9:	68 3a 01 00 00       	push   $0x13a
f010e3be:	68 14 6f 13 f0       	push   $0xf0136f14
f010e3c3:	e8 de 1d ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e3c8:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e3cf:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010e3d2:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e3d9:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e3e0:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e3e7:	83 ec 0c             	sub    $0xc,%esp
f010e3ea:	ff 75 d8             	pushl  -0x28(%ebp)
f010e3ed:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e3f3:	50                   	push   %eax
f010e3f4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e3f7:	50                   	push   %eax
f010e3f8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e3fb:	50                   	push   %eax
f010e3fc:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e401:	e8 57 1b 00 00       	call   f010ff5d <check_list_data>
f010e406:	83 c4 20             	add    $0x20,%esp
f010e409:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e40c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e410:	74 17                	je     f010e429 <test_alloc_block_FF+0x443>
f010e412:	83 ec 04             	sub    $0x4,%esp
f010e415:	68 60 75 13 f0       	push   $0xf0137560
f010e41a:	68 42 01 00 00       	push   $0x142
f010e41f:	68 14 6f 13 f0       	push   $0xf0136f14
f010e424:	e8 7d 1d ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e429:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e42f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e432:	74 17                	je     f010e44b <test_alloc_block_FF+0x465>
f010e434:	83 ec 04             	sub    $0x4,%esp
f010e437:	68 ac 75 13 f0       	push   $0xf01375ac
f010e43c:	68 43 01 00 00       	push   $0x143
f010e441:	68 14 6f 13 f0       	push   $0xf0136f14
f010e446:	e8 5b 1d ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010e44b:	83 ec 0c             	sub    $0xc,%esp
f010e44e:	68 f8 75 13 f0       	push   $0xf01375f8
f010e453:	e8 d5 27 ff ff       	call   f0100c2d <cprintf>
f010e458:	83 c4 10             	add    $0x10,%esp
}
f010e45b:	90                   	nop
f010e45c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e45f:	5b                   	pop    %ebx
f010e460:	5e                   	pop    %esi
f010e461:	5f                   	pop    %edi
f010e462:	5d                   	pop    %ebp
f010e463:	c3                   	ret    

f010e464 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010e464:	55                   	push   %ebp
f010e465:	89 e5                	mov    %esp,%ebp
f010e467:	57                   	push   %edi
f010e468:	56                   	push   %esi
f010e469:	53                   	push   %ebx
f010e46a:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010e470:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e477:	83 ec 0c             	sub    $0xc,%esp
f010e47a:	ff 75 e0             	pushl  -0x20(%ebp)
f010e47d:	e8 07 2b 02 00       	call   f0130f89 <initialize_MemBlocksList>
f010e482:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e485:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010e48c:	00 00 00 
f010e48f:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010e496:	00 00 00 
f010e499:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010e4a0:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010e4a3:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e4a6:	bb 74 78 13 f0       	mov    $0xf0137874,%ebx
f010e4ab:	ba 07 00 00 00       	mov    $0x7,%edx
f010e4b0:	89 c7                	mov    %eax,%edi
f010e4b2:	89 de                	mov    %ebx,%esi
f010e4b4:	89 d1                	mov    %edx,%ecx
f010e4b6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010e4b8:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e4bb:	bb 90 78 13 f0       	mov    $0xf0137890,%ebx
f010e4c0:	ba 07 00 00 00       	mov    $0x7,%edx
f010e4c5:	89 c7                	mov    %eax,%edi
f010e4c7:	89 de                	mov    %ebx,%esi
f010e4c9:	89 d1                	mov    %edx,%ecx
f010e4cb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e4cd:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010e4d4:	00 00 00 
f010e4d7:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010e4de:	00 00 00 
f010e4e1:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010e4e8:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e4eb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e4f2:	e9 5f 01 00 00       	jmp    f010e656 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e4f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e4fa:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010e4fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e501:	c1 e2 04             	shl    $0x4,%edx
f010e504:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e507:	01 da                	add    %ebx,%edx
f010e509:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010e50f:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e511:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e514:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010e518:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e51b:	c1 e2 04             	shl    $0x4,%edx
f010e51e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e521:	01 f2                	add    %esi,%edx
f010e523:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010e529:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e52b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e52f:	0f 85 92 00 00 00    	jne    f010e5c7 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e535:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010e53a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e53d:	c1 e2 04             	shl    $0x4,%edx
f010e540:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e543:	01 fa                	add    %edi,%edx
f010e545:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010e54b:	89 02                	mov    %eax,(%edx)
f010e54d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e550:	c1 e0 04             	shl    $0x4,%eax
f010e553:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e556:	01 d8                	add    %ebx,%eax
f010e558:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e55d:	8b 00                	mov    (%eax),%eax
f010e55f:	85 c0                	test   %eax,%eax
f010e561:	74 18                	je     f010e57b <test_alloc_block_BF+0x117>
f010e563:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010e568:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e56e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e571:	c1 e1 04             	shl    $0x4,%ecx
f010e574:	01 ca                	add    %ecx,%edx
f010e576:	89 50 04             	mov    %edx,0x4(%eax)
f010e579:	eb 13                	jmp    f010e58e <test_alloc_block_BF+0x12a>
f010e57b:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e581:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e584:	c1 e2 04             	shl    $0x4,%edx
f010e587:	01 d0                	add    %edx,%eax
f010e589:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010e58e:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e594:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e597:	c1 e2 04             	shl    $0x4,%edx
f010e59a:	01 d0                	add    %edx,%eax
f010e59c:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010e5a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e5a4:	c1 e0 04             	shl    $0x4,%eax
f010e5a7:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e5aa:	01 f0                	add    %esi,%eax
f010e5ac:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e5b1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e5b7:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e5bc:	40                   	inc    %eax
f010e5bd:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
f010e5c2:	e9 8c 00 00 00       	jmp    f010e653 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e5c7:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010e5cc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5cf:	c1 e2 04             	shl    $0x4,%edx
f010e5d2:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e5d5:	01 fa                	add    %edi,%edx
f010e5d7:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010e5dd:	89 02                	mov    %eax,(%edx)
f010e5df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e5e2:	c1 e0 04             	shl    $0x4,%eax
f010e5e5:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e5e8:	01 d8                	add    %ebx,%eax
f010e5ea:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e5ef:	8b 00                	mov    (%eax),%eax
f010e5f1:	85 c0                	test   %eax,%eax
f010e5f3:	74 17                	je     f010e60c <test_alloc_block_BF+0x1a8>
f010e5f5:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010e5fa:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e600:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e603:	c1 e1 04             	shl    $0x4,%ecx
f010e606:	01 ca                	add    %ecx,%edx
f010e608:	89 10                	mov    %edx,(%eax)
f010e60a:	eb 13                	jmp    f010e61f <test_alloc_block_BF+0x1bb>
f010e60c:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e612:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e615:	c1 e2 04             	shl    $0x4,%edx
f010e618:	01 d0                	add    %edx,%eax
f010e61a:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010e61f:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e625:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e628:	c1 e2 04             	shl    $0x4,%edx
f010e62b:	01 d0                	add    %edx,%eax
f010e62d:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010e632:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e635:	c1 e0 04             	shl    $0x4,%eax
f010e638:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e63b:	01 f0                	add    %esi,%eax
f010e63d:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e642:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e648:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e64d:	40                   	inc    %eax
f010e64e:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e653:	ff 45 e4             	incl   -0x1c(%ebp)
f010e656:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010e65a:	0f 8e 97 fe ff ff    	jle    f010e4f7 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010e660:	83 ec 0c             	sub    $0xc,%esp
f010e663:	68 00 00 40 00       	push   $0x400000
f010e668:	e8 83 2e 02 00       	call   f01314f0 <alloc_block_BF>
f010e66d:	83 c4 10             	add    $0x10,%esp
f010e670:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010e673:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e677:	74 17                	je     f010e690 <test_alloc_block_BF+0x22c>
f010e679:	83 ec 04             	sub    $0x4,%esp
f010e67c:	68 80 76 13 f0       	push   $0xf0137680
f010e681:	68 66 01 00 00       	push   $0x166
f010e686:	68 14 6f 13 f0       	push   $0xf0136f14
f010e68b:	e8 16 1b ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e690:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e695:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e698:	75 13                	jne    f010e6ad <test_alloc_block_BF+0x249>
f010e69a:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e69f:	83 f8 07             	cmp    $0x7,%eax
f010e6a2:	75 09                	jne    f010e6ad <test_alloc_block_BF+0x249>
f010e6a4:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e6a9:	85 c0                	test   %eax,%eax
f010e6ab:	74 17                	je     f010e6c4 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e6ad:	83 ec 04             	sub    $0x4,%esp
f010e6b0:	68 40 74 13 f0       	push   $0xf0137440
f010e6b5:	68 6a 01 00 00       	push   $0x16a
f010e6ba:	68 14 6f 13 f0       	push   $0xf0136f14
f010e6bf:	e8 e2 1a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010e6c4:	83 ec 0c             	sub    $0xc,%esp
f010e6c7:	68 00 00 10 00       	push   $0x100000
f010e6cc:	e8 1f 2e 02 00       	call   f01314f0 <alloc_block_BF>
f010e6d1:	83 c4 10             	add    $0x10,%esp
f010e6d4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010e6d7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e6db:	74 1a                	je     f010e6f7 <test_alloc_block_BF+0x293>
f010e6dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e6e0:	8b 40 0c             	mov    0xc(%eax),%eax
f010e6e3:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e6e8:	75 0d                	jne    f010e6f7 <test_alloc_block_BF+0x293>
f010e6ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e6ed:	8b 40 08             	mov    0x8(%eax),%eax
f010e6f0:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010e6f5:	74 17                	je     f010e70e <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e6f7:	83 ec 04             	sub    $0x4,%esp
f010e6fa:	68 f4 76 13 f0       	push   $0xf01376f4
f010e6ff:	68 72 01 00 00       	push   $0x172
f010e704:	68 14 6f 13 f0       	push   $0xf0136f14
f010e709:	e8 98 1a ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e70e:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e713:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e716:	75 13                	jne    f010e72b <test_alloc_block_BF+0x2c7>
f010e718:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e71d:	83 f8 06             	cmp    $0x6,%eax
f010e720:	75 09                	jne    f010e72b <test_alloc_block_BF+0x2c7>
f010e722:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e727:	85 c0                	test   %eax,%eax
f010e729:	74 17                	je     f010e742 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e72b:	83 ec 04             	sub    $0x4,%esp
f010e72e:	68 38 77 13 f0       	push   $0xf0137738
f010e733:	68 76 01 00 00       	push   $0x176
f010e738:	68 14 6f 13 f0       	push   $0xf0136f14
f010e73d:	e8 64 1a ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010e742:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e749:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010e74c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010e753:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010e75a:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e761:	83 ec 0c             	sub    $0xc,%esp
f010e764:	ff 75 d8             	pushl  -0x28(%ebp)
f010e767:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e76d:	50                   	push   %eax
f010e76e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e771:	50                   	push   %eax
f010e772:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e775:	50                   	push   %eax
f010e776:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e77b:	e8 dd 17 00 00       	call   f010ff5d <check_list_data>
f010e780:	83 c4 20             	add    $0x20,%esp
f010e783:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e786:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e78a:	74 17                	je     f010e7a3 <test_alloc_block_BF+0x33f>
f010e78c:	83 ec 04             	sub    $0x4,%esp
f010e78f:	68 9c 77 13 f0       	push   $0xf013779c
f010e794:	68 7e 01 00 00       	push   $0x17e
f010e799:	68 14 6f 13 f0       	push   $0xf0136f14
f010e79e:	e8 03 1a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e7a3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e7a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e7ac:	74 17                	je     f010e7c5 <test_alloc_block_BF+0x361>
f010e7ae:	83 ec 04             	sub    $0x4,%esp
f010e7b1:	68 e8 77 13 f0       	push   $0xf01377e8
f010e7b6:	68 7f 01 00 00       	push   $0x17f
f010e7bb:	68 14 6f 13 f0       	push   $0xf0136f14
f010e7c0:	e8 e1 19 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010e7c5:	83 ec 0c             	sub    $0xc,%esp
f010e7c8:	68 00 00 10 00       	push   $0x100000
f010e7cd:	e8 1e 2d 02 00       	call   f01314f0 <alloc_block_BF>
f010e7d2:	83 c4 10             	add    $0x10,%esp
f010e7d5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e7d8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e7dc:	74 1a                	je     f010e7f8 <test_alloc_block_BF+0x394>
f010e7de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7e1:	8b 40 0c             	mov    0xc(%eax),%eax
f010e7e4:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e7e9:	75 0d                	jne    f010e7f8 <test_alloc_block_BF+0x394>
f010e7eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7ee:	8b 40 08             	mov    0x8(%eax),%eax
f010e7f1:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e7f6:	74 17                	je     f010e80f <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e7f8:	83 ec 04             	sub    $0x4,%esp
f010e7fb:	68 f4 76 13 f0       	push   $0xf01376f4
f010e800:	68 87 01 00 00       	push   $0x187
f010e805:	68 14 6f 13 f0       	push   $0xf0136f14
f010e80a:	e8 97 19 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e80f:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e814:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e817:	4a                   	dec    %edx
f010e818:	39 d0                	cmp    %edx,%eax
f010e81a:	75 13                	jne    f010e82f <test_alloc_block_BF+0x3cb>
f010e81c:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e821:	83 f8 06             	cmp    $0x6,%eax
f010e824:	75 09                	jne    f010e82f <test_alloc_block_BF+0x3cb>
f010e826:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e82b:	85 c0                	test   %eax,%eax
f010e82d:	74 17                	je     f010e846 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e82f:	83 ec 04             	sub    $0x4,%esp
f010e832:	68 38 77 13 f0       	push   $0xf0137738
f010e837:	68 8b 01 00 00       	push   $0x18b
f010e83c:	68 14 6f 13 f0       	push   $0xf0136f14
f010e841:	e8 60 19 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e846:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e84d:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010e850:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e857:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e85e:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e865:	83 ec 0c             	sub    $0xc,%esp
f010e868:	ff 75 d8             	pushl  -0x28(%ebp)
f010e86b:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e871:	50                   	push   %eax
f010e872:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e875:	50                   	push   %eax
f010e876:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e879:	50                   	push   %eax
f010e87a:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e87f:	e8 d9 16 00 00       	call   f010ff5d <check_list_data>
f010e884:	83 c4 20             	add    $0x20,%esp
f010e887:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e88a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e88e:	74 17                	je     f010e8a7 <test_alloc_block_BF+0x443>
f010e890:	83 ec 04             	sub    $0x4,%esp
f010e893:	68 9c 77 13 f0       	push   $0xf013779c
f010e898:	68 93 01 00 00       	push   $0x193
f010e89d:	68 14 6f 13 f0       	push   $0xf0136f14
f010e8a2:	e8 ff 18 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e8a7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e8ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e8b0:	74 17                	je     f010e8c9 <test_alloc_block_BF+0x465>
f010e8b2:	83 ec 04             	sub    $0x4,%esp
f010e8b5:	68 e8 77 13 f0       	push   $0xf01377e8
f010e8ba:	68 94 01 00 00       	push   $0x194
f010e8bf:	68 14 6f 13 f0       	push   $0xf0136f14
f010e8c4:	e8 dd 18 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010e8c9:	83 ec 0c             	sub    $0xc,%esp
f010e8cc:	68 00 0c 00 00       	push   $0xc00
f010e8d1:	e8 1a 2c 02 00       	call   f01314f0 <alloc_block_BF>
f010e8d6:	83 c4 10             	add    $0x10,%esp
f010e8d9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010e8dc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e8e0:	74 1a                	je     f010e8fc <test_alloc_block_BF+0x498>
f010e8e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e8e5:	8b 40 0c             	mov    0xc(%eax),%eax
f010e8e8:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e8ed:	75 0d                	jne    f010e8fc <test_alloc_block_BF+0x498>
f010e8ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e8f2:	8b 40 08             	mov    0x8(%eax),%eax
f010e8f5:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010e8fa:	74 17                	je     f010e913 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e8fc:	83 ec 04             	sub    $0x4,%esp
f010e8ff:	68 f4 76 13 f0       	push   $0xf01376f4
f010e904:	68 9c 01 00 00       	push   $0x19c
f010e909:	68 14 6f 13 f0       	push   $0xf0136f14
f010e90e:	e8 93 18 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e913:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e918:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e91b:	83 ea 02             	sub    $0x2,%edx
f010e91e:	39 d0                	cmp    %edx,%eax
f010e920:	75 13                	jne    f010e935 <test_alloc_block_BF+0x4d1>
f010e922:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e927:	83 f8 06             	cmp    $0x6,%eax
f010e92a:	75 09                	jne    f010e935 <test_alloc_block_BF+0x4d1>
f010e92c:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e931:	85 c0                	test   %eax,%eax
f010e933:	74 17                	je     f010e94c <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e935:	83 ec 04             	sub    $0x4,%esp
f010e938:	68 38 77 13 f0       	push   $0xf0137738
f010e93d:	68 a0 01 00 00       	push   $0x1a0
f010e942:	68 14 6f 13 f0       	push   $0xf0136f14
f010e947:	e8 5a 18 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e94c:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e953:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010e956:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010e95d:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010e964:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e96b:	83 ec 0c             	sub    $0xc,%esp
f010e96e:	ff 75 d8             	pushl  -0x28(%ebp)
f010e971:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e977:	50                   	push   %eax
f010e978:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e97b:	50                   	push   %eax
f010e97c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e97f:	50                   	push   %eax
f010e980:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e985:	e8 d3 15 00 00       	call   f010ff5d <check_list_data>
f010e98a:	83 c4 20             	add    $0x20,%esp
f010e98d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e990:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e994:	74 17                	je     f010e9ad <test_alloc_block_BF+0x549>
f010e996:	83 ec 04             	sub    $0x4,%esp
f010e999:	68 9c 77 13 f0       	push   $0xf013779c
f010e99e:	68 a8 01 00 00       	push   $0x1a8
f010e9a3:	68 14 6f 13 f0       	push   $0xf0136f14
f010e9a8:	e8 f9 17 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e9ad:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e9b3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e9b6:	74 17                	je     f010e9cf <test_alloc_block_BF+0x56b>
f010e9b8:	83 ec 04             	sub    $0x4,%esp
f010e9bb:	68 e8 77 13 f0       	push   $0xf01377e8
f010e9c0:	68 a9 01 00 00       	push   $0x1a9
f010e9c5:	68 14 6f 13 f0       	push   $0xf0136f14
f010e9ca:	e8 d7 17 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010e9cf:	83 ec 0c             	sub    $0xc,%esp
f010e9d2:	68 00 08 00 00       	push   $0x800
f010e9d7:	e8 14 2b 02 00       	call   f01314f0 <alloc_block_BF>
f010e9dc:	83 c4 10             	add    $0x10,%esp
f010e9df:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010e9e2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e9e6:	74 17                	je     f010e9ff <test_alloc_block_BF+0x59b>
f010e9e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9eb:	8b 40 0c             	mov    0xc(%eax),%eax
f010e9ee:	3d 00 08 00 00       	cmp    $0x800,%eax
f010e9f3:	75 0a                	jne    f010e9ff <test_alloc_block_BF+0x59b>
f010e9f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9f8:	8b 40 08             	mov    0x8(%eax),%eax
f010e9fb:	85 c0                	test   %eax,%eax
f010e9fd:	74 17                	je     f010ea16 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e9ff:	83 ec 04             	sub    $0x4,%esp
f010ea02:	68 f4 76 13 f0       	push   $0xf01376f4
f010ea07:	68 b1 01 00 00       	push   $0x1b1
f010ea0c:	68 14 6f 13 f0       	push   $0xf0136f14
f010ea11:	e8 90 17 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ea16:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010ea1b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ea1e:	83 ea 02             	sub    $0x2,%edx
f010ea21:	39 d0                	cmp    %edx,%eax
f010ea23:	75 13                	jne    f010ea38 <test_alloc_block_BF+0x5d4>
f010ea25:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010ea2a:	83 f8 05             	cmp    $0x5,%eax
f010ea2d:	75 09                	jne    f010ea38 <test_alloc_block_BF+0x5d4>
f010ea2f:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010ea34:	85 c0                	test   %eax,%eax
f010ea36:	74 17                	je     f010ea4f <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ea38:	83 ec 04             	sub    $0x4,%esp
f010ea3b:	68 38 77 13 f0       	push   $0xf0137738
f010ea40:	68 b5 01 00 00       	push   $0x1b5
f010ea45:	68 14 6f 13 f0       	push   $0xf0136f14
f010ea4a:	e8 57 17 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ea4f:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ea56:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010ea59:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010ea60:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010ea67:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ea6e:	83 ec 0c             	sub    $0xc,%esp
f010ea71:	ff 75 d8             	pushl  -0x28(%ebp)
f010ea74:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ea7a:	50                   	push   %eax
f010ea7b:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ea7e:	50                   	push   %eax
f010ea7f:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ea82:	50                   	push   %eax
f010ea83:	68 c0 84 6e f0       	push   $0xf06e84c0
f010ea88:	e8 d0 14 00 00       	call   f010ff5d <check_list_data>
f010ea8d:	83 c4 20             	add    $0x20,%esp
f010ea90:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ea93:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ea97:	74 17                	je     f010eab0 <test_alloc_block_BF+0x64c>
f010ea99:	83 ec 04             	sub    $0x4,%esp
f010ea9c:	68 9c 77 13 f0       	push   $0xf013779c
f010eaa1:	68 bd 01 00 00       	push   $0x1bd
f010eaa6:	68 14 6f 13 f0       	push   $0xf0136f14
f010eaab:	e8 f6 16 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010eab0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010eab6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eab9:	74 17                	je     f010ead2 <test_alloc_block_BF+0x66e>
f010eabb:	83 ec 04             	sub    $0x4,%esp
f010eabe:	68 e8 77 13 f0       	push   $0xf01377e8
f010eac3:	68 be 01 00 00       	push   $0x1be
f010eac8:	68 14 6f 13 f0       	push   $0xf0136f14
f010eacd:	e8 d4 16 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010ead2:	83 ec 0c             	sub    $0xc,%esp
f010ead5:	68 34 78 13 f0       	push   $0xf0137834
f010eada:	e8 4e 21 ff ff       	call   f0100c2d <cprintf>
f010eadf:	83 c4 10             	add    $0x10,%esp
}
f010eae2:	90                   	nop
f010eae3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010eae6:	5b                   	pop    %ebx
f010eae7:	5e                   	pop    %esi
f010eae8:	5f                   	pop    %edi
f010eae9:	5d                   	pop    %ebp
f010eaea:	c3                   	ret    

f010eaeb <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010eaeb:	55                   	push   %ebp
f010eaec:	89 e5                	mov    %esp,%ebp
f010eaee:	57                   	push   %edi
f010eaef:	56                   	push   %esi
f010eaf0:	53                   	push   %ebx
f010eaf1:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010eaf7:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eafe:	83 ec 0c             	sub    $0xc,%esp
f010eb01:	ff 75 e0             	pushl  -0x20(%ebp)
f010eb04:	e8 80 24 02 00       	call   f0130f89 <initialize_MemBlocksList>
f010eb09:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010eb0c:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010eb13:	00 00 00 
f010eb16:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010eb1d:	00 00 00 
f010eb20:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010eb27:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010eb2a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010eb2d:	bb 40 76 13 f0       	mov    $0xf0137640,%ebx
f010eb32:	ba 08 00 00 00       	mov    $0x8,%edx
f010eb37:	89 c7                	mov    %eax,%edi
f010eb39:	89 de                	mov    %ebx,%esi
f010eb3b:	89 d1                	mov    %edx,%ecx
f010eb3d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010eb3f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eb42:	bb a0 7a 13 f0       	mov    $0xf0137aa0,%ebx
f010eb47:	ba 08 00 00 00       	mov    $0x8,%edx
f010eb4c:	89 c7                	mov    %eax,%edi
f010eb4e:	89 de                	mov    %ebx,%esi
f010eb50:	89 d1                	mov    %edx,%ecx
f010eb52:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010eb54:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010eb5b:	00 00 00 
f010eb5e:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010eb65:	00 00 00 
f010eb68:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010eb6f:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010eb72:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010eb79:	e9 5f 01 00 00       	jmp    f010ecdd <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010eb7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb81:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010eb85:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eb88:	c1 e2 04             	shl    $0x4,%edx
f010eb8b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eb8e:	01 da                	add    %ebx,%edx
f010eb90:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010eb96:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010eb98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb9b:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010eb9f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eba2:	c1 e2 04             	shl    $0x4,%edx
f010eba5:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eba8:	01 f2                	add    %esi,%edx
f010ebaa:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010ebb0:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ebb2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ebb6:	0f 85 92 00 00 00    	jne    f010ec4e <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010ebbc:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010ebc1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ebc4:	c1 e2 04             	shl    $0x4,%edx
f010ebc7:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ebca:	01 fa                	add    %edi,%edx
f010ebcc:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010ebd2:	89 02                	mov    %eax,(%edx)
f010ebd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ebd7:	c1 e0 04             	shl    $0x4,%eax
f010ebda:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ebdd:	01 d8                	add    %ebx,%eax
f010ebdf:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ebe4:	8b 00                	mov    (%eax),%eax
f010ebe6:	85 c0                	test   %eax,%eax
f010ebe8:	74 18                	je     f010ec02 <test_alloc_block_NF+0x117>
f010ebea:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010ebef:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ebf5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ebf8:	c1 e1 04             	shl    $0x4,%ecx
f010ebfb:	01 ca                	add    %ecx,%edx
f010ebfd:	89 50 04             	mov    %edx,0x4(%eax)
f010ec00:	eb 13                	jmp    f010ec15 <test_alloc_block_NF+0x12a>
f010ec02:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ec08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec0b:	c1 e2 04             	shl    $0x4,%edx
f010ec0e:	01 d0                	add    %edx,%eax
f010ec10:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010ec15:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ec1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec1e:	c1 e2 04             	shl    $0x4,%edx
f010ec21:	01 d0                	add    %edx,%eax
f010ec23:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010ec28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec2b:	c1 e0 04             	shl    $0x4,%eax
f010ec2e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ec31:	01 f0                	add    %esi,%eax
f010ec33:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ec38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ec3e:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010ec43:	40                   	inc    %eax
f010ec44:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
f010ec49:	e9 8c 00 00 00       	jmp    f010ecda <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ec4e:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010ec53:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec56:	c1 e2 04             	shl    $0x4,%edx
f010ec59:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ec5c:	01 fa                	add    %edi,%edx
f010ec5e:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ec64:	89 02                	mov    %eax,(%edx)
f010ec66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec69:	c1 e0 04             	shl    $0x4,%eax
f010ec6c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ec6f:	01 d8                	add    %ebx,%eax
f010ec71:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ec76:	8b 00                	mov    (%eax),%eax
f010ec78:	85 c0                	test   %eax,%eax
f010ec7a:	74 17                	je     f010ec93 <test_alloc_block_NF+0x1a8>
f010ec7c:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010ec81:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ec87:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ec8a:	c1 e1 04             	shl    $0x4,%ecx
f010ec8d:	01 ca                	add    %ecx,%edx
f010ec8f:	89 10                	mov    %edx,(%eax)
f010ec91:	eb 13                	jmp    f010eca6 <test_alloc_block_NF+0x1bb>
f010ec93:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ec99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec9c:	c1 e2 04             	shl    $0x4,%edx
f010ec9f:	01 d0                	add    %edx,%eax
f010eca1:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010eca6:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ecac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ecaf:	c1 e2 04             	shl    $0x4,%edx
f010ecb2:	01 d0                	add    %edx,%eax
f010ecb4:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010ecb9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ecbc:	c1 e0 04             	shl    $0x4,%eax
f010ecbf:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ecc2:	01 f0                	add    %esi,%eax
f010ecc4:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ecc9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010eccf:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010ecd4:	40                   	inc    %eax
f010ecd5:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010ecda:	ff 45 e4             	incl   -0x1c(%ebp)
f010ecdd:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010ece1:	0f 8e 97 fe ff ff    	jle    f010eb7e <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010ece7:	83 ec 0c             	sub    $0xc,%esp
f010ecea:	68 00 00 a0 00       	push   $0xa00000
f010ecef:	e8 0d 2a 02 00       	call   f0131701 <alloc_block_NF>
f010ecf4:	83 c4 10             	add    $0x10,%esp
f010ecf7:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010ecfa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ecfe:	74 17                	je     f010ed17 <test_alloc_block_NF+0x22c>
f010ed00:	83 ec 04             	sub    $0x4,%esp
f010ed03:	68 ac 78 13 f0       	push   $0xf01378ac
f010ed08:	68 e1 01 00 00       	push   $0x1e1
f010ed0d:	68 14 6f 13 f0       	push   $0xf0136f14
f010ed12:	e8 8f 14 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ed17:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010ed1c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ed1f:	75 13                	jne    f010ed34 <test_alloc_block_NF+0x249>
f010ed21:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010ed26:	83 f8 08             	cmp    $0x8,%eax
f010ed29:	75 09                	jne    f010ed34 <test_alloc_block_NF+0x249>
f010ed2b:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010ed30:	85 c0                	test   %eax,%eax
f010ed32:	74 17                	je     f010ed4b <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010ed34:	83 ec 04             	sub    $0x4,%esp
f010ed37:	68 40 74 13 f0       	push   $0xf0137440
f010ed3c:	68 e5 01 00 00       	push   $0x1e5
f010ed41:	68 14 6f 13 f0       	push   $0xf0136f14
f010ed46:	e8 5b 14 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010ed4b:	83 ec 0c             	sub    $0xc,%esp
f010ed4e:	68 00 28 00 00       	push   $0x2800
f010ed53:	e8 a9 29 02 00       	call   f0131701 <alloc_block_NF>
f010ed58:	83 c4 10             	add    $0x10,%esp
f010ed5b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010ed5e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ed62:	74 1a                	je     f010ed7e <test_alloc_block_NF+0x293>
f010ed64:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed67:	8b 40 0c             	mov    0xc(%eax),%eax
f010ed6a:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010ed6f:	75 0d                	jne    f010ed7e <test_alloc_block_NF+0x293>
f010ed71:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed74:	8b 40 08             	mov    0x8(%eax),%eax
f010ed77:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010ed7c:	74 17                	je     f010ed95 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ed7e:	83 ec 04             	sub    $0x4,%esp
f010ed81:	68 20 79 13 f0       	push   $0xf0137920
f010ed86:	68 ed 01 00 00       	push   $0x1ed
f010ed8b:	68 14 6f 13 f0       	push   $0xf0136f14
f010ed90:	e8 11 14 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ed95:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010ed9a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ed9d:	75 13                	jne    f010edb2 <test_alloc_block_NF+0x2c7>
f010ed9f:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010eda4:	83 f8 07             	cmp    $0x7,%eax
f010eda7:	75 09                	jne    f010edb2 <test_alloc_block_NF+0x2c7>
f010eda9:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010edae:	85 c0                	test   %eax,%eax
f010edb0:	74 17                	je     f010edc9 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010edb2:	83 ec 04             	sub    $0x4,%esp
f010edb5:	68 64 79 13 f0       	push   $0xf0137964
f010edba:	68 f1 01 00 00       	push   $0x1f1
f010edbf:	68 14 6f 13 f0       	push   $0xf0136f14
f010edc4:	e8 dd 13 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010edc9:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010edd0:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010edd3:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010edda:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010ede1:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ede8:	83 ec 0c             	sub    $0xc,%esp
f010edeb:	ff 75 d8             	pushl  -0x28(%ebp)
f010edee:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010edf4:	50                   	push   %eax
f010edf5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010edf8:	50                   	push   %eax
f010edf9:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010edfc:	50                   	push   %eax
f010edfd:	68 c0 84 6e f0       	push   $0xf06e84c0
f010ee02:	e8 56 11 00 00       	call   f010ff5d <check_list_data>
f010ee07:	83 c4 20             	add    $0x20,%esp
f010ee0a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ee0d:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ee11:	74 17                	je     f010ee2a <test_alloc_block_NF+0x33f>
f010ee13:	83 ec 04             	sub    $0x4,%esp
f010ee16:	68 c8 79 13 f0       	push   $0xf01379c8
f010ee1b:	68 f9 01 00 00       	push   $0x1f9
f010ee20:	68 14 6f 13 f0       	push   $0xf0136f14
f010ee25:	e8 7c 13 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ee2a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ee30:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ee33:	74 17                	je     f010ee4c <test_alloc_block_NF+0x361>
f010ee35:	83 ec 04             	sub    $0x4,%esp
f010ee38:	68 14 7a 13 f0       	push   $0xf0137a14
f010ee3d:	68 fa 01 00 00       	push   $0x1fa
f010ee42:	68 14 6f 13 f0       	push   $0xf0136f14
f010ee47:	e8 5a 13 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010ee4c:	83 ec 0c             	sub    $0xc,%esp
f010ee4f:	68 00 00 20 00       	push   $0x200000
f010ee54:	e8 a8 28 02 00       	call   f0131701 <alloc_block_NF>
f010ee59:	83 c4 10             	add    $0x10,%esp
f010ee5c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010ee5f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee63:	74 1a                	je     f010ee7f <test_alloc_block_NF+0x394>
f010ee65:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee68:	8b 40 0c             	mov    0xc(%eax),%eax
f010ee6b:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010ee70:	75 0d                	jne    f010ee7f <test_alloc_block_NF+0x394>
f010ee72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee75:	8b 40 08             	mov    0x8(%eax),%eax
f010ee78:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ee7d:	74 17                	je     f010ee96 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ee7f:	83 ec 04             	sub    $0x4,%esp
f010ee82:	68 20 79 13 f0       	push   $0xf0137920
f010ee87:	68 03 02 00 00       	push   $0x203
f010ee8c:	68 14 6f 13 f0       	push   $0xf0136f14
f010ee91:	e8 10 13 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ee96:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010ee9b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ee9e:	75 13                	jne    f010eeb3 <test_alloc_block_NF+0x3c8>
f010eea0:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010eea5:	83 f8 06             	cmp    $0x6,%eax
f010eea8:	75 09                	jne    f010eeb3 <test_alloc_block_NF+0x3c8>
f010eeaa:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010eeaf:	85 c0                	test   %eax,%eax
f010eeb1:	74 17                	je     f010eeca <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eeb3:	83 ec 04             	sub    $0x4,%esp
f010eeb6:	68 64 79 13 f0       	push   $0xf0137964
f010eebb:	68 07 02 00 00       	push   $0x207
f010eec0:	68 14 6f 13 f0       	push   $0xf0136f14
f010eec5:	e8 dc 12 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010eeca:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010eed1:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010eed4:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010eedb:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010eee2:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010eee9:	83 ec 0c             	sub    $0xc,%esp
f010eeec:	ff 75 d8             	pushl  -0x28(%ebp)
f010eeef:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010eef5:	50                   	push   %eax
f010eef6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eef9:	50                   	push   %eax
f010eefa:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010eefd:	50                   	push   %eax
f010eefe:	68 c0 84 6e f0       	push   $0xf06e84c0
f010ef03:	e8 55 10 00 00       	call   f010ff5d <check_list_data>
f010ef08:	83 c4 20             	add    $0x20,%esp
f010ef0b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ef0e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ef12:	74 17                	je     f010ef2b <test_alloc_block_NF+0x440>
f010ef14:	83 ec 04             	sub    $0x4,%esp
f010ef17:	68 c8 79 13 f0       	push   $0xf01379c8
f010ef1c:	68 0f 02 00 00       	push   $0x20f
f010ef21:	68 14 6f 13 f0       	push   $0xf0136f14
f010ef26:	e8 7b 12 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ef2b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ef31:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ef34:	74 17                	je     f010ef4d <test_alloc_block_NF+0x462>
f010ef36:	83 ec 04             	sub    $0x4,%esp
f010ef39:	68 14 7a 13 f0       	push   $0xf0137a14
f010ef3e:	68 10 02 00 00       	push   $0x210
f010ef43:	68 14 6f 13 f0       	push   $0xf0136f14
f010ef48:	e8 59 12 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010ef4d:	83 ec 0c             	sub    $0xc,%esp
f010ef50:	68 00 00 08 00       	push   $0x80000
f010ef55:	e8 a7 27 02 00       	call   f0131701 <alloc_block_NF>
f010ef5a:	83 c4 10             	add    $0x10,%esp
f010ef5d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010ef60:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ef64:	74 1a                	je     f010ef80 <test_alloc_block_NF+0x495>
f010ef66:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef69:	8b 40 0c             	mov    0xc(%eax),%eax
f010ef6c:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010ef71:	75 0d                	jne    f010ef80 <test_alloc_block_NF+0x495>
f010ef73:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef76:	8b 40 08             	mov    0x8(%eax),%eax
f010ef79:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010ef7e:	74 17                	je     f010ef97 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ef80:	83 ec 04             	sub    $0x4,%esp
f010ef83:	68 20 79 13 f0       	push   $0xf0137920
f010ef88:	68 19 02 00 00       	push   $0x219
f010ef8d:	68 14 6f 13 f0       	push   $0xf0136f14
f010ef92:	e8 0f 12 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ef97:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010ef9c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ef9f:	4a                   	dec    %edx
f010efa0:	39 d0                	cmp    %edx,%eax
f010efa2:	75 13                	jne    f010efb7 <test_alloc_block_NF+0x4cc>
f010efa4:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010efa9:	83 f8 06             	cmp    $0x6,%eax
f010efac:	75 09                	jne    f010efb7 <test_alloc_block_NF+0x4cc>
f010efae:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010efb3:	85 c0                	test   %eax,%eax
f010efb5:	74 17                	je     f010efce <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010efb7:	83 ec 04             	sub    $0x4,%esp
f010efba:	68 64 79 13 f0       	push   $0xf0137964
f010efbf:	68 1d 02 00 00       	push   $0x21d
f010efc4:	68 14 6f 13 f0       	push   $0xf0136f14
f010efc9:	e8 d8 11 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010efce:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010efd5:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010efd8:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010efdf:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010efe6:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010efed:	83 ec 0c             	sub    $0xc,%esp
f010eff0:	ff 75 d8             	pushl  -0x28(%ebp)
f010eff3:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010eff9:	50                   	push   %eax
f010effa:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010effd:	50                   	push   %eax
f010effe:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f001:	50                   	push   %eax
f010f002:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f007:	e8 51 0f 00 00       	call   f010ff5d <check_list_data>
f010f00c:	83 c4 20             	add    $0x20,%esp
f010f00f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f012:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f016:	74 17                	je     f010f02f <test_alloc_block_NF+0x544>
f010f018:	83 ec 04             	sub    $0x4,%esp
f010f01b:	68 c8 79 13 f0       	push   $0xf01379c8
f010f020:	68 25 02 00 00       	push   $0x225
f010f025:	68 14 6f 13 f0       	push   $0xf0136f14
f010f02a:	e8 77 11 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f02f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f035:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f038:	74 17                	je     f010f051 <test_alloc_block_NF+0x566>
f010f03a:	83 ec 04             	sub    $0x4,%esp
f010f03d:	68 14 7a 13 f0       	push   $0xf0137a14
f010f042:	68 26 02 00 00       	push   $0x226
f010f047:	68 14 6f 13 f0       	push   $0xf0136f14
f010f04c:	e8 55 11 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010f051:	83 ec 0c             	sub    $0xc,%esp
f010f054:	68 00 fc 07 00       	push   $0x7fc00
f010f059:	e8 a3 26 02 00       	call   f0131701 <alloc_block_NF>
f010f05e:	83 c4 10             	add    $0x10,%esp
f010f061:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010f064:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f068:	74 1a                	je     f010f084 <test_alloc_block_NF+0x599>
f010f06a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f06d:	8b 40 0c             	mov    0xc(%eax),%eax
f010f070:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010f075:	75 0d                	jne    f010f084 <test_alloc_block_NF+0x599>
f010f077:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f07a:	8b 40 08             	mov    0x8(%eax),%eax
f010f07d:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010f082:	74 17                	je     f010f09b <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f084:	83 ec 04             	sub    $0x4,%esp
f010f087:	68 20 79 13 f0       	push   $0xf0137920
f010f08c:	68 2f 02 00 00       	push   $0x22f
f010f091:	68 14 6f 13 f0       	push   $0xf0136f14
f010f096:	e8 0b 11 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f09b:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f0a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f0a3:	83 ea 02             	sub    $0x2,%edx
f010f0a6:	39 d0                	cmp    %edx,%eax
f010f0a8:	75 13                	jne    f010f0bd <test_alloc_block_NF+0x5d2>
f010f0aa:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f0af:	83 f8 06             	cmp    $0x6,%eax
f010f0b2:	75 09                	jne    f010f0bd <test_alloc_block_NF+0x5d2>
f010f0b4:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f0b9:	85 c0                	test   %eax,%eax
f010f0bb:	74 17                	je     f010f0d4 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f0bd:	83 ec 04             	sub    $0x4,%esp
f010f0c0:	68 64 79 13 f0       	push   $0xf0137964
f010f0c5:	68 33 02 00 00       	push   $0x233
f010f0ca:	68 14 6f 13 f0       	push   $0xf0136f14
f010f0cf:	e8 d2 10 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f0d4:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f0db:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f0de:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010f0e5:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010f0ec:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f0f3:	83 ec 0c             	sub    $0xc,%esp
f010f0f6:	ff 75 d8             	pushl  -0x28(%ebp)
f010f0f9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f0ff:	50                   	push   %eax
f010f100:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f103:	50                   	push   %eax
f010f104:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f107:	50                   	push   %eax
f010f108:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f10d:	e8 4b 0e 00 00       	call   f010ff5d <check_list_data>
f010f112:	83 c4 20             	add    $0x20,%esp
f010f115:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f118:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f11c:	74 17                	je     f010f135 <test_alloc_block_NF+0x64a>
f010f11e:	83 ec 04             	sub    $0x4,%esp
f010f121:	68 c8 79 13 f0       	push   $0xf01379c8
f010f126:	68 3b 02 00 00       	push   $0x23b
f010f12b:	68 14 6f 13 f0       	push   $0xf0136f14
f010f130:	e8 71 10 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f135:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f13b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f13e:	74 17                	je     f010f157 <test_alloc_block_NF+0x66c>
f010f140:	83 ec 04             	sub    $0x4,%esp
f010f143:	68 14 7a 13 f0       	push   $0xf0137a14
f010f148:	68 3c 02 00 00       	push   $0x23c
f010f14d:	68 14 6f 13 f0       	push   $0xf0136f14
f010f152:	e8 4f 10 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010f157:	83 ec 0c             	sub    $0xc,%esp
f010f15a:	68 00 0c 00 00       	push   $0xc00
f010f15f:	e8 9d 25 02 00       	call   f0131701 <alloc_block_NF>
f010f164:	83 c4 10             	add    $0x10,%esp
f010f167:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010f16a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f16e:	74 17                	je     f010f187 <test_alloc_block_NF+0x69c>
f010f170:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f173:	8b 40 0c             	mov    0xc(%eax),%eax
f010f176:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f17b:	75 0a                	jne    f010f187 <test_alloc_block_NF+0x69c>
f010f17d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f180:	8b 40 08             	mov    0x8(%eax),%eax
f010f183:	85 c0                	test   %eax,%eax
f010f185:	74 17                	je     f010f19e <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f187:	83 ec 04             	sub    $0x4,%esp
f010f18a:	68 20 79 13 f0       	push   $0xf0137920
f010f18f:	68 45 02 00 00       	push   $0x245
f010f194:	68 14 6f 13 f0       	push   $0xf0136f14
f010f199:	e8 08 10 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f19e:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f1a3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f1a6:	83 ea 02             	sub    $0x2,%edx
f010f1a9:	39 d0                	cmp    %edx,%eax
f010f1ab:	75 13                	jne    f010f1c0 <test_alloc_block_NF+0x6d5>
f010f1ad:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f1b2:	83 f8 05             	cmp    $0x5,%eax
f010f1b5:	75 09                	jne    f010f1c0 <test_alloc_block_NF+0x6d5>
f010f1b7:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f1bc:	85 c0                	test   %eax,%eax
f010f1be:	74 17                	je     f010f1d7 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f1c0:	83 ec 04             	sub    $0x4,%esp
f010f1c3:	68 64 79 13 f0       	push   $0xf0137964
f010f1c8:	68 49 02 00 00       	push   $0x249
f010f1cd:	68 14 6f 13 f0       	push   $0xf0136f14
f010f1d2:	e8 cf 0f ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f1d7:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f1de:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010f1e1:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010f1e8:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010f1ef:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f1f6:	83 ec 0c             	sub    $0xc,%esp
f010f1f9:	ff 75 d8             	pushl  -0x28(%ebp)
f010f1fc:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f202:	50                   	push   %eax
f010f203:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f206:	50                   	push   %eax
f010f207:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f20a:	50                   	push   %eax
f010f20b:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f210:	e8 48 0d 00 00       	call   f010ff5d <check_list_data>
f010f215:	83 c4 20             	add    $0x20,%esp
f010f218:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f21b:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f21f:	74 17                	je     f010f238 <test_alloc_block_NF+0x74d>
f010f221:	83 ec 04             	sub    $0x4,%esp
f010f224:	68 c8 79 13 f0       	push   $0xf01379c8
f010f229:	68 51 02 00 00       	push   $0x251
f010f22e:	68 14 6f 13 f0       	push   $0xf0136f14
f010f233:	e8 6e 0f ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f238:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f23e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f241:	74 17                	je     f010f25a <test_alloc_block_NF+0x76f>
f010f243:	83 ec 04             	sub    $0x4,%esp
f010f246:	68 14 7a 13 f0       	push   $0xf0137a14
f010f24b:	68 52 02 00 00       	push   $0x252
f010f250:	68 14 6f 13 f0       	push   $0xf0136f14
f010f255:	e8 4c 0f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010f25a:	83 ec 0c             	sub    $0xc,%esp
f010f25d:	68 00 04 00 00       	push   $0x400
f010f262:	e8 9a 24 02 00       	call   f0131701 <alloc_block_NF>
f010f267:	83 c4 10             	add    $0x10,%esp
f010f26a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010f26d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f271:	74 1a                	je     f010f28d <test_alloc_block_NF+0x7a2>
f010f273:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f276:	8b 40 0c             	mov    0xc(%eax),%eax
f010f279:	3d 00 04 00 00       	cmp    $0x400,%eax
f010f27e:	75 0d                	jne    f010f28d <test_alloc_block_NF+0x7a2>
f010f280:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f283:	8b 40 08             	mov    0x8(%eax),%eax
f010f286:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010f28b:	74 17                	je     f010f2a4 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f28d:	83 ec 04             	sub    $0x4,%esp
f010f290:	68 20 79 13 f0       	push   $0xf0137920
f010f295:	68 5b 02 00 00       	push   $0x25b
f010f29a:	68 14 6f 13 f0       	push   $0xf0136f14
f010f29f:	e8 02 0f ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f2a4:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f2a9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f2ac:	83 ea 03             	sub    $0x3,%edx
f010f2af:	39 d0                	cmp    %edx,%eax
f010f2b1:	75 13                	jne    f010f2c6 <test_alloc_block_NF+0x7db>
f010f2b3:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f2b8:	83 f8 05             	cmp    $0x5,%eax
f010f2bb:	75 09                	jne    f010f2c6 <test_alloc_block_NF+0x7db>
f010f2bd:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f2c2:	85 c0                	test   %eax,%eax
f010f2c4:	74 17                	je     f010f2dd <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f2c6:	83 ec 04             	sub    $0x4,%esp
f010f2c9:	68 64 79 13 f0       	push   $0xf0137964
f010f2ce:	68 5f 02 00 00       	push   $0x25f
f010f2d3:	68 14 6f 13 f0       	push   $0xf0136f14
f010f2d8:	e8 c9 0e ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f2dd:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f2e4:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010f2e7:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010f2ee:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010f2f5:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f2fc:	83 ec 0c             	sub    $0xc,%esp
f010f2ff:	ff 75 d8             	pushl  -0x28(%ebp)
f010f302:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f308:	50                   	push   %eax
f010f309:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f30c:	50                   	push   %eax
f010f30d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f310:	50                   	push   %eax
f010f311:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f316:	e8 42 0c 00 00       	call   f010ff5d <check_list_data>
f010f31b:	83 c4 20             	add    $0x20,%esp
f010f31e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f321:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f325:	74 17                	je     f010f33e <test_alloc_block_NF+0x853>
f010f327:	83 ec 04             	sub    $0x4,%esp
f010f32a:	68 c8 79 13 f0       	push   $0xf01379c8
f010f32f:	68 67 02 00 00       	push   $0x267
f010f334:	68 14 6f 13 f0       	push   $0xf0136f14
f010f339:	e8 68 0e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f33e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f344:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f347:	74 17                	je     f010f360 <test_alloc_block_NF+0x875>
f010f349:	83 ec 04             	sub    $0x4,%esp
f010f34c:	68 14 7a 13 f0       	push   $0xf0137a14
f010f351:	68 68 02 00 00       	push   $0x268
f010f356:	68 14 6f 13 f0       	push   $0xf0136f14
f010f35b:	e8 46 0e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010f360:	83 ec 0c             	sub    $0xc,%esp
f010f363:	68 60 7a 13 f0       	push   $0xf0137a60
f010f368:	e8 c0 18 ff ff       	call   f0100c2d <cprintf>
f010f36d:	83 c4 10             	add    $0x10,%esp

}
f010f370:	90                   	nop
f010f371:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f374:	5b                   	pop    %ebx
f010f375:	5e                   	pop    %esi
f010f376:	5f                   	pop    %edi
f010f377:	5d                   	pop    %ebp
f010f378:	c3                   	ret    

f010f379 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010f379:	55                   	push   %ebp
f010f37a:	89 e5                	mov    %esp,%ebp
f010f37c:	57                   	push   %edi
f010f37d:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010f383:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f38a:	83 ec 0c             	sub    $0xc,%esp
f010f38d:	ff 75 f4             	pushl  -0xc(%ebp)
f010f390:	e8 f4 1b 02 00       	call   f0130f89 <initialize_MemBlocksList>
f010f395:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f398:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010f39f:	00 00 00 
f010f3a2:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010f3a9:	00 00 00 
f010f3ac:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010f3b3:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010f3b6:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010f3bd:	00 00 00 
f010f3c0:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010f3c7:	00 00 00 
f010f3ca:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010f3d1:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010f3d4:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010f3d7:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f3dc:	b8 00 00 00 00       	mov    $0x0,%eax
f010f3e1:	89 d7                	mov    %edx,%edi
f010f3e3:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010f3e5:	8d 55 98             	lea    -0x68(%ebp),%edx
f010f3e8:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f3ed:	b8 00 00 00 00       	mov    $0x0,%eax
f010f3f2:	89 d7                	mov    %edx,%edi
f010f3f4:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010f3f6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010f3fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010f404:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010f40b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f40e:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010f415:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f416:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f419:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f420:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f421:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f424:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f428:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010f42b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f42e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f432:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010f435:	83 ec 0c             	sub    $0xc,%esp
f010f438:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010f43b:	50                   	push   %eax
f010f43c:	e8 8d 28 02 00       	call   f0131cce <insert_sorted_with_merge_freeList>
f010f441:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010f444:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f449:	85 c0                	test   %eax,%eax
f010f44b:	75 14                	jne    f010f461 <test_insert_sorted_with_merge_freeList+0xe8>
f010f44d:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f452:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f455:	75 0a                	jne    f010f461 <test_insert_sorted_with_merge_freeList+0xe8>
f010f457:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f45c:	83 f8 01             	cmp    $0x1,%eax
f010f45f:	74 17                	je     f010f478 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f461:	83 ec 04             	sub    $0x4,%esp
f010f464:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010f469:	68 88 02 00 00       	push   $0x288
f010f46e:	68 14 6f 13 f0       	push   $0xf0136f14
f010f473:	e8 2e 0d ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the free list content
	size = 0;
f010f478:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010f47f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f486:	83 ec 0c             	sub    $0xc,%esp
f010f489:	ff 75 f0             	pushl  -0x10(%ebp)
f010f48c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f48f:	50                   	push   %eax
f010f490:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f493:	50                   	push   %eax
f010f494:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f497:	50                   	push   %eax
f010f498:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f49d:	e8 bb 0a 00 00       	call   f010ff5d <check_list_data>
f010f4a2:	83 c4 20             	add    $0x20,%esp
f010f4a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f4a8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f4ac:	74 17                	je     f010f4c5 <test_insert_sorted_with_merge_freeList+0x14c>
f010f4ae:	83 ec 04             	sub    $0x4,%esp
f010f4b1:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010f4b6:	68 8e 02 00 00       	push   $0x28e
f010f4bb:	68 14 6f 13 f0       	push   $0xf0136f14
f010f4c0:	e8 e1 0c ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f4c5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f4c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f4cb:	74 17                	je     f010f4e4 <test_insert_sorted_with_merge_freeList+0x16b>
f010f4cd:	83 ec 04             	sub    $0x4,%esp
f010f4d0:	68 80 7b 13 f0       	push   $0xf0137b80
f010f4d5:	68 8f 02 00 00       	push   $0x28f
f010f4da:	68 14 6f 13 f0       	push   $0xf0136f14
f010f4df:	e8 c2 0c ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010f4e4:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010f4eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f4ee:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010f4f5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010f4f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f4f9:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010f500:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f501:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f504:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f508:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010f50e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f511:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f515:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010f518:	83 ec 0c             	sub    $0xc,%esp
f010f51b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010f521:	50                   	push   %eax
f010f522:	e8 a7 27 02 00       	call   f0131cce <insert_sorted_with_merge_freeList>
f010f527:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010f52a:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f52f:	85 c0                	test   %eax,%eax
f010f531:	75 14                	jne    f010f547 <test_insert_sorted_with_merge_freeList+0x1ce>
f010f533:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f538:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f53b:	75 0a                	jne    f010f547 <test_insert_sorted_with_merge_freeList+0x1ce>
f010f53d:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f542:	83 f8 02             	cmp    $0x2,%eax
f010f545:	74 17                	je     f010f55e <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f547:	83 ec 04             	sub    $0x4,%esp
f010f54a:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010f54f:	68 9e 02 00 00       	push   $0x29e
f010f554:	68 14 6f 13 f0       	push   $0xf0136f14
f010f559:	e8 48 0c ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f55e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010f565:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f56c:	83 ec 0c             	sub    $0xc,%esp
f010f56f:	ff 75 f0             	pushl  -0x10(%ebp)
f010f572:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f575:	50                   	push   %eax
f010f576:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f579:	50                   	push   %eax
f010f57a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f57d:	50                   	push   %eax
f010f57e:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f583:	e8 d5 09 00 00       	call   f010ff5d <check_list_data>
f010f588:	83 c4 20             	add    $0x20,%esp
f010f58b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f58e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f592:	74 17                	je     f010f5ab <test_insert_sorted_with_merge_freeList+0x232>
f010f594:	83 ec 04             	sub    $0x4,%esp
f010f597:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010f59c:	68 a4 02 00 00       	push   $0x2a4
f010f5a1:	68 14 6f 13 f0       	push   $0xf0136f14
f010f5a6:	e8 fb 0b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f5ab:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f5ae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f5b1:	74 17                	je     f010f5ca <test_insert_sorted_with_merge_freeList+0x251>
f010f5b3:	83 ec 04             	sub    $0x4,%esp
f010f5b6:	68 80 7b 13 f0       	push   $0xf0137b80
f010f5bb:	68 a5 02 00 00       	push   $0x2a5
f010f5c0:	68 14 6f 13 f0       	push   $0xf0136f14
f010f5c5:	e8 dc 0b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010f5ca:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010f5d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f5d4:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010f5db:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f5dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f5df:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f5e6:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f5e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f5ea:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f5ee:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010f5f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f5f7:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f5fb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010f601:	83 ec 0c             	sub    $0xc,%esp
f010f604:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010f60a:	50                   	push   %eax
f010f60b:	e8 be 26 02 00       	call   f0131cce <insert_sorted_with_merge_freeList>
f010f610:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010f613:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f618:	85 c0                	test   %eax,%eax
f010f61a:	75 14                	jne    f010f630 <test_insert_sorted_with_merge_freeList+0x2b7>
f010f61c:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f621:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f624:	75 0a                	jne    f010f630 <test_insert_sorted_with_merge_freeList+0x2b7>
f010f626:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f62b:	83 f8 03             	cmp    $0x3,%eax
f010f62e:	74 17                	je     f010f647 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f630:	83 ec 04             	sub    $0x4,%esp
f010f633:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010f638:	68 b4 02 00 00       	push   $0x2b4
f010f63d:	68 14 6f 13 f0       	push   $0xf0136f14
f010f642:	e8 5f 0b ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f647:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010f64e:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f655:	83 ec 0c             	sub    $0xc,%esp
f010f658:	ff 75 f0             	pushl  -0x10(%ebp)
f010f65b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f65e:	50                   	push   %eax
f010f65f:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f662:	50                   	push   %eax
f010f663:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f666:	50                   	push   %eax
f010f667:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f66c:	e8 ec 08 00 00       	call   f010ff5d <check_list_data>
f010f671:	83 c4 20             	add    $0x20,%esp
f010f674:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f677:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f67b:	74 17                	je     f010f694 <test_insert_sorted_with_merge_freeList+0x31b>
f010f67d:	83 ec 04             	sub    $0x4,%esp
f010f680:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010f685:	68 ba 02 00 00       	push   $0x2ba
f010f68a:	68 14 6f 13 f0       	push   $0xf0136f14
f010f68f:	e8 12 0b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f694:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f697:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f69a:	74 17                	je     f010f6b3 <test_insert_sorted_with_merge_freeList+0x33a>
f010f69c:	83 ec 04             	sub    $0x4,%esp
f010f69f:	68 80 7b 13 f0       	push   $0xf0137b80
f010f6a4:	68 bb 02 00 00       	push   $0x2bb
f010f6a9:	68 14 6f 13 f0       	push   $0xf0136f14
f010f6ae:	e8 f3 0a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f010f6b3:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f010f6ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6bd:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f010f6c4:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f6c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6c8:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f6cf:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f6d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6d3:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f6d7:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f010f6dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6e0:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f6e4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f010f6ea:	83 ec 0c             	sub    $0xc,%esp
f010f6ed:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f010f6f3:	50                   	push   %eax
f010f6f4:	e8 d5 25 02 00       	call   f0131cce <insert_sorted_with_merge_freeList>
f010f6f9:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f6fc:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f701:	85 c0                	test   %eax,%eax
f010f703:	75 14                	jne    f010f719 <test_insert_sorted_with_merge_freeList+0x3a0>
f010f705:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f70a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f70d:	75 0a                	jne    f010f719 <test_insert_sorted_with_merge_freeList+0x3a0>
f010f70f:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f714:	83 f8 04             	cmp    $0x4,%eax
f010f717:	74 17                	je     f010f730 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f719:	83 ec 04             	sub    $0x4,%esp
f010f71c:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010f721:	68 ca 02 00 00       	push   $0x2ca
f010f726:	68 14 6f 13 f0       	push   $0xf0136f14
f010f72b:	e8 76 0a ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f730:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f737:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f73e:	83 ec 0c             	sub    $0xc,%esp
f010f741:	ff 75 f0             	pushl  -0x10(%ebp)
f010f744:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f747:	50                   	push   %eax
f010f748:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f74b:	50                   	push   %eax
f010f74c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f74f:	50                   	push   %eax
f010f750:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f755:	e8 03 08 00 00       	call   f010ff5d <check_list_data>
f010f75a:	83 c4 20             	add    $0x20,%esp
f010f75d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f760:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f764:	74 17                	je     f010f77d <test_insert_sorted_with_merge_freeList+0x404>
f010f766:	83 ec 04             	sub    $0x4,%esp
f010f769:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010f76e:	68 d0 02 00 00       	push   $0x2d0
f010f773:	68 14 6f 13 f0       	push   $0xf0136f14
f010f778:	e8 29 0a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f77d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f780:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f783:	74 17                	je     f010f79c <test_insert_sorted_with_merge_freeList+0x423>
f010f785:	83 ec 04             	sub    $0x4,%esp
f010f788:	68 80 7b 13 f0       	push   $0xf0137b80
f010f78d:	68 d1 02 00 00       	push   $0x2d1
f010f792:	68 14 6f 13 f0       	push   $0xf0136f14
f010f797:	e8 0a 0a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f010f79c:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f010f7a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7a6:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f010f7ad:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f010f7ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7b1:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f010f7b8:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f7b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7bc:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f7c0:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f010f7c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7c9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f7cd:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f010f7d3:	83 ec 0c             	sub    $0xc,%esp
f010f7d6:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f010f7dc:	50                   	push   %eax
f010f7dd:	e8 ec 24 02 00       	call   f0131cce <insert_sorted_with_merge_freeList>
f010f7e2:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f7e5:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f7ea:	85 c0                	test   %eax,%eax
f010f7ec:	75 17                	jne    f010f805 <test_insert_sorted_with_merge_freeList+0x48c>
f010f7ee:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f7f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f7f6:	42                   	inc    %edx
f010f7f7:	39 d0                	cmp    %edx,%eax
f010f7f9:	75 0a                	jne    f010f805 <test_insert_sorted_with_merge_freeList+0x48c>
f010f7fb:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f800:	83 f8 04             	cmp    $0x4,%eax
f010f803:	74 17                	je     f010f81c <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f805:	83 ec 04             	sub    $0x4,%esp
f010f808:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010f80d:	68 e3 02 00 00       	push   $0x2e3
f010f812:	68 14 6f 13 f0       	push   $0xf0136f14
f010f817:	e8 8a 09 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f81c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f823:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010f82a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f82d:	8d 50 ff             	lea    -0x1(%eax),%edx
f010f830:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f833:	48                   	dec    %eax
f010f834:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f838:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f83b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f83f:	01 c8                	add    %ecx,%eax
f010f841:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f845:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f848:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f84f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f850:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f853:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f85a:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f85b:	83 ec 0c             	sub    $0xc,%esp
f010f85e:	ff 75 f0             	pushl  -0x10(%ebp)
f010f861:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f864:	50                   	push   %eax
f010f865:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f868:	50                   	push   %eax
f010f869:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f86c:	50                   	push   %eax
f010f86d:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f872:	e8 e6 06 00 00       	call   f010ff5d <check_list_data>
f010f877:	83 c4 20             	add    $0x20,%esp
f010f87a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f87d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f881:	74 17                	je     f010f89a <test_insert_sorted_with_merge_freeList+0x521>
f010f883:	83 ec 04             	sub    $0x4,%esp
f010f886:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010f88b:	68 ec 02 00 00       	push   $0x2ec
f010f890:	68 14 6f 13 f0       	push   $0xf0136f14
f010f895:	e8 0c 09 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f89a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f89d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f8a0:	74 17                	je     f010f8b9 <test_insert_sorted_with_merge_freeList+0x540>
f010f8a2:	83 ec 04             	sub    $0x4,%esp
f010f8a5:	68 80 7b 13 f0       	push   $0xf0137b80
f010f8aa:	68 ed 02 00 00       	push   $0x2ed
f010f8af:	68 14 6f 13 f0       	push   $0xf0136f14
f010f8b4:	e8 ed 08 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f8b9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f8c0:	83 ec 0c             	sub    $0xc,%esp
f010f8c3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f8c6:	50                   	push   %eax
f010f8c7:	e8 5d 07 00 00       	call   f0110029 <check_avaliable_list_data>
f010f8cc:	83 c4 10             	add    $0x10,%esp
f010f8cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f8d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f8d5:	8d 50 01             	lea    0x1(%eax),%edx
f010f8d8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f8db:	39 c2                	cmp    %eax,%edx
f010f8dd:	74 17                	je     f010f8f6 <test_insert_sorted_with_merge_freeList+0x57d>
f010f8df:	83 ec 04             	sub    $0x4,%esp
f010f8e2:	68 d4 7b 13 f0       	push   $0xf0137bd4
f010f8e7:	68 f2 02 00 00       	push   $0x2f2
f010f8ec:	68 14 6f 13 f0       	push   $0xf0136f14
f010f8f1:	e8 b0 08 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f8f6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f8fa:	74 17                	je     f010f913 <test_insert_sorted_with_merge_freeList+0x59a>
f010f8fc:	83 ec 04             	sub    $0x4,%esp
f010f8ff:	68 2c 7c 13 f0       	push   $0xf0137c2c
f010f904:	68 f3 02 00 00       	push   $0x2f3
f010f909:	68 14 6f 13 f0       	push   $0xf0136f14
f010f90e:	e8 93 08 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f010f913:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f010f91a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f91d:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f010f924:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f925:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f928:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f92f:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f930:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f933:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f937:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f010f93d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f940:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f944:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f010f94a:	83 ec 0c             	sub    $0xc,%esp
f010f94d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010f953:	50                   	push   %eax
f010f954:	e8 75 23 02 00       	call   f0131cce <insert_sorted_with_merge_freeList>
f010f959:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f95c:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f961:	85 c0                	test   %eax,%eax
f010f963:	75 19                	jne    f010f97e <test_insert_sorted_with_merge_freeList+0x605>
f010f965:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f96a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f96d:	83 c2 02             	add    $0x2,%edx
f010f970:	39 d0                	cmp    %edx,%eax
f010f972:	75 0a                	jne    f010f97e <test_insert_sorted_with_merge_freeList+0x605>
f010f974:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f979:	83 f8 04             	cmp    $0x4,%eax
f010f97c:	74 17                	je     f010f995 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f97e:	83 ec 04             	sub    $0x4,%esp
f010f981:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010f986:	68 05 03 00 00       	push   $0x305
f010f98b:	68 14 6f 13 f0       	push   $0xf0136f14
f010f990:	e8 11 08 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f995:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f99c:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010f9a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9a6:	8d 50 ff             	lea    -0x1(%eax),%edx
f010f9a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9ac:	48                   	dec    %eax
f010f9ad:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f9b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9b4:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f9b8:	01 c8                	add    %ecx,%eax
f010f9ba:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f9be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9c1:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f9c8:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f9c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9cc:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f9d3:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f9d4:	83 ec 0c             	sub    $0xc,%esp
f010f9d7:	ff 75 f0             	pushl  -0x10(%ebp)
f010f9da:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9dd:	50                   	push   %eax
f010f9de:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f9e1:	50                   	push   %eax
f010f9e2:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f9e5:	50                   	push   %eax
f010f9e6:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f9eb:	e8 6d 05 00 00       	call   f010ff5d <check_list_data>
f010f9f0:	83 c4 20             	add    $0x20,%esp
f010f9f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f9f6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f9fa:	74 17                	je     f010fa13 <test_insert_sorted_with_merge_freeList+0x69a>
f010f9fc:	83 ec 04             	sub    $0x4,%esp
f010f9ff:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010fa04:	68 0e 03 00 00       	push   $0x30e
f010fa09:	68 14 6f 13 f0       	push   $0xf0136f14
f010fa0e:	e8 93 07 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fa13:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fa16:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fa19:	74 17                	je     f010fa32 <test_insert_sorted_with_merge_freeList+0x6b9>
f010fa1b:	83 ec 04             	sub    $0x4,%esp
f010fa1e:	68 80 7b 13 f0       	push   $0xf0137b80
f010fa23:	68 0f 03 00 00       	push   $0x30f
f010fa28:	68 14 6f 13 f0       	push   $0xf0136f14
f010fa2d:	e8 74 07 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fa32:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fa39:	83 ec 0c             	sub    $0xc,%esp
f010fa3c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa3f:	50                   	push   %eax
f010fa40:	e8 e4 05 00 00       	call   f0110029 <check_avaliable_list_data>
f010fa45:	83 c4 10             	add    $0x10,%esp
f010fa48:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fa4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fa4e:	8d 50 02             	lea    0x2(%eax),%edx
f010fa51:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fa54:	39 c2                	cmp    %eax,%edx
f010fa56:	74 17                	je     f010fa6f <test_insert_sorted_with_merge_freeList+0x6f6>
f010fa58:	83 ec 04             	sub    $0x4,%esp
f010fa5b:	68 d4 7b 13 f0       	push   $0xf0137bd4
f010fa60:	68 14 03 00 00       	push   $0x314
f010fa65:	68 14 6f 13 f0       	push   $0xf0136f14
f010fa6a:	e8 37 07 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fa6f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fa73:	74 17                	je     f010fa8c <test_insert_sorted_with_merge_freeList+0x713>
f010fa75:	83 ec 04             	sub    $0x4,%esp
f010fa78:	68 2c 7c 13 f0       	push   $0xf0137c2c
f010fa7d:	68 15 03 00 00       	push   $0x315
f010fa82:	68 14 6f 13 f0       	push   $0xf0136f14
f010fa87:	e8 1a 07 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f010fa8c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fa93:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fa96:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fa9d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010fa9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010faa1:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010faa8:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010faa9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010faac:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fab0:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f010fab6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fab9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fabd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f010fac3:	83 ec 0c             	sub    $0xc,%esp
f010fac6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f010facc:	50                   	push   %eax
f010facd:	e8 fc 21 02 00       	call   f0131cce <insert_sorted_with_merge_freeList>
f010fad2:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010fad5:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010fada:	85 c0                	test   %eax,%eax
f010fadc:	75 19                	jne    f010faf7 <test_insert_sorted_with_merge_freeList+0x77e>
f010fade:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010fae3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fae6:	83 c2 03             	add    $0x3,%edx
f010fae9:	39 d0                	cmp    %edx,%eax
f010faeb:	75 0a                	jne    f010faf7 <test_insert_sorted_with_merge_freeList+0x77e>
f010faed:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010faf2:	83 f8 04             	cmp    $0x4,%eax
f010faf5:	74 17                	je     f010fb0e <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010faf7:	83 ec 04             	sub    $0x4,%esp
f010fafa:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010faff:	68 28 03 00 00       	push   $0x328
f010fb04:	68 14 6f 13 f0       	push   $0xf0136f14
f010fb09:	e8 98 06 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fb0e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fb15:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010fb1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb1f:	8d 50 01             	lea    0x1(%eax),%edx
f010fb22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb25:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fb29:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010fb2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb30:	8d 50 01             	lea    0x1(%eax),%edx
f010fb33:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb36:	40                   	inc    %eax
f010fb37:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fb3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb3e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fb42:	01 c8                	add    %ecx,%eax
f010fb44:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fb48:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb4b:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fb52:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fb53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb56:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fb5d:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fb5e:	83 ec 0c             	sub    $0xc,%esp
f010fb61:	ff 75 f0             	pushl  -0x10(%ebp)
f010fb64:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fb67:	50                   	push   %eax
f010fb68:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fb6b:	50                   	push   %eax
f010fb6c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fb6f:	50                   	push   %eax
f010fb70:	68 c0 84 6e f0       	push   $0xf06e84c0
f010fb75:	e8 e3 03 00 00       	call   f010ff5d <check_list_data>
f010fb7a:	83 c4 20             	add    $0x20,%esp
f010fb7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fb80:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fb84:	74 17                	je     f010fb9d <test_insert_sorted_with_merge_freeList+0x824>
f010fb86:	83 ec 04             	sub    $0x4,%esp
f010fb89:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010fb8e:	68 32 03 00 00       	push   $0x332
f010fb93:	68 14 6f 13 f0       	push   $0xf0136f14
f010fb98:	e8 09 06 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fb9d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fba0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fba3:	74 17                	je     f010fbbc <test_insert_sorted_with_merge_freeList+0x843>
f010fba5:	83 ec 04             	sub    $0x4,%esp
f010fba8:	68 80 7b 13 f0       	push   $0xf0137b80
f010fbad:	68 33 03 00 00       	push   $0x333
f010fbb2:	68 14 6f 13 f0       	push   $0xf0136f14
f010fbb7:	e8 ea 05 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fbbc:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fbc3:	83 ec 0c             	sub    $0xc,%esp
f010fbc6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fbc9:	50                   	push   %eax
f010fbca:	e8 5a 04 00 00       	call   f0110029 <check_avaliable_list_data>
f010fbcf:	83 c4 10             	add    $0x10,%esp
f010fbd2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fbd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fbd8:	8d 50 03             	lea    0x3(%eax),%edx
f010fbdb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fbde:	39 c2                	cmp    %eax,%edx
f010fbe0:	74 17                	je     f010fbf9 <test_insert_sorted_with_merge_freeList+0x880>
f010fbe2:	83 ec 04             	sub    $0x4,%esp
f010fbe5:	68 d4 7b 13 f0       	push   $0xf0137bd4
f010fbea:	68 38 03 00 00       	push   $0x338
f010fbef:	68 14 6f 13 f0       	push   $0xf0136f14
f010fbf4:	e8 ad 05 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fbf9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fbfd:	74 17                	je     f010fc16 <test_insert_sorted_with_merge_freeList+0x89d>
f010fbff:	83 ec 04             	sub    $0x4,%esp
f010fc02:	68 2c 7c 13 f0       	push   $0xf0137c2c
f010fc07:	68 39 03 00 00       	push   $0x339
f010fc0c:	68 14 6f 13 f0       	push   $0xf0136f14
f010fc11:	e8 90 05 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f010fc16:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f010fc1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc20:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f010fc27:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010fc28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc2b:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010fc32:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fc33:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc36:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fc3a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f010fc40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc43:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fc47:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f010fc4d:	83 ec 0c             	sub    $0xc,%esp
f010fc50:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fc56:	50                   	push   %eax
f010fc57:	e8 72 20 02 00       	call   f0131cce <insert_sorted_with_merge_freeList>
f010fc5c:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010fc5f:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010fc64:	85 c0                	test   %eax,%eax
f010fc66:	75 19                	jne    f010fc81 <test_insert_sorted_with_merge_freeList+0x908>
f010fc68:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010fc6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fc70:	83 c2 04             	add    $0x4,%edx
f010fc73:	39 d0                	cmp    %edx,%eax
f010fc75:	75 0a                	jne    f010fc81 <test_insert_sorted_with_merge_freeList+0x908>
f010fc77:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010fc7c:	83 f8 04             	cmp    $0x4,%eax
f010fc7f:	74 17                	je     f010fc98 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fc81:	83 ec 04             	sub    $0x4,%esp
f010fc84:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010fc89:	68 4c 03 00 00       	push   $0x34c
f010fc8e:	68 14 6f 13 f0       	push   $0xf0136f14
f010fc93:	e8 0e 05 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fc98:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fc9f:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010fca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fca9:	8d 50 01             	lea    0x1(%eax),%edx
f010fcac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcaf:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fcb3:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010fcb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcba:	8d 50 01             	lea    0x1(%eax),%edx
f010fcbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcc0:	40                   	inc    %eax
f010fcc1:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fcc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcc8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fccc:	01 c8                	add    %ecx,%eax
f010fcce:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fcd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcd5:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fcdc:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fcdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fce0:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fce7:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fce8:	83 ec 0c             	sub    $0xc,%esp
f010fceb:	ff 75 f0             	pushl  -0x10(%ebp)
f010fcee:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fcf1:	50                   	push   %eax
f010fcf2:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fcf5:	50                   	push   %eax
f010fcf6:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fcf9:	50                   	push   %eax
f010fcfa:	68 c0 84 6e f0       	push   $0xf06e84c0
f010fcff:	e8 59 02 00 00       	call   f010ff5d <check_list_data>
f010fd04:	83 c4 20             	add    $0x20,%esp
f010fd07:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fd0a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fd0e:	74 17                	je     f010fd27 <test_insert_sorted_with_merge_freeList+0x9ae>
f010fd10:	83 ec 04             	sub    $0x4,%esp
f010fd13:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010fd18:	68 56 03 00 00       	push   $0x356
f010fd1d:	68 14 6f 13 f0       	push   $0xf0136f14
f010fd22:	e8 7f 04 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fd27:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fd2d:	74 17                	je     f010fd46 <test_insert_sorted_with_merge_freeList+0x9cd>
f010fd2f:	83 ec 04             	sub    $0x4,%esp
f010fd32:	68 80 7b 13 f0       	push   $0xf0137b80
f010fd37:	68 57 03 00 00       	push   $0x357
f010fd3c:	68 14 6f 13 f0       	push   $0xf0136f14
f010fd41:	e8 60 04 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fd46:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fd4d:	83 ec 0c             	sub    $0xc,%esp
f010fd50:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fd53:	50                   	push   %eax
f010fd54:	e8 d0 02 00 00       	call   f0110029 <check_avaliable_list_data>
f010fd59:	83 c4 10             	add    $0x10,%esp
f010fd5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fd5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fd62:	8d 50 04             	lea    0x4(%eax),%edx
f010fd65:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd68:	39 c2                	cmp    %eax,%edx
f010fd6a:	74 17                	je     f010fd83 <test_insert_sorted_with_merge_freeList+0xa0a>
f010fd6c:	83 ec 04             	sub    $0x4,%esp
f010fd6f:	68 d4 7b 13 f0       	push   $0xf0137bd4
f010fd74:	68 5c 03 00 00       	push   $0x35c
f010fd79:	68 14 6f 13 f0       	push   $0xf0136f14
f010fd7e:	e8 23 04 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fd83:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fd87:	74 17                	je     f010fda0 <test_insert_sorted_with_merge_freeList+0xa27>
f010fd89:	83 ec 04             	sub    $0x4,%esp
f010fd8c:	68 2c 7c 13 f0       	push   $0xf0137c2c
f010fd91:	68 5d 03 00 00       	push   $0x35d
f010fd96:	68 14 6f 13 f0       	push   $0xf0136f14
f010fd9b:	e8 06 04 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f010fda0:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f010fda7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdaa:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f010fdb1:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f010fdb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdb5:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f010fdbc:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fdbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdc0:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fdc4:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f010fdca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdcd:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fdd1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f010fdd7:	83 ec 0c             	sub    $0xc,%esp
f010fdda:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f010fde0:	50                   	push   %eax
f010fde1:	e8 e8 1e 02 00       	call   f0131cce <insert_sorted_with_merge_freeList>
f010fde6:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010fde9:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010fdee:	85 c0                	test   %eax,%eax
f010fdf0:	75 19                	jne    f010fe0b <test_insert_sorted_with_merge_freeList+0xa92>
f010fdf2:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010fdf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fdfa:	83 c2 06             	add    $0x6,%edx
f010fdfd:	39 d0                	cmp    %edx,%eax
f010fdff:	75 0a                	jne    f010fe0b <test_insert_sorted_with_merge_freeList+0xa92>
f010fe01:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010fe06:	83 f8 03             	cmp    $0x3,%eax
f010fe09:	74 17                	je     f010fe22 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe0b:	83 ec 04             	sub    $0x4,%esp
f010fe0e:	68 c0 7a 13 f0       	push   $0xf0137ac0
f010fe13:	68 70 03 00 00       	push   $0x370
f010fe18:	68 14 6f 13 f0       	push   $0xf0136f14
f010fe1d:	e8 84 03 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fe22:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010fe29:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f010fe30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe33:	48                   	dec    %eax
f010fe34:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fe3b:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f010fe3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe3f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010fe42:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe45:	48                   	dec    %eax
f010fe46:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fe4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe4d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fe51:	01 c1                	add    %eax,%ecx
f010fe53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe56:	40                   	inc    %eax
f010fe57:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fe5b:	01 c8                	add    %ecx,%eax
f010fe5d:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fe61:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe64:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fe6b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fe6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe6f:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fe76:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f010fe77:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe7a:	40                   	inc    %eax
f010fe7b:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fe82:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f010fe83:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe86:	40                   	inc    %eax
f010fe87:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fe8e:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fe8f:	83 ec 0c             	sub    $0xc,%esp
f010fe92:	ff 75 f0             	pushl  -0x10(%ebp)
f010fe95:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe98:	50                   	push   %eax
f010fe99:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fe9c:	50                   	push   %eax
f010fe9d:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fea0:	50                   	push   %eax
f010fea1:	68 c0 84 6e f0       	push   $0xf06e84c0
f010fea6:	e8 b2 00 00 00       	call   f010ff5d <check_list_data>
f010feab:	83 c4 20             	add    $0x20,%esp
f010feae:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010feb1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010feb5:	74 17                	je     f010fece <test_insert_sorted_with_merge_freeList+0xb55>
f010feb7:	83 ec 04             	sub    $0x4,%esp
f010feba:	68 2c 7b 13 f0       	push   $0xf0137b2c
f010febf:	68 7c 03 00 00       	push   $0x37c
f010fec4:	68 14 6f 13 f0       	push   $0xf0136f14
f010fec9:	e8 d8 02 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fece:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fed1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fed4:	74 17                	je     f010feed <test_insert_sorted_with_merge_freeList+0xb74>
f010fed6:	83 ec 04             	sub    $0x4,%esp
f010fed9:	68 80 7b 13 f0       	push   $0xf0137b80
f010fede:	68 7d 03 00 00       	push   $0x37d
f010fee3:	68 14 6f 13 f0       	push   $0xf0136f14
f010fee8:	e8 b9 02 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010feed:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fef4:	83 ec 0c             	sub    $0xc,%esp
f010fef7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fefa:	50                   	push   %eax
f010fefb:	e8 29 01 00 00       	call   f0110029 <check_avaliable_list_data>
f010ff00:	83 c4 10             	add    $0x10,%esp
f010ff03:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010ff06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ff09:	8d 50 06             	lea    0x6(%eax),%edx
f010ff0c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ff0f:	39 c2                	cmp    %eax,%edx
f010ff11:	74 17                	je     f010ff2a <test_insert_sorted_with_merge_freeList+0xbb1>
f010ff13:	83 ec 04             	sub    $0x4,%esp
f010ff16:	68 d4 7b 13 f0       	push   $0xf0137bd4
f010ff1b:	68 82 03 00 00       	push   $0x382
f010ff20:	68 14 6f 13 f0       	push   $0xf0136f14
f010ff25:	e8 7c 02 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010ff2a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ff2e:	74 17                	je     f010ff47 <test_insert_sorted_with_merge_freeList+0xbce>
f010ff30:	83 ec 04             	sub    $0x4,%esp
f010ff33:	68 2c 7c 13 f0       	push   $0xf0137c2c
f010ff38:	68 83 03 00 00       	push   $0x383
f010ff3d:	68 14 6f 13 f0       	push   $0xf0136f14
f010ff42:	e8 5f 02 ff ff       	call   f01001a6 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f010ff47:	83 ec 0c             	sub    $0xc,%esp
f010ff4a:	68 88 7c 13 f0       	push   $0xf0137c88
f010ff4f:	e8 d9 0c ff ff       	call   f0100c2d <cprintf>
f010ff54:	83 c4 10             	add    $0x10,%esp

}
f010ff57:	90                   	nop
f010ff58:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010ff5b:	c9                   	leave  
f010ff5c:	c3                   	ret    

f010ff5d <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f010ff5d:	55                   	push   %ebp
f010ff5e:	89 e5                	mov    %esp,%ebp
f010ff60:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f010ff63:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f010ff6a:	8b 45 14             	mov    0x14(%ebp),%eax
f010ff6d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f010ff73:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f010ff7a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ff7d:	8b 00                	mov    (%eax),%eax
f010ff7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010ff82:	eb 6e                	jmp    f010fff2 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f010ff84:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f010ff87:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ff8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ff91:	8b 45 10             	mov    0x10(%ebp),%eax
f010ff94:	01 d0                	add    %edx,%eax
f010ff96:	8b 00                	mov    (%eax),%eax
f010ff98:	85 c0                	test   %eax,%eax
f010ff9a:	74 e8                	je     f010ff84 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f010ff9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010ff9f:	8b 50 08             	mov    0x8(%eax),%edx
f010ffa2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ffa5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010ffac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ffaf:	01 c8                	add    %ecx,%eax
f010ffb1:	8b 00                	mov    (%eax),%eax
f010ffb3:	39 c2                	cmp    %eax,%edx
f010ffb5:	75 1b                	jne    f010ffd2 <check_list_data+0x75>
f010ffb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010ffba:	8b 50 0c             	mov    0xc(%eax),%edx
f010ffbd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ffc0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010ffc7:	8b 45 10             	mov    0x10(%ebp),%eax
f010ffca:	01 c8                	add    %ecx,%eax
f010ffcc:	8b 00                	mov    (%eax),%eax
f010ffce:	39 c2                	cmp    %eax,%edx
f010ffd0:	74 07                	je     f010ffd9 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f010ffd2:	b8 00 00 00 00       	mov    $0x0,%eax
f010ffd7:	eb 4e                	jmp    f0110027 <check_list_data+0xca>
		}
		(*size)++;
f010ffd9:	8b 45 14             	mov    0x14(%ebp),%eax
f010ffdc:	8b 00                	mov    (%eax),%eax
f010ffde:	8d 50 01             	lea    0x1(%eax),%edx
f010ffe1:	8b 45 14             	mov    0x14(%ebp),%eax
f010ffe4:	89 10                	mov    %edx,(%eax)
		i++;
f010ffe6:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f010ffe9:	8b 45 08             	mov    0x8(%ebp),%eax
f010ffec:	8b 40 08             	mov    0x8(%eax),%eax
f010ffef:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010fff2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010fff6:	74 07                	je     f010ffff <check_list_data+0xa2>
f010fff8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fffb:	8b 00                	mov    (%eax),%eax
f010fffd:	eb 05                	jmp    f0110004 <check_list_data+0xa7>
f010ffff:	b8 00 00 00 00       	mov    $0x0,%eax
f0110004:	8b 55 08             	mov    0x8(%ebp),%edx
f0110007:	89 42 08             	mov    %eax,0x8(%edx)
f011000a:	8b 45 08             	mov    0x8(%ebp),%eax
f011000d:	8b 40 08             	mov    0x8(%eax),%eax
f0110010:	85 c0                	test   %eax,%eax
f0110012:	0f 85 6f ff ff ff    	jne    f010ff87 <check_list_data+0x2a>
f0110018:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011001c:	0f 85 65 ff ff ff    	jne    f010ff87 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0110022:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110027:	c9                   	leave  
f0110028:	c3                   	ret    

f0110029 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110029:	55                   	push   %ebp
f011002a:	89 e5                	mov    %esp,%ebp
f011002c:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f011002f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110036:	8b 45 08             	mov    0x8(%ebp),%eax
f0110039:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f011003f:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0110044:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110047:	eb 30                	jmp    f0110079 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110049:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011004c:	8b 40 08             	mov    0x8(%eax),%eax
f011004f:	85 c0                	test   %eax,%eax
f0110051:	75 0a                	jne    f011005d <check_avaliable_list_data+0x34>
f0110053:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110056:	8b 40 0c             	mov    0xc(%eax),%eax
f0110059:	85 c0                	test   %eax,%eax
f011005b:	74 07                	je     f0110064 <check_avaliable_list_data+0x3b>
		{
			return 0;
f011005d:	b8 00 00 00 00       	mov    $0x0,%eax
f0110062:	eb 40                	jmp    f01100a4 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0110064:	8b 45 08             	mov    0x8(%ebp),%eax
f0110067:	8b 00                	mov    (%eax),%eax
f0110069:	8d 50 01             	lea    0x1(%eax),%edx
f011006c:	8b 45 08             	mov    0x8(%ebp),%eax
f011006f:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110071:	a1 fc 84 6e f0       	mov    0xf06e84fc,%eax
f0110076:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110079:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011007d:	74 07                	je     f0110086 <check_avaliable_list_data+0x5d>
f011007f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110082:	8b 00                	mov    (%eax),%eax
f0110084:	eb 05                	jmp    f011008b <check_avaliable_list_data+0x62>
f0110086:	b8 00 00 00 00       	mov    $0x0,%eax
f011008b:	a3 fc 84 6e f0       	mov    %eax,0xf06e84fc
f0110090:	a1 fc 84 6e f0       	mov    0xf06e84fc,%eax
f0110095:	85 c0                	test   %eax,%eax
f0110097:	75 b0                	jne    f0110049 <check_avaliable_list_data+0x20>
f0110099:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011009d:	75 aa                	jne    f0110049 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f011009f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01100a4:	c9                   	leave  
f01100a5:	c3                   	ret    

f01100a6 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f01100a6:	55                   	push   %ebp
f01100a7:	89 e5                	mov    %esp,%ebp
f01100a9:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f01100ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f01100b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01100b6:	8b 00                	mov    (%eax),%eax
f01100b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01100bb:	eb 27                	jmp    f01100e4 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f01100bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01100c0:	8b 50 0c             	mov    0xc(%eax),%edx
f01100c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01100c6:	8b 40 08             	mov    0x8(%eax),%eax
f01100c9:	83 ec 04             	sub    $0x4,%esp
f01100cc:	52                   	push   %edx
f01100cd:	50                   	push   %eax
f01100ce:	68 d8 6f 13 f0       	push   $0xf0136fd8
f01100d3:	e8 55 0b ff ff       	call   f0100c2d <cprintf>
f01100d8:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01100db:	8b 45 08             	mov    0x8(%ebp),%eax
f01100de:	8b 40 08             	mov    0x8(%eax),%eax
f01100e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01100e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01100e8:	74 07                	je     f01100f1 <show_list_content+0x4b>
f01100ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01100ed:	8b 00                	mov    (%eax),%eax
f01100ef:	eb 05                	jmp    f01100f6 <show_list_content+0x50>
f01100f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01100f6:	8b 55 08             	mov    0x8(%ebp),%edx
f01100f9:	89 42 08             	mov    %eax,0x8(%edx)
f01100fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01100ff:	8b 40 08             	mov    0x8(%eax),%eax
f0110102:	85 c0                	test   %eax,%eax
f0110104:	75 b7                	jne    f01100bd <show_list_content+0x17>
f0110106:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011010a:	75 b1                	jne    f01100bd <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f011010c:	90                   	nop
f011010d:	c9                   	leave  
f011010e:	c3                   	ret    

f011010f <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f011010f:	55                   	push   %ebp
f0110110:	89 e5                	mov    %esp,%ebp
f0110112:	57                   	push   %edi
f0110113:	56                   	push   %esi
f0110114:	53                   	push   %ebx
f0110115:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f011011b:	83 ec 0c             	sub    $0xc,%esp
f011011e:	68 dc 7c 13 f0       	push   $0xf0137cdc
f0110123:	e8 05 0b ff ff       	call   f0100c2d <cprintf>
f0110128:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f011012b:	83 ec 0c             	sub    $0xc,%esp
f011012e:	68 00 7d 13 f0       	push   $0xf0137d00
f0110133:	e8 f5 0a ff ff       	call   f0100c2d <cprintf>
f0110138:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f011013b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0110142:	83 ec 0c             	sub    $0xc,%esp
f0110145:	68 1c 7d 13 f0       	push   $0xf0137d1c
f011014a:	e8 de 0a ff ff       	call   f0100c2d <cprintf>
f011014f:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0110152:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110155:	bb d6 7d 13 f0       	mov    $0xf0137dd6,%ebx
f011015a:	ba 03 00 00 00       	mov    $0x3,%edx
f011015f:	89 c7                	mov    %eax,%edi
f0110161:	89 de                	mov    %ebx,%esi
f0110163:	89 d1                	mov    %edx,%ecx
f0110165:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0110167:	8d 55 8c             	lea    -0x74(%ebp),%edx
f011016a:	b9 16 00 00 00       	mov    $0x16,%ecx
f011016f:	b8 00 00 00 00       	mov    $0x0,%eax
f0110174:	89 d7                	mov    %edx,%edi
f0110176:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0110178:	83 ec 0c             	sub    $0xc,%esp
f011017b:	8d 45 80             	lea    -0x80(%ebp),%eax
f011017e:	50                   	push   %eax
f011017f:	e8 0b 0b ff ff       	call   f0100c8f <execute_command>
f0110184:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110187:	83 ec 0c             	sub    $0xc,%esp
f011018a:	68 4a 7d 13 f0       	push   $0xf0137d4a
f011018f:	e8 99 0a ff ff       	call   f0100c2d <cprintf>
f0110194:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0110197:	83 ec 0c             	sub    $0xc,%esp
f011019a:	68 60 7d 13 f0       	push   $0xf0137d60
f011019f:	e8 89 0a ff ff       	call   f0100c2d <cprintf>
f01101a4:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f01101a7:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f01101ae:	65 00 00 
f01101b1:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f01101b7:	b9 18 00 00 00       	mov    $0x18,%ecx
f01101bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01101c1:	89 d7                	mov    %edx,%edi
f01101c3:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f01101c5:	83 ec 0c             	sub    $0xc,%esp
f01101c8:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01101ce:	50                   	push   %eax
f01101cf:	e8 bb 0a ff ff       	call   f0100c8f <execute_command>
f01101d4:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01101d7:	83 ec 0c             	sub    $0xc,%esp
f01101da:	68 4a 7d 13 f0       	push   $0xf0137d4a
f01101df:	e8 49 0a ff ff       	call   f0100c2d <cprintf>
f01101e4:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f01101e7:	83 ec 0c             	sub    $0xc,%esp
f01101ea:	68 88 7d 13 f0       	push   $0xf0137d88
f01101ef:	e8 39 0a ff ff       	call   f0100c2d <cprintf>
f01101f4:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f01101f7:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f01101fe:	75 00 00 
f0110201:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0110207:	b9 18 00 00 00       	mov    $0x18,%ecx
f011020c:	b8 00 00 00 00       	mov    $0x0,%eax
f0110211:	89 d7                	mov    %edx,%edi
f0110213:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0110215:	83 ec 0c             	sub    $0xc,%esp
f0110218:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f011021e:	50                   	push   %eax
f011021f:	e8 6b 0a ff ff       	call   f0100c8f <execute_command>
f0110224:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110227:	83 ec 0c             	sub    $0xc,%esp
f011022a:	68 4a 7d 13 f0       	push   $0xf0137d4a
f011022f:	e8 f9 09 ff ff       	call   f0100c2d <cprintf>
f0110234:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0110237:	83 ec 0c             	sub    $0xc,%esp
f011023a:	68 b0 7d 13 f0       	push   $0xf0137db0
f011023f:	e8 e9 09 ff ff       	call   f0100c2d <cprintf>
f0110244:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0110247:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f011024e:	6d 6d 00 
f0110251:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0110257:	b9 18 00 00 00       	mov    $0x18,%ecx
f011025c:	b8 00 00 00 00       	mov    $0x0,%eax
f0110261:	89 d7                	mov    %edx,%edi
f0110263:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0110265:	83 ec 0c             	sub    $0xc,%esp
f0110268:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f011026e:	50                   	push   %eax
f011026f:	e8 1b 0a ff ff       	call   f0100c8f <execute_command>
f0110274:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110277:	83 ec 0c             	sub    $0xc,%esp
f011027a:	68 4a 7d 13 f0       	push   $0xf0137d4a
f011027f:	e8 a9 09 ff ff       	call   f0100c2d <cprintf>
f0110284:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110287:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011028c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011028f:	5b                   	pop    %ebx
f0110290:	5e                   	pop    %esi
f0110291:	5f                   	pop    %edi
f0110292:	5d                   	pop    %ebp
f0110293:	c3                   	ret    

f0110294 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0110294:	55                   	push   %ebp
f0110295:	89 e5                	mov    %esp,%ebp
f0110297:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f011029a:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01102a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01102a8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01102af:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01102b4:	ff 75 ec             	pushl  -0x14(%ebp)
f01102b7:	ff 75 f0             	pushl  -0x10(%ebp)
f01102ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01102bd:	50                   	push   %eax
f01102be:	e8 8c 72 ff ff       	call   f010754f <pt_set_page_permissions>
f01102c3:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01102c6:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01102cb:	ff 75 ec             	pushl  -0x14(%ebp)
f01102ce:	ff 75 f0             	pushl  -0x10(%ebp)
f01102d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01102d4:	50                   	push   %eax
f01102d5:	e8 ca 50 00 00       	call   f01153a4 <CP>
f01102da:	83 c4 10             	add    $0x10,%esp
f01102dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01102e0:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01102e4:	74 14                	je     f01102fa <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01102e6:	83 ec 04             	sub    $0x4,%esp
f01102e9:	68 3c 7e 13 f0       	push   $0xf0137e3c
f01102ee:	6a 5a                	push   $0x5a
f01102f0:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01102f5:	e8 ac fe fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f01102fa:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0110301:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0110308:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011030f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110314:	ff 75 ec             	pushl  -0x14(%ebp)
f0110317:	ff 75 f0             	pushl  -0x10(%ebp)
f011031a:	ff 75 f4             	pushl  -0xc(%ebp)
f011031d:	50                   	push   %eax
f011031e:	e8 2c 72 ff ff       	call   f010754f <pt_set_page_permissions>
f0110323:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110326:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011032b:	ff 75 ec             	pushl  -0x14(%ebp)
f011032e:	ff 75 f0             	pushl  -0x10(%ebp)
f0110331:	ff 75 f4             	pushl  -0xc(%ebp)
f0110334:	50                   	push   %eax
f0110335:	e8 6a 50 00 00       	call   f01153a4 <CP>
f011033a:	83 c4 10             	add    $0x10,%esp
f011033d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110340:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110344:	74 14                	je     f011035a <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0110346:	83 ec 04             	sub    $0x4,%esp
f0110349:	68 7c 7e 13 f0       	push   $0xf0137e7c
f011034e:	6a 66                	push   $0x66
f0110350:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110355:	e8 4c fe fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f011035a:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0110361:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0110368:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011036f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110374:	ff 75 ec             	pushl  -0x14(%ebp)
f0110377:	ff 75 f0             	pushl  -0x10(%ebp)
f011037a:	ff 75 f4             	pushl  -0xc(%ebp)
f011037d:	50                   	push   %eax
f011037e:	e8 cc 71 ff ff       	call   f010754f <pt_set_page_permissions>
f0110383:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110386:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011038b:	ff 75 ec             	pushl  -0x14(%ebp)
f011038e:	ff 75 f0             	pushl  -0x10(%ebp)
f0110391:	ff 75 f4             	pushl  -0xc(%ebp)
f0110394:	50                   	push   %eax
f0110395:	e8 0a 50 00 00       	call   f01153a4 <CP>
f011039a:	83 c4 10             	add    $0x10,%esp
f011039d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01103a0:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01103a4:	74 14                	je     f01103ba <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f01103a6:	83 ec 04             	sub    $0x4,%esp
f01103a9:	68 a0 7e 13 f0       	push   $0xf0137ea0
f01103ae:	6a 71                	push   $0x71
f01103b0:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01103b5:	e8 ec fd fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f01103ba:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01103c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01103c8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01103cf:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01103d4:	ff 75 ec             	pushl  -0x14(%ebp)
f01103d7:	ff 75 f0             	pushl  -0x10(%ebp)
f01103da:	ff 75 f4             	pushl  -0xc(%ebp)
f01103dd:	50                   	push   %eax
f01103de:	e8 6c 71 ff ff       	call   f010754f <pt_set_page_permissions>
f01103e3:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01103e6:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01103eb:	ff 75 ec             	pushl  -0x14(%ebp)
f01103ee:	ff 75 f0             	pushl  -0x10(%ebp)
f01103f1:	ff 75 f4             	pushl  -0xc(%ebp)
f01103f4:	50                   	push   %eax
f01103f5:	e8 aa 4f 00 00       	call   f01153a4 <CP>
f01103fa:	83 c4 10             	add    $0x10,%esp
f01103fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110400:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110404:	74 14                	je     f011041a <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0110406:	83 ec 04             	sub    $0x4,%esp
f0110409:	68 c4 7e 13 f0       	push   $0xf0137ec4
f011040e:	6a 7d                	push   $0x7d
f0110410:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110415:	e8 8c fd fe ff       	call   f01001a6 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f011041a:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0110421:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0110428:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011042f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110434:	ff 75 ec             	pushl  -0x14(%ebp)
f0110437:	ff 75 f0             	pushl  -0x10(%ebp)
f011043a:	ff 75 f4             	pushl  -0xc(%ebp)
f011043d:	50                   	push   %eax
f011043e:	e8 0c 71 ff ff       	call   f010754f <pt_set_page_permissions>
f0110443:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110446:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011044b:	ff 75 ec             	pushl  -0x14(%ebp)
f011044e:	ff 75 f0             	pushl  -0x10(%ebp)
f0110451:	ff 75 f4             	pushl  -0xc(%ebp)
f0110454:	50                   	push   %eax
f0110455:	e8 4a 4f 00 00       	call   f01153a4 <CP>
f011045a:	83 c4 10             	add    $0x10,%esp
f011045d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110460:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110464:	74 17                	je     f011047d <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0110466:	83 ec 04             	sub    $0x4,%esp
f0110469:	68 e8 7e 13 f0       	push   $0xf0137ee8
f011046e:	68 89 00 00 00       	push   $0x89
f0110473:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110478:	e8 29 fd fe ff       	call   f01001a6 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f011047d:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0110484:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f011048b:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110492:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110497:	ff 75 ec             	pushl  -0x14(%ebp)
f011049a:	ff 75 f0             	pushl  -0x10(%ebp)
f011049d:	ff 75 f4             	pushl  -0xc(%ebp)
f01104a0:	50                   	push   %eax
f01104a1:	e8 a9 70 ff ff       	call   f010754f <pt_set_page_permissions>
f01104a6:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01104a9:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01104ae:	ff 75 ec             	pushl  -0x14(%ebp)
f01104b1:	ff 75 f0             	pushl  -0x10(%ebp)
f01104b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01104b7:	50                   	push   %eax
f01104b8:	e8 e7 4e 00 00       	call   f01153a4 <CP>
f01104bd:	83 c4 10             	add    $0x10,%esp
f01104c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01104c3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01104c7:	74 17                	je     f01104e0 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01104c9:	83 ec 04             	sub    $0x4,%esp
f01104cc:	68 0c 7f 13 f0       	push   $0xf0137f0c
f01104d1:	68 95 00 00 00       	push   $0x95
f01104d6:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01104db:	e8 c6 fc fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f01104e0:	83 ec 0c             	sub    $0xc,%esp
f01104e3:	68 38 7f 13 f0       	push   $0xf0137f38
f01104e8:	e8 40 07 ff ff       	call   f0100c2d <cprintf>
f01104ed:	83 c4 10             	add    $0x10,%esp
	return 0;
f01104f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01104f5:	c9                   	leave  
f01104f6:	c3                   	ret    

f01104f7 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f01104f7:	55                   	push   %ebp
f01104f8:	89 e5                	mov    %esp,%ebp
f01104fa:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f01104fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110504:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011050b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110512:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110517:	ff 75 ec             	pushl  -0x14(%ebp)
f011051a:	ff 75 f0             	pushl  -0x10(%ebp)
f011051d:	ff 75 f4             	pushl  -0xc(%ebp)
f0110520:	50                   	push   %eax
f0110521:	e8 29 70 ff ff       	call   f010754f <pt_set_page_permissions>
f0110526:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0110529:	83 ec 04             	sub    $0x4,%esp
f011052c:	68 88 7f 13 f0       	push   $0xf0137f88
f0110531:	68 a2 00 00 00       	push   $0xa2
f0110536:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011053b:	e8 66 fc fe ff       	call   f01001a6 <_panic>

f0110540 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0110540:	55                   	push   %ebp
f0110541:	89 e5                	mov    %esp,%ebp
f0110543:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0110546:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f011054d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110552:	83 ec 08             	sub    $0x8,%esp
f0110555:	ff 75 f4             	pushl  -0xc(%ebp)
f0110558:	50                   	push   %eax
f0110559:	e8 a5 70 ff ff       	call   f0107603 <pt_get_page_permissions>
f011055e:	83 c4 10             	add    $0x10,%esp
f0110561:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0110564:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0110568:	74 17                	je     f0110581 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f011056a:	83 ec 04             	sub    $0x4,%esp
f011056d:	68 24 80 13 f0       	push   $0xf0138024
f0110572:	68 b0 00 00 00       	push   $0xb0
f0110577:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011057c:	e8 25 fc fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0110581:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110588:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011058d:	83 ec 08             	sub    $0x8,%esp
f0110590:	ff 75 f4             	pushl  -0xc(%ebp)
f0110593:	50                   	push   %eax
f0110594:	e8 6a 70 ff ff       	call   f0107603 <pt_get_page_permissions>
f0110599:	83 c4 10             	add    $0x10,%esp
f011059c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f011059f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01105a3:	74 17                	je     f01105bc <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01105a5:	83 ec 04             	sub    $0x4,%esp
f01105a8:	68 48 80 13 f0       	push   $0xf0138048
f01105ad:	68 b8 00 00 00       	push   $0xb8
f01105b2:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01105b7:	e8 ea fb fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01105bc:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01105c3:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01105c8:	83 ec 08             	sub    $0x8,%esp
f01105cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01105ce:	50                   	push   %eax
f01105cf:	e8 2f 70 ff ff       	call   f0107603 <pt_get_page_permissions>
f01105d4:	83 c4 10             	add    $0x10,%esp
f01105d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01105da:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01105de:	74 17                	je     f01105f7 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01105e0:	83 ec 04             	sub    $0x4,%esp
f01105e3:	68 6c 80 13 f0       	push   $0xf013806c
f01105e8:	68 c0 00 00 00       	push   $0xc0
f01105ed:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01105f2:	e8 af fb fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF1000000;
f01105f7:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01105fe:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110603:	83 ec 08             	sub    $0x8,%esp
f0110606:	ff 75 f4             	pushl  -0xc(%ebp)
f0110609:	50                   	push   %eax
f011060a:	e8 f4 6f ff ff       	call   f0107603 <pt_get_page_permissions>
f011060f:	83 c4 10             	add    $0x10,%esp
f0110612:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110615:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110619:	74 17                	je     f0110632 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f011061b:	83 ec 04             	sub    $0x4,%esp
f011061e:	68 90 80 13 f0       	push   $0xf0138090
f0110623:	68 c7 00 00 00       	push   $0xc7
f0110628:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011062d:	e8 74 fb fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f0110632:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110639:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011063e:	83 ec 08             	sub    $0x8,%esp
f0110641:	ff 75 f4             	pushl  -0xc(%ebp)
f0110644:	50                   	push   %eax
f0110645:	e8 b9 6f ff ff       	call   f0107603 <pt_get_page_permissions>
f011064a:	83 c4 10             	add    $0x10,%esp
f011064d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0110650:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0110654:	74 17                	je     f011066d <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0110656:	83 ec 04             	sub    $0x4,%esp
f0110659:	68 b4 80 13 f0       	push   $0xf01380b4
f011065e:	68 ce 00 00 00       	push   $0xce
f0110663:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110668:	e8 39 fb fe ff       	call   f01001a6 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f011066d:	83 ec 0c             	sub    $0xc,%esp
f0110670:	68 d8 80 13 f0       	push   $0xf01380d8
f0110675:	e8 b3 05 ff ff       	call   f0100c2d <cprintf>
f011067a:	83 c4 10             	add    $0x10,%esp
	return 0;
f011067d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110682:	c9                   	leave  
f0110683:	c3                   	ret    

f0110684 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0110684:	55                   	push   %ebp
f0110685:	89 e5                	mov    %esp,%ebp
f0110687:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f011068a:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110691:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110696:	83 ec 08             	sub    $0x8,%esp
f0110699:	ff 75 f4             	pushl  -0xc(%ebp)
f011069c:	50                   	push   %eax
f011069d:	e8 bc 6f ff ff       	call   f010765e <pt_clear_page_table_entry>
f01106a2:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f01106a5:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01106aa:	83 ec 08             	sub    $0x8,%esp
f01106ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01106b0:	50                   	push   %eax
f01106b1:	e8 4a 4c 00 00       	call   f0115300 <CE>
f01106b6:	83 c4 10             	add    $0x10,%esp
f01106b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01106bc:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01106c0:	74 17                	je     f01106d9 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01106c2:	83 ec 04             	sub    $0x4,%esp
f01106c5:	68 20 81 13 f0       	push   $0xf0138120
f01106ca:	68 de 00 00 00       	push   $0xde
f01106cf:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01106d4:	e8 cd fa fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f01106d9:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01106e0:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01106e5:	83 ec 08             	sub    $0x8,%esp
f01106e8:	ff 75 f4             	pushl  -0xc(%ebp)
f01106eb:	50                   	push   %eax
f01106ec:	e8 6d 6f ff ff       	call   f010765e <pt_clear_page_table_entry>
f01106f1:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01106f4:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01106f9:	83 ec 08             	sub    $0x8,%esp
f01106fc:	ff 75 f4             	pushl  -0xc(%ebp)
f01106ff:	50                   	push   %eax
f0110700:	e8 fb 4b 00 00       	call   f0115300 <CE>
f0110705:	83 c4 10             	add    $0x10,%esp
f0110708:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011070b:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011070f:	74 17                	je     f0110728 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0110711:	83 ec 04             	sub    $0x4,%esp
f0110714:	68 4c 81 13 f0       	push   $0xf013814c
f0110719:	68 e6 00 00 00       	push   $0xe6
f011071e:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110723:	e8 7e fa fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110728:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011072f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110734:	83 ec 08             	sub    $0x8,%esp
f0110737:	ff 75 f4             	pushl  -0xc(%ebp)
f011073a:	50                   	push   %eax
f011073b:	e8 1e 6f ff ff       	call   f010765e <pt_clear_page_table_entry>
f0110740:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110743:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110748:	83 ec 08             	sub    $0x8,%esp
f011074b:	ff 75 f4             	pushl  -0xc(%ebp)
f011074e:	50                   	push   %eax
f011074f:	e8 ac 4b 00 00       	call   f0115300 <CE>
f0110754:	83 c4 10             	add    $0x10,%esp
f0110757:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011075a:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011075e:	74 17                	je     f0110777 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0110760:	83 ec 04             	sub    $0x4,%esp
f0110763:	68 78 81 13 f0       	push   $0xf0138178
f0110768:	68 ee 00 00 00       	push   $0xee
f011076d:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110772:	e8 2f fa fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0000000;
f0110777:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011077e:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110783:	83 ec 08             	sub    $0x8,%esp
f0110786:	ff 75 f4             	pushl  -0xc(%ebp)
f0110789:	50                   	push   %eax
f011078a:	e8 cf 6e ff ff       	call   f010765e <pt_clear_page_table_entry>
f011078f:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110792:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110797:	83 ec 08             	sub    $0x8,%esp
f011079a:	ff 75 f4             	pushl  -0xc(%ebp)
f011079d:	50                   	push   %eax
f011079e:	e8 5d 4b 00 00       	call   f0115300 <CE>
f01107a3:	83 c4 10             	add    $0x10,%esp
f01107a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01107a9:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01107ad:	74 17                	je     f01107c6 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f01107af:	83 ec 04             	sub    $0x4,%esp
f01107b2:	68 a4 81 13 f0       	push   $0xf01381a4
f01107b7:	68 f6 00 00 00       	push   $0xf6
f01107bc:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01107c1:	e8 e0 f9 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01107c6:	83 ec 0c             	sub    $0xc,%esp
f01107c9:	68 d0 81 13 f0       	push   $0xf01381d0
f01107ce:	e8 5a 04 ff ff       	call   f0100c2d <cprintf>
f01107d3:	83 c4 10             	add    $0x10,%esp
	return 0;
f01107d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01107db:	c9                   	leave  
f01107dc:	c3                   	ret    

f01107dd <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01107dd:	55                   	push   %ebp
f01107de:	89 e5                	mov    %esp,%ebp
f01107e0:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01107e3:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01107ea:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01107ef:	83 ec 08             	sub    $0x8,%esp
f01107f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01107f5:	50                   	push   %eax
f01107f6:	e8 63 6e ff ff       	call   f010765e <pt_clear_page_table_entry>
f01107fb:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f01107fe:	83 ec 04             	sub    $0x4,%esp
f0110801:	68 1c 82 13 f0       	push   $0xf013821c
f0110806:	68 01 01 00 00       	push   $0x101
f011080b:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110810:	e8 91 f9 fe ff       	call   f01001a6 <_panic>

f0110815 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0110815:	55                   	push   %ebp
f0110816:	89 e5                	mov    %esp,%ebp
f0110818:	57                   	push   %edi
f0110819:	56                   	push   %esi
f011081a:	53                   	push   %ebx
f011081b:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0110821:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0110828:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f011082f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110834:	83 ec 0c             	sub    $0xc,%esp
f0110837:	50                   	push   %eax
f0110838:	e8 c4 4c 00 00       	call   f0115501 <ClearUserSpace>
f011083d:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0110840:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0110847:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011084c:	83 ec 08             	sub    $0x8,%esp
f011084f:	ff 75 dc             	pushl  -0x24(%ebp)
f0110852:	50                   	push   %eax
f0110853:	e8 72 6e ff ff       	call   f01076ca <virtual_to_physical>
f0110858:	83 c4 10             	add    $0x10,%esp
f011085b:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f011085e:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0110862:	74 17                	je     f011087b <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0110864:	83 ec 04             	sub    $0x4,%esp
f0110867:	68 b4 82 13 f0       	push   $0xf01382b4
f011086c:	68 16 01 00 00       	push   $0x116
f0110871:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110876:	e8 2b f9 fe ff       	call   f01001a6 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f011087b:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110882:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110887:	83 ec 08             	sub    $0x8,%esp
f011088a:	ff 75 dc             	pushl  -0x24(%ebp)
f011088d:	50                   	push   %eax
f011088e:	e8 37 6e ff ff       	call   f01076ca <virtual_to_physical>
f0110893:	83 c4 10             	add    $0x10,%esp
f0110896:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110899:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011089e:	83 ec 08             	sub    $0x8,%esp
f01108a1:	ff 75 dc             	pushl  -0x24(%ebp)
f01108a4:	50                   	push   %eax
f01108a5:	e8 bd 49 00 00       	call   f0115267 <CA>
f01108aa:	83 c4 10             	add    $0x10,%esp
f01108ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01108b0:	74 17                	je     f01108c9 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f01108b2:	83 ec 04             	sub    $0x4,%esp
f01108b5:	68 ec 82 13 f0       	push   $0xf01382ec
f01108ba:	68 1f 01 00 00       	push   $0x11f
f01108bf:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01108c4:	e8 dd f8 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f01108c9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01108cf:	bb b8 84 13 f0       	mov    $0xf01384b8,%ebx
f01108d4:	ba 0d 00 00 00       	mov    $0xd,%edx
f01108d9:	89 c7                	mov    %eax,%edi
f01108db:	89 de                	mov    %ebx,%esi
f01108dd:	89 d1                	mov    %edx,%ecx
f01108df:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01108e1:	8d 55 81             	lea    -0x7f(%ebp),%edx
f01108e4:	b9 57 00 00 00       	mov    $0x57,%ecx
f01108e9:	b0 00                	mov    $0x0,%al
f01108eb:	89 d7                	mov    %edx,%edi
f01108ed:	f3 aa                	rep stos %al,%es:(%edi)
f01108ef:	83 ec 0c             	sub    $0xc,%esp
f01108f2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01108f8:	50                   	push   %eax
f01108f9:	e8 91 03 ff ff       	call   f0100c8f <execute_command>
f01108fe:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0110901:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110908:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011090d:	83 ec 08             	sub    $0x8,%esp
f0110910:	ff 75 dc             	pushl  -0x24(%ebp)
f0110913:	50                   	push   %eax
f0110914:	e8 b1 6d ff ff       	call   f01076ca <virtual_to_physical>
f0110919:	83 c4 10             	add    $0x10,%esp
f011091c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011091f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110924:	83 ec 08             	sub    $0x8,%esp
f0110927:	ff 75 dc             	pushl  -0x24(%ebp)
f011092a:	50                   	push   %eax
f011092b:	e8 37 49 00 00       	call   f0115267 <CA>
f0110930:	83 c4 10             	add    $0x10,%esp
f0110933:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110936:	74 17                	je     f011094f <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0110938:	83 ec 04             	sub    $0x4,%esp
f011093b:	68 24 83 13 f0       	push   $0xf0138324
f0110940:	68 28 01 00 00       	push   $0x128
f0110945:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011094a:	e8 57 f8 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f011094f:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110955:	bb 1c 85 13 f0       	mov    $0xf013851c,%ebx
f011095a:	ba 0d 00 00 00       	mov    $0xd,%edx
f011095f:	89 c7                	mov    %eax,%edi
f0110961:	89 de                	mov    %ebx,%esi
f0110963:	89 d1                	mov    %edx,%ecx
f0110965:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110967:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f011096d:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110972:	b0 00                	mov    $0x0,%al
f0110974:	89 d7                	mov    %edx,%edi
f0110976:	f3 aa                	rep stos %al,%es:(%edi)
f0110978:	83 ec 0c             	sub    $0xc,%esp
f011097b:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110981:	50                   	push   %eax
f0110982:	e8 08 03 ff ff       	call   f0100c8f <execute_command>
f0110987:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f011098a:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110991:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110996:	83 ec 08             	sub    $0x8,%esp
f0110999:	ff 75 dc             	pushl  -0x24(%ebp)
f011099c:	50                   	push   %eax
f011099d:	e8 28 6d ff ff       	call   f01076ca <virtual_to_physical>
f01109a2:	83 c4 10             	add    $0x10,%esp
f01109a5:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01109a8:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01109ad:	83 ec 08             	sub    $0x8,%esp
f01109b0:	ff 75 dc             	pushl  -0x24(%ebp)
f01109b3:	50                   	push   %eax
f01109b4:	e8 ae 48 00 00       	call   f0115267 <CA>
f01109b9:	83 c4 10             	add    $0x10,%esp
f01109bc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01109bf:	74 17                	je     f01109d8 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01109c1:	83 ec 04             	sub    $0x4,%esp
f01109c4:	68 5c 83 13 f0       	push   $0xf013835c
f01109c9:	68 31 01 00 00       	push   $0x131
f01109ce:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01109d3:	e8 ce f7 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01109d8:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01109de:	bb 80 85 13 f0       	mov    $0xf0138580,%ebx
f01109e3:	ba 0d 00 00 00       	mov    $0xd,%edx
f01109e8:	89 c7                	mov    %eax,%edi
f01109ea:	89 de                	mov    %ebx,%esi
f01109ec:	89 d1                	mov    %edx,%ecx
f01109ee:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01109f0:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f01109f6:	b9 57 00 00 00       	mov    $0x57,%ecx
f01109fb:	b0 00                	mov    $0x0,%al
f01109fd:	89 d7                	mov    %edx,%edi
f01109ff:	f3 aa                	rep stos %al,%es:(%edi)
f0110a01:	83 ec 0c             	sub    $0xc,%esp
f0110a04:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0110a0a:	50                   	push   %eax
f0110a0b:	e8 7f 02 ff ff       	call   f0100c8f <execute_command>
f0110a10:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0110a13:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110a1a:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110a1f:	83 ec 08             	sub    $0x8,%esp
f0110a22:	ff 75 dc             	pushl  -0x24(%ebp)
f0110a25:	50                   	push   %eax
f0110a26:	e8 9f 6c ff ff       	call   f01076ca <virtual_to_physical>
f0110a2b:	83 c4 10             	add    $0x10,%esp
f0110a2e:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110a31:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110a36:	83 ec 08             	sub    $0x8,%esp
f0110a39:	ff 75 dc             	pushl  -0x24(%ebp)
f0110a3c:	50                   	push   %eax
f0110a3d:	e8 25 48 00 00       	call   f0115267 <CA>
f0110a42:	83 c4 10             	add    $0x10,%esp
f0110a45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110a48:	74 17                	je     f0110a61 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0110a4a:	83 ec 04             	sub    $0x4,%esp
f0110a4d:	68 94 83 13 f0       	push   $0xf0138394
f0110a52:	68 3a 01 00 00       	push   $0x13a
f0110a57:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110a5c:	e8 45 f7 fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001000;
f0110a61:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110a68:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110a6d:	83 ec 08             	sub    $0x8,%esp
f0110a70:	ff 75 dc             	pushl  -0x24(%ebp)
f0110a73:	50                   	push   %eax
f0110a74:	e8 51 6c ff ff       	call   f01076ca <virtual_to_physical>
f0110a79:	83 c4 10             	add    $0x10,%esp
f0110a7c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110a7f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110a84:	83 ec 08             	sub    $0x8,%esp
f0110a87:	ff 75 dc             	pushl  -0x24(%ebp)
f0110a8a:	50                   	push   %eax
f0110a8b:	e8 d7 47 00 00       	call   f0115267 <CA>
f0110a90:	83 c4 10             	add    $0x10,%esp
f0110a93:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110a96:	74 17                	je     f0110aaf <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0110a98:	83 ec 04             	sub    $0x4,%esp
f0110a9b:	68 cc 83 13 f0       	push   $0xf01383cc
f0110aa0:	68 42 01 00 00       	push   $0x142
f0110aa5:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110aaa:	e8 f7 f6 fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001005;
f0110aaf:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110ab6:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110abb:	83 ec 08             	sub    $0x8,%esp
f0110abe:	ff 75 dc             	pushl  -0x24(%ebp)
f0110ac1:	50                   	push   %eax
f0110ac2:	e8 03 6c ff ff       	call   f01076ca <virtual_to_physical>
f0110ac7:	83 c4 10             	add    $0x10,%esp
f0110aca:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110acd:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110ad2:	83 ec 08             	sub    $0x8,%esp
f0110ad5:	ff 75 dc             	pushl  -0x24(%ebp)
f0110ad8:	50                   	push   %eax
f0110ad9:	e8 89 47 00 00       	call   f0115267 <CA>
f0110ade:	83 c4 10             	add    $0x10,%esp
f0110ae1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110ae4:	74 17                	je     f0110afd <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0110ae6:	83 ec 04             	sub    $0x4,%esp
f0110ae9:	68 04 84 13 f0       	push   $0xf0138404
f0110aee:	68 4a 01 00 00       	push   $0x14a
f0110af3:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110af8:	e8 a9 f6 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0110afd:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0110b03:	bb e4 85 13 f0       	mov    $0xf01385e4,%ebx
f0110b08:	ba 0e 00 00 00       	mov    $0xe,%edx
f0110b0d:	89 c7                	mov    %eax,%edi
f0110b0f:	89 de                	mov    %ebx,%esi
f0110b11:	89 d1                	mov    %edx,%ecx
f0110b13:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110b15:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0110b1b:	b9 56 00 00 00       	mov    $0x56,%ecx
f0110b20:	b0 00                	mov    $0x0,%al
f0110b22:	89 d7                	mov    %edx,%edi
f0110b24:	f3 aa                	rep stos %al,%es:(%edi)
f0110b26:	83 ec 0c             	sub    $0xc,%esp
f0110b29:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0110b2f:	50                   	push   %eax
f0110b30:	e8 5a 01 ff ff       	call   f0100c8f <execute_command>
f0110b35:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0110b38:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110b3f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110b44:	83 ec 08             	sub    $0x8,%esp
f0110b47:	ff 75 dc             	pushl  -0x24(%ebp)
f0110b4a:	50                   	push   %eax
f0110b4b:	e8 7a 6b ff ff       	call   f01076ca <virtual_to_physical>
f0110b50:	83 c4 10             	add    $0x10,%esp
f0110b53:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110b56:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110b5b:	83 ec 08             	sub    $0x8,%esp
f0110b5e:	ff 75 dc             	pushl  -0x24(%ebp)
f0110b61:	50                   	push   %eax
f0110b62:	e8 00 47 00 00       	call   f0115267 <CA>
f0110b67:	83 c4 10             	add    $0x10,%esp
f0110b6a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110b6d:	74 17                	je     f0110b86 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0110b6f:	83 ec 04             	sub    $0x4,%esp
f0110b72:	68 3c 84 13 f0       	push   $0xf013843c
f0110b77:	68 53 01 00 00       	push   $0x153
f0110b7c:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110b81:	e8 20 f6 fe ff       	call   f01001a6 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0110b86:	83 ec 0c             	sub    $0xc,%esp
f0110b89:	68 74 84 13 f0       	push   $0xf0138474
f0110b8e:	e8 9a 00 ff ff       	call   f0100c2d <cprintf>
f0110b93:	83 c4 10             	add    $0x10,%esp

	return 0;
f0110b96:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110b9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110b9e:	5b                   	pop    %ebx
f0110b9f:	5e                   	pop    %esi
f0110ba0:	5f                   	pop    %edi
f0110ba1:	5d                   	pop    %ebp
f0110ba2:	c3                   	ret    

f0110ba3 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0110ba3:	55                   	push   %ebp
f0110ba4:	89 e5                	mov    %esp,%ebp
f0110ba6:	57                   	push   %edi
f0110ba7:	56                   	push   %esi
f0110ba8:	53                   	push   %ebx
f0110ba9:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0110baf:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0110bb5:	bb f8 88 13 f0       	mov    $0xf01388f8,%ebx
f0110bba:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110bbf:	89 c7                	mov    %eax,%edi
f0110bc1:	89 de                	mov    %ebx,%esi
f0110bc3:	89 d1                	mov    %edx,%ecx
f0110bc5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110bc7:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0110bcd:	b9 23 00 00 00       	mov    $0x23,%ecx
f0110bd2:	b0 00                	mov    $0x0,%al
f0110bd4:	89 d7                	mov    %edx,%edi
f0110bd6:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0110bd8:	6a 00                	push   $0x0
f0110bda:	6a 0a                	push   $0xa
f0110bdc:	6a 14                	push   $0x14
f0110bde:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0110be4:	50                   	push   %eax
f0110be5:	e8 7c 77 ff ff       	call   f0108366 <env_create>
f0110bea:	83 c4 10             	add    $0x10,%esp
f0110bed:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0110bf0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110bf3:	8b 40 5c             	mov    0x5c(%eax),%eax
f0110bf6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0110bf9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110bfc:	8b 40 60             	mov    0x60(%eax),%eax
f0110bff:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0110c02:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110c05:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0110c08:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0110c0f:	75 70 20 
f0110c12:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0110c19:	00 00 00 
f0110c1c:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0110c22:	b9 03 00 00 00       	mov    $0x3,%ecx
f0110c27:	b8 00 00 00 00       	mov    $0x0,%eax
f0110c2c:	89 d7                	mov    %edx,%edi
f0110c2e:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0110c30:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110c33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0110c36:	83 ec 08             	sub    $0x8,%esp
f0110c39:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0110c3f:	52                   	push   %edx
f0110c40:	50                   	push   %eax
f0110c41:	e8 7f fc 01 00       	call   f01308c5 <ltostr>
f0110c46:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0110c49:	83 ec 04             	sub    $0x4,%esp
f0110c4c:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110c52:	50                   	push   %eax
f0110c53:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0110c59:	50                   	push   %eax
f0110c5a:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0110c60:	50                   	push   %eax
f0110c61:	e8 57 fd 01 00       	call   f01309bd <strcconcat>
f0110c66:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0110c69:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0110c70:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0110c77:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0110c7e:	83 ec 0c             	sub    $0xc,%esp
f0110c81:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110c84:	e8 78 48 00 00       	call   f0115501 <ClearUserSpace>
f0110c89:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0110c8c:	83 ec 04             	sub    $0x4,%esp
f0110c8f:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0110c95:	50                   	push   %eax
f0110c96:	68 48 86 13 f0       	push   $0xf0138648
f0110c9b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110ca1:	50                   	push   %eax
f0110ca2:	e8 16 fd 01 00       	call   f01309bd <strcconcat>
f0110ca7:	83 c4 10             	add    $0x10,%esp
f0110caa:	83 ec 0c             	sub    $0xc,%esp
f0110cad:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0110cb3:	50                   	push   %eax
f0110cb4:	e8 d6 ff fe ff       	call   f0100c8f <execute_command>
f0110cb9:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0110cbc:	83 ec 04             	sub    $0x4,%esp
f0110cbf:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0110cc5:	50                   	push   %eax
f0110cc6:	68 53 86 13 f0       	push   $0xf0138653
f0110ccb:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110cd1:	50                   	push   %eax
f0110cd2:	e8 e6 fc 01 00       	call   f01309bd <strcconcat>
f0110cd7:	83 c4 10             	add    $0x10,%esp
f0110cda:	83 ec 0c             	sub    $0xc,%esp
f0110cdd:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0110ce3:	50                   	push   %eax
f0110ce4:	e8 a6 ff fe ff       	call   f0100c8f <execute_command>
f0110ce9:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0110cec:	83 ec 04             	sub    $0x4,%esp
f0110cef:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0110cf5:	50                   	push   %eax
f0110cf6:	68 5e 86 13 f0       	push   $0xf013865e
f0110cfb:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110d01:	50                   	push   %eax
f0110d02:	e8 b6 fc 01 00       	call   f01309bd <strcconcat>
f0110d07:	83 c4 10             	add    $0x10,%esp
f0110d0a:	83 ec 0c             	sub    $0xc,%esp
f0110d0d:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0110d13:	50                   	push   %eax
f0110d14:	e8 76 ff fe ff       	call   f0100c8f <execute_command>
f0110d19:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0110d1c:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0110d23:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d26:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0110d29:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0110d30:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d33:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0110d36:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0110d3d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d40:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0110d43:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d46:	83 ec 08             	sub    $0x8,%esp
f0110d49:	50                   	push   %eax
f0110d4a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d4d:	e8 16 47 00 00       	call   f0115468 <GP>
f0110d52:	83 c4 10             	add    $0x10,%esp
f0110d55:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0110d58:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0110d5f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0110d66:	e8 47 b3 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0110d6b:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0110d6e:	83 ec 0c             	sub    $0xc,%esp
f0110d71:	68 6c 86 13 f0       	push   $0xf013866c
f0110d76:	e8 b2 fe fe ff       	call   f0100c2d <cprintf>
f0110d7b:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0110d7e:	6a 03                	push   $0x3
f0110d80:	68 00 00 90 02       	push   $0x2900000
f0110d85:	68 00 00 80 02       	push   $0x2800000
f0110d8a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d8d:	e8 73 73 ff ff       	call   f0108105 <cut_paste_pages>
f0110d92:	83 c4 10             	add    $0x10,%esp
f0110d95:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0110d98:	e8 15 b3 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0110d9d:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0110da0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0110da7:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0110dab:	75 08                	jne    f0110db5 <test_cut_paste_pages+0x212>
f0110dad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110db0:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110db3:	74 2b                	je     f0110de0 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110db5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110db8:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110dbb:	83 ec 0c             	sub    $0xc,%esp
f0110dbe:	50                   	push   %eax
f0110dbf:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110dc2:	68 9c 86 13 f0       	push   $0xf013869c
f0110dc7:	68 91 01 00 00       	push   $0x191
f0110dcc:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110dd1:	e8 5c f5 fe ff       	call   f0100332 <_warn>
f0110dd6:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110dd9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0110de0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110de4:	74 04                	je     f0110dea <test_cut_paste_pages+0x247>
f0110de6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0110dea:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0110df1:	83 ec 08             	sub    $0x8,%esp
f0110df4:	6a 00                	push   $0x0
f0110df6:	6a 01                	push   $0x1
f0110df8:	6a 00                	push   $0x0
f0110dfa:	68 ff 0f 00 00       	push   $0xfff
f0110dff:	ff 75 bc             	pushl  -0x44(%ebp)
f0110e02:	6a 01                	push   $0x1
f0110e04:	68 00 30 00 00       	push   $0x3000
f0110e09:	68 00 00 90 02       	push   $0x2900000
f0110e0e:	68 00 00 80 02       	push   $0x2800000
f0110e13:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e16:	e8 1a 47 00 00       	call   f0115535 <CCP>
f0110e1b:	83 c4 30             	add    $0x30,%esp
f0110e1e:	83 f8 01             	cmp    $0x1,%eax
f0110e21:	74 21                	je     f0110e44 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0110e23:	83 ec 04             	sub    $0x4,%esp
f0110e26:	68 f0 86 13 f0       	push   $0xf01386f0
f0110e2b:	68 99 01 00 00       	push   $0x199
f0110e30:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110e35:	e8 f8 f4 fe ff       	call   f0100332 <_warn>
f0110e3a:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0110e3d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0110e44:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110e48:	74 04                	je     f0110e4e <test_cut_paste_pages+0x2ab>
f0110e4a:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0110e4e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0110e55:	83 ec 04             	sub    $0x4,%esp
f0110e58:	6a 00                	push   $0x0
f0110e5a:	68 00 00 90 02       	push   $0x2900000
f0110e5f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e62:	e8 5f 41 00 00       	call   f0114fc6 <CB>
f0110e67:	83 c4 10             	add    $0x10,%esp
f0110e6a:	85 c0                	test   %eax,%eax
f0110e6c:	0f 84 f6 00 00 00    	je     f0110f68 <test_cut_paste_pages+0x3c5>
f0110e72:	83 ec 04             	sub    $0x4,%esp
f0110e75:	6a 00                	push   $0x0
f0110e77:	68 00 10 90 02       	push   $0x2901000
f0110e7c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e7f:	e8 42 41 00 00       	call   f0114fc6 <CB>
f0110e84:	83 c4 10             	add    $0x10,%esp
f0110e87:	85 c0                	test   %eax,%eax
f0110e89:	0f 84 d9 00 00 00    	je     f0110f68 <test_cut_paste_pages+0x3c5>
f0110e8f:	83 ec 04             	sub    $0x4,%esp
f0110e92:	6a 00                	push   $0x0
f0110e94:	68 00 20 90 02       	push   $0x2902000
f0110e99:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e9c:	e8 25 41 00 00       	call   f0114fc6 <CB>
f0110ea1:	83 c4 10             	add    $0x10,%esp
f0110ea4:	85 c0                	test   %eax,%eax
f0110ea6:	0f 84 bc 00 00 00    	je     f0110f68 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0110eac:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0110eb3:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0110eba:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0110ec1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ec4:	8a 00                	mov    (%eax),%al
f0110ec6:	3c 61                	cmp    $0x61,%al
f0110ec8:	75 12                	jne    f0110edc <test_cut_paste_pages+0x339>
f0110eca:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110ecd:	8a 00                	mov    (%eax),%al
f0110ecf:	3c 62                	cmp    $0x62,%al
f0110ed1:	75 09                	jne    f0110edc <test_cut_paste_pages+0x339>
f0110ed3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110ed6:	8a 00                	mov    (%eax),%al
f0110ed8:	3c 63                	cmp    $0x63,%al
f0110eda:	74 21                	je     f0110efd <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110edc:	83 ec 04             	sub    $0x4,%esp
f0110edf:	68 3c 87 13 f0       	push   $0xf013873c
f0110ee4:	68 a6 01 00 00       	push   $0x1a6
f0110ee9:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110eee:	e8 3f f4 fe ff       	call   f0100332 <_warn>
f0110ef3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0110ef6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0110efd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110f01:	74 04                	je     f0110f07 <test_cut_paste_pages+0x364>
f0110f03:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0110f07:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0110f0e:	83 ec 04             	sub    $0x4,%esp
f0110f11:	6a 01                	push   $0x1
f0110f13:	68 00 10 90 02       	push   $0x2901000
f0110f18:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f1b:	e8 a6 40 00 00       	call   f0114fc6 <CB>
f0110f20:	83 c4 10             	add    $0x10,%esp
f0110f23:	85 c0                	test   %eax,%eax
f0110f25:	74 41                	je     f0110f68 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0110f27:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110f2a:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0110f2d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110f30:	8a 00                	mov    (%eax),%al
f0110f32:	3c 79                	cmp    $0x79,%al
f0110f34:	74 21                	je     f0110f57 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110f36:	83 ec 04             	sub    $0x4,%esp
f0110f39:	68 3c 87 13 f0       	push   $0xf013873c
f0110f3e:	68 b1 01 00 00       	push   $0x1b1
f0110f43:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110f48:	e8 e5 f3 fe ff       	call   f0100332 <_warn>
f0110f4d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0110f50:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0110f57:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110f5b:	74 04                	je     f0110f61 <test_cut_paste_pages+0x3be>
f0110f5d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0110f61:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0110f68:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110f6b:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0110f6e:	6a 02                	push   $0x2
f0110f70:	68 00 f0 bf 02       	push   $0x2bff000
f0110f75:	68 00 10 90 02       	push   $0x2901000
f0110f7a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f7d:	e8 83 71 ff ff       	call   f0108105 <cut_paste_pages>
f0110f82:	83 c4 10             	add    $0x10,%esp
f0110f85:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0110f88:	e8 25 b1 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0110f8d:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0110f90:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0110f94:	75 0b                	jne    f0110fa1 <test_cut_paste_pages+0x3fe>
f0110f96:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110f99:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110f9c:	83 f8 01             	cmp    $0x1,%eax
f0110f9f:	74 2b                	je     f0110fcc <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110fa1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110fa4:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110fa7:	83 ec 0c             	sub    $0xc,%esp
f0110faa:	50                   	push   %eax
f0110fab:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110fae:	68 9c 86 13 f0       	push   $0xf013869c
f0110fb3:	68 c2 01 00 00       	push   $0x1c2
f0110fb8:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0110fbd:	e8 70 f3 fe ff       	call   f0100332 <_warn>
f0110fc2:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110fc5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0110fcc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110fd0:	74 04                	je     f0110fd6 <test_cut_paste_pages+0x433>
f0110fd2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110fd6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0110fdd:	83 ec 08             	sub    $0x8,%esp
f0110fe0:	6a 00                	push   $0x0
f0110fe2:	6a 01                	push   $0x1
f0110fe4:	6a 00                	push   $0x0
f0110fe6:	68 ff 0f 00 00       	push   $0xfff
f0110feb:	ff 75 bc             	pushl  -0x44(%ebp)
f0110fee:	6a 01                	push   $0x1
f0110ff0:	68 00 20 00 00       	push   $0x2000
f0110ff5:	68 00 f0 bf 02       	push   $0x2bff000
f0110ffa:	68 00 10 90 02       	push   $0x2901000
f0110fff:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111002:	e8 2e 45 00 00       	call   f0115535 <CCP>
f0111007:	83 c4 30             	add    $0x30,%esp
f011100a:	83 f8 01             	cmp    $0x1,%eax
f011100d:	74 21                	je     f0111030 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011100f:	83 ec 04             	sub    $0x4,%esp
f0111012:	68 f0 86 13 f0       	push   $0xf01386f0
f0111017:	68 ca 01 00 00       	push   $0x1ca
f011101c:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0111021:	e8 0c f3 fe ff       	call   f0100332 <_warn>
f0111026:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111029:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111030:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111034:	74 04                	je     f011103a <test_cut_paste_pages+0x497>
f0111036:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011103a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0111041:	83 ec 04             	sub    $0x4,%esp
f0111044:	6a 00                	push   $0x0
f0111046:	68 ff f7 bf 02       	push   $0x2bff7ff
f011104b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011104e:	e8 73 3f 00 00       	call   f0114fc6 <CB>
f0111053:	83 c4 10             	add    $0x10,%esp
f0111056:	85 c0                	test   %eax,%eax
f0111058:	74 6b                	je     f01110c5 <test_cut_paste_pages+0x522>
f011105a:	83 ec 04             	sub    $0x4,%esp
f011105d:	6a 00                	push   $0x0
f011105f:	68 ff 0f c0 02       	push   $0x2c00fff
f0111064:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111067:	e8 5a 3f 00 00       	call   f0114fc6 <CB>
f011106c:	83 c4 10             	add    $0x10,%esp
f011106f:	85 c0                	test   %eax,%eax
f0111071:	74 52                	je     f01110c5 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0111073:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f011107a:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0111081:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111084:	8a 00                	mov    (%eax),%al
f0111086:	3c 79                	cmp    $0x79,%al
f0111088:	75 09                	jne    f0111093 <test_cut_paste_pages+0x4f0>
f011108a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011108d:	8a 00                	mov    (%eax),%al
f011108f:	3c 63                	cmp    $0x63,%al
f0111091:	74 21                	je     f01110b4 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111093:	83 ec 04             	sub    $0x4,%esp
f0111096:	68 3c 87 13 f0       	push   $0xf013873c
f011109b:	68 d6 01 00 00       	push   $0x1d6
f01110a0:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01110a5:	e8 88 f2 fe ff       	call   f0100332 <_warn>
f01110aa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01110ad:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01110b4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01110b8:	74 04                	je     f01110be <test_cut_paste_pages+0x51b>
f01110ba:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01110be:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01110c5:	83 ec 0c             	sub    $0xc,%esp
f01110c8:	68 75 87 13 f0       	push   $0xf0138775
f01110cd:	e8 5b fb fe ff       	call   f0100c2d <cprintf>
f01110d2:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01110d5:	83 ec 0c             	sub    $0xc,%esp
f01110d8:	68 84 87 13 f0       	push   $0xf0138784
f01110dd:	e8 4b fb fe ff       	call   f0100c2d <cprintf>
f01110e2:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01110e5:	83 ec 04             	sub    $0x4,%esp
f01110e8:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01110ee:	50                   	push   %eax
f01110ef:	68 ad 87 13 f0       	push   $0xf01387ad
f01110f4:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01110fa:	50                   	push   %eax
f01110fb:	e8 bd f8 01 00       	call   f01309bd <strcconcat>
f0111100:	83 c4 10             	add    $0x10,%esp
f0111103:	83 ec 0c             	sub    $0xc,%esp
f0111106:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f011110c:	50                   	push   %eax
f011110d:	e8 7d fb fe ff       	call   f0100c8f <execute_command>
f0111112:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0111115:	83 ec 04             	sub    $0x4,%esp
f0111118:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011111e:	50                   	push   %eax
f011111f:	68 b8 87 13 f0       	push   $0xf01387b8
f0111124:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011112a:	50                   	push   %eax
f011112b:	e8 8d f8 01 00       	call   f01309bd <strcconcat>
f0111130:	83 c4 10             	add    $0x10,%esp
f0111133:	83 ec 0c             	sub    $0xc,%esp
f0111136:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011113c:	50                   	push   %eax
f011113d:	e8 4d fb fe ff       	call   f0100c8f <execute_command>
f0111142:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0111145:	83 ec 04             	sub    $0x4,%esp
f0111148:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011114e:	50                   	push   %eax
f011114f:	68 c3 87 13 f0       	push   $0xf01387c3
f0111154:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011115a:	50                   	push   %eax
f011115b:	e8 5d f8 01 00       	call   f01309bd <strcconcat>
f0111160:	83 c4 10             	add    $0x10,%esp
f0111163:	83 ec 0c             	sub    $0xc,%esp
f0111166:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011116c:	50                   	push   %eax
f011116d:	e8 1d fb fe ff       	call   f0100c8f <execute_command>
f0111172:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0111175:	83 ec 04             	sub    $0x4,%esp
f0111178:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011117e:	50                   	push   %eax
f011117f:	68 ce 87 13 f0       	push   $0xf01387ce
f0111184:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011118a:	50                   	push   %eax
f011118b:	e8 2d f8 01 00       	call   f01309bd <strcconcat>
f0111190:	83 c4 10             	add    $0x10,%esp
f0111193:	83 ec 0c             	sub    $0xc,%esp
f0111196:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011119c:	50                   	push   %eax
f011119d:	e8 ed fa fe ff       	call   f0100c8f <execute_command>
f01111a2:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f01111a5:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01111ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111af:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01111b2:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01111b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111bc:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01111bf:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01111c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111c9:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01111cc:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01111d3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111d6:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01111d9:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01111e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111e3:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01111e6:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01111ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111f0:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01111f3:	83 ec 08             	sub    $0x8,%esp
f01111f6:	68 00 00 c0 01       	push   $0x1c00000
f01111fb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111fe:	e8 65 42 00 00       	call   f0115468 <GP>
f0111203:	83 c4 10             	add    $0x10,%esp
f0111206:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0111209:	83 ec 08             	sub    $0x8,%esp
f011120c:	68 00 00 40 01       	push   $0x1400000
f0111211:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111214:	e8 4f 42 00 00       	call   f0115468 <GP>
f0111219:	83 c4 10             	add    $0x10,%esp
f011121c:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f011121f:	e8 8e ae ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0111224:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0111227:	6a 01                	push   $0x1
f0111229:	68 00 00 40 01       	push   $0x1400000
f011122e:	68 00 00 c0 01       	push   $0x1c00000
f0111233:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111236:	e8 ca 6e ff ff       	call   f0108105 <cut_paste_pages>
f011123b:	83 c4 10             	add    $0x10,%esp
f011123e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111241:	e8 6c ae ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0111246:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111249:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f011124d:	75 08                	jne    f0111257 <test_cut_paste_pages+0x6b4>
f011124f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111252:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111255:	74 2b                	je     f0111282 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111257:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011125a:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011125d:	83 ec 0c             	sub    $0xc,%esp
f0111260:	50                   	push   %eax
f0111261:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111264:	68 dc 87 13 f0       	push   $0xf01387dc
f0111269:	68 f9 01 00 00       	push   $0x1f9
f011126e:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0111273:	e8 ba f0 fe ff       	call   f0100332 <_warn>
f0111278:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011127b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111282:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111286:	74 04                	je     f011128c <test_cut_paste_pages+0x6e9>
f0111288:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011128c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0111293:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f011129a:	83 ec 08             	sub    $0x8,%esp
f011129d:	6a 00                	push   $0x0
f011129f:	68 ff 0f 00 00       	push   $0xfff
f01112a4:	ff 75 a4             	pushl  -0x5c(%ebp)
f01112a7:	68 ff 0f 00 00       	push   $0xfff
f01112ac:	ff 75 a0             	pushl  -0x60(%ebp)
f01112af:	6a 01                	push   $0x1
f01112b1:	68 00 10 00 00       	push   $0x1000
f01112b6:	68 00 00 40 01       	push   $0x1400000
f01112bb:	68 00 00 c0 01       	push   $0x1c00000
f01112c0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01112c3:	e8 6d 42 00 00       	call   f0115535 <CCP>
f01112c8:	83 c4 30             	add    $0x30,%esp
f01112cb:	83 f8 01             	cmp    $0x1,%eax
f01112ce:	74 28                	je     f01112f8 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01112d0:	83 ec 04             	sub    $0x4,%esp
f01112d3:	68 f0 86 13 f0       	push   $0xf01386f0
f01112d8:	68 02 02 00 00       	push   $0x202
f01112dd:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01112e2:	e8 4b f0 fe ff       	call   f0100332 <_warn>
f01112e7:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01112ea:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01112f1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01112f8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01112fc:	74 04                	je     f0111302 <test_cut_paste_pages+0x75f>
f01112fe:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111302:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111309:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011130d:	0f 84 92 00 00 00    	je     f01113a5 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0111313:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f011131a:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111321:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111328:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011132f:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111336:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011133d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111340:	8a 00                	mov    (%eax),%al
f0111342:	3c 61                	cmp    $0x61,%al
f0111344:	75 2d                	jne    f0111373 <test_cut_paste_pages+0x7d0>
f0111346:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111349:	8a 00                	mov    (%eax),%al
f011134b:	3c 78                	cmp    $0x78,%al
f011134d:	75 24                	jne    f0111373 <test_cut_paste_pages+0x7d0>
f011134f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111352:	8a 00                	mov    (%eax),%al
f0111354:	3c 62                	cmp    $0x62,%al
f0111356:	75 1b                	jne    f0111373 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111358:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011135b:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011135d:	3c 79                	cmp    $0x79,%al
f011135f:	75 12                	jne    f0111373 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111361:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111364:	8a 00                	mov    (%eax),%al
f0111366:	3c 63                	cmp    $0x63,%al
f0111368:	75 09                	jne    f0111373 <test_cut_paste_pages+0x7d0>
f011136a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011136d:	8a 00                	mov    (%eax),%al
f011136f:	3c 7a                	cmp    $0x7a,%al
f0111371:	74 21                	je     f0111394 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111373:	83 ec 04             	sub    $0x4,%esp
f0111376:	68 3c 87 13 f0       	push   $0xf013873c
f011137b:	68 14 02 00 00       	push   $0x214
f0111380:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0111385:	e8 a8 ef fe ff       	call   f0100332 <_warn>
f011138a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011138d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111394:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111398:	74 04                	je     f011139e <test_cut_paste_pages+0x7fb>
f011139a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011139e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01113a5:	e8 08 ad ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01113aa:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01113ad:	6a 03                	push   $0x3
f01113af:	68 00 f0 bf 01       	push   $0x1bff000
f01113b4:	68 00 00 40 01       	push   $0x1400000
f01113b9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01113bc:	e8 44 6d ff ff       	call   f0108105 <cut_paste_pages>
f01113c1:	83 c4 10             	add    $0x10,%esp
f01113c4:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01113c7:	e8 e6 ac ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01113cc:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01113cf:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01113d3:	75 08                	jne    f01113dd <test_cut_paste_pages+0x83a>
f01113d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01113d8:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01113db:	74 2b                	je     f0111408 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01113dd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01113e0:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01113e3:	83 ec 0c             	sub    $0xc,%esp
f01113e6:	50                   	push   %eax
f01113e7:	ff 75 b4             	pushl  -0x4c(%ebp)
f01113ea:	68 dc 87 13 f0       	push   $0xf01387dc
f01113ef:	68 23 02 00 00       	push   $0x223
f01113f4:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01113f9:	e8 34 ef fe ff       	call   f0100332 <_warn>
f01113fe:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111401:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111408:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011140c:	74 04                	je     f0111412 <test_cut_paste_pages+0x86f>
f011140e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111412:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111419:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111420:	83 ec 04             	sub    $0x4,%esp
f0111423:	6a 00                	push   $0x0
f0111425:	68 00 00 40 01       	push   $0x1400000
f011142a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011142d:	e8 94 3b 00 00       	call   f0114fc6 <CB>
f0111432:	83 c4 10             	add    $0x10,%esp
f0111435:	83 f8 01             	cmp    $0x1,%eax
f0111438:	0f 85 80 00 00 00    	jne    f01114be <test_cut_paste_pages+0x91b>
f011143e:	83 ec 04             	sub    $0x4,%esp
f0111441:	6a 00                	push   $0x0
f0111443:	68 00 10 40 01       	push   $0x1401000
f0111448:	ff 75 d4             	pushl  -0x2c(%ebp)
f011144b:	e8 76 3b 00 00       	call   f0114fc6 <CB>
f0111450:	83 c4 10             	add    $0x10,%esp
f0111453:	83 f8 01             	cmp    $0x1,%eax
f0111456:	75 66                	jne    f01114be <test_cut_paste_pages+0x91b>
f0111458:	83 ec 04             	sub    $0x4,%esp
f011145b:	6a 00                	push   $0x0
f011145d:	68 00 20 40 01       	push   $0x1402000
f0111462:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111465:	e8 5c 3b 00 00       	call   f0114fc6 <CB>
f011146a:	83 c4 10             	add    $0x10,%esp
f011146d:	83 f8 01             	cmp    $0x1,%eax
f0111470:	75 4c                	jne    f01114be <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111472:	83 ec 04             	sub    $0x4,%esp
f0111475:	6a 00                	push   $0x0
f0111477:	68 00 f0 bf 01       	push   $0x1bff000
f011147c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011147f:	e8 42 3b 00 00       	call   f0114fc6 <CB>
f0111484:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111487:	85 c0                	test   %eax,%eax
f0111489:	75 33                	jne    f01114be <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011148b:	83 ec 04             	sub    $0x4,%esp
f011148e:	6a 00                	push   $0x0
f0111490:	68 00 00 c0 01       	push   $0x1c00000
f0111495:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111498:	e8 29 3b 00 00       	call   f0114fc6 <CB>
f011149d:	83 c4 10             	add    $0x10,%esp
f01114a0:	83 f8 01             	cmp    $0x1,%eax
f01114a3:	75 19                	jne    f01114be <test_cut_paste_pages+0x91b>
f01114a5:	83 ec 04             	sub    $0x4,%esp
f01114a8:	6a 00                	push   $0x0
f01114aa:	68 00 10 c0 01       	push   $0x1c01000
f01114af:	ff 75 d4             	pushl  -0x2c(%ebp)
f01114b2:	e8 0f 3b 00 00       	call   f0114fc6 <CB>
f01114b7:	83 c4 10             	add    $0x10,%esp
f01114ba:	85 c0                	test   %eax,%eax
f01114bc:	74 28                	je     f01114e6 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01114be:	83 ec 04             	sub    $0x4,%esp
f01114c1:	68 3c 88 13 f0       	push   $0xf013883c
f01114c6:	68 2c 02 00 00       	push   $0x22c
f01114cb:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01114d0:	e8 5d ee fe ff       	call   f0100332 <_warn>
f01114d5:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01114d8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01114df:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01114e6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01114ea:	74 04                	je     f01114f0 <test_cut_paste_pages+0x94d>
f01114ec:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01114f0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01114f7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01114fb:	0f 84 99 00 00 00    	je     f011159a <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0111501:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111508:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011150f:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111516:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011151d:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111524:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011152b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011152e:	8a 00                	mov    (%eax),%al
f0111530:	3c 61                	cmp    $0x61,%al
f0111532:	75 2d                	jne    f0111561 <test_cut_paste_pages+0x9be>
f0111534:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111537:	8a 00                	mov    (%eax),%al
f0111539:	3c 78                	cmp    $0x78,%al
f011153b:	75 24                	jne    f0111561 <test_cut_paste_pages+0x9be>
f011153d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111540:	8a 00                	mov    (%eax),%al
f0111542:	3c 62                	cmp    $0x62,%al
f0111544:	75 1b                	jne    f0111561 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111546:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111549:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011154b:	3c 79                	cmp    $0x79,%al
f011154d:	75 12                	jne    f0111561 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011154f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111552:	8a 00                	mov    (%eax),%al
f0111554:	3c 63                	cmp    $0x63,%al
f0111556:	75 09                	jne    f0111561 <test_cut_paste_pages+0x9be>
f0111558:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011155b:	8a 00                	mov    (%eax),%al
f011155d:	3c 7a                	cmp    $0x7a,%al
f011155f:	74 28                	je     f0111589 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0111561:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0111568:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011156f:	83 ec 04             	sub    $0x4,%esp
f0111572:	68 3c 87 13 f0       	push   $0xf013873c
f0111577:	68 40 02 00 00       	push   $0x240
f011157c:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0111581:	e8 ac ed fe ff       	call   f0100332 <_warn>
f0111586:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0111589:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011158d:	74 04                	je     f0111593 <test_cut_paste_pages+0x9f0>
f011158f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111593:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f011159a:	83 ec 0c             	sub    $0xc,%esp
f011159d:	68 75 88 13 f0       	push   $0xf0138875
f01115a2:	e8 86 f6 fe ff       	call   f0100c2d <cprintf>
f01115a7:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01115aa:	83 ec 08             	sub    $0x8,%esp
f01115ad:	ff 75 e4             	pushl  -0x1c(%ebp)
f01115b0:	68 84 88 13 f0       	push   $0xf0138884
f01115b5:	e8 73 f6 fe ff       	call   f0100c2d <cprintf>
f01115ba:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01115bd:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01115c1:	75 10                	jne    f01115d3 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01115c3:	83 ec 0c             	sub    $0xc,%esp
f01115c6:	68 b8 88 13 f0       	push   $0xf01388b8
f01115cb:	e8 5d f6 fe ff       	call   f0100c2d <cprintf>
f01115d0:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01115d3:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01115d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01115db:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01115de:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01115e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01115e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01115e9:	5b                   	pop    %ebx
f01115ea:	5e                   	pop    %esi
f01115eb:	5f                   	pop    %edi
f01115ec:	5d                   	pop    %ebp
f01115ed:	c3                   	ret    

f01115ee <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f01115ee:	55                   	push   %ebp
f01115ef:	89 e5                	mov    %esp,%ebp
f01115f1:	57                   	push   %edi
f01115f2:	56                   	push   %esi
f01115f3:	53                   	push   %ebx
f01115f4:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01115fa:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111600:	bb f8 88 13 f0       	mov    $0xf01388f8,%ebx
f0111605:	ba 0f 00 00 00       	mov    $0xf,%edx
f011160a:	89 c7                	mov    %eax,%edi
f011160c:	89 de                	mov    %ebx,%esi
f011160e:	89 d1                	mov    %edx,%ecx
f0111610:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111612:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0111618:	b9 23 00 00 00       	mov    $0x23,%ecx
f011161d:	b0 00                	mov    $0x0,%al
f011161f:	89 d7                	mov    %edx,%edi
f0111621:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111623:	6a 00                	push   $0x0
f0111625:	6a 0a                	push   $0xa
f0111627:	6a 14                	push   $0x14
f0111629:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011162f:	50                   	push   %eax
f0111630:	e8 31 6d ff ff       	call   f0108366 <env_create>
f0111635:	83 c4 10             	add    $0x10,%esp
f0111638:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011163b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011163e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111641:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111644:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111647:	8b 40 60             	mov    0x60(%eax),%eax
f011164a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0111650:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111656:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111659:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0111660:	75 70 20 
f0111663:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f011166a:	00 00 00 
f011166d:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111673:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111678:	b8 00 00 00 00       	mov    $0x0,%eax
f011167d:	89 d7                	mov    %edx,%edi
f011167f:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111681:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111684:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111687:	83 ec 08             	sub    $0x8,%esp
f011168a:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0111690:	52                   	push   %edx
f0111691:	50                   	push   %eax
f0111692:	e8 2e f2 01 00       	call   f01308c5 <ltostr>
f0111697:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011169a:	83 ec 04             	sub    $0x4,%esp
f011169d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01116a3:	50                   	push   %eax
f01116a4:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f01116aa:	50                   	push   %eax
f01116ab:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f01116b1:	50                   	push   %eax
f01116b2:	e8 06 f3 01 00       	call   f01309bd <strcconcat>
f01116b7:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01116ba:	83 ec 0c             	sub    $0xc,%esp
f01116bd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01116c0:	e8 3c 3e 00 00       	call   f0115501 <ClearUserSpace>
f01116c5:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01116c8:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01116cf:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01116d6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01116dd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f01116e4:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01116eb:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f01116f2:	83 ec 0c             	sub    $0xc,%esp
f01116f5:	68 2c 89 13 f0       	push   $0xf013892c
f01116fa:	e8 2e f5 fe ff       	call   f0100c2d <cprintf>
f01116ff:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0111702:	83 ec 04             	sub    $0x4,%esp
f0111705:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011170b:	50                   	push   %eax
f011170c:	68 62 89 13 f0       	push   $0xf0138962
f0111711:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111717:	50                   	push   %eax
f0111718:	e8 a0 f2 01 00       	call   f01309bd <strcconcat>
f011171d:	83 c4 10             	add    $0x10,%esp
f0111720:	83 ec 0c             	sub    $0xc,%esp
f0111723:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111729:	50                   	push   %eax
f011172a:	e8 60 f5 fe ff       	call   f0100c8f <execute_command>
f011172f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0111732:	83 ec 04             	sub    $0x4,%esp
f0111735:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011173b:	50                   	push   %eax
f011173c:	68 67 89 13 f0       	push   $0xf0138967
f0111741:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111747:	50                   	push   %eax
f0111748:	e8 70 f2 01 00       	call   f01309bd <strcconcat>
f011174d:	83 c4 10             	add    $0x10,%esp
f0111750:	83 ec 0c             	sub    $0xc,%esp
f0111753:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111759:	50                   	push   %eax
f011175a:	e8 30 f5 fe ff       	call   f0100c8f <execute_command>
f011175f:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0111762:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111768:	bb 6d 8c 13 f0       	mov    $0xf0138c6d,%ebx
f011176d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111772:	89 c7                	mov    %eax,%edi
f0111774:	89 de                	mov    %ebx,%esi
f0111776:	89 d1                	mov    %edx,%ecx
f0111778:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011177a:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0111780:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111785:	b0 00                	mov    $0x0,%al
f0111787:	89 d7                	mov    %edx,%edi
f0111789:	f3 aa                	rep stos %al,%es:(%edi)
f011178b:	83 ec 0c             	sub    $0xc,%esp
f011178e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111794:	50                   	push   %eax
f0111795:	e8 f5 f4 fe ff       	call   f0100c8f <execute_command>
f011179a:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f011179d:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01117a3:	bb d1 8c 13 f0       	mov    $0xf0138cd1,%ebx
f01117a8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01117ad:	89 c7                	mov    %eax,%edi
f01117af:	89 de                	mov    %ebx,%esi
f01117b1:	89 d1                	mov    %edx,%ecx
f01117b3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01117b5:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01117bb:	b9 55 00 00 00       	mov    $0x55,%ecx
f01117c0:	b0 00                	mov    $0x0,%al
f01117c2:	89 d7                	mov    %edx,%edi
f01117c4:	f3 aa                	rep stos %al,%es:(%edi)
f01117c6:	83 ec 0c             	sub    $0xc,%esp
f01117c9:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01117cf:	50                   	push   %eax
f01117d0:	e8 ba f4 fe ff       	call   f0100c8f <execute_command>
f01117d5:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01117d8:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01117de:	bb 35 8d 13 f0       	mov    $0xf0138d35,%ebx
f01117e3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01117e8:	89 c7                	mov    %eax,%edi
f01117ea:	89 de                	mov    %ebx,%esi
f01117ec:	89 d1                	mov    %edx,%ecx
f01117ee:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01117f0:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01117f6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01117fb:	b0 00                	mov    $0x0,%al
f01117fd:	89 d7                	mov    %edx,%edi
f01117ff:	f3 aa                	rep stos %al,%es:(%edi)
f0111801:	83 ec 0c             	sub    $0xc,%esp
f0111804:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011180a:	50                   	push   %eax
f011180b:	e8 7f f4 fe ff       	call   f0100c8f <execute_command>
f0111810:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0111813:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111819:	bb 99 8d 13 f0       	mov    $0xf0138d99,%ebx
f011181e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111823:	89 c7                	mov    %eax,%edi
f0111825:	89 de                	mov    %ebx,%esi
f0111827:	89 d1                	mov    %edx,%ecx
f0111829:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011182b:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0111831:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111836:	b0 00                	mov    $0x0,%al
f0111838:	89 d7                	mov    %edx,%edi
f011183a:	f3 aa                	rep stos %al,%es:(%edi)
f011183c:	83 ec 0c             	sub    $0xc,%esp
f011183f:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111845:	50                   	push   %eax
f0111846:	e8 44 f4 fe ff       	call   f0100c8f <execute_command>
f011184b:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f011184e:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111854:	bb fd 8d 13 f0       	mov    $0xf0138dfd,%ebx
f0111859:	ba 0f 00 00 00       	mov    $0xf,%edx
f011185e:	89 c7                	mov    %eax,%edi
f0111860:	89 de                	mov    %ebx,%esi
f0111862:	89 d1                	mov    %edx,%ecx
f0111864:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111866:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f011186c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111871:	b0 00                	mov    $0x0,%al
f0111873:	89 d7                	mov    %edx,%edi
f0111875:	f3 aa                	rep stos %al,%es:(%edi)
f0111877:	83 ec 0c             	sub    $0xc,%esp
f011187a:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111880:	50                   	push   %eax
f0111881:	e8 09 f4 fe ff       	call   f0100c8f <execute_command>
f0111886:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0111889:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011188f:	bb 61 8e 13 f0       	mov    $0xf0138e61,%ebx
f0111894:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111899:	89 c7                	mov    %eax,%edi
f011189b:	89 de                	mov    %ebx,%esi
f011189d:	89 d1                	mov    %edx,%ecx
f011189f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01118a1:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01118a7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01118ac:	b0 00                	mov    $0x0,%al
f01118ae:	89 d7                	mov    %edx,%edi
f01118b0:	f3 aa                	rep stos %al,%es:(%edi)
f01118b2:	83 ec 0c             	sub    $0xc,%esp
f01118b5:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01118bb:	50                   	push   %eax
f01118bc:	e8 ce f3 fe ff       	call   f0100c8f <execute_command>
f01118c1:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01118c4:	83 ec 04             	sub    $0x4,%esp
f01118c7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01118cd:	50                   	push   %eax
f01118ce:	68 6f 89 13 f0       	push   $0xf013896f
f01118d3:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01118d9:	50                   	push   %eax
f01118da:	e8 de f0 01 00       	call   f01309bd <strcconcat>
f01118df:	83 c4 10             	add    $0x10,%esp
f01118e2:	83 ec 0c             	sub    $0xc,%esp
f01118e5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01118eb:	50                   	push   %eax
f01118ec:	e8 9e f3 fe ff       	call   f0100c8f <execute_command>
f01118f1:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01118f4:	83 ec 04             	sub    $0x4,%esp
f01118f7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01118fd:	50                   	push   %eax
f01118fe:	68 79 89 13 f0       	push   $0xf0138979
f0111903:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111909:	50                   	push   %eax
f011190a:	e8 ae f0 01 00       	call   f01309bd <strcconcat>
f011190f:	83 c4 10             	add    $0x10,%esp
f0111912:	83 ec 0c             	sub    $0xc,%esp
f0111915:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011191b:	50                   	push   %eax
f011191c:	e8 6e f3 fe ff       	call   f0100c8f <execute_command>
f0111921:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0111924:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011192a:	bb c5 8e 13 f0       	mov    $0xf0138ec5,%ebx
f011192f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111934:	89 c7                	mov    %eax,%edi
f0111936:	89 de                	mov    %ebx,%esi
f0111938:	89 d1                	mov    %edx,%ecx
f011193a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011193c:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111942:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111947:	b0 00                	mov    $0x0,%al
f0111949:	89 d7                	mov    %edx,%edi
f011194b:	f3 aa                	rep stos %al,%es:(%edi)
f011194d:	83 ec 0c             	sub    $0xc,%esp
f0111950:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111956:	50                   	push   %eax
f0111957:	e8 33 f3 fe ff       	call   f0100c8f <execute_command>
f011195c:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f011195f:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111965:	bb 29 8f 13 f0       	mov    $0xf0138f29,%ebx
f011196a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011196f:	89 c7                	mov    %eax,%edi
f0111971:	89 de                	mov    %ebx,%esi
f0111973:	89 d1                	mov    %edx,%ecx
f0111975:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111977:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011197d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111982:	b0 00                	mov    $0x0,%al
f0111984:	89 d7                	mov    %edx,%edi
f0111986:	f3 aa                	rep stos %al,%es:(%edi)
f0111988:	83 ec 0c             	sub    $0xc,%esp
f011198b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111991:	50                   	push   %eax
f0111992:	e8 f8 f2 fe ff       	call   f0100c8f <execute_command>
f0111997:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f011199a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01119a0:	bb 8d 8f 13 f0       	mov    $0xf0138f8d,%ebx
f01119a5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01119aa:	89 c7                	mov    %eax,%edi
f01119ac:	89 de                	mov    %ebx,%esi
f01119ae:	89 d1                	mov    %edx,%ecx
f01119b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01119b2:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01119b8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01119bd:	b0 00                	mov    $0x0,%al
f01119bf:	89 d7                	mov    %edx,%edi
f01119c1:	f3 aa                	rep stos %al,%es:(%edi)
f01119c3:	83 ec 0c             	sub    $0xc,%esp
f01119c6:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01119cc:	50                   	push   %eax
f01119cd:	e8 bd f2 fe ff       	call   f0100c8f <execute_command>
f01119d2:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01119d5:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01119dc:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01119e3:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01119ea:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01119f1:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01119f8:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01119ff:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0111a06:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0111a0d:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0111a14:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0111a1b:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0111a22:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0111a29:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111a2c:	8a 00                	mov    (%eax),%al
f0111a2e:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0111a34:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111a37:	8a 00                	mov    (%eax),%al
f0111a39:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0111a3f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111a42:	8a 00                	mov    (%eax),%al
f0111a44:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111a4a:	e8 63 a6 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0111a4f:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0111a52:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111a55:	89 d0                	mov    %edx,%eax
f0111a57:	01 c0                	add    %eax,%eax
f0111a59:	01 d0                	add    %edx,%eax
f0111a5b:	01 c0                	add    %eax,%eax
f0111a5d:	50                   	push   %eax
f0111a5e:	68 00 00 10 00       	push   $0x100000
f0111a63:	6a 00                	push   $0x0
f0111a65:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a68:	e8 b2 66 ff ff       	call   f010811f <copy_paste_chunk>
f0111a6d:	83 c4 10             	add    $0x10,%esp
f0111a70:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111a73:	e8 3a a6 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0111a78:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111a7b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111a82:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0111a86:	75 08                	jne    f0111a90 <test_copy_paste_chunk+0x4a2>
f0111a88:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111a8b:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111a8e:	74 2b                	je     f0111abb <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111a90:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111a93:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111a96:	83 ec 0c             	sub    $0xc,%esp
f0111a99:	50                   	push   %eax
f0111a9a:	ff 75 88             	pushl  -0x78(%ebp)
f0111a9d:	68 88 89 13 f0       	push   $0xf0138988
f0111aa2:	68 93 02 00 00       	push   $0x293
f0111aa7:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0111aac:	e8 81 e8 fe ff       	call   f0100332 <_warn>
f0111ab1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111ab4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111abb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111abf:	74 04                	je     f0111ac5 <test_copy_paste_chunk+0x4d7>
f0111ac1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111ac5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0111acc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111acf:	8a 00                	mov    (%eax),%al
f0111ad1:	3c 61                	cmp    $0x61,%al
f0111ad3:	75 75                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111ad5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111ad8:	8a 00                	mov    (%eax),%al
f0111ada:	3c 78                	cmp    $0x78,%al
f0111adc:	75 6c                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111ade:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111ae1:	8a 00                	mov    (%eax),%al
f0111ae3:	3c 62                	cmp    $0x62,%al
f0111ae5:	75 63                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111ae7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111aea:	8a 00                	mov    (%eax),%al
f0111aec:	3c 79                	cmp    $0x79,%al
f0111aee:	75 5a                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111af0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111af3:	8a 00                	mov    (%eax),%al
f0111af5:	3c 63                	cmp    $0x63,%al
f0111af7:	75 51                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111af9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111afc:	8a 00                	mov    (%eax),%al
f0111afe:	3c 7a                	cmp    $0x7a,%al
f0111b00:	75 48                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0111b02:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111b05:	8a 00                	mov    (%eax),%al
f0111b07:	3c 64                	cmp    $0x64,%al
f0111b09:	75 3f                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111b0b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111b0e:	8a 10                	mov    (%eax),%dl
f0111b10:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0111b16:	38 c2                	cmp    %al,%dl
f0111b18:	75 30                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111b1a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111b1d:	8a 00                	mov    (%eax),%al
f0111b1f:	3c 65                	cmp    $0x65,%al
f0111b21:	75 27                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111b23:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b26:	8a 10                	mov    (%eax),%dl
f0111b28:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0111b2e:	38 c2                	cmp    %al,%dl
f0111b30:	75 18                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111b32:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111b35:	8a 00                	mov    (%eax),%al
f0111b37:	3c 66                	cmp    $0x66,%al
f0111b39:	75 0f                	jne    f0111b4a <test_copy_paste_chunk+0x55c>
f0111b3b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111b3e:	8a 10                	mov    (%eax),%dl
f0111b40:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111b46:	38 c2                	cmp    %al,%dl
f0111b48:	74 21                	je     f0111b6b <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111b4a:	83 ec 04             	sub    $0x4,%esp
f0111b4d:	68 ec 89 13 f0       	push   $0xf01389ec
f0111b52:	68 9c 02 00 00       	push   $0x29c
f0111b57:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0111b5c:	e8 d1 e7 fe ff       	call   f0100332 <_warn>
f0111b61:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111b64:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111b6b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111b6f:	74 04                	je     f0111b75 <test_copy_paste_chunk+0x587>
f0111b71:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111b75:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0111b7c:	83 ec 0c             	sub    $0xc,%esp
f0111b7f:	68 26 8a 13 f0       	push   $0xf0138a26
f0111b84:	e8 a4 f0 fe ff       	call   f0100c2d <cprintf>
f0111b89:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0111b8c:	83 ec 0c             	sub    $0xc,%esp
f0111b8f:	68 38 8a 13 f0       	push   $0xf0138a38
f0111b94:	e8 94 f0 fe ff       	call   f0100c2d <cprintf>
f0111b99:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0111b9c:	83 ec 04             	sub    $0x4,%esp
f0111b9f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111ba5:	50                   	push   %eax
f0111ba6:	68 6e 8a 13 f0       	push   $0xf0138a6e
f0111bab:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111bb1:	50                   	push   %eax
f0111bb2:	e8 06 ee 01 00       	call   f01309bd <strcconcat>
f0111bb7:	83 c4 10             	add    $0x10,%esp
f0111bba:	83 ec 0c             	sub    $0xc,%esp
f0111bbd:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111bc3:	50                   	push   %eax
f0111bc4:	e8 c6 f0 fe ff       	call   f0100c8f <execute_command>
f0111bc9:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0111bcc:	83 ec 04             	sub    $0x4,%esp
f0111bcf:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111bd5:	50                   	push   %eax
f0111bd6:	68 78 8a 13 f0       	push   $0xf0138a78
f0111bdb:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111be1:	50                   	push   %eax
f0111be2:	e8 d6 ed 01 00       	call   f01309bd <strcconcat>
f0111be7:	83 c4 10             	add    $0x10,%esp
f0111bea:	83 ec 0c             	sub    $0xc,%esp
f0111bed:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111bf3:	50                   	push   %eax
f0111bf4:	e8 96 f0 fe ff       	call   f0100c8f <execute_command>
f0111bf9:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0111bfc:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111c02:	bb f1 8f 13 f0       	mov    $0xf0138ff1,%ebx
f0111c07:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c0c:	89 c7                	mov    %eax,%edi
f0111c0e:	89 de                	mov    %ebx,%esi
f0111c10:	89 d1                	mov    %edx,%ecx
f0111c12:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c14:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0111c1a:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111c1f:	b0 00                	mov    $0x0,%al
f0111c21:	89 d7                	mov    %edx,%edi
f0111c23:	f3 aa                	rep stos %al,%es:(%edi)
f0111c25:	83 ec 0c             	sub    $0xc,%esp
f0111c28:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111c2e:	50                   	push   %eax
f0111c2f:	e8 5b f0 fe ff       	call   f0100c8f <execute_command>
f0111c34:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0111c37:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111c3d:	bb 55 90 13 f0       	mov    $0xf0139055,%ebx
f0111c42:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c47:	89 c7                	mov    %eax,%edi
f0111c49:	89 de                	mov    %ebx,%esi
f0111c4b:	89 d1                	mov    %edx,%ecx
f0111c4d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c4f:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0111c55:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111c5a:	b0 00                	mov    $0x0,%al
f0111c5c:	89 d7                	mov    %edx,%edi
f0111c5e:	f3 aa                	rep stos %al,%es:(%edi)
f0111c60:	83 ec 0c             	sub    $0xc,%esp
f0111c63:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111c69:	50                   	push   %eax
f0111c6a:	e8 20 f0 fe ff       	call   f0100c8f <execute_command>
f0111c6f:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0111c72:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111c78:	bb b9 90 13 f0       	mov    $0xf01390b9,%ebx
f0111c7d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c82:	89 c7                	mov    %eax,%edi
f0111c84:	89 de                	mov    %ebx,%esi
f0111c86:	89 d1                	mov    %edx,%ecx
f0111c88:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c8a:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0111c90:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111c95:	b0 00                	mov    $0x0,%al
f0111c97:	89 d7                	mov    %edx,%edi
f0111c99:	f3 aa                	rep stos %al,%es:(%edi)
f0111c9b:	83 ec 0c             	sub    $0xc,%esp
f0111c9e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111ca4:	50                   	push   %eax
f0111ca5:	e8 e5 ef fe ff       	call   f0100c8f <execute_command>
f0111caa:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0111cad:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111cb3:	bb 1d 91 13 f0       	mov    $0xf013911d,%ebx
f0111cb8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111cbd:	89 c7                	mov    %eax,%edi
f0111cbf:	89 de                	mov    %ebx,%esi
f0111cc1:	89 d1                	mov    %edx,%ecx
f0111cc3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111cc5:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0111ccb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111cd0:	b0 00                	mov    $0x0,%al
f0111cd2:	89 d7                	mov    %edx,%edi
f0111cd4:	f3 aa                	rep stos %al,%es:(%edi)
f0111cd6:	83 ec 0c             	sub    $0xc,%esp
f0111cd9:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111cdf:	50                   	push   %eax
f0111ce0:	e8 aa ef fe ff       	call   f0100c8f <execute_command>
f0111ce5:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0111ce8:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111cee:	bb 81 91 13 f0       	mov    $0xf0139181,%ebx
f0111cf3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111cf8:	89 c7                	mov    %eax,%edi
f0111cfa:	89 de                	mov    %ebx,%esi
f0111cfc:	89 d1                	mov    %edx,%ecx
f0111cfe:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111d00:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0111d06:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111d0b:	b0 00                	mov    $0x0,%al
f0111d0d:	89 d7                	mov    %edx,%edi
f0111d0f:	f3 aa                	rep stos %al,%es:(%edi)
f0111d11:	83 ec 0c             	sub    $0xc,%esp
f0111d14:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111d1a:	50                   	push   %eax
f0111d1b:	e8 6f ef fe ff       	call   f0100c8f <execute_command>
f0111d20:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0111d23:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111d29:	bb e5 91 13 f0       	mov    $0xf01391e5,%ebx
f0111d2e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111d33:	89 c7                	mov    %eax,%edi
f0111d35:	89 de                	mov    %ebx,%esi
f0111d37:	89 d1                	mov    %edx,%ecx
f0111d39:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111d3b:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0111d41:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111d46:	b0 00                	mov    $0x0,%al
f0111d48:	89 d7                	mov    %edx,%edi
f0111d4a:	f3 aa                	rep stos %al,%es:(%edi)
f0111d4c:	83 ec 0c             	sub    $0xc,%esp
f0111d4f:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111d55:	50                   	push   %eax
f0111d56:	e8 34 ef fe ff       	call   f0100c8f <execute_command>
f0111d5b:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0111d5e:	83 ec 04             	sub    $0x4,%esp
f0111d61:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111d67:	50                   	push   %eax
f0111d68:	68 82 8a 13 f0       	push   $0xf0138a82
f0111d6d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111d73:	50                   	push   %eax
f0111d74:	e8 44 ec 01 00       	call   f01309bd <strcconcat>
f0111d79:	83 c4 10             	add    $0x10,%esp
f0111d7c:	83 ec 0c             	sub    $0xc,%esp
f0111d7f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111d85:	50                   	push   %eax
f0111d86:	e8 04 ef fe ff       	call   f0100c8f <execute_command>
f0111d8b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0111d8e:	83 ec 04             	sub    $0x4,%esp
f0111d91:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111d97:	50                   	push   %eax
f0111d98:	68 8c 8a 13 f0       	push   $0xf0138a8c
f0111d9d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111da3:	50                   	push   %eax
f0111da4:	e8 14 ec 01 00       	call   f01309bd <strcconcat>
f0111da9:	83 c4 10             	add    $0x10,%esp
f0111dac:	83 ec 0c             	sub    $0xc,%esp
f0111daf:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111db5:	50                   	push   %eax
f0111db6:	e8 d4 ee fe ff       	call   f0100c8f <execute_command>
f0111dbb:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0111dbe:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111dc4:	bb 49 92 13 f0       	mov    $0xf0139249,%ebx
f0111dc9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111dce:	89 c7                	mov    %eax,%edi
f0111dd0:	89 de                	mov    %ebx,%esi
f0111dd2:	89 d1                	mov    %edx,%ecx
f0111dd4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111dd6:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111ddc:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111de1:	b0 00                	mov    $0x0,%al
f0111de3:	89 d7                	mov    %edx,%edi
f0111de5:	f3 aa                	rep stos %al,%es:(%edi)
f0111de7:	83 ec 0c             	sub    $0xc,%esp
f0111dea:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111df0:	50                   	push   %eax
f0111df1:	e8 99 ee fe ff       	call   f0100c8f <execute_command>
f0111df6:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0111df9:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111dff:	bb ad 92 13 f0       	mov    $0xf01392ad,%ebx
f0111e04:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111e09:	89 c7                	mov    %eax,%edi
f0111e0b:	89 de                	mov    %ebx,%esi
f0111e0d:	89 d1                	mov    %edx,%ecx
f0111e0f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111e11:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111e17:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111e1c:	b0 00                	mov    $0x0,%al
f0111e1e:	89 d7                	mov    %edx,%edi
f0111e20:	f3 aa                	rep stos %al,%es:(%edi)
f0111e22:	83 ec 0c             	sub    $0xc,%esp
f0111e25:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111e2b:	50                   	push   %eax
f0111e2c:	e8 5e ee fe ff       	call   f0100c8f <execute_command>
f0111e31:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0111e34:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111e3a:	bb 11 93 13 f0       	mov    $0xf0139311,%ebx
f0111e3f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111e44:	89 c7                	mov    %eax,%edi
f0111e46:	89 de                	mov    %ebx,%esi
f0111e48:	89 d1                	mov    %edx,%ecx
f0111e4a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111e4c:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0111e52:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111e57:	b0 00                	mov    $0x0,%al
f0111e59:	89 d7                	mov    %edx,%edi
f0111e5b:	f3 aa                	rep stos %al,%es:(%edi)
f0111e5d:	83 ec 0c             	sub    $0xc,%esp
f0111e60:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111e66:	50                   	push   %eax
f0111e67:	e8 23 ee fe ff       	call   f0100c8f <execute_command>
f0111e6c:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0111e6f:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0111e76:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0111e7d:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0111e84:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0111e8b:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0111e92:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0111e99:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0111ea0:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0111ea7:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0111eae:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0111eb5:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0111ebc:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0111ec3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111ec6:	8a 00                	mov    (%eax),%al
f0111ec8:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111ece:	e8 df a1 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0111ed3:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0111ed6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111ed9:	89 d0                	mov    %edx,%eax
f0111edb:	01 c0                	add    %eax,%eax
f0111edd:	01 d0                	add    %edx,%eax
f0111edf:	01 c0                	add    %eax,%eax
f0111ee1:	50                   	push   %eax
f0111ee2:	68 00 00 40 00       	push   $0x400000
f0111ee7:	68 00 00 20 00       	push   $0x200000
f0111eec:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111eef:	e8 2b 62 ff ff       	call   f010811f <copy_paste_chunk>
f0111ef4:	83 c4 10             	add    $0x10,%esp
f0111ef7:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111efa:	e8 b3 a1 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0111eff:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111f02:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111f09:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0111f0d:	75 08                	jne    f0111f17 <test_copy_paste_chunk+0x929>
f0111f0f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111f12:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111f15:	74 2b                	je     f0111f42 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111f17:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111f1a:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111f1d:	83 ec 0c             	sub    $0xc,%esp
f0111f20:	50                   	push   %eax
f0111f21:	ff 75 80             	pushl  -0x80(%ebp)
f0111f24:	68 98 8a 13 f0       	push   $0xf0138a98
f0111f29:	68 cc 02 00 00       	push   $0x2cc
f0111f2e:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0111f33:	e8 fa e3 fe ff       	call   f0100332 <_warn>
f0111f38:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111f3b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111f42:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f46:	74 04                	je     f0111f4c <test_copy_paste_chunk+0x95e>
f0111f48:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111f4c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0111f53:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0111f5a:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0111f5d:	83 ec 08             	sub    $0x8,%esp
f0111f60:	6a 01                	push   $0x1
f0111f62:	6a 07                	push   $0x7
f0111f64:	6a 07                	push   $0x7
f0111f66:	6a 07                	push   $0x7
f0111f68:	6a 07                	push   $0x7
f0111f6a:	6a 01                	push   $0x1
f0111f6c:	68 00 20 00 00       	push   $0x2000
f0111f71:	68 00 00 40 00       	push   $0x400000
f0111f76:	68 00 00 20 00       	push   $0x200000
f0111f7b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f7e:	e8 b2 35 00 00       	call   f0115535 <CCP>
f0111f83:	83 c4 30             	add    $0x30,%esp
f0111f86:	83 f8 01             	cmp    $0x1,%eax
f0111f89:	74 2b                	je     f0111fb6 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0111f8b:	83 ec 04             	sub    $0x4,%esp
f0111f8e:	68 ec 8a 13 f0       	push   $0xf0138aec
f0111f93:	68 d5 02 00 00       	push   $0x2d5
f0111f98:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0111f9d:	e8 90 e3 fe ff       	call   f0100332 <_warn>
f0111fa2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111fa5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0111fac:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0111fb3:	00 00 00 
		}
		if (correct) eval += 5 ;
f0111fb6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111fba:	74 04                	je     f0111fc0 <test_copy_paste_chunk+0x9d2>
f0111fbc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111fc0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0111fc7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111fca:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0111fcd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111fd0:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0111fd3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111fd6:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0111fd9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111fdc:	8a 00                	mov    (%eax),%al
f0111fde:	3c 61                	cmp    $0x61,%al
f0111fe0:	75 69                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f0111fe2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111fe5:	8a 00                	mov    (%eax),%al
f0111fe7:	3c 61                	cmp    $0x61,%al
f0111fe9:	75 60                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f0111feb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111fee:	8a 00                	mov    (%eax),%al
f0111ff0:	3c 79                	cmp    $0x79,%al
f0111ff2:	75 57                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f0111ff4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111ff7:	8a 00                	mov    (%eax),%al
f0111ff9:	3c 62                	cmp    $0x62,%al
f0111ffb:	75 4e                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f0111ffd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112000:	8a 00                	mov    (%eax),%al
f0112002:	3c 63                	cmp    $0x63,%al
f0112004:	75 45                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f0112006:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112009:	8a 00                	mov    (%eax),%al
f011200b:	3c 7a                	cmp    $0x7a,%al
f011200d:	75 3c                	jne    f011204b <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011200f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112012:	8a 00                	mov    (%eax),%al
f0112014:	3c 77                	cmp    $0x77,%al
f0112016:	75 33                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f0112018:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011201b:	8a 00                	mov    (%eax),%al
f011201d:	3c 64                	cmp    $0x64,%al
f011201f:	75 2a                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f0112021:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112024:	8a 00                	mov    (%eax),%al
f0112026:	3c 65                	cmp    $0x65,%al
f0112028:	75 21                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f011202a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011202d:	8a 00                	mov    (%eax),%al
f011202f:	3c 65                	cmp    $0x65,%al
f0112031:	75 18                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f0112033:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112036:	8a 00                	mov    (%eax),%al
f0112038:	3c 66                	cmp    $0x66,%al
f011203a:	75 0f                	jne    f011204b <test_copy_paste_chunk+0xa5d>
f011203c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011203f:	8a 10                	mov    (%eax),%dl
f0112041:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112047:	38 c2                	cmp    %al,%dl
f0112049:	74 21                	je     f011206c <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011204b:	83 ec 04             	sub    $0x4,%esp
f011204e:	68 ec 89 13 f0       	push   $0xf01389ec
f0112053:	68 e3 02 00 00       	push   $0x2e3
f0112058:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011205d:	e8 d0 e2 fe ff       	call   f0100332 <_warn>
f0112062:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112065:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011206c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112070:	74 04                	je     f0112076 <test_copy_paste_chunk+0xa88>
f0112072:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112076:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011207d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112080:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112083:	e8 2a a0 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0112088:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f011208b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011208e:	89 c2                	mov    %eax,%edx
f0112090:	01 d2                	add    %edx,%edx
f0112092:	01 d0                	add    %edx,%eax
f0112094:	50                   	push   %eax
f0112095:	68 00 08 20 00       	push   $0x200800
f011209a:	68 00 08 40 00       	push   $0x400800
f011209f:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120a2:	e8 78 60 ff ff       	call   f010811f <copy_paste_chunk>
f01120a7:	83 c4 10             	add    $0x10,%esp
f01120aa:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01120ad:	e8 00 a0 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01120b2:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01120b5:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01120b9:	75 08                	jne    f01120c3 <test_copy_paste_chunk+0xad5>
f01120bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01120be:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01120c1:	74 2b                	je     f01120ee <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01120c3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01120c6:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01120c9:	83 ec 0c             	sub    $0xc,%esp
f01120cc:	50                   	push   %eax
f01120cd:	ff 75 80             	pushl  -0x80(%ebp)
f01120d0:	68 98 8a 13 f0       	push   $0xf0138a98
f01120d5:	68 f3 02 00 00       	push   $0x2f3
f01120da:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01120df:	e8 4e e2 fe ff       	call   f0100332 <_warn>
f01120e4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01120e7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01120ee:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01120f2:	74 04                	je     f01120f8 <test_copy_paste_chunk+0xb0a>
f01120f4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01120f8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01120ff:	83 ec 08             	sub    $0x8,%esp
f0112102:	6a 01                	push   $0x1
f0112104:	6a 07                	push   $0x7
f0112106:	6a 07                	push   $0x7
f0112108:	6a 07                	push   $0x7
f011210a:	6a 07                	push   $0x7
f011210c:	6a 01                	push   $0x1
f011210e:	68 00 20 00 00       	push   $0x2000
f0112113:	68 00 00 20 00       	push   $0x200000
f0112118:	68 00 00 40 00       	push   $0x400000
f011211d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112120:	e8 10 34 00 00       	call   f0115535 <CCP>
f0112125:	83 c4 30             	add    $0x30,%esp
f0112128:	83 f8 01             	cmp    $0x1,%eax
f011212b:	74 21                	je     f011214e <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011212d:	83 ec 04             	sub    $0x4,%esp
f0112130:	68 38 8b 13 f0       	push   $0xf0138b38
f0112135:	68 fb 02 00 00       	push   $0x2fb
f011213a:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011213f:	e8 ee e1 fe ff       	call   f0100332 <_warn>
f0112144:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112147:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011214e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112152:	74 04                	je     f0112158 <test_copy_paste_chunk+0xb6a>
f0112154:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112158:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011215f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112162:	8a 00                	mov    (%eax),%al
f0112164:	3c 61                	cmp    $0x61,%al
f0112166:	75 69                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
f0112168:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011216b:	8a 00                	mov    (%eax),%al
f011216d:	3c 61                	cmp    $0x61,%al
f011216f:	75 60                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
f0112171:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112174:	8a 00                	mov    (%eax),%al
f0112176:	3c 79                	cmp    $0x79,%al
f0112178:	75 57                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
f011217a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011217d:	8a 00                	mov    (%eax),%al
f011217f:	3c 62                	cmp    $0x62,%al
f0112181:	75 4e                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
f0112183:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112186:	8a 00                	mov    (%eax),%al
f0112188:	3c 7a                	cmp    $0x7a,%al
f011218a:	75 45                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
f011218c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011218f:	8a 00                	mov    (%eax),%al
f0112191:	3c 7a                	cmp    $0x7a,%al
f0112193:	75 3c                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112195:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112198:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011219a:	3c 64                	cmp    $0x64,%al
f011219c:	75 33                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011219e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01121a1:	8a 00                	mov    (%eax),%al
f01121a3:	3c 64                	cmp    $0x64,%al
f01121a5:	75 2a                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
f01121a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01121aa:	8a 00                	mov    (%eax),%al
f01121ac:	3c 65                	cmp    $0x65,%al
f01121ae:	75 21                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
f01121b0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01121b3:	8a 00                	mov    (%eax),%al
f01121b5:	3c 78                	cmp    $0x78,%al
f01121b7:	75 18                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
f01121b9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01121bc:	8a 00                	mov    (%eax),%al
f01121be:	3c 66                	cmp    $0x66,%al
f01121c0:	75 0f                	jne    f01121d1 <test_copy_paste_chunk+0xbe3>
f01121c2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01121c5:	8a 10                	mov    (%eax),%dl
f01121c7:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01121cd:	38 c2                	cmp    %al,%dl
f01121cf:	74 21                	je     f01121f2 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01121d1:	83 ec 04             	sub    $0x4,%esp
f01121d4:	68 ec 89 13 f0       	push   $0xf01389ec
f01121d9:	68 04 03 00 00       	push   $0x304
f01121de:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01121e3:	e8 4a e1 fe ff       	call   f0100332 <_warn>
f01121e8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01121eb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01121f2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121f6:	74 04                	je     f01121fc <test_copy_paste_chunk+0xc0e>
f01121f8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01121fc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0112203:	83 ec 0c             	sub    $0xc,%esp
f0112206:	68 83 8b 13 f0       	push   $0xf0138b83
f011220b:	e8 1d ea fe ff       	call   f0100c2d <cprintf>
f0112210:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0112213:	83 ec 0c             	sub    $0xc,%esp
f0112216:	68 94 8b 13 f0       	push   $0xf0138b94
f011221b:	e8 0d ea fe ff       	call   f0100c2d <cprintf>
f0112220:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0112223:	83 ec 04             	sub    $0x4,%esp
f0112226:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011222c:	50                   	push   %eax
f011222d:	68 c8 8b 13 f0       	push   $0xf0138bc8
f0112232:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112238:	50                   	push   %eax
f0112239:	e8 7f e7 01 00       	call   f01309bd <strcconcat>
f011223e:	83 c4 10             	add    $0x10,%esp
f0112241:	83 ec 0c             	sub    $0xc,%esp
f0112244:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011224a:	50                   	push   %eax
f011224b:	e8 3f ea fe ff       	call   f0100c8f <execute_command>
f0112250:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0112253:	83 ec 04             	sub    $0x4,%esp
f0112256:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011225c:	50                   	push   %eax
f011225d:	68 d2 8b 13 f0       	push   $0xf0138bd2
f0112262:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112268:	50                   	push   %eax
f0112269:	e8 4f e7 01 00       	call   f01309bd <strcconcat>
f011226e:	83 c4 10             	add    $0x10,%esp
f0112271:	83 ec 0c             	sub    $0xc,%esp
f0112274:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011227a:	50                   	push   %eax
f011227b:	e8 0f ea fe ff       	call   f0100c8f <execute_command>
f0112280:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0112283:	83 ec 04             	sub    $0x4,%esp
f0112286:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011228c:	50                   	push   %eax
f011228d:	68 dc 8b 13 f0       	push   $0xf0138bdc
f0112292:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112298:	50                   	push   %eax
f0112299:	e8 1f e7 01 00       	call   f01309bd <strcconcat>
f011229e:	83 c4 10             	add    $0x10,%esp
f01122a1:	83 ec 0c             	sub    $0xc,%esp
f01122a4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01122aa:	50                   	push   %eax
f01122ab:	e8 df e9 fe ff       	call   f0100c8f <execute_command>
f01122b0:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01122b3:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01122b9:	bb 75 93 13 f0       	mov    $0xf0139375,%ebx
f01122be:	ba 0f 00 00 00       	mov    $0xf,%edx
f01122c3:	89 c7                	mov    %eax,%edi
f01122c5:	89 de                	mov    %ebx,%esi
f01122c7:	89 d1                	mov    %edx,%ecx
f01122c9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01122cb:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01122d1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01122d6:	b0 00                	mov    $0x0,%al
f01122d8:	89 d7                	mov    %edx,%edi
f01122da:	f3 aa                	rep stos %al,%es:(%edi)
f01122dc:	83 ec 0c             	sub    $0xc,%esp
f01122df:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01122e5:	50                   	push   %eax
f01122e6:	e8 a4 e9 fe ff       	call   f0100c8f <execute_command>
f01122eb:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01122ee:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01122f4:	bb d9 93 13 f0       	mov    $0xf01393d9,%ebx
f01122f9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01122fe:	89 c7                	mov    %eax,%edi
f0112300:	89 de                	mov    %ebx,%esi
f0112302:	89 d1                	mov    %edx,%ecx
f0112304:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112306:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011230c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112311:	b0 00                	mov    $0x0,%al
f0112313:	89 d7                	mov    %edx,%edi
f0112315:	f3 aa                	rep stos %al,%es:(%edi)
f0112317:	83 ec 0c             	sub    $0xc,%esp
f011231a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112320:	50                   	push   %eax
f0112321:	e8 69 e9 fe ff       	call   f0100c8f <execute_command>
f0112326:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112329:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011232f:	bb 3d 94 13 f0       	mov    $0xf013943d,%ebx
f0112334:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112339:	89 c7                	mov    %eax,%edi
f011233b:	89 de                	mov    %ebx,%esi
f011233d:	89 d1                	mov    %edx,%ecx
f011233f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112341:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112347:	b9 55 00 00 00       	mov    $0x55,%ecx
f011234c:	b0 00                	mov    $0x0,%al
f011234e:	89 d7                	mov    %edx,%edi
f0112350:	f3 aa                	rep stos %al,%es:(%edi)
f0112352:	83 ec 0c             	sub    $0xc,%esp
f0112355:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011235b:	50                   	push   %eax
f011235c:	e8 2e e9 fe ff       	call   f0100c8f <execute_command>
f0112361:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112364:	e8 49 9d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0112369:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f011236c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011236f:	89 d0                	mov    %edx,%eax
f0112371:	01 c0                	add    %eax,%eax
f0112373:	01 d0                	add    %edx,%eax
f0112375:	c1 e0 02             	shl    $0x2,%eax
f0112378:	50                   	push   %eax
f0112379:	68 00 00 90 00       	push   $0x900000
f011237e:	68 00 00 80 00       	push   $0x800000
f0112383:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112386:	e8 94 5d ff ff       	call   f010811f <copy_paste_chunk>
f011238b:	83 c4 10             	add    $0x10,%esp
f011238e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112394:	e8 19 9d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0112399:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011239c:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01123a3:	75 0b                	jne    f01123b0 <test_copy_paste_chunk+0xdc2>
f01123a5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01123a8:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01123ab:	83 f8 03             	cmp    $0x3,%eax
f01123ae:	74 2e                	je     f01123de <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01123b0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01123b3:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01123b6:	83 ec 0c             	sub    $0xc,%esp
f01123b9:	50                   	push   %eax
f01123ba:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01123c0:	68 98 8a 13 f0       	push   $0xf0138a98
f01123c5:	68 22 03 00 00       	push   $0x322
f01123ca:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01123cf:	e8 5e df fe ff       	call   f0100332 <_warn>
f01123d4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01123d7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01123de:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01123e2:	74 04                	je     f01123e8 <test_copy_paste_chunk+0xdfa>
f01123e4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01123e8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f01123ef:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01123f6:	83 ec 08             	sub    $0x8,%esp
f01123f9:	6a 01                	push   $0x1
f01123fb:	6a 07                	push   $0x7
f01123fd:	6a 07                	push   $0x7
f01123ff:	6a 07                	push   $0x7
f0112401:	6a 07                	push   $0x7
f0112403:	6a 01                	push   $0x1
f0112405:	68 00 30 00 00       	push   $0x3000
f011240a:	68 00 00 90 00       	push   $0x900000
f011240f:	68 00 00 80 00       	push   $0x800000
f0112414:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112417:	e8 19 31 00 00       	call   f0115535 <CCP>
f011241c:	83 c4 30             	add    $0x30,%esp
f011241f:	83 f8 01             	cmp    $0x1,%eax
f0112422:	74 28                	je     f011244c <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112424:	83 ec 04             	sub    $0x4,%esp
f0112427:	68 38 8b 13 f0       	push   $0xf0138b38
f011242c:	68 2b 03 00 00       	push   $0x32b
f0112431:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112436:	e8 f7 de fe ff       	call   f0100332 <_warn>
f011243b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011243e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112445:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f011244c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112450:	74 04                	je     f0112456 <test_copy_paste_chunk+0xe68>
f0112452:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112456:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011245d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112461:	0f 84 9e 00 00 00    	je     f0112505 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0112467:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011246e:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0112475:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f011247c:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0112483:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f011248a:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0112491:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112494:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0112497:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011249a:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f011249d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01124a0:	8a 00                	mov    (%eax),%al
f01124a2:	3c 61                	cmp    $0x61,%al
f01124a4:	75 2d                	jne    f01124d3 <test_copy_paste_chunk+0xee5>
f01124a6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124a9:	8a 00                	mov    (%eax),%al
f01124ab:	3c 61                	cmp    $0x61,%al
f01124ad:	75 24                	jne    f01124d3 <test_copy_paste_chunk+0xee5>
f01124af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01124b2:	8a 00                	mov    (%eax),%al
f01124b4:	3c 79                	cmp    $0x79,%al
f01124b6:	75 1b                	jne    f01124d3 <test_copy_paste_chunk+0xee5>
f01124b8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01124bb:	8a 00                	mov    (%eax),%al
f01124bd:	3c 62                	cmp    $0x62,%al
f01124bf:	75 12                	jne    f01124d3 <test_copy_paste_chunk+0xee5>
f01124c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01124c4:	8a 00                	mov    (%eax),%al
f01124c6:	3c 63                	cmp    $0x63,%al
f01124c8:	75 09                	jne    f01124d3 <test_copy_paste_chunk+0xee5>
f01124ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01124cd:	8a 00                	mov    (%eax),%al
f01124cf:	3c 7a                	cmp    $0x7a,%al
f01124d1:	74 21                	je     f01124f4 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01124d3:	83 ec 04             	sub    $0x4,%esp
f01124d6:	68 ec 89 13 f0       	push   $0xf01389ec
f01124db:	68 3d 03 00 00       	push   $0x33d
f01124e0:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01124e5:	e8 48 de fe ff       	call   f0100332 <_warn>
f01124ea:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01124ed:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f01124f4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01124f8:	74 04                	je     f01124fe <test_copy_paste_chunk+0xf10>
f01124fa:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f01124fe:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112505:	e8 a8 9b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011250a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f011250d:	6a 00                	push   $0x0
f011250f:	6a 02                	push   $0x2
f0112511:	68 00 10 90 00       	push   $0x901000
f0112516:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112519:	e8 59 2b 00 00       	call   f0115077 <SB>
f011251e:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0112521:	6a 00                	push   $0x0
f0112523:	6a 02                	push   $0x2
f0112525:	68 00 20 90 00       	push   $0x902000
f011252a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011252d:	e8 45 2b 00 00       	call   f0115077 <SB>
f0112532:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0112535:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112538:	c1 e0 03             	shl    $0x3,%eax
f011253b:	50                   	push   %eax
f011253c:	68 00 f0 bf 00       	push   $0xbff000
f0112541:	68 00 10 90 00       	push   $0x901000
f0112546:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112549:	e8 d1 5b ff ff       	call   f010811f <copy_paste_chunk>
f011254e:	83 c4 10             	add    $0x10,%esp
f0112551:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112557:	e8 56 9b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011255c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011255f:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112566:	75 0b                	jne    f0112573 <test_copy_paste_chunk+0xf85>
f0112568:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011256b:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011256e:	83 f8 03             	cmp    $0x3,%eax
f0112571:	74 2e                	je     f01125a1 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112573:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112576:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112579:	83 ec 0c             	sub    $0xc,%esp
f011257c:	50                   	push   %eax
f011257d:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112583:	68 98 8a 13 f0       	push   $0xf0138a98
f0112588:	68 4d 03 00 00       	push   $0x34d
f011258d:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112592:	e8 9b dd fe ff       	call   f0100332 <_warn>
f0112597:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011259a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01125a1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125a5:	74 04                	je     f01125ab <test_copy_paste_chunk+0xfbd>
f01125a7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01125ab:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01125b2:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01125b9:	83 ec 08             	sub    $0x8,%esp
f01125bc:	6a 01                	push   $0x1
f01125be:	6a 07                	push   $0x7
f01125c0:	6a 03                	push   $0x3
f01125c2:	6a 07                	push   $0x7
f01125c4:	6a 03                	push   $0x3
f01125c6:	6a 01                	push   $0x1
f01125c8:	68 00 20 00 00       	push   $0x2000
f01125cd:	68 00 f0 bf 00       	push   $0xbff000
f01125d2:	68 00 10 90 00       	push   $0x901000
f01125d7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125da:	e8 56 2f 00 00       	call   f0115535 <CCP>
f01125df:	83 c4 30             	add    $0x30,%esp
f01125e2:	83 f8 01             	cmp    $0x1,%eax
f01125e5:	74 28                	je     f011260f <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01125e7:	83 ec 04             	sub    $0x4,%esp
f01125ea:	68 38 8b 13 f0       	push   $0xf0138b38
f01125ef:	68 56 03 00 00       	push   $0x356
f01125f4:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01125f9:	e8 34 dd fe ff       	call   f0100332 <_warn>
f01125fe:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112601:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112608:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f011260f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112613:	74 04                	je     f0112619 <test_copy_paste_chunk+0x102b>
f0112615:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112619:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112620:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112624:	74 72                	je     f0112698 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0112626:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f011262d:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0112634:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f011263b:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0112642:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112645:	8a 00                	mov    (%eax),%al
f0112647:	3c 62                	cmp    $0x62,%al
f0112649:	75 1b                	jne    f0112666 <test_copy_paste_chunk+0x1078>
f011264b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011264e:	8a 00                	mov    (%eax),%al
f0112650:	3c 62                	cmp    $0x62,%al
f0112652:	75 12                	jne    f0112666 <test_copy_paste_chunk+0x1078>
f0112654:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112657:	8a 00                	mov    (%eax),%al
f0112659:	3c 7a                	cmp    $0x7a,%al
f011265b:	75 09                	jne    f0112666 <test_copy_paste_chunk+0x1078>
f011265d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112660:	8a 00                	mov    (%eax),%al
f0112662:	3c 7a                	cmp    $0x7a,%al
f0112664:	74 21                	je     f0112687 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112666:	83 ec 04             	sub    $0x4,%esp
f0112669:	68 ec 89 13 f0       	push   $0xf01389ec
f011266e:	68 62 03 00 00       	push   $0x362
f0112673:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112678:	e8 b5 dc fe ff       	call   f0100332 <_warn>
f011267d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112680:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112687:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011268b:	74 04                	je     f0112691 <test_copy_paste_chunk+0x10a3>
f011268d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112691:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112698:	83 ec 0c             	sub    $0xc,%esp
f011269b:	68 e6 8b 13 f0       	push   $0xf0138be6
f01126a0:	e8 88 e5 fe ff       	call   f0100c2d <cprintf>
f01126a5:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f01126a8:	83 ec 08             	sub    $0x8,%esp
f01126ab:	ff 75 e4             	pushl  -0x1c(%ebp)
f01126ae:	68 f8 8b 13 f0       	push   $0xf0138bf8
f01126b3:	e8 75 e5 fe ff       	call   f0100c2d <cprintf>
f01126b8:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01126bb:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01126bf:	75 10                	jne    f01126d1 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01126c1:	83 ec 0c             	sub    $0xc,%esp
f01126c4:	68 2c 8c 13 f0       	push   $0xf0138c2c
f01126c9:	e8 5f e5 fe ff       	call   f0100c2d <cprintf>
f01126ce:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01126d1:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01126d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01126d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01126dc:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01126df:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01126e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01126e7:	5b                   	pop    %ebx
f01126e8:	5e                   	pop    %esi
f01126e9:	5f                   	pop    %edi
f01126ea:	5d                   	pop    %ebp
f01126eb:	c3                   	ret    

f01126ec <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f01126ec:	55                   	push   %ebp
f01126ed:	89 e5                	mov    %esp,%ebp
f01126ef:	57                   	push   %edi
f01126f0:	56                   	push   %esi
f01126f1:	53                   	push   %ebx
f01126f2:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01126f8:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01126fe:	bb f8 88 13 f0       	mov    $0xf01388f8,%ebx
f0112703:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112708:	89 c7                	mov    %eax,%edi
f011270a:	89 de                	mov    %ebx,%esi
f011270c:	89 d1                	mov    %edx,%ecx
f011270e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112710:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0112716:	b9 23 00 00 00       	mov    $0x23,%ecx
f011271b:	b0 00                	mov    $0x0,%al
f011271d:	89 d7                	mov    %edx,%edi
f011271f:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112721:	6a 00                	push   $0x0
f0112723:	6a 0a                	push   $0xa
f0112725:	6a 14                	push   $0x14
f0112727:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011272d:	50                   	push   %eax
f011272e:	e8 33 5c ff ff       	call   f0108366 <env_create>
f0112733:	83 c4 10             	add    $0x10,%esp
f0112736:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112739:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011273c:	8b 40 5c             	mov    0x5c(%eax),%eax
f011273f:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0112742:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112745:	8b 40 60             	mov    0x60(%eax),%eax
f0112748:	89 45 80             	mov    %eax,-0x80(%ebp)
f011274b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011274e:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0112751:	83 ec 0c             	sub    $0xc,%esp
f0112754:	ff 75 cc             	pushl  -0x34(%ebp)
f0112757:	e8 a5 2d 00 00       	call   f0115501 <ClearUserSpace>
f011275c:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011275f:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112766:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f011276d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0112774:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0112778:	83 ec 0c             	sub    $0xc,%esp
f011277b:	68 a4 94 13 f0       	push   $0xf01394a4
f0112780:	e8 a8 e4 fe ff       	call   f0100c2d <cprintf>
f0112785:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0112788:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f011278f:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0112796:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112799:	8a 00                	mov    (%eax),%al
f011279b:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f01127a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127a4:	8a 00                	mov    (%eax),%al
f01127a6:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01127ac:	e8 01 99 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01127b1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f01127b4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01127b7:	89 d0                	mov    %edx,%eax
f01127b9:	01 c0                	add    %eax,%eax
f01127bb:	01 d0                	add    %edx,%eax
f01127bd:	01 c0                	add    %eax,%eax
f01127bf:	83 ec 0c             	sub    $0xc,%esp
f01127c2:	6a 02                	push   $0x2
f01127c4:	50                   	push   %eax
f01127c5:	68 00 40 10 f0       	push   $0xf0104000
f01127ca:	68 00 00 10 f0       	push   $0xf0100000
f01127cf:	ff 75 cc             	pushl  -0x34(%ebp)
f01127d2:	e8 62 59 ff ff       	call   f0108139 <share_chunk>
f01127d7:	83 c4 20             	add    $0x20,%esp
f01127da:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01127dd:	e8 d0 98 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01127e2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01127e5:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01127e9:	75 08                	jne    f01127f3 <test_share_chunk+0x107>
f01127eb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01127ee:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01127f1:	74 28                	je     f011281b <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f01127f3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01127f6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01127f9:	83 ec 0c             	sub    $0xc,%esp
f01127fc:	50                   	push   %eax
f01127fd:	ff 75 b0             	pushl  -0x50(%ebp)
f0112800:	68 d0 94 13 f0       	push   $0xf01394d0
f0112805:	68 9e 03 00 00       	push   $0x39e
f011280a:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011280f:	e8 1e db fe ff       	call   f0100332 <_warn>
f0112814:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112817:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011281b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011281f:	74 04                	je     f0112825 <test_share_chunk+0x139>
f0112821:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112825:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0112829:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011282c:	c1 e0 03             	shl    $0x3,%eax
f011282f:	83 ec 08             	sub    $0x8,%esp
f0112832:	68 fd 00 00 00       	push   $0xfd
f0112837:	6a 07                	push   $0x7
f0112839:	6a 03                	push   $0x3
f011283b:	6a 07                	push   $0x7
f011283d:	6a 03                	push   $0x3
f011283f:	6a 01                	push   $0x1
f0112841:	50                   	push   %eax
f0112842:	68 00 40 10 f0       	push   $0xf0104000
f0112847:	68 00 00 10 f0       	push   $0xf0100000
f011284c:	ff 75 cc             	pushl  -0x34(%ebp)
f011284f:	e8 e1 2c 00 00       	call   f0115535 <CCP>
f0112854:	83 c4 30             	add    $0x30,%esp
f0112857:	85 c0                	test   %eax,%eax
f0112859:	75 1e                	jne    f0112879 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011285b:	83 ec 04             	sub    $0x4,%esp
f011285e:	68 2c 95 13 f0       	push   $0xf013952c
f0112863:	68 a6 03 00 00       	push   $0x3a6
f0112868:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011286d:	e8 c0 da fe ff       	call   f0100332 <_warn>
f0112872:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112875:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112879:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011287d:	74 04                	je     f0112883 <test_share_chunk+0x197>
f011287f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0112883:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112886:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0112889:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011288c:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f011288f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112892:	8a 00                	mov    (%eax),%al
f0112894:	3c 41                	cmp    $0x41,%al
f0112896:	75 09                	jne    f01128a1 <test_share_chunk+0x1b5>
f0112898:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011289b:	8a 00                	mov    (%eax),%al
f011289d:	3c 42                	cmp    $0x42,%al
f011289f:	74 1e                	je     f01128bf <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01128a1:	83 ec 04             	sub    $0x4,%esp
f01128a4:	68 74 95 13 f0       	push   $0xf0139574
f01128a9:	68 b0 03 00 00       	push   $0x3b0
f01128ae:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01128b3:	e8 7a da fe ff       	call   f0100332 <_warn>
f01128b8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01128bb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01128bf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01128c3:	74 04                	je     f01128c9 <test_share_chunk+0x1dd>
f01128c5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01128c9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01128cd:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01128d3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01128d6:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01128d8:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01128de:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01128e1:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01128e3:	83 ec 0c             	sub    $0xc,%esp
f01128e6:	68 a9 95 13 f0       	push   $0xf01395a9
f01128eb:	e8 3d e3 fe ff       	call   f0100c2d <cprintf>
f01128f0:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f01128f3:	83 ec 0c             	sub    $0xc,%esp
f01128f6:	68 b8 95 13 f0       	push   $0xf01395b8
f01128fb:	e8 2d e3 fe ff       	call   f0100c2d <cprintf>
f0112900:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112903:	e8 aa 97 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0112908:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011290b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011290e:	c1 e0 05             	shl    $0x5,%eax
f0112911:	83 ec 0c             	sub    $0xc,%esp
f0112914:	68 02 0e 00 00       	push   $0xe02
f0112919:	50                   	push   %eax
f011291a:	68 00 00 00 40       	push   $0x40000000
f011291f:	68 00 00 00 f0       	push   $0xf0000000
f0112924:	ff 75 cc             	pushl  -0x34(%ebp)
f0112927:	e8 0d 58 ff ff       	call   f0108139 <share_chunk>
f011292c:	83 c4 20             	add    $0x20,%esp
f011292f:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112932:	e8 7b 97 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0112937:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f011293a:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f011293e:	75 1f                	jne    f011295f <test_share_chunk+0x273>
f0112940:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112943:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112946:	89 c1                	mov    %eax,%ecx
f0112948:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011294b:	c1 e0 05             	shl    $0x5,%eax
f011294e:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112951:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0112958:	99                   	cltd   
f0112959:	f7 fb                	idiv   %ebx
f011295b:	39 c1                	cmp    %eax,%ecx
f011295d:	74 28                	je     f0112987 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011295f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112962:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112965:	83 ec 0c             	sub    $0xc,%esp
f0112968:	50                   	push   %eax
f0112969:	ff 75 a8             	pushl  -0x58(%ebp)
f011296c:	68 f4 95 13 f0       	push   $0xf01395f4
f0112971:	68 c8 03 00 00       	push   $0x3c8
f0112976:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011297b:	e8 b2 d9 fe ff       	call   f0100332 <_warn>
f0112980:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112983:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112987:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011298b:	74 04                	je     f0112991 <test_share_chunk+0x2a5>
f011298d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112991:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112995:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011299c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011299f:	c1 e0 05             	shl    $0x5,%eax
f01129a2:	83 ec 08             	sub    $0x8,%esp
f01129a5:	6a 02                	push   $0x2
f01129a7:	6a 07                	push   $0x7
f01129a9:	6a 03                	push   $0x3
f01129ab:	68 07 0e 00 00       	push   $0xe07
f01129b0:	68 03 0e 00 00       	push   $0xe03
f01129b5:	6a ff                	push   $0xffffffff
f01129b7:	50                   	push   %eax
f01129b8:	68 00 00 00 40       	push   $0x40000000
f01129bd:	68 00 00 00 f0       	push   $0xf0000000
f01129c2:	ff 75 cc             	pushl  -0x34(%ebp)
f01129c5:	e8 6b 2b 00 00       	call   f0115535 <CCP>
f01129ca:	83 c4 30             	add    $0x30,%esp
f01129cd:	85 c0                	test   %eax,%eax
f01129cf:	75 25                	jne    f01129f6 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01129d1:	83 ec 04             	sub    $0x4,%esp
f01129d4:	68 2c 95 13 f0       	push   $0xf013952c
f01129d9:	68 d1 03 00 00       	push   $0x3d1
f01129de:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01129e3:	e8 4a d9 fe ff       	call   f0100332 <_warn>
f01129e8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01129eb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01129ef:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01129f6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01129f9:	89 d0                	mov    %edx,%eax
f01129fb:	01 c0                	add    %eax,%eax
f01129fd:	01 d0                	add    %edx,%eax
f01129ff:	c1 e0 02             	shl    $0x2,%eax
f0112a02:	83 ec 08             	sub    $0x8,%esp
f0112a05:	6a 02                	push   $0x2
f0112a07:	6a 07                	push   $0x7
f0112a09:	6a 03                	push   $0x3
f0112a0b:	68 07 0e 00 00       	push   $0xe07
f0112a10:	68 03 0e 00 00       	push   $0xe03
f0112a15:	6a 02                	push   $0x2
f0112a17:	50                   	push   %eax
f0112a18:	68 00 00 00 40       	push   $0x40000000
f0112a1d:	68 00 00 00 f0       	push   $0xf0000000
f0112a22:	ff 75 cc             	pushl  -0x34(%ebp)
f0112a25:	e8 0b 2b 00 00       	call   f0115535 <CCP>
f0112a2a:	83 c4 30             	add    $0x30,%esp
f0112a2d:	85 c0                	test   %eax,%eax
f0112a2f:	75 1e                	jne    f0112a4f <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112a31:	83 ec 04             	sub    $0x4,%esp
f0112a34:	68 2c 95 13 f0       	push   $0xf013952c
f0112a39:	68 d8 03 00 00       	push   $0x3d8
f0112a3e:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112a43:	e8 ea d8 fe ff       	call   f0100332 <_warn>
f0112a48:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a4b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112a4f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112a53:	74 04                	je     f0112a59 <test_share_chunk+0x36d>
f0112a55:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a59:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0112a5d:	b8 1c 86 6e f0       	mov    $0xf06e861c,%eax
f0112a62:	05 00 00 00 10       	add    $0x10000000,%eax
f0112a67:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112a6a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112a6d:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0112a72:	83 ec 08             	sub    $0x8,%esp
f0112a75:	6a 02                	push   $0x2
f0112a77:	6a 07                	push   $0x7
f0112a79:	6a 03                	push   $0x3
f0112a7b:	68 07 0e 00 00       	push   $0xe07
f0112a80:	68 03 0e 00 00       	push   $0xe03
f0112a85:	6a 02                	push   $0x2
f0112a87:	50                   	push   %eax
f0112a88:	68 00 00 0a 40       	push   $0x400a0000
f0112a8d:	68 00 00 0a f0       	push   $0xf00a0000
f0112a92:	ff 75 cc             	pushl  -0x34(%ebp)
f0112a95:	e8 9b 2a 00 00       	call   f0115535 <CCP>
f0112a9a:	83 c4 30             	add    $0x30,%esp
f0112a9d:	85 c0                	test   %eax,%eax
f0112a9f:	75 1e                	jne    f0112abf <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112aa1:	83 ec 04             	sub    $0x4,%esp
f0112aa4:	68 2c 95 13 f0       	push   $0xf013952c
f0112aa9:	68 e2 03 00 00       	push   $0x3e2
f0112aae:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112ab3:	e8 7a d8 fe ff       	call   f0100332 <_warn>
f0112ab8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112abb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112abf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112ac3:	74 04                	je     f0112ac9 <test_share_chunk+0x3dd>
f0112ac5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ac9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112acd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112ad1:	0f 84 a4 00 00 00    	je     f0112b7b <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0112ad7:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0112ade:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112ae1:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0112ae4:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0112aeb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112aee:	8a 00                	mov    (%eax),%al
f0112af0:	3c 41                	cmp    $0x41,%al
f0112af2:	75 09                	jne    f0112afd <test_share_chunk+0x411>
f0112af4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112af7:	8a 00                	mov    (%eax),%al
f0112af9:	3c 41                	cmp    $0x41,%al
f0112afb:	74 1e                	je     f0112b1b <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112afd:	83 ec 04             	sub    $0x4,%esp
f0112b00:	68 74 95 13 f0       	push   $0xf0139574
f0112b05:	68 ef 03 00 00       	push   $0x3ef
f0112b0a:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112b0f:	e8 1e d8 fe ff       	call   f0100332 <_warn>
f0112b14:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112b17:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112b1b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112b1f:	74 04                	je     f0112b25 <test_share_chunk+0x439>
f0112b21:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112b25:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0112b29:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0112b30:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112b33:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0112b36:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0112b3d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112b40:	8a 00                	mov    (%eax),%al
f0112b42:	3c 43                	cmp    $0x43,%al
f0112b44:	75 09                	jne    f0112b4f <test_share_chunk+0x463>
f0112b46:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b49:	8a 00                	mov    (%eax),%al
f0112b4b:	3c 43                	cmp    $0x43,%al
f0112b4d:	74 1e                	je     f0112b6d <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112b4f:	83 ec 04             	sub    $0x4,%esp
f0112b52:	68 74 95 13 f0       	push   $0xf0139574
f0112b57:	68 fa 03 00 00       	push   $0x3fa
f0112b5c:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112b61:	e8 cc d7 fe ff       	call   f0100332 <_warn>
f0112b66:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112b69:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112b6d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112b71:	74 04                	je     f0112b77 <test_share_chunk+0x48b>
f0112b73:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112b77:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0112b7b:	83 ec 0c             	sub    $0xc,%esp
f0112b7e:	68 83 8b 13 f0       	push   $0xf0138b83
f0112b83:	e8 a5 e0 fe ff       	call   f0100c2d <cprintf>
f0112b88:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0112b8b:	83 ec 0c             	sub    $0xc,%esp
f0112b8e:	68 44 96 13 f0       	push   $0xf0139644
f0112b93:	e8 95 e0 fe ff       	call   f0100c2d <cprintf>
f0112b98:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112b9b:	e8 12 95 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0112ba0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0112ba3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112ba6:	89 d0                	mov    %edx,%eax
f0112ba8:	c1 e0 03             	shl    $0x3,%eax
f0112bab:	01 d0                	add    %edx,%eax
f0112bad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0112bb4:	01 d0                	add    %edx,%eax
f0112bb6:	c1 e0 03             	shl    $0x3,%eax
f0112bb9:	83 ec 0c             	sub    $0xc,%esp
f0112bbc:	6a 06                	push   $0x6
f0112bbe:	50                   	push   %eax
f0112bbf:	6a 00                	push   $0x0
f0112bc1:	68 00 00 00 40       	push   $0x40000000
f0112bc6:	ff 75 cc             	pushl  -0x34(%ebp)
f0112bc9:	e8 6b 55 ff ff       	call   f0108139 <share_chunk>
f0112bce:	83 c4 20             	add    $0x20,%esp
f0112bd1:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112bd4:	e8 d9 94 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0112bd9:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0112bdc:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0112be0:	75 0b                	jne    f0112bed <test_share_chunk+0x501>
f0112be2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112be5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112be8:	83 f8 01             	cmp    $0x1,%eax
f0112beb:	74 28                	je     f0112c15 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112bed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112bf0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112bf3:	83 ec 0c             	sub    $0xc,%esp
f0112bf6:	50                   	push   %eax
f0112bf7:	ff 75 a0             	pushl  -0x60(%ebp)
f0112bfa:	68 f4 95 13 f0       	push   $0xf01395f4
f0112bff:	68 10 04 00 00       	push   $0x410
f0112c04:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112c09:	e8 24 d7 fe ff       	call   f0100332 <_warn>
f0112c0e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112c11:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112c15:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112c19:	74 04                	je     f0112c1f <test_share_chunk+0x533>
f0112c1b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c1f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112c23:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112c2a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112c2d:	05 00 80 02 00       	add    $0x28000,%eax
f0112c32:	c1 e0 02             	shl    $0x2,%eax
f0112c35:	83 ec 08             	sub    $0x8,%esp
f0112c38:	6a 02                	push   $0x2
f0112c3a:	6a 07                	push   $0x7
f0112c3c:	6a 03                	push   $0x3
f0112c3e:	6a 07                	push   $0x7
f0112c40:	6a 07                	push   $0x7
f0112c42:	6a ff                	push   $0xffffffff
f0112c44:	50                   	push   %eax
f0112c45:	6a 00                	push   $0x0
f0112c47:	68 00 00 00 40       	push   $0x40000000
f0112c4c:	ff 75 cc             	pushl  -0x34(%ebp)
f0112c4f:	e8 e1 28 00 00       	call   f0115535 <CCP>
f0112c54:	83 c4 30             	add    $0x30,%esp
f0112c57:	85 c0                	test   %eax,%eax
f0112c59:	75 25                	jne    f0112c80 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112c5b:	83 ec 04             	sub    $0x4,%esp
f0112c5e:	68 2c 95 13 f0       	push   $0xf013952c
f0112c63:	68 19 04 00 00       	push   $0x419
f0112c68:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112c6d:	e8 c0 d6 fe ff       	call   f0100332 <_warn>
f0112c72:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112c75:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112c79:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112c80:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112c83:	89 d0                	mov    %edx,%eax
f0112c85:	01 c0                	add    %eax,%eax
f0112c87:	01 d0                	add    %edx,%eax
f0112c89:	c1 e0 02             	shl    $0x2,%eax
f0112c8c:	83 ec 08             	sub    $0x8,%esp
f0112c8f:	6a 02                	push   $0x2
f0112c91:	6a 07                	push   $0x7
f0112c93:	6a 03                	push   $0x3
f0112c95:	6a 07                	push   $0x7
f0112c97:	6a 07                	push   $0x7
f0112c99:	6a 03                	push   $0x3
f0112c9b:	50                   	push   %eax
f0112c9c:	6a 00                	push   $0x0
f0112c9e:	68 00 00 00 40       	push   $0x40000000
f0112ca3:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ca6:	e8 8a 28 00 00       	call   f0115535 <CCP>
f0112cab:	83 c4 30             	add    $0x30,%esp
f0112cae:	85 c0                	test   %eax,%eax
f0112cb0:	75 1e                	jne    f0112cd0 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112cb2:	83 ec 04             	sub    $0x4,%esp
f0112cb5:	68 2c 95 13 f0       	push   $0xf013952c
f0112cba:	68 20 04 00 00       	push   $0x420
f0112cbf:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112cc4:	e8 69 d6 fe ff       	call   f0100332 <_warn>
f0112cc9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ccc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112cd0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112cd4:	74 04                	je     f0112cda <test_share_chunk+0x5ee>
f0112cd6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112cda:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112cde:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112ce1:	89 d0                	mov    %edx,%eax
f0112ce3:	01 c0                	add    %eax,%eax
f0112ce5:	01 d0                	add    %edx,%eax
f0112ce7:	c1 e0 02             	shl    $0x2,%eax
f0112cea:	f7 d8                	neg    %eax
f0112cec:	05 00 00 0a 00       	add    $0xa0000,%eax
f0112cf1:	83 ec 08             	sub    $0x8,%esp
f0112cf4:	6a 02                	push   $0x2
f0112cf6:	6a 07                	push   $0x7
f0112cf8:	6a 03                	push   $0x3
f0112cfa:	6a 07                	push   $0x7
f0112cfc:	6a 07                	push   $0x7
f0112cfe:	6a 02                	push   $0x2
f0112d00:	50                   	push   %eax
f0112d01:	68 00 30 00 00       	push   $0x3000
f0112d06:	68 00 30 00 40       	push   $0x40003000
f0112d0b:	ff 75 cc             	pushl  -0x34(%ebp)
f0112d0e:	e8 22 28 00 00       	call   f0115535 <CCP>
f0112d13:	83 c4 30             	add    $0x30,%esp
f0112d16:	85 c0                	test   %eax,%eax
f0112d18:	75 1e                	jne    f0112d38 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112d1a:	83 ec 04             	sub    $0x4,%esp
f0112d1d:	68 2c 95 13 f0       	push   $0xf013952c
f0112d22:	68 28 04 00 00       	push   $0x428
f0112d27:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112d2c:	e8 01 d6 fe ff       	call   f0100332 <_warn>
f0112d31:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d34:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112d38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112d3c:	74 04                	je     f0112d42 <test_share_chunk+0x656>
f0112d3e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112d46:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112d49:	c1 e0 02             	shl    $0x2,%eax
f0112d4c:	83 ec 08             	sub    $0x8,%esp
f0112d4f:	6a 02                	push   $0x2
f0112d51:	6a 07                	push   $0x7
f0112d53:	6a 03                	push   $0x3
f0112d55:	6a 07                	push   $0x7
f0112d57:	6a 07                	push   $0x7
f0112d59:	6a 03                	push   $0x3
f0112d5b:	50                   	push   %eax
f0112d5c:	68 00 00 0a 00       	push   $0xa0000
f0112d61:	68 00 00 0a 40       	push   $0x400a0000
f0112d66:	ff 75 cc             	pushl  -0x34(%ebp)
f0112d69:	e8 c7 27 00 00       	call   f0115535 <CCP>
f0112d6e:	83 c4 30             	add    $0x30,%esp
f0112d71:	85 c0                	test   %eax,%eax
f0112d73:	75 1e                	jne    f0112d93 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112d75:	83 ec 04             	sub    $0x4,%esp
f0112d78:	68 2c 95 13 f0       	push   $0xf013952c
f0112d7d:	68 30 04 00 00       	push   $0x430
f0112d82:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112d87:	e8 a6 d5 fe ff       	call   f0100332 <_warn>
f0112d8c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d8f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112d93:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112d97:	74 04                	je     f0112d9d <test_share_chunk+0x6b1>
f0112d99:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d9d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112da1:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0112da5:	0f 84 92 00 00 00    	je     f0112e3d <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0112dab:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0112db2:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0112db9:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0112dc0:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0112dc7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112dca:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0112dcd:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0112dd4:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0112ddb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112dde:	8a 00                	mov    (%eax),%al
f0112de0:	3c 41                	cmp    $0x41,%al
f0112de2:	75 2d                	jne    f0112e11 <test_share_chunk+0x725>
f0112de4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112de7:	8a 00                	mov    (%eax),%al
f0112de9:	3c 41                	cmp    $0x41,%al
f0112deb:	75 24                	jne    f0112e11 <test_share_chunk+0x725>
f0112ded:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112df0:	8a 00                	mov    (%eax),%al
f0112df2:	3c 41                	cmp    $0x41,%al
f0112df4:	75 1b                	jne    f0112e11 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0112df6:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112df9:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0112dfb:	3c 44                	cmp    $0x44,%al
f0112dfd:	75 12                	jne    f0112e11 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0112dff:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112e02:	8a 00                	mov    (%eax),%al
f0112e04:	3c 44                	cmp    $0x44,%al
f0112e06:	75 09                	jne    f0112e11 <test_share_chunk+0x725>
f0112e08:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112e0b:	8a 00                	mov    (%eax),%al
f0112e0d:	3c 44                	cmp    $0x44,%al
f0112e0f:	74 1e                	je     f0112e2f <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112e11:	83 ec 04             	sub    $0x4,%esp
f0112e14:	68 74 95 13 f0       	push   $0xf0139574
f0112e19:	68 42 04 00 00       	push   $0x442
f0112e1e:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112e23:	e8 0a d5 fe ff       	call   f0100332 <_warn>
f0112e28:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112e2b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112e2f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112e33:	74 04                	je     f0112e39 <test_share_chunk+0x74d>
f0112e35:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112e39:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112e3d:	83 ec 0c             	sub    $0xc,%esp
f0112e40:	68 e6 8b 13 f0       	push   $0xf0138be6
f0112e45:	e8 e3 dd fe ff       	call   f0100c2d <cprintf>
f0112e4a:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0112e4d:	83 ec 0c             	sub    $0xc,%esp
f0112e50:	68 80 96 13 f0       	push   $0xf0139680
f0112e55:	e8 d3 dd fe ff       	call   f0100c2d <cprintf>
f0112e5a:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112e5d:	e8 50 92 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0112e62:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0112e65:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112e68:	89 d0                	mov    %edx,%eax
f0112e6a:	01 c0                	add    %eax,%eax
f0112e6c:	01 d0                	add    %edx,%eax
f0112e6e:	01 c0                	add    %eax,%eax
f0112e70:	01 d0                	add    %edx,%eax
f0112e72:	83 ec 0c             	sub    $0xc,%esp
f0112e75:	6a 04                	push   $0x4
f0112e77:	50                   	push   %eax
f0112e78:	68 00 fc 3f 00       	push   $0x3ffc00
f0112e7d:	68 00 fc 09 00       	push   $0x9fc00
f0112e82:	ff 75 cc             	pushl  -0x34(%ebp)
f0112e85:	e8 af 52 ff ff       	call   f0108139 <share_chunk>
f0112e8a:	83 c4 20             	add    $0x20,%esp
f0112e8d:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112e90:	e8 1d 92 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0112e95:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0112e98:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0112e9c:	75 0b                	jne    f0112ea9 <test_share_chunk+0x7bd>
f0112e9e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112ea1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112ea4:	83 f8 01             	cmp    $0x1,%eax
f0112ea7:	74 28                	je     f0112ed1 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112ea9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112eac:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112eaf:	83 ec 0c             	sub    $0xc,%esp
f0112eb2:	50                   	push   %eax
f0112eb3:	ff 75 8c             	pushl  -0x74(%ebp)
f0112eb6:	68 f4 95 13 f0       	push   $0xf01395f4
f0112ebb:	68 58 04 00 00       	push   $0x458
f0112ec0:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112ec5:	e8 68 d4 fe ff       	call   f0100332 <_warn>
f0112eca:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112ecd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112ed1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112ed5:	74 04                	je     f0112edb <test_share_chunk+0x7ef>
f0112ed7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112edb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112edf:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112ee6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112ee9:	89 d0                	mov    %edx,%eax
f0112eeb:	01 c0                	add    %eax,%eax
f0112eed:	01 d0                	add    %edx,%eax
f0112eef:	c1 e0 02             	shl    $0x2,%eax
f0112ef2:	83 ec 08             	sub    $0x8,%esp
f0112ef5:	6a 02                	push   $0x2
f0112ef7:	6a 07                	push   $0x7
f0112ef9:	6a 07                	push   $0x7
f0112efb:	6a 07                	push   $0x7
f0112efd:	6a 05                	push   $0x5
f0112eff:	6a ff                	push   $0xffffffff
f0112f01:	50                   	push   %eax
f0112f02:	68 00 f0 3f 00       	push   $0x3ff000
f0112f07:	68 00 f0 09 00       	push   $0x9f000
f0112f0c:	ff 75 cc             	pushl  -0x34(%ebp)
f0112f0f:	e8 21 26 00 00       	call   f0115535 <CCP>
f0112f14:	83 c4 30             	add    $0x30,%esp
f0112f17:	85 c0                	test   %eax,%eax
f0112f19:	75 25                	jne    f0112f40 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112f1b:	83 ec 04             	sub    $0x4,%esp
f0112f1e:	68 2c 95 13 f0       	push   $0xf013952c
f0112f23:	68 61 04 00 00       	push   $0x461
f0112f28:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112f2d:	e8 00 d4 fe ff       	call   f0100332 <_warn>
f0112f32:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f35:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112f39:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0112f40:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112f44:	74 04                	je     f0112f4a <test_share_chunk+0x85e>
f0112f46:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112f4a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112f4e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112f51:	c1 e0 02             	shl    $0x2,%eax
f0112f54:	83 ec 08             	sub    $0x8,%esp
f0112f57:	6a 02                	push   $0x2
f0112f59:	6a 07                	push   $0x7
f0112f5b:	6a 07                	push   $0x7
f0112f5d:	6a 07                	push   $0x7
f0112f5f:	6a 05                	push   $0x5
f0112f61:	6a 03                	push   $0x3
f0112f63:	50                   	push   %eax
f0112f64:	68 00 f0 3f 00       	push   $0x3ff000
f0112f69:	68 00 f0 09 00       	push   $0x9f000
f0112f6e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112f71:	e8 bf 25 00 00       	call   f0115535 <CCP>
f0112f76:	83 c4 30             	add    $0x30,%esp
f0112f79:	85 c0                	test   %eax,%eax
f0112f7b:	75 1e                	jne    f0112f9b <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112f7d:	83 ec 04             	sub    $0x4,%esp
f0112f80:	68 2c 95 13 f0       	push   $0xf013952c
f0112f85:	68 6a 04 00 00       	push   $0x46a
f0112f8a:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112f8f:	e8 9e d3 fe ff       	call   f0100332 <_warn>
f0112f94:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f97:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112f9b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112f9f:	74 04                	je     f0112fa5 <test_share_chunk+0x8b9>
f0112fa1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112fa5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112fa9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112fac:	c1 e0 03             	shl    $0x3,%eax
f0112faf:	83 ec 08             	sub    $0x8,%esp
f0112fb2:	6a 02                	push   $0x2
f0112fb4:	6a 07                	push   $0x7
f0112fb6:	6a 07                	push   $0x7
f0112fb8:	6a 07                	push   $0x7
f0112fba:	6a 05                	push   $0x5
f0112fbc:	6a 04                	push   $0x4
f0112fbe:	50                   	push   %eax
f0112fbf:	68 00 00 40 00       	push   $0x400000
f0112fc4:	68 00 00 0a 00       	push   $0xa0000
f0112fc9:	ff 75 cc             	pushl  -0x34(%ebp)
f0112fcc:	e8 64 25 00 00       	call   f0115535 <CCP>
f0112fd1:	83 c4 30             	add    $0x30,%esp
f0112fd4:	85 c0                	test   %eax,%eax
f0112fd6:	75 1e                	jne    f0112ff6 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112fd8:	83 ec 04             	sub    $0x4,%esp
f0112fdb:	68 2c 95 13 f0       	push   $0xf013952c
f0112fe0:	68 72 04 00 00       	push   $0x472
f0112fe5:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0112fea:	e8 43 d3 fe ff       	call   f0100332 <_warn>
f0112fef:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ff2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112ff6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112ffa:	74 04                	je     f0113000 <test_share_chunk+0x914>
f0112ffc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113000:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113004:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0113008:	0f 84 b2 00 00 00    	je     f01130c0 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f011300e:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0113015:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f011301c:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0113023:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f011302a:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0113031:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113038:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f011303f:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113046:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113049:	8a 00                	mov    (%eax),%al
f011304b:	3c 44                	cmp    $0x44,%al
f011304d:	75 45                	jne    f0113094 <test_share_chunk+0x9a8>
f011304f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113052:	8a 00                	mov    (%eax),%al
f0113054:	3c 44                	cmp    $0x44,%al
f0113056:	75 3c                	jne    f0113094 <test_share_chunk+0x9a8>
f0113058:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011305b:	8a 00                	mov    (%eax),%al
f011305d:	3c 44                	cmp    $0x44,%al
f011305f:	75 33                	jne    f0113094 <test_share_chunk+0x9a8>
f0113061:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113064:	8a 00                	mov    (%eax),%al
f0113066:	3c 44                	cmp    $0x44,%al
f0113068:	75 2a                	jne    f0113094 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011306a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011306d:	8a 10                	mov    (%eax),%dl
f011306f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113072:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113074:	38 c2                	cmp    %al,%dl
f0113076:	75 1c                	jne    f0113094 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113078:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011307b:	8a 10                	mov    (%eax),%dl
f011307d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113080:	8a 00                	mov    (%eax),%al
f0113082:	38 c2                	cmp    %al,%dl
f0113084:	75 0e                	jne    f0113094 <test_share_chunk+0x9a8>
f0113086:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113089:	8a 10                	mov    (%eax),%dl
f011308b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011308e:	8a 00                	mov    (%eax),%al
f0113090:	38 c2                	cmp    %al,%dl
f0113092:	74 1e                	je     f01130b2 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113094:	83 ec 04             	sub    $0x4,%esp
f0113097:	68 74 95 13 f0       	push   $0xf0139574
f011309c:	68 87 04 00 00       	push   $0x487
f01130a1:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01130a6:	e8 87 d2 fe ff       	call   f0100332 <_warn>
f01130ab:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01130ae:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01130b2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01130b6:	74 04                	je     f01130bc <test_share_chunk+0x9d0>
f01130b8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01130bc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01130c0:	83 ec 0c             	sub    $0xc,%esp
f01130c3:	68 b8 96 13 f0       	push   $0xf01396b8
f01130c8:	e8 60 db fe ff       	call   f0100c2d <cprintf>
f01130cd:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01130d0:	83 ec 08             	sub    $0x8,%esp
f01130d3:	ff 75 e4             	pushl  -0x1c(%ebp)
f01130d6:	68 c8 96 13 f0       	push   $0xf01396c8
f01130db:	e8 4d db fe ff       	call   f0100c2d <cprintf>
f01130e0:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01130e3:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01130e7:	75 10                	jne    f01130f9 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01130e9:	83 ec 0c             	sub    $0xc,%esp
f01130ec:	68 f8 96 13 f0       	push   $0xf01396f8
f01130f1:	e8 37 db fe ff       	call   f0100c2d <cprintf>
f01130f6:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01130f9:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01130fe:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0113101:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113104:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113107:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011310c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011310f:	5b                   	pop    %ebx
f0113110:	5e                   	pop    %esi
f0113111:	5f                   	pop    %edi
f0113112:	5d                   	pop    %ebp
f0113113:	c3                   	ret    

f0113114 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0113114:	55                   	push   %ebp
f0113115:	89 e5                	mov    %esp,%ebp
f0113117:	57                   	push   %edi
f0113118:	56                   	push   %esi
f0113119:	53                   	push   %ebx
f011311a:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113120:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113126:	bb f8 88 13 f0       	mov    $0xf01388f8,%ebx
f011312b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113130:	89 c7                	mov    %eax,%edi
f0113132:	89 de                	mov    %ebx,%esi
f0113134:	89 d1                	mov    %edx,%ecx
f0113136:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113138:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011313e:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113143:	b0 00                	mov    $0x0,%al
f0113145:	89 d7                	mov    %edx,%edi
f0113147:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113149:	6a 00                	push   $0x0
f011314b:	6a 0a                	push   $0xa
f011314d:	6a 14                	push   $0x14
f011314f:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113155:	50                   	push   %eax
f0113156:	e8 0b 52 ff ff       	call   f0108366 <env_create>
f011315b:	83 c4 10             	add    $0x10,%esp
f011315e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113161:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113164:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113167:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f011316a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011316d:	8b 40 60             	mov    0x60(%eax),%eax
f0113170:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113173:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113176:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113179:	83 ec 0c             	sub    $0xc,%esp
f011317c:	ff 75 d0             	pushl  -0x30(%ebp)
f011317f:	e8 7d 23 00 00       	call   f0115501 <ClearUserSpace>
f0113184:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113187:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011318e:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0113195:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011319c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f01131a0:	83 ec 0c             	sub    $0xc,%esp
f01131a3:	68 34 97 13 f0       	push   $0xf0139734
f01131a8:	e8 80 da fe ff       	call   f0100c2d <cprintf>
f01131ad:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f01131b0:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f01131b7:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f01131be:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01131c1:	8a 00                	mov    (%eax),%al
f01131c3:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01131c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01131cc:	8a 00                	mov    (%eax),%al
f01131ce:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01131d4:	83 ec 08             	sub    $0x8,%esp
f01131d7:	68 00 f0 bf ef       	push   $0xefbff000
f01131dc:	ff 75 d0             	pushl  -0x30(%ebp)
f01131df:	e8 84 22 00 00       	call   f0115468 <GP>
f01131e4:	83 c4 10             	add    $0x10,%esp
f01131e7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01131ea:	e8 c3 8e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01131ef:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01131f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01131f5:	c1 e0 02             	shl    $0x2,%eax
f01131f8:	6a 02                	push   $0x2
f01131fa:	50                   	push   %eax
f01131fb:	68 00 f0 bf ef       	push   $0xefbff000
f0113200:	ff 75 d0             	pushl  -0x30(%ebp)
f0113203:	e8 4b 4f ff ff       	call   f0108153 <allocate_chunk>
f0113208:	83 c4 10             	add    $0x10,%esp
f011320b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011320e:	e8 9f 8e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0113213:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113216:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011321a:	75 08                	jne    f0113224 <test_allocate_chunk+0x110>
f011321c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011321f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113222:	74 2a                	je     f011324e <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113224:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113227:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011322a:	83 ec 08             	sub    $0x8,%esp
f011322d:	6a 00                	push   $0x0
f011322f:	50                   	push   %eax
f0113230:	ff 75 b0             	pushl  -0x50(%ebp)
f0113233:	68 60 97 13 f0       	push   $0xf0139760
f0113238:	68 c3 04 00 00       	push   $0x4c3
f011323d:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113242:	e8 eb d0 fe ff       	call   f0100332 <_warn>
f0113247:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011324a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011324e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113252:	74 04                	je     f0113258 <test_allocate_chunk+0x144>
f0113254:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113258:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011325c:	e8 51 8e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0113261:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0113264:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113267:	01 c0                	add    %eax,%eax
f0113269:	89 c1                	mov    %eax,%ecx
f011326b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011326e:	89 d0                	mov    %edx,%eax
f0113270:	c1 e0 02             	shl    $0x2,%eax
f0113273:	01 d0                	add    %edx,%eax
f0113275:	f7 d8                	neg    %eax
f0113277:	2d 00 00 40 10       	sub    $0x10400000,%eax
f011327c:	6a 02                	push   $0x2
f011327e:	51                   	push   %ecx
f011327f:	50                   	push   %eax
f0113280:	ff 75 d0             	pushl  -0x30(%ebp)
f0113283:	e8 cb 4e ff ff       	call   f0108153 <allocate_chunk>
f0113288:	83 c4 10             	add    $0x10,%esp
f011328b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011328e:	e8 1f 8e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0113293:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113296:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011329a:	75 08                	jne    f01132a4 <test_allocate_chunk+0x190>
f011329c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011329f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01132a2:	74 2a                	je     f01132ce <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01132a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132a7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01132aa:	83 ec 08             	sub    $0x8,%esp
f01132ad:	6a 00                	push   $0x0
f01132af:	50                   	push   %eax
f01132b0:	ff 75 b0             	pushl  -0x50(%ebp)
f01132b3:	68 60 97 13 f0       	push   $0xf0139760
f01132b8:	68 d1 04 00 00       	push   $0x4d1
f01132bd:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01132c2:	e8 6b d0 fe ff       	call   f0100332 <_warn>
f01132c7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01132ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01132ce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01132d2:	74 04                	je     f01132d8 <test_allocate_chunk+0x1c4>
f01132d4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01132d8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01132dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01132df:	c1 e0 02             	shl    $0x2,%eax
f01132e2:	83 ec 08             	sub    $0x8,%esp
f01132e5:	6a 03                	push   $0x3
f01132e7:	6a 00                	push   $0x0
f01132e9:	6a 00                	push   $0x0
f01132eb:	68 ff 0f 00 00       	push   $0xfff
f01132f0:	ff 75 b8             	pushl  -0x48(%ebp)
f01132f3:	6a 01                	push   $0x1
f01132f5:	50                   	push   %eax
f01132f6:	68 00 f0 bf ef       	push   $0xefbff000
f01132fb:	6a 00                	push   $0x0
f01132fd:	ff 75 d0             	pushl  -0x30(%ebp)
f0113300:	e8 30 22 00 00       	call   f0115535 <CCP>
f0113305:	83 c4 30             	add    $0x30,%esp
f0113308:	85 c0                	test   %eax,%eax
f011330a:	75 1e                	jne    f011332a <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011330c:	83 ec 04             	sub    $0x4,%esp
f011330f:	68 c8 97 13 f0       	push   $0xf01397c8
f0113314:	68 d9 04 00 00       	push   $0x4d9
f0113319:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011331e:	e8 0f d0 fe ff       	call   f0100332 <_warn>
f0113323:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113326:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011332a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011332e:	74 04                	je     f0113334 <test_allocate_chunk+0x220>
f0113330:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113334:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113338:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011333b:	8a 10                	mov    (%eax),%dl
f011333d:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0113343:	38 c2                	cmp    %al,%dl
f0113345:	75 0f                	jne    f0113356 <test_allocate_chunk+0x242>
f0113347:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011334a:	8a 10                	mov    (%eax),%dl
f011334c:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0113352:	38 c2                	cmp    %al,%dl
f0113354:	74 1e                	je     f0113374 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113356:	83 ec 04             	sub    $0x4,%esp
f0113359:	68 14 98 13 f0       	push   $0xf0139814
f011335e:	68 e1 04 00 00       	push   $0x4e1
f0113363:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113368:	e8 c5 cf fe ff       	call   f0100332 <_warn>
f011336d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113370:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113374:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113378:	74 04                	je     f011337e <test_allocate_chunk+0x26a>
f011337a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011337e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113382:	83 ec 0c             	sub    $0xc,%esp
f0113385:	68 a9 95 13 f0       	push   $0xf01395a9
f011338a:	e8 9e d8 fe ff       	call   f0100c2d <cprintf>
f011338f:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0113392:	83 ec 0c             	sub    $0xc,%esp
f0113395:	68 4c 98 13 f0       	push   $0xf013984c
f011339a:	e8 8e d8 fe ff       	call   f0100c2d <cprintf>
f011339f:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01133a2:	e8 0b 8d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01133a7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01133aa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133ad:	c1 e0 05             	shl    $0x5,%eax
f01133b0:	68 02 0e 00 00       	push   $0xe02
f01133b5:	50                   	push   %eax
f01133b6:	6a 00                	push   $0x0
f01133b8:	ff 75 d0             	pushl  -0x30(%ebp)
f01133bb:	e8 93 4d ff ff       	call   f0108153 <allocate_chunk>
f01133c0:	83 c4 10             	add    $0x10,%esp
f01133c3:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01133c6:	e8 e7 8c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01133cb:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f01133ce:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01133d2:	75 36                	jne    f011340a <test_allocate_chunk+0x2f6>
f01133d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133d7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01133da:	89 c1                	mov    %eax,%ecx
f01133dc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133df:	c1 e0 05             	shl    $0x5,%eax
f01133e2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01133e5:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01133ec:	99                   	cltd   
f01133ed:	f7 fe                	idiv   %esi
f01133ef:	89 c3                	mov    %eax,%ebx
f01133f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133f4:	c1 e0 05             	shl    $0x5,%eax
f01133f7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01133fa:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113401:	99                   	cltd   
f0113402:	f7 fe                	idiv   %esi
f0113404:	01 d8                	add    %ebx,%eax
f0113406:	39 c1                	cmp    %eax,%ecx
f0113408:	74 54                	je     f011345e <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f011340a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011340d:	c1 e0 05             	shl    $0x5,%eax
f0113410:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113413:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011341a:	99                   	cltd   
f011341b:	f7 ff                	idiv   %edi
f011341d:	89 c1                	mov    %eax,%ecx
f011341f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113422:	c1 e0 05             	shl    $0x5,%eax
f0113425:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113428:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011342f:	99                   	cltd   
f0113430:	f7 fe                	idiv   %esi
f0113432:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113435:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113438:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011343b:	83 ec 08             	sub    $0x8,%esp
f011343e:	52                   	push   %edx
f011343f:	50                   	push   %eax
f0113440:	ff 75 a8             	pushl  -0x58(%ebp)
f0113443:	68 8c 98 13 f0       	push   $0xf013988c
f0113448:	68 f6 04 00 00       	push   $0x4f6
f011344d:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113452:	e8 db ce fe ff       	call   f0100332 <_warn>
f0113457:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011345a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011345e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113462:	74 04                	je     f0113468 <test_allocate_chunk+0x354>
f0113464:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113468:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011346c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113473:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113476:	c1 e0 05             	shl    $0x5,%eax
f0113479:	83 ec 08             	sub    $0x8,%esp
f011347c:	6a 03                	push   $0x3
f011347e:	6a 00                	push   $0x0
f0113480:	6a 00                	push   $0x0
f0113482:	68 07 0e 00 00       	push   $0xe07
f0113487:	68 03 0e 00 00       	push   $0xe03
f011348c:	6a 01                	push   $0x1
f011348e:	50                   	push   %eax
f011348f:	6a 00                	push   $0x0
f0113491:	6a 00                	push   $0x0
f0113493:	ff 75 d0             	pushl  -0x30(%ebp)
f0113496:	e8 9a 20 00 00       	call   f0115535 <CCP>
f011349b:	83 c4 30             	add    $0x30,%esp
f011349e:	85 c0                	test   %eax,%eax
f01134a0:	75 25                	jne    f01134c7 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01134a2:	83 ec 04             	sub    $0x4,%esp
f01134a5:	68 c8 97 13 f0       	push   $0xf01397c8
f01134aa:	68 ff 04 00 00       	push   $0x4ff
f01134af:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01134b4:	e8 79 ce fe ff       	call   f0100332 <_warn>
f01134b9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01134bc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01134c0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01134c7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01134cb:	74 04                	je     f01134d1 <test_allocate_chunk+0x3bd>
f01134cd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01134d1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01134d5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01134d9:	74 5a                	je     f0113535 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f01134db:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01134de:	01 c0                	add    %eax,%eax
f01134e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01134e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01134e6:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f01134e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01134ec:	01 c0                	add    %eax,%eax
f01134ee:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01134f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01134f4:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01134f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01134fa:	8a 00                	mov    (%eax),%al
f01134fc:	3c 4b                	cmp    $0x4b,%al
f01134fe:	75 09                	jne    f0113509 <test_allocate_chunk+0x3f5>
f0113500:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113503:	8a 00                	mov    (%eax),%al
f0113505:	3c 4d                	cmp    $0x4d,%al
f0113507:	74 1e                	je     f0113527 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113509:	83 ec 04             	sub    $0x4,%esp
f011350c:	68 14 98 13 f0       	push   $0xf0139814
f0113511:	68 0d 05 00 00       	push   $0x50d
f0113516:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011351b:	e8 12 ce fe ff       	call   f0100332 <_warn>
f0113520:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113523:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113527:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011352b:	74 04                	je     f0113531 <test_allocate_chunk+0x41d>
f011352d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113531:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113535:	83 ec 0c             	sub    $0xc,%esp
f0113538:	68 83 8b 13 f0       	push   $0xf0138b83
f011353d:	e8 eb d6 fe ff       	call   f0100c2d <cprintf>
f0113542:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0113545:	83 ec 0c             	sub    $0xc,%esp
f0113548:	68 ec 98 13 f0       	push   $0xf01398ec
f011354d:	e8 db d6 fe ff       	call   f0100c2d <cprintf>
f0113552:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113555:	e8 58 8b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011355a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f011355d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113560:	c1 e0 06             	shl    $0x6,%eax
f0113563:	89 c2                	mov    %eax,%edx
f0113565:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113568:	c1 e0 05             	shl    $0x5,%eax
f011356b:	6a 00                	push   $0x0
f011356d:	52                   	push   %edx
f011356e:	50                   	push   %eax
f011356f:	ff 75 d0             	pushl  -0x30(%ebp)
f0113572:	e8 dc 4b ff ff       	call   f0108153 <allocate_chunk>
f0113577:	83 c4 10             	add    $0x10,%esp
f011357a:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011357d:	e8 30 8b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0113582:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0113585:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0113589:	75 36                	jne    f01135c1 <test_allocate_chunk+0x4ad>
f011358b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011358e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113591:	89 c1                	mov    %eax,%ecx
f0113593:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113596:	c1 e0 06             	shl    $0x6,%eax
f0113599:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011359c:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01135a3:	99                   	cltd   
f01135a4:	f7 ff                	idiv   %edi
f01135a6:	89 c3                	mov    %eax,%ebx
f01135a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01135ab:	c1 e0 06             	shl    $0x6,%eax
f01135ae:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01135b1:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01135b8:	99                   	cltd   
f01135b9:	f7 fe                	idiv   %esi
f01135bb:	01 d8                	add    %ebx,%eax
f01135bd:	39 c1                	cmp    %eax,%ecx
f01135bf:	74 54                	je     f0113615 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01135c1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01135c4:	c1 e0 06             	shl    $0x6,%eax
f01135c7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135ca:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01135d1:	99                   	cltd   
f01135d2:	f7 fb                	idiv   %ebx
f01135d4:	89 c1                	mov    %eax,%ecx
f01135d6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01135d9:	c1 e0 06             	shl    $0x6,%eax
f01135dc:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01135df:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01135e6:	99                   	cltd   
f01135e7:	f7 ff                	idiv   %edi
f01135e9:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01135ec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135ef:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01135f2:	83 ec 08             	sub    $0x8,%esp
f01135f5:	52                   	push   %edx
f01135f6:	50                   	push   %eax
f01135f7:	ff 75 a4             	pushl  -0x5c(%ebp)
f01135fa:	68 8c 98 13 f0       	push   $0xf013988c
f01135ff:	68 23 05 00 00       	push   $0x523
f0113604:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113609:	e8 24 cd fe ff       	call   f0100332 <_warn>
f011360e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113611:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113615:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113619:	74 04                	je     f011361f <test_allocate_chunk+0x50b>
f011361b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011361f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113623:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011362a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011362d:	c1 e0 06             	shl    $0x6,%eax
f0113630:	89 c2                	mov    %eax,%edx
f0113632:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113635:	c1 e0 05             	shl    $0x5,%eax
f0113638:	83 ec 08             	sub    $0x8,%esp
f011363b:	6a 03                	push   $0x3
f011363d:	6a 00                	push   $0x0
f011363f:	6a 00                	push   $0x0
f0113641:	68 07 0e 00 00       	push   $0xe07
f0113646:	6a 01                	push   $0x1
f0113648:	6a 01                	push   $0x1
f011364a:	52                   	push   %edx
f011364b:	50                   	push   %eax
f011364c:	6a 00                	push   $0x0
f011364e:	ff 75 d0             	pushl  -0x30(%ebp)
f0113651:	e8 df 1e 00 00       	call   f0115535 <CCP>
f0113656:	83 c4 30             	add    $0x30,%esp
f0113659:	85 c0                	test   %eax,%eax
f011365b:	75 25                	jne    f0113682 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011365d:	83 ec 04             	sub    $0x4,%esp
f0113660:	68 c8 97 13 f0       	push   $0xf01397c8
f0113665:	68 2c 05 00 00       	push   $0x52c
f011366a:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011366f:	e8 be cc fe ff       	call   f0100332 <_warn>
f0113674:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113677:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011367b:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0113682:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113686:	74 04                	je     f011368c <test_allocate_chunk+0x578>
f0113688:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011368c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0113690:	83 ec 0c             	sub    $0xc,%esp
f0113693:	68 e6 8b 13 f0       	push   $0xf0138be6
f0113698:	e8 90 d5 fe ff       	call   f0100c2d <cprintf>
f011369d:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f01136a0:	83 ec 0c             	sub    $0xc,%esp
f01136a3:	68 2c 99 13 f0       	push   $0xf013992c
f01136a8:	e8 80 d5 fe ff       	call   f0100c2d <cprintf>
f01136ad:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01136b0:	e8 fd 89 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01136b5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f01136b8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01136bb:	c1 e0 06             	shl    $0x6,%eax
f01136be:	68 06 0e 00 00       	push   $0xe06
f01136c3:	50                   	push   %eax
f01136c4:	68 00 00 00 80       	push   $0x80000000
f01136c9:	ff 75 d0             	pushl  -0x30(%ebp)
f01136cc:	e8 82 4a ff ff       	call   f0108153 <allocate_chunk>
f01136d1:	83 c4 10             	add    $0x10,%esp
f01136d4:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01136d7:	e8 d6 89 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01136dc:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f01136df:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f01136e3:	75 36                	jne    f011371b <test_allocate_chunk+0x607>
f01136e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136e8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01136eb:	89 c1                	mov    %eax,%ecx
f01136ed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01136f0:	c1 e0 06             	shl    $0x6,%eax
f01136f3:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01136f6:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01136fd:	99                   	cltd   
f01136fe:	f7 fb                	idiv   %ebx
f0113700:	89 c3                	mov    %eax,%ebx
f0113702:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113705:	c1 e0 06             	shl    $0x6,%eax
f0113708:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011370b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113712:	99                   	cltd   
f0113713:	f7 fe                	idiv   %esi
f0113715:	01 d8                	add    %ebx,%eax
f0113717:	39 c1                	cmp    %eax,%ecx
f0113719:	74 54                	je     f011376f <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f011371b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011371e:	c1 e0 06             	shl    $0x6,%eax
f0113721:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113724:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011372b:	99                   	cltd   
f011372c:	f7 ff                	idiv   %edi
f011372e:	89 c1                	mov    %eax,%ecx
f0113730:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113733:	c1 e0 06             	shl    $0x6,%eax
f0113736:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113739:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113740:	99                   	cltd   
f0113741:	f7 fb                	idiv   %ebx
f0113743:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113746:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113749:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011374c:	83 ec 08             	sub    $0x8,%esp
f011374f:	52                   	push   %edx
f0113750:	50                   	push   %eax
f0113751:	ff 75 9c             	pushl  -0x64(%ebp)
f0113754:	68 8c 98 13 f0       	push   $0xf013988c
f0113759:	68 42 05 00 00       	push   $0x542
f011375e:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113763:	e8 ca cb fe ff       	call   f0100332 <_warn>
f0113768:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011376b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011376f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113773:	74 04                	je     f0113779 <test_allocate_chunk+0x665>
f0113775:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113779:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011377d:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113784:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113787:	c1 e0 06             	shl    $0x6,%eax
f011378a:	83 ec 08             	sub    $0x8,%esp
f011378d:	6a 03                	push   $0x3
f011378f:	6a 00                	push   $0x0
f0113791:	6a 00                	push   $0x0
f0113793:	68 07 0e 00 00       	push   $0xe07
f0113798:	68 07 0e 00 00       	push   $0xe07
f011379d:	6a 01                	push   $0x1
f011379f:	50                   	push   %eax
f01137a0:	68 00 00 00 80       	push   $0x80000000
f01137a5:	6a 00                	push   $0x0
f01137a7:	ff 75 d0             	pushl  -0x30(%ebp)
f01137aa:	e8 86 1d 00 00       	call   f0115535 <CCP>
f01137af:	83 c4 30             	add    $0x30,%esp
f01137b2:	85 c0                	test   %eax,%eax
f01137b4:	75 25                	jne    f01137db <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01137b6:	83 ec 04             	sub    $0x4,%esp
f01137b9:	68 c8 97 13 f0       	push   $0xf01397c8
f01137be:	68 4b 05 00 00       	push   $0x54b
f01137c3:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01137c8:	e8 65 cb fe ff       	call   f0100332 <_warn>
f01137cd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137d0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01137d4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f01137db:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137df:	74 04                	je     f01137e5 <test_allocate_chunk+0x6d1>
f01137e1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01137e5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01137e9:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01137ed:	74 6f                	je     f011385e <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f01137ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01137f2:	01 c0                	add    %eax,%eax
f01137f4:	05 00 00 00 80       	add    $0x80000000,%eax
f01137f9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01137fc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01137ff:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0113802:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113805:	89 d0                	mov    %edx,%eax
f0113807:	c1 e0 02             	shl    $0x2,%eax
f011380a:	01 d0                	add    %edx,%eax
f011380c:	01 c0                	add    %eax,%eax
f011380e:	01 d0                	add    %edx,%eax
f0113810:	01 c0                	add    %eax,%eax
f0113812:	05 00 00 00 80       	add    $0x80000000,%eax
f0113817:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011381a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011381d:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113820:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113823:	8a 00                	mov    (%eax),%al
f0113825:	3c 4b                	cmp    $0x4b,%al
f0113827:	75 09                	jne    f0113832 <test_allocate_chunk+0x71e>
f0113829:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011382c:	8a 00                	mov    (%eax),%al
f011382e:	3c 4d                	cmp    $0x4d,%al
f0113830:	74 1e                	je     f0113850 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113832:	83 ec 04             	sub    $0x4,%esp
f0113835:	68 14 98 13 f0       	push   $0xf0139814
f011383a:	68 59 05 00 00       	push   $0x559
f011383f:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113844:	e8 e9 ca fe ff       	call   f0100332 <_warn>
f0113849:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011384c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113850:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113854:	74 04                	je     f011385a <test_allocate_chunk+0x746>
f0113856:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011385a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f011385e:	83 ec 0c             	sub    $0xc,%esp
f0113861:	68 b8 96 13 f0       	push   $0xf01396b8
f0113866:	e8 c2 d3 fe ff       	call   f0100c2d <cprintf>
f011386b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f011386e:	83 ec 0c             	sub    $0xc,%esp
f0113871:	68 68 99 13 f0       	push   $0xf0139968
f0113876:	e8 b2 d3 fe ff       	call   f0100c2d <cprintf>
f011387b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011387e:	e8 2f 88 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0113883:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0113886:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113889:	89 d0                	mov    %edx,%eax
f011388b:	01 c0                	add    %eax,%eax
f011388d:	01 d0                	add    %edx,%eax
f011388f:	01 c0                	add    %eax,%eax
f0113891:	01 d0                	add    %edx,%eax
f0113893:	68 04 0e 00 00       	push   $0xe04
f0113898:	50                   	push   %eax
f0113899:	68 00 fc 3f 40       	push   $0x403ffc00
f011389e:	ff 75 d0             	pushl  -0x30(%ebp)
f01138a1:	e8 ad 48 ff ff       	call   f0108153 <allocate_chunk>
f01138a6:	83 c4 10             	add    $0x10,%esp
f01138a9:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01138ac:	e8 01 88 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01138b1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f01138b4:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01138b8:	75 0b                	jne    f01138c5 <test_allocate_chunk+0x7b1>
f01138ba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138bd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01138c0:	83 f8 05             	cmp    $0x5,%eax
f01138c3:	74 2a                	je     f01138ef <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01138c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138c8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01138cb:	83 ec 08             	sub    $0x8,%esp
f01138ce:	6a 05                	push   $0x5
f01138d0:	50                   	push   %eax
f01138d1:	ff 75 98             	pushl  -0x68(%ebp)
f01138d4:	68 8c 98 13 f0       	push   $0xf013988c
f01138d9:	68 70 05 00 00       	push   $0x570
f01138de:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01138e3:	e8 4a ca fe ff       	call   f0100332 <_warn>
f01138e8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01138eb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01138ef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01138f3:	74 04                	je     f01138f9 <test_allocate_chunk+0x7e5>
f01138f5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01138f9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01138fd:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113904:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113907:	89 d0                	mov    %edx,%eax
f0113909:	01 c0                	add    %eax,%eax
f011390b:	01 d0                	add    %edx,%eax
f011390d:	c1 e0 02             	shl    $0x2,%eax
f0113910:	83 ec 08             	sub    $0x8,%esp
f0113913:	6a 03                	push   $0x3
f0113915:	6a 00                	push   $0x0
f0113917:	6a 00                	push   $0x0
f0113919:	68 07 0e 00 00       	push   $0xe07
f011391e:	68 05 0e 00 00       	push   $0xe05
f0113923:	6a 01                	push   $0x1
f0113925:	50                   	push   %eax
f0113926:	68 00 f0 3f 40       	push   $0x403ff000
f011392b:	6a 00                	push   $0x0
f011392d:	ff 75 d0             	pushl  -0x30(%ebp)
f0113930:	e8 00 1c 00 00       	call   f0115535 <CCP>
f0113935:	83 c4 30             	add    $0x30,%esp
f0113938:	85 c0                	test   %eax,%eax
f011393a:	75 25                	jne    f0113961 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011393c:	83 ec 04             	sub    $0x4,%esp
f011393f:	68 c8 97 13 f0       	push   $0xf01397c8
f0113944:	68 79 05 00 00       	push   $0x579
f0113949:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011394e:	e8 df c9 fe ff       	call   f0100332 <_warn>
f0113953:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113956:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011395a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0113961:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113965:	74 04                	je     f011396b <test_allocate_chunk+0x857>
f0113967:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011396b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f011396f:	83 ec 0c             	sub    $0xc,%esp
f0113972:	68 9f 99 13 f0       	push   $0xf013999f
f0113977:	e8 b1 d2 fe ff       	call   f0100c2d <cprintf>
f011397c:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f011397f:	83 ec 08             	sub    $0x8,%esp
f0113982:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113985:	68 b0 99 13 f0       	push   $0xf01399b0
f011398a:	e8 9e d2 fe ff       	call   f0100c2d <cprintf>
f011398f:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113992:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113996:	75 10                	jne    f01139a8 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0113998:	83 ec 0c             	sub    $0xc,%esp
f011399b:	68 e4 99 13 f0       	push   $0xf01399e4
f01139a0:	e8 88 d2 fe ff       	call   f0100c2d <cprintf>
f01139a5:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01139a8:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01139ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01139b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01139b3:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01139b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01139bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01139be:	5b                   	pop    %ebx
f01139bf:	5e                   	pop    %esi
f01139c0:	5f                   	pop    %edi
f01139c1:	5d                   	pop    %ebp
f01139c2:	c3                   	ret    

f01139c3 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01139c3:	55                   	push   %ebp
f01139c4:	89 e5                	mov    %esp,%ebp
f01139c6:	57                   	push   %edi
f01139c7:	56                   	push   %esi
f01139c8:	53                   	push   %ebx
f01139c9:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01139cf:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01139d2:	bb f8 88 13 f0       	mov    $0xf01388f8,%ebx
f01139d7:	ba 0f 00 00 00       	mov    $0xf,%edx
f01139dc:	89 c7                	mov    %eax,%edi
f01139de:	89 de                	mov    %ebx,%esi
f01139e0:	89 d1                	mov    %edx,%ecx
f01139e2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01139e4:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01139e7:	b9 23 00 00 00       	mov    $0x23,%ecx
f01139ec:	b0 00                	mov    $0x0,%al
f01139ee:	89 d7                	mov    %edx,%edi
f01139f0:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01139f2:	6a 00                	push   $0x0
f01139f4:	6a 0a                	push   $0xa
f01139f6:	6a 14                	push   $0x14
f01139f8:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01139fb:	50                   	push   %eax
f01139fc:	e8 65 49 ff ff       	call   f0108366 <env_create>
f0113a01:	83 c4 10             	add    $0x10,%esp
f0113a04:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113a07:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113a0a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113a0d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0113a10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113a13:	8b 40 60             	mov    0x60(%eax),%eax
f0113a16:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113a19:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113a1c:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113a1f:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0113a26:	75 70 20 
f0113a29:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0113a30:	00 00 00 
f0113a33:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0113a36:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113a3b:	b8 00 00 00 00       	mov    $0x0,%eax
f0113a40:	89 d7                	mov    %edx,%edi
f0113a42:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113a44:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113a47:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113a4a:	83 ec 08             	sub    $0x8,%esp
f0113a4d:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0113a53:	52                   	push   %edx
f0113a54:	50                   	push   %eax
f0113a55:	e8 6b ce 01 00       	call   f01308c5 <ltostr>
f0113a5a:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113a5d:	83 ec 04             	sub    $0x4,%esp
f0113a60:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113a66:	50                   	push   %eax
f0113a67:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0113a6d:	50                   	push   %eax
f0113a6e:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0113a74:	50                   	push   %eax
f0113a75:	e8 43 cf 01 00       	call   f01309bd <strcconcat>
f0113a7a:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113a7d:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0113a84:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0113a8b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0113a92:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0113a99:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0113a9d:	83 ec 0c             	sub    $0xc,%esp
f0113aa0:	ff 75 d8             	pushl  -0x28(%ebp)
f0113aa3:	e8 59 1a 00 00       	call   f0115501 <ClearUserSpace>
f0113aa8:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0113aab:	83 ec 0c             	sub    $0xc,%esp
f0113aae:	68 24 9a 13 f0       	push   $0xf0139a24
f0113ab3:	e8 75 d1 fe ff       	call   f0100c2d <cprintf>
f0113ab8:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0113abb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113abe:	c1 e0 03             	shl    $0x3,%eax
f0113ac1:	83 ec 04             	sub    $0x4,%esp
f0113ac4:	50                   	push   %eax
f0113ac5:	6a 00                	push   $0x0
f0113ac7:	ff 75 d8             	pushl  -0x28(%ebp)
f0113aca:	e8 bb 47 ff ff       	call   f010828a <calculate_required_frames>
f0113acf:	83 c4 10             	add    $0x10,%esp
f0113ad2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113ad5:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113ad9:	74 23                	je     f0113afe <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113adb:	83 ec 0c             	sub    $0xc,%esp
f0113ade:	6a 03                	push   $0x3
f0113ae0:	ff 75 c8             	pushl  -0x38(%ebp)
f0113ae3:	68 58 9a 13 f0       	push   $0xf0139a58
f0113ae8:	68 b2 05 00 00       	push   $0x5b2
f0113aed:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113af2:	e8 3b c8 fe ff       	call   f0100332 <_warn>
f0113af7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113afa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113afe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b02:	74 04                	je     f0113b08 <test_calculate_required_frames+0x145>
f0113b04:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b08:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0113b0c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113b0f:	c1 e0 02             	shl    $0x2,%eax
f0113b12:	83 ec 04             	sub    $0x4,%esp
f0113b15:	50                   	push   %eax
f0113b16:	6a 00                	push   $0x0
f0113b18:	ff 75 d8             	pushl  -0x28(%ebp)
f0113b1b:	e8 6a 47 ff ff       	call   f010828a <calculate_required_frames>
f0113b20:	83 c4 10             	add    $0x10,%esp
f0113b23:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0113b26:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0113b2d:	74 26                	je     f0113b55 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0113b2f:	83 ec 0c             	sub    $0xc,%esp
f0113b32:	68 01 04 00 00       	push   $0x401
f0113b37:	ff 75 c8             	pushl  -0x38(%ebp)
f0113b3a:	68 58 9a 13 f0       	push   $0xf0139a58
f0113b3f:	68 bc 05 00 00       	push   $0x5bc
f0113b44:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113b49:	e8 e4 c7 fe ff       	call   f0100332 <_warn>
f0113b4e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b51:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b55:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b59:	74 04                	je     f0113b5f <test_calculate_required_frames+0x19c>
f0113b5b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b5f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0113b63:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113b66:	c1 e0 0a             	shl    $0xa,%eax
f0113b69:	83 ec 04             	sub    $0x4,%esp
f0113b6c:	50                   	push   %eax
f0113b6d:	6a 00                	push   $0x0
f0113b6f:	ff 75 d8             	pushl  -0x28(%ebp)
f0113b72:	e8 13 47 ff ff       	call   f010828a <calculate_required_frames>
f0113b77:	83 c4 10             	add    $0x10,%esp
f0113b7a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0113b7d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113b80:	c1 e0 0a             	shl    $0xa,%eax
f0113b83:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113b86:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113b8d:	99                   	cltd   
f0113b8e:	f7 fb                	idiv   %ebx
f0113b90:	89 c1                	mov    %eax,%ecx
f0113b92:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113b95:	c1 e0 0a             	shl    $0xa,%eax
f0113b98:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113b9b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113ba2:	99                   	cltd   
f0113ba3:	f7 fe                	idiv   %esi
f0113ba5:	01 c8                	add    %ecx,%eax
f0113ba7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0113baa:	74 4c                	je     f0113bf8 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0113bac:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113baf:	c1 e0 0a             	shl    $0xa,%eax
f0113bb2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113bb5:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113bbc:	99                   	cltd   
f0113bbd:	f7 fb                	idiv   %ebx
f0113bbf:	89 c1                	mov    %eax,%ecx
f0113bc1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113bc4:	c1 e0 0a             	shl    $0xa,%eax
f0113bc7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113bca:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113bd1:	99                   	cltd   
f0113bd2:	f7 fe                	idiv   %esi
f0113bd4:	01 c8                	add    %ecx,%eax
f0113bd6:	83 ec 0c             	sub    $0xc,%esp
f0113bd9:	50                   	push   %eax
f0113bda:	ff 75 c8             	pushl  -0x38(%ebp)
f0113bdd:	68 58 9a 13 f0       	push   $0xf0139a58
f0113be2:	68 c6 05 00 00       	push   $0x5c6
f0113be7:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113bec:	e8 41 c7 fe ff       	call   f0100332 <_warn>
f0113bf1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113bf4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113bf8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bfc:	74 04                	je     f0113c02 <test_calculate_required_frames+0x23f>
f0113bfe:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c02:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0113c06:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113c09:	89 d0                	mov    %edx,%eax
f0113c0b:	01 c0                	add    %eax,%eax
f0113c0d:	01 d0                	add    %edx,%eax
f0113c0f:	01 c0                	add    %eax,%eax
f0113c11:	83 ec 04             	sub    $0x4,%esp
f0113c14:	50                   	push   %eax
f0113c15:	68 00 10 00 00       	push   $0x1000
f0113c1a:	ff 75 d8             	pushl  -0x28(%ebp)
f0113c1d:	e8 68 46 ff ff       	call   f010828a <calculate_required_frames>
f0113c22:	83 c4 10             	add    $0x10,%esp
f0113c25:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113c28:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113c2c:	74 23                	je     f0113c51 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113c2e:	83 ec 0c             	sub    $0xc,%esp
f0113c31:	6a 03                	push   $0x3
f0113c33:	ff 75 c8             	pushl  -0x38(%ebp)
f0113c36:	68 58 9a 13 f0       	push   $0xf0139a58
f0113c3b:	68 d2 05 00 00       	push   $0x5d2
f0113c40:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113c45:	e8 e8 c6 fe ff       	call   f0100332 <_warn>
f0113c4a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c4d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c51:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c55:	74 04                	je     f0113c5b <test_calculate_required_frames+0x298>
f0113c57:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c5b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0113c5f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113c62:	89 c2                	mov    %eax,%edx
f0113c64:	01 d2                	add    %edx,%edx
f0113c66:	01 d0                	add    %edx,%eax
f0113c68:	83 ec 04             	sub    $0x4,%esp
f0113c6b:	50                   	push   %eax
f0113c6c:	68 00 18 00 00       	push   $0x1800
f0113c71:	ff 75 d8             	pushl  -0x28(%ebp)
f0113c74:	e8 11 46 ff ff       	call   f010828a <calculate_required_frames>
f0113c79:	83 c4 10             	add    $0x10,%esp
f0113c7c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113c7f:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113c83:	74 23                	je     f0113ca8 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113c85:	83 ec 0c             	sub    $0xc,%esp
f0113c88:	6a 03                	push   $0x3
f0113c8a:	ff 75 c8             	pushl  -0x38(%ebp)
f0113c8d:	68 58 9a 13 f0       	push   $0xf0139a58
f0113c92:	68 dc 05 00 00       	push   $0x5dc
f0113c97:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113c9c:	e8 91 c6 fe ff       	call   f0100332 <_warn>
f0113ca1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ca4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ca8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113cac:	74 04                	je     f0113cb2 <test_calculate_required_frames+0x2ef>
f0113cae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113cb2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0113cb6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113cb9:	89 d0                	mov    %edx,%eax
f0113cbb:	c1 e0 02             	shl    $0x2,%eax
f0113cbe:	01 d0                	add    %edx,%eax
f0113cc0:	01 c0                	add    %eax,%eax
f0113cc2:	83 ec 04             	sub    $0x4,%esp
f0113cc5:	50                   	push   %eax
f0113cc6:	68 00 00 40 00       	push   $0x400000
f0113ccb:	ff 75 d8             	pushl  -0x28(%ebp)
f0113cce:	e8 b7 45 ff ff       	call   f010828a <calculate_required_frames>
f0113cd3:	83 c4 10             	add    $0x10,%esp
f0113cd6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0113cd9:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0113ce0:	74 26                	je     f0113d08 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0113ce2:	83 ec 0c             	sub    $0xc,%esp
f0113ce5:	68 03 0a 00 00       	push   $0xa03
f0113cea:	ff 75 c8             	pushl  -0x38(%ebp)
f0113ced:	68 58 9a 13 f0       	push   $0xf0139a58
f0113cf2:	68 e6 05 00 00       	push   $0x5e6
f0113cf7:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113cfc:	e8 31 c6 fe ff       	call   f0100332 <_warn>
f0113d01:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d04:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d08:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d0c:	74 04                	je     f0113d12 <test_calculate_required_frames+0x34f>
f0113d0e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d12:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0113d16:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113d19:	01 c0                	add    %eax,%eax
f0113d1b:	83 ec 04             	sub    $0x4,%esp
f0113d1e:	50                   	push   %eax
f0113d1f:	68 00 00 70 00       	push   $0x700000
f0113d24:	ff 75 d8             	pushl  -0x28(%ebp)
f0113d27:	e8 5e 45 ff ff       	call   f010828a <calculate_required_frames>
f0113d2c:	83 c4 10             	add    $0x10,%esp
f0113d2f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0113d32:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0113d39:	74 26                	je     f0113d61 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0113d3b:	83 ec 0c             	sub    $0xc,%esp
f0113d3e:	68 02 02 00 00       	push   $0x202
f0113d43:	ff 75 c8             	pushl  -0x38(%ebp)
f0113d46:	68 58 9a 13 f0       	push   $0xf0139a58
f0113d4b:	68 f2 05 00 00       	push   $0x5f2
f0113d50:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113d55:	e8 d8 c5 fe ff       	call   f0100332 <_warn>
f0113d5a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d5d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113d61:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d65:	74 04                	je     f0113d6b <test_calculate_required_frames+0x3a8>
f0113d67:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113d6b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0113d6f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113d72:	83 ec 04             	sub    $0x4,%esp
f0113d75:	50                   	push   %eax
f0113d76:	68 ff ff 3f 00       	push   $0x3fffff
f0113d7b:	ff 75 d8             	pushl  -0x28(%ebp)
f0113d7e:	e8 07 45 ff ff       	call   f010828a <calculate_required_frames>
f0113d83:	83 c4 10             	add    $0x10,%esp
f0113d86:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0113d89:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0113d8d:	74 23                	je     f0113db2 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0113d8f:	83 ec 0c             	sub    $0xc,%esp
f0113d92:	6a 04                	push   $0x4
f0113d94:	ff 75 c8             	pushl  -0x38(%ebp)
f0113d97:	68 58 9a 13 f0       	push   $0xf0139a58
f0113d9c:	68 fc 05 00 00       	push   $0x5fc
f0113da1:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113da6:	e8 87 c5 fe ff       	call   f0100332 <_warn>
f0113dab:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113dae:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113db2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113db6:	74 04                	je     f0113dbc <test_calculate_required_frames+0x3f9>
f0113db8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113dbc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113dc0:	83 ec 0c             	sub    $0xc,%esp
f0113dc3:	68 a9 95 13 f0       	push   $0xf01395a9
f0113dc8:	e8 60 ce fe ff       	call   f0100c2d <cprintf>
f0113dcd:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0113dd0:	83 ec 0c             	sub    $0xc,%esp
f0113dd3:	68 b0 9a 13 f0       	push   $0xf0139ab0
f0113dd8:	e8 50 ce fe ff       	call   f0100c2d <cprintf>
f0113ddd:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0113de0:	83 ec 04             	sub    $0x4,%esp
f0113de3:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113de9:	50                   	push   %eax
f0113dea:	68 62 89 13 f0       	push   $0xf0138962
f0113def:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113df5:	50                   	push   %eax
f0113df6:	e8 c2 cb 01 00       	call   f01309bd <strcconcat>
f0113dfb:	83 c4 10             	add    $0x10,%esp
f0113dfe:	83 ec 0c             	sub    $0xc,%esp
f0113e01:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113e07:	50                   	push   %eax
f0113e08:	e8 82 ce fe ff       	call   f0100c8f <execute_command>
f0113e0d:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0113e10:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e13:	c1 e0 03             	shl    $0x3,%eax
f0113e16:	83 ec 04             	sub    $0x4,%esp
f0113e19:	50                   	push   %eax
f0113e1a:	6a 00                	push   $0x0
f0113e1c:	ff 75 d8             	pushl  -0x28(%ebp)
f0113e1f:	e8 66 44 ff ff       	call   f010828a <calculate_required_frames>
f0113e24:	83 c4 10             	add    $0x10,%esp
f0113e27:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0113e2a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0113e31:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113e34:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113e37:	74 24                	je     f0113e5d <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113e39:	83 ec 0c             	sub    $0xc,%esp
f0113e3c:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113e3f:	ff 75 c8             	pushl  -0x38(%ebp)
f0113e42:	68 58 9a 13 f0       	push   $0xf0139a58
f0113e47:	68 10 06 00 00       	push   $0x610
f0113e4c:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113e51:	e8 dc c4 fe ff       	call   f0100332 <_warn>
f0113e56:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e59:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e5d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e61:	74 04                	je     f0113e67 <test_calculate_required_frames+0x4a4>
f0113e63:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e67:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0113e6b:	83 ec 04             	sub    $0x4,%esp
f0113e6e:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113e74:	50                   	push   %eax
f0113e75:	68 6f 89 13 f0       	push   $0xf013896f
f0113e7a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113e80:	50                   	push   %eax
f0113e81:	e8 37 cb 01 00       	call   f01309bd <strcconcat>
f0113e86:	83 c4 10             	add    $0x10,%esp
f0113e89:	83 ec 0c             	sub    $0xc,%esp
f0113e8c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113e92:	50                   	push   %eax
f0113e93:	e8 f7 cd fe ff       	call   f0100c8f <execute_command>
f0113e98:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0113e9b:	83 ec 04             	sub    $0x4,%esp
f0113e9e:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113ea4:	50                   	push   %eax
f0113ea5:	68 e4 9a 13 f0       	push   $0xf0139ae4
f0113eaa:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113eb0:	50                   	push   %eax
f0113eb1:	e8 07 cb 01 00       	call   f01309bd <strcconcat>
f0113eb6:	83 c4 10             	add    $0x10,%esp
f0113eb9:	83 ec 0c             	sub    $0xc,%esp
f0113ebc:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113ec2:	50                   	push   %eax
f0113ec3:	e8 c7 cd fe ff       	call   f0100c8f <execute_command>
f0113ec8:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0113ecb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113ece:	c1 e0 03             	shl    $0x3,%eax
f0113ed1:	83 ec 04             	sub    $0x4,%esp
f0113ed4:	50                   	push   %eax
f0113ed5:	6a 00                	push   $0x0
f0113ed7:	ff 75 d8             	pushl  -0x28(%ebp)
f0113eda:	e8 ab 43 ff ff       	call   f010828a <calculate_required_frames>
f0113edf:	83 c4 10             	add    $0x10,%esp
f0113ee2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0113ee5:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0113eec:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113eef:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113ef2:	74 24                	je     f0113f18 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113ef4:	83 ec 0c             	sub    $0xc,%esp
f0113ef7:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113efa:	ff 75 c8             	pushl  -0x38(%ebp)
f0113efd:	68 58 9a 13 f0       	push   $0xf0139a58
f0113f02:	68 1e 06 00 00       	push   $0x61e
f0113f07:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113f0c:	e8 21 c4 fe ff       	call   f0100332 <_warn>
f0113f11:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f14:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f18:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f1c:	74 04                	je     f0113f22 <test_calculate_required_frames+0x55f>
f0113f1e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f22:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0113f26:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113f29:	c1 e0 0a             	shl    $0xa,%eax
f0113f2c:	83 ec 04             	sub    $0x4,%esp
f0113f2f:	50                   	push   %eax
f0113f30:	6a 00                	push   $0x0
f0113f32:	ff 75 d8             	pushl  -0x28(%ebp)
f0113f35:	e8 50 43 ff ff       	call   f010828a <calculate_required_frames>
f0113f3a:	83 c4 10             	add    $0x10,%esp
f0113f3d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0113f40:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113f43:	c1 e0 0a             	shl    $0xa,%eax
f0113f46:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113f49:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113f50:	99                   	cltd   
f0113f51:	f7 fb                	idiv   %ebx
f0113f53:	89 c1                	mov    %eax,%ecx
f0113f55:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113f58:	c1 e0 0a             	shl    $0xa,%eax
f0113f5b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113f5e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113f65:	99                   	cltd   
f0113f66:	f7 fe                	idiv   %esi
f0113f68:	01 c8                	add    %ecx,%eax
f0113f6a:	83 e8 05             	sub    $0x5,%eax
f0113f6d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0113f70:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113f73:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113f76:	74 24                	je     f0113f9c <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113f78:	83 ec 0c             	sub    $0xc,%esp
f0113f7b:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113f7e:	ff 75 c8             	pushl  -0x38(%ebp)
f0113f81:	68 58 9a 13 f0       	push   $0xf0139a58
f0113f86:	68 29 06 00 00       	push   $0x629
f0113f8b:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0113f90:	e8 9d c3 fe ff       	call   f0100332 <_warn>
f0113f95:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f98:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113f9c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fa0:	74 04                	je     f0113fa6 <test_calculate_required_frames+0x5e3>
f0113fa2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113fa6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0113faa:	83 ec 04             	sub    $0x4,%esp
f0113fad:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113fb3:	50                   	push   %eax
f0113fb4:	68 f0 9a 13 f0       	push   $0xf0139af0
f0113fb9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113fbf:	50                   	push   %eax
f0113fc0:	e8 f8 c9 01 00       	call   f01309bd <strcconcat>
f0113fc5:	83 c4 10             	add    $0x10,%esp
f0113fc8:	83 ec 0c             	sub    $0xc,%esp
f0113fcb:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113fd1:	50                   	push   %eax
f0113fd2:	e8 b8 cc fe ff       	call   f0100c8f <execute_command>
f0113fd7:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0113fda:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113fdd:	89 c2                	mov    %eax,%edx
f0113fdf:	01 d2                	add    %edx,%edx
f0113fe1:	01 d0                	add    %edx,%eax
f0113fe3:	83 ec 04             	sub    $0x4,%esp
f0113fe6:	50                   	push   %eax
f0113fe7:	68 00 18 00 00       	push   $0x1800
f0113fec:	ff 75 d8             	pushl  -0x28(%ebp)
f0113fef:	e8 96 42 ff ff       	call   f010828a <calculate_required_frames>
f0113ff4:	83 c4 10             	add    $0x10,%esp
f0113ff7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0113ffa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114001:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114004:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114007:	74 24                	je     f011402d <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114009:	83 ec 0c             	sub    $0xc,%esp
f011400c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011400f:	ff 75 c8             	pushl  -0x38(%ebp)
f0114012:	68 58 9a 13 f0       	push   $0xf0139a58
f0114017:	68 38 06 00 00       	push   $0x638
f011401c:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114021:	e8 0c c3 fe ff       	call   f0100332 <_warn>
f0114026:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114029:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011402d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114031:	74 04                	je     f0114037 <test_calculate_required_frames+0x674>
f0114033:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114037:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011403b:	83 ec 04             	sub    $0x4,%esp
f011403e:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114044:	50                   	push   %eax
f0114045:	68 c8 8b 13 f0       	push   $0xf0138bc8
f011404a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114050:	50                   	push   %eax
f0114051:	e8 67 c9 01 00       	call   f01309bd <strcconcat>
f0114056:	83 c4 10             	add    $0x10,%esp
f0114059:	83 ec 0c             	sub    $0xc,%esp
f011405c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114062:	50                   	push   %eax
f0114063:	e8 27 cc fe ff       	call   f0100c8f <execute_command>
f0114068:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011406b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011406e:	89 d0                	mov    %edx,%eax
f0114070:	c1 e0 02             	shl    $0x2,%eax
f0114073:	01 d0                	add    %edx,%eax
f0114075:	01 c0                	add    %eax,%eax
f0114077:	83 ec 04             	sub    $0x4,%esp
f011407a:	50                   	push   %eax
f011407b:	68 00 00 40 00       	push   $0x400000
f0114080:	ff 75 d8             	pushl  -0x28(%ebp)
f0114083:	e8 02 42 ff ff       	call   f010828a <calculate_required_frames>
f0114088:	83 c4 10             	add    $0x10,%esp
f011408b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f011408e:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0114095:	74 26                	je     f01140bd <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114097:	83 ec 0c             	sub    $0xc,%esp
f011409a:	68 03 0a 00 00       	push   $0xa03
f011409f:	ff 75 c8             	pushl  -0x38(%ebp)
f01140a2:	68 58 9a 13 f0       	push   $0xf0139a58
f01140a7:	68 44 06 00 00       	push   $0x644
f01140ac:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01140b1:	e8 7c c2 fe ff       	call   f0100332 <_warn>
f01140b6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140b9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140bd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140c1:	74 04                	je     f01140c7 <test_calculate_required_frames+0x704>
f01140c3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140c7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01140cb:	83 ec 04             	sub    $0x4,%esp
f01140ce:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01140d4:	50                   	push   %eax
f01140d5:	68 d2 8b 13 f0       	push   $0xf0138bd2
f01140da:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01140e0:	50                   	push   %eax
f01140e1:	e8 d7 c8 01 00       	call   f01309bd <strcconcat>
f01140e6:	83 c4 10             	add    $0x10,%esp
f01140e9:	83 ec 0c             	sub    $0xc,%esp
f01140ec:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01140f2:	50                   	push   %eax
f01140f3:	e8 97 cb fe ff       	call   f0100c8f <execute_command>
f01140f8:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01140fb:	83 ec 04             	sub    $0x4,%esp
f01140fe:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114104:	50                   	push   %eax
f0114105:	68 f8 9a 13 f0       	push   $0xf0139af8
f011410a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114110:	50                   	push   %eax
f0114111:	e8 a7 c8 01 00       	call   f01309bd <strcconcat>
f0114116:	83 c4 10             	add    $0x10,%esp
f0114119:	83 ec 0c             	sub    $0xc,%esp
f011411c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114122:	50                   	push   %eax
f0114123:	e8 67 cb fe ff       	call   f0100c8f <execute_command>
f0114128:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011412b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011412e:	01 c0                	add    %eax,%eax
f0114130:	83 ec 04             	sub    $0x4,%esp
f0114133:	50                   	push   %eax
f0114134:	68 00 00 70 00       	push   $0x700000
f0114139:	ff 75 d8             	pushl  -0x28(%ebp)
f011413c:	e8 49 41 ff ff       	call   f010828a <calculate_required_frames>
f0114141:	83 c4 10             	add    $0x10,%esp
f0114144:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0114147:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f011414e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114151:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114154:	74 24                	je     f011417a <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114156:	83 ec 0c             	sub    $0xc,%esp
f0114159:	ff 75 c4             	pushl  -0x3c(%ebp)
f011415c:	ff 75 c8             	pushl  -0x38(%ebp)
f011415f:	68 58 9a 13 f0       	push   $0xf0139a58
f0114164:	68 54 06 00 00       	push   $0x654
f0114169:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011416e:	e8 bf c1 fe ff       	call   f0100332 <_warn>
f0114173:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114176:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011417a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011417e:	74 04                	je     f0114184 <test_calculate_required_frames+0x7c1>
f0114180:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114184:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114188:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011418b:	83 ec 04             	sub    $0x4,%esp
f011418e:	50                   	push   %eax
f011418f:	68 ff ff 3f 00       	push   $0x3fffff
f0114194:	ff 75 d8             	pushl  -0x28(%ebp)
f0114197:	e8 ee 40 ff ff       	call   f010828a <calculate_required_frames>
f011419c:	83 c4 10             	add    $0x10,%esp
f011419f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f01141a2:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f01141a9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01141ac:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01141af:	74 24                	je     f01141d5 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01141b1:	83 ec 0c             	sub    $0xc,%esp
f01141b4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01141b7:	ff 75 c8             	pushl  -0x38(%ebp)
f01141ba:	68 58 9a 13 f0       	push   $0xf0139a58
f01141bf:	68 5f 06 00 00       	push   $0x65f
f01141c4:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01141c9:	e8 64 c1 fe ff       	call   f0100332 <_warn>
f01141ce:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141d1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01141d5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141d9:	74 04                	je     f01141df <test_calculate_required_frames+0x81c>
f01141db:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141df:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01141e3:	83 ec 0c             	sub    $0xc,%esp
f01141e6:	68 83 8b 13 f0       	push   $0xf0138b83
f01141eb:	e8 3d ca fe ff       	call   f0100c2d <cprintf>
f01141f0:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01141f3:	83 ec 08             	sub    $0x8,%esp
f01141f6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01141f9:	68 04 9b 13 f0       	push   $0xf0139b04
f01141fe:	e8 2a ca fe ff       	call   f0100c2d <cprintf>
f0114203:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114206:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011420a:	75 10                	jne    f011421c <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f011420c:	83 ec 0c             	sub    $0xc,%esp
f011420f:	68 44 9b 13 f0       	push   $0xf0139b44
f0114214:	e8 14 ca fe ff       	call   f0100c2d <cprintf>
f0114219:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011421c:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f0114221:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114224:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114227:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011422a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011422f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114232:	5b                   	pop    %ebx
f0114233:	5e                   	pop    %esi
f0114234:	5f                   	pop    %edi
f0114235:	5d                   	pop    %ebp
f0114236:	c3                   	ret    

f0114237 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0114237:	55                   	push   %ebp
f0114238:	89 e5                	mov    %esp,%ebp
f011423a:	57                   	push   %edi
f011423b:	56                   	push   %esi
f011423c:	53                   	push   %ebx
f011423d:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114243:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114246:	bb f8 88 13 f0       	mov    $0xf01388f8,%ebx
f011424b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114250:	89 c7                	mov    %eax,%edi
f0114252:	89 de                	mov    %ebx,%esi
f0114254:	89 d1                	mov    %edx,%ecx
f0114256:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114258:	8d 55 9d             	lea    -0x63(%ebp),%edx
f011425b:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114260:	b0 00                	mov    $0x0,%al
f0114262:	89 d7                	mov    %edx,%edi
f0114264:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114266:	6a 00                	push   $0x0
f0114268:	6a 0a                	push   $0xa
f011426a:	6a 14                	push   $0x14
f011426c:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011426f:	50                   	push   %eax
f0114270:	e8 f1 40 ff ff       	call   f0108366 <env_create>
f0114275:	83 c4 10             	add    $0x10,%esp
f0114278:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011427b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011427e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114281:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114284:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114287:	8b 40 60             	mov    0x60(%eax),%eax
f011428a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011428d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114290:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114293:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011429a:	75 70 20 
f011429d:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01142a4:	00 00 00 
f01142a7:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01142aa:	b9 03 00 00 00       	mov    $0x3,%ecx
f01142af:	b8 00 00 00 00       	mov    $0x0,%eax
f01142b4:	89 d7                	mov    %edx,%edi
f01142b6:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01142b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01142bb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01142be:	83 ec 08             	sub    $0x8,%esp
f01142c1:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01142c7:	52                   	push   %edx
f01142c8:	50                   	push   %eax
f01142c9:	e8 f7 c5 01 00       	call   f01308c5 <ltostr>
f01142ce:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01142d1:	83 ec 04             	sub    $0x4,%esp
f01142d4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01142da:	50                   	push   %eax
f01142db:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01142e1:	50                   	push   %eax
f01142e2:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01142e8:	50                   	push   %eax
f01142e9:	e8 cf c6 01 00       	call   f01309bd <strcconcat>
f01142ee:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01142f1:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01142f8:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01142ff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0114306:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f011430a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114311:	00 00 00 
	uint32 num_tables = 0;
f0114314:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011431b:	00 00 00 
	ClearUserSpace(proc_directory);
f011431e:	83 ec 0c             	sub    $0xc,%esp
f0114321:	ff 75 d8             	pushl  -0x28(%ebp)
f0114324:	e8 d8 11 00 00       	call   f0115501 <ClearUserSpace>
f0114329:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011432c:	83 ec 0c             	sub    $0xc,%esp
f011432f:	68 24 9a 13 f0       	push   $0xf0139a24
f0114334:	e8 f4 c8 fe ff       	call   f0100c2d <cprintf>
f0114339:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f011433c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011433f:	c1 e0 03             	shl    $0x3,%eax
f0114342:	89 c2                	mov    %eax,%edx
f0114344:	83 ec 0c             	sub    $0xc,%esp
f0114347:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011434d:	50                   	push   %eax
f011434e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114354:	50                   	push   %eax
f0114355:	52                   	push   %edx
f0114356:	6a 00                	push   $0x0
f0114358:	ff 75 d8             	pushl  -0x28(%ebp)
f011435b:	e8 10 3f ff ff       	call   f0108270 <calculate_allocated_space>
f0114360:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114363:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114369:	85 c0                	test   %eax,%eax
f011436b:	74 27                	je     f0114394 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011436d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114373:	83 ec 0c             	sub    $0xc,%esp
f0114376:	6a 00                	push   $0x0
f0114378:	50                   	push   %eax
f0114379:	68 90 9b 13 f0       	push   $0xf0139b90
f011437e:	68 94 06 00 00       	push   $0x694
f0114383:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114388:	e8 a5 bf fe ff       	call   f0100332 <_warn>
f011438d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114390:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114394:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011439a:	85 c0                	test   %eax,%eax
f011439c:	74 27                	je     f01143c5 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011439e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01143a4:	83 ec 0c             	sub    $0xc,%esp
f01143a7:	6a 00                	push   $0x0
f01143a9:	50                   	push   %eax
f01143aa:	68 f0 9b 13 f0       	push   $0xf0139bf0
f01143af:	68 99 06 00 00       	push   $0x699
f01143b4:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01143b9:	e8 74 bf fe ff       	call   f0100332 <_warn>
f01143be:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143c1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143c5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143c9:	74 04                	je     f01143cf <test_calculate_allocated_space+0x198>
f01143cb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143cf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f01143d3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01143da:	00 00 00 
		num_pages = 0;
f01143dd:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01143e4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f01143e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01143ea:	c1 e0 02             	shl    $0x2,%eax
f01143ed:	89 c2                	mov    %eax,%edx
f01143ef:	83 ec 0c             	sub    $0xc,%esp
f01143f2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01143f8:	50                   	push   %eax
f01143f9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01143ff:	50                   	push   %eax
f0114400:	52                   	push   %edx
f0114401:	6a 00                	push   $0x0
f0114403:	ff 75 d8             	pushl  -0x28(%ebp)
f0114406:	e8 65 3e ff ff       	call   f0108270 <calculate_allocated_space>
f011440b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011440e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114414:	85 c0                	test   %eax,%eax
f0114416:	74 27                	je     f011443f <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114418:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011441e:	83 ec 0c             	sub    $0xc,%esp
f0114421:	6a 00                	push   $0x0
f0114423:	50                   	push   %eax
f0114424:	68 90 9b 13 f0       	push   $0xf0139b90
f0114429:	68 a5 06 00 00       	push   $0x6a5
f011442e:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114433:	e8 fa be fe ff       	call   f0100332 <_warn>
f0114438:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011443b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011443f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114445:	85 c0                	test   %eax,%eax
f0114447:	74 27                	je     f0114470 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114449:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011444f:	83 ec 0c             	sub    $0xc,%esp
f0114452:	6a 00                	push   $0x0
f0114454:	50                   	push   %eax
f0114455:	68 f0 9b 13 f0       	push   $0xf0139bf0
f011445a:	68 aa 06 00 00       	push   $0x6aa
f011445f:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114464:	e8 c9 be fe ff       	call   f0100332 <_warn>
f0114469:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011446c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114470:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114474:	74 04                	je     f011447a <test_calculate_allocated_space+0x243>
f0114476:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011447a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011447e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114485:	00 00 00 
		num_pages = 0;
f0114488:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011448f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114492:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114495:	c1 e0 0a             	shl    $0xa,%eax
f0114498:	89 c2                	mov    %eax,%edx
f011449a:	83 ec 0c             	sub    $0xc,%esp
f011449d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01144a3:	50                   	push   %eax
f01144a4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01144aa:	50                   	push   %eax
f01144ab:	52                   	push   %edx
f01144ac:	6a 00                	push   $0x0
f01144ae:	ff 75 d8             	pushl  -0x28(%ebp)
f01144b1:	e8 ba 3d ff ff       	call   f0108270 <calculate_allocated_space>
f01144b6:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01144b9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01144bf:	85 c0                	test   %eax,%eax
f01144c1:	74 27                	je     f01144ea <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01144c3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01144c9:	83 ec 0c             	sub    $0xc,%esp
f01144cc:	6a 00                	push   $0x0
f01144ce:	50                   	push   %eax
f01144cf:	68 90 9b 13 f0       	push   $0xf0139b90
f01144d4:	68 b6 06 00 00       	push   $0x6b6
f01144d9:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01144de:	e8 4f be fe ff       	call   f0100332 <_warn>
f01144e3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144e6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01144ea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01144f0:	85 c0                	test   %eax,%eax
f01144f2:	74 27                	je     f011451b <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01144f4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01144fa:	83 ec 0c             	sub    $0xc,%esp
f01144fd:	6a 00                	push   $0x0
f01144ff:	50                   	push   %eax
f0114500:	68 f0 9b 13 f0       	push   $0xf0139bf0
f0114505:	68 bb 06 00 00       	push   $0x6bb
f011450a:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011450f:	e8 1e be fe ff       	call   f0100332 <_warn>
f0114514:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114517:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011451b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011451f:	74 04                	je     f0114525 <test_calculate_allocated_space+0x2ee>
f0114521:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114525:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0114529:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114530:	00 00 00 
		num_pages = 0;
f0114533:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011453a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f011453d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114540:	89 d0                	mov    %edx,%eax
f0114542:	01 c0                	add    %eax,%eax
f0114544:	01 d0                	add    %edx,%eax
f0114546:	01 c0                	add    %eax,%eax
f0114548:	05 00 10 00 00       	add    $0x1000,%eax
f011454d:	89 c2                	mov    %eax,%edx
f011454f:	83 ec 0c             	sub    $0xc,%esp
f0114552:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114558:	50                   	push   %eax
f0114559:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011455f:	50                   	push   %eax
f0114560:	52                   	push   %edx
f0114561:	68 00 10 00 00       	push   $0x1000
f0114566:	ff 75 d8             	pushl  -0x28(%ebp)
f0114569:	e8 02 3d ff ff       	call   f0108270 <calculate_allocated_space>
f011456e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114571:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114577:	85 c0                	test   %eax,%eax
f0114579:	74 27                	je     f01145a2 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011457b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114581:	83 ec 0c             	sub    $0xc,%esp
f0114584:	6a 00                	push   $0x0
f0114586:	50                   	push   %eax
f0114587:	68 90 9b 13 f0       	push   $0xf0139b90
f011458c:	68 c8 06 00 00       	push   $0x6c8
f0114591:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114596:	e8 97 bd fe ff       	call   f0100332 <_warn>
f011459b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011459e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01145a2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01145a8:	85 c0                	test   %eax,%eax
f01145aa:	74 27                	je     f01145d3 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01145ac:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01145b2:	83 ec 0c             	sub    $0xc,%esp
f01145b5:	6a 00                	push   $0x0
f01145b7:	50                   	push   %eax
f01145b8:	68 f0 9b 13 f0       	push   $0xf0139bf0
f01145bd:	68 cd 06 00 00       	push   $0x6cd
f01145c2:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01145c7:	e8 66 bd fe ff       	call   f0100332 <_warn>
f01145cc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145cf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145d3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145d7:	74 04                	je     f01145dd <test_calculate_allocated_space+0x3a6>
f01145d9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145dd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f01145e1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01145e8:	00 00 00 
		num_pages = 0;
f01145eb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01145f2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01145f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01145f8:	89 c2                	mov    %eax,%edx
f01145fa:	01 d2                	add    %edx,%edx
f01145fc:	01 d0                	add    %edx,%eax
f01145fe:	05 00 18 00 00       	add    $0x1800,%eax
f0114603:	89 c2                	mov    %eax,%edx
f0114605:	83 ec 0c             	sub    $0xc,%esp
f0114608:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011460e:	50                   	push   %eax
f011460f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114615:	50                   	push   %eax
f0114616:	52                   	push   %edx
f0114617:	68 00 18 00 00       	push   $0x1800
f011461c:	ff 75 d8             	pushl  -0x28(%ebp)
f011461f:	e8 4c 3c ff ff       	call   f0108270 <calculate_allocated_space>
f0114624:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114627:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011462d:	85 c0                	test   %eax,%eax
f011462f:	74 27                	je     f0114658 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114631:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114637:	83 ec 0c             	sub    $0xc,%esp
f011463a:	6a 00                	push   $0x0
f011463c:	50                   	push   %eax
f011463d:	68 90 9b 13 f0       	push   $0xf0139b90
f0114642:	68 d9 06 00 00       	push   $0x6d9
f0114647:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011464c:	e8 e1 bc fe ff       	call   f0100332 <_warn>
f0114651:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114654:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114658:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011465e:	85 c0                	test   %eax,%eax
f0114660:	74 27                	je     f0114689 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114662:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114668:	83 ec 0c             	sub    $0xc,%esp
f011466b:	6a 00                	push   $0x0
f011466d:	50                   	push   %eax
f011466e:	68 f0 9b 13 f0       	push   $0xf0139bf0
f0114673:	68 de 06 00 00       	push   $0x6de
f0114678:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011467d:	e8 b0 bc fe ff       	call   f0100332 <_warn>
f0114682:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114685:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114689:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011468d:	74 04                	je     f0114693 <test_calculate_allocated_space+0x45c>
f011468f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114693:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0114697:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011469e:	00 00 00 
		num_pages = 0;
f01146a1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01146a8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01146ab:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01146ae:	89 d0                	mov    %edx,%eax
f01146b0:	c1 e0 02             	shl    $0x2,%eax
f01146b3:	01 d0                	add    %edx,%eax
f01146b5:	01 c0                	add    %eax,%eax
f01146b7:	05 00 00 40 00       	add    $0x400000,%eax
f01146bc:	89 c2                	mov    %eax,%edx
f01146be:	83 ec 0c             	sub    $0xc,%esp
f01146c1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01146c7:	50                   	push   %eax
f01146c8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01146ce:	50                   	push   %eax
f01146cf:	52                   	push   %edx
f01146d0:	68 00 00 40 00       	push   $0x400000
f01146d5:	ff 75 d8             	pushl  -0x28(%ebp)
f01146d8:	e8 93 3b ff ff       	call   f0108270 <calculate_allocated_space>
f01146dd:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01146e0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01146e6:	85 c0                	test   %eax,%eax
f01146e8:	74 27                	je     f0114711 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01146ea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01146f0:	83 ec 0c             	sub    $0xc,%esp
f01146f3:	6a 00                	push   $0x0
f01146f5:	50                   	push   %eax
f01146f6:	68 90 9b 13 f0       	push   $0xf0139b90
f01146fb:	68 ea 06 00 00       	push   $0x6ea
f0114700:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114705:	e8 28 bc fe ff       	call   f0100332 <_warn>
f011470a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011470d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114711:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114717:	85 c0                	test   %eax,%eax
f0114719:	74 27                	je     f0114742 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011471b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114721:	83 ec 0c             	sub    $0xc,%esp
f0114724:	6a 00                	push   $0x0
f0114726:	50                   	push   %eax
f0114727:	68 f0 9b 13 f0       	push   $0xf0139bf0
f011472c:	68 ef 06 00 00       	push   $0x6ef
f0114731:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114736:	e8 f7 bb fe ff       	call   f0100332 <_warn>
f011473b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011473e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114742:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114746:	74 04                	je     f011474c <test_calculate_allocated_space+0x515>
f0114748:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011474c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0114750:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114757:	00 00 00 
		num_pages = 0;
f011475a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114761:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114764:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114767:	05 00 00 38 00       	add    $0x380000,%eax
f011476c:	01 c0                	add    %eax,%eax
f011476e:	89 c2                	mov    %eax,%edx
f0114770:	83 ec 0c             	sub    $0xc,%esp
f0114773:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114779:	50                   	push   %eax
f011477a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114780:	50                   	push   %eax
f0114781:	52                   	push   %edx
f0114782:	68 00 00 70 00       	push   $0x700000
f0114787:	ff 75 d8             	pushl  -0x28(%ebp)
f011478a:	e8 e1 3a ff ff       	call   f0108270 <calculate_allocated_space>
f011478f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114792:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114798:	85 c0                	test   %eax,%eax
f011479a:	74 27                	je     f01147c3 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011479c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01147a2:	83 ec 0c             	sub    $0xc,%esp
f01147a5:	6a 00                	push   $0x0
f01147a7:	50                   	push   %eax
f01147a8:	68 90 9b 13 f0       	push   $0xf0139b90
f01147ad:	68 fc 06 00 00       	push   $0x6fc
f01147b2:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01147b7:	e8 76 bb fe ff       	call   f0100332 <_warn>
f01147bc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147bf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01147c3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01147c9:	85 c0                	test   %eax,%eax
f01147cb:	74 27                	je     f01147f4 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01147cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01147d3:	83 ec 0c             	sub    $0xc,%esp
f01147d6:	6a 00                	push   $0x0
f01147d8:	50                   	push   %eax
f01147d9:	68 f0 9b 13 f0       	push   $0xf0139bf0
f01147de:	68 01 07 00 00       	push   $0x701
f01147e3:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01147e8:	e8 45 bb fe ff       	call   f0100332 <_warn>
f01147ed:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147f0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01147f4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147f8:	74 04                	je     f01147fe <test_calculate_allocated_space+0x5c7>
f01147fa:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01147fe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0114802:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114809:	00 00 00 
		num_pages = 0;
f011480c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114813:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114816:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114819:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011481e:	89 c2                	mov    %eax,%edx
f0114820:	83 ec 0c             	sub    $0xc,%esp
f0114823:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114829:	50                   	push   %eax
f011482a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114830:	50                   	push   %eax
f0114831:	52                   	push   %edx
f0114832:	68 ff ff 3f 00       	push   $0x3fffff
f0114837:	ff 75 d8             	pushl  -0x28(%ebp)
f011483a:	e8 31 3a ff ff       	call   f0108270 <calculate_allocated_space>
f011483f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114842:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114848:	85 c0                	test   %eax,%eax
f011484a:	74 27                	je     f0114873 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011484c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114852:	83 ec 0c             	sub    $0xc,%esp
f0114855:	6a 00                	push   $0x0
f0114857:	50                   	push   %eax
f0114858:	68 90 9b 13 f0       	push   $0xf0139b90
f011485d:	68 0d 07 00 00       	push   $0x70d
f0114862:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114867:	e8 c6 ba fe ff       	call   f0100332 <_warn>
f011486c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011486f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114873:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114879:	85 c0                	test   %eax,%eax
f011487b:	74 27                	je     f01148a4 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011487d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114883:	83 ec 0c             	sub    $0xc,%esp
f0114886:	6a 00                	push   $0x0
f0114888:	50                   	push   %eax
f0114889:	68 f0 9b 13 f0       	push   $0xf0139bf0
f011488e:	68 12 07 00 00       	push   $0x712
f0114893:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114898:	e8 95 ba fe ff       	call   f0100332 <_warn>
f011489d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148a0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01148a4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148a8:	74 04                	je     f01148ae <test_calculate_allocated_space+0x677>
f01148aa:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01148ae:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01148b2:	83 ec 0c             	sub    $0xc,%esp
f01148b5:	68 a9 95 13 f0       	push   $0xf01395a9
f01148ba:	e8 6e c3 fe ff       	call   f0100c2d <cprintf>
f01148bf:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01148c2:	83 ec 0c             	sub    $0xc,%esp
f01148c5:	68 b0 9a 13 f0       	push   $0xf0139ab0
f01148ca:	e8 5e c3 fe ff       	call   f0100c2d <cprintf>
f01148cf:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01148d2:	83 ec 04             	sub    $0x4,%esp
f01148d5:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01148db:	50                   	push   %eax
f01148dc:	68 62 89 13 f0       	push   $0xf0138962
f01148e1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01148e7:	50                   	push   %eax
f01148e8:	e8 d0 c0 01 00       	call   f01309bd <strcconcat>
f01148ed:	83 c4 10             	add    $0x10,%esp
f01148f0:	83 ec 0c             	sub    $0xc,%esp
f01148f3:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01148f9:	50                   	push   %eax
f01148fa:	e8 90 c3 fe ff       	call   f0100c8f <execute_command>
f01148ff:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0114902:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114909:	00 00 00 
		num_pages = 0;
f011490c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114913:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114916:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114919:	c1 e0 03             	shl    $0x3,%eax
f011491c:	89 c2                	mov    %eax,%edx
f011491e:	83 ec 0c             	sub    $0xc,%esp
f0114921:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114927:	50                   	push   %eax
f0114928:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011492e:	50                   	push   %eax
f011492f:	52                   	push   %edx
f0114930:	6a 00                	push   $0x0
f0114932:	ff 75 d8             	pushl  -0x28(%ebp)
f0114935:	e8 36 39 ff ff       	call   f0108270 <calculate_allocated_space>
f011493a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011493d:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0114944:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011494b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114951:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114954:	74 28                	je     f011497e <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114956:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011495c:	83 ec 0c             	sub    $0xc,%esp
f011495f:	ff 75 c8             	pushl  -0x38(%ebp)
f0114962:	50                   	push   %eax
f0114963:	68 90 9b 13 f0       	push   $0xf0139b90
f0114968:	68 29 07 00 00       	push   $0x729
f011496d:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114972:	e8 bb b9 fe ff       	call   f0100332 <_warn>
f0114977:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011497a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011497e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114984:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114987:	74 28                	je     f01149b1 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114989:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011498f:	83 ec 0c             	sub    $0xc,%esp
f0114992:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114995:	50                   	push   %eax
f0114996:	68 f0 9b 13 f0       	push   $0xf0139bf0
f011499b:	68 2e 07 00 00       	push   $0x72e
f01149a0:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01149a5:	e8 88 b9 fe ff       	call   f0100332 <_warn>
f01149aa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149ad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01149b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149b5:	74 04                	je     f01149bb <test_calculate_allocated_space+0x784>
f01149b7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01149bf:	83 ec 04             	sub    $0x4,%esp
f01149c2:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01149c8:	50                   	push   %eax
f01149c9:	68 6f 89 13 f0       	push   $0xf013896f
f01149ce:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149d4:	50                   	push   %eax
f01149d5:	e8 e3 bf 01 00       	call   f01309bd <strcconcat>
f01149da:	83 c4 10             	add    $0x10,%esp
f01149dd:	83 ec 0c             	sub    $0xc,%esp
f01149e0:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01149e6:	50                   	push   %eax
f01149e7:	e8 a3 c2 fe ff       	call   f0100c8f <execute_command>
f01149ec:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01149ef:	83 ec 04             	sub    $0x4,%esp
f01149f2:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01149f8:	50                   	push   %eax
f01149f9:	68 e4 9a 13 f0       	push   $0xf0139ae4
f01149fe:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114a04:	50                   	push   %eax
f0114a05:	e8 b3 bf 01 00       	call   f01309bd <strcconcat>
f0114a0a:	83 c4 10             	add    $0x10,%esp
f0114a0d:	83 ec 0c             	sub    $0xc,%esp
f0114a10:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114a16:	50                   	push   %eax
f0114a17:	e8 73 c2 fe ff       	call   f0100c8f <execute_command>
f0114a1c:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0114a1f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114a26:	00 00 00 
		num_pages = 0;
f0114a29:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114a30:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0114a33:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a36:	c1 e0 03             	shl    $0x3,%eax
f0114a39:	89 c2                	mov    %eax,%edx
f0114a3b:	83 ec 0c             	sub    $0xc,%esp
f0114a3e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114a44:	50                   	push   %eax
f0114a45:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114a4b:	50                   	push   %eax
f0114a4c:	52                   	push   %edx
f0114a4d:	6a 00                	push   $0x0
f0114a4f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a52:	e8 19 38 ff ff       	call   f0108270 <calculate_allocated_space>
f0114a57:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114a5a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0114a61:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114a68:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a6e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114a71:	74 28                	je     f0114a9b <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114a73:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a79:	83 ec 0c             	sub    $0xc,%esp
f0114a7c:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a7f:	50                   	push   %eax
f0114a80:	68 90 9b 13 f0       	push   $0xf0139b90
f0114a85:	68 3f 07 00 00       	push   $0x73f
f0114a8a:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114a8f:	e8 9e b8 fe ff       	call   f0100332 <_warn>
f0114a94:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a97:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114a9b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114aa1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114aa4:	74 28                	je     f0114ace <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114aa6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114aac:	83 ec 0c             	sub    $0xc,%esp
f0114aaf:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ab2:	50                   	push   %eax
f0114ab3:	68 f0 9b 13 f0       	push   $0xf0139bf0
f0114ab8:	68 44 07 00 00       	push   $0x744
f0114abd:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114ac2:	e8 6b b8 fe ff       	call   f0100332 <_warn>
f0114ac7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114aca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ace:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ad2:	74 04                	je     f0114ad8 <test_calculate_allocated_space+0x8a1>
f0114ad4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ad8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0114adc:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114ae3:	00 00 00 
		num_pages = 0;
f0114ae6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114aed:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114af0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114af3:	c1 e0 0a             	shl    $0xa,%eax
f0114af6:	89 c2                	mov    %eax,%edx
f0114af8:	83 ec 0c             	sub    $0xc,%esp
f0114afb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114b01:	50                   	push   %eax
f0114b02:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114b08:	50                   	push   %eax
f0114b09:	52                   	push   %edx
f0114b0a:	6a 00                	push   $0x0
f0114b0c:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b0f:	e8 5c 37 ff ff       	call   f0108270 <calculate_allocated_space>
f0114b14:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0114b17:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0114b1e:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114b25:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b2b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114b2e:	74 28                	je     f0114b58 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114b30:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b36:	83 ec 0c             	sub    $0xc,%esp
f0114b39:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b3c:	50                   	push   %eax
f0114b3d:	68 90 9b 13 f0       	push   $0xf0139b90
f0114b42:	68 52 07 00 00       	push   $0x752
f0114b47:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114b4c:	e8 e1 b7 fe ff       	call   f0100332 <_warn>
f0114b51:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b54:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114b58:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b5e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114b61:	74 28                	je     f0114b8b <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114b63:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b69:	83 ec 0c             	sub    $0xc,%esp
f0114b6c:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114b6f:	50                   	push   %eax
f0114b70:	68 f0 9b 13 f0       	push   $0xf0139bf0
f0114b75:	68 57 07 00 00       	push   $0x757
f0114b7a:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114b7f:	e8 ae b7 fe ff       	call   f0100332 <_warn>
f0114b84:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b87:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114b8b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b8f:	74 04                	je     f0114b95 <test_calculate_allocated_space+0x95e>
f0114b91:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b95:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114b99:	83 ec 04             	sub    $0x4,%esp
f0114b9c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114ba2:	50                   	push   %eax
f0114ba3:	68 f0 9a 13 f0       	push   $0xf0139af0
f0114ba8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114bae:	50                   	push   %eax
f0114baf:	e8 09 be 01 00       	call   f01309bd <strcconcat>
f0114bb4:	83 c4 10             	add    $0x10,%esp
f0114bb7:	83 ec 0c             	sub    $0xc,%esp
f0114bba:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114bc0:	50                   	push   %eax
f0114bc1:	e8 c9 c0 fe ff       	call   f0100c8f <execute_command>
f0114bc6:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0114bc9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114bd0:	00 00 00 
		num_pages = 0;
f0114bd3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114bda:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114bdd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114be0:	89 c2                	mov    %eax,%edx
f0114be2:	01 d2                	add    %edx,%edx
f0114be4:	01 d0                	add    %edx,%eax
f0114be6:	05 00 18 00 00       	add    $0x1800,%eax
f0114beb:	89 c2                	mov    %eax,%edx
f0114bed:	83 ec 0c             	sub    $0xc,%esp
f0114bf0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114bf6:	50                   	push   %eax
f0114bf7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114bfd:	50                   	push   %eax
f0114bfe:	52                   	push   %edx
f0114bff:	68 00 18 00 00       	push   $0x1800
f0114c04:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c07:	e8 64 36 ff ff       	call   f0108270 <calculate_allocated_space>
f0114c0c:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114c0f:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114c16:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114c1d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c23:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114c26:	74 28                	je     f0114c50 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114c28:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c2e:	83 ec 0c             	sub    $0xc,%esp
f0114c31:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c34:	50                   	push   %eax
f0114c35:	68 90 9b 13 f0       	push   $0xf0139b90
f0114c3a:	68 68 07 00 00       	push   $0x768
f0114c3f:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114c44:	e8 e9 b6 fe ff       	call   f0100332 <_warn>
f0114c49:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c4c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114c50:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c56:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114c59:	74 28                	je     f0114c83 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114c5b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c61:	83 ec 0c             	sub    $0xc,%esp
f0114c64:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114c67:	50                   	push   %eax
f0114c68:	68 f0 9b 13 f0       	push   $0xf0139bf0
f0114c6d:	68 6d 07 00 00       	push   $0x76d
f0114c72:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114c77:	e8 b6 b6 fe ff       	call   f0100332 <_warn>
f0114c7c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c7f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114c83:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c87:	74 04                	je     f0114c8d <test_calculate_allocated_space+0xa56>
f0114c89:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114c8d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114c91:	83 ec 04             	sub    $0x4,%esp
f0114c94:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114c9a:	50                   	push   %eax
f0114c9b:	68 c8 8b 13 f0       	push   $0xf0138bc8
f0114ca0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114ca6:	50                   	push   %eax
f0114ca7:	e8 11 bd 01 00       	call   f01309bd <strcconcat>
f0114cac:	83 c4 10             	add    $0x10,%esp
f0114caf:	83 ec 0c             	sub    $0xc,%esp
f0114cb2:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114cb8:	50                   	push   %eax
f0114cb9:	e8 d1 bf fe ff       	call   f0100c8f <execute_command>
f0114cbe:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0114cc1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114cc8:	00 00 00 
		num_pages = 0;
f0114ccb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114cd2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0114cd5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114cd8:	89 d0                	mov    %edx,%eax
f0114cda:	c1 e0 02             	shl    $0x2,%eax
f0114cdd:	01 d0                	add    %edx,%eax
f0114cdf:	01 c0                	add    %eax,%eax
f0114ce1:	05 00 00 40 00       	add    $0x400000,%eax
f0114ce6:	89 c2                	mov    %eax,%edx
f0114ce8:	83 ec 0c             	sub    $0xc,%esp
f0114ceb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114cf1:	50                   	push   %eax
f0114cf2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114cf8:	50                   	push   %eax
f0114cf9:	52                   	push   %edx
f0114cfa:	68 00 00 40 00       	push   $0x400000
f0114cff:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d02:	e8 69 35 ff ff       	call   f0108270 <calculate_allocated_space>
f0114d07:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114d0a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114d11:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114d18:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d1e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114d21:	74 28                	je     f0114d4b <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114d23:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d29:	83 ec 0c             	sub    $0xc,%esp
f0114d2c:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d2f:	50                   	push   %eax
f0114d30:	68 90 9b 13 f0       	push   $0xf0139b90
f0114d35:	68 7d 07 00 00       	push   $0x77d
f0114d3a:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114d3f:	e8 ee b5 fe ff       	call   f0100332 <_warn>
f0114d44:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d47:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114d4b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d51:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114d54:	74 28                	je     f0114d7e <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114d56:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d5c:	83 ec 0c             	sub    $0xc,%esp
f0114d5f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114d62:	50                   	push   %eax
f0114d63:	68 f0 9b 13 f0       	push   $0xf0139bf0
f0114d68:	68 82 07 00 00       	push   $0x782
f0114d6d:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114d72:	e8 bb b5 fe ff       	call   f0100332 <_warn>
f0114d77:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d7a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d7e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d82:	74 04                	je     f0114d88 <test_calculate_allocated_space+0xb51>
f0114d84:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d88:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114d8c:	83 ec 04             	sub    $0x4,%esp
f0114d8f:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114d95:	50                   	push   %eax
f0114d96:	68 d2 8b 13 f0       	push   $0xf0138bd2
f0114d9b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114da1:	50                   	push   %eax
f0114da2:	e8 16 bc 01 00       	call   f01309bd <strcconcat>
f0114da7:	83 c4 10             	add    $0x10,%esp
f0114daa:	83 ec 0c             	sub    $0xc,%esp
f0114dad:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114db3:	50                   	push   %eax
f0114db4:	e8 d6 be fe ff       	call   f0100c8f <execute_command>
f0114db9:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114dbc:	83 ec 04             	sub    $0x4,%esp
f0114dbf:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114dc5:	50                   	push   %eax
f0114dc6:	68 f8 9a 13 f0       	push   $0xf0139af8
f0114dcb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114dd1:	50                   	push   %eax
f0114dd2:	e8 e6 bb 01 00       	call   f01309bd <strcconcat>
f0114dd7:	83 c4 10             	add    $0x10,%esp
f0114dda:	83 ec 0c             	sub    $0xc,%esp
f0114ddd:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114de3:	50                   	push   %eax
f0114de4:	e8 a6 be fe ff       	call   f0100c8f <execute_command>
f0114de9:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0114dec:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114df3:	00 00 00 
		num_pages = 0;
f0114df6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114dfd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114e00:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e03:	05 00 00 38 00       	add    $0x380000,%eax
f0114e08:	01 c0                	add    %eax,%eax
f0114e0a:	89 c2                	mov    %eax,%edx
f0114e0c:	83 ec 0c             	sub    $0xc,%esp
f0114e0f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114e15:	50                   	push   %eax
f0114e16:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114e1c:	50                   	push   %eax
f0114e1d:	52                   	push   %edx
f0114e1e:	68 00 00 70 00       	push   $0x700000
f0114e23:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e26:	e8 45 34 ff ff       	call   f0108270 <calculate_allocated_space>
f0114e2b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114e2e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0114e35:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114e3c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e42:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114e45:	74 28                	je     f0114e6f <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114e47:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e4d:	83 ec 0c             	sub    $0xc,%esp
f0114e50:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e53:	50                   	push   %eax
f0114e54:	68 90 9b 13 f0       	push   $0xf0139b90
f0114e59:	68 94 07 00 00       	push   $0x794
f0114e5e:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114e63:	e8 ca b4 fe ff       	call   f0100332 <_warn>
f0114e68:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e6b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114e6f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e75:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114e78:	74 28                	je     f0114ea2 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114e7a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e80:	83 ec 0c             	sub    $0xc,%esp
f0114e83:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114e86:	50                   	push   %eax
f0114e87:	68 f0 9b 13 f0       	push   $0xf0139bf0
f0114e8c:	68 99 07 00 00       	push   $0x799
f0114e91:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114e96:	e8 97 b4 fe ff       	call   f0100332 <_warn>
f0114e9b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e9e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114ea2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ea6:	74 04                	je     f0114eac <test_calculate_allocated_space+0xc75>
f0114ea8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114eac:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0114eb0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114eb7:	00 00 00 
		num_pages = 0;
f0114eba:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114ec1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114ec4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ec7:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0114ecc:	89 c2                	mov    %eax,%edx
f0114ece:	83 ec 0c             	sub    $0xc,%esp
f0114ed1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114ed7:	50                   	push   %eax
f0114ed8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114ede:	50                   	push   %eax
f0114edf:	52                   	push   %edx
f0114ee0:	68 ff ff 3f 00       	push   $0x3fffff
f0114ee5:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ee8:	e8 83 33 ff ff       	call   f0108270 <calculate_allocated_space>
f0114eed:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114ef0:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0114ef7:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114efe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f04:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114f07:	74 28                	je     f0114f31 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114f09:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f0f:	83 ec 0c             	sub    $0xc,%esp
f0114f12:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f15:	50                   	push   %eax
f0114f16:	68 90 9b 13 f0       	push   $0xf0139b90
f0114f1b:	68 a7 07 00 00       	push   $0x7a7
f0114f20:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114f25:	e8 08 b4 fe ff       	call   f0100332 <_warn>
f0114f2a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f2d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114f31:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f37:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114f3a:	74 28                	je     f0114f64 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114f3c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f42:	83 ec 0c             	sub    $0xc,%esp
f0114f45:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114f48:	50                   	push   %eax
f0114f49:	68 f0 9b 13 f0       	push   $0xf0139bf0
f0114f4e:	68 ac 07 00 00       	push   $0x7ac
f0114f53:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0114f58:	e8 d5 b3 fe ff       	call   f0100332 <_warn>
f0114f5d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f60:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114f64:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f68:	74 04                	je     f0114f6e <test_calculate_allocated_space+0xd37>
f0114f6a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114f6e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114f72:	83 ec 0c             	sub    $0xc,%esp
f0114f75:	68 83 8b 13 f0       	push   $0xf0138b83
f0114f7a:	e8 ae bc fe ff       	call   f0100c2d <cprintf>
f0114f7f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0114f82:	83 ec 08             	sub    $0x8,%esp
f0114f85:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114f88:	68 4c 9c 13 f0       	push   $0xf0139c4c
f0114f8d:	e8 9b bc fe ff       	call   f0100c2d <cprintf>
f0114f92:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114f95:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114f99:	75 10                	jne    f0114fab <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0114f9b:	83 ec 0c             	sub    $0xc,%esp
f0114f9e:	68 8c 9c 13 f0       	push   $0xf0139c8c
f0114fa3:	e8 85 bc fe ff       	call   f0100c2d <cprintf>
f0114fa8:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114fab:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f0114fb0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114fb3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114fb6:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114fb9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114fc1:	5b                   	pop    %ebx
f0114fc2:	5e                   	pop    %esi
f0114fc3:	5f                   	pop    %edi
f0114fc4:	5d                   	pop    %ebp
f0114fc5:	c3                   	ret    

f0114fc6 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0114fc6:	55                   	push   %ebp
f0114fc7:	89 e5                	mov    %esp,%ebp
f0114fc9:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0114fcc:	8b 45 10             	mov    0x10(%ebp),%eax
f0114fcf:	ba 01 00 00 00       	mov    $0x1,%edx
f0114fd4:	88 c1                	mov    %al,%cl
f0114fd6:	d3 e2                	shl    %cl,%edx
f0114fd8:	89 d0                	mov    %edx,%eax
f0114fda:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114fdd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114fe0:	c1 e8 16             	shr    $0x16,%eax
f0114fe3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114fea:	8b 45 08             	mov    0x8(%ebp),%eax
f0114fed:	01 d0                	add    %edx,%eax
f0114fef:	8b 00                	mov    (%eax),%eax
f0114ff1:	83 e0 01             	and    $0x1,%eax
f0114ff4:	85 c0                	test   %eax,%eax
f0114ff6:	75 07                	jne    f0114fff <CB+0x39>
f0114ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0114ffd:	eb 76                	jmp    f0115075 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114fff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115002:	c1 e8 16             	shr    $0x16,%eax
f0115005:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011500c:	8b 45 08             	mov    0x8(%ebp),%eax
f011500f:	01 d0                	add    %edx,%eax
f0115011:	8b 00                	mov    (%eax),%eax
f0115013:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115018:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011501b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011501e:	c1 e8 0c             	shr    $0xc,%eax
f0115021:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115024:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0115029:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011502c:	72 17                	jb     f0115045 <CB+0x7f>
f011502e:	ff 75 f0             	pushl  -0x10(%ebp)
f0115031:	68 d8 9c 13 f0       	push   $0xf0139cd8
f0115036:	68 c7 07 00 00       	push   $0x7c7
f011503b:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0115040:	e8 61 b1 fe ff       	call   f01001a6 <_panic>
f0115045:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115048:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011504d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0115050:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115053:	c1 e8 0c             	shr    $0xc,%eax
f0115056:	25 ff 03 00 00       	and    $0x3ff,%eax
f011505b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115062:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115065:	01 d0                	add    %edx,%eax
f0115067:	8b 00                	mov    (%eax),%eax
f0115069:	23 45 f4             	and    -0xc(%ebp),%eax
f011506c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011506f:	0f 94 c0             	sete   %al
f0115072:	0f b6 c0             	movzbl %al,%eax
}
f0115075:	c9                   	leave  
f0115076:	c3                   	ret    

f0115077 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0115077:	55                   	push   %ebp
f0115078:	89 e5                	mov    %esp,%ebp
f011507a:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011507d:	8b 45 10             	mov    0x10(%ebp),%eax
f0115080:	ba 01 00 00 00       	mov    $0x1,%edx
f0115085:	88 c1                	mov    %al,%cl
f0115087:	d3 e2                	shl    %cl,%edx
f0115089:	89 d0                	mov    %edx,%eax
f011508b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011508e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115091:	c1 e8 16             	shr    $0x16,%eax
f0115094:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011509b:	8b 45 08             	mov    0x8(%ebp),%eax
f011509e:	01 d0                	add    %edx,%eax
f01150a0:	8b 00                	mov    (%eax),%eax
f01150a2:	83 e0 01             	and    $0x1,%eax
f01150a5:	85 c0                	test   %eax,%eax
f01150a7:	75 0a                	jne    f01150b3 <SB+0x3c>
f01150a9:	b8 00 00 00 00       	mov    $0x0,%eax
f01150ae:	e9 cd 00 00 00       	jmp    f0115180 <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01150b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01150b6:	c1 e8 16             	shr    $0x16,%eax
f01150b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01150c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01150c3:	01 d0                	add    %edx,%eax
f01150c5:	8b 00                	mov    (%eax),%eax
f01150c7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01150cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01150cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01150d2:	c1 e8 0c             	shr    $0xc,%eax
f01150d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01150d8:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01150dd:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01150e0:	72 17                	jb     f01150f9 <SB+0x82>
f01150e2:	ff 75 f0             	pushl  -0x10(%ebp)
f01150e5:	68 d8 9c 13 f0       	push   $0xf0139cd8
f01150ea:	68 cf 07 00 00       	push   $0x7cf
f01150ef:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01150f4:	e8 ad b0 fe ff       	call   f01001a6 <_panic>
f01150f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01150fc:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115101:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0115104:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0115108:	74 3c                	je     f0115146 <SB+0xcf>
f011510a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011510d:	c1 e8 0c             	shr    $0xc,%eax
f0115110:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115115:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011511c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011511f:	01 d0                	add    %edx,%eax
f0115121:	8b 55 0c             	mov    0xc(%ebp),%edx
f0115124:	c1 ea 0c             	shr    $0xc,%edx
f0115127:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011512d:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0115134:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0115137:	01 ca                	add    %ecx,%edx
f0115139:	8b 12                	mov    (%edx),%edx
f011513b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011513e:	f7 d1                	not    %ecx
f0115140:	21 ca                	and    %ecx,%edx
f0115142:	89 10                	mov    %edx,(%eax)
f0115144:	eb 35                	jmp    f011517b <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0115146:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115149:	c1 e8 0c             	shr    $0xc,%eax
f011514c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115151:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115158:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011515b:	01 c2                	add    %eax,%edx
f011515d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115160:	c1 e8 0c             	shr    $0xc,%eax
f0115163:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115168:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011516f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115172:	01 c8                	add    %ecx,%eax
f0115174:	8b 00                	mov    (%eax),%eax
f0115176:	0b 45 f4             	or     -0xc(%ebp),%eax
f0115179:	89 02                	mov    %eax,(%edx)
	return 0;
f011517b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115180:	c9                   	leave  
f0115181:	c3                   	ret    

f0115182 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0115182:	55                   	push   %ebp
f0115183:	89 e5                	mov    %esp,%ebp
f0115185:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115188:	8b 45 0c             	mov    0xc(%ebp),%eax
f011518b:	c1 e8 16             	shr    $0x16,%eax
f011518e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115195:	8b 45 08             	mov    0x8(%ebp),%eax
f0115198:	01 d0                	add    %edx,%eax
f011519a:	8b 00                	mov    (%eax),%eax
f011519c:	83 e0 01             	and    $0x1,%eax
f011519f:	85 c0                	test   %eax,%eax
f01151a1:	75 0a                	jne    f01151ad <CPs+0x2b>
f01151a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01151a8:	e9 b8 00 00 00       	jmp    f0115265 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01151ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01151b0:	c1 e8 16             	shr    $0x16,%eax
f01151b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01151ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01151bd:	01 d0                	add    %edx,%eax
f01151bf:	8b 00                	mov    (%eax),%eax
f01151c1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01151c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01151c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01151cc:	c1 e8 0c             	shr    $0xc,%eax
f01151cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01151d2:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01151d7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01151da:	72 17                	jb     f01151f3 <CPs+0x71>
f01151dc:	ff 75 f0             	pushl  -0x10(%ebp)
f01151df:	68 d8 9c 13 f0       	push   $0xf0139cd8
f01151e4:	68 d8 07 00 00       	push   $0x7d8
f01151e9:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01151ee:	e8 b3 af fe ff       	call   f01001a6 <_panic>
f01151f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01151f6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01151fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f01151fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115205:	eb 53                	jmp    f011525a <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0115207:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011520a:	ba 01 00 00 00       	mov    $0x1,%edx
f011520f:	88 c1                	mov    %al,%cl
f0115211:	d3 e2                	shl    %cl,%edx
f0115213:	89 d0                	mov    %edx,%eax
f0115215:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0115218:	8b 45 14             	mov    0x14(%ebp),%eax
f011521b:	23 45 e4             	and    -0x1c(%ebp),%eax
f011521e:	85 c0                	test   %eax,%eax
f0115220:	74 34                	je     f0115256 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0115222:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115225:	c1 e8 0c             	shr    $0xc,%eax
f0115228:	25 ff 03 00 00       	and    $0x3ff,%eax
f011522d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115234:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115237:	01 d0                	add    %edx,%eax
f0115239:	8b 00                	mov    (%eax),%eax
f011523b:	33 45 10             	xor    0x10(%ebp),%eax
f011523e:	23 45 e4             	and    -0x1c(%ebp),%eax
f0115241:	85 c0                	test   %eax,%eax
f0115243:	0f 94 c0             	sete   %al
f0115246:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0115249:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011524d:	75 08                	jne    f0115257 <CPs+0xd5>
f011524f:	b8 00 00 00 00       	mov    $0x0,%eax
f0115254:	eb 0f                	jmp    f0115265 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0115256:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0115257:	ff 45 f4             	incl   -0xc(%ebp)
f011525a:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f011525e:	7e a7                	jle    f0115207 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0115260:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115265:	c9                   	leave  
f0115266:	c3                   	ret    

f0115267 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0115267:	55                   	push   %ebp
f0115268:	89 e5                	mov    %esp,%ebp
f011526a:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011526d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115270:	c1 e8 16             	shr    $0x16,%eax
f0115273:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011527a:	8b 45 08             	mov    0x8(%ebp),%eax
f011527d:	01 d0                	add    %edx,%eax
f011527f:	8b 00                	mov    (%eax),%eax
f0115281:	83 e0 01             	and    $0x1,%eax
f0115284:	85 c0                	test   %eax,%eax
f0115286:	75 07                	jne    f011528f <CA+0x28>
f0115288:	b8 00 00 00 00       	mov    $0x0,%eax
f011528d:	eb 6f                	jmp    f01152fe <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011528f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115292:	c1 e8 16             	shr    $0x16,%eax
f0115295:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011529c:	8b 45 08             	mov    0x8(%ebp),%eax
f011529f:	01 d0                	add    %edx,%eax
f01152a1:	8b 00                	mov    (%eax),%eax
f01152a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01152a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01152ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01152ae:	c1 e8 0c             	shr    $0xc,%eax
f01152b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01152b4:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01152b9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01152bc:	72 17                	jb     f01152d5 <CA+0x6e>
f01152be:	ff 75 f4             	pushl  -0xc(%ebp)
f01152c1:	68 d8 9c 13 f0       	push   $0xf0139cd8
f01152c6:	68 e7 07 00 00       	push   $0x7e7
f01152cb:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01152d0:	e8 d1 ae fe ff       	call   f01001a6 <_panic>
f01152d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01152d8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01152dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f01152e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01152e3:	c1 e8 0c             	shr    $0xc,%eax
f01152e6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01152eb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01152f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01152f5:	01 d0                	add    %edx,%eax
f01152f7:	8b 00                	mov    (%eax),%eax
f01152f9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01152fe:	c9                   	leave  
f01152ff:	c3                   	ret    

f0115300 <CE>:

int CE(uint32 *_d, uint32 va)
{
f0115300:	55                   	push   %ebp
f0115301:	89 e5                	mov    %esp,%ebp
f0115303:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115306:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115309:	c1 e8 16             	shr    $0x16,%eax
f011530c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115313:	8b 45 08             	mov    0x8(%ebp),%eax
f0115316:	01 d0                	add    %edx,%eax
f0115318:	8b 00                	mov    (%eax),%eax
f011531a:	83 e0 01             	and    $0x1,%eax
f011531d:	85 c0                	test   %eax,%eax
f011531f:	75 07                	jne    f0115328 <CE+0x28>
f0115321:	b8 00 00 00 00       	mov    $0x0,%eax
f0115326:	eb 7a                	jmp    f01153a2 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115328:	8b 45 0c             	mov    0xc(%ebp),%eax
f011532b:	c1 e8 16             	shr    $0x16,%eax
f011532e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115335:	8b 45 08             	mov    0x8(%ebp),%eax
f0115338:	01 d0                	add    %edx,%eax
f011533a:	8b 00                	mov    (%eax),%eax
f011533c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115341:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115344:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115347:	c1 e8 0c             	shr    $0xc,%eax
f011534a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011534d:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0115352:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115355:	72 17                	jb     f011536e <CE+0x6e>
f0115357:	ff 75 f4             	pushl  -0xc(%ebp)
f011535a:	68 d8 9c 13 f0       	push   $0xf0139cd8
f011535f:	68 ee 07 00 00       	push   $0x7ee
f0115364:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0115369:	e8 38 ae fe ff       	call   f01001a6 <_panic>
f011536e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115371:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115376:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0115379:	8b 45 0c             	mov    0xc(%ebp),%eax
f011537c:	c1 e8 0c             	shr    $0xc,%eax
f011537f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115384:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011538b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011538e:	01 d0                	add    %edx,%eax
f0115390:	8b 00                	mov    (%eax),%eax
f0115392:	85 c0                	test   %eax,%eax
f0115394:	74 07                	je     f011539d <CE+0x9d>
f0115396:	b8 00 00 00 00       	mov    $0x0,%eax
f011539b:	eb 05                	jmp    f01153a2 <CE+0xa2>
	return 1;
f011539d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01153a2:	c9                   	leave  
f01153a3:	c3                   	ret    

f01153a4 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f01153a4:	55                   	push   %ebp
f01153a5:	89 e5                	mov    %esp,%ebp
f01153a7:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f01153aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01153ad:	c1 e8 16             	shr    $0x16,%eax
f01153b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01153b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01153ba:	01 d0                	add    %edx,%eax
f01153bc:	8b 00                	mov    (%eax),%eax
f01153be:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f01153c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01153c4:	83 e0 01             	and    $0x1,%eax
f01153c7:	85 c0                	test   %eax,%eax
f01153c9:	0f 84 92 00 00 00    	je     f0115461 <CP+0xbd>
	{
		uint32 *t = NULL;
f01153cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f01153d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01153d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01153de:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01153e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01153e4:	c1 e8 0c             	shr    $0xc,%eax
f01153e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01153ea:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01153ef:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01153f2:	72 17                	jb     f011540b <CP+0x67>
f01153f4:	ff 75 ec             	pushl  -0x14(%ebp)
f01153f7:	68 d8 9c 13 f0       	push   $0xf0139cd8
f01153fc:	68 fa 07 00 00       	push   $0x7fa
f0115401:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0115406:	e8 9b ad fe ff       	call   f01001a6 <_panic>
f011540b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011540e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115413:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0115416:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115419:	c1 e8 0c             	shr    $0xc,%eax
f011541c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115421:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115428:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011542b:	01 d0                	add    %edx,%eax
f011542d:	8b 00                	mov    (%eax),%eax
f011542f:	23 45 10             	and    0x10(%ebp),%eax
f0115432:	3b 45 10             	cmp    0x10(%ebp),%eax
f0115435:	75 2a                	jne    f0115461 <CP+0xbd>
f0115437:	8b 45 0c             	mov    0xc(%ebp),%eax
f011543a:	c1 e8 0c             	shr    $0xc,%eax
f011543d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115442:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115449:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011544c:	01 d0                	add    %edx,%eax
f011544e:	8b 00                	mov    (%eax),%eax
f0115450:	f7 d0                	not    %eax
f0115452:	23 45 14             	and    0x14(%ebp),%eax
f0115455:	3b 45 14             	cmp    0x14(%ebp),%eax
f0115458:	75 07                	jne    f0115461 <CP+0xbd>
			return 1;
f011545a:	b8 01 00 00 00       	mov    $0x1,%eax
f011545f:	eb 05                	jmp    f0115466 <CP+0xc2>
	}
	return 0;
f0115461:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115466:	c9                   	leave  
f0115467:	c3                   	ret    

f0115468 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0115468:	55                   	push   %ebp
f0115469:	89 e5                	mov    %esp,%ebp
f011546b:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011546e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115471:	c1 e8 16             	shr    $0x16,%eax
f0115474:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011547b:	8b 45 08             	mov    0x8(%ebp),%eax
f011547e:	01 d0                	add    %edx,%eax
f0115480:	8b 00                	mov    (%eax),%eax
f0115482:	83 e0 01             	and    $0x1,%eax
f0115485:	85 c0                	test   %eax,%eax
f0115487:	75 07                	jne    f0115490 <GP+0x28>
f0115489:	b8 00 00 00 00       	mov    $0x0,%eax
f011548e:	eb 6f                	jmp    f01154ff <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115490:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115493:	c1 e8 16             	shr    $0x16,%eax
f0115496:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011549d:	8b 45 08             	mov    0x8(%ebp),%eax
f01154a0:	01 d0                	add    %edx,%eax
f01154a2:	8b 00                	mov    (%eax),%eax
f01154a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01154a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01154ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01154af:	c1 e8 0c             	shr    $0xc,%eax
f01154b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01154b5:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01154ba:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01154bd:	72 17                	jb     f01154d6 <GP+0x6e>
f01154bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01154c2:	68 d8 9c 13 f0       	push   $0xf0139cd8
f01154c7:	68 07 08 00 00       	push   $0x807
f01154cc:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01154d1:	e8 d0 ac fe ff       	call   f01001a6 <_panic>
f01154d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01154d9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01154de:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f01154e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01154e4:	c1 e8 0c             	shr    $0xc,%eax
f01154e7:	25 ff 03 00 00       	and    $0x3ff,%eax
f01154ec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01154f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01154f6:	01 d0                	add    %edx,%eax
f01154f8:	8b 00                	mov    (%eax),%eax
f01154fa:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f01154ff:	c9                   	leave  
f0115500:	c3                   	ret    

f0115501 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0115501:	55                   	push   %ebp
f0115502:	89 e5                	mov    %esp,%ebp
f0115504:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115507:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011550e:	eb 18                	jmp    f0115528 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115510:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115513:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011551a:	8b 45 08             	mov    0x8(%ebp),%eax
f011551d:	01 d0                	add    %edx,%eax
f011551f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115525:	ff 45 fc             	incl   -0x4(%ebp)
f0115528:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011552b:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0115530:	76 de                	jbe    f0115510 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115532:	90                   	nop
f0115533:	c9                   	leave  
f0115534:	c3                   	ret    

f0115535 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0115535:	55                   	push   %ebp
f0115536:	89 e5                	mov    %esp,%ebp
f0115538:	83 ec 38             	sub    $0x38,%esp
f011553b:	8b 45 2c             	mov    0x2c(%ebp),%eax
f011553e:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0115541:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115544:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115549:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f011554c:	8b 45 10             	mov    0x10(%ebp),%eax
f011554f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115554:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115557:	e9 ea 01 00 00       	jmp    f0115746 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f011555c:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115560:	74 44                	je     f01155a6 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0115562:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115565:	83 ec 04             	sub    $0x4,%esp
f0115568:	8d 55 dc             	lea    -0x24(%ebp),%edx
f011556b:	52                   	push   %edx
f011556c:	50                   	push   %eax
f011556d:	ff 75 08             	pushl  0x8(%ebp)
f0115570:	e8 8c 16 ff ff       	call   f0106c01 <get_frame_info>
f0115575:	83 c4 10             	add    $0x10,%esp
f0115578:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f011557b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011557e:	85 c0                	test   %eax,%eax
f0115580:	75 24                	jne    f01155a6 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0115582:	83 ec 04             	sub    $0x4,%esp
f0115585:	68 08 9d 13 f0       	push   $0xf0139d08
f011558a:	68 22 08 00 00       	push   $0x822
f011558f:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0115594:	e8 99 ad fe ff       	call   f0100332 <_warn>
f0115599:	83 c4 10             	add    $0x10,%esp
				return 0;
f011559c:	b8 00 00 00 00       	mov    $0x0,%eax
f01155a1:	e9 b6 01 00 00       	jmp    f011575c <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01155a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01155a9:	83 ec 04             	sub    $0x4,%esp
f01155ac:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01155af:	52                   	push   %edx
f01155b0:	50                   	push   %eax
f01155b1:	ff 75 08             	pushl  0x8(%ebp)
f01155b4:	e8 48 16 ff ff       	call   f0106c01 <get_frame_info>
f01155b9:	83 c4 10             	add    $0x10,%esp
f01155bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f01155bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01155c2:	85 c0                	test   %eax,%eax
f01155c4:	75 24                	jne    f01155ea <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f01155c6:	83 ec 04             	sub    $0x4,%esp
f01155c9:	68 34 9d 13 f0       	push   $0xf0139d34
f01155ce:	68 29 08 00 00       	push   $0x829
f01155d3:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01155d8:	e8 55 ad fe ff       	call   f0100332 <_warn>
f01155dd:	83 c4 10             	add    $0x10,%esp
			return 0;
f01155e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01155e5:	e9 72 01 00 00       	jmp    f011575c <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f01155ea:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f01155ee:	75 70                	jne    f0115660 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f01155f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01155f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01155f6:	c1 ea 0c             	shr    $0xc,%edx
f01155f9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01155ff:	c1 e2 02             	shl    $0x2,%edx
f0115602:	01 d0                	add    %edx,%eax
f0115604:	8b 00                	mov    (%eax),%eax
f0115606:	c1 e8 0c             	shr    $0xc,%eax
f0115609:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f011560c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011560f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0115612:	c1 ea 0c             	shr    $0xc,%edx
f0115615:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011561b:	c1 e2 02             	shl    $0x2,%edx
f011561e:	01 d0                	add    %edx,%eax
f0115620:	8b 00                	mov    (%eax),%eax
f0115622:	c1 e8 0c             	shr    $0xc,%eax
f0115625:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0115628:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011562b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011562e:	74 30                	je     f0115660 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0115630:	83 ec 04             	sub    $0x4,%esp
f0115633:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115636:	ff 75 e8             	pushl  -0x18(%ebp)
f0115639:	ff 75 f0             	pushl  -0x10(%ebp)
f011563c:	ff 75 f4             	pushl  -0xc(%ebp)
f011563f:	68 60 9d 13 f0       	push   $0xf0139d60
f0115644:	68 33 08 00 00       	push   $0x833
f0115649:	68 5e 7e 13 f0       	push   $0xf0137e5e
f011564e:	e8 df ac fe ff       	call   f0100332 <_warn>
f0115653:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115656:	b8 00 00 00 00       	mov    $0x0,%eax
f011565b:	e9 fc 00 00 00       	jmp    f011575c <CCP+0x227>
			}
		}
		if (ref != -1)
f0115660:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0115664:	74 52                	je     f01156b8 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0115666:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011566a:	74 0e                	je     f011567a <CCP+0x145>
f011566c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011566f:	8b 40 08             	mov    0x8(%eax),%eax
f0115672:	0f b7 c0             	movzwl %ax,%eax
f0115675:	3b 45 18             	cmp    0x18(%ebp),%eax
f0115678:	74 3e                	je     f01156b8 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f011567a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011567e:	74 0b                	je     f011568b <CCP+0x156>
f0115680:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115683:	8b 40 08             	mov    0x8(%eax),%eax
f0115686:	0f b7 c0             	movzwl %ax,%eax
f0115689:	eb 05                	jmp    f0115690 <CCP+0x15b>
f011568b:	b8 00 00 00 00       	mov    $0x0,%eax
f0115690:	83 ec 0c             	sub    $0xc,%esp
f0115693:	50                   	push   %eax
f0115694:	ff 75 f0             	pushl  -0x10(%ebp)
f0115697:	68 bc 9d 13 f0       	push   $0xf0139dbc
f011569c:	68 3b 08 00 00       	push   $0x83b
f01156a1:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01156a6:	e8 87 ac fe ff       	call   f0100332 <_warn>
f01156ab:	83 c4 20             	add    $0x20,%esp
				return 0;
f01156ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01156b3:	e9 a4 00 00 00       	jmp    f011575c <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f01156b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01156bb:	ff 75 20             	pushl  0x20(%ebp)
f01156be:	ff 75 1c             	pushl  0x1c(%ebp)
f01156c1:	50                   	push   %eax
f01156c2:	ff 75 08             	pushl  0x8(%ebp)
f01156c5:	e8 b8 fa ff ff       	call   f0115182 <CPs>
f01156ca:	83 c4 10             	add    $0x10,%esp
f01156cd:	85 c0                	test   %eax,%eax
f01156cf:	7f 21                	jg     f01156f2 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f01156d1:	83 ec 04             	sub    $0x4,%esp
f01156d4:	68 2c 9e 13 f0       	push   $0xf0139e2c
f01156d9:	68 41 08 00 00       	push   $0x841
f01156de:	68 5e 7e 13 f0       	push   $0xf0137e5e
f01156e3:	e8 4a ac fe ff       	call   f0100332 <_warn>
f01156e8:	83 c4 10             	add    $0x10,%esp
			return 0;
f01156eb:	b8 00 00 00 00       	mov    $0x0,%eax
f01156f0:	eb 6a                	jmp    f011575c <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f01156f2:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01156f6:	74 3a                	je     f0115732 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f01156f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01156fb:	ff 75 28             	pushl  0x28(%ebp)
f01156fe:	ff 75 24             	pushl  0x24(%ebp)
f0115701:	50                   	push   %eax
f0115702:	ff 75 08             	pushl  0x8(%ebp)
f0115705:	e8 78 fa ff ff       	call   f0115182 <CPs>
f011570a:	83 c4 10             	add    $0x10,%esp
f011570d:	85 c0                	test   %eax,%eax
f011570f:	7f 21                	jg     f0115732 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115711:	83 ec 04             	sub    $0x4,%esp
f0115714:	68 74 9e 13 f0       	push   $0xf0139e74
f0115719:	68 48 08 00 00       	push   $0x848
f011571e:	68 5e 7e 13 f0       	push   $0xf0137e5e
f0115723:	e8 0a ac fe ff       	call   f0100332 <_warn>
f0115728:	83 c4 10             	add    $0x10,%esp
				return 0;
f011572b:	b8 00 00 00 00       	mov    $0x0,%eax
f0115730:	eb 2a                	jmp    f011575c <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115732:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115736:	74 07                	je     f011573f <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0115738:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f011573f:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0115746:	8b 55 10             	mov    0x10(%ebp),%edx
f0115749:	8b 45 14             	mov    0x14(%ebp),%eax
f011574c:	01 d0                	add    %edx,%eax
f011574e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115751:	0f 87 05 fe ff ff    	ja     f011555c <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0115757:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011575c:	c9                   	leave  
f011575d:	c3                   	ret    

f011575e <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f011575e:	55                   	push   %ebp
f011575f:	89 e5                	mov    %esp,%ebp
f0115761:	57                   	push   %edi
f0115762:	56                   	push   %esi
f0115763:	53                   	push   %ebx
f0115764:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f011576a:	a0 ce 0c 19 f0       	mov    0xf0190cce,%al
f011576f:	84 c0                	test   %al,%al
f0115771:	0f 84 a8 09 00 00    	je     f011611f <test_priority_normal_and_higher+0x9c1>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115777:	c6 05 ce 0c 19 f0 00 	movb   $0x0,0xf0190cce
		char command[100] = "load fos_add 20";
f011577e:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115784:	bb 14 a1 13 f0       	mov    $0xf013a114,%ebx
f0115789:	ba 04 00 00 00       	mov    $0x4,%edx
f011578e:	89 c7                	mov    %eax,%edi
f0115790:	89 de                	mov    %ebx,%esi
f0115792:	89 d1                	mov    %edx,%ecx
f0115794:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115796:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f011579c:	b9 15 00 00 00       	mov    $0x15,%ecx
f01157a1:	b8 00 00 00 00       	mov    $0x0,%eax
f01157a6:	89 d7                	mov    %edx,%edi
f01157a8:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01157aa:	83 ec 0c             	sub    $0xc,%esp
f01157ad:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01157b3:	50                   	push   %eax
f01157b4:	e8 d6 b4 fe ff       	call   f0100c8f <execute_command>
f01157b9:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f01157bc:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f01157c2:	bb 78 a1 13 f0       	mov    $0xf013a178,%ebx
f01157c7:	ba 0d 00 00 00       	mov    $0xd,%edx
f01157cc:	89 c7                	mov    %eax,%edi
f01157ce:	89 de                	mov    %ebx,%esi
f01157d0:	89 d1                	mov    %edx,%ecx
f01157d2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01157d4:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f01157da:	b9 57 00 00 00       	mov    $0x57,%ecx
f01157df:	b0 00                	mov    $0x0,%al
f01157e1:	89 d7                	mov    %edx,%edi
f01157e3:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01157e5:	83 ec 0c             	sub    $0xc,%esp
f01157e8:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f01157ee:	50                   	push   %eax
f01157ef:	e8 9b b4 fe ff       	call   f0100c8f <execute_command>
f01157f4:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f01157f7:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01157fd:	bb dc a1 13 f0       	mov    $0xf013a1dc,%ebx
f0115802:	ba 17 00 00 00       	mov    $0x17,%edx
f0115807:	89 c7                	mov    %eax,%edi
f0115809:	89 de                	mov    %ebx,%esi
f011580b:	89 d1                	mov    %edx,%ecx
f011580d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011580f:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115815:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011581a:	b0 00                	mov    $0x0,%al
f011581c:	89 d7                	mov    %edx,%edi
f011581e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115820:	83 ec 0c             	sub    $0xc,%esp
f0115823:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115829:	50                   	push   %eax
f011582a:	e8 60 b4 fe ff       	call   f0100c8f <execute_command>
f011582f:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115832:	83 ec 04             	sub    $0x4,%esp
f0115835:	6a 00                	push   $0x0
f0115837:	8d 45 ac             	lea    -0x54(%ebp),%eax
f011583a:	50                   	push   %eax
f011583b:	68 00 10 00 00       	push   $0x1000
f0115840:	e8 7c 38 ff ff       	call   f01090c1 <envid2env>
f0115845:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115848:	83 ec 04             	sub    $0x4,%esp
f011584b:	6a 00                	push   $0x0
f011584d:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0115850:	50                   	push   %eax
f0115851:	68 01 10 00 00       	push   $0x1001
f0115856:	e8 66 38 ff ff       	call   f01090c1 <envid2env>
f011585b:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011585e:	83 ec 04             	sub    $0x4,%esp
f0115861:	6a 00                	push   $0x0
f0115863:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0115866:	50                   	push   %eax
f0115867:	68 02 10 00 00       	push   $0x1002
f011586c:	e8 50 38 ff ff       	call   f01090c1 <envid2env>
f0115871:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115874:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115877:	85 c0                	test   %eax,%eax
f0115879:	74 0e                	je     f0115889 <test_priority_normal_and_higher+0x12b>
f011587b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011587e:	85 c0                	test   %eax,%eax
f0115880:	74 07                	je     f0115889 <test_priority_normal_and_higher+0x12b>
f0115882:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115885:	85 c0                	test   %eax,%eax
f0115887:	75 14                	jne    f011589d <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115889:	83 ec 04             	sub    $0x4,%esp
f011588c:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115891:	6a 26                	push   $0x26
f0115893:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115898:	e8 09 a9 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011589d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01158a0:	8b 40 74             	mov    0x74(%eax),%eax
f01158a3:	83 f8 14             	cmp    $0x14,%eax
f01158a6:	75 16                	jne    f01158be <test_priority_normal_and_higher+0x160>
f01158a8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01158ab:	8b 40 74             	mov    0x74(%eax),%eax
f01158ae:	83 f8 0f             	cmp    $0xf,%eax
f01158b1:	75 0b                	jne    f01158be <test_priority_normal_and_higher+0x160>
f01158b3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01158b6:	8b 40 74             	mov    0x74(%eax),%eax
f01158b9:	83 f8 0a             	cmp    $0xa,%eax
f01158bc:	74 14                	je     f01158d2 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f01158be:	83 ec 04             	sub    $0x4,%esp
f01158c1:	68 e8 9e 13 f0       	push   $0xf0139ee8
f01158c6:	6a 29                	push   $0x29
f01158c8:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01158cd:	e8 d4 a8 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f01158d2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01158d9:	eb 43                	jmp    f011591e <test_priority_normal_and_higher+0x1c0>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01158db:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f01158de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01158e1:	89 d0                	mov    %edx,%eax
f01158e3:	01 c0                	add    %eax,%eax
f01158e5:	01 d0                	add    %edx,%eax
f01158e7:	c1 e0 03             	shl    $0x3,%eax
f01158ea:	01 c8                	add    %ecx,%eax
f01158ec:	83 c0 78             	add    $0x78,%eax
f01158ef:	8b 10                	mov    (%eax),%edx
f01158f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01158f4:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01158fb:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f01158fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115901:	89 d0                	mov    %edx,%eax
f0115903:	01 c0                	add    %eax,%eax
f0115905:	01 d0                	add    %edx,%eax
f0115907:	c1 e0 03             	shl    $0x3,%eax
f011590a:	01 c8                	add    %ecx,%eax
f011590c:	83 e8 80             	sub    $0xffffff80,%eax
f011590f:	8b 10                	mov    (%eax),%edx
f0115911:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115914:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011591b:	ff 45 e4             	incl   -0x1c(%ebp)
f011591e:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115922:	7e b7                	jle    f01158db <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115924:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011592b:	eb 43                	jmp    f0115970 <test_priority_normal_and_higher+0x212>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011592d:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115930:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115933:	89 d0                	mov    %edx,%eax
f0115935:	01 c0                	add    %eax,%eax
f0115937:	01 d0                	add    %edx,%eax
f0115939:	c1 e0 03             	shl    $0x3,%eax
f011593c:	01 c8                	add    %ecx,%eax
f011593e:	83 c0 78             	add    $0x78,%eax
f0115941:	8b 10                	mov    (%eax),%edx
f0115943:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115946:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011594d:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115950:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115953:	89 d0                	mov    %edx,%eax
f0115955:	01 c0                	add    %eax,%eax
f0115957:	01 d0                	add    %edx,%eax
f0115959:	c1 e0 03             	shl    $0x3,%eax
f011595c:	01 c8                	add    %ecx,%eax
f011595e:	83 e8 80             	sub    $0xffffff80,%eax
f0115961:	8b 10                	mov    (%eax),%edx
f0115963:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115966:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011596d:	ff 45 e0             	incl   -0x20(%ebp)
f0115970:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0115974:	7e b7                	jle    f011592d <test_priority_normal_and_higher+0x1cf>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115976:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011597d:	eb 43                	jmp    f01159c2 <test_priority_normal_and_higher+0x264>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011597f:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115982:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115985:	89 d0                	mov    %edx,%eax
f0115987:	01 c0                	add    %eax,%eax
f0115989:	01 d0                	add    %edx,%eax
f011598b:	c1 e0 03             	shl    $0x3,%eax
f011598e:	01 c8                	add    %ecx,%eax
f0115990:	83 c0 78             	add    $0x78,%eax
f0115993:	8b 10                	mov    (%eax),%edx
f0115995:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115998:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011599f:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01159a2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01159a5:	89 d0                	mov    %edx,%eax
f01159a7:	01 c0                	add    %eax,%eax
f01159a9:	01 d0                	add    %edx,%eax
f01159ab:	c1 e0 03             	shl    $0x3,%eax
f01159ae:	01 c8                	add    %ecx,%eax
f01159b0:	83 e8 80             	sub    $0xffffff80,%eax
f01159b3:	8b 10                	mov    (%eax),%edx
f01159b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01159b8:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01159bf:	ff 45 dc             	incl   -0x24(%ebp)
f01159c2:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f01159c6:	7e b7                	jle    f011597f <test_priority_normal_and_higher+0x221>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01159c8:	e8 e5 66 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01159cd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f01159d0:	e8 b7 e2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01159d5:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01159d8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01159db:	83 ec 08             	sub    $0x8,%esp
f01159de:	6a 03                	push   $0x3
f01159e0:	50                   	push   %eax
f01159e1:	e8 c2 4b ff ff       	call   f010a5a8 <set_program_priority>
f01159e6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01159e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01159ec:	83 ec 08             	sub    $0x8,%esp
f01159ef:	6a 03                	push   $0x3
f01159f1:	50                   	push   %eax
f01159f2:	e8 b1 4b ff ff       	call   f010a5a8 <set_program_priority>
f01159f7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01159fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01159fd:	83 ec 08             	sub    $0x8,%esp
f0115a00:	6a 03                	push   $0x3
f0115a02:	50                   	push   %eax
f0115a03:	e8 a0 4b ff ff       	call   f010a5a8 <set_program_priority>
f0115a08:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115a0b:	e8 7c e2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115a10:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115a13:	74 14                	je     f0115a29 <test_priority_normal_and_higher+0x2cb>
f0115a15:	83 ec 04             	sub    $0x4,%esp
f0115a18:	68 34 9f 13 f0       	push   $0xf0139f34
f0115a1d:	6a 45                	push   $0x45
f0115a1f:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115a24:	e8 7d a7 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115a29:	e8 84 66 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115a2e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115a31:	74 14                	je     f0115a47 <test_priority_normal_and_higher+0x2e9>
f0115a33:	83 ec 04             	sub    $0x4,%esp
f0115a36:	68 34 9f 13 f0       	push   $0xf0139f34
f0115a3b:	6a 46                	push   $0x46
f0115a3d:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115a42:	e8 5f a7 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115a47:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115a4a:	8b 40 74             	mov    0x74(%eax),%eax
f0115a4d:	83 f8 14             	cmp    $0x14,%eax
f0115a50:	75 16                	jne    f0115a68 <test_priority_normal_and_higher+0x30a>
f0115a52:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a55:	8b 40 74             	mov    0x74(%eax),%eax
f0115a58:	83 f8 0f             	cmp    $0xf,%eax
f0115a5b:	75 0b                	jne    f0115a68 <test_priority_normal_and_higher+0x30a>
f0115a5d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115a60:	8b 40 74             	mov    0x74(%eax),%eax
f0115a63:	83 f8 0a             	cmp    $0xa,%eax
f0115a66:	74 14                	je     f0115a7c <test_priority_normal_and_higher+0x31e>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0115a68:	83 ec 04             	sub    $0x4,%esp
f0115a6b:	68 60 9f 13 f0       	push   $0xf0139f60
f0115a70:	6a 49                	push   $0x49
f0115a72:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115a77:	e8 2a a7 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115a7c:	e8 31 66 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115a81:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115a84:	e8 03 e2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115a89:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0115a8c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115a8f:	83 ec 08             	sub    $0x8,%esp
f0115a92:	6a 04                	push   $0x4
f0115a94:	50                   	push   %eax
f0115a95:	e8 0e 4b ff ff       	call   f010a5a8 <set_program_priority>
f0115a9a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0115a9d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115aa0:	83 ec 08             	sub    $0x8,%esp
f0115aa3:	6a 04                	push   $0x4
f0115aa5:	50                   	push   %eax
f0115aa6:	e8 fd 4a ff ff       	call   f010a5a8 <set_program_priority>
f0115aab:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115aae:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ab1:	83 ec 08             	sub    $0x8,%esp
f0115ab4:	6a 04                	push   $0x4
f0115ab6:	50                   	push   %eax
f0115ab7:	e8 ec 4a ff ff       	call   f010a5a8 <set_program_priority>
f0115abc:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115abf:	e8 c8 e1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115ac4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115ac7:	74 14                	je     f0115add <test_priority_normal_and_higher+0x37f>
f0115ac9:	83 ec 04             	sub    $0x4,%esp
f0115acc:	68 34 9f 13 f0       	push   $0xf0139f34
f0115ad1:	6a 53                	push   $0x53
f0115ad3:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115ad8:	e8 c9 a6 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0115add:	e8 d0 65 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115ae2:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115ae5:	74 14                	je     f0115afb <test_priority_normal_and_higher+0x39d>
f0115ae7:	83 ec 04             	sub    $0x4,%esp
f0115aea:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0115aef:	6a 54                	push   $0x54
f0115af1:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115af6:	e8 ab a6 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115afb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115afe:	8b 40 74             	mov    0x74(%eax),%eax
f0115b01:	83 f8 14             	cmp    $0x14,%eax
f0115b04:	75 16                	jne    f0115b1c <test_priority_normal_and_higher+0x3be>
f0115b06:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115b09:	8b 40 74             	mov    0x74(%eax),%eax
f0115b0c:	83 f8 0f             	cmp    $0xf,%eax
f0115b0f:	75 0b                	jne    f0115b1c <test_priority_normal_and_higher+0x3be>
f0115b11:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b14:	8b 40 74             	mov    0x74(%eax),%eax
f0115b17:	83 f8 14             	cmp    $0x14,%eax
f0115b1a:	74 14                	je     f0115b30 <test_priority_normal_and_higher+0x3d2>
			panic("The programs' working set size should be doubled only if it is full\n");
f0115b1c:	83 ec 04             	sub    $0x4,%esp
f0115b1f:	68 e4 9f 13 f0       	push   $0xf0139fe4
f0115b24:	6a 57                	push   $0x57
f0115b26:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115b2b:	e8 76 a6 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115b30:	e8 7d 65 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115b35:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115b38:	e8 4f e1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115b3d:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0115b40:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b43:	83 ec 08             	sub    $0x8,%esp
f0115b46:	6a 04                	push   $0x4
f0115b48:	50                   	push   %eax
f0115b49:	e8 5a 4a ff ff       	call   f010a5a8 <set_program_priority>
f0115b4e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115b51:	e8 36 e1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115b56:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115b59:	74 14                	je     f0115b6f <test_priority_normal_and_higher+0x411>
f0115b5b:	83 ec 04             	sub    $0x4,%esp
f0115b5e:	68 34 9f 13 f0       	push   $0xf0139f34
f0115b63:	6a 5f                	push   $0x5f
f0115b65:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115b6a:	e8 37 a6 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115b6f:	e8 3e 65 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115b74:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115b77:	74 14                	je     f0115b8d <test_priority_normal_and_higher+0x42f>
f0115b79:	83 ec 04             	sub    $0x4,%esp
f0115b7c:	68 34 9f 13 f0       	push   $0xf0139f34
f0115b81:	6a 60                	push   $0x60
f0115b83:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115b88:	e8 19 a6 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115b8d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115b90:	8b 40 74             	mov    0x74(%eax),%eax
f0115b93:	83 f8 14             	cmp    $0x14,%eax
f0115b96:	75 16                	jne    f0115bae <test_priority_normal_and_higher+0x450>
f0115b98:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115b9b:	8b 40 74             	mov    0x74(%eax),%eax
f0115b9e:	83 f8 0f             	cmp    $0xf,%eax
f0115ba1:	75 0b                	jne    f0115bae <test_priority_normal_and_higher+0x450>
f0115ba3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ba6:	8b 40 74             	mov    0x74(%eax),%eax
f0115ba9:	83 f8 14             	cmp    $0x14,%eax
f0115bac:	74 14                	je     f0115bc2 <test_priority_normal_and_higher+0x464>
			panic("The programs' working set size should be doubled only once\n");
f0115bae:	83 ec 04             	sub    $0x4,%esp
f0115bb1:	68 2c a0 13 f0       	push   $0xf013a02c
f0115bb6:	6a 63                	push   $0x63
f0115bb8:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115bbd:	e8 e4 a5 fe ff       	call   f01001a6 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115bc2:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0115bc9:	eb 1a                	jmp    f0115be5 <test_priority_normal_and_higher+0x487>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115bcb:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115bce:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0115bd1:	89 d0                	mov    %edx,%eax
f0115bd3:	01 c0                	add    %eax,%eax
f0115bd5:	01 d0                	add    %edx,%eax
f0115bd7:	c1 e0 03             	shl    $0x3,%eax
f0115bda:	01 c8                	add    %ecx,%eax
f0115bdc:	83 c0 7c             	add    $0x7c,%eax
f0115bdf:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115be2:	ff 45 d8             	incl   -0x28(%ebp)
f0115be5:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0115be9:	7e e0                	jle    f0115bcb <test_priority_normal_and_higher+0x46d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115beb:	e8 c2 64 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115bf0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115bf3:	e8 94 e0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115bf8:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0115bfb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115bfe:	83 ec 08             	sub    $0x8,%esp
f0115c01:	6a 04                	push   $0x4
f0115c03:	50                   	push   %eax
f0115c04:	e8 9f 49 ff ff       	call   f010a5a8 <set_program_priority>
f0115c09:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115c0c:	e8 7b e0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115c11:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115c14:	74 14                	je     f0115c2a <test_priority_normal_and_higher+0x4cc>
f0115c16:	83 ec 04             	sub    $0x4,%esp
f0115c19:	68 34 9f 13 f0       	push   $0xf0139f34
f0115c1e:	6a 70                	push   $0x70
f0115c20:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115c25:	e8 7c a5 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115c2a:	e8 83 64 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115c2f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115c32:	74 14                	je     f0115c48 <test_priority_normal_and_higher+0x4ea>
f0115c34:	83 ec 04             	sub    $0x4,%esp
f0115c37:	68 34 9f 13 f0       	push   $0xf0139f34
f0115c3c:	6a 71                	push   $0x71
f0115c3e:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115c43:	e8 5e a5 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115c48:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115c4b:	8b 40 74             	mov    0x74(%eax),%eax
f0115c4e:	83 f8 14             	cmp    $0x14,%eax
f0115c51:	75 16                	jne    f0115c69 <test_priority_normal_and_higher+0x50b>
f0115c53:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115c56:	8b 40 74             	mov    0x74(%eax),%eax
f0115c59:	83 f8 0f             	cmp    $0xf,%eax
f0115c5c:	75 0b                	jne    f0115c69 <test_priority_normal_and_higher+0x50b>
f0115c5e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115c61:	8b 40 74             	mov    0x74(%eax),%eax
f0115c64:	83 f8 14             	cmp    $0x14,%eax
f0115c67:	74 14                	je     f0115c7d <test_priority_normal_and_higher+0x51f>
			panic("The programs' working set size should be doubled only once\n");
f0115c69:	83 ec 04             	sub    $0x4,%esp
f0115c6c:	68 2c a0 13 f0       	push   $0xf013a02c
f0115c71:	6a 74                	push   $0x74
f0115c73:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115c78:	e8 29 a5 fe ff       	call   f01001a6 <_panic>

		for(int i = 10; i < 15; i++)
f0115c7d:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0115c84:	eb 1a                	jmp    f0115ca0 <test_priority_normal_and_higher+0x542>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0115c86:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115c89:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0115c8c:	89 d0                	mov    %edx,%eax
f0115c8e:	01 c0                	add    %eax,%eax
f0115c90:	01 d0                	add    %edx,%eax
f0115c92:	c1 e0 03             	shl    $0x3,%eax
f0115c95:	01 c8                	add    %ecx,%eax
f0115c97:	83 c0 7c             	add    $0x7c,%eax
f0115c9a:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0115c9d:	ff 45 d4             	incl   -0x2c(%ebp)
f0115ca0:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0115ca4:	7e e0                	jle    f0115c86 <test_priority_normal_and_higher+0x528>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115ca6:	e8 07 64 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115cab:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115cae:	e8 d9 df fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115cb3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115cb6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115cb9:	83 ec 08             	sub    $0x8,%esp
f0115cbc:	6a 05                	push   $0x5
f0115cbe:	50                   	push   %eax
f0115cbf:	e8 e4 48 ff ff       	call   f010a5a8 <set_program_priority>
f0115cc4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0115cc7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115cca:	83 ec 08             	sub    $0x8,%esp
f0115ccd:	6a 05                	push   $0x5
f0115ccf:	50                   	push   %eax
f0115cd0:	e8 d3 48 ff ff       	call   f010a5a8 <set_program_priority>
f0115cd5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115cd8:	e8 af df fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115cdd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115ce0:	74 14                	je     f0115cf6 <test_priority_normal_and_higher+0x598>
f0115ce2:	83 ec 04             	sub    $0x4,%esp
f0115ce5:	68 34 9f 13 f0       	push   $0xf0139f34
f0115cea:	6a 7f                	push   $0x7f
f0115cec:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115cf1:	e8 b0 a4 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115cf6:	e8 b7 63 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115cfb:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115cfe:	74 17                	je     f0115d17 <test_priority_normal_and_higher+0x5b9>
f0115d00:	83 ec 04             	sub    $0x4,%esp
f0115d03:	68 34 9f 13 f0       	push   $0xf0139f34
f0115d08:	68 80 00 00 00       	push   $0x80
f0115d0d:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115d12:	e8 8f a4 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115d17:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115d1a:	8b 40 74             	mov    0x74(%eax),%eax
f0115d1d:	83 f8 14             	cmp    $0x14,%eax
f0115d20:	75 16                	jne    f0115d38 <test_priority_normal_and_higher+0x5da>
f0115d22:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115d25:	8b 40 74             	mov    0x74(%eax),%eax
f0115d28:	83 f8 1e             	cmp    $0x1e,%eax
f0115d2b:	75 0b                	jne    f0115d38 <test_priority_normal_and_higher+0x5da>
f0115d2d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115d30:	8b 40 74             	mov    0x74(%eax),%eax
f0115d33:	83 f8 28             	cmp    $0x28,%eax
f0115d36:	74 17                	je     f0115d4f <test_priority_normal_and_higher+0x5f1>
			panic("The programs' working set size should be doubled if full\n");
f0115d38:	83 ec 04             	sub    $0x4,%esp
f0115d3b:	68 68 a0 13 f0       	push   $0xf013a068
f0115d40:	68 83 00 00 00       	push   $0x83
f0115d45:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115d4a:	e8 57 a4 fe ff       	call   f01001a6 <_panic>

		for(int i = 20; i < 40; i++)
f0115d4f:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0115d56:	eb 1a                	jmp    f0115d72 <test_priority_normal_and_higher+0x614>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115d58:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115d5b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115d5e:	89 d0                	mov    %edx,%eax
f0115d60:	01 c0                	add    %eax,%eax
f0115d62:	01 d0                	add    %edx,%eax
f0115d64:	c1 e0 03             	shl    $0x3,%eax
f0115d67:	01 c8                	add    %ecx,%eax
f0115d69:	83 c0 7c             	add    $0x7c,%eax
f0115d6c:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0115d6f:	ff 45 d0             	incl   -0x30(%ebp)
f0115d72:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0115d76:	7e e0                	jle    f0115d58 <test_priority_normal_and_higher+0x5fa>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115d78:	e8 35 63 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115d7d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115d80:	e8 07 df fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115d85:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115d88:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115d8b:	83 ec 08             	sub    $0x8,%esp
f0115d8e:	6a 05                	push   $0x5
f0115d90:	50                   	push   %eax
f0115d91:	e8 12 48 ff ff       	call   f010a5a8 <set_program_priority>
f0115d96:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115d99:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115d9c:	83 ec 08             	sub    $0x8,%esp
f0115d9f:	6a 04                	push   $0x4
f0115da1:	50                   	push   %eax
f0115da2:	e8 01 48 ff ff       	call   f010a5a8 <set_program_priority>
f0115da7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115daa:	e8 dd de fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115daf:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115db2:	74 17                	je     f0115dcb <test_priority_normal_and_higher+0x66d>
f0115db4:	83 ec 04             	sub    $0x4,%esp
f0115db7:	68 34 9f 13 f0       	push   $0xf0139f34
f0115dbc:	68 8e 00 00 00       	push   $0x8e
f0115dc1:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115dc6:	e8 db a3 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115dcb:	e8 e2 62 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115dd0:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115dd3:	74 17                	je     f0115dec <test_priority_normal_and_higher+0x68e>
f0115dd5:	83 ec 04             	sub    $0x4,%esp
f0115dd8:	68 34 9f 13 f0       	push   $0xf0139f34
f0115ddd:	68 8f 00 00 00       	push   $0x8f
f0115de2:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115de7:	e8 ba a3 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115dec:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115def:	8b 40 74             	mov    0x74(%eax),%eax
f0115df2:	83 f8 14             	cmp    $0x14,%eax
f0115df5:	75 16                	jne    f0115e0d <test_priority_normal_and_higher+0x6af>
f0115df7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115dfa:	8b 40 74             	mov    0x74(%eax),%eax
f0115dfd:	83 f8 1e             	cmp    $0x1e,%eax
f0115e00:	75 0b                	jne    f0115e0d <test_priority_normal_and_higher+0x6af>
f0115e02:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e05:	8b 40 74             	mov    0x74(%eax),%eax
f0115e08:	83 f8 28             	cmp    $0x28,%eax
f0115e0b:	74 17                	je     f0115e24 <test_priority_normal_and_higher+0x6c6>
			panic("The programs' working set size should be doubled if full\n");
f0115e0d:	83 ec 04             	sub    $0x4,%esp
f0115e10:	68 68 a0 13 f0       	push   $0xf013a068
f0115e15:	68 92 00 00 00       	push   $0x92
f0115e1a:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115e1f:	e8 82 a3 fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 30; i++)
f0115e24:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0115e2b:	eb 1a                	jmp    f0115e47 <test_priority_normal_and_higher+0x6e9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0115e2d:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115e30:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115e33:	89 d0                	mov    %edx,%eax
f0115e35:	01 c0                	add    %eax,%eax
f0115e37:	01 d0                	add    %edx,%eax
f0115e39:	c1 e0 03             	shl    $0x3,%eax
f0115e3c:	01 c8                	add    %ecx,%eax
f0115e3e:	83 c0 7c             	add    $0x7c,%eax
f0115e41:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0115e44:	ff 45 cc             	incl   -0x34(%ebp)
f0115e47:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0115e4b:	7e e0                	jle    f0115e2d <test_priority_normal_and_higher+0x6cf>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115e4d:	e8 60 62 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115e52:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115e55:	e8 32 de fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115e5a:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115e5d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e60:	83 ec 08             	sub    $0x8,%esp
f0115e63:	6a 05                	push   $0x5
f0115e65:	50                   	push   %eax
f0115e66:	e8 3d 47 ff ff       	call   f010a5a8 <set_program_priority>
f0115e6b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115e6e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e71:	83 ec 08             	sub    $0x8,%esp
f0115e74:	6a 04                	push   $0x4
f0115e76:	50                   	push   %eax
f0115e77:	e8 2c 47 ff ff       	call   f010a5a8 <set_program_priority>
f0115e7c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115e7f:	e8 08 de fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115e84:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115e87:	74 17                	je     f0115ea0 <test_priority_normal_and_higher+0x742>
f0115e89:	83 ec 04             	sub    $0x4,%esp
f0115e8c:	68 34 9f 13 f0       	push   $0xf0139f34
f0115e91:	68 9d 00 00 00       	push   $0x9d
f0115e96:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115e9b:	e8 06 a3 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115ea0:	e8 0d 62 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0115ea5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115ea8:	74 17                	je     f0115ec1 <test_priority_normal_and_higher+0x763>
f0115eaa:	83 ec 04             	sub    $0x4,%esp
f0115ead:	68 34 9f 13 f0       	push   $0xf0139f34
f0115eb2:	68 9e 00 00 00       	push   $0x9e
f0115eb7:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115ebc:	e8 e5 a2 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0115ec1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ec4:	8b 40 74             	mov    0x74(%eax),%eax
f0115ec7:	83 f8 14             	cmp    $0x14,%eax
f0115eca:	75 16                	jne    f0115ee2 <test_priority_normal_and_higher+0x784>
f0115ecc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ecf:	8b 40 74             	mov    0x74(%eax),%eax
f0115ed2:	83 f8 3c             	cmp    $0x3c,%eax
f0115ed5:	75 0b                	jne    f0115ee2 <test_priority_normal_and_higher+0x784>
f0115ed7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115eda:	8b 40 74             	mov    0x74(%eax),%eax
f0115edd:	83 f8 28             	cmp    $0x28,%eax
f0115ee0:	74 17                	je     f0115ef9 <test_priority_normal_and_higher+0x79b>
			panic("The programs' working set size should be doubled if full\n");
f0115ee2:	83 ec 04             	sub    $0x4,%esp
f0115ee5:	68 68 a0 13 f0       	push   $0xf013a068
f0115eea:	68 a1 00 00 00       	push   $0xa1
f0115eef:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115ef4:	e8 ad a2 fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 60; i++)
f0115ef9:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0115f00:	eb 1a                	jmp    f0115f1c <test_priority_normal_and_higher+0x7be>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0115f02:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115f05:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0115f08:	89 d0                	mov    %edx,%eax
f0115f0a:	01 c0                	add    %eax,%eax
f0115f0c:	01 d0                	add    %edx,%eax
f0115f0e:	c1 e0 03             	shl    $0x3,%eax
f0115f11:	01 c8                	add    %ecx,%eax
f0115f13:	83 c0 7c             	add    $0x7c,%eax
f0115f16:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0115f19:	ff 45 c8             	incl   -0x38(%ebp)
f0115f1c:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0115f20:	7e e0                	jle    f0115f02 <test_priority_normal_and_higher+0x7a4>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115f22:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0115f29:	eb 1a                	jmp    f0115f45 <test_priority_normal_and_higher+0x7e7>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0115f2b:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115f2e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115f31:	89 d0                	mov    %edx,%eax
f0115f33:	01 c0                	add    %eax,%eax
f0115f35:	01 d0                	add    %edx,%eax
f0115f37:	c1 e0 03             	shl    $0x3,%eax
f0115f3a:	01 c8                	add    %ecx,%eax
f0115f3c:	83 c0 7c             	add    $0x7c,%eax
f0115f3f:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115f42:	ff 45 c4             	incl   -0x3c(%ebp)
f0115f45:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0115f49:	7e e0                	jle    f0115f2b <test_priority_normal_and_higher+0x7cd>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115f4b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0115f52:	eb 79                	jmp    f0115fcd <test_priority_normal_and_higher+0x86f>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0115f54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115f57:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0115f5e:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0115f61:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115f64:	89 d0                	mov    %edx,%eax
f0115f66:	01 c0                	add    %eax,%eax
f0115f68:	01 d0                	add    %edx,%eax
f0115f6a:	c1 e0 03             	shl    $0x3,%eax
f0115f6d:	01 d8                	add    %ebx,%eax
f0115f6f:	83 c0 78             	add    $0x78,%eax
f0115f72:	8b 00                	mov    (%eax),%eax
f0115f74:	39 c1                	cmp    %eax,%ecx
f0115f76:	74 17                	je     f0115f8f <test_priority_normal_and_higher+0x831>
				panic("Working set should be moved properly to the new one");
f0115f78:	83 ec 04             	sub    $0x4,%esp
f0115f7b:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0115f80:	68 af 00 00 00       	push   $0xaf
f0115f85:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115f8a:	e8 17 a2 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0115f8f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115f92:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0115f99:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0115f9c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115f9f:	89 d0                	mov    %edx,%eax
f0115fa1:	01 c0                	add    %eax,%eax
f0115fa3:	01 d0                	add    %edx,%eax
f0115fa5:	c1 e0 03             	shl    $0x3,%eax
f0115fa8:	01 d8                	add    %ebx,%eax
f0115faa:	83 e8 80             	sub    $0xffffff80,%eax
f0115fad:	8b 00                	mov    (%eax),%eax
f0115faf:	39 c1                	cmp    %eax,%ecx
f0115fb1:	74 17                	je     f0115fca <test_priority_normal_and_higher+0x86c>
				panic("Working set should be moved properly to the new one");
f0115fb3:	83 ec 04             	sub    $0x4,%esp
f0115fb6:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0115fbb:	68 b2 00 00 00       	push   $0xb2
f0115fc0:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0115fc5:	e8 dc a1 fe ff       	call   f01001a6 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115fca:	ff 45 c0             	incl   -0x40(%ebp)
f0115fcd:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0115fd1:	7e 81                	jle    f0115f54 <test_priority_normal_and_higher+0x7f6>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0115fd3:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0115fda:	eb 79                	jmp    f0116055 <test_priority_normal_and_higher+0x8f7>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0115fdc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115fdf:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0115fe6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0115fe9:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0115fec:	89 d0                	mov    %edx,%eax
f0115fee:	01 c0                	add    %eax,%eax
f0115ff0:	01 d0                	add    %edx,%eax
f0115ff2:	c1 e0 03             	shl    $0x3,%eax
f0115ff5:	01 d8                	add    %ebx,%eax
f0115ff7:	83 c0 78             	add    $0x78,%eax
f0115ffa:	8b 00                	mov    (%eax),%eax
f0115ffc:	39 c1                	cmp    %eax,%ecx
f0115ffe:	74 17                	je     f0116017 <test_priority_normal_and_higher+0x8b9>
				panic("Working set should be moved properly to the new one");
f0116000:	83 ec 04             	sub    $0x4,%esp
f0116003:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0116008:	68 b8 00 00 00       	push   $0xb8
f011600d:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116012:	e8 8f a1 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116017:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011601a:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116021:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0116024:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116027:	89 d0                	mov    %edx,%eax
f0116029:	01 c0                	add    %eax,%eax
f011602b:	01 d0                	add    %edx,%eax
f011602d:	c1 e0 03             	shl    $0x3,%eax
f0116030:	01 d8                	add    %ebx,%eax
f0116032:	83 e8 80             	sub    $0xffffff80,%eax
f0116035:	8b 00                	mov    (%eax),%eax
f0116037:	39 c1                	cmp    %eax,%ecx
f0116039:	74 17                	je     f0116052 <test_priority_normal_and_higher+0x8f4>
				panic("Working set should be moved properly to the new one");
f011603b:	83 ec 04             	sub    $0x4,%esp
f011603e:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0116043:	68 bb 00 00 00       	push   $0xbb
f0116048:	68 cd 9e 13 f0       	push   $0xf0139ecd
f011604d:	e8 54 a1 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116052:	ff 45 bc             	incl   -0x44(%ebp)
f0116055:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116059:	7e 81                	jle    f0115fdc <test_priority_normal_and_higher+0x87e>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011605b:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116062:	eb 79                	jmp    f01160dd <test_priority_normal_and_higher+0x97f>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116064:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116067:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f011606e:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0116071:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116074:	89 d0                	mov    %edx,%eax
f0116076:	01 c0                	add    %eax,%eax
f0116078:	01 d0                	add    %edx,%eax
f011607a:	c1 e0 03             	shl    $0x3,%eax
f011607d:	01 d8                	add    %ebx,%eax
f011607f:	83 c0 78             	add    $0x78,%eax
f0116082:	8b 00                	mov    (%eax),%eax
f0116084:	39 c1                	cmp    %eax,%ecx
f0116086:	74 17                	je     f011609f <test_priority_normal_and_higher+0x941>
				panic("Working set should be moved properly to the new one");
f0116088:	83 ec 04             	sub    $0x4,%esp
f011608b:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0116090:	68 c1 00 00 00       	push   $0xc1
f0116095:	68 cd 9e 13 f0       	push   $0xf0139ecd
f011609a:	e8 07 a1 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011609f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01160a2:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01160a9:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01160ac:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01160af:	89 d0                	mov    %edx,%eax
f01160b1:	01 c0                	add    %eax,%eax
f01160b3:	01 d0                	add    %edx,%eax
f01160b5:	c1 e0 03             	shl    $0x3,%eax
f01160b8:	01 d8                	add    %ebx,%eax
f01160ba:	83 e8 80             	sub    $0xffffff80,%eax
f01160bd:	8b 00                	mov    (%eax),%eax
f01160bf:	39 c1                	cmp    %eax,%ecx
f01160c1:	74 17                	je     f01160da <test_priority_normal_and_higher+0x97c>
				panic("Working set should be moved properly to the new one");
f01160c3:	83 ec 04             	sub    $0x4,%esp
f01160c6:	68 a4 a0 13 f0       	push   $0xf013a0a4
f01160cb:	68 c4 00 00 00       	push   $0xc4
f01160d0:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01160d5:	e8 cc a0 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01160da:	ff 45 b8             	incl   -0x48(%ebp)
f01160dd:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f01160e1:	7e 81                	jle    f0116064 <test_priority_normal_and_higher+0x906>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f01160e3:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f01160ea:	75 6e 61 
f01160ed:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f01160f4:	6c 00 00 
f01160f7:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f01160fd:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116102:	b8 00 00 00 00       	mov    $0x0,%eax
f0116107:	89 d7                	mov    %edx,%edi
f0116109:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011610b:	83 ec 0c             	sub    $0xc,%esp
f011610e:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116114:	50                   	push   %eax
f0116115:	e8 75 ab fe ff       	call   f0100c8f <execute_command>
f011611a:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f011611d:	eb 10                	jmp    f011612f <test_priority_normal_and_higher+0x9d1>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011611f:	83 ec 0c             	sub    $0xc,%esp
f0116122:	68 d8 a0 13 f0       	push   $0xf013a0d8
f0116127:	e8 01 ab fe ff       	call   f0100c2d <cprintf>
f011612c:	83 c4 10             	add    $0x10,%esp
	}
}
f011612f:	90                   	nop
f0116130:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116133:	5b                   	pop    %ebx
f0116134:	5e                   	pop    %esi
f0116135:	5f                   	pop    %edi
f0116136:	5d                   	pop    %ebp
f0116137:	c3                   	ret    

f0116138 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0116138:	55                   	push   %ebp
f0116139:	89 e5                	mov    %esp,%ebp
f011613b:	57                   	push   %edi
f011613c:	56                   	push   %esi
f011613d:	53                   	push   %ebx
f011613e:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0116144:	a0 ce 0c 19 f0       	mov    0xf0190cce,%al
f0116149:	84 c0                	test   %al,%al
f011614b:	0f 84 ac 09 00 00    	je     f0116afd <test_priority_normal_and_lower+0x9c5>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0116151:	c6 05 ce 0c 19 f0 00 	movb   $0x0,0xf0190cce
		char command[100] = "load fos_add 20";
f0116158:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011615e:	bb 14 a1 13 f0       	mov    $0xf013a114,%ebx
f0116163:	ba 04 00 00 00       	mov    $0x4,%edx
f0116168:	89 c7                	mov    %eax,%edi
f011616a:	89 de                	mov    %ebx,%esi
f011616c:	89 d1                	mov    %edx,%ecx
f011616e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116170:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0116176:	b9 15 00 00 00       	mov    $0x15,%ecx
f011617b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116180:	89 d7                	mov    %edx,%edi
f0116182:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116184:	83 ec 0c             	sub    $0xc,%esp
f0116187:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011618d:	50                   	push   %eax
f011618e:	e8 fc aa fe ff       	call   f0100c8f <execute_command>
f0116193:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0116196:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011619c:	bb d0 a3 13 f0       	mov    $0xf013a3d0,%ebx
f01161a1:	ba 0d 00 00 00       	mov    $0xd,%edx
f01161a6:	89 c7                	mov    %eax,%edi
f01161a8:	89 de                	mov    %ebx,%esi
f01161aa:	89 d1                	mov    %edx,%ecx
f01161ac:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01161ae:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01161b4:	b9 57 00 00 00       	mov    $0x57,%ecx
f01161b9:	b0 00                	mov    $0x0,%al
f01161bb:	89 d7                	mov    %edx,%edi
f01161bd:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01161bf:	83 ec 0c             	sub    $0xc,%esp
f01161c2:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01161c8:	50                   	push   %eax
f01161c9:	e8 c1 aa fe ff       	call   f0100c8f <execute_command>
f01161ce:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f01161d1:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01161d7:	bb 34 a4 13 f0       	mov    $0xf013a434,%ebx
f01161dc:	ba 17 00 00 00       	mov    $0x17,%edx
f01161e1:	89 c7                	mov    %eax,%edi
f01161e3:	89 de                	mov    %ebx,%esi
f01161e5:	89 d1                	mov    %edx,%ecx
f01161e7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01161e9:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f01161ef:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01161f4:	b0 00                	mov    $0x0,%al
f01161f6:	89 d7                	mov    %edx,%edi
f01161f8:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01161fa:	83 ec 0c             	sub    $0xc,%esp
f01161fd:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116203:	50                   	push   %eax
f0116204:	e8 86 aa fe ff       	call   f0100c8f <execute_command>
f0116209:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011620c:	83 ec 04             	sub    $0x4,%esp
f011620f:	6a 00                	push   $0x0
f0116211:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0116214:	50                   	push   %eax
f0116215:	68 00 10 00 00       	push   $0x1000
f011621a:	e8 a2 2e ff ff       	call   f01090c1 <envid2env>
f011621f:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116222:	83 ec 04             	sub    $0x4,%esp
f0116225:	6a 00                	push   $0x0
f0116227:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011622a:	50                   	push   %eax
f011622b:	68 01 10 00 00       	push   $0x1001
f0116230:	e8 8c 2e ff ff       	call   f01090c1 <envid2env>
f0116235:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116238:	83 ec 04             	sub    $0x4,%esp
f011623b:	6a 00                	push   $0x0
f011623d:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0116240:	50                   	push   %eax
f0116241:	68 02 10 00 00       	push   $0x1002
f0116246:	e8 76 2e ff ff       	call   f01090c1 <envid2env>
f011624b:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011624e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116251:	85 c0                	test   %eax,%eax
f0116253:	74 0e                	je     f0116263 <test_priority_normal_and_lower+0x12b>
f0116255:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116258:	85 c0                	test   %eax,%eax
f011625a:	74 07                	je     f0116263 <test_priority_normal_and_lower+0x12b>
f011625c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011625f:	85 c0                	test   %eax,%eax
f0116261:	75 17                	jne    f011627a <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116263:	83 ec 04             	sub    $0x4,%esp
f0116266:	68 b4 9e 13 f0       	push   $0xf0139eb4
f011626b:	68 eb 00 00 00       	push   $0xeb
f0116270:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116275:	e8 2c 9f fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011627a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011627d:	8b 40 74             	mov    0x74(%eax),%eax
f0116280:	83 f8 14             	cmp    $0x14,%eax
f0116283:	75 16                	jne    f011629b <test_priority_normal_and_lower+0x163>
f0116285:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116288:	8b 40 74             	mov    0x74(%eax),%eax
f011628b:	83 f8 1e             	cmp    $0x1e,%eax
f011628e:	75 0b                	jne    f011629b <test_priority_normal_and_lower+0x163>
f0116290:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116293:	8b 40 74             	mov    0x74(%eax),%eax
f0116296:	83 f8 28             	cmp    $0x28,%eax
f0116299:	74 17                	je     f01162b2 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f011629b:	83 ec 04             	sub    $0x4,%esp
f011629e:	68 e8 9e 13 f0       	push   $0xf0139ee8
f01162a3:	68 ee 00 00 00       	push   $0xee
f01162a8:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01162ad:	e8 f4 9e fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f01162b2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01162b9:	eb 43                	jmp    f01162fe <test_priority_normal_and_lower+0x1c6>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01162bb:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01162be:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01162c1:	89 d0                	mov    %edx,%eax
f01162c3:	01 c0                	add    %eax,%eax
f01162c5:	01 d0                	add    %edx,%eax
f01162c7:	c1 e0 03             	shl    $0x3,%eax
f01162ca:	01 c8                	add    %ecx,%eax
f01162cc:	83 c0 78             	add    $0x78,%eax
f01162cf:	8b 10                	mov    (%eax),%edx
f01162d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01162d4:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01162db:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01162de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01162e1:	89 d0                	mov    %edx,%eax
f01162e3:	01 c0                	add    %eax,%eax
f01162e5:	01 d0                	add    %edx,%eax
f01162e7:	c1 e0 03             	shl    $0x3,%eax
f01162ea:	01 c8                	add    %ecx,%eax
f01162ec:	83 e8 80             	sub    $0xffffff80,%eax
f01162ef:	8b 10                	mov    (%eax),%edx
f01162f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01162f4:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01162fb:	ff 45 e4             	incl   -0x1c(%ebp)
f01162fe:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116302:	7e b7                	jle    f01162bb <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116304:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011630b:	eb 43                	jmp    f0116350 <test_priority_normal_and_lower+0x218>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011630d:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0116310:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116313:	89 d0                	mov    %edx,%eax
f0116315:	01 c0                	add    %eax,%eax
f0116317:	01 d0                	add    %edx,%eax
f0116319:	c1 e0 03             	shl    $0x3,%eax
f011631c:	01 c8                	add    %ecx,%eax
f011631e:	83 c0 78             	add    $0x78,%eax
f0116321:	8b 10                	mov    (%eax),%edx
f0116323:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116326:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011632d:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0116330:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116333:	89 d0                	mov    %edx,%eax
f0116335:	01 c0                	add    %eax,%eax
f0116337:	01 d0                	add    %edx,%eax
f0116339:	c1 e0 03             	shl    $0x3,%eax
f011633c:	01 c8                	add    %ecx,%eax
f011633e:	83 e8 80             	sub    $0xffffff80,%eax
f0116341:	8b 10                	mov    (%eax),%edx
f0116343:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116346:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011634d:	ff 45 e0             	incl   -0x20(%ebp)
f0116350:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116354:	7e b7                	jle    f011630d <test_priority_normal_and_lower+0x1d5>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116356:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011635d:	eb 43                	jmp    f01163a2 <test_priority_normal_and_lower+0x26a>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011635f:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0116362:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116365:	89 d0                	mov    %edx,%eax
f0116367:	01 c0                	add    %eax,%eax
f0116369:	01 d0                	add    %edx,%eax
f011636b:	c1 e0 03             	shl    $0x3,%eax
f011636e:	01 c8                	add    %ecx,%eax
f0116370:	83 c0 78             	add    $0x78,%eax
f0116373:	8b 10                	mov    (%eax),%edx
f0116375:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116378:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011637f:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0116382:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116385:	89 d0                	mov    %edx,%eax
f0116387:	01 c0                	add    %eax,%eax
f0116389:	01 d0                	add    %edx,%eax
f011638b:	c1 e0 03             	shl    $0x3,%eax
f011638e:	01 c8                	add    %ecx,%eax
f0116390:	83 e8 80             	sub    $0xffffff80,%eax
f0116393:	8b 10                	mov    (%eax),%edx
f0116395:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116398:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011639f:	ff 45 dc             	incl   -0x24(%ebp)
f01163a2:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01163a6:	7e b7                	jle    f011635f <test_priority_normal_and_lower+0x227>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01163a8:	e8 05 5d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01163ad:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01163b0:	e8 d7 d8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01163b5:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01163b8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01163bb:	83 ec 08             	sub    $0x8,%esp
f01163be:	6a 03                	push   $0x3
f01163c0:	50                   	push   %eax
f01163c1:	e8 e2 41 ff ff       	call   f010a5a8 <set_program_priority>
f01163c6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01163c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01163cc:	83 ec 08             	sub    $0x8,%esp
f01163cf:	6a 03                	push   $0x3
f01163d1:	50                   	push   %eax
f01163d2:	e8 d1 41 ff ff       	call   f010a5a8 <set_program_priority>
f01163d7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01163da:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01163dd:	83 ec 08             	sub    $0x8,%esp
f01163e0:	6a 03                	push   $0x3
f01163e2:	50                   	push   %eax
f01163e3:	e8 c0 41 ff ff       	call   f010a5a8 <set_program_priority>
f01163e8:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01163eb:	e8 9c d8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01163f0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01163f3:	74 17                	je     f011640c <test_priority_normal_and_lower+0x2d4>
f01163f5:	83 ec 04             	sub    $0x4,%esp
f01163f8:	68 34 9f 13 f0       	push   $0xf0139f34
f01163fd:	68 0a 01 00 00       	push   $0x10a
f0116402:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116407:	e8 9a 9d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011640c:	e8 a1 5c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116411:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116414:	74 17                	je     f011642d <test_priority_normal_and_lower+0x2f5>
f0116416:	83 ec 04             	sub    $0x4,%esp
f0116419:	68 34 9f 13 f0       	push   $0xf0139f34
f011641e:	68 0b 01 00 00       	push   $0x10b
f0116423:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116428:	e8 79 9d fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011642d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116430:	8b 40 74             	mov    0x74(%eax),%eax
f0116433:	83 f8 14             	cmp    $0x14,%eax
f0116436:	75 16                	jne    f011644e <test_priority_normal_and_lower+0x316>
f0116438:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011643b:	8b 40 74             	mov    0x74(%eax),%eax
f011643e:	83 f8 1e             	cmp    $0x1e,%eax
f0116441:	75 0b                	jne    f011644e <test_priority_normal_and_lower+0x316>
f0116443:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116446:	8b 40 74             	mov    0x74(%eax),%eax
f0116449:	83 f8 28             	cmp    $0x28,%eax
f011644c:	74 17                	je     f0116465 <test_priority_normal_and_lower+0x32d>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011644e:	83 ec 04             	sub    $0x4,%esp
f0116451:	68 60 9f 13 f0       	push   $0xf0139f60
f0116456:	68 0e 01 00 00       	push   $0x10e
f011645b:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116460:	e8 41 9d fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116465:	e8 48 5c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011646a:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011646d:	e8 1a d8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116472:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116475:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116478:	83 ec 08             	sub    $0x8,%esp
f011647b:	6a 02                	push   $0x2
f011647d:	50                   	push   %eax
f011647e:	e8 25 41 ff ff       	call   f010a5a8 <set_program_priority>
f0116483:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116486:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116489:	83 ec 08             	sub    $0x8,%esp
f011648c:	6a 02                	push   $0x2
f011648e:	50                   	push   %eax
f011648f:	e8 14 41 ff ff       	call   f010a5a8 <set_program_priority>
f0116494:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116497:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011649a:	83 ec 08             	sub    $0x8,%esp
f011649d:	6a 02                	push   $0x2
f011649f:	50                   	push   %eax
f01164a0:	e8 03 41 ff ff       	call   f010a5a8 <set_program_priority>
f01164a5:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01164a8:	e8 df d7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01164ad:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01164b0:	74 17                	je     f01164c9 <test_priority_normal_and_lower+0x391>
f01164b2:	83 ec 04             	sub    $0x4,%esp
f01164b5:	68 34 9f 13 f0       	push   $0xf0139f34
f01164ba:	68 18 01 00 00       	push   $0x118
f01164bf:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01164c4:	e8 dd 9c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01164c9:	e8 e4 5b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01164ce:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01164d1:	74 21                	je     f01164f4 <test_priority_normal_and_lower+0x3bc>
f01164d3:	e8 da 5b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01164d8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01164db:	29 c2                	sub    %eax,%edx
f01164dd:	89 d0                	mov    %edx,%eax
f01164df:	50                   	push   %eax
f01164e0:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01164e5:	68 19 01 00 00       	push   $0x119
f01164ea:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01164ef:	e8 b2 9c fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01164f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01164f7:	8b 40 74             	mov    0x74(%eax),%eax
f01164fa:	83 f8 0a             	cmp    $0xa,%eax
f01164fd:	75 16                	jne    f0116515 <test_priority_normal_and_lower+0x3dd>
f01164ff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116502:	8b 40 74             	mov    0x74(%eax),%eax
f0116505:	83 f8 0f             	cmp    $0xf,%eax
f0116508:	75 0b                	jne    f0116515 <test_priority_normal_and_lower+0x3dd>
f011650a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011650d:	8b 40 74             	mov    0x74(%eax),%eax
f0116510:	83 f8 14             	cmp    $0x14,%eax
f0116513:	74 17                	je     f011652c <test_priority_normal_and_lower+0x3f4>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116515:	83 ec 04             	sub    $0x4,%esp
f0116518:	68 e4 9f 13 f0       	push   $0xf0139fe4
f011651d:	68 1c 01 00 00       	push   $0x11c
f0116522:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116527:	e8 7a 9c fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f011652c:	e8 81 5b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116531:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116534:	e8 53 d7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116539:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011653c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011653f:	83 ec 08             	sub    $0x8,%esp
f0116542:	6a 02                	push   $0x2
f0116544:	50                   	push   %eax
f0116545:	e8 5e 40 ff ff       	call   f010a5a8 <set_program_priority>
f011654a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011654d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116550:	83 ec 08             	sub    $0x8,%esp
f0116553:	6a 02                	push   $0x2
f0116555:	50                   	push   %eax
f0116556:	e8 4d 40 ff ff       	call   f010a5a8 <set_program_priority>
f011655b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011655e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116561:	83 ec 08             	sub    $0x8,%esp
f0116564:	6a 02                	push   $0x2
f0116566:	50                   	push   %eax
f0116567:	e8 3c 40 ff ff       	call   f010a5a8 <set_program_priority>
f011656c:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011656f:	e8 18 d7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116574:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116577:	74 17                	je     f0116590 <test_priority_normal_and_lower+0x458>
f0116579:	83 ec 04             	sub    $0x4,%esp
f011657c:	68 34 9f 13 f0       	push   $0xf0139f34
f0116581:	68 26 01 00 00       	push   $0x126
f0116586:	68 cd 9e 13 f0       	push   $0xf0139ecd
f011658b:	e8 16 9c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116590:	e8 1d 5b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116595:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116598:	74 21                	je     f01165bb <test_priority_normal_and_lower+0x483>
f011659a:	e8 13 5b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011659f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01165a2:	29 c2                	sub    %eax,%edx
f01165a4:	89 d0                	mov    %edx,%eax
f01165a6:	50                   	push   %eax
f01165a7:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01165ac:	68 27 01 00 00       	push   $0x127
f01165b1:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01165b6:	e8 eb 9b fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01165bb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01165be:	8b 40 74             	mov    0x74(%eax),%eax
f01165c1:	83 f8 0a             	cmp    $0xa,%eax
f01165c4:	75 16                	jne    f01165dc <test_priority_normal_and_lower+0x4a4>
f01165c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01165c9:	8b 40 74             	mov    0x74(%eax),%eax
f01165cc:	83 f8 0f             	cmp    $0xf,%eax
f01165cf:	75 0b                	jne    f01165dc <test_priority_normal_and_lower+0x4a4>
f01165d1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01165d4:	8b 40 74             	mov    0x74(%eax),%eax
f01165d7:	83 f8 0a             	cmp    $0xa,%eax
f01165da:	74 17                	je     f01165f3 <test_priority_normal_and_lower+0x4bb>
			panic("The programs' working set size should be doubled only if it is full\n");
f01165dc:	83 ec 04             	sub    $0x4,%esp
f01165df:	68 e4 9f 13 f0       	push   $0xf0139fe4
f01165e4:	68 2a 01 00 00       	push   $0x12a
f01165e9:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01165ee:	e8 b3 9b fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 10; i++)
f01165f3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01165fa:	eb 79                	jmp    f0116675 <test_priority_normal_and_lower+0x53d>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01165fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01165ff:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116606:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116609:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011660c:	89 d0                	mov    %edx,%eax
f011660e:	01 c0                	add    %eax,%eax
f0116610:	01 d0                	add    %edx,%eax
f0116612:	c1 e0 03             	shl    $0x3,%eax
f0116615:	01 d8                	add    %ebx,%eax
f0116617:	83 c0 78             	add    $0x78,%eax
f011661a:	8b 00                	mov    (%eax),%eax
f011661c:	39 c1                	cmp    %eax,%ecx
f011661e:	74 17                	je     f0116637 <test_priority_normal_and_lower+0x4ff>
				panic("Working set should be moved properly to the new one");
f0116620:	83 ec 04             	sub    $0x4,%esp
f0116623:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0116628:	68 2f 01 00 00       	push   $0x12f
f011662d:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116632:	e8 6f 9b fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116637:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011663a:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116641:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116644:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116647:	89 d0                	mov    %edx,%eax
f0116649:	01 c0                	add    %eax,%eax
f011664b:	01 d0                	add    %edx,%eax
f011664d:	c1 e0 03             	shl    $0x3,%eax
f0116650:	01 d8                	add    %ebx,%eax
f0116652:	83 e8 80             	sub    $0xffffff80,%eax
f0116655:	8b 00                	mov    (%eax),%eax
f0116657:	39 c1                	cmp    %eax,%ecx
f0116659:	74 17                	je     f0116672 <test_priority_normal_and_lower+0x53a>
				panic("Working set should be moved properly to the new one");
f011665b:	83 ec 04             	sub    $0x4,%esp
f011665e:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0116663:	68 32 01 00 00       	push   $0x132
f0116668:	68 cd 9e 13 f0       	push   $0xf0139ecd
f011666d:	e8 34 9b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0116672:	ff 45 d8             	incl   -0x28(%ebp)
f0116675:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116679:	7e 81                	jle    f01165fc <test_priority_normal_and_lower+0x4c4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011667b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0116682:	eb 79                	jmp    f01166fd <test_priority_normal_and_lower+0x5c5>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116684:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116687:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f011668e:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116691:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116694:	89 d0                	mov    %edx,%eax
f0116696:	01 c0                	add    %eax,%eax
f0116698:	01 d0                	add    %edx,%eax
f011669a:	c1 e0 03             	shl    $0x3,%eax
f011669d:	01 d8                	add    %ebx,%eax
f011669f:	83 c0 78             	add    $0x78,%eax
f01166a2:	8b 00                	mov    (%eax),%eax
f01166a4:	39 c1                	cmp    %eax,%ecx
f01166a6:	74 17                	je     f01166bf <test_priority_normal_and_lower+0x587>
				panic("Working set should be moved properly to the new one");
f01166a8:	83 ec 04             	sub    $0x4,%esp
f01166ab:	68 a4 a0 13 f0       	push   $0xf013a0a4
f01166b0:	68 38 01 00 00       	push   $0x138
f01166b5:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01166ba:	e8 e7 9a fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01166bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01166c2:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01166c9:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01166cc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01166cf:	89 d0                	mov    %edx,%eax
f01166d1:	01 c0                	add    %eax,%eax
f01166d3:	01 d0                	add    %edx,%eax
f01166d5:	c1 e0 03             	shl    $0x3,%eax
f01166d8:	01 d8                	add    %ebx,%eax
f01166da:	83 e8 80             	sub    $0xffffff80,%eax
f01166dd:	8b 00                	mov    (%eax),%eax
f01166df:	39 c1                	cmp    %eax,%ecx
f01166e1:	74 17                	je     f01166fa <test_priority_normal_and_lower+0x5c2>
				panic("Working set should be moved properly to the new one");
f01166e3:	83 ec 04             	sub    $0x4,%esp
f01166e6:	68 a4 a0 13 f0       	push   $0xf013a0a4
f01166eb:	68 3b 01 00 00       	push   $0x13b
f01166f0:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01166f5:	e8 ac 9a fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01166fa:	ff 45 d4             	incl   -0x2c(%ebp)
f01166fd:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116701:	7e 81                	jle    f0116684 <test_priority_normal_and_lower+0x54c>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116703:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011670a:	eb 79                	jmp    f0116785 <test_priority_normal_and_lower+0x64d>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011670c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011670f:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116716:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116719:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011671c:	89 d0                	mov    %edx,%eax
f011671e:	01 c0                	add    %eax,%eax
f0116720:	01 d0                	add    %edx,%eax
f0116722:	c1 e0 03             	shl    $0x3,%eax
f0116725:	01 d8                	add    %ebx,%eax
f0116727:	83 c0 78             	add    $0x78,%eax
f011672a:	8b 00                	mov    (%eax),%eax
f011672c:	39 c1                	cmp    %eax,%ecx
f011672e:	74 17                	je     f0116747 <test_priority_normal_and_lower+0x60f>
				panic("Working set should be moved properly to the new one");
f0116730:	83 ec 04             	sub    $0x4,%esp
f0116733:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0116738:	68 41 01 00 00       	push   $0x141
f011673d:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116742:	e8 5f 9a fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116747:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011674a:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116751:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116754:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116757:	89 d0                	mov    %edx,%eax
f0116759:	01 c0                	add    %eax,%eax
f011675b:	01 d0                	add    %edx,%eax
f011675d:	c1 e0 03             	shl    $0x3,%eax
f0116760:	01 d8                	add    %ebx,%eax
f0116762:	83 e8 80             	sub    $0xffffff80,%eax
f0116765:	8b 00                	mov    (%eax),%eax
f0116767:	39 c1                	cmp    %eax,%ecx
f0116769:	74 17                	je     f0116782 <test_priority_normal_and_lower+0x64a>
				panic("Working set should be moved properly to the new one");
f011676b:	83 ec 04             	sub    $0x4,%esp
f011676e:	68 a4 a0 13 f0       	push   $0xf013a0a4
f0116773:	68 44 01 00 00       	push   $0x144
f0116778:	68 cd 9e 13 f0       	push   $0xf0139ecd
f011677d:	e8 24 9a fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116782:	ff 45 d0             	incl   -0x30(%ebp)
f0116785:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116789:	7e 81                	jle    f011670c <test_priority_normal_and_lower+0x5d4>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f011678b:	e8 22 59 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116790:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116793:	e8 f4 d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116798:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011679b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011679e:	83 ec 08             	sub    $0x8,%esp
f01167a1:	6a 01                	push   $0x1
f01167a3:	50                   	push   %eax
f01167a4:	e8 ff 3d ff ff       	call   f010a5a8 <set_program_priority>
f01167a9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f01167ac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01167af:	83 ec 08             	sub    $0x8,%esp
f01167b2:	6a 01                	push   $0x1
f01167b4:	50                   	push   %eax
f01167b5:	e8 ee 3d ff ff       	call   f010a5a8 <set_program_priority>
f01167ba:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f01167bd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01167c0:	83 ec 08             	sub    $0x8,%esp
f01167c3:	6a 01                	push   $0x1
f01167c5:	50                   	push   %eax
f01167c6:	e8 dd 3d ff ff       	call   f010a5a8 <set_program_priority>
f01167cb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01167ce:	e8 b9 d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01167d3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01167d6:	74 17                	je     f01167ef <test_priority_normal_and_lower+0x6b7>
f01167d8:	83 ec 04             	sub    $0x4,%esp
f01167db:	68 34 9f 13 f0       	push   $0xf0139f34
f01167e0:	68 4d 01 00 00       	push   $0x14d
f01167e5:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01167ea:	e8 b7 99 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f01167ef:	e8 be 58 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01167f4:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01167f7:	83 f8 0d             	cmp    $0xd,%eax
f01167fa:	74 17                	je     f0116813 <test_priority_normal_and_lower+0x6db>
f01167fc:	83 ec 04             	sub    $0x4,%esp
f01167ff:	68 40 a2 13 f0       	push   $0xf013a240
f0116804:	68 4e 01 00 00       	push   $0x14e
f0116809:	68 cd 9e 13 f0       	push   $0xf0139ecd
f011680e:	e8 93 99 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116813:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116816:	8b 40 74             	mov    0x74(%eax),%eax
f0116819:	83 f8 05             	cmp    $0x5,%eax
f011681c:	75 16                	jne    f0116834 <test_priority_normal_and_lower+0x6fc>
f011681e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116821:	8b 40 74             	mov    0x74(%eax),%eax
f0116824:	83 f8 07             	cmp    $0x7,%eax
f0116827:	75 0b                	jne    f0116834 <test_priority_normal_and_lower+0x6fc>
f0116829:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011682c:	8b 40 74             	mov    0x74(%eax),%eax
f011682f:	83 f8 05             	cmp    $0x5,%eax
f0116832:	74 17                	je     f011684b <test_priority_normal_and_lower+0x713>
			panic("The programs' working set size should be half\n");
f0116834:	83 ec 04             	sub    $0x4,%esp
f0116837:	68 88 a2 13 f0       	push   $0xf013a288
f011683c:	68 51 01 00 00       	push   $0x151
f0116841:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116846:	e8 5b 99 fe ff       	call   f01001a6 <_panic>


		freeFrames = sys_calculate_free_frames();
f011684b:	e8 62 58 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116850:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116853:	e8 34 d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116858:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011685b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011685e:	83 ec 08             	sub    $0x8,%esp
f0116861:	6a 01                	push   $0x1
f0116863:	50                   	push   %eax
f0116864:	e8 3f 3d ff ff       	call   f010a5a8 <set_program_priority>
f0116869:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011686c:	e8 1b d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116871:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116874:	74 17                	je     f011688d <test_priority_normal_and_lower+0x755>
f0116876:	83 ec 04             	sub    $0x4,%esp
f0116879:	68 34 9f 13 f0       	push   $0xf0139f34
f011687e:	68 57 01 00 00       	push   $0x157
f0116883:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116888:	e8 19 99 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f011688d:	e8 20 58 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116892:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116895:	83 f8 03             	cmp    $0x3,%eax
f0116898:	74 17                	je     f01168b1 <test_priority_normal_and_lower+0x779>
f011689a:	83 ec 04             	sub    $0x4,%esp
f011689d:	68 34 9f 13 f0       	push   $0xf0139f34
f01168a2:	68 58 01 00 00       	push   $0x158
f01168a7:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01168ac:	e8 f5 98 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01168b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01168b4:	8b 40 74             	mov    0x74(%eax),%eax
f01168b7:	83 f8 02             	cmp    $0x2,%eax
f01168ba:	75 16                	jne    f01168d2 <test_priority_normal_and_lower+0x79a>
f01168bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168bf:	8b 40 74             	mov    0x74(%eax),%eax
f01168c2:	83 f8 07             	cmp    $0x7,%eax
f01168c5:	75 0b                	jne    f01168d2 <test_priority_normal_and_lower+0x79a>
f01168c7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01168ca:	8b 40 74             	mov    0x74(%eax),%eax
f01168cd:	83 f8 05             	cmp    $0x5,%eax
f01168d0:	74 17                	je     f01168e9 <test_priority_normal_and_lower+0x7b1>
			panic("The programs' working set size should be doubled if full\n");
f01168d2:	83 ec 04             	sub    $0x4,%esp
f01168d5:	68 68 a0 13 f0       	push   $0xf013a068
f01168da:	68 5b 01 00 00       	push   $0x15b
f01168df:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01168e4:	e8 bd 98 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 2; i++)
f01168e9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01168f0:	eb 7f                	jmp    f0116971 <test_priority_normal_and_lower+0x839>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01168f2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01168f5:	83 c0 08             	add    $0x8,%eax
f01168f8:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01168ff:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116902:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116905:	89 d0                	mov    %edx,%eax
f0116907:	01 c0                	add    %eax,%eax
f0116909:	01 d0                	add    %edx,%eax
f011690b:	c1 e0 03             	shl    $0x3,%eax
f011690e:	01 d8                	add    %ebx,%eax
f0116910:	83 c0 78             	add    $0x78,%eax
f0116913:	8b 00                	mov    (%eax),%eax
f0116915:	39 c1                	cmp    %eax,%ecx
f0116917:	74 17                	je     f0116930 <test_priority_normal_and_lower+0x7f8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116919:	83 ec 04             	sub    $0x4,%esp
f011691c:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0116921:	68 60 01 00 00       	push   $0x160
f0116926:	68 cd 9e 13 f0       	push   $0xf0139ecd
f011692b:	e8 76 98 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116930:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116933:	83 c0 08             	add    $0x8,%eax
f0116936:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011693d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116940:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116943:	89 d0                	mov    %edx,%eax
f0116945:	01 c0                	add    %eax,%eax
f0116947:	01 d0                	add    %edx,%eax
f0116949:	c1 e0 03             	shl    $0x3,%eax
f011694c:	01 d8                	add    %ebx,%eax
f011694e:	83 e8 80             	sub    $0xffffff80,%eax
f0116951:	8b 00                	mov    (%eax),%eax
f0116953:	39 c1                	cmp    %eax,%ecx
f0116955:	74 17                	je     f011696e <test_priority_normal_and_lower+0x836>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116957:	83 ec 04             	sub    $0x4,%esp
f011695a:	68 b8 a2 13 f0       	push   $0xf013a2b8
f011695f:	68 63 01 00 00       	push   $0x163
f0116964:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116969:	e8 38 98 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f011696e:	ff 45 cc             	incl   -0x34(%ebp)
f0116971:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116975:	0f 8e 77 ff ff ff    	jle    f01168f2 <test_priority_normal_and_lower+0x7ba>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011697b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0116982:	eb 7f                	jmp    f0116a03 <test_priority_normal_and_lower+0x8cb>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116984:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116987:	83 c0 03             	add    $0x3,%eax
f011698a:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116991:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116994:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116997:	89 d0                	mov    %edx,%eax
f0116999:	01 c0                	add    %eax,%eax
f011699b:	01 d0                	add    %edx,%eax
f011699d:	c1 e0 03             	shl    $0x3,%eax
f01169a0:	01 d8                	add    %ebx,%eax
f01169a2:	83 c0 78             	add    $0x78,%eax
f01169a5:	8b 00                	mov    (%eax),%eax
f01169a7:	39 c1                	cmp    %eax,%ecx
f01169a9:	74 17                	je     f01169c2 <test_priority_normal_and_lower+0x88a>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01169ab:	ff 75 c8             	pushl  -0x38(%ebp)
f01169ae:	68 24 a3 13 f0       	push   $0xf013a324
f01169b3:	68 69 01 00 00       	push   $0x169
f01169b8:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01169bd:	e8 e4 97 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01169c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01169c5:	83 c0 03             	add    $0x3,%eax
f01169c8:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01169cf:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01169d2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01169d5:	89 d0                	mov    %edx,%eax
f01169d7:	01 c0                	add    %eax,%eax
f01169d9:	01 d0                	add    %edx,%eax
f01169db:	c1 e0 03             	shl    $0x3,%eax
f01169de:	01 d8                	add    %ebx,%eax
f01169e0:	83 e8 80             	sub    $0xffffff80,%eax
f01169e3:	8b 00                	mov    (%eax),%eax
f01169e5:	39 c1                	cmp    %eax,%ecx
f01169e7:	74 17                	je     f0116a00 <test_priority_normal_and_lower+0x8c8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01169e9:	83 ec 04             	sub    $0x4,%esp
f01169ec:	68 b8 a2 13 f0       	push   $0xf013a2b8
f01169f1:	68 6c 01 00 00       	push   $0x16c
f01169f6:	68 cd 9e 13 f0       	push   $0xf0139ecd
f01169fb:	e8 a6 97 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116a00:	ff 45 c8             	incl   -0x38(%ebp)
f0116a03:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0116a07:	0f 8e 77 ff ff ff    	jle    f0116984 <test_priority_normal_and_lower+0x84c>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116a0d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0116a14:	eb 7f                	jmp    f0116a95 <test_priority_normal_and_lower+0x95d>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116a16:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116a19:	83 c0 05             	add    $0x5,%eax
f0116a1c:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116a23:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116a26:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116a29:	89 d0                	mov    %edx,%eax
f0116a2b:	01 c0                	add    %eax,%eax
f0116a2d:	01 d0                	add    %edx,%eax
f0116a2f:	c1 e0 03             	shl    $0x3,%eax
f0116a32:	01 d8                	add    %ebx,%eax
f0116a34:	83 c0 78             	add    $0x78,%eax
f0116a37:	8b 00                	mov    (%eax),%eax
f0116a39:	39 c1                	cmp    %eax,%ecx
f0116a3b:	74 17                	je     f0116a54 <test_priority_normal_and_lower+0x91c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116a3d:	83 ec 04             	sub    $0x4,%esp
f0116a40:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0116a45:	68 72 01 00 00       	push   $0x172
f0116a4a:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116a4f:	e8 52 97 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116a54:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116a57:	83 c0 05             	add    $0x5,%eax
f0116a5a:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116a61:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116a64:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116a67:	89 d0                	mov    %edx,%eax
f0116a69:	01 c0                	add    %eax,%eax
f0116a6b:	01 d0                	add    %edx,%eax
f0116a6d:	c1 e0 03             	shl    $0x3,%eax
f0116a70:	01 d8                	add    %ebx,%eax
f0116a72:	83 e8 80             	sub    $0xffffff80,%eax
f0116a75:	8b 00                	mov    (%eax),%eax
f0116a77:	39 c1                	cmp    %eax,%ecx
f0116a79:	74 17                	je     f0116a92 <test_priority_normal_and_lower+0x95a>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116a7b:	83 ec 04             	sub    $0x4,%esp
f0116a7e:	68 b8 a2 13 f0       	push   $0xf013a2b8
f0116a83:	68 75 01 00 00       	push   $0x175
f0116a88:	68 cd 9e 13 f0       	push   $0xf0139ecd
f0116a8d:	e8 14 97 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116a92:	ff 45 c4             	incl   -0x3c(%ebp)
f0116a95:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0116a99:	0f 8e 77 ff ff ff    	jle    f0116a16 <test_priority_normal_and_lower+0x8de>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0116a9f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116aa2:	83 ec 08             	sub    $0x8,%esp
f0116aa5:	6a 05                	push   $0x5
f0116aa7:	50                   	push   %eax
f0116aa8:	e8 fb 3a ff ff       	call   f010a5a8 <set_program_priority>
f0116aad:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0116ab0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ab3:	83 ec 08             	sub    $0x8,%esp
f0116ab6:	6a 05                	push   $0x5
f0116ab8:	50                   	push   %eax
f0116ab9:	e8 ea 3a ff ff       	call   f010a5a8 <set_program_priority>
f0116abe:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0116ac1:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0116ac8:	75 6e 61 
f0116acb:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0116ad2:	6c 00 00 
f0116ad5:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0116adb:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116ae0:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ae5:	89 d7                	mov    %edx,%edi
f0116ae7:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116ae9:	83 ec 0c             	sub    $0xc,%esp
f0116aec:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0116af2:	50                   	push   %eax
f0116af3:	e8 97 a1 fe ff       	call   f0100c8f <execute_command>
f0116af8:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0116afb:	eb 10                	jmp    f0116b0d <test_priority_normal_and_lower+0x9d5>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0116afd:	83 ec 0c             	sub    $0xc,%esp
f0116b00:	68 94 a3 13 f0       	push   $0xf013a394
f0116b05:	e8 23 a1 fe ff       	call   f0100c2d <cprintf>
f0116b0a:	83 c4 10             	add    $0x10,%esp
	}
}
f0116b0d:	90                   	nop
f0116b0e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116b11:	5b                   	pop    %ebx
f0116b12:	5e                   	pop    %esi
f0116b13:	5f                   	pop    %edi
f0116b14:	5d                   	pop    %ebp
f0116b15:	c3                   	ret    

f0116b16 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0116b16:	55                   	push   %ebp
f0116b17:	89 e5                	mov    %esp,%ebp
f0116b19:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0116b1e:	83 f8 03             	cmp    $0x3,%eax
f0116b21:	75 04                	jne    f0116b27 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0116b23:	b0 01                	mov    $0x1,%al
f0116b25:	eb 02                	jmp    f0116b29 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0116b27:	b0 00                	mov    $0x0,%al
f0116b29:	5d                   	pop    %ebp
f0116b2a:	c3                   	ret    

f0116b2b <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0116b2b:	55                   	push   %ebp
f0116b2c:	89 e5                	mov    %esp,%ebp
f0116b2e:	57                   	push   %edi
f0116b2f:	53                   	push   %ebx
f0116b30:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0116b36:	83 ec 0c             	sub    $0xc,%esp
f0116b39:	68 98 a4 13 f0       	push   $0xf013a498
f0116b3e:	e8 ea a0 fe ff       	call   f0100c2d <cprintf>
f0116b43:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0116b46:	83 ec 0c             	sub    $0xc,%esp
f0116b49:	68 c8 a4 13 f0       	push   $0xf013a4c8
f0116b4e:	e8 da a0 fe ff       	call   f0100c2d <cprintf>
f0116b53:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0116b56:	83 ec 0c             	sub    $0xc,%esp
f0116b59:	68 98 a4 13 f0       	push   $0xf013a498
f0116b5e:	e8 ca a0 fe ff       	call   f0100c2d <cprintf>
f0116b63:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0116b66:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0116b6a:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0116b6e:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0116b74:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0116b7a:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0116b81:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0116b88:	e8 25 55 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116b8d:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0116b90:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0116b96:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116b9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ba0:	89 d7                	mov    %edx,%edi
f0116ba2:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0116ba4:	e8 09 55 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116ba9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116bac:	e8 db d0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116bb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0116bb4:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0116bbb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116bbe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116bc3:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0116bc6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116bc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0116bce:	f7 75 d4             	divl   -0x2c(%ebp)
f0116bd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116bd4:	29 d0                	sub    %edx,%eax
f0116bd6:	89 c1                	mov    %eax,%ecx
f0116bd8:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0116bdf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116be4:	0f b6 d0             	movzbl %al,%edx
f0116be7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116bea:	01 d0                	add    %edx,%eax
f0116bec:	48                   	dec    %eax
f0116bed:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116bf0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116bf3:	ba 00 00 00 00       	mov    $0x0,%edx
f0116bf8:	f7 75 cc             	divl   -0x34(%ebp)
f0116bfb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116bfe:	29 d0                	sub    %edx,%eax
f0116c00:	01 c1                	add    %eax,%ecx
f0116c02:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0116c09:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116c0e:	0f b6 c0             	movzbl %al,%eax
f0116c11:	c1 e0 04             	shl    $0x4,%eax
f0116c14:	89 c2                	mov    %eax,%edx
f0116c16:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116c19:	01 d0                	add    %edx,%eax
f0116c1b:	48                   	dec    %eax
f0116c1c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116c1f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116c22:	ba 00 00 00 00       	mov    $0x0,%edx
f0116c27:	f7 75 c4             	divl   -0x3c(%ebp)
f0116c2a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116c2d:	29 d0                	sub    %edx,%eax
f0116c2f:	01 c8                	add    %ecx,%eax
f0116c31:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0116c36:	29 c2                	sub    %eax,%edx
f0116c38:	89 d0                	mov    %edx,%eax
f0116c3a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0116c3d:	83 ec 0c             	sub    $0xc,%esp
f0116c40:	ff 75 bc             	pushl  -0x44(%ebp)
f0116c43:	e8 da 07 ff ff       	call   f0107422 <kmalloc>
f0116c48:	83 c4 10             	add    $0x10,%esp
f0116c4b:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0116c51:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116c57:	85 c0                	test   %eax,%eax
f0116c59:	74 14                	je     f0116c6f <test_kmalloc+0x144>
f0116c5b:	83 ec 04             	sub    $0x4,%esp
f0116c5e:	68 24 a5 13 f0       	push   $0xf013a524
f0116c63:	6a 40                	push   $0x40
f0116c65:	68 56 a5 13 f0       	push   $0xf013a556
f0116c6a:	e8 37 95 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116c6f:	e8 18 d0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116c74:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116c77:	74 14                	je     f0116c8d <test_kmalloc+0x162>
f0116c79:	83 ec 04             	sub    $0x4,%esp
f0116c7c:	68 70 a5 13 f0       	push   $0xf013a570
f0116c81:	6a 41                	push   $0x41
f0116c83:	68 56 a5 13 f0       	push   $0xf013a556
f0116c88:	e8 19 95 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116c8d:	e8 20 54 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116c92:	89 c2                	mov    %eax,%edx
f0116c94:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116c97:	39 c2                	cmp    %eax,%edx
f0116c99:	74 14                	je     f0116caf <test_kmalloc+0x184>
f0116c9b:	83 ec 04             	sub    $0x4,%esp
f0116c9e:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0116ca3:	6a 42                	push   $0x42
f0116ca5:	68 56 a5 13 f0       	push   $0xf013a556
f0116caa:	e8 f7 94 fe ff       	call   f01001a6 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0116caf:	83 ec 0c             	sub    $0xc,%esp
f0116cb2:	68 18 a6 13 f0       	push   $0xf013a618
f0116cb7:	e8 71 9f fe ff       	call   f0100c2d <cprintf>
f0116cbc:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116cbf:	e8 ee 53 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116cc4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116cc7:	e8 c0 cf fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116ccc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0116ccf:	83 ec 0c             	sub    $0xc,%esp
f0116cd2:	68 00 fc 1f 00       	push   $0x1ffc00
f0116cd7:	e8 46 07 ff ff       	call   f0107422 <kmalloc>
f0116cdc:	83 c4 10             	add    $0x10,%esp
f0116cdf:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116ce5:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116ceb:	89 c1                	mov    %eax,%ecx
f0116ced:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0116cf4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116cf7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116cfc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0116cff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d02:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d07:	f7 75 b8             	divl   -0x48(%ebp)
f0116d0a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d0d:	29 d0                	sub    %edx,%eax
f0116d0f:	89 c3                	mov    %eax,%ebx
f0116d11:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0116d18:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116d1d:	0f b6 d0             	movzbl %al,%edx
f0116d20:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d23:	01 d0                	add    %edx,%eax
f0116d25:	48                   	dec    %eax
f0116d26:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0116d29:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d31:	f7 75 b0             	divl   -0x50(%ebp)
f0116d34:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d37:	29 d0                	sub    %edx,%eax
f0116d39:	01 c3                	add    %eax,%ebx
f0116d3b:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0116d42:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116d47:	0f b6 c0             	movzbl %al,%eax
f0116d4a:	c1 e0 04             	shl    $0x4,%eax
f0116d4d:	89 c2                	mov    %eax,%edx
f0116d4f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d52:	01 d0                	add    %edx,%eax
f0116d54:	48                   	dec    %eax
f0116d55:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0116d58:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d60:	f7 75 a8             	divl   -0x58(%ebp)
f0116d63:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d66:	29 d0                	sub    %edx,%eax
f0116d68:	01 d8                	add    %ebx,%eax
f0116d6a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0116d6f:	39 c1                	cmp    %eax,%ecx
f0116d71:	74 14                	je     f0116d87 <test_kmalloc+0x25c>
f0116d73:	83 ec 04             	sub    $0x4,%esp
f0116d76:	68 3c a6 13 f0       	push   $0xf013a63c
f0116d7b:	6a 49                	push   $0x49
f0116d7d:	68 56 a5 13 f0       	push   $0xf013a556
f0116d82:	e8 1f 94 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116d87:	e8 00 cf fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116d8c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116d8f:	74 14                	je     f0116da5 <test_kmalloc+0x27a>
f0116d91:	83 ec 04             	sub    $0x4,%esp
f0116d94:	68 70 a5 13 f0       	push   $0xf013a570
f0116d99:	6a 4a                	push   $0x4a
f0116d9b:	68 56 a5 13 f0       	push   $0xf013a556
f0116da0:	e8 01 94 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116da5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116da8:	e8 05 53 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116dad:	29 c3                	sub    %eax,%ebx
f0116daf:	89 d8                	mov    %ebx,%eax
f0116db1:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116db6:	74 14                	je     f0116dcc <test_kmalloc+0x2a1>
f0116db8:	83 ec 04             	sub    $0x4,%esp
f0116dbb:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0116dc0:	6a 4b                	push   $0x4b
f0116dc2:	68 56 a5 13 f0       	push   $0xf013a556
f0116dc7:	e8 da 93 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116dcc:	e8 e1 52 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116dd1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116dd4:	e8 b3 ce fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116dd9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0116ddc:	83 ec 0c             	sub    $0xc,%esp
f0116ddf:	68 00 fc 1f 00       	push   $0x1ffc00
f0116de4:	e8 39 06 ff ff       	call   f0107422 <kmalloc>
f0116de9:	83 c4 10             	add    $0x10,%esp
f0116dec:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116df2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116df8:	89 c1                	mov    %eax,%ecx
f0116dfa:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0116e01:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0116e04:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116e09:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0116e0c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116e0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e14:	f7 75 a0             	divl   -0x60(%ebp)
f0116e17:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116e1a:	29 d0                	sub    %edx,%eax
f0116e1c:	89 c3                	mov    %eax,%ebx
f0116e1e:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0116e25:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116e2a:	0f b6 d0             	movzbl %al,%edx
f0116e2d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116e30:	01 d0                	add    %edx,%eax
f0116e32:	48                   	dec    %eax
f0116e33:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0116e36:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116e39:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e3e:	f7 75 98             	divl   -0x68(%ebp)
f0116e41:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116e44:	29 d0                	sub    %edx,%eax
f0116e46:	01 c3                	add    %eax,%ebx
f0116e48:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0116e4f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116e54:	0f b6 c0             	movzbl %al,%eax
f0116e57:	c1 e0 04             	shl    $0x4,%eax
f0116e5a:	89 c2                	mov    %eax,%edx
f0116e5c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0116e5f:	01 d0                	add    %edx,%eax
f0116e61:	48                   	dec    %eax
f0116e62:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0116e65:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0116e68:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e6d:	f7 75 90             	divl   -0x70(%ebp)
f0116e70:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0116e73:	29 d0                	sub    %edx,%eax
f0116e75:	01 d8                	add    %ebx,%eax
f0116e77:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0116e7c:	39 c1                	cmp    %eax,%ecx
f0116e7e:	74 14                	je     f0116e94 <test_kmalloc+0x369>
f0116e80:	83 ec 04             	sub    $0x4,%esp
f0116e83:	68 3c a6 13 f0       	push   $0xf013a63c
f0116e88:	6a 51                	push   $0x51
f0116e8a:	68 56 a5 13 f0       	push   $0xf013a556
f0116e8f:	e8 12 93 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116e94:	e8 f3 cd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116e99:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116e9c:	74 14                	je     f0116eb2 <test_kmalloc+0x387>
f0116e9e:	83 ec 04             	sub    $0x4,%esp
f0116ea1:	68 70 a5 13 f0       	push   $0xf013a570
f0116ea6:	6a 52                	push   $0x52
f0116ea8:	68 56 a5 13 f0       	push   $0xf013a556
f0116ead:	e8 f4 92 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116eb2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116eb5:	e8 f8 51 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116eba:	29 c3                	sub    %eax,%ebx
f0116ebc:	89 d8                	mov    %ebx,%eax
f0116ebe:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116ec3:	74 14                	je     f0116ed9 <test_kmalloc+0x3ae>
f0116ec5:	83 ec 04             	sub    $0x4,%esp
f0116ec8:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0116ecd:	6a 53                	push   $0x53
f0116ecf:	68 56 a5 13 f0       	push   $0xf013a556
f0116ed4:	e8 cd 92 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116ed9:	e8 d4 51 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116ede:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ee1:	e8 a6 cd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0116ee9:	83 ec 0c             	sub    $0xc,%esp
f0116eec:	68 00 08 00 00       	push   $0x800
f0116ef1:	e8 2c 05 ff ff       	call   f0107422 <kmalloc>
f0116ef6:	83 c4 10             	add    $0x10,%esp
f0116ef9:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116eff:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0116f05:	89 c1                	mov    %eax,%ecx
f0116f07:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0116f0e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0116f11:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116f16:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0116f19:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0116f1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f21:	f7 75 88             	divl   -0x78(%ebp)
f0116f24:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0116f27:	29 d0                	sub    %edx,%eax
f0116f29:	89 c3                	mov    %eax,%ebx
f0116f2b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0116f32:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116f37:	0f b6 d0             	movzbl %al,%edx
f0116f3a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0116f3d:	01 d0                	add    %edx,%eax
f0116f3f:	48                   	dec    %eax
f0116f40:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0116f46:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0116f4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f51:	f7 75 80             	divl   -0x80(%ebp)
f0116f54:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0116f5a:	29 d0                	sub    %edx,%eax
f0116f5c:	01 c3                	add    %eax,%ebx
f0116f5e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0116f65:	10 00 00 
f0116f68:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116f6d:	0f b6 c0             	movzbl %al,%eax
f0116f70:	c1 e0 04             	shl    $0x4,%eax
f0116f73:	89 c2                	mov    %eax,%edx
f0116f75:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0116f7b:	01 d0                	add    %edx,%eax
f0116f7d:	48                   	dec    %eax
f0116f7e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0116f84:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116f8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f8f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0116f95:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116f9b:	29 d0                	sub    %edx,%eax
f0116f9d:	01 d8                	add    %ebx,%eax
f0116f9f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0116fa4:	39 c1                	cmp    %eax,%ecx
f0116fa6:	74 14                	je     f0116fbc <test_kmalloc+0x491>
f0116fa8:	83 ec 04             	sub    $0x4,%esp
f0116fab:	68 3c a6 13 f0       	push   $0xf013a63c
f0116fb0:	6a 59                	push   $0x59
f0116fb2:	68 56 a5 13 f0       	push   $0xf013a556
f0116fb7:	e8 ea 91 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116fbc:	e8 cb cc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116fc1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116fc4:	74 14                	je     f0116fda <test_kmalloc+0x4af>
f0116fc6:	83 ec 04             	sub    $0x4,%esp
f0116fc9:	68 70 a5 13 f0       	push   $0xf013a570
f0116fce:	6a 5a                	push   $0x5a
f0116fd0:	68 56 a5 13 f0       	push   $0xf013a556
f0116fd5:	e8 cc 91 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116fda:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116fdd:	e8 d0 50 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0116fe2:	29 c3                	sub    %eax,%ebx
f0116fe4:	89 d8                	mov    %ebx,%eax
f0116fe6:	83 f8 01             	cmp    $0x1,%eax
f0116fe9:	74 14                	je     f0116fff <test_kmalloc+0x4d4>
f0116feb:	83 ec 04             	sub    $0x4,%esp
f0116fee:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0116ff3:	6a 5b                	push   $0x5b
f0116ff5:	68 56 a5 13 f0       	push   $0xf013a556
f0116ffa:	e8 a7 91 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116fff:	e8 ae 50 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117004:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117007:	e8 80 cc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011700c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011700f:	83 ec 0c             	sub    $0xc,%esp
f0117012:	68 00 08 00 00       	push   $0x800
f0117017:	e8 06 04 ff ff       	call   f0107422 <kmalloc>
f011701c:	83 c4 10             	add    $0x10,%esp
f011701f:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117025:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011702b:	89 c1                	mov    %eax,%ecx
f011702d:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117034:	10 00 00 
f0117037:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011703d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117042:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117048:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011704e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117053:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117059:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011705f:	29 d0                	sub    %edx,%eax
f0117061:	89 c3                	mov    %eax,%ebx
f0117063:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f011706a:	10 00 00 
f011706d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117072:	0f b6 d0             	movzbl %al,%edx
f0117075:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011707b:	01 d0                	add    %edx,%eax
f011707d:	48                   	dec    %eax
f011707e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117084:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011708a:	ba 00 00 00 00       	mov    $0x0,%edx
f011708f:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117095:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011709b:	29 d0                	sub    %edx,%eax
f011709d:	01 c3                	add    %eax,%ebx
f011709f:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01170a6:	10 00 00 
f01170a9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01170ae:	0f b6 c0             	movzbl %al,%eax
f01170b1:	c1 e0 04             	shl    $0x4,%eax
f01170b4:	89 c2                	mov    %eax,%edx
f01170b6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01170bc:	01 d0                	add    %edx,%eax
f01170be:	48                   	dec    %eax
f01170bf:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01170c5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01170cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01170d0:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01170d6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01170dc:	29 d0                	sub    %edx,%eax
f01170de:	01 d8                	add    %ebx,%eax
f01170e0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01170e5:	39 c1                	cmp    %eax,%ecx
f01170e7:	74 14                	je     f01170fd <test_kmalloc+0x5d2>
f01170e9:	83 ec 04             	sub    $0x4,%esp
f01170ec:	68 3c a6 13 f0       	push   $0xf013a63c
f01170f1:	6a 61                	push   $0x61
f01170f3:	68 56 a5 13 f0       	push   $0xf013a556
f01170f8:	e8 a9 90 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01170fd:	e8 8a cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117102:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117105:	74 14                	je     f011711b <test_kmalloc+0x5f0>
f0117107:	83 ec 04             	sub    $0x4,%esp
f011710a:	68 70 a5 13 f0       	push   $0xf013a570
f011710f:	6a 62                	push   $0x62
f0117111:	68 56 a5 13 f0       	push   $0xf013a556
f0117116:	e8 8b 90 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011711b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011711e:	e8 8f 4f ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117123:	29 c3                	sub    %eax,%ebx
f0117125:	89 d8                	mov    %ebx,%eax
f0117127:	83 f8 01             	cmp    $0x1,%eax
f011712a:	74 14                	je     f0117140 <test_kmalloc+0x615>
f011712c:	83 ec 04             	sub    $0x4,%esp
f011712f:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0117134:	6a 63                	push   $0x63
f0117136:	68 56 a5 13 f0       	push   $0xf013a556
f011713b:	e8 66 90 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117140:	e8 6d 4f ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117145:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117148:	e8 3f cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011714d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117150:	83 ec 0c             	sub    $0xc,%esp
f0117153:	68 00 1c 00 00       	push   $0x1c00
f0117158:	e8 c5 02 ff ff       	call   f0107422 <kmalloc>
f011715d:	83 c4 10             	add    $0x10,%esp
f0117160:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117166:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011716c:	89 c1                	mov    %eax,%ecx
f011716e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117175:	10 00 00 
f0117178:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011717e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117183:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117189:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011718f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117194:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011719a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01171a0:	29 d0                	sub    %edx,%eax
f01171a2:	89 c3                	mov    %eax,%ebx
f01171a4:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01171ab:	10 00 00 
f01171ae:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01171b3:	0f b6 d0             	movzbl %al,%edx
f01171b6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01171bc:	01 d0                	add    %edx,%eax
f01171be:	48                   	dec    %eax
f01171bf:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01171c5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01171cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01171d0:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01171d6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01171dc:	29 d0                	sub    %edx,%eax
f01171de:	01 c3                	add    %eax,%ebx
f01171e0:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01171e7:	10 00 00 
f01171ea:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01171ef:	0f b6 c0             	movzbl %al,%eax
f01171f2:	c1 e0 04             	shl    $0x4,%eax
f01171f5:	89 c2                	mov    %eax,%edx
f01171f7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01171fd:	01 d0                	add    %edx,%eax
f01171ff:	48                   	dec    %eax
f0117200:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117206:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011720c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117211:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117217:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011721d:	29 d0                	sub    %edx,%eax
f011721f:	01 d8                	add    %ebx,%eax
f0117221:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117226:	39 c1                	cmp    %eax,%ecx
f0117228:	74 14                	je     f011723e <test_kmalloc+0x713>
f011722a:	83 ec 04             	sub    $0x4,%esp
f011722d:	68 3c a6 13 f0       	push   $0xf013a63c
f0117232:	6a 69                	push   $0x69
f0117234:	68 56 a5 13 f0       	push   $0xf013a556
f0117239:	e8 68 8f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011723e:	e8 49 ca fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117243:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117246:	74 14                	je     f011725c <test_kmalloc+0x731>
f0117248:	83 ec 04             	sub    $0x4,%esp
f011724b:	68 70 a5 13 f0       	push   $0xf013a570
f0117250:	6a 6a                	push   $0x6a
f0117252:	68 56 a5 13 f0       	push   $0xf013a556
f0117257:	e8 4a 8f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011725c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011725f:	e8 4e 4e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117264:	29 c3                	sub    %eax,%ebx
f0117266:	89 d8                	mov    %ebx,%eax
f0117268:	83 f8 02             	cmp    $0x2,%eax
f011726b:	74 14                	je     f0117281 <test_kmalloc+0x756>
f011726d:	83 ec 04             	sub    $0x4,%esp
f0117270:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0117275:	6a 6b                	push   $0x6b
f0117277:	68 56 a5 13 f0       	push   $0xf013a556
f011727c:	e8 25 8f fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117281:	e8 2c 4e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117286:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117289:	e8 fe c9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011728e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0117291:	83 ec 0c             	sub    $0xc,%esp
f0117294:	68 00 fc 2f 00       	push   $0x2ffc00
f0117299:	e8 84 01 ff ff       	call   f0107422 <kmalloc>
f011729e:	83 c4 10             	add    $0x10,%esp
f01172a1:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01172a7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01172ad:	89 c1                	mov    %eax,%ecx
f01172af:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01172b6:	10 00 00 
f01172b9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01172bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01172c4:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01172ca:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01172d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01172d5:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01172db:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01172e1:	29 d0                	sub    %edx,%eax
f01172e3:	89 c3                	mov    %eax,%ebx
f01172e5:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01172ec:	10 00 00 
f01172ef:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01172f4:	0f b6 d0             	movzbl %al,%edx
f01172f7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01172fd:	01 d0                	add    %edx,%eax
f01172ff:	48                   	dec    %eax
f0117300:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117306:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011730c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117311:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117317:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011731d:	29 d0                	sub    %edx,%eax
f011731f:	01 c3                	add    %eax,%ebx
f0117321:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117328:	10 00 00 
f011732b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117330:	0f b6 c0             	movzbl %al,%eax
f0117333:	c1 e0 04             	shl    $0x4,%eax
f0117336:	89 c2                	mov    %eax,%edx
f0117338:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011733e:	01 d0                	add    %edx,%eax
f0117340:	48                   	dec    %eax
f0117341:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117347:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011734d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117352:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117358:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011735e:	29 d0                	sub    %edx,%eax
f0117360:	01 d8                	add    %ebx,%eax
f0117362:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117367:	39 c1                	cmp    %eax,%ecx
f0117369:	74 14                	je     f011737f <test_kmalloc+0x854>
f011736b:	83 ec 04             	sub    $0x4,%esp
f011736e:	68 3c a6 13 f0       	push   $0xf013a63c
f0117373:	6a 71                	push   $0x71
f0117375:	68 56 a5 13 f0       	push   $0xf013a556
f011737a:	e8 27 8e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011737f:	e8 08 c9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117384:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117387:	74 14                	je     f011739d <test_kmalloc+0x872>
f0117389:	83 ec 04             	sub    $0x4,%esp
f011738c:	68 70 a5 13 f0       	push   $0xf013a570
f0117391:	6a 72                	push   $0x72
f0117393:	68 56 a5 13 f0       	push   $0xf013a556
f0117398:	e8 09 8e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011739d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01173a0:	e8 0d 4d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01173a5:	29 c3                	sub    %eax,%ebx
f01173a7:	89 d8                	mov    %ebx,%eax
f01173a9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01173ae:	74 14                	je     f01173c4 <test_kmalloc+0x899>
f01173b0:	83 ec 04             	sub    $0x4,%esp
f01173b3:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01173b8:	6a 73                	push   $0x73
f01173ba:	68 56 a5 13 f0       	push   $0xf013a556
f01173bf:	e8 e2 8d fe ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01173c4:	e8 e9 4c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01173c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01173cc:	e8 bb c8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01173d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01173d4:	83 ec 0c             	sub    $0xc,%esp
f01173d7:	68 00 fc 5f 00       	push   $0x5ffc00
f01173dc:	e8 41 00 ff ff       	call   f0107422 <kmalloc>
f01173e1:	83 c4 10             	add    $0x10,%esp
f01173e4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01173ea:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01173f0:	89 c1                	mov    %eax,%ecx
f01173f2:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01173f9:	10 00 00 
f01173fc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117402:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117407:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011740d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117413:	ba 00 00 00 00       	mov    $0x0,%edx
f0117418:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011741e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117424:	29 d0                	sub    %edx,%eax
f0117426:	89 c3                	mov    %eax,%ebx
f0117428:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011742f:	10 00 00 
f0117432:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117437:	0f b6 d0             	movzbl %al,%edx
f011743a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117440:	01 d0                	add    %edx,%eax
f0117442:	48                   	dec    %eax
f0117443:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0117449:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011744f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117454:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011745a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117460:	29 d0                	sub    %edx,%eax
f0117462:	01 c3                	add    %eax,%ebx
f0117464:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011746b:	10 00 00 
f011746e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117473:	0f b6 c0             	movzbl %al,%eax
f0117476:	c1 e0 04             	shl    $0x4,%eax
f0117479:	89 c2                	mov    %eax,%edx
f011747b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0117481:	01 d0                	add    %edx,%eax
f0117483:	48                   	dec    %eax
f0117484:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011748a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117490:	ba 00 00 00 00       	mov    $0x0,%edx
f0117495:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011749b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01174a1:	29 d0                	sub    %edx,%eax
f01174a3:	01 d8                	add    %ebx,%eax
f01174a5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01174aa:	39 c1                	cmp    %eax,%ecx
f01174ac:	74 14                	je     f01174c2 <test_kmalloc+0x997>
f01174ae:	83 ec 04             	sub    $0x4,%esp
f01174b1:	68 3c a6 13 f0       	push   $0xf013a63c
f01174b6:	6a 79                	push   $0x79
f01174b8:	68 56 a5 13 f0       	push   $0xf013a556
f01174bd:	e8 e4 8c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01174c2:	e8 c5 c7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01174c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01174ca:	74 14                	je     f01174e0 <test_kmalloc+0x9b5>
f01174cc:	83 ec 04             	sub    $0x4,%esp
f01174cf:	68 70 a5 13 f0       	push   $0xf013a570
f01174d4:	6a 7a                	push   $0x7a
f01174d6:	68 56 a5 13 f0       	push   $0xf013a556
f01174db:	e8 c6 8c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01174e0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01174e3:	e8 ca 4b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01174e8:	29 c3                	sub    %eax,%ebx
f01174ea:	89 d8                	mov    %ebx,%eax
f01174ec:	3d 00 06 00 00       	cmp    $0x600,%eax
f01174f1:	74 14                	je     f0117507 <test_kmalloc+0x9dc>
f01174f3:	83 ec 04             	sub    $0x4,%esp
f01174f6:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01174fb:	6a 7b                	push   $0x7b
f01174fd:	68 56 a5 13 f0       	push   $0xf013a556
f0117502:	e8 9f 8c fe ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117507:	e8 a6 4b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011750c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011750f:	e8 78 c7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117514:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117517:	83 ec 0c             	sub    $0xc,%esp
f011751a:	68 00 38 00 00       	push   $0x3800
f011751f:	e8 fe fe fe ff       	call   f0107422 <kmalloc>
f0117524:	83 c4 10             	add    $0x10,%esp
f0117527:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011752d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117533:	89 c1                	mov    %eax,%ecx
f0117535:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011753c:	10 00 00 
f011753f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0117545:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011754a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0117550:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117556:	ba 00 00 00 00       	mov    $0x0,%edx
f011755b:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0117561:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117567:	29 d0                	sub    %edx,%eax
f0117569:	89 c3                	mov    %eax,%ebx
f011756b:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0117572:	10 00 00 
f0117575:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011757a:	0f b6 d0             	movzbl %al,%edx
f011757d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0117583:	01 d0                	add    %edx,%eax
f0117585:	48                   	dec    %eax
f0117586:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011758c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117592:	ba 00 00 00 00       	mov    $0x0,%edx
f0117597:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011759d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01175a3:	29 d0                	sub    %edx,%eax
f01175a5:	01 c3                	add    %eax,%ebx
f01175a7:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01175ae:	10 00 00 
f01175b1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01175b6:	0f b6 c0             	movzbl %al,%eax
f01175b9:	c1 e0 04             	shl    $0x4,%eax
f01175bc:	89 c2                	mov    %eax,%edx
f01175be:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01175c4:	01 d0                	add    %edx,%eax
f01175c6:	48                   	dec    %eax
f01175c7:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01175cd:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01175d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01175d8:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01175de:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01175e4:	29 d0                	sub    %edx,%eax
f01175e6:	01 d8                	add    %ebx,%eax
f01175e8:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01175ed:	39 c1                	cmp    %eax,%ecx
f01175ef:	74 17                	je     f0117608 <test_kmalloc+0xadd>
f01175f1:	83 ec 04             	sub    $0x4,%esp
f01175f4:	68 3c a6 13 f0       	push   $0xf013a63c
f01175f9:	68 81 00 00 00       	push   $0x81
f01175fe:	68 56 a5 13 f0       	push   $0xf013a556
f0117603:	e8 9e 8b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117608:	e8 7f c6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011760d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117610:	74 17                	je     f0117629 <test_kmalloc+0xafe>
f0117612:	83 ec 04             	sub    $0x4,%esp
f0117615:	68 70 a5 13 f0       	push   $0xf013a570
f011761a:	68 82 00 00 00       	push   $0x82
f011761f:	68 56 a5 13 f0       	push   $0xf013a556
f0117624:	e8 7d 8b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117629:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011762c:	e8 81 4a ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117631:	29 c3                	sub    %eax,%ebx
f0117633:	89 d8                	mov    %ebx,%eax
f0117635:	83 f8 04             	cmp    $0x4,%eax
f0117638:	74 17                	je     f0117651 <test_kmalloc+0xb26>
f011763a:	83 ec 04             	sub    $0x4,%esp
f011763d:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0117642:	68 83 00 00 00       	push   $0x83
f0117647:	68 56 a5 13 f0       	push   $0xf013a556
f011764c:	e8 55 8b fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b50%");
f0117651:	83 ec 0c             	sub    $0xc,%esp
f0117654:	68 a2 a6 13 f0       	push   $0xf013a6a2
f0117659:	e8 cf 95 fe ff       	call   f0100c2d <cprintf>
f011765e:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0117661:	e8 4c 4a ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117666:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0117669:	e8 1e c6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011766e:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0117671:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0117678:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f011767b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117681:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0117687:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011768d:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117690:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0117692:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117698:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011769e:	01 c2                	add    %eax,%edx
f01176a0:	8a 45 f2             	mov    -0xe(%ebp),%al
f01176a3:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f01176a5:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01176ab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f01176b1:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f01176b8:	fd 0f 00 
			shortArr[0] = minShort;
f01176bb:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f01176c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01176c4:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f01176c7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01176cd:	01 c0                	add    %eax,%eax
f01176cf:	89 c2                	mov    %eax,%edx
f01176d1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01176d7:	01 c2                	add    %eax,%edx
f01176d9:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01176dd:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f01176e0:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01176e6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f01176ec:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f01176f3:	01 00 00 
			intArr[0] = minInt;
f01176f6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01176fc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01176ff:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117701:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117707:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011770e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117714:	01 c2                	add    %eax,%edx
f0117716:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117719:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f011771b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117721:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0117727:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f011772e:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0117731:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117737:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011773a:	88 10                	mov    %dl,(%eax)
f011773c:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117742:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117745:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117749:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011774f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117752:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0117755:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011775b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117762:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117768:	01 c2                	add    %eax,%edx
f011776a:	8a 45 f2             	mov    -0xe(%ebp),%al
f011776d:	88 02                	mov    %al,(%edx)
f011776f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117775:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011777c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117782:	01 c2                	add    %eax,%edx
f0117784:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117788:	66 89 42 02          	mov    %ax,0x2(%edx)
f011778c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117792:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117799:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011779f:	01 c2                	add    %eax,%edx
f01177a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01177a4:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f01177a7:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01177ae:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f01177b1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01177b7:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f01177bd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01177c3:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01177c6:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f01177c8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01177ce:	89 c2                	mov    %eax,%edx
f01177d0:	c1 ea 1f             	shr    $0x1f,%edx
f01177d3:	01 d0                	add    %edx,%eax
f01177d5:	d1 f8                	sar    %eax
f01177d7:	89 c2                	mov    %eax,%edx
f01177d9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01177df:	01 c2                	add    %eax,%edx
f01177e1:	8a 45 f2             	mov    -0xe(%ebp),%al
f01177e4:	88 c1                	mov    %al,%cl
f01177e6:	c0 e9 07             	shr    $0x7,%cl
f01177e9:	01 c8                	add    %ecx,%eax
f01177eb:	d0 f8                	sar    %al
f01177ed:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f01177ef:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f01177f5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01177fb:	01 c2                	add    %eax,%edx
f01177fd:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117800:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0117802:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117808:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011780e:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0117815:	1b 00 00 
			shortArr2[0] = minShort;
f0117818:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011781e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117821:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0117824:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011782a:	01 c0                	add    %eax,%eax
f011782c:	89 c2                	mov    %eax,%edx
f011782e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117834:	01 c2                	add    %eax,%edx
f0117836:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011783a:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011783d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117843:	8a 00                	mov    (%eax),%al
f0117845:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117848:	75 15                	jne    f011785f <test_kmalloc+0xd34>
f011784a:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117850:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117856:	01 d0                	add    %edx,%eax
f0117858:	8a 00                	mov    (%eax),%al
f011785a:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011785d:	74 17                	je     f0117876 <test_kmalloc+0xd4b>
f011785f:	83 ec 04             	sub    $0x4,%esp
f0117862:	68 ac a6 13 f0       	push   $0xf013a6ac
f0117867:	68 b2 00 00 00       	push   $0xb2
f011786c:	68 56 a5 13 f0       	push   $0xf013a556
f0117871:	e8 30 89 fe ff       	call   f01001a6 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117876:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011787c:	66 8b 00             	mov    (%eax),%ax
f011787f:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117883:	75 1b                	jne    f01178a0 <test_kmalloc+0xd75>
f0117885:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011788b:	01 c0                	add    %eax,%eax
f011788d:	89 c2                	mov    %eax,%edx
f011788f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117895:	01 d0                	add    %edx,%eax
f0117897:	66 8b 00             	mov    (%eax),%ax
f011789a:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011789e:	74 17                	je     f01178b7 <test_kmalloc+0xd8c>
f01178a0:	83 ec 04             	sub    $0x4,%esp
f01178a3:	68 ac a6 13 f0       	push   $0xf013a6ac
f01178a8:	68 b3 00 00 00       	push   $0xb3
f01178ad:	68 56 a5 13 f0       	push   $0xf013a556
f01178b2:	e8 ef 88 fe ff       	call   f01001a6 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f01178b7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01178bd:	8b 00                	mov    (%eax),%eax
f01178bf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01178c2:	75 1c                	jne    f01178e0 <test_kmalloc+0xdb5>
f01178c4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01178ca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01178d1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01178d7:	01 d0                	add    %edx,%eax
f01178d9:	8b 00                	mov    (%eax),%eax
f01178db:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01178de:	74 17                	je     f01178f7 <test_kmalloc+0xdcc>
f01178e0:	83 ec 04             	sub    $0x4,%esp
f01178e3:	68 ac a6 13 f0       	push   $0xf013a6ac
f01178e8:	68 b4 00 00 00       	push   $0xb4
f01178ed:	68 56 a5 13 f0       	push   $0xf013a556
f01178f2:	e8 af 88 fe ff       	call   f01001a6 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f01178f7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01178fd:	8a 00                	mov    (%eax),%al
f01178ff:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117902:	75 1c                	jne    f0117920 <test_kmalloc+0xdf5>
f0117904:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011790a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117911:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117917:	01 d0                	add    %edx,%eax
f0117919:	8a 00                	mov    (%eax),%al
f011791b:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011791e:	74 17                	je     f0117937 <test_kmalloc+0xe0c>
f0117920:	83 ec 04             	sub    $0x4,%esp
f0117923:	68 ac a6 13 f0       	push   $0xf013a6ac
f0117928:	68 b6 00 00 00       	push   $0xb6
f011792d:	68 56 a5 13 f0       	push   $0xf013a556
f0117932:	e8 6f 88 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117937:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011793d:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117941:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117945:	75 1f                	jne    f0117966 <test_kmalloc+0xe3b>
f0117947:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011794d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117954:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011795a:	01 d0                	add    %edx,%eax
f011795c:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117960:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117964:	74 17                	je     f011797d <test_kmalloc+0xe52>
f0117966:	83 ec 04             	sub    $0x4,%esp
f0117969:	68 ac a6 13 f0       	push   $0xf013a6ac
f011796e:	68 b7 00 00 00       	push   $0xb7
f0117973:	68 56 a5 13 f0       	push   $0xf013a556
f0117978:	e8 29 88 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f011797d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117983:	8b 40 04             	mov    0x4(%eax),%eax
f0117986:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117989:	75 1d                	jne    f01179a8 <test_kmalloc+0xe7d>
f011798b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117991:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117998:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011799e:	01 d0                	add    %edx,%eax
f01179a0:	8b 40 04             	mov    0x4(%eax),%eax
f01179a3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01179a6:	74 17                	je     f01179bf <test_kmalloc+0xe94>
f01179a8:	83 ec 04             	sub    $0x4,%esp
f01179ab:	68 ac a6 13 f0       	push   $0xf013a6ac
f01179b0:	68 b8 00 00 00       	push   $0xb8
f01179b5:	68 56 a5 13 f0       	push   $0xf013a556
f01179ba:	e8 e7 87 fe ff       	call   f01001a6 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01179bf:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01179c5:	8a 00                	mov    (%eax),%al
f01179c7:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01179ca:	75 40                	jne    f0117a0c <test_kmalloc+0xee1>
f01179cc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01179d2:	89 c2                	mov    %eax,%edx
f01179d4:	c1 ea 1f             	shr    $0x1f,%edx
f01179d7:	01 d0                	add    %edx,%eax
f01179d9:	d1 f8                	sar    %eax
f01179db:	89 c2                	mov    %eax,%edx
f01179dd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01179e3:	01 d0                	add    %edx,%eax
f01179e5:	8a 10                	mov    (%eax),%dl
f01179e7:	8a 45 f2             	mov    -0xe(%ebp),%al
f01179ea:	88 c1                	mov    %al,%cl
f01179ec:	c0 e9 07             	shr    $0x7,%cl
f01179ef:	01 c8                	add    %ecx,%eax
f01179f1:	d0 f8                	sar    %al
f01179f3:	38 c2                	cmp    %al,%dl
f01179f5:	75 15                	jne    f0117a0c <test_kmalloc+0xee1>
f01179f7:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f01179fd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117a03:	01 d0                	add    %edx,%eax
f0117a05:	8a 00                	mov    (%eax),%al
f0117a07:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117a0a:	74 17                	je     f0117a23 <test_kmalloc+0xef8>
f0117a0c:	83 ec 04             	sub    $0x4,%esp
f0117a0f:	68 ac a6 13 f0       	push   $0xf013a6ac
f0117a14:	68 ba 00 00 00       	push   $0xba
f0117a19:	68 56 a5 13 f0       	push   $0xf013a556
f0117a1e:	e8 83 87 fe ff       	call   f01001a6 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117a23:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117a29:	66 8b 00             	mov    (%eax),%ax
f0117a2c:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117a30:	75 1b                	jne    f0117a4d <test_kmalloc+0xf22>
f0117a32:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117a38:	01 c0                	add    %eax,%eax
f0117a3a:	89 c2                	mov    %eax,%edx
f0117a3c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117a42:	01 d0                	add    %edx,%eax
f0117a44:	66 8b 00             	mov    (%eax),%ax
f0117a47:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117a4b:	74 17                	je     f0117a64 <test_kmalloc+0xf39>
f0117a4d:	83 ec 04             	sub    $0x4,%esp
f0117a50:	68 ac a6 13 f0       	push   $0xf013a6ac
f0117a55:	68 bb 00 00 00       	push   $0xbb
f0117a5a:	68 56 a5 13 f0       	push   $0xf013a556
f0117a5f:	e8 42 87 fe ff       	call   f01001a6 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117a64:	e8 49 46 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117a69:	89 c2                	mov    %eax,%edx
f0117a6b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117a6e:	39 c2                	cmp    %eax,%edx
f0117a70:	74 17                	je     f0117a89 <test_kmalloc+0xf5e>
f0117a72:	83 ec 04             	sub    $0x4,%esp
f0117a75:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0117a7a:	68 bd 00 00 00       	push   $0xbd
f0117a7f:	68 56 a5 13 f0       	push   $0xf013a556
f0117a84:	e8 1d 87 fe ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117a89:	e8 fe c1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117a8e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117a91:	74 17                	je     f0117aaa <test_kmalloc+0xf7f>
f0117a93:	83 ec 04             	sub    $0x4,%esp
f0117a96:	68 70 a5 13 f0       	push   $0xf013a570
f0117a9b:	68 be 00 00 00       	push   $0xbe
f0117aa0:	68 56 a5 13 f0       	push   $0xf013a556
f0117aa5:	e8 fc 86 fe ff       	call   f01001a6 <_panic>
		}

		cprintf("\b\b\b80%");
f0117aaa:	83 ec 0c             	sub    $0xc,%esp
f0117aad:	68 e1 a6 13 f0       	push   $0xf013a6e1
f0117ab2:	e8 76 91 fe ff       	call   f0100c2d <cprintf>
f0117ab7:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0117aba:	e8 f3 45 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117abf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ac2:	e8 c5 c1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117ac7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0117aca:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0117ad1:	10 00 00 
f0117ad4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0117ada:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117adf:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0117ae5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117aeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0117af0:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0117af6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117afc:	29 d0                	sub    %edx,%eax
f0117afe:	89 c1                	mov    %eax,%ecx
f0117b00:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0117b07:	10 00 00 
f0117b0a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117b0f:	0f b6 d0             	movzbl %al,%edx
f0117b12:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0117b18:	01 d0                	add    %edx,%eax
f0117b1a:	48                   	dec    %eax
f0117b1b:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0117b21:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0117b27:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b2c:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0117b32:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0117b38:	29 d0                	sub    %edx,%eax
f0117b3a:	01 c1                	add    %eax,%ecx
f0117b3c:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0117b43:	10 00 00 
f0117b46:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117b4b:	0f b6 c0             	movzbl %al,%eax
f0117b4e:	c1 e0 04             	shl    $0x4,%eax
f0117b51:	89 c2                	mov    %eax,%edx
f0117b53:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0117b59:	01 d0                	add    %edx,%eax
f0117b5b:	48                   	dec    %eax
f0117b5c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0117b62:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117b68:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b6d:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0117b73:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117b79:	29 d0                	sub    %edx,%eax
f0117b7b:	01 c8                	add    %ecx,%eax
f0117b7d:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0117b82:	29 c2                	sub    %eax,%edx
f0117b84:	89 d0                	mov    %edx,%eax
f0117b86:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0117b8c:	83 ec 0c             	sub    $0xc,%esp
f0117b8f:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0117b95:	e8 88 f8 fe ff       	call   f0107422 <kmalloc>
f0117b9a:	83 c4 10             	add    $0x10,%esp
f0117b9d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0117ba3:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0117ba9:	85 c0                	test   %eax,%eax
f0117bab:	74 17                	je     f0117bc4 <test_kmalloc+0x1099>
f0117bad:	83 ec 04             	sub    $0x4,%esp
f0117bb0:	68 24 a5 13 f0       	push   $0xf013a524
f0117bb5:	68 c8 00 00 00       	push   $0xc8
f0117bba:	68 56 a5 13 f0       	push   $0xf013a556
f0117bbf:	e8 e2 85 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117bc4:	e8 c3 c0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117bc9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117bcc:	74 17                	je     f0117be5 <test_kmalloc+0x10ba>
f0117bce:	83 ec 04             	sub    $0x4,%esp
f0117bd1:	68 70 a5 13 f0       	push   $0xf013a570
f0117bd6:	68 c9 00 00 00       	push   $0xc9
f0117bdb:	68 56 a5 13 f0       	push   $0xf013a556
f0117be0:	e8 c1 85 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117be5:	e8 c8 44 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117bea:	89 c2                	mov    %eax,%edx
f0117bec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117bef:	39 c2                	cmp    %eax,%edx
f0117bf1:	74 17                	je     f0117c0a <test_kmalloc+0x10df>
f0117bf3:	83 ec 04             	sub    $0x4,%esp
f0117bf6:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0117bfb:	68 ca 00 00 00       	push   $0xca
f0117c00:	68 56 a5 13 f0       	push   $0xf013a556
f0117c05:	e8 9c 85 fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b90%");
f0117c0a:	83 ec 0c             	sub    $0xc,%esp
f0117c0d:	68 e8 a6 13 f0       	push   $0xf013a6e8
f0117c12:	e8 16 90 fe ff       	call   f0100c2d <cprintf>
f0117c17:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0117c1a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117c20:	05 00 40 00 00       	add    $0x4000,%eax
f0117c25:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0117c2b:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0117c32:	10 00 00 
f0117c35:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0117c3b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c40:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0117c46:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0117c4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c51:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0117c57:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0117c5d:	29 d0                	sub    %edx,%eax
f0117c5f:	89 c1                	mov    %eax,%ecx
f0117c61:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0117c68:	10 00 00 
f0117c6b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117c70:	0f b6 d0             	movzbl %al,%edx
f0117c73:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0117c79:	01 d0                	add    %edx,%eax
f0117c7b:	48                   	dec    %eax
f0117c7c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0117c82:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0117c88:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c8d:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0117c93:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0117c99:	29 d0                	sub    %edx,%eax
f0117c9b:	01 c1                	add    %eax,%ecx
f0117c9d:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0117ca4:	10 00 00 
f0117ca7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117cac:	0f b6 c0             	movzbl %al,%eax
f0117caf:	c1 e0 04             	shl    $0x4,%eax
f0117cb2:	89 c2                	mov    %eax,%edx
f0117cb4:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0117cba:	01 d0                	add    %edx,%eax
f0117cbc:	48                   	dec    %eax
f0117cbd:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0117cc3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0117cc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cce:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0117cd4:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0117cda:	29 d0                	sub    %edx,%eax
f0117cdc:	01 c8                	add    %ecx,%eax
f0117cde:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117ce3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0117ce6:	eb 6a                	jmp    f0117d52 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0117ce8:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0117ced:	83 ec 04             	sub    $0x4,%esp
f0117cf0:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0117cf6:	52                   	push   %edx
f0117cf7:	ff 75 f4             	pushl  -0xc(%ebp)
f0117cfa:	50                   	push   %eax
f0117cfb:	e8 69 ec fe ff       	call   f0106969 <get_page_table>
f0117d00:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0117d03:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0117d09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117d0c:	c1 ea 0c             	shr    $0xc,%edx
f0117d0f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0117d15:	c1 e2 02             	shl    $0x2,%edx
f0117d18:	01 d0                	add    %edx,%eax
f0117d1a:	8b 00                	mov    (%eax),%eax
f0117d1c:	25 ff 0f 00 00       	and    $0xfff,%eax
f0117d21:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0117d27:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0117d2d:	83 e0 04             	and    $0x4,%eax
f0117d30:	85 c0                	test   %eax,%eax
f0117d32:	74 17                	je     f0117d4b <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0117d34:	83 ec 04             	sub    $0x4,%esp
f0117d37:	68 f0 a6 13 f0       	push   $0xf013a6f0
f0117d3c:	68 d7 00 00 00       	push   $0xd7
f0117d41:	68 56 a5 13 f0       	push   $0xf013a556
f0117d46:	e8 5b 84 fe ff       	call   f01001a6 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0117d4b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0117d52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117d55:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0117d5b:	72 8b                	jb     f0117ce8 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0117d5d:	83 ec 0c             	sub    $0xc,%esp
f0117d60:	68 3a a7 13 f0       	push   $0xf013a73a
f0117d65:	e8 c3 8e fe ff       	call   f0100c2d <cprintf>
f0117d6a:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0117d6d:	83 ec 0c             	sub    $0xc,%esp
f0117d70:	68 44 a7 13 f0       	push   $0xf013a744
f0117d75:	e8 b3 8e fe ff       	call   f0100c2d <cprintf>
f0117d7a:	83 c4 10             	add    $0x10,%esp

	return 1;
f0117d7d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0117d82:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0117d85:	5b                   	pop    %ebx
f0117d86:	5f                   	pop    %edi
f0117d87:	5d                   	pop    %ebp
f0117d88:	c3                   	ret    

f0117d89 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0117d89:	55                   	push   %ebp
f0117d8a:	89 e5                	mov    %esp,%ebp
f0117d8c:	57                   	push   %edi
f0117d8d:	53                   	push   %ebx
f0117d8e:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0117d94:	83 ec 0c             	sub    $0xc,%esp
f0117d97:	68 98 a4 13 f0       	push   $0xf013a498
f0117d9c:	e8 8c 8e fe ff       	call   f0100c2d <cprintf>
f0117da1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117da4:	83 ec 0c             	sub    $0xc,%esp
f0117da7:	68 c8 a4 13 f0       	push   $0xf013a4c8
f0117dac:	e8 7c 8e fe ff       	call   f0100c2d <cprintf>
f0117db1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117db4:	83 ec 0c             	sub    $0xc,%esp
f0117db7:	68 98 a4 13 f0       	push   $0xf013a498
f0117dbc:	e8 6c 8e fe ff       	call   f0100c2d <cprintf>
f0117dc1:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0117dc4:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0117dca:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0117dcf:	b8 00 00 00 00       	mov    $0x0,%eax
f0117dd4:	89 d7                	mov    %edx,%edi
f0117dd6:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0117dd8:	83 ec 0c             	sub    $0xc,%esp
f0117ddb:	68 80 a7 13 f0       	push   $0xf013a780
f0117de0:	e8 48 8e fe ff       	call   f0100c2d <cprintf>
f0117de5:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0117de8:	e8 c5 42 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0117ded:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0117df0:	e8 97 be fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117df5:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0117df8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117dff:	eb 1f                	jmp    f0117e20 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0117e01:	83 ec 0c             	sub    $0xc,%esp
f0117e04:	68 00 00 20 00       	push   $0x200000
f0117e09:	e8 14 f6 fe ff       	call   f0107422 <kmalloc>
f0117e0e:	83 c4 10             	add    $0x10,%esp
f0117e11:	89 c2                	mov    %eax,%edx
f0117e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117e16:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0117e1d:	ff 45 f4             	incl   -0xc(%ebp)
f0117e20:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0117e24:	7e db                	jle    f0117e01 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0117e26:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0117e2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0117e30:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0117e38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117e3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e40:	f7 75 e8             	divl   -0x18(%ebp)
f0117e43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117e46:	29 d0                	sub    %edx,%eax
f0117e48:	89 c1                	mov    %eax,%ecx
f0117e4a:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0117e51:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117e56:	0f b6 d0             	movzbl %al,%edx
f0117e59:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117e5c:	01 d0                	add    %edx,%eax
f0117e5e:	48                   	dec    %eax
f0117e5f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0117e62:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117e65:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e6a:	f7 75 e0             	divl   -0x20(%ebp)
f0117e6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117e70:	29 d0                	sub    %edx,%eax
f0117e72:	01 c1                	add    %eax,%ecx
f0117e74:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0117e7b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117e80:	0f b6 c0             	movzbl %al,%eax
f0117e83:	c1 e0 04             	shl    $0x4,%eax
f0117e86:	89 c2                	mov    %eax,%edx
f0117e88:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117e8b:	01 d0                	add    %edx,%eax
f0117e8d:	48                   	dec    %eax
f0117e8e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0117e91:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117e94:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e99:	f7 75 d8             	divl   -0x28(%ebp)
f0117e9c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117e9f:	29 d0                	sub    %edx,%eax
f0117ea1:	01 c8                	add    %ecx,%eax
f0117ea3:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0117ea8:	29 c2                	sub    %eax,%edx
f0117eaa:	89 d0                	mov    %edx,%eax
f0117eac:	83 ec 0c             	sub    $0xc,%esp
f0117eaf:	50                   	push   %eax
f0117eb0:	e8 6d f5 fe ff       	call   f0107422 <kmalloc>
f0117eb5:	83 c4 10             	add    $0x10,%esp
f0117eb8:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117ebe:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0117ec4:	89 c1                	mov    %eax,%ecx
f0117ec6:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0117ecd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117ed0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117ed5:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0117ed8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117edb:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ee0:	f7 75 d0             	divl   -0x30(%ebp)
f0117ee3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117ee6:	29 d0                	sub    %edx,%eax
f0117ee8:	89 c3                	mov    %eax,%ebx
f0117eea:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0117ef1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117ef6:	0f b6 d0             	movzbl %al,%edx
f0117ef9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117efc:	01 d0                	add    %edx,%eax
f0117efe:	48                   	dec    %eax
f0117eff:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0117f02:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117f05:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f0a:	f7 75 c8             	divl   -0x38(%ebp)
f0117f0d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117f10:	29 d0                	sub    %edx,%eax
f0117f12:	01 c3                	add    %eax,%ebx
f0117f14:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0117f1b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117f20:	0f b6 c0             	movzbl %al,%eax
f0117f23:	c1 e0 04             	shl    $0x4,%eax
f0117f26:	89 c2                	mov    %eax,%edx
f0117f28:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117f2b:	01 d0                	add    %edx,%eax
f0117f2d:	48                   	dec    %eax
f0117f2e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0117f31:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117f34:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f39:	f7 75 c0             	divl   -0x40(%ebp)
f0117f3c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117f3f:	29 d0                	sub    %edx,%eax
f0117f41:	01 d8                	add    %ebx,%eax
f0117f43:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117f48:	39 c1                	cmp    %eax,%ecx
f0117f4a:	0f 85 ed 04 00 00    	jne    f011843d <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0117f50:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0117f56:	89 c1                	mov    %eax,%ecx
f0117f58:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117f5f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117f62:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f67:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117f6a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117f6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f72:	f7 75 b8             	divl   -0x48(%ebp)
f0117f75:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117f78:	29 d0                	sub    %edx,%eax
f0117f7a:	89 c3                	mov    %eax,%ebx
f0117f7c:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117f83:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117f88:	0f b6 d0             	movzbl %al,%edx
f0117f8b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117f8e:	01 d0                	add    %edx,%eax
f0117f90:	48                   	dec    %eax
f0117f91:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117f94:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117f97:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f9c:	f7 75 b0             	divl   -0x50(%ebp)
f0117f9f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117fa2:	29 d0                	sub    %edx,%eax
f0117fa4:	01 c3                	add    %eax,%ebx
f0117fa6:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117fad:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117fb2:	0f b6 c0             	movzbl %al,%eax
f0117fb5:	c1 e0 04             	shl    $0x4,%eax
f0117fb8:	89 c2                	mov    %eax,%edx
f0117fba:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117fbd:	01 d0                	add    %edx,%eax
f0117fbf:	48                   	dec    %eax
f0117fc0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117fc3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117fc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fcb:	f7 75 a8             	divl   -0x58(%ebp)
f0117fce:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117fd1:	29 d0                	sub    %edx,%eax
f0117fd3:	01 d8                	add    %ebx,%eax
f0117fd5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117fda:	39 c1                	cmp    %eax,%ecx
f0117fdc:	0f 85 5b 04 00 00    	jne    f011843d <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0117fe2:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0117fe8:	89 c1                	mov    %eax,%ecx
f0117fea:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117ff1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117ff4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117ff9:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117ffc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117fff:	ba 00 00 00 00       	mov    $0x0,%edx
f0118004:	f7 75 a0             	divl   -0x60(%ebp)
f0118007:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011800a:	29 d0                	sub    %edx,%eax
f011800c:	89 c3                	mov    %eax,%ebx
f011800e:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118015:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011801a:	0f b6 d0             	movzbl %al,%edx
f011801d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118020:	01 d0                	add    %edx,%eax
f0118022:	48                   	dec    %eax
f0118023:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118026:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118029:	ba 00 00 00 00       	mov    $0x0,%edx
f011802e:	f7 75 98             	divl   -0x68(%ebp)
f0118031:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118034:	29 d0                	sub    %edx,%eax
f0118036:	01 c3                	add    %eax,%ebx
f0118038:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011803f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118044:	0f b6 c0             	movzbl %al,%eax
f0118047:	c1 e0 04             	shl    $0x4,%eax
f011804a:	89 c2                	mov    %eax,%edx
f011804c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011804f:	01 d0                	add    %edx,%eax
f0118051:	48                   	dec    %eax
f0118052:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118055:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118058:	ba 00 00 00 00       	mov    $0x0,%edx
f011805d:	f7 75 90             	divl   -0x70(%ebp)
f0118060:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118063:	29 d0                	sub    %edx,%eax
f0118065:	01 d8                	add    %ebx,%eax
f0118067:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011806c:	39 c1                	cmp    %eax,%ecx
f011806e:	0f 85 c9 03 00 00    	jne    f011843d <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118074:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f011807a:	89 c1                	mov    %eax,%ecx
f011807c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118083:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118086:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011808b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011808e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118091:	ba 00 00 00 00       	mov    $0x0,%edx
f0118096:	f7 75 88             	divl   -0x78(%ebp)
f0118099:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011809c:	29 d0                	sub    %edx,%eax
f011809e:	89 c3                	mov    %eax,%ebx
f01180a0:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01180a7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01180ac:	0f b6 d0             	movzbl %al,%edx
f01180af:	8b 45 80             	mov    -0x80(%ebp),%eax
f01180b2:	01 d0                	add    %edx,%eax
f01180b4:	48                   	dec    %eax
f01180b5:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01180bb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01180c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01180c6:	f7 75 80             	divl   -0x80(%ebp)
f01180c9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01180cf:	29 d0                	sub    %edx,%eax
f01180d1:	01 c3                	add    %eax,%ebx
f01180d3:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01180da:	10 00 00 
f01180dd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01180e2:	0f b6 c0             	movzbl %al,%eax
f01180e5:	c1 e0 04             	shl    $0x4,%eax
f01180e8:	89 c2                	mov    %eax,%edx
f01180ea:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01180f0:	01 d0                	add    %edx,%eax
f01180f2:	48                   	dec    %eax
f01180f3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01180f9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01180ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0118104:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011810a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118110:	29 d0                	sub    %edx,%eax
f0118112:	01 d8                	add    %ebx,%eax
f0118114:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118119:	39 c1                	cmp    %eax,%ecx
f011811b:	0f 85 1c 03 00 00    	jne    f011843d <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118121:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118127:	89 c1                	mov    %eax,%ecx
f0118129:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118130:	10 00 00 
f0118133:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118139:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011813e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118144:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011814a:	ba 00 00 00 00       	mov    $0x0,%edx
f011814f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118155:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011815b:	29 d0                	sub    %edx,%eax
f011815d:	89 c3                	mov    %eax,%ebx
f011815f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118166:	10 00 00 
f0118169:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011816e:	0f b6 d0             	movzbl %al,%edx
f0118171:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118177:	01 d0                	add    %edx,%eax
f0118179:	48                   	dec    %eax
f011817a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118180:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118186:	ba 00 00 00 00       	mov    $0x0,%edx
f011818b:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118191:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118197:	29 d0                	sub    %edx,%eax
f0118199:	01 c3                	add    %eax,%ebx
f011819b:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01181a2:	10 00 00 
f01181a5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01181aa:	0f b6 c0             	movzbl %al,%eax
f01181ad:	c1 e0 04             	shl    $0x4,%eax
f01181b0:	89 c2                	mov    %eax,%edx
f01181b2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01181b8:	01 d0                	add    %edx,%eax
f01181ba:	48                   	dec    %eax
f01181bb:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01181c1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01181c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01181cc:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01181d2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01181d8:	29 d0                	sub    %edx,%eax
f01181da:	01 d8                	add    %ebx,%eax
f01181dc:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01181e1:	39 c1                	cmp    %eax,%ecx
f01181e3:	0f 85 54 02 00 00    	jne    f011843d <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01181e9:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01181ef:	89 c1                	mov    %eax,%ecx
f01181f1:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01181f8:	10 00 00 
f01181fb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118201:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118206:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011820c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118212:	ba 00 00 00 00       	mov    $0x0,%edx
f0118217:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011821d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118223:	29 d0                	sub    %edx,%eax
f0118225:	89 c3                	mov    %eax,%ebx
f0118227:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011822e:	10 00 00 
f0118231:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118236:	0f b6 d0             	movzbl %al,%edx
f0118239:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011823f:	01 d0                	add    %edx,%eax
f0118241:	48                   	dec    %eax
f0118242:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118248:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011824e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118253:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118259:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011825f:	29 d0                	sub    %edx,%eax
f0118261:	01 c3                	add    %eax,%ebx
f0118263:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011826a:	10 00 00 
f011826d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118272:	0f b6 c0             	movzbl %al,%eax
f0118275:	c1 e0 04             	shl    $0x4,%eax
f0118278:	89 c2                	mov    %eax,%edx
f011827a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118280:	01 d0                	add    %edx,%eax
f0118282:	48                   	dec    %eax
f0118283:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118289:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011828f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118294:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011829a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01182a0:	29 d0                	sub    %edx,%eax
f01182a2:	01 d8                	add    %ebx,%eax
f01182a4:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01182a9:	39 c1                	cmp    %eax,%ecx
f01182ab:	0f 85 8c 01 00 00    	jne    f011843d <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01182b1:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01182b7:	89 c1                	mov    %eax,%ecx
f01182b9:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01182c0:	10 00 00 
f01182c3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01182c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01182ce:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01182d4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01182da:	ba 00 00 00 00       	mov    $0x0,%edx
f01182df:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01182e5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01182eb:	29 d0                	sub    %edx,%eax
f01182ed:	89 c3                	mov    %eax,%ebx
f01182ef:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01182f6:	10 00 00 
f01182f9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01182fe:	0f b6 d0             	movzbl %al,%edx
f0118301:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118307:	01 d0                	add    %edx,%eax
f0118309:	48                   	dec    %eax
f011830a:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118310:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118316:	ba 00 00 00 00       	mov    $0x0,%edx
f011831b:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118321:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118327:	29 d0                	sub    %edx,%eax
f0118329:	01 c3                	add    %eax,%ebx
f011832b:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118332:	10 00 00 
f0118335:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011833a:	0f b6 c0             	movzbl %al,%eax
f011833d:	c1 e0 04             	shl    $0x4,%eax
f0118340:	89 c2                	mov    %eax,%edx
f0118342:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118348:	01 d0                	add    %edx,%eax
f011834a:	48                   	dec    %eax
f011834b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118351:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118357:	ba 00 00 00 00       	mov    $0x0,%edx
f011835c:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118362:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118368:	29 d0                	sub    %edx,%eax
f011836a:	01 d8                	add    %ebx,%eax
f011836c:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118371:	39 c1                	cmp    %eax,%ecx
f0118373:	0f 85 c4 00 00 00    	jne    f011843d <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0118379:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011837f:	89 c1                	mov    %eax,%ecx
f0118381:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118388:	10 00 00 
f011838b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118391:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118396:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011839c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01183a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01183a7:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01183ad:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01183b3:	29 d0                	sub    %edx,%eax
f01183b5:	89 c3                	mov    %eax,%ebx
f01183b7:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01183be:	10 00 00 
f01183c1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01183c6:	0f b6 d0             	movzbl %al,%edx
f01183c9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01183cf:	01 d0                	add    %edx,%eax
f01183d1:	48                   	dec    %eax
f01183d2:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01183d8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01183de:	ba 00 00 00 00       	mov    $0x0,%edx
f01183e3:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01183e9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01183ef:	29 d0                	sub    %edx,%eax
f01183f1:	01 c3                	add    %eax,%ebx
f01183f3:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01183fa:	10 00 00 
f01183fd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118402:	0f b6 c0             	movzbl %al,%eax
f0118405:	c1 e0 04             	shl    $0x4,%eax
f0118408:	89 c2                	mov    %eax,%edx
f011840a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118410:	01 d0                	add    %edx,%eax
f0118412:	48                   	dec    %eax
f0118413:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118419:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011841f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118424:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011842a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118430:	29 d0                	sub    %edx,%eax
f0118432:	01 d8                	add    %ebx,%eax
f0118434:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118439:	39 c1                	cmp    %eax,%ecx
f011843b:	74 17                	je     f0118454 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f011843d:	83 ec 04             	sub    $0x4,%esp
f0118440:	68 d0 a7 13 f0       	push   $0xf013a7d0
f0118445:	68 03 01 00 00       	push   $0x103
f011844a:	68 56 a5 13 f0       	push   $0xf013a556
f011844f:	e8 52 7d fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118454:	e8 33 b8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118459:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011845c:	74 17                	je     f0118475 <test_kmalloc_nextfit+0x6ec>
f011845e:	83 ec 04             	sub    $0x4,%esp
f0118461:	68 70 a5 13 f0       	push   $0xf013a570
f0118466:	68 05 01 00 00       	push   $0x105
f011846b:	68 56 a5 13 f0       	push   $0xf013a556
f0118470:	e8 31 7d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118475:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118478:	e8 35 3c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011847d:	29 c3                	sub    %eax,%ebx
f011847f:	89 d9                	mov    %ebx,%ecx
f0118481:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118488:	10 00 00 
f011848b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118491:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118496:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011849c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01184a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01184a7:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01184ad:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01184b3:	29 d0                	sub    %edx,%eax
f01184b5:	89 c3                	mov    %eax,%ebx
f01184b7:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01184be:	10 00 00 
f01184c1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01184c6:	0f b6 d0             	movzbl %al,%edx
f01184c9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01184cf:	01 d0                	add    %edx,%eax
f01184d1:	48                   	dec    %eax
f01184d2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01184d8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01184de:	ba 00 00 00 00       	mov    $0x0,%edx
f01184e3:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01184e9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01184ef:	29 d0                	sub    %edx,%eax
f01184f1:	01 c3                	add    %eax,%ebx
f01184f3:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01184fa:	10 00 00 
f01184fd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118502:	0f b6 c0             	movzbl %al,%eax
f0118505:	c1 e0 04             	shl    $0x4,%eax
f0118508:	89 c2                	mov    %eax,%edx
f011850a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118510:	01 d0                	add    %edx,%eax
f0118512:	48                   	dec    %eax
f0118513:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118519:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011851f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118524:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011852a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118530:	29 d0                	sub    %edx,%eax
f0118532:	01 d8                	add    %ebx,%eax
f0118534:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0118539:	29 c2                	sub    %eax,%edx
f011853b:	89 d0                	mov    %edx,%eax
f011853d:	c1 e8 0c             	shr    $0xc,%eax
f0118540:	39 c1                	cmp    %eax,%ecx
f0118542:	74 17                	je     f011855b <test_kmalloc_nextfit+0x7d2>
f0118544:	83 ec 04             	sub    $0x4,%esp
f0118547:	68 13 a8 13 f0       	push   $0xf013a813
f011854c:	68 06 01 00 00       	push   $0x106
f0118551:	68 56 a5 13 f0       	push   $0xf013a556
f0118556:	e8 4b 7c fe ff       	call   f01001a6 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f011855b:	e8 2c b7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118560:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118563:	e8 4a 3b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118568:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f011856b:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118571:	83 ec 0c             	sub    $0xc,%esp
f0118574:	50                   	push   %eax
f0118575:	e8 c2 ee fe ff       	call   f010743c <kfree>
f011857a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f011857d:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118583:	83 ec 0c             	sub    $0xc,%esp
f0118586:	50                   	push   %eax
f0118587:	e8 b0 ee fe ff       	call   f010743c <kfree>
f011858c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011858f:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0118595:	83 ec 0c             	sub    $0xc,%esp
f0118598:	50                   	push   %eax
f0118599:	e8 9e ee fe ff       	call   f010743c <kfree>
f011859e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01185a1:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f01185a7:	83 ec 0c             	sub    $0xc,%esp
f01185aa:	50                   	push   %eax
f01185ab:	e8 8c ee fe ff       	call   f010743c <kfree>
f01185b0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f01185b3:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01185b9:	83 ec 0c             	sub    $0xc,%esp
f01185bc:	50                   	push   %eax
f01185bd:	e8 7a ee fe ff       	call   f010743c <kfree>
f01185c2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01185c5:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f01185cb:	83 ec 0c             	sub    $0xc,%esp
f01185ce:	50                   	push   %eax
f01185cf:	e8 68 ee fe ff       	call   f010743c <kfree>
f01185d4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01185d7:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f01185dd:	83 ec 0c             	sub    $0xc,%esp
f01185e0:	50                   	push   %eax
f01185e1:	e8 56 ee fe ff       	call   f010743c <kfree>
f01185e6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f01185e9:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01185ef:	83 ec 0c             	sub    $0xc,%esp
f01185f2:	50                   	push   %eax
f01185f3:	e8 44 ee fe ff       	call   f010743c <kfree>
f01185f8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f01185fb:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118601:	83 ec 0c             	sub    $0xc,%esp
f0118604:	50                   	push   %eax
f0118605:	e8 32 ee fe ff       	call   f010743c <kfree>
f011860a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f011860d:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118613:	83 ec 0c             	sub    $0xc,%esp
f0118616:	50                   	push   %eax
f0118617:	e8 20 ee fe ff       	call   f010743c <kfree>
f011861c:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011861f:	e8 68 b6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118624:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118627:	74 17                	je     f0118640 <test_kmalloc_nextfit+0x8b7>
f0118629:	83 ec 04             	sub    $0x4,%esp
f011862c:	68 70 a5 13 f0       	push   $0xf013a570
f0118631:	68 17 01 00 00       	push   $0x117
f0118636:	68 56 a5 13 f0       	push   $0xf013a556
f011863b:	e8 66 7b fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118640:	e8 6d 3a ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118645:	89 c2                	mov    %eax,%edx
f0118647:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011864a:	89 d1                	mov    %edx,%ecx
f011864c:	29 c1                	sub    %eax,%ecx
f011864e:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118655:	10 00 00 
f0118658:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011865e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118663:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118669:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011866f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118674:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011867a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118680:	29 d0                	sub    %edx,%eax
f0118682:	89 c3                	mov    %eax,%ebx
f0118684:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011868b:	10 00 00 
f011868e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118693:	0f b6 d0             	movzbl %al,%edx
f0118696:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011869c:	01 d0                	add    %edx,%eax
f011869e:	48                   	dec    %eax
f011869f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01186a5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01186ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01186b0:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01186b6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01186bc:	29 d0                	sub    %edx,%eax
f01186be:	01 c3                	add    %eax,%ebx
f01186c0:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01186c7:	10 00 00 
f01186ca:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01186cf:	0f b6 c0             	movzbl %al,%eax
f01186d2:	c1 e0 04             	shl    $0x4,%eax
f01186d5:	89 c2                	mov    %eax,%edx
f01186d7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01186dd:	01 d0                	add    %edx,%eax
f01186df:	48                   	dec    %eax
f01186e0:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01186e6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01186ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01186f1:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01186f7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01186fd:	29 d0                	sub    %edx,%eax
f01186ff:	01 d8                	add    %ebx,%eax
f0118701:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0118706:	29 c2                	sub    %eax,%edx
f0118708:	89 d0                	mov    %edx,%eax
f011870a:	c1 e8 0c             	shr    $0xc,%eax
f011870d:	39 c1                	cmp    %eax,%ecx
f011870f:	74 17                	je     f0118728 <test_kmalloc_nextfit+0x99f>
f0118711:	83 ec 04             	sub    $0x4,%esp
f0118714:	68 24 a8 13 f0       	push   $0xf013a824
f0118719:	68 18 01 00 00       	push   $0x118
f011871e:	68 56 a5 13 f0       	push   $0xf013a556
f0118723:	e8 7e 7a fe ff       	call   f01001a6 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0118728:	e8 5f b5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011872d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118730:	e8 7d 39 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118735:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0118738:	83 ec 0c             	sub    $0xc,%esp
f011873b:	68 00 fc 0f 00       	push   $0xffc00
f0118740:	e8 dd ec fe ff       	call   f0107422 <kmalloc>
f0118745:	83 c4 10             	add    $0x10,%esp
f0118748:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011874e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0118755:	10 00 00 
f0118758:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011875e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118763:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0118769:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011876f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118774:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011877a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118780:	29 d0                	sub    %edx,%eax
f0118782:	89 c1                	mov    %eax,%ecx
f0118784:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011878b:	10 00 00 
f011878e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118793:	0f b6 d0             	movzbl %al,%edx
f0118796:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011879c:	01 d0                	add    %edx,%eax
f011879e:	48                   	dec    %eax
f011879f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01187a5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01187ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01187b0:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01187b6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01187bc:	29 d0                	sub    %edx,%eax
f01187be:	01 c1                	add    %eax,%ecx
f01187c0:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01187c7:	10 00 00 
f01187ca:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01187cf:	0f b6 c0             	movzbl %al,%eax
f01187d2:	c1 e0 04             	shl    $0x4,%eax
f01187d5:	89 c2                	mov    %eax,%edx
f01187d7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01187dd:	01 d0                	add    %edx,%eax
f01187df:	48                   	dec    %eax
f01187e0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01187e6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01187ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01187f1:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01187f7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01187fd:	29 d0                	sub    %edx,%eax
f01187ff:	01 c8                	add    %ecx,%eax
f0118801:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0118807:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011880d:	39 c2                	cmp    %eax,%edx
f011880f:	74 17                	je     f0118828 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0118811:	83 ec 04             	sub    $0x4,%esp
f0118814:	68 64 a8 13 f0       	push   $0xf013a864
f0118819:	68 1f 01 00 00       	push   $0x11f
f011881e:	68 56 a5 13 f0       	push   $0xf013a556
f0118823:	e8 7e 79 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118828:	e8 5f b4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011882d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118830:	74 17                	je     f0118849 <test_kmalloc_nextfit+0xac0>
f0118832:	83 ec 04             	sub    $0x4,%esp
f0118835:	68 70 a5 13 f0       	push   $0xf013a570
f011883a:	68 20 01 00 00       	push   $0x120
f011883f:	68 56 a5 13 f0       	push   $0xf013a556
f0118844:	e8 5d 79 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118849:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011884c:	e8 61 38 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118851:	29 c3                	sub    %eax,%ebx
f0118853:	89 d8                	mov    %ebx,%eax
f0118855:	3d 00 01 00 00       	cmp    $0x100,%eax
f011885a:	74 17                	je     f0118873 <test_kmalloc_nextfit+0xaea>
f011885c:	83 ec 04             	sub    $0x4,%esp
f011885f:	68 13 a8 13 f0       	push   $0xf013a813
f0118864:	68 21 01 00 00       	push   $0x121
f0118869:	68 56 a5 13 f0       	push   $0xf013a556
f011886e:	e8 33 79 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118873:	e8 14 b4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118878:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011887b:	e8 32 38 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118880:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0118883:	83 ec 0c             	sub    $0xc,%esp
f0118886:	68 00 04 00 00       	push   $0x400
f011888b:	e8 92 eb fe ff       	call   f0107422 <kmalloc>
f0118890:	83 c4 10             	add    $0x10,%esp
f0118893:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0118899:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01188a0:	10 00 00 
f01188a3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01188a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01188ae:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01188b4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01188ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01188bf:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01188c5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01188cb:	29 d0                	sub    %edx,%eax
f01188cd:	89 c1                	mov    %eax,%ecx
f01188cf:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01188d6:	10 00 00 
f01188d9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01188de:	0f b6 d0             	movzbl %al,%edx
f01188e1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01188e7:	01 d0                	add    %edx,%eax
f01188e9:	48                   	dec    %eax
f01188ea:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01188f0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01188f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01188fb:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0118901:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118907:	29 d0                	sub    %edx,%eax
f0118909:	01 c1                	add    %eax,%ecx
f011890b:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0118912:	10 00 00 
f0118915:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011891a:	0f b6 c0             	movzbl %al,%eax
f011891d:	c1 e0 04             	shl    $0x4,%eax
f0118920:	89 c2                	mov    %eax,%edx
f0118922:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118928:	01 d0                	add    %edx,%eax
f011892a:	48                   	dec    %eax
f011892b:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0118931:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118937:	ba 00 00 00 00       	mov    $0x0,%edx
f011893c:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0118942:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118948:	29 d0                	sub    %edx,%eax
f011894a:	01 c8                	add    %ecx,%eax
f011894c:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0118952:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118958:	39 c2                	cmp    %eax,%edx
f011895a:	74 17                	je     f0118973 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f011895c:	83 ec 04             	sub    $0x4,%esp
f011895f:	68 64 a8 13 f0       	push   $0xf013a864
f0118964:	68 27 01 00 00       	push   $0x127
f0118969:	68 56 a5 13 f0       	push   $0xf013a556
f011896e:	e8 33 78 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118973:	e8 14 b3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118978:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011897b:	74 17                	je     f0118994 <test_kmalloc_nextfit+0xc0b>
f011897d:	83 ec 04             	sub    $0x4,%esp
f0118980:	68 70 a5 13 f0       	push   $0xf013a570
f0118985:	68 28 01 00 00       	push   $0x128
f011898a:	68 56 a5 13 f0       	push   $0xf013a556
f011898f:	e8 12 78 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118994:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118997:	e8 16 37 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011899c:	29 c3                	sub    %eax,%ebx
f011899e:	89 d8                	mov    %ebx,%eax
f01189a0:	83 f8 01             	cmp    $0x1,%eax
f01189a3:	74 17                	je     f01189bc <test_kmalloc_nextfit+0xc33>
f01189a5:	83 ec 04             	sub    $0x4,%esp
f01189a8:	68 13 a8 13 f0       	push   $0xf013a813
f01189ad:	68 29 01 00 00       	push   $0x129
f01189b2:	68 56 a5 13 f0       	push   $0xf013a556
f01189b7:	e8 ea 77 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01189bc:	e8 cb b2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01189c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01189c4:	e8 e9 36 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01189c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f01189cc:	83 ec 0c             	sub    $0xc,%esp
f01189cf:	68 00 00 50 00       	push   $0x500000
f01189d4:	e8 49 ea fe ff       	call   f0107422 <kmalloc>
f01189d9:	83 c4 10             	add    $0x10,%esp
f01189dc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f01189e2:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f01189e9:	10 00 00 
f01189ec:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01189f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01189f7:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f01189fd:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118a03:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a08:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0118a0e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118a14:	29 d0                	sub    %edx,%eax
f0118a16:	89 c1                	mov    %eax,%ecx
f0118a18:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0118a1f:	10 00 00 
f0118a22:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118a27:	0f b6 d0             	movzbl %al,%edx
f0118a2a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118a30:	01 d0                	add    %edx,%eax
f0118a32:	48                   	dec    %eax
f0118a33:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0118a39:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118a3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a44:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0118a4a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118a50:	29 d0                	sub    %edx,%eax
f0118a52:	01 c1                	add    %eax,%ecx
f0118a54:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0118a5b:	10 00 00 
f0118a5e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118a63:	0f b6 c0             	movzbl %al,%eax
f0118a66:	c1 e0 04             	shl    $0x4,%eax
f0118a69:	89 c2                	mov    %eax,%edx
f0118a6b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118a71:	01 d0                	add    %edx,%eax
f0118a73:	48                   	dec    %eax
f0118a74:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0118a7a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118a80:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a85:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0118a8b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118a91:	29 d0                	sub    %edx,%eax
f0118a93:	01 c8                	add    %ecx,%eax
f0118a95:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0118a9b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118aa1:	39 c2                	cmp    %eax,%edx
f0118aa3:	74 17                	je     f0118abc <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0118aa5:	83 ec 04             	sub    $0x4,%esp
f0118aa8:	68 64 a8 13 f0       	push   $0xf013a864
f0118aad:	68 2f 01 00 00       	push   $0x12f
f0118ab2:	68 56 a5 13 f0       	push   $0xf013a556
f0118ab7:	e8 ea 76 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118abc:	e8 cb b1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118ac1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118ac4:	74 17                	je     f0118add <test_kmalloc_nextfit+0xd54>
f0118ac6:	83 ec 04             	sub    $0x4,%esp
f0118ac9:	68 70 a5 13 f0       	push   $0xf013a570
f0118ace:	68 30 01 00 00       	push   $0x130
f0118ad3:	68 56 a5 13 f0       	push   $0xf013a556
f0118ad8:	e8 c9 76 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118add:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118ae0:	e8 cd 35 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118ae5:	29 c3                	sub    %eax,%ebx
f0118ae7:	89 d8                	mov    %ebx,%eax
f0118ae9:	3d 00 05 00 00       	cmp    $0x500,%eax
f0118aee:	74 17                	je     f0118b07 <test_kmalloc_nextfit+0xd7e>
f0118af0:	83 ec 04             	sub    $0x4,%esp
f0118af3:	68 13 a8 13 f0       	push   $0xf013a813
f0118af8:	68 31 01 00 00       	push   $0x131
f0118afd:	68 56 a5 13 f0       	push   $0xf013a556
f0118b02:	e8 9f 76 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118b07:	e8 80 b1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118b0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118b0f:	e8 9e 35 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118b14:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0118b17:	83 ec 0c             	sub    $0xc,%esp
f0118b1a:	68 00 00 10 00       	push   $0x100000
f0118b1f:	e8 fe e8 fe ff       	call   f0107422 <kmalloc>
f0118b24:	83 c4 10             	add    $0x10,%esp
f0118b27:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0118b2d:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0118b34:	10 00 00 
f0118b37:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118b3d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118b42:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0118b48:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118b4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b53:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0118b59:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118b5f:	29 d0                	sub    %edx,%eax
f0118b61:	89 c1                	mov    %eax,%ecx
f0118b63:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0118b6a:	10 00 00 
f0118b6d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118b72:	0f b6 d0             	movzbl %al,%edx
f0118b75:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0118b7b:	01 d0                	add    %edx,%eax
f0118b7d:	48                   	dec    %eax
f0118b7e:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0118b84:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118b8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b8f:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0118b95:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118b9b:	29 d0                	sub    %edx,%eax
f0118b9d:	01 c1                	add    %eax,%ecx
f0118b9f:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0118ba6:	10 00 00 
f0118ba9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118bae:	0f b6 c0             	movzbl %al,%eax
f0118bb1:	c1 e0 04             	shl    $0x4,%eax
f0118bb4:	89 c2                	mov    %eax,%edx
f0118bb6:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118bbc:	01 d0                	add    %edx,%eax
f0118bbe:	48                   	dec    %eax
f0118bbf:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0118bc5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118bcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bd0:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0118bd6:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118bdc:	29 d0                	sub    %edx,%eax
f0118bde:	01 c8                	add    %ecx,%eax
f0118be0:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0118be6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118bec:	39 c2                	cmp    %eax,%edx
f0118bee:	74 17                	je     f0118c07 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0118bf0:	83 ec 04             	sub    $0x4,%esp
f0118bf3:	68 64 a8 13 f0       	push   $0xf013a864
f0118bf8:	68 37 01 00 00       	push   $0x137
f0118bfd:	68 56 a5 13 f0       	push   $0xf013a556
f0118c02:	e8 9f 75 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c07:	e8 80 b0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118c0c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118c0f:	74 17                	je     f0118c28 <test_kmalloc_nextfit+0xe9f>
f0118c11:	83 ec 04             	sub    $0x4,%esp
f0118c14:	68 70 a5 13 f0       	push   $0xf013a570
f0118c19:	68 38 01 00 00       	push   $0x138
f0118c1e:	68 56 a5 13 f0       	push   $0xf013a556
f0118c23:	e8 7e 75 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118c28:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118c2b:	e8 82 34 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118c30:	29 c3                	sub    %eax,%ebx
f0118c32:	89 d8                	mov    %ebx,%eax
f0118c34:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118c39:	74 17                	je     f0118c52 <test_kmalloc_nextfit+0xec9>
f0118c3b:	83 ec 04             	sub    $0x4,%esp
f0118c3e:	68 13 a8 13 f0       	push   $0xf013a813
f0118c43:	68 39 01 00 00       	push   $0x139
f0118c48:	68 56 a5 13 f0       	push   $0xf013a556
f0118c4d:	e8 54 75 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118c52:	e8 35 b0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118c57:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118c5a:	e8 53 34 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118c5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0118c62:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118c68:	83 ec 0c             	sub    $0xc,%esp
f0118c6b:	50                   	push   %eax
f0118c6c:	e8 cb e7 fe ff       	call   f010743c <kfree>
f0118c71:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c74:	e8 13 b0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118c79:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118c7c:	74 17                	je     f0118c95 <test_kmalloc_nextfit+0xf0c>
f0118c7e:	83 ec 04             	sub    $0x4,%esp
f0118c81:	68 70 a5 13 f0       	push   $0xf013a570
f0118c86:	68 3e 01 00 00       	push   $0x13e
f0118c8b:	68 56 a5 13 f0       	push   $0xf013a556
f0118c90:	e8 11 75 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118c95:	e8 18 34 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118c9a:	89 c2                	mov    %eax,%edx
f0118c9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118c9f:	29 c2                	sub    %eax,%edx
f0118ca1:	89 d0                	mov    %edx,%eax
f0118ca3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118ca8:	74 17                	je     f0118cc1 <test_kmalloc_nextfit+0xf38>
f0118caa:	83 ec 04             	sub    $0x4,%esp
f0118cad:	68 24 a8 13 f0       	push   $0xf013a824
f0118cb2:	68 3f 01 00 00       	push   $0x13f
f0118cb7:	68 56 a5 13 f0       	push   $0xf013a556
f0118cbc:	e8 e5 74 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118cc1:	e8 c6 af fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118cc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118cc9:	e8 e4 33 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118cce:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0118cd1:	83 ec 0c             	sub    $0xc,%esp
f0118cd4:	68 00 04 00 00       	push   $0x400
f0118cd9:	e8 44 e7 fe ff       	call   f0107422 <kmalloc>
f0118cde:	83 c4 10             	add    $0x10,%esp
f0118ce1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0118ce7:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0118cee:	10 00 00 
f0118cf1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0118cf7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118cfc:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0118d02:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0118d08:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d0d:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0118d13:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0118d19:	29 d0                	sub    %edx,%eax
f0118d1b:	89 c1                	mov    %eax,%ecx
f0118d1d:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0118d24:	10 00 00 
f0118d27:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118d2c:	0f b6 d0             	movzbl %al,%edx
f0118d2f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0118d35:	01 d0                	add    %edx,%eax
f0118d37:	48                   	dec    %eax
f0118d38:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0118d3e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0118d44:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d49:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0118d4f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0118d55:	29 d0                	sub    %edx,%eax
f0118d57:	01 c1                	add    %eax,%ecx
f0118d59:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0118d60:	10 00 00 
f0118d63:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118d68:	0f b6 c0             	movzbl %al,%eax
f0118d6b:	c1 e0 04             	shl    $0x4,%eax
f0118d6e:	89 c2                	mov    %eax,%edx
f0118d70:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0118d76:	01 d0                	add    %edx,%eax
f0118d78:	48                   	dec    %eax
f0118d79:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0118d7f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0118d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d8a:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0118d90:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0118d96:	29 d0                	sub    %edx,%eax
f0118d98:	01 c8                	add    %ecx,%eax
f0118d9a:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0118da0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118da6:	39 c2                	cmp    %eax,%edx
f0118da8:	74 17                	je     f0118dc1 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0118daa:	83 ec 04             	sub    $0x4,%esp
f0118dad:	68 64 a8 13 f0       	push   $0xf013a864
f0118db2:	68 45 01 00 00       	push   $0x145
f0118db7:	68 56 a5 13 f0       	push   $0xf013a556
f0118dbc:	e8 e5 73 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118dc1:	e8 c6 ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118dc6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118dc9:	74 17                	je     f0118de2 <test_kmalloc_nextfit+0x1059>
f0118dcb:	83 ec 04             	sub    $0x4,%esp
f0118dce:	68 70 a5 13 f0       	push   $0xf013a570
f0118dd3:	68 46 01 00 00       	push   $0x146
f0118dd8:	68 56 a5 13 f0       	push   $0xf013a556
f0118ddd:	e8 c4 73 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118de2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118de5:	e8 c8 32 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118dea:	29 c3                	sub    %eax,%ebx
f0118dec:	89 d8                	mov    %ebx,%eax
f0118dee:	83 f8 01             	cmp    $0x1,%eax
f0118df1:	74 17                	je     f0118e0a <test_kmalloc_nextfit+0x1081>
f0118df3:	83 ec 04             	sub    $0x4,%esp
f0118df6:	68 13 a8 13 f0       	push   $0xf013a813
f0118dfb:	68 47 01 00 00       	push   $0x147
f0118e00:	68 56 a5 13 f0       	push   $0xf013a556
f0118e05:	e8 9c 73 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118e0a:	e8 7d ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118e0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118e12:	e8 9b 32 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118e17:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0118e1a:	83 ec 0c             	sub    $0xc,%esp
f0118e1d:	68 00 e0 1f 00       	push   $0x1fe000
f0118e22:	e8 fb e5 fe ff       	call   f0107422 <kmalloc>
f0118e27:	83 c4 10             	add    $0x10,%esp
f0118e2a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0118e30:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0118e37:	10 00 00 
f0118e3a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0118e40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e45:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0118e4b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118e51:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e56:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0118e5c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118e62:	29 d0                	sub    %edx,%eax
f0118e64:	89 c1                	mov    %eax,%ecx
f0118e66:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0118e6d:	10 00 00 
f0118e70:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118e75:	0f b6 d0             	movzbl %al,%edx
f0118e78:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118e7e:	01 d0                	add    %edx,%eax
f0118e80:	48                   	dec    %eax
f0118e81:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0118e87:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118e8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e92:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0118e98:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118e9e:	29 d0                	sub    %edx,%eax
f0118ea0:	01 c1                	add    %eax,%ecx
f0118ea2:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0118ea9:	10 00 00 
f0118eac:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118eb1:	0f b6 c0             	movzbl %al,%eax
f0118eb4:	c1 e0 04             	shl    $0x4,%eax
f0118eb7:	89 c2                	mov    %eax,%edx
f0118eb9:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118ebf:	01 d0                	add    %edx,%eax
f0118ec1:	48                   	dec    %eax
f0118ec2:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0118ec8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118ece:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ed3:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0118ed9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118edf:	29 d0                	sub    %edx,%eax
f0118ee1:	01 c8                	add    %ecx,%eax
f0118ee3:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0118ee9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118eef:	39 c2                	cmp    %eax,%edx
f0118ef1:	74 17                	je     f0118f0a <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0118ef3:	83 ec 04             	sub    $0x4,%esp
f0118ef6:	68 64 a8 13 f0       	push   $0xf013a864
f0118efb:	68 4d 01 00 00       	push   $0x14d
f0118f00:	68 56 a5 13 f0       	push   $0xf013a556
f0118f05:	e8 9c 72 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f0a:	e8 7d ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118f0f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118f12:	74 17                	je     f0118f2b <test_kmalloc_nextfit+0x11a2>
f0118f14:	83 ec 04             	sub    $0x4,%esp
f0118f17:	68 70 a5 13 f0       	push   $0xf013a570
f0118f1c:	68 4e 01 00 00       	push   $0x14e
f0118f21:	68 56 a5 13 f0       	push   $0xf013a556
f0118f26:	e8 7b 72 fe ff       	call   f01001a6 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0118f2b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118f2e:	e8 7f 31 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118f33:	29 c3                	sub    %eax,%ebx
f0118f35:	89 d8                	mov    %ebx,%eax
f0118f37:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0118f3c:	74 17                	je     f0118f55 <test_kmalloc_nextfit+0x11cc>
f0118f3e:	83 ec 04             	sub    $0x4,%esp
f0118f41:	68 13 a8 13 f0       	push   $0xf013a813
f0118f46:	68 50 01 00 00       	push   $0x150
f0118f4b:	68 56 a5 13 f0       	push   $0xf013a556
f0118f50:	e8 51 72 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118f55:	e8 32 ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118f5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118f5d:	e8 50 31 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0118f62:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0118f65:	83 ec 0c             	sub    $0xc,%esp
f0118f68:	68 00 00 08 00       	push   $0x80000
f0118f6d:	e8 b0 e4 fe ff       	call   f0107422 <kmalloc>
f0118f72:	83 c4 10             	add    $0x10,%esp
f0118f75:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0118f7b:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0118f82:	10 00 00 
f0118f85:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0118f8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f90:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0118f96:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118f9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fa1:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0118fa7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118fad:	29 d0                	sub    %edx,%eax
f0118faf:	89 c1                	mov    %eax,%ecx
f0118fb1:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0118fb8:	10 00 00 
f0118fbb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118fc0:	0f b6 d0             	movzbl %al,%edx
f0118fc3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118fc9:	01 d0                	add    %edx,%eax
f0118fcb:	48                   	dec    %eax
f0118fcc:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0118fd2:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118fd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fdd:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0118fe3:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118fe9:	29 d0                	sub    %edx,%eax
f0118feb:	01 c1                	add    %eax,%ecx
f0118fed:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0118ff4:	10 00 00 
f0118ff7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118ffc:	0f b6 c0             	movzbl %al,%eax
f0118fff:	c1 e0 04             	shl    $0x4,%eax
f0119002:	89 c2                	mov    %eax,%edx
f0119004:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011900a:	01 d0                	add    %edx,%eax
f011900c:	48                   	dec    %eax
f011900d:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119013:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119019:	ba 00 00 00 00       	mov    $0x0,%edx
f011901e:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119024:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011902a:	29 d0                	sub    %edx,%eax
f011902c:	01 c8                	add    %ecx,%eax
f011902e:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119034:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011903a:	39 c2                	cmp    %eax,%edx
f011903c:	74 17                	je     f0119055 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011903e:	83 ec 04             	sub    $0x4,%esp
f0119041:	68 64 a8 13 f0       	push   $0xf013a864
f0119046:	68 56 01 00 00       	push   $0x156
f011904b:	68 56 a5 13 f0       	push   $0xf013a556
f0119050:	e8 51 71 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119055:	e8 32 ac fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011905a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011905d:	74 17                	je     f0119076 <test_kmalloc_nextfit+0x12ed>
f011905f:	83 ec 04             	sub    $0x4,%esp
f0119062:	68 70 a5 13 f0       	push   $0xf013a570
f0119067:	68 57 01 00 00       	push   $0x157
f011906c:	68 56 a5 13 f0       	push   $0xf013a556
f0119071:	e8 30 71 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119076:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119079:	e8 34 30 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011907e:	29 c3                	sub    %eax,%ebx
f0119080:	89 d8                	mov    %ebx,%eax
f0119082:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119087:	74 17                	je     f01190a0 <test_kmalloc_nextfit+0x1317>
f0119089:	83 ec 04             	sub    $0x4,%esp
f011908c:	68 13 a8 13 f0       	push   $0xf013a813
f0119091:	68 58 01 00 00       	push   $0x158
f0119096:	68 56 a5 13 f0       	push   $0xf013a556
f011909b:	e8 06 71 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f01190a0:	83 ec 0c             	sub    $0xc,%esp
f01190a3:	68 84 a8 13 f0       	push   $0xf013a884
f01190a8:	e8 80 7b fe ff       	call   f0100c2d <cprintf>
f01190ad:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f01190b0:	e8 d7 ab fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01190b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01190b8:	e8 f5 2f ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01190bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f01190c0:	83 ec 0c             	sub    $0xc,%esp
f01190c3:	68 00 00 38 00       	push   $0x380000
f01190c8:	e8 55 e3 fe ff       	call   f0107422 <kmalloc>
f01190cd:	83 c4 10             	add    $0x10,%esp
f01190d0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f01190d6:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f01190dd:	10 00 00 
f01190e0:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01190e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01190eb:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f01190f1:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01190f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01190fc:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119102:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119108:	29 d0                	sub    %edx,%eax
f011910a:	89 c1                	mov    %eax,%ecx
f011910c:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0119113:	10 00 00 
f0119116:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011911b:	0f b6 d0             	movzbl %al,%edx
f011911e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0119124:	01 d0                	add    %edx,%eax
f0119126:	48                   	dec    %eax
f0119127:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011912d:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119133:	ba 00 00 00 00       	mov    $0x0,%edx
f0119138:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011913e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119144:	29 d0                	sub    %edx,%eax
f0119146:	01 c1                	add    %eax,%ecx
f0119148:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011914f:	10 00 00 
f0119152:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119157:	0f b6 c0             	movzbl %al,%eax
f011915a:	c1 e0 04             	shl    $0x4,%eax
f011915d:	89 c2                	mov    %eax,%edx
f011915f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0119165:	01 d0                	add    %edx,%eax
f0119167:	48                   	dec    %eax
f0119168:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011916e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119174:	ba 00 00 00 00       	mov    $0x0,%edx
f0119179:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011917f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119185:	29 d0                	sub    %edx,%eax
f0119187:	01 c8                	add    %ecx,%eax
f0119189:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011918f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119195:	39 c2                	cmp    %eax,%edx
f0119197:	74 17                	je     f01191b0 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f0119199:	83 ec 04             	sub    $0x4,%esp
f011919c:	68 64 a8 13 f0       	push   $0xf013a864
f01191a1:	68 62 01 00 00       	push   $0x162
f01191a6:	68 56 a5 13 f0       	push   $0xf013a556
f01191ab:	e8 f6 6f fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01191b0:	e8 d7 aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01191b5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01191b8:	74 17                	je     f01191d1 <test_kmalloc_nextfit+0x1448>
f01191ba:	83 ec 04             	sub    $0x4,%esp
f01191bd:	68 70 a5 13 f0       	push   $0xf013a570
f01191c2:	68 63 01 00 00       	push   $0x163
f01191c7:	68 56 a5 13 f0       	push   $0xf013a556
f01191cc:	e8 d5 6f fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01191d1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01191d4:	e8 d9 2e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01191d9:	29 c3                	sub    %eax,%ebx
f01191db:	89 d8                	mov    %ebx,%eax
f01191dd:	3d 80 03 00 00       	cmp    $0x380,%eax
f01191e2:	74 17                	je     f01191fb <test_kmalloc_nextfit+0x1472>
f01191e4:	83 ec 04             	sub    $0x4,%esp
f01191e7:	68 13 a8 13 f0       	push   $0xf013a813
f01191ec:	68 64 01 00 00       	push   $0x164
f01191f1:	68 56 a5 13 f0       	push   $0xf013a556
f01191f6:	e8 ab 6f fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01191fb:	e8 8c aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119200:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119203:	e8 aa 2e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119208:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011920b:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0119211:	83 ec 0c             	sub    $0xc,%esp
f0119214:	50                   	push   %eax
f0119215:	e8 22 e2 fe ff       	call   f010743c <kfree>
f011921a:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011921d:	e8 6a aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119222:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119225:	74 17                	je     f011923e <test_kmalloc_nextfit+0x14b5>
f0119227:	83 ec 04             	sub    $0x4,%esp
f011922a:	68 70 a5 13 f0       	push   $0xf013a570
f011922f:	68 69 01 00 00       	push   $0x169
f0119234:	68 56 a5 13 f0       	push   $0xf013a556
f0119239:	e8 68 6f fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011923e:	e8 6f 2e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119243:	89 c2                	mov    %eax,%edx
f0119245:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119248:	29 c2                	sub    %eax,%edx
f011924a:	89 d0                	mov    %edx,%eax
f011924c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119251:	74 17                	je     f011926a <test_kmalloc_nextfit+0x14e1>
f0119253:	83 ec 04             	sub    $0x4,%esp
f0119256:	68 24 a8 13 f0       	push   $0xf013a824
f011925b:	68 6a 01 00 00       	push   $0x16a
f0119260:	68 56 a5 13 f0       	push   $0xf013a556
f0119265:	e8 3c 6f fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011926a:	e8 1d aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011926f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119272:	e8 3b 2e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119277:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011927a:	83 ec 0c             	sub    $0xc,%esp
f011927d:	68 00 fc 3f 00       	push   $0x3ffc00
f0119282:	e8 9b e1 fe ff       	call   f0107422 <kmalloc>
f0119287:	83 c4 10             	add    $0x10,%esp
f011928a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f0119290:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f0119297:	10 00 00 
f011929a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01192a0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01192a5:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f01192ab:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01192b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01192b6:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f01192bc:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01192c2:	29 d0                	sub    %edx,%eax
f01192c4:	89 c1                	mov    %eax,%ecx
f01192c6:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f01192cd:	10 00 00 
f01192d0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01192d5:	0f b6 d0             	movzbl %al,%edx
f01192d8:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01192de:	01 d0                	add    %edx,%eax
f01192e0:	48                   	dec    %eax
f01192e1:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f01192e7:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f01192ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01192f2:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f01192f8:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f01192fe:	29 d0                	sub    %edx,%eax
f0119300:	01 c1                	add    %eax,%ecx
f0119302:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0119309:	10 00 00 
f011930c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119311:	0f b6 c0             	movzbl %al,%eax
f0119314:	c1 e0 04             	shl    $0x4,%eax
f0119317:	89 c2                	mov    %eax,%edx
f0119319:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011931f:	01 d0                	add    %edx,%eax
f0119321:	48                   	dec    %eax
f0119322:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0119328:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011932e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119333:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0119339:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011933f:	29 d0                	sub    %edx,%eax
f0119341:	01 c8                	add    %ecx,%eax
f0119343:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119349:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011934f:	39 c2                	cmp    %eax,%edx
f0119351:	74 17                	je     f011936a <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0119353:	83 ec 04             	sub    $0x4,%esp
f0119356:	68 64 a8 13 f0       	push   $0xf013a864
f011935b:	68 70 01 00 00       	push   $0x170
f0119360:	68 56 a5 13 f0       	push   $0xf013a556
f0119365:	e8 3c 6e fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011936a:	e8 1d a9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011936f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119372:	74 17                	je     f011938b <test_kmalloc_nextfit+0x1602>
f0119374:	83 ec 04             	sub    $0x4,%esp
f0119377:	68 70 a5 13 f0       	push   $0xf013a570
f011937c:	68 71 01 00 00       	push   $0x171
f0119381:	68 56 a5 13 f0       	push   $0xf013a556
f0119386:	e8 1b 6e fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011938b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011938e:	e8 1f 2d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119393:	29 c3                	sub    %eax,%ebx
f0119395:	89 d8                	mov    %ebx,%eax
f0119397:	3d 00 04 00 00       	cmp    $0x400,%eax
f011939c:	74 17                	je     f01193b5 <test_kmalloc_nextfit+0x162c>
f011939e:	83 ec 04             	sub    $0x4,%esp
f01193a1:	68 13 a8 13 f0       	push   $0xf013a813
f01193a6:	68 72 01 00 00       	push   $0x172
f01193ab:	68 56 a5 13 f0       	push   $0xf013a556
f01193b0:	e8 f1 6d fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f01193b5:	83 ec 0c             	sub    $0xc,%esp
f01193b8:	68 c0 a8 13 f0       	push   $0xf013a8c0
f01193bd:	e8 6b 78 fe ff       	call   f0100c2d <cprintf>
f01193c2:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f01193c5:	e8 c2 a8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01193ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01193cd:	e8 e0 2c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01193d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f01193d5:	83 ec 0c             	sub    $0xc,%esp
f01193d8:	68 00 00 60 00       	push   $0x600000
f01193dd:	e8 40 e0 fe ff       	call   f0107422 <kmalloc>
f01193e2:	83 c4 10             	add    $0x10,%esp
f01193e5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f01193eb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01193f1:	85 c0                	test   %eax,%eax
f01193f3:	74 17                	je     f011940c <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f01193f5:	83 ec 04             	sub    $0x4,%esp
f01193f8:	68 64 a8 13 f0       	push   $0xf013a864
f01193fd:	68 7c 01 00 00       	push   $0x17c
f0119402:	68 56 a5 13 f0       	push   $0xf013a556
f0119407:	e8 9a 6d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011940c:	e8 7b a8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119411:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119414:	74 17                	je     f011942d <test_kmalloc_nextfit+0x16a4>
f0119416:	83 ec 04             	sub    $0x4,%esp
f0119419:	68 70 a5 13 f0       	push   $0xf013a570
f011941e:	68 7d 01 00 00       	push   $0x17d
f0119423:	68 56 a5 13 f0       	push   $0xf013a556
f0119428:	e8 79 6d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011942d:	e8 80 2c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119432:	89 c2                	mov    %eax,%edx
f0119434:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119437:	39 c2                	cmp    %eax,%edx
f0119439:	74 17                	je     f0119452 <test_kmalloc_nextfit+0x16c9>
f011943b:	83 ec 04             	sub    $0x4,%esp
f011943e:	68 13 a8 13 f0       	push   $0xf013a813
f0119443:	68 7e 01 00 00       	push   $0x17e
f0119448:	68 56 a5 13 f0       	push   $0xf013a556
f011944d:	e8 54 6d fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119452:	83 ec 0c             	sub    $0xc,%esp
f0119455:	68 f8 a8 13 f0       	push   $0xf013a8f8
f011945a:	e8 ce 77 fe ff       	call   f0100c2d <cprintf>
f011945f:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0119462:	83 ec 0c             	sub    $0xc,%esp
f0119465:	68 34 a9 13 f0       	push   $0xf013a934
f011946a:	e8 be 77 fe ff       	call   f0100c2d <cprintf>
f011946f:	83 c4 10             	add    $0x10,%esp
	return 1;
f0119472:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119477:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011947a:	5b                   	pop    %ebx
f011947b:	5f                   	pop    %edi
f011947c:	5d                   	pop    %ebp
f011947d:	c3                   	ret    

f011947e <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011947e:	55                   	push   %ebp
f011947f:	89 e5                	mov    %esp,%ebp
f0119481:	57                   	push   %edi
f0119482:	53                   	push   %ebx
f0119483:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f0119489:	83 ec 0c             	sub    $0xc,%esp
f011948c:	68 98 a4 13 f0       	push   $0xf013a498
f0119491:	e8 97 77 fe ff       	call   f0100c2d <cprintf>
f0119496:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119499:	83 ec 0c             	sub    $0xc,%esp
f011949c:	68 c8 a4 13 f0       	push   $0xf013a4c8
f01194a1:	e8 87 77 fe ff       	call   f0100c2d <cprintf>
f01194a6:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01194a9:	83 ec 0c             	sub    $0xc,%esp
f01194ac:	68 98 a4 13 f0       	push   $0xf013a498
f01194b1:	e8 77 77 fe ff       	call   f0100c2d <cprintf>
f01194b6:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f01194b9:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01194bf:	b9 14 00 00 00       	mov    $0x14,%ecx
f01194c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01194c9:	89 d7                	mov    %edx,%edi
f01194cb:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01194cd:	e8 e0 2b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01194d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01194d5:	e8 b2 a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01194da:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f01194dd:	83 ec 0c             	sub    $0xc,%esp
f01194e0:	68 00 fc 2f 00       	push   $0x2ffc00
f01194e5:	e8 38 df fe ff       	call   f0107422 <kmalloc>
f01194ea:	83 c4 10             	add    $0x10,%esp
f01194ed:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01194f3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01194f9:	89 c1                	mov    %eax,%ecx
f01194fb:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119502:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119505:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011950a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011950d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119510:	ba 00 00 00 00       	mov    $0x0,%edx
f0119515:	f7 75 ec             	divl   -0x14(%ebp)
f0119518:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011951b:	29 d0                	sub    %edx,%eax
f011951d:	89 c3                	mov    %eax,%ebx
f011951f:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0119526:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011952b:	0f b6 d0             	movzbl %al,%edx
f011952e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119531:	01 d0                	add    %edx,%eax
f0119533:	48                   	dec    %eax
f0119534:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119537:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011953a:	ba 00 00 00 00       	mov    $0x0,%edx
f011953f:	f7 75 e4             	divl   -0x1c(%ebp)
f0119542:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119545:	29 d0                	sub    %edx,%eax
f0119547:	01 c3                	add    %eax,%ebx
f0119549:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0119550:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119555:	0f b6 c0             	movzbl %al,%eax
f0119558:	c1 e0 04             	shl    $0x4,%eax
f011955b:	89 c2                	mov    %eax,%edx
f011955d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119560:	01 d0                	add    %edx,%eax
f0119562:	48                   	dec    %eax
f0119563:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0119566:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119569:	ba 00 00 00 00       	mov    $0x0,%edx
f011956e:	f7 75 dc             	divl   -0x24(%ebp)
f0119571:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119574:	29 d0                	sub    %edx,%eax
f0119576:	01 d8                	add    %ebx,%eax
f0119578:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011957d:	39 c1                	cmp    %eax,%ecx
f011957f:	74 17                	je     f0119598 <test_kmalloc_bestfit1+0x11a>
f0119581:	83 ec 04             	sub    $0x4,%esp
f0119584:	68 70 a9 13 f0       	push   $0xf013a970
f0119589:	68 98 01 00 00       	push   $0x198
f011958e:	68 56 a5 13 f0       	push   $0xf013a556
f0119593:	e8 0e 6c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119598:	e8 ef a6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011959d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01195a0:	74 17                	je     f01195b9 <test_kmalloc_bestfit1+0x13b>
f01195a2:	83 ec 04             	sub    $0x4,%esp
f01195a5:	68 70 a5 13 f0       	push   $0xf013a570
f01195aa:	68 99 01 00 00       	push   $0x199
f01195af:	68 56 a5 13 f0       	push   $0xf013a556
f01195b4:	e8 ed 6b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01195b9:	e8 f4 2a ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01195be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01195c1:	29 c2                	sub    %eax,%edx
f01195c3:	89 d0                	mov    %edx,%eax
f01195c5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01195ca:	74 17                	je     f01195e3 <test_kmalloc_bestfit1+0x165>
f01195cc:	83 ec 04             	sub    $0x4,%esp
f01195cf:	68 a0 a9 13 f0       	push   $0xf013a9a0
f01195d4:	68 9a 01 00 00       	push   $0x19a
f01195d9:	68 56 a5 13 f0       	push   $0xf013a556
f01195de:	e8 c3 6b fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01195e3:	e8 ca 2a ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01195e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01195eb:	e8 9c a6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01195f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f01195f3:	83 ec 0c             	sub    $0xc,%esp
f01195f6:	68 00 fc 2f 00       	push   $0x2ffc00
f01195fb:	e8 22 de fe ff       	call   f0107422 <kmalloc>
f0119600:	83 c4 10             	add    $0x10,%esp
f0119603:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119609:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011960f:	89 c1                	mov    %eax,%ecx
f0119611:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119618:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011961b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119620:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119623:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119626:	ba 00 00 00 00       	mov    $0x0,%edx
f011962b:	f7 75 d4             	divl   -0x2c(%ebp)
f011962e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119631:	29 d0                	sub    %edx,%eax
f0119633:	89 c3                	mov    %eax,%ebx
f0119635:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011963c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119641:	0f b6 d0             	movzbl %al,%edx
f0119644:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119647:	01 d0                	add    %edx,%eax
f0119649:	48                   	dec    %eax
f011964a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011964d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119650:	ba 00 00 00 00       	mov    $0x0,%edx
f0119655:	f7 75 cc             	divl   -0x34(%ebp)
f0119658:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011965b:	29 d0                	sub    %edx,%eax
f011965d:	01 c3                	add    %eax,%ebx
f011965f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0119666:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011966b:	0f b6 c0             	movzbl %al,%eax
f011966e:	c1 e0 04             	shl    $0x4,%eax
f0119671:	89 c2                	mov    %eax,%edx
f0119673:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119676:	01 d0                	add    %edx,%eax
f0119678:	48                   	dec    %eax
f0119679:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011967c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011967f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119684:	f7 75 c4             	divl   -0x3c(%ebp)
f0119687:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011968a:	29 d0                	sub    %edx,%eax
f011968c:	01 d8                	add    %ebx,%eax
f011968e:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0119693:	39 c1                	cmp    %eax,%ecx
f0119695:	74 17                	je     f01196ae <test_kmalloc_bestfit1+0x230>
f0119697:	83 ec 04             	sub    $0x4,%esp
f011969a:	68 70 a9 13 f0       	push   $0xf013a970
f011969f:	68 a0 01 00 00       	push   $0x1a0
f01196a4:	68 56 a5 13 f0       	push   $0xf013a556
f01196a9:	e8 f8 6a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01196ae:	e8 d9 a5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01196b3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01196b6:	74 17                	je     f01196cf <test_kmalloc_bestfit1+0x251>
f01196b8:	83 ec 04             	sub    $0x4,%esp
f01196bb:	68 70 a5 13 f0       	push   $0xf013a570
f01196c0:	68 a1 01 00 00       	push   $0x1a1
f01196c5:	68 56 a5 13 f0       	push   $0xf013a556
f01196ca:	e8 d7 6a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01196cf:	e8 de 29 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01196d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01196d7:	29 c2                	sub    %eax,%edx
f01196d9:	89 d0                	mov    %edx,%eax
f01196db:	3d 00 03 00 00       	cmp    $0x300,%eax
f01196e0:	74 17                	je     f01196f9 <test_kmalloc_bestfit1+0x27b>
f01196e2:	83 ec 04             	sub    $0x4,%esp
f01196e5:	68 a0 a9 13 f0       	push   $0xf013a9a0
f01196ea:	68 a2 01 00 00       	push   $0x1a2
f01196ef:	68 56 a5 13 f0       	push   $0xf013a556
f01196f4:	e8 ad 6a fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01196f9:	e8 b4 29 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01196fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119701:	e8 86 a5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119706:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119709:	83 ec 0c             	sub    $0xc,%esp
f011970c:	68 00 fc 1f 00       	push   $0x1ffc00
f0119711:	e8 0c dd fe ff       	call   f0107422 <kmalloc>
f0119716:	83 c4 10             	add    $0x10,%esp
f0119719:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011971f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119725:	89 c1                	mov    %eax,%ecx
f0119727:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011972e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119731:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119736:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0119739:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011973c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119741:	f7 75 bc             	divl   -0x44(%ebp)
f0119744:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119747:	29 d0                	sub    %edx,%eax
f0119749:	89 c3                	mov    %eax,%ebx
f011974b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119752:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119757:	0f b6 d0             	movzbl %al,%edx
f011975a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011975d:	01 d0                	add    %edx,%eax
f011975f:	48                   	dec    %eax
f0119760:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119763:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119766:	ba 00 00 00 00       	mov    $0x0,%edx
f011976b:	f7 75 b4             	divl   -0x4c(%ebp)
f011976e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119771:	29 d0                	sub    %edx,%eax
f0119773:	01 c3                	add    %eax,%ebx
f0119775:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011977c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119781:	0f b6 c0             	movzbl %al,%eax
f0119784:	c1 e0 04             	shl    $0x4,%eax
f0119787:	89 c2                	mov    %eax,%edx
f0119789:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011978c:	01 d0                	add    %edx,%eax
f011978e:	48                   	dec    %eax
f011978f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0119792:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119795:	ba 00 00 00 00       	mov    $0x0,%edx
f011979a:	f7 75 ac             	divl   -0x54(%ebp)
f011979d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01197a0:	29 d0                	sub    %edx,%eax
f01197a2:	01 d8                	add    %ebx,%eax
f01197a4:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f01197a9:	39 c1                	cmp    %eax,%ecx
f01197ab:	74 17                	je     f01197c4 <test_kmalloc_bestfit1+0x346>
f01197ad:	83 ec 04             	sub    $0x4,%esp
f01197b0:	68 70 a9 13 f0       	push   $0xf013a970
f01197b5:	68 a8 01 00 00       	push   $0x1a8
f01197ba:	68 56 a5 13 f0       	push   $0xf013a556
f01197bf:	e8 e2 69 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197c4:	e8 c3 a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01197c9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01197cc:	74 17                	je     f01197e5 <test_kmalloc_bestfit1+0x367>
f01197ce:	83 ec 04             	sub    $0x4,%esp
f01197d1:	68 70 a5 13 f0       	push   $0xf013a570
f01197d6:	68 a9 01 00 00       	push   $0x1a9
f01197db:	68 56 a5 13 f0       	push   $0xf013a556
f01197e0:	e8 c1 69 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01197e5:	e8 c8 28 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f01197ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01197ed:	29 c2                	sub    %eax,%edx
f01197ef:	89 d0                	mov    %edx,%eax
f01197f1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01197f6:	74 17                	je     f011980f <test_kmalloc_bestfit1+0x391>
f01197f8:	83 ec 04             	sub    $0x4,%esp
f01197fb:	68 a0 a9 13 f0       	push   $0xf013a9a0
f0119800:	68 aa 01 00 00       	push   $0x1aa
f0119805:	68 56 a5 13 f0       	push   $0xf013a556
f011980a:	e8 97 69 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011980f:	e8 9e 28 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119814:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119817:	e8 70 a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011981c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011981f:	83 ec 0c             	sub    $0xc,%esp
f0119822:	68 00 fc 1f 00       	push   $0x1ffc00
f0119827:	e8 f6 db fe ff       	call   f0107422 <kmalloc>
f011982c:	83 c4 10             	add    $0x10,%esp
f011982f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119835:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011983b:	89 c1                	mov    %eax,%ecx
f011983d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0119844:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119847:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011984c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011984f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119852:	ba 00 00 00 00       	mov    $0x0,%edx
f0119857:	f7 75 a4             	divl   -0x5c(%ebp)
f011985a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011985d:	29 d0                	sub    %edx,%eax
f011985f:	89 c3                	mov    %eax,%ebx
f0119861:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0119868:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011986d:	0f b6 d0             	movzbl %al,%edx
f0119870:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119873:	01 d0                	add    %edx,%eax
f0119875:	48                   	dec    %eax
f0119876:	89 45 98             	mov    %eax,-0x68(%ebp)
f0119879:	8b 45 98             	mov    -0x68(%ebp),%eax
f011987c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119881:	f7 75 9c             	divl   -0x64(%ebp)
f0119884:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119887:	29 d0                	sub    %edx,%eax
f0119889:	01 c3                	add    %eax,%ebx
f011988b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0119892:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119897:	0f b6 c0             	movzbl %al,%eax
f011989a:	c1 e0 04             	shl    $0x4,%eax
f011989d:	89 c2                	mov    %eax,%edx
f011989f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01198a2:	01 d0                	add    %edx,%eax
f01198a4:	48                   	dec    %eax
f01198a5:	89 45 90             	mov    %eax,-0x70(%ebp)
f01198a8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01198ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01198b0:	f7 75 94             	divl   -0x6c(%ebp)
f01198b3:	8b 45 90             	mov    -0x70(%ebp),%eax
f01198b6:	29 d0                	sub    %edx,%eax
f01198b8:	01 d8                	add    %ebx,%eax
f01198ba:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f01198bf:	39 c1                	cmp    %eax,%ecx
f01198c1:	74 17                	je     f01198da <test_kmalloc_bestfit1+0x45c>
f01198c3:	83 ec 04             	sub    $0x4,%esp
f01198c6:	68 70 a9 13 f0       	push   $0xf013a970
f01198cb:	68 b0 01 00 00       	push   $0x1b0
f01198d0:	68 56 a5 13 f0       	push   $0xf013a556
f01198d5:	e8 cc 68 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198da:	e8 ad a3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01198df:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01198e2:	74 17                	je     f01198fb <test_kmalloc_bestfit1+0x47d>
f01198e4:	83 ec 04             	sub    $0x4,%esp
f01198e7:	68 70 a5 13 f0       	push   $0xf013a570
f01198ec:	68 b1 01 00 00       	push   $0x1b1
f01198f1:	68 56 a5 13 f0       	push   $0xf013a556
f01198f6:	e8 ab 68 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01198fb:	e8 b2 27 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119900:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119903:	29 c2                	sub    %eax,%edx
f0119905:	89 d0                	mov    %edx,%eax
f0119907:	3d 00 02 00 00       	cmp    $0x200,%eax
f011990c:	74 17                	je     f0119925 <test_kmalloc_bestfit1+0x4a7>
f011990e:	83 ec 04             	sub    $0x4,%esp
f0119911:	68 a0 a9 13 f0       	push   $0xf013a9a0
f0119916:	68 b2 01 00 00       	push   $0x1b2
f011991b:	68 56 a5 13 f0       	push   $0xf013a556
f0119920:	e8 81 68 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119925:	e8 88 27 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011992a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011992d:	e8 5a a3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119932:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f0119935:	83 ec 0c             	sub    $0xc,%esp
f0119938:	68 00 fc 0f 00       	push   $0xffc00
f011993d:	e8 e0 da fe ff       	call   f0107422 <kmalloc>
f0119942:	83 c4 10             	add    $0x10,%esp
f0119945:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011994b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119951:	89 c1                	mov    %eax,%ecx
f0119953:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011995a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011995d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119962:	89 45 88             	mov    %eax,-0x78(%ebp)
f0119965:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119968:	ba 00 00 00 00       	mov    $0x0,%edx
f011996d:	f7 75 8c             	divl   -0x74(%ebp)
f0119970:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119973:	29 d0                	sub    %edx,%eax
f0119975:	89 c3                	mov    %eax,%ebx
f0119977:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011997e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119983:	0f b6 d0             	movzbl %al,%edx
f0119986:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119989:	01 d0                	add    %edx,%eax
f011998b:	48                   	dec    %eax
f011998c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011998f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119992:	ba 00 00 00 00       	mov    $0x0,%edx
f0119997:	f7 75 84             	divl   -0x7c(%ebp)
f011999a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011999d:	29 d0                	sub    %edx,%eax
f011999f:	01 c3                	add    %eax,%ebx
f01199a1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01199a8:	10 00 00 
f01199ab:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01199b0:	0f b6 c0             	movzbl %al,%eax
f01199b3:	c1 e0 04             	shl    $0x4,%eax
f01199b6:	89 c2                	mov    %eax,%edx
f01199b8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01199be:	01 d0                	add    %edx,%eax
f01199c0:	48                   	dec    %eax
f01199c1:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01199c7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01199cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01199d2:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01199d8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01199de:	29 d0                	sub    %edx,%eax
f01199e0:	01 d8                	add    %ebx,%eax
f01199e2:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f01199e7:	39 c1                	cmp    %eax,%ecx
f01199e9:	74 17                	je     f0119a02 <test_kmalloc_bestfit1+0x584>
f01199eb:	83 ec 04             	sub    $0x4,%esp
f01199ee:	68 70 a9 13 f0       	push   $0xf013a970
f01199f3:	68 b8 01 00 00       	push   $0x1b8
f01199f8:	68 56 a5 13 f0       	push   $0xf013a556
f01199fd:	e8 a4 67 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a02:	e8 85 a2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119a07:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119a0a:	74 17                	je     f0119a23 <test_kmalloc_bestfit1+0x5a5>
f0119a0c:	83 ec 04             	sub    $0x4,%esp
f0119a0f:	68 70 a5 13 f0       	push   $0xf013a570
f0119a14:	68 b9 01 00 00       	push   $0x1b9
f0119a19:	68 56 a5 13 f0       	push   $0xf013a556
f0119a1e:	e8 83 67 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119a23:	e8 8a 26 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119a28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119a2b:	29 c2                	sub    %eax,%edx
f0119a2d:	89 d0                	mov    %edx,%eax
f0119a2f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119a34:	74 17                	je     f0119a4d <test_kmalloc_bestfit1+0x5cf>
f0119a36:	83 ec 04             	sub    $0x4,%esp
f0119a39:	68 a0 a9 13 f0       	push   $0xf013a9a0
f0119a3e:	68 ba 01 00 00       	push   $0x1ba
f0119a43:	68 56 a5 13 f0       	push   $0xf013a556
f0119a48:	e8 59 67 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119a4d:	e8 60 26 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119a52:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119a55:	e8 32 a2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119a5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f0119a5d:	83 ec 0c             	sub    $0xc,%esp
f0119a60:	68 00 fc 0f 00       	push   $0xffc00
f0119a65:	e8 b8 d9 fe ff       	call   f0107422 <kmalloc>
f0119a6a:	83 c4 10             	add    $0x10,%esp
f0119a6d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0119a73:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119a79:	89 c1                	mov    %eax,%ecx
f0119a7b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0119a82:	10 00 00 
f0119a85:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119a8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119a90:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0119a96:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119a9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aa1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0119aa7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119aad:	29 d0                	sub    %edx,%eax
f0119aaf:	89 c3                	mov    %eax,%ebx
f0119ab1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0119ab8:	10 00 00 
f0119abb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119ac0:	0f b6 d0             	movzbl %al,%edx
f0119ac3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119ac9:	01 d0                	add    %edx,%eax
f0119acb:	48                   	dec    %eax
f0119acc:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0119ad2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119ad8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119add:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0119ae3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119ae9:	29 d0                	sub    %edx,%eax
f0119aeb:	01 c3                	add    %eax,%ebx
f0119aed:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0119af4:	10 00 00 
f0119af7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119afc:	0f b6 c0             	movzbl %al,%eax
f0119aff:	c1 e0 04             	shl    $0x4,%eax
f0119b02:	89 c2                	mov    %eax,%edx
f0119b04:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119b0a:	01 d0                	add    %edx,%eax
f0119b0c:	48                   	dec    %eax
f0119b0d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0119b13:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119b19:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b1e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0119b24:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119b2a:	29 d0                	sub    %edx,%eax
f0119b2c:	01 d8                	add    %ebx,%eax
f0119b2e:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0119b33:	39 c1                	cmp    %eax,%ecx
f0119b35:	74 17                	je     f0119b4e <test_kmalloc_bestfit1+0x6d0>
f0119b37:	83 ec 04             	sub    $0x4,%esp
f0119b3a:	68 70 a9 13 f0       	push   $0xf013a970
f0119b3f:	68 c0 01 00 00       	push   $0x1c0
f0119b44:	68 56 a5 13 f0       	push   $0xf013a556
f0119b49:	e8 58 66 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b4e:	e8 39 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119b53:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119b56:	74 17                	je     f0119b6f <test_kmalloc_bestfit1+0x6f1>
f0119b58:	83 ec 04             	sub    $0x4,%esp
f0119b5b:	68 70 a5 13 f0       	push   $0xf013a570
f0119b60:	68 c1 01 00 00       	push   $0x1c1
f0119b65:	68 56 a5 13 f0       	push   $0xf013a556
f0119b6a:	e8 37 66 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119b6f:	e8 3e 25 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119b74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119b77:	29 c2                	sub    %eax,%edx
f0119b79:	89 d0                	mov    %edx,%eax
f0119b7b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119b80:	74 17                	je     f0119b99 <test_kmalloc_bestfit1+0x71b>
f0119b82:	83 ec 04             	sub    $0x4,%esp
f0119b85:	68 a0 a9 13 f0       	push   $0xf013a9a0
f0119b8a:	68 c2 01 00 00       	push   $0x1c2
f0119b8f:	68 56 a5 13 f0       	push   $0xf013a556
f0119b94:	e8 0d 66 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119b99:	e8 14 25 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119b9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ba1:	e8 e6 a0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119ba6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f0119ba9:	83 ec 0c             	sub    $0xc,%esp
f0119bac:	68 00 fc 0f 00       	push   $0xffc00
f0119bb1:	e8 6c d8 fe ff       	call   f0107422 <kmalloc>
f0119bb6:	83 c4 10             	add    $0x10,%esp
f0119bb9:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f0119bbf:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119bc5:	89 c1                	mov    %eax,%ecx
f0119bc7:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0119bce:	10 00 00 
f0119bd1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119bd7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119bdc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0119be2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119be8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bed:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0119bf3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119bf9:	29 d0                	sub    %edx,%eax
f0119bfb:	89 c3                	mov    %eax,%ebx
f0119bfd:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0119c04:	10 00 00 
f0119c07:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119c0c:	0f b6 d0             	movzbl %al,%edx
f0119c0f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119c15:	01 d0                	add    %edx,%eax
f0119c17:	48                   	dec    %eax
f0119c18:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0119c1e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c29:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0119c2f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119c35:	29 d0                	sub    %edx,%eax
f0119c37:	01 c3                	add    %eax,%ebx
f0119c39:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0119c40:	10 00 00 
f0119c43:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119c48:	0f b6 c0             	movzbl %al,%eax
f0119c4b:	c1 e0 04             	shl    $0x4,%eax
f0119c4e:	89 c2                	mov    %eax,%edx
f0119c50:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119c56:	01 d0                	add    %edx,%eax
f0119c58:	48                   	dec    %eax
f0119c59:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0119c5f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119c65:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c6a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0119c70:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119c76:	29 d0                	sub    %edx,%eax
f0119c78:	01 d8                	add    %ebx,%eax
f0119c7a:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f0119c7f:	39 c1                	cmp    %eax,%ecx
f0119c81:	74 17                	je     f0119c9a <test_kmalloc_bestfit1+0x81c>
f0119c83:	83 ec 04             	sub    $0x4,%esp
f0119c86:	68 70 a9 13 f0       	push   $0xf013a970
f0119c8b:	68 c8 01 00 00       	push   $0x1c8
f0119c90:	68 56 a5 13 f0       	push   $0xf013a556
f0119c95:	e8 0c 65 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c9a:	e8 ed 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119c9f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119ca2:	74 17                	je     f0119cbb <test_kmalloc_bestfit1+0x83d>
f0119ca4:	83 ec 04             	sub    $0x4,%esp
f0119ca7:	68 70 a5 13 f0       	push   $0xf013a570
f0119cac:	68 c9 01 00 00       	push   $0x1c9
f0119cb1:	68 56 a5 13 f0       	push   $0xf013a556
f0119cb6:	e8 eb 64 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119cbb:	e8 f2 23 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119cc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119cc3:	29 c2                	sub    %eax,%edx
f0119cc5:	89 d0                	mov    %edx,%eax
f0119cc7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119ccc:	74 17                	je     f0119ce5 <test_kmalloc_bestfit1+0x867>
f0119cce:	83 ec 04             	sub    $0x4,%esp
f0119cd1:	68 a0 a9 13 f0       	push   $0xf013a9a0
f0119cd6:	68 ca 01 00 00       	push   $0x1ca
f0119cdb:	68 56 a5 13 f0       	push   $0xf013a556
f0119ce0:	e8 c1 64 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119ce5:	e8 c8 23 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ced:	e8 9a 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119cf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f0119cf5:	83 ec 0c             	sub    $0xc,%esp
f0119cf8:	68 00 fc 0f 00       	push   $0xffc00
f0119cfd:	e8 20 d7 fe ff       	call   f0107422 <kmalloc>
f0119d02:	83 c4 10             	add    $0x10,%esp
f0119d05:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f0119d0b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119d11:	89 c1                	mov    %eax,%ecx
f0119d13:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0119d1a:	10 00 00 
f0119d1d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119d23:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d28:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0119d2e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119d34:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d39:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0119d3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119d45:	29 d0                	sub    %edx,%eax
f0119d47:	89 c3                	mov    %eax,%ebx
f0119d49:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0119d50:	10 00 00 
f0119d53:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119d58:	0f b6 d0             	movzbl %al,%edx
f0119d5b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119d61:	01 d0                	add    %edx,%eax
f0119d63:	48                   	dec    %eax
f0119d64:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0119d6a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119d70:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d75:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0119d7b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119d81:	29 d0                	sub    %edx,%eax
f0119d83:	01 c3                	add    %eax,%ebx
f0119d85:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119d8c:	10 00 00 
f0119d8f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119d94:	0f b6 c0             	movzbl %al,%eax
f0119d97:	c1 e0 04             	shl    $0x4,%eax
f0119d9a:	89 c2                	mov    %eax,%edx
f0119d9c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119da2:	01 d0                	add    %edx,%eax
f0119da4:	48                   	dec    %eax
f0119da5:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119dab:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119db1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119db6:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119dbc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119dc2:	29 d0                	sub    %edx,%eax
f0119dc4:	01 d8                	add    %ebx,%eax
f0119dc6:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0119dcb:	39 c1                	cmp    %eax,%ecx
f0119dcd:	74 17                	je     f0119de6 <test_kmalloc_bestfit1+0x968>
f0119dcf:	83 ec 04             	sub    $0x4,%esp
f0119dd2:	68 70 a9 13 f0       	push   $0xf013a970
f0119dd7:	68 d0 01 00 00       	push   $0x1d0
f0119ddc:	68 56 a5 13 f0       	push   $0xf013a556
f0119de1:	e8 c0 63 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119de6:	e8 a1 9e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119deb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119dee:	74 17                	je     f0119e07 <test_kmalloc_bestfit1+0x989>
f0119df0:	83 ec 04             	sub    $0x4,%esp
f0119df3:	68 70 a5 13 f0       	push   $0xf013a570
f0119df8:	68 d1 01 00 00       	push   $0x1d1
f0119dfd:	68 56 a5 13 f0       	push   $0xf013a556
f0119e02:	e8 9f 63 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119e07:	e8 a6 22 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119e0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119e0f:	29 c2                	sub    %eax,%edx
f0119e11:	89 d0                	mov    %edx,%eax
f0119e13:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119e18:	74 17                	je     f0119e31 <test_kmalloc_bestfit1+0x9b3>
f0119e1a:	83 ec 04             	sub    $0x4,%esp
f0119e1d:	68 a0 a9 13 f0       	push   $0xf013a9a0
f0119e22:	68 d2 01 00 00       	push   $0x1d2
f0119e27:	68 56 a5 13 f0       	push   $0xf013a556
f0119e2c:	e8 75 63 fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119e31:	e8 7c 22 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119e36:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e39:	e8 4e 9e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119e3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f0119e41:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119e47:	83 ec 0c             	sub    $0xc,%esp
f0119e4a:	50                   	push   %eax
f0119e4b:	e8 ec d5 fe ff       	call   f010743c <kfree>
f0119e50:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e53:	e8 34 9e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119e58:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e5b:	74 17                	je     f0119e74 <test_kmalloc_bestfit1+0x9f6>
f0119e5d:	83 ec 04             	sub    $0x4,%esp
f0119e60:	68 70 a5 13 f0       	push   $0xf013a570
f0119e65:	68 db 01 00 00       	push   $0x1db
f0119e6a:	68 56 a5 13 f0       	push   $0xf013a556
f0119e6f:	e8 32 63 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0119e74:	e8 39 22 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119e79:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119e7c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119e81:	74 17                	je     f0119e9a <test_kmalloc_bestfit1+0xa1c>
f0119e83:	83 ec 04             	sub    $0x4,%esp
f0119e86:	68 b3 a9 13 f0       	push   $0xf013a9b3
f0119e8b:	68 dc 01 00 00       	push   $0x1dc
f0119e90:	68 56 a5 13 f0       	push   $0xf013a556
f0119e95:	e8 0c 63 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119e9a:	e8 13 22 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119e9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ea2:	e8 e5 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119ea7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f0119eaa:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119eb0:	83 ec 0c             	sub    $0xc,%esp
f0119eb3:	50                   	push   %eax
f0119eb4:	e8 83 d5 fe ff       	call   f010743c <kfree>
f0119eb9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ebc:	e8 cb 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119ec1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119ec4:	74 17                	je     f0119edd <test_kmalloc_bestfit1+0xa5f>
f0119ec6:	83 ec 04             	sub    $0x4,%esp
f0119ec9:	68 70 a5 13 f0       	push   $0xf013a570
f0119ece:	68 e2 01 00 00       	push   $0x1e2
f0119ed3:	68 56 a5 13 f0       	push   $0xf013a556
f0119ed8:	e8 c9 62 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0119edd:	e8 d0 21 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119ee2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119ee5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119eea:	74 17                	je     f0119f03 <test_kmalloc_bestfit1+0xa85>
f0119eec:	83 ec 04             	sub    $0x4,%esp
f0119eef:	68 b3 a9 13 f0       	push   $0xf013a9b3
f0119ef4:	68 e3 01 00 00       	push   $0x1e3
f0119ef9:	68 56 a5 13 f0       	push   $0xf013a556
f0119efe:	e8 a3 62 fe ff       	call   f01001a6 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119f03:	e8 aa 21 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119f08:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f0b:	e8 7c 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119f10:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f0119f13:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119f19:	83 ec 0c             	sub    $0xc,%esp
f0119f1c:	50                   	push   %eax
f0119f1d:	e8 1a d5 fe ff       	call   f010743c <kfree>
f0119f22:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f25:	e8 62 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119f2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119f2d:	74 17                	je     f0119f46 <test_kmalloc_bestfit1+0xac8>
f0119f2f:	83 ec 04             	sub    $0x4,%esp
f0119f32:	68 70 a5 13 f0       	push   $0xf013a570
f0119f37:	68 e9 01 00 00       	push   $0x1e9
f0119f3c:	68 56 a5 13 f0       	push   $0xf013a556
f0119f41:	e8 60 62 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0119f46:	e8 67 21 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119f4b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119f4e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119f53:	74 17                	je     f0119f6c <test_kmalloc_bestfit1+0xaee>
f0119f55:	83 ec 04             	sub    $0x4,%esp
f0119f58:	68 b3 a9 13 f0       	push   $0xf013a9b3
f0119f5d:	68 ea 01 00 00       	push   $0x1ea
f0119f62:	68 56 a5 13 f0       	push   $0xf013a556
f0119f67:	e8 3a 62 fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0119f6c:	e8 41 21 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f0119f71:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f74:	e8 13 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119f79:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f0119f7c:	83 ec 0c             	sub    $0xc,%esp
f0119f7f:	68 00 00 08 00       	push   $0x80000
f0119f84:	e8 99 d4 fe ff       	call   f0107422 <kmalloc>
f0119f89:	83 c4 10             	add    $0x10,%esp
f0119f8c:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0119f92:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119f98:	89 c1                	mov    %eax,%ecx
f0119f9a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119fa1:	10 00 00 
f0119fa4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119faa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119faf:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119fb5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119fbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fc0:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119fc6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119fcc:	29 d0                	sub    %edx,%eax
f0119fce:	89 c3                	mov    %eax,%ebx
f0119fd0:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119fd7:	10 00 00 
f0119fda:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119fdf:	0f b6 d0             	movzbl %al,%edx
f0119fe2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119fe8:	01 d0                	add    %edx,%eax
f0119fea:	48                   	dec    %eax
f0119feb:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119ff1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119ff7:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ffc:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a002:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a008:	29 d0                	sub    %edx,%eax
f011a00a:	01 c3                	add    %eax,%ebx
f011a00c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a013:	10 00 00 
f011a016:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a01b:	0f b6 c0             	movzbl %al,%eax
f011a01e:	c1 e0 04             	shl    $0x4,%eax
f011a021:	89 c2                	mov    %eax,%edx
f011a023:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a029:	01 d0                	add    %edx,%eax
f011a02b:	48                   	dec    %eax
f011a02c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a032:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a038:	ba 00 00 00 00       	mov    $0x0,%edx
f011a03d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a043:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a049:	29 d0                	sub    %edx,%eax
f011a04b:	01 d8                	add    %ebx,%eax
f011a04d:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a052:	39 c1                	cmp    %eax,%ecx
f011a054:	74 17                	je     f011a06d <test_kmalloc_bestfit1+0xbef>
f011a056:	83 ec 04             	sub    $0x4,%esp
f011a059:	68 70 a9 13 f0       	push   $0xf013a970
f011a05e:	68 f3 01 00 00       	push   $0x1f3
f011a063:	68 56 a5 13 f0       	push   $0xf013a556
f011a068:	e8 39 61 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a06d:	e8 1a 9c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a072:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a075:	74 17                	je     f011a08e <test_kmalloc_bestfit1+0xc10>
f011a077:	83 ec 04             	sub    $0x4,%esp
f011a07a:	68 70 a5 13 f0       	push   $0xf013a570
f011a07f:	68 f4 01 00 00       	push   $0x1f4
f011a084:	68 56 a5 13 f0       	push   $0xf013a556
f011a089:	e8 18 61 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011a08e:	e8 1f 20 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a093:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a096:	29 c2                	sub    %eax,%edx
f011a098:	89 d0                	mov    %edx,%eax
f011a09a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a09f:	74 17                	je     f011a0b8 <test_kmalloc_bestfit1+0xc3a>
f011a0a1:	83 ec 04             	sub    $0x4,%esp
f011a0a4:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011a0a9:	68 f5 01 00 00       	push   $0x1f5
f011a0ae:	68 56 a5 13 f0       	push   $0xf013a556
f011a0b3:	e8 ee 60 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011a0b8:	e8 f5 1f ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a0bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a0c0:	e8 c7 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a0c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011a0c8:	83 ec 0c             	sub    $0xc,%esp
f011a0cb:	68 00 fc 0f 00       	push   $0xffc00
f011a0d0:	e8 4d d3 fe ff       	call   f0107422 <kmalloc>
f011a0d5:	83 c4 10             	add    $0x10,%esp
f011a0d8:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a0de:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011a0e4:	89 c1                	mov    %eax,%ecx
f011a0e6:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a0ed:	10 00 00 
f011a0f0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a0f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0fb:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a101:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a107:	ba 00 00 00 00       	mov    $0x0,%edx
f011a10c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a112:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a118:	29 d0                	sub    %edx,%eax
f011a11a:	89 c3                	mov    %eax,%ebx
f011a11c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a123:	10 00 00 
f011a126:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a12b:	0f b6 d0             	movzbl %al,%edx
f011a12e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a134:	01 d0                	add    %edx,%eax
f011a136:	48                   	dec    %eax
f011a137:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a13d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a143:	ba 00 00 00 00       	mov    $0x0,%edx
f011a148:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a14e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a154:	29 d0                	sub    %edx,%eax
f011a156:	01 c3                	add    %eax,%ebx
f011a158:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a15f:	10 00 00 
f011a162:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a167:	0f b6 c0             	movzbl %al,%eax
f011a16a:	c1 e0 04             	shl    $0x4,%eax
f011a16d:	89 c2                	mov    %eax,%edx
f011a16f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a175:	01 d0                	add    %edx,%eax
f011a177:	48                   	dec    %eax
f011a178:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a17e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a184:	ba 00 00 00 00       	mov    $0x0,%edx
f011a189:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a18f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a195:	29 d0                	sub    %edx,%eax
f011a197:	01 d8                	add    %ebx,%eax
f011a199:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a19e:	39 c1                	cmp    %eax,%ecx
f011a1a0:	74 17                	je     f011a1b9 <test_kmalloc_bestfit1+0xd3b>
f011a1a2:	83 ec 04             	sub    $0x4,%esp
f011a1a5:	68 70 a9 13 f0       	push   $0xf013a970
f011a1aa:	68 fb 01 00 00       	push   $0x1fb
f011a1af:	68 56 a5 13 f0       	push   $0xf013a556
f011a1b4:	e8 ed 5f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1b9:	e8 ce 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a1be:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a1c1:	74 17                	je     f011a1da <test_kmalloc_bestfit1+0xd5c>
f011a1c3:	83 ec 04             	sub    $0x4,%esp
f011a1c6:	68 70 a5 13 f0       	push   $0xf013a570
f011a1cb:	68 fc 01 00 00       	push   $0x1fc
f011a1d0:	68 56 a5 13 f0       	push   $0xf013a556
f011a1d5:	e8 cc 5f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a1da:	e8 d3 1e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a1df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a1e2:	29 c2                	sub    %eax,%edx
f011a1e4:	89 d0                	mov    %edx,%eax
f011a1e6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a1eb:	74 17                	je     f011a204 <test_kmalloc_bestfit1+0xd86>
f011a1ed:	83 ec 04             	sub    $0x4,%esp
f011a1f0:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011a1f5:	68 fd 01 00 00       	push   $0x1fd
f011a1fa:	68 56 a5 13 f0       	push   $0xf013a556
f011a1ff:	e8 a2 5f fe ff       	call   f01001a6 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a204:	e8 a9 1e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a209:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a20c:	e8 7b 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a211:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011a214:	83 ec 0c             	sub    $0xc,%esp
f011a217:	68 00 fc 03 00       	push   $0x3fc00
f011a21c:	e8 01 d2 fe ff       	call   f0107422 <kmalloc>
f011a221:	83 c4 10             	add    $0x10,%esp
f011a224:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011a22a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011a230:	89 c1                	mov    %eax,%ecx
f011a232:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a239:	10 00 00 
f011a23c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a242:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a247:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a24d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a253:	ba 00 00 00 00       	mov    $0x0,%edx
f011a258:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a25e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a264:	29 d0                	sub    %edx,%eax
f011a266:	89 c3                	mov    %eax,%ebx
f011a268:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a26f:	10 00 00 
f011a272:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a277:	0f b6 d0             	movzbl %al,%edx
f011a27a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a280:	01 d0                	add    %edx,%eax
f011a282:	48                   	dec    %eax
f011a283:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a289:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a28f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a294:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a29a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a2a0:	29 d0                	sub    %edx,%eax
f011a2a2:	01 c3                	add    %eax,%ebx
f011a2a4:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a2ab:	10 00 00 
f011a2ae:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a2b3:	0f b6 c0             	movzbl %al,%eax
f011a2b6:	c1 e0 04             	shl    $0x4,%eax
f011a2b9:	89 c2                	mov    %eax,%edx
f011a2bb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a2c1:	01 d0                	add    %edx,%eax
f011a2c3:	48                   	dec    %eax
f011a2c4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a2ca:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a2d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2d5:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a2db:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a2e1:	29 d0                	sub    %edx,%eax
f011a2e3:	01 d8                	add    %ebx,%eax
f011a2e5:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011a2ea:	39 c1                	cmp    %eax,%ecx
f011a2ec:	74 17                	je     f011a305 <test_kmalloc_bestfit1+0xe87>
f011a2ee:	83 ec 04             	sub    $0x4,%esp
f011a2f1:	68 70 a9 13 f0       	push   $0xf013a970
f011a2f6:	68 03 02 00 00       	push   $0x203
f011a2fb:	68 56 a5 13 f0       	push   $0xf013a556
f011a300:	e8 a1 5e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a305:	e8 82 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a30a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a30d:	74 17                	je     f011a326 <test_kmalloc_bestfit1+0xea8>
f011a30f:	83 ec 04             	sub    $0x4,%esp
f011a312:	68 70 a5 13 f0       	push   $0xf013a570
f011a317:	68 04 02 00 00       	push   $0x204
f011a31c:	68 56 a5 13 f0       	push   $0xf013a556
f011a321:	e8 80 5e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011a326:	e8 87 1d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a32b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a32e:	29 c2                	sub    %eax,%edx
f011a330:	89 d0                	mov    %edx,%eax
f011a332:	83 f8 40             	cmp    $0x40,%eax
f011a335:	74 17                	je     f011a34e <test_kmalloc_bestfit1+0xed0>
f011a337:	83 ec 04             	sub    $0x4,%esp
f011a33a:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011a33f:	68 05 02 00 00       	push   $0x205
f011a344:	68 56 a5 13 f0       	push   $0xf013a556
f011a349:	e8 58 5e fe ff       	call   f01001a6 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011a34e:	e8 5f 1d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a353:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a356:	e8 31 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a35b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011a35e:	83 ec 0c             	sub    $0xc,%esp
f011a361:	68 00 fc 3f 00       	push   $0x3ffc00
f011a366:	e8 b7 d0 fe ff       	call   f0107422 <kmalloc>
f011a36b:	83 c4 10             	add    $0x10,%esp
f011a36e:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011a374:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011a37a:	89 c1                	mov    %eax,%ecx
f011a37c:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a383:	10 00 00 
f011a386:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a38c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a391:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a397:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a39d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3a2:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a3a8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a3ae:	29 d0                	sub    %edx,%eax
f011a3b0:	89 c3                	mov    %eax,%ebx
f011a3b2:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a3b9:	10 00 00 
f011a3bc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a3c1:	0f b6 d0             	movzbl %al,%edx
f011a3c4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a3ca:	01 d0                	add    %edx,%eax
f011a3cc:	48                   	dec    %eax
f011a3cd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a3d3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a3d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3de:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a3e4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a3ea:	29 d0                	sub    %edx,%eax
f011a3ec:	01 c3                	add    %eax,%ebx
f011a3ee:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a3f5:	10 00 00 
f011a3f8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a3fd:	0f b6 c0             	movzbl %al,%eax
f011a400:	c1 e0 04             	shl    $0x4,%eax
f011a403:	89 c2                	mov    %eax,%edx
f011a405:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a40b:	01 d0                	add    %edx,%eax
f011a40d:	48                   	dec    %eax
f011a40e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a414:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a41a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a41f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a425:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a42b:	29 d0                	sub    %edx,%eax
f011a42d:	01 d8                	add    %ebx,%eax
f011a42f:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011a434:	39 c1                	cmp    %eax,%ecx
f011a436:	74 17                	je     f011a44f <test_kmalloc_bestfit1+0xfd1>
f011a438:	83 ec 04             	sub    $0x4,%esp
f011a43b:	68 70 a9 13 f0       	push   $0xf013a970
f011a440:	68 0b 02 00 00       	push   $0x20b
f011a445:	68 56 a5 13 f0       	push   $0xf013a556
f011a44a:	e8 57 5d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a44f:	e8 38 98 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a454:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a457:	74 17                	je     f011a470 <test_kmalloc_bestfit1+0xff2>
f011a459:	83 ec 04             	sub    $0x4,%esp
f011a45c:	68 70 a5 13 f0       	push   $0xf013a570
f011a461:	68 0c 02 00 00       	push   $0x20c
f011a466:	68 56 a5 13 f0       	push   $0xf013a556
f011a46b:	e8 36 5d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011a470:	e8 3d 1c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a475:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a478:	29 c2                	sub    %eax,%edx
f011a47a:	89 d0                	mov    %edx,%eax
f011a47c:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a481:	74 17                	je     f011a49a <test_kmalloc_bestfit1+0x101c>
f011a483:	83 ec 04             	sub    $0x4,%esp
f011a486:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011a48b:	68 0d 02 00 00       	push   $0x20d
f011a490:	68 56 a5 13 f0       	push   $0xf013a556
f011a495:	e8 0c 5d fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011a49a:	e8 13 1c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a49f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4a2:	e8 e5 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a4a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011a4aa:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a4b0:	83 ec 0c             	sub    $0xc,%esp
f011a4b3:	50                   	push   %eax
f011a4b4:	e8 83 cf fe ff       	call   f010743c <kfree>
f011a4b9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4bc:	e8 cb 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a4c1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a4c4:	74 17                	je     f011a4dd <test_kmalloc_bestfit1+0x105f>
f011a4c6:	83 ec 04             	sub    $0x4,%esp
f011a4c9:	68 70 a5 13 f0       	push   $0xf013a570
f011a4ce:	68 16 02 00 00       	push   $0x216
f011a4d3:	68 56 a5 13 f0       	push   $0xf013a556
f011a4d8:	e8 c9 5c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a4dd:	e8 d0 1b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a4e2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a4e5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a4ea:	74 17                	je     f011a503 <test_kmalloc_bestfit1+0x1085>
f011a4ec:	83 ec 04             	sub    $0x4,%esp
f011a4ef:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011a4f4:	68 17 02 00 00       	push   $0x217
f011a4f9:	68 56 a5 13 f0       	push   $0xf013a556
f011a4fe:	e8 a3 5c fe ff       	call   f01001a6 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011a503:	e8 aa 1b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a508:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a50b:	e8 7c 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a510:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011a513:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a519:	83 ec 0c             	sub    $0xc,%esp
f011a51c:	50                   	push   %eax
f011a51d:	e8 1a cf fe ff       	call   f010743c <kfree>
f011a522:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a525:	e8 62 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a52a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a52d:	74 17                	je     f011a546 <test_kmalloc_bestfit1+0x10c8>
f011a52f:	83 ec 04             	sub    $0x4,%esp
f011a532:	68 70 a5 13 f0       	push   $0xf013a570
f011a537:	68 1d 02 00 00       	push   $0x21d
f011a53c:	68 56 a5 13 f0       	push   $0xf013a556
f011a541:	e8 60 5c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011a546:	e8 67 1b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a54b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a54e:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a553:	74 17                	je     f011a56c <test_kmalloc_bestfit1+0x10ee>
f011a555:	83 ec 04             	sub    $0x4,%esp
f011a558:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011a55d:	68 1e 02 00 00       	push   $0x21e
f011a562:	68 56 a5 13 f0       	push   $0xf013a556
f011a567:	e8 3a 5c fe ff       	call   f01001a6 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011a56c:	e8 41 1b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a571:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a574:	e8 13 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a579:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011a57c:	83 ec 0c             	sub    $0xc,%esp
f011a57f:	68 00 fc 1f 00       	push   $0x1ffc00
f011a584:	e8 99 ce fe ff       	call   f0107422 <kmalloc>
f011a589:	83 c4 10             	add    $0x10,%esp
f011a58c:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011a592:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011a598:	89 c1                	mov    %eax,%ecx
f011a59a:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a5a1:	10 00 00 
f011a5a4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a5aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a5af:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a5b5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a5bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5c0:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a5c6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a5cc:	29 d0                	sub    %edx,%eax
f011a5ce:	89 c3                	mov    %eax,%ebx
f011a5d0:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a5d7:	10 00 00 
f011a5da:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a5df:	0f b6 d0             	movzbl %al,%edx
f011a5e2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a5e8:	01 d0                	add    %edx,%eax
f011a5ea:	48                   	dec    %eax
f011a5eb:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a5f1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a5f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5fc:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a602:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a608:	29 d0                	sub    %edx,%eax
f011a60a:	01 c3                	add    %eax,%ebx
f011a60c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a613:	10 00 00 
f011a616:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a61b:	0f b6 c0             	movzbl %al,%eax
f011a61e:	c1 e0 04             	shl    $0x4,%eax
f011a621:	89 c2                	mov    %eax,%edx
f011a623:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a629:	01 d0                	add    %edx,%eax
f011a62b:	48                   	dec    %eax
f011a62c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a632:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a638:	ba 00 00 00 00       	mov    $0x0,%edx
f011a63d:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a643:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a649:	29 d0                	sub    %edx,%eax
f011a64b:	01 d8                	add    %ebx,%eax
f011a64d:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011a652:	39 c1                	cmp    %eax,%ecx
f011a654:	74 17                	je     f011a66d <test_kmalloc_bestfit1+0x11ef>
f011a656:	83 ec 04             	sub    $0x4,%esp
f011a659:	68 70 a9 13 f0       	push   $0xf013a970
f011a65e:	68 27 02 00 00       	push   $0x227
f011a663:	68 56 a5 13 f0       	push   $0xf013a556
f011a668:	e8 39 5b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a66d:	e8 1a 96 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a672:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a675:	74 17                	je     f011a68e <test_kmalloc_bestfit1+0x1210>
f011a677:	83 ec 04             	sub    $0x4,%esp
f011a67a:	68 70 a5 13 f0       	push   $0xf013a570
f011a67f:	68 28 02 00 00       	push   $0x228
f011a684:	68 56 a5 13 f0       	push   $0xf013a556
f011a689:	e8 18 5b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011a68e:	e8 1f 1a ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a693:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a696:	29 c2                	sub    %eax,%edx
f011a698:	89 d0                	mov    %edx,%eax
f011a69a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a69f:	74 17                	je     f011a6b8 <test_kmalloc_bestfit1+0x123a>
f011a6a1:	83 ec 04             	sub    $0x4,%esp
f011a6a4:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011a6a9:	68 29 02 00 00       	push   $0x229
f011a6ae:	68 56 a5 13 f0       	push   $0xf013a556
f011a6b3:	e8 ee 5a fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011a6b8:	83 ec 0c             	sub    $0xc,%esp
f011a6bb:	68 c0 a9 13 f0       	push   $0xf013a9c0
f011a6c0:	e8 68 65 fe ff       	call   f0100c2d <cprintf>
f011a6c5:	83 c4 10             	add    $0x10,%esp

	return 1;
f011a6c8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a6cd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a6d0:	5b                   	pop    %ebx
f011a6d1:	5f                   	pop    %edi
f011a6d2:	5d                   	pop    %ebp
f011a6d3:	c3                   	ret    

f011a6d4 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011a6d4:	55                   	push   %ebp
f011a6d5:	89 e5                	mov    %esp,%ebp
f011a6d7:	57                   	push   %edi
f011a6d8:	53                   	push   %ebx
f011a6d9:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011a6df:	83 ec 0c             	sub    $0xc,%esp
f011a6e2:	68 98 a4 13 f0       	push   $0xf013a498
f011a6e7:	e8 41 65 fe ff       	call   f0100c2d <cprintf>
f011a6ec:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a6ef:	83 ec 0c             	sub    $0xc,%esp
f011a6f2:	68 c8 a4 13 f0       	push   $0xf013a4c8
f011a6f7:	e8 31 65 fe ff       	call   f0100c2d <cprintf>
f011a6fc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a6ff:	83 ec 0c             	sub    $0xc,%esp
f011a702:	68 98 a4 13 f0       	push   $0xf013a498
f011a707:	e8 21 65 fe ff       	call   f0100c2d <cprintf>
f011a70c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a70f:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011a715:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a71a:	b8 00 00 00 00       	mov    $0x0,%eax
f011a71f:	89 d7                	mov    %edx,%edi
f011a721:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011a723:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011a72a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a72d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a732:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011a735:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a738:	ba 00 00 00 00       	mov    $0x0,%edx
f011a73d:	f7 75 f4             	divl   -0xc(%ebp)
f011a740:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a743:	29 d0                	sub    %edx,%eax
f011a745:	89 c1                	mov    %eax,%ecx
f011a747:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a74e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a753:	0f b6 d0             	movzbl %al,%edx
f011a756:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a759:	01 d0                	add    %edx,%eax
f011a75b:	48                   	dec    %eax
f011a75c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a75f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a762:	ba 00 00 00 00       	mov    $0x0,%edx
f011a767:	f7 75 ec             	divl   -0x14(%ebp)
f011a76a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a76d:	29 d0                	sub    %edx,%eax
f011a76f:	01 c1                	add    %eax,%ecx
f011a771:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a778:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a77d:	0f b6 c0             	movzbl %al,%eax
f011a780:	c1 e0 04             	shl    $0x4,%eax
f011a783:	89 c2                	mov    %eax,%edx
f011a785:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a788:	01 d0                	add    %edx,%eax
f011a78a:	48                   	dec    %eax
f011a78b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a78e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a791:	ba 00 00 00 00       	mov    $0x0,%edx
f011a796:	f7 75 e4             	divl   -0x1c(%ebp)
f011a799:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a79c:	29 d0                	sub    %edx,%eax
f011a79e:	01 c8                	add    %ecx,%eax
f011a7a0:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011a7a5:	29 c2                	sub    %eax,%edx
f011a7a7:	89 d0                	mov    %edx,%eax
f011a7a9:	83 ec 0c             	sub    $0xc,%esp
f011a7ac:	50                   	push   %eax
f011a7ad:	e8 70 cc fe ff       	call   f0107422 <kmalloc>
f011a7b2:	83 c4 10             	add    $0x10,%esp
f011a7b5:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011a7bb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a7c1:	85 c0                	test   %eax,%eax
f011a7c3:	74 17                	je     f011a7dc <test_kmalloc_bestfit2+0x108>
f011a7c5:	83 ec 04             	sub    $0x4,%esp
f011a7c8:	68 08 aa 13 f0       	push   $0xf013aa08
f011a7cd:	68 3f 02 00 00       	push   $0x23f
f011a7d2:	68 56 a5 13 f0       	push   $0xf013a556
f011a7d7:	e8 ca 59 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a7dc:	e8 d1 18 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a7e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a7e4:	e8 a3 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a7e9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011a7ec:	83 ec 0c             	sub    $0xc,%esp
f011a7ef:	68 00 fc 1f 00       	push   $0x1ffc00
f011a7f4:	e8 29 cc fe ff       	call   f0107422 <kmalloc>
f011a7f9:	83 c4 10             	add    $0x10,%esp
f011a7fc:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a802:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a808:	89 c1                	mov    %eax,%ecx
f011a80a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a811:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a814:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a819:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a81c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a81f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a824:	f7 75 d4             	divl   -0x2c(%ebp)
f011a827:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a82a:	29 d0                	sub    %edx,%eax
f011a82c:	89 c3                	mov    %eax,%ebx
f011a82e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a835:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a83a:	0f b6 d0             	movzbl %al,%edx
f011a83d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a840:	01 d0                	add    %edx,%eax
f011a842:	48                   	dec    %eax
f011a843:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a846:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a849:	ba 00 00 00 00       	mov    $0x0,%edx
f011a84e:	f7 75 cc             	divl   -0x34(%ebp)
f011a851:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a854:	29 d0                	sub    %edx,%eax
f011a856:	01 c3                	add    %eax,%ebx
f011a858:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a85f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a864:	0f b6 c0             	movzbl %al,%eax
f011a867:	c1 e0 04             	shl    $0x4,%eax
f011a86a:	89 c2                	mov    %eax,%edx
f011a86c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a86f:	01 d0                	add    %edx,%eax
f011a871:	48                   	dec    %eax
f011a872:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a875:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a878:	ba 00 00 00 00       	mov    $0x0,%edx
f011a87d:	f7 75 c4             	divl   -0x3c(%ebp)
f011a880:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a883:	29 d0                	sub    %edx,%eax
f011a885:	01 d8                	add    %ebx,%eax
f011a887:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a88c:	39 c1                	cmp    %eax,%ecx
f011a88e:	74 17                	je     f011a8a7 <test_kmalloc_bestfit2+0x1d3>
f011a890:	83 ec 04             	sub    $0x4,%esp
f011a893:	68 70 a9 13 f0       	push   $0xf013a970
f011a898:	68 49 02 00 00       	push   $0x249
f011a89d:	68 56 a5 13 f0       	push   $0xf013a556
f011a8a2:	e8 ff 58 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8a7:	e8 e0 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a8ac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a8af:	74 17                	je     f011a8c8 <test_kmalloc_bestfit2+0x1f4>
f011a8b1:	83 ec 04             	sub    $0x4,%esp
f011a8b4:	68 70 a5 13 f0       	push   $0xf013a570
f011a8b9:	68 4a 02 00 00       	push   $0x24a
f011a8be:	68 56 a5 13 f0       	push   $0xf013a556
f011a8c3:	e8 de 58 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011a8c8:	e8 e5 17 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a8cd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a8d0:	29 c2                	sub    %eax,%edx
f011a8d2:	89 d0                	mov    %edx,%eax
f011a8d4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a8d9:	74 17                	je     f011a8f2 <test_kmalloc_bestfit2+0x21e>
f011a8db:	83 ec 04             	sub    $0x4,%esp
f011a8de:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011a8e3:	68 4b 02 00 00       	push   $0x24b
f011a8e8:	68 56 a5 13 f0       	push   $0xf013a556
f011a8ed:	e8 b4 58 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a8f2:	e8 bb 17 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a8f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a8fa:	e8 8d 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a8ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011a902:	83 ec 0c             	sub    $0xc,%esp
f011a905:	68 00 fc 1f 00       	push   $0x1ffc00
f011a90a:	e8 13 cb fe ff       	call   f0107422 <kmalloc>
f011a90f:	83 c4 10             	add    $0x10,%esp
f011a912:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011a918:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011a91e:	89 c1                	mov    %eax,%ecx
f011a920:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a927:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a92a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a92f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a932:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a935:	ba 00 00 00 00       	mov    $0x0,%edx
f011a93a:	f7 75 bc             	divl   -0x44(%ebp)
f011a93d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a940:	29 d0                	sub    %edx,%eax
f011a942:	89 c3                	mov    %eax,%ebx
f011a944:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a94b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a950:	0f b6 d0             	movzbl %al,%edx
f011a953:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a956:	01 d0                	add    %edx,%eax
f011a958:	48                   	dec    %eax
f011a959:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a95c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a95f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a964:	f7 75 b4             	divl   -0x4c(%ebp)
f011a967:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a96a:	29 d0                	sub    %edx,%eax
f011a96c:	01 c3                	add    %eax,%ebx
f011a96e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a975:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a97a:	0f b6 c0             	movzbl %al,%eax
f011a97d:	c1 e0 04             	shl    $0x4,%eax
f011a980:	89 c2                	mov    %eax,%edx
f011a982:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a985:	01 d0                	add    %edx,%eax
f011a987:	48                   	dec    %eax
f011a988:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a98b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a98e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a993:	f7 75 ac             	divl   -0x54(%ebp)
f011a996:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a999:	29 d0                	sub    %edx,%eax
f011a99b:	01 d8                	add    %ebx,%eax
f011a99d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011a9a2:	39 c1                	cmp    %eax,%ecx
f011a9a4:	74 17                	je     f011a9bd <test_kmalloc_bestfit2+0x2e9>
f011a9a6:	83 ec 04             	sub    $0x4,%esp
f011a9a9:	68 70 a9 13 f0       	push   $0xf013a970
f011a9ae:	68 51 02 00 00       	push   $0x251
f011a9b3:	68 56 a5 13 f0       	push   $0xf013a556
f011a9b8:	e8 e9 57 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9bd:	e8 ca 92 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a9c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a9c5:	74 17                	je     f011a9de <test_kmalloc_bestfit2+0x30a>
f011a9c7:	83 ec 04             	sub    $0x4,%esp
f011a9ca:	68 70 a5 13 f0       	push   $0xf013a570
f011a9cf:	68 52 02 00 00       	push   $0x252
f011a9d4:	68 56 a5 13 f0       	push   $0xf013a556
f011a9d9:	e8 c8 57 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011a9de:	e8 cf 16 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011a9e3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a9e6:	29 c2                	sub    %eax,%edx
f011a9e8:	89 d0                	mov    %edx,%eax
f011a9ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a9ef:	74 17                	je     f011aa08 <test_kmalloc_bestfit2+0x334>
f011a9f1:	83 ec 04             	sub    $0x4,%esp
f011a9f4:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011a9f9:	68 53 02 00 00       	push   $0x253
f011a9fe:	68 56 a5 13 f0       	push   $0xf013a556
f011aa03:	e8 9e 57 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011aa08:	e8 a5 16 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011aa0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aa10:	e8 77 92 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aa15:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011aa18:	83 ec 0c             	sub    $0xc,%esp
f011aa1b:	68 00 08 00 00       	push   $0x800
f011aa20:	e8 fd c9 fe ff       	call   f0107422 <kmalloc>
f011aa25:	83 c4 10             	add    $0x10,%esp
f011aa28:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011aa2e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011aa34:	89 c1                	mov    %eax,%ecx
f011aa36:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011aa3d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011aa40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aa45:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011aa48:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011aa4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa50:	f7 75 a4             	divl   -0x5c(%ebp)
f011aa53:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011aa56:	29 d0                	sub    %edx,%eax
f011aa58:	89 c3                	mov    %eax,%ebx
f011aa5a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011aa61:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011aa66:	0f b6 d0             	movzbl %al,%edx
f011aa69:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011aa6c:	01 d0                	add    %edx,%eax
f011aa6e:	48                   	dec    %eax
f011aa6f:	89 45 98             	mov    %eax,-0x68(%ebp)
f011aa72:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aa75:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa7a:	f7 75 9c             	divl   -0x64(%ebp)
f011aa7d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aa80:	29 d0                	sub    %edx,%eax
f011aa82:	01 c3                	add    %eax,%ebx
f011aa84:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011aa8b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011aa90:	0f b6 c0             	movzbl %al,%eax
f011aa93:	c1 e0 04             	shl    $0x4,%eax
f011aa96:	89 c2                	mov    %eax,%edx
f011aa98:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011aa9b:	01 d0                	add    %edx,%eax
f011aa9d:	48                   	dec    %eax
f011aa9e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011aaa1:	8b 45 90             	mov    -0x70(%ebp),%eax
f011aaa4:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaa9:	f7 75 94             	divl   -0x6c(%ebp)
f011aaac:	8b 45 90             	mov    -0x70(%ebp),%eax
f011aaaf:	29 d0                	sub    %edx,%eax
f011aab1:	01 d8                	add    %ebx,%eax
f011aab3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011aab8:	39 c1                	cmp    %eax,%ecx
f011aaba:	74 17                	je     f011aad3 <test_kmalloc_bestfit2+0x3ff>
f011aabc:	83 ec 04             	sub    $0x4,%esp
f011aabf:	68 70 a9 13 f0       	push   $0xf013a970
f011aac4:	68 59 02 00 00       	push   $0x259
f011aac9:	68 56 a5 13 f0       	push   $0xf013a556
f011aace:	e8 d3 56 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aad3:	e8 b4 91 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aad8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aadb:	74 17                	je     f011aaf4 <test_kmalloc_bestfit2+0x420>
f011aadd:	83 ec 04             	sub    $0x4,%esp
f011aae0:	68 70 a5 13 f0       	push   $0xf013a570
f011aae5:	68 5a 02 00 00       	push   $0x25a
f011aaea:	68 56 a5 13 f0       	push   $0xf013a556
f011aaef:	e8 b2 56 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011aaf4:	e8 b9 15 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011aaf9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011aafc:	29 c2                	sub    %eax,%edx
f011aafe:	89 d0                	mov    %edx,%eax
f011ab00:	83 f8 01             	cmp    $0x1,%eax
f011ab03:	74 17                	je     f011ab1c <test_kmalloc_bestfit2+0x448>
f011ab05:	83 ec 04             	sub    $0x4,%esp
f011ab08:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011ab0d:	68 5b 02 00 00       	push   $0x25b
f011ab12:	68 56 a5 13 f0       	push   $0xf013a556
f011ab17:	e8 8a 56 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ab1c:	e8 91 15 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ab21:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ab24:	e8 63 91 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ab29:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ab2c:	83 ec 0c             	sub    $0xc,%esp
f011ab2f:	68 00 08 00 00       	push   $0x800
f011ab34:	e8 e9 c8 fe ff       	call   f0107422 <kmalloc>
f011ab39:	83 c4 10             	add    $0x10,%esp
f011ab3c:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011ab42:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ab48:	89 c1                	mov    %eax,%ecx
f011ab4a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ab51:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ab54:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab59:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ab5c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ab5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab64:	f7 75 8c             	divl   -0x74(%ebp)
f011ab67:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ab6a:	29 d0                	sub    %edx,%eax
f011ab6c:	89 c3                	mov    %eax,%ebx
f011ab6e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ab75:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ab7a:	0f b6 d0             	movzbl %al,%edx
f011ab7d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ab80:	01 d0                	add    %edx,%eax
f011ab82:	48                   	dec    %eax
f011ab83:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ab86:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ab89:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab8e:	f7 75 84             	divl   -0x7c(%ebp)
f011ab91:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ab94:	29 d0                	sub    %edx,%eax
f011ab96:	01 c3                	add    %eax,%ebx
f011ab98:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ab9f:	10 00 00 
f011aba2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011aba7:	0f b6 c0             	movzbl %al,%eax
f011abaa:	c1 e0 04             	shl    $0x4,%eax
f011abad:	89 c2                	mov    %eax,%edx
f011abaf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011abb5:	01 d0                	add    %edx,%eax
f011abb7:	48                   	dec    %eax
f011abb8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011abbe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011abc4:	ba 00 00 00 00       	mov    $0x0,%edx
f011abc9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011abcf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011abd5:	29 d0                	sub    %edx,%eax
f011abd7:	01 d8                	add    %ebx,%eax
f011abd9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011abde:	39 c1                	cmp    %eax,%ecx
f011abe0:	74 17                	je     f011abf9 <test_kmalloc_bestfit2+0x525>
f011abe2:	83 ec 04             	sub    $0x4,%esp
f011abe5:	68 70 a9 13 f0       	push   $0xf013a970
f011abea:	68 61 02 00 00       	push   $0x261
f011abef:	68 56 a5 13 f0       	push   $0xf013a556
f011abf4:	e8 ad 55 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011abf9:	e8 8e 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011abfe:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ac01:	74 17                	je     f011ac1a <test_kmalloc_bestfit2+0x546>
f011ac03:	83 ec 04             	sub    $0x4,%esp
f011ac06:	68 70 a5 13 f0       	push   $0xf013a570
f011ac0b:	68 62 02 00 00       	push   $0x262
f011ac10:	68 56 a5 13 f0       	push   $0xf013a556
f011ac15:	e8 8c 55 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ac1a:	e8 93 14 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ac1f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ac22:	29 c2                	sub    %eax,%edx
f011ac24:	89 d0                	mov    %edx,%eax
f011ac26:	83 f8 01             	cmp    $0x1,%eax
f011ac29:	74 17                	je     f011ac42 <test_kmalloc_bestfit2+0x56e>
f011ac2b:	83 ec 04             	sub    $0x4,%esp
f011ac2e:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011ac33:	68 63 02 00 00       	push   $0x263
f011ac38:	68 56 a5 13 f0       	push   $0xf013a556
f011ac3d:	e8 64 55 fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ac42:	e8 6b 14 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ac47:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ac4a:	e8 3d 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ac4f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011ac52:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ac58:	83 ec 0c             	sub    $0xc,%esp
f011ac5b:	50                   	push   %eax
f011ac5c:	e8 db c7 fe ff       	call   f010743c <kfree>
f011ac61:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac64:	e8 23 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ac69:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ac6c:	74 17                	je     f011ac85 <test_kmalloc_bestfit2+0x5b1>
f011ac6e:	83 ec 04             	sub    $0x4,%esp
f011ac71:	68 70 a5 13 f0       	push   $0xf013a570
f011ac76:	68 69 02 00 00       	push   $0x269
f011ac7b:	68 56 a5 13 f0       	push   $0xf013a556
f011ac80:	e8 21 55 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011ac85:	e8 28 14 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ac8a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ac8d:	83 f8 01             	cmp    $0x1,%eax
f011ac90:	74 17                	je     f011aca9 <test_kmalloc_bestfit2+0x5d5>
f011ac92:	83 ec 04             	sub    $0x4,%esp
f011ac95:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011ac9a:	68 6a 02 00 00       	push   $0x26a
f011ac9f:	68 56 a5 13 f0       	push   $0xf013a556
f011aca4:	e8 fd 54 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011aca9:	e8 04 14 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011acae:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011acb1:	e8 d6 8f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011acb6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011acb9:	83 ec 0c             	sub    $0xc,%esp
f011acbc:	68 00 1c 00 00       	push   $0x1c00
f011acc1:	e8 5c c7 fe ff       	call   f0107422 <kmalloc>
f011acc6:	83 c4 10             	add    $0x10,%esp
f011acc9:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011accf:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011acd5:	89 c1                	mov    %eax,%ecx
f011acd7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011acde:	10 00 00 
f011ace1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ace7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011acec:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011acf2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011acf8:	ba 00 00 00 00       	mov    $0x0,%edx
f011acfd:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ad03:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ad09:	29 d0                	sub    %edx,%eax
f011ad0b:	89 c3                	mov    %eax,%ebx
f011ad0d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ad14:	10 00 00 
f011ad17:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ad1c:	0f b6 d0             	movzbl %al,%edx
f011ad1f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ad25:	01 d0                	add    %edx,%eax
f011ad27:	48                   	dec    %eax
f011ad28:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ad2e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ad34:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad39:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ad3f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ad45:	29 d0                	sub    %edx,%eax
f011ad47:	01 c3                	add    %eax,%ebx
f011ad49:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ad50:	10 00 00 
f011ad53:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ad58:	0f b6 c0             	movzbl %al,%eax
f011ad5b:	c1 e0 04             	shl    $0x4,%eax
f011ad5e:	89 c2                	mov    %eax,%edx
f011ad60:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ad66:	01 d0                	add    %edx,%eax
f011ad68:	48                   	dec    %eax
f011ad69:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ad6f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ad75:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad7a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ad80:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ad86:	29 d0                	sub    %edx,%eax
f011ad88:	01 d8                	add    %ebx,%eax
f011ad8a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011ad8f:	39 c1                	cmp    %eax,%ecx
f011ad91:	74 17                	je     f011adaa <test_kmalloc_bestfit2+0x6d6>
f011ad93:	83 ec 04             	sub    $0x4,%esp
f011ad96:	68 70 a9 13 f0       	push   $0xf013a970
f011ad9b:	68 70 02 00 00       	push   $0x270
f011ada0:	68 56 a5 13 f0       	push   $0xf013a556
f011ada5:	e8 fc 53 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adaa:	e8 dd 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011adaf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011adb2:	74 17                	je     f011adcb <test_kmalloc_bestfit2+0x6f7>
f011adb4:	83 ec 04             	sub    $0x4,%esp
f011adb7:	68 70 a5 13 f0       	push   $0xf013a570
f011adbc:	68 71 02 00 00       	push   $0x271
f011adc1:	68 56 a5 13 f0       	push   $0xf013a556
f011adc6:	e8 db 53 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011adcb:	e8 e2 12 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011add0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011add3:	29 c2                	sub    %eax,%edx
f011add5:	89 d0                	mov    %edx,%eax
f011add7:	83 f8 02             	cmp    $0x2,%eax
f011adda:	74 17                	je     f011adf3 <test_kmalloc_bestfit2+0x71f>
f011addc:	83 ec 04             	sub    $0x4,%esp
f011addf:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011ade4:	68 72 02 00 00       	push   $0x272
f011ade9:	68 56 a5 13 f0       	push   $0xf013a556
f011adee:	e8 b3 53 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011adf3:	e8 ba 12 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011adf8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011adfb:	e8 8c 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ae00:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011ae03:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ae09:	83 ec 0c             	sub    $0xc,%esp
f011ae0c:	50                   	push   %eax
f011ae0d:	e8 2a c6 fe ff       	call   f010743c <kfree>
f011ae12:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae15:	e8 72 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ae1a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ae1d:	74 17                	je     f011ae36 <test_kmalloc_bestfit2+0x762>
f011ae1f:	83 ec 04             	sub    $0x4,%esp
f011ae22:	68 70 a5 13 f0       	push   $0xf013a570
f011ae27:	68 78 02 00 00       	push   $0x278
f011ae2c:	68 56 a5 13 f0       	push   $0xf013a556
f011ae31:	e8 70 53 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011ae36:	e8 77 12 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ae3b:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ae3e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ae43:	74 17                	je     f011ae5c <test_kmalloc_bestfit2+0x788>
f011ae45:	83 ec 04             	sub    $0x4,%esp
f011ae48:	68 24 a8 13 f0       	push   $0xf013a824
f011ae4d:	68 79 02 00 00       	push   $0x279
f011ae52:	68 56 a5 13 f0       	push   $0xf013a556
f011ae57:	e8 4a 53 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ae5c:	e8 51 12 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ae61:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ae64:	e8 23 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ae69:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011ae6c:	83 ec 0c             	sub    $0xc,%esp
f011ae6f:	68 00 fc 2f 00       	push   $0x2ffc00
f011ae74:	e8 a9 c5 fe ff       	call   f0107422 <kmalloc>
f011ae79:	83 c4 10             	add    $0x10,%esp
f011ae7c:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ae82:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ae88:	89 c1                	mov    %eax,%ecx
f011ae8a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ae91:	10 00 00 
f011ae94:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ae9a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae9f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011aea5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011aeab:	ba 00 00 00 00       	mov    $0x0,%edx
f011aeb0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011aeb6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011aebc:	29 d0                	sub    %edx,%eax
f011aebe:	89 c3                	mov    %eax,%ebx
f011aec0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011aec7:	10 00 00 
f011aeca:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011aecf:	0f b6 d0             	movzbl %al,%edx
f011aed2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011aed8:	01 d0                	add    %edx,%eax
f011aeda:	48                   	dec    %eax
f011aedb:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011aee1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011aee7:	ba 00 00 00 00       	mov    $0x0,%edx
f011aeec:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011aef2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011aef8:	29 d0                	sub    %edx,%eax
f011aefa:	01 c3                	add    %eax,%ebx
f011aefc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011af03:	10 00 00 
f011af06:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011af0b:	0f b6 c0             	movzbl %al,%eax
f011af0e:	c1 e0 04             	shl    $0x4,%eax
f011af11:	89 c2                	mov    %eax,%edx
f011af13:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011af19:	01 d0                	add    %edx,%eax
f011af1b:	48                   	dec    %eax
f011af1c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011af22:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011af28:	ba 00 00 00 00       	mov    $0x0,%edx
f011af2d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011af33:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011af39:	29 d0                	sub    %edx,%eax
f011af3b:	01 d8                	add    %ebx,%eax
f011af3d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011af42:	39 c1                	cmp    %eax,%ecx
f011af44:	74 17                	je     f011af5d <test_kmalloc_bestfit2+0x889>
f011af46:	83 ec 04             	sub    $0x4,%esp
f011af49:	68 70 a9 13 f0       	push   $0xf013a970
f011af4e:	68 7f 02 00 00       	push   $0x27f
f011af53:	68 56 a5 13 f0       	push   $0xf013a556
f011af58:	e8 49 52 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af5d:	e8 2a 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af62:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af65:	74 17                	je     f011af7e <test_kmalloc_bestfit2+0x8aa>
f011af67:	83 ec 04             	sub    $0x4,%esp
f011af6a:	68 70 a5 13 f0       	push   $0xf013a570
f011af6f:	68 80 02 00 00       	push   $0x280
f011af74:	68 56 a5 13 f0       	push   $0xf013a556
f011af79:	e8 28 52 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011af7e:	e8 2f 11 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011af83:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011af86:	29 c2                	sub    %eax,%edx
f011af88:	89 d0                	mov    %edx,%eax
f011af8a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011af8f:	74 17                	je     f011afa8 <test_kmalloc_bestfit2+0x8d4>
f011af91:	83 ec 04             	sub    $0x4,%esp
f011af94:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011af99:	68 81 02 00 00       	push   $0x281
f011af9e:	68 56 a5 13 f0       	push   $0xf013a556
f011afa3:	e8 fe 51 fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011afa8:	e8 05 11 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011afad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011afb0:	e8 d7 8c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011afb5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011afb8:	83 ec 0c             	sub    $0xc,%esp
f011afbb:	68 00 18 20 00       	push   $0x201800
f011afc0:	e8 5d c4 fe ff       	call   f0107422 <kmalloc>
f011afc5:	83 c4 10             	add    $0x10,%esp
f011afc8:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011afce:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011afd4:	89 c1                	mov    %eax,%ecx
f011afd6:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011afdd:	10 00 00 
f011afe0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011afe6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011afeb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011aff1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011aff7:	ba 00 00 00 00       	mov    $0x0,%edx
f011affc:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b002:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b008:	29 d0                	sub    %edx,%eax
f011b00a:	89 c3                	mov    %eax,%ebx
f011b00c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b013:	10 00 00 
f011b016:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b01b:	0f b6 d0             	movzbl %al,%edx
f011b01e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b024:	01 d0                	add    %edx,%eax
f011b026:	48                   	dec    %eax
f011b027:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b02d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b033:	ba 00 00 00 00       	mov    $0x0,%edx
f011b038:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b03e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b044:	29 d0                	sub    %edx,%eax
f011b046:	01 c3                	add    %eax,%ebx
f011b048:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b04f:	10 00 00 
f011b052:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b057:	0f b6 c0             	movzbl %al,%eax
f011b05a:	c1 e0 04             	shl    $0x4,%eax
f011b05d:	89 c2                	mov    %eax,%edx
f011b05f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b065:	01 d0                	add    %edx,%eax
f011b067:	48                   	dec    %eax
f011b068:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b06e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b074:	ba 00 00 00 00       	mov    $0x0,%edx
f011b079:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b07f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b085:	29 d0                	sub    %edx,%eax
f011b087:	01 d8                	add    %ebx,%eax
f011b089:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b08e:	39 c1                	cmp    %eax,%ecx
f011b090:	74 17                	je     f011b0a9 <test_kmalloc_bestfit2+0x9d5>
f011b092:	83 ec 04             	sub    $0x4,%esp
f011b095:	68 70 a9 13 f0       	push   $0xf013a970
f011b09a:	68 87 02 00 00       	push   $0x287
f011b09f:	68 56 a5 13 f0       	push   $0xf013a556
f011b0a4:	e8 fd 50 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0a9:	e8 de 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b0ae:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b0b1:	74 17                	je     f011b0ca <test_kmalloc_bestfit2+0x9f6>
f011b0b3:	83 ec 04             	sub    $0x4,%esp
f011b0b6:	68 70 a5 13 f0       	push   $0xf013a570
f011b0bb:	68 88 02 00 00       	push   $0x288
f011b0c0:	68 56 a5 13 f0       	push   $0xf013a556
f011b0c5:	e8 dc 50 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011b0ca:	e8 e3 0f ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b0cf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b0d2:	29 c2                	sub    %eax,%edx
f011b0d4:	89 d0                	mov    %edx,%eax
f011b0d6:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b0db:	74 17                	je     f011b0f4 <test_kmalloc_bestfit2+0xa20>
f011b0dd:	83 ec 04             	sub    $0x4,%esp
f011b0e0:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011b0e5:	68 89 02 00 00       	push   $0x289
f011b0ea:	68 56 a5 13 f0       	push   $0xf013a556
f011b0ef:	e8 b2 50 fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011b0f4:	e8 b9 0f ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b0f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b0fc:	e8 8b 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b101:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011b104:	83 ec 0c             	sub    $0xc,%esp
f011b107:	68 00 fc 4f 00       	push   $0x4ffc00
f011b10c:	e8 11 c3 fe ff       	call   f0107422 <kmalloc>
f011b111:	83 c4 10             	add    $0x10,%esp
f011b114:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011b11a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b120:	89 c1                	mov    %eax,%ecx
f011b122:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b129:	10 00 00 
f011b12c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b132:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b137:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b13d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b143:	ba 00 00 00 00       	mov    $0x0,%edx
f011b148:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b14e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b154:	29 d0                	sub    %edx,%eax
f011b156:	89 c3                	mov    %eax,%ebx
f011b158:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b15f:	10 00 00 
f011b162:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b167:	0f b6 d0             	movzbl %al,%edx
f011b16a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b170:	01 d0                	add    %edx,%eax
f011b172:	48                   	dec    %eax
f011b173:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b179:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b17f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b184:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b18a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b190:	29 d0                	sub    %edx,%eax
f011b192:	01 c3                	add    %eax,%ebx
f011b194:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b19b:	10 00 00 
f011b19e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b1a3:	0f b6 c0             	movzbl %al,%eax
f011b1a6:	c1 e0 04             	shl    $0x4,%eax
f011b1a9:	89 c2                	mov    %eax,%edx
f011b1ab:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b1b1:	01 d0                	add    %edx,%eax
f011b1b3:	48                   	dec    %eax
f011b1b4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b1ba:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b1c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1c5:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b1cb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b1d1:	29 d0                	sub    %edx,%eax
f011b1d3:	01 d8                	add    %ebx,%eax
f011b1d5:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011b1da:	39 c1                	cmp    %eax,%ecx
f011b1dc:	74 17                	je     f011b1f5 <test_kmalloc_bestfit2+0xb21>
f011b1de:	83 ec 04             	sub    $0x4,%esp
f011b1e1:	68 70 a9 13 f0       	push   $0xf013a970
f011b1e6:	68 8f 02 00 00       	push   $0x28f
f011b1eb:	68 56 a5 13 f0       	push   $0xf013a556
f011b1f0:	e8 b1 4f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1f5:	e8 92 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b1fa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b1fd:	74 17                	je     f011b216 <test_kmalloc_bestfit2+0xb42>
f011b1ff:	83 ec 04             	sub    $0x4,%esp
f011b202:	68 70 a5 13 f0       	push   $0xf013a570
f011b207:	68 90 02 00 00       	push   $0x290
f011b20c:	68 56 a5 13 f0       	push   $0xf013a556
f011b211:	e8 90 4f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b216:	e8 97 0e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b21b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b21e:	29 c2                	sub    %eax,%edx
f011b220:	89 d0                	mov    %edx,%eax
f011b222:	3d 00 05 00 00       	cmp    $0x500,%eax
f011b227:	74 17                	je     f011b240 <test_kmalloc_bestfit2+0xb6c>
f011b229:	83 ec 04             	sub    $0x4,%esp
f011b22c:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011b231:	68 91 02 00 00       	push   $0x291
f011b236:	68 56 a5 13 f0       	push   $0xf013a556
f011b23b:	e8 66 4f fe ff       	call   f01001a6 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b240:	e8 6d 0e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b245:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b248:	e8 3f 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b24d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011b250:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b256:	83 ec 0c             	sub    $0xc,%esp
f011b259:	50                   	push   %eax
f011b25a:	e8 dd c1 fe ff       	call   f010743c <kfree>
f011b25f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b262:	e8 25 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b267:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b26a:	74 17                	je     f011b283 <test_kmalloc_bestfit2+0xbaf>
f011b26c:	83 ec 04             	sub    $0x4,%esp
f011b26f:	68 70 a5 13 f0       	push   $0xf013a570
f011b274:	68 97 02 00 00       	push   $0x297
f011b279:	68 56 a5 13 f0       	push   $0xf013a556
f011b27e:	e8 23 4f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011b283:	e8 2a 0e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b288:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b28b:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b290:	74 17                	je     f011b2a9 <test_kmalloc_bestfit2+0xbd5>
f011b292:	83 ec 04             	sub    $0x4,%esp
f011b295:	68 24 a8 13 f0       	push   $0xf013a824
f011b29a:	68 98 02 00 00       	push   $0x298
f011b29f:	68 56 a5 13 f0       	push   $0xf013a556
f011b2a4:	e8 fd 4e fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b2a9:	e8 04 0e ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b2ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b2b1:	e8 d6 89 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b2b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011b2b9:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b2bf:	83 ec 0c             	sub    $0xc,%esp
f011b2c2:	50                   	push   %eax
f011b2c3:	e8 74 c1 fe ff       	call   f010743c <kfree>
f011b2c8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2cb:	e8 bc 89 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b2d0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b2d3:	74 17                	je     f011b2ec <test_kmalloc_bestfit2+0xc18>
f011b2d5:	83 ec 04             	sub    $0x4,%esp
f011b2d8:	68 70 a5 13 f0       	push   $0xf013a570
f011b2dd:	68 9e 02 00 00       	push   $0x29e
f011b2e2:	68 56 a5 13 f0       	push   $0xf013a556
f011b2e7:	e8 ba 4e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b2ec:	e8 c1 0d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b2f1:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b2f4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b2f9:	74 17                	je     f011b312 <test_kmalloc_bestfit2+0xc3e>
f011b2fb:	83 ec 04             	sub    $0x4,%esp
f011b2fe:	68 50 aa 13 f0       	push   $0xf013aa50
f011b303:	68 9f 02 00 00       	push   $0x29f
f011b308:	68 56 a5 13 f0       	push   $0xf013a556
f011b30d:	e8 94 4e fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b312:	e8 9b 0d ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b317:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b31a:	e8 6d 89 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b31f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011b322:	83 ec 0c             	sub    $0xc,%esp
f011b325:	68 00 fc 1f 00       	push   $0x1ffc00
f011b32a:	e8 f3 c0 fe ff       	call   f0107422 <kmalloc>
f011b32f:	83 c4 10             	add    $0x10,%esp
f011b332:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b338:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011b33e:	89 c1                	mov    %eax,%ecx
f011b340:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b347:	10 00 00 
f011b34a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b350:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b355:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b35b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b361:	ba 00 00 00 00       	mov    $0x0,%edx
f011b366:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b36c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b372:	29 d0                	sub    %edx,%eax
f011b374:	89 c3                	mov    %eax,%ebx
f011b376:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b37d:	10 00 00 
f011b380:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b385:	0f b6 d0             	movzbl %al,%edx
f011b388:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b38e:	01 d0                	add    %edx,%eax
f011b390:	48                   	dec    %eax
f011b391:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b397:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b39d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3a2:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b3a8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b3ae:	29 d0                	sub    %edx,%eax
f011b3b0:	01 c3                	add    %eax,%ebx
f011b3b2:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b3b9:	10 00 00 
f011b3bc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b3c1:	0f b6 c0             	movzbl %al,%eax
f011b3c4:	c1 e0 04             	shl    $0x4,%eax
f011b3c7:	89 c2                	mov    %eax,%edx
f011b3c9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b3cf:	01 d0                	add    %edx,%eax
f011b3d1:	48                   	dec    %eax
f011b3d2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b3d8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b3de:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3e3:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b3e9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b3ef:	29 d0                	sub    %edx,%eax
f011b3f1:	01 d8                	add    %ebx,%eax
f011b3f3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b3f8:	39 c1                	cmp    %eax,%ecx
f011b3fa:	74 17                	je     f011b413 <test_kmalloc_bestfit2+0xd3f>
f011b3fc:	83 ec 04             	sub    $0x4,%esp
f011b3ff:	68 70 a9 13 f0       	push   $0xf013a970
f011b404:	68 a5 02 00 00       	push   $0x2a5
f011b409:	68 56 a5 13 f0       	push   $0xf013a556
f011b40e:	e8 93 4d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b413:	e8 74 88 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b418:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b41b:	74 17                	je     f011b434 <test_kmalloc_bestfit2+0xd60>
f011b41d:	83 ec 04             	sub    $0x4,%esp
f011b420:	68 70 a5 13 f0       	push   $0xf013a570
f011b425:	68 a6 02 00 00       	push   $0x2a6
f011b42a:	68 56 a5 13 f0       	push   $0xf013a556
f011b42f:	e8 72 4d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011b434:	e8 79 0c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b439:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b43c:	29 c2                	sub    %eax,%edx
f011b43e:	89 d0                	mov    %edx,%eax
f011b440:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b445:	74 17                	je     f011b45e <test_kmalloc_bestfit2+0xd8a>
f011b447:	83 ec 04             	sub    $0x4,%esp
f011b44a:	68 8e aa 13 f0       	push   $0xf013aa8e
f011b44f:	68 a7 02 00 00       	push   $0x2a7
f011b454:	68 56 a5 13 f0       	push   $0xf013a556
f011b459:	e8 48 4d fe ff       	call   f01001a6 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b45e:	e8 4f 0c ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b463:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b466:	e8 21 88 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b46b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011b46e:	83 ec 0c             	sub    $0xc,%esp
f011b471:	68 00 18 00 00       	push   $0x1800
f011b476:	e8 a7 bf fe ff       	call   f0107422 <kmalloc>
f011b47b:	83 c4 10             	add    $0x10,%esp
f011b47e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b484:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b48a:	89 c1                	mov    %eax,%ecx
f011b48c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b493:	10 00 00 
f011b496:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b49c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b4a1:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b4a7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b4ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4b2:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b4b8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b4be:	29 d0                	sub    %edx,%eax
f011b4c0:	89 c3                	mov    %eax,%ebx
f011b4c2:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b4c9:	10 00 00 
f011b4cc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b4d1:	0f b6 d0             	movzbl %al,%edx
f011b4d4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b4da:	01 d0                	add    %edx,%eax
f011b4dc:	48                   	dec    %eax
f011b4dd:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b4e3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b4e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4ee:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b4f4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b4fa:	29 d0                	sub    %edx,%eax
f011b4fc:	01 c3                	add    %eax,%ebx
f011b4fe:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b505:	10 00 00 
f011b508:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b50d:	0f b6 c0             	movzbl %al,%eax
f011b510:	c1 e0 04             	shl    $0x4,%eax
f011b513:	89 c2                	mov    %eax,%edx
f011b515:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b51b:	01 d0                	add    %edx,%eax
f011b51d:	48                   	dec    %eax
f011b51e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b524:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b52a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b52f:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b535:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b53b:	29 d0                	sub    %edx,%eax
f011b53d:	01 d8                	add    %ebx,%eax
f011b53f:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011b544:	39 c1                	cmp    %eax,%ecx
f011b546:	74 17                	je     f011b55f <test_kmalloc_bestfit2+0xe8b>
f011b548:	83 ec 04             	sub    $0x4,%esp
f011b54b:	68 70 a9 13 f0       	push   $0xf013a970
f011b550:	68 ad 02 00 00       	push   $0x2ad
f011b555:	68 56 a5 13 f0       	push   $0xf013a556
f011b55a:	e8 47 4c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b55f:	e8 28 87 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b564:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b567:	74 17                	je     f011b580 <test_kmalloc_bestfit2+0xeac>
f011b569:	83 ec 04             	sub    $0x4,%esp
f011b56c:	68 70 a5 13 f0       	push   $0xf013a570
f011b571:	68 ae 02 00 00       	push   $0x2ae
f011b576:	68 56 a5 13 f0       	push   $0xf013a556
f011b57b:	e8 26 4c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011b580:	e8 2d 0b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b585:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b588:	29 c2                	sub    %eax,%edx
f011b58a:	89 d0                	mov    %edx,%eax
f011b58c:	83 f8 02             	cmp    $0x2,%eax
f011b58f:	74 17                	je     f011b5a8 <test_kmalloc_bestfit2+0xed4>
f011b591:	83 ec 04             	sub    $0x4,%esp
f011b594:	68 8e aa 13 f0       	push   $0xf013aa8e
f011b599:	68 af 02 00 00       	push   $0x2af
f011b59e:	68 56 a5 13 f0       	push   $0xf013a556
f011b5a3:	e8 fe 4b fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b5a8:	e8 05 0b ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b5ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b5b0:	e8 d7 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b5b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011b5b8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b5be:	83 ec 0c             	sub    $0xc,%esp
f011b5c1:	50                   	push   %eax
f011b5c2:	e8 75 be fe ff       	call   f010743c <kfree>
f011b5c7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5ca:	e8 bd 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b5cf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b5d2:	74 17                	je     f011b5eb <test_kmalloc_bestfit2+0xf17>
f011b5d4:	83 ec 04             	sub    $0x4,%esp
f011b5d7:	68 70 a5 13 f0       	push   $0xf013a570
f011b5dc:	68 b5 02 00 00       	push   $0x2b5
f011b5e1:	68 56 a5 13 f0       	push   $0xf013a556
f011b5e6:	e8 bb 4b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b5eb:	e8 c2 0a ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b5f0:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b5f3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b5f8:	74 17                	je     f011b611 <test_kmalloc_bestfit2+0xf3d>
f011b5fa:	83 ec 04             	sub    $0x4,%esp
f011b5fd:	68 50 aa 13 f0       	push   $0xf013aa50
f011b602:	68 b6 02 00 00       	push   $0x2b6
f011b607:	68 56 a5 13 f0       	push   $0xf013a556
f011b60c:	e8 95 4b fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b611:	e8 9c 0a ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b616:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b619:	e8 6e 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b61e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011b621:	83 ec 0c             	sub    $0xc,%esp
f011b624:	68 00 fc 2f 00       	push   $0x2ffc00
f011b629:	e8 f4 bd fe ff       	call   f0107422 <kmalloc>
f011b62e:	83 c4 10             	add    $0x10,%esp
f011b631:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b637:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b63d:	89 c1                	mov    %eax,%ecx
f011b63f:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b646:	10 00 00 
f011b649:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b64f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b654:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b65a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b660:	ba 00 00 00 00       	mov    $0x0,%edx
f011b665:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b66b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b671:	29 d0                	sub    %edx,%eax
f011b673:	89 c3                	mov    %eax,%ebx
f011b675:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b67c:	10 00 00 
f011b67f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b684:	0f b6 d0             	movzbl %al,%edx
f011b687:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b68d:	01 d0                	add    %edx,%eax
f011b68f:	48                   	dec    %eax
f011b690:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b696:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b69c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6a1:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b6a7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b6ad:	29 d0                	sub    %edx,%eax
f011b6af:	01 c3                	add    %eax,%ebx
f011b6b1:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b6b8:	10 00 00 
f011b6bb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b6c0:	0f b6 c0             	movzbl %al,%eax
f011b6c3:	c1 e0 04             	shl    $0x4,%eax
f011b6c6:	89 c2                	mov    %eax,%edx
f011b6c8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b6ce:	01 d0                	add    %edx,%eax
f011b6d0:	48                   	dec    %eax
f011b6d1:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b6d7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b6dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6e2:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b6e8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b6ee:	29 d0                	sub    %edx,%eax
f011b6f0:	01 d8                	add    %ebx,%eax
f011b6f2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b6f7:	39 c1                	cmp    %eax,%ecx
f011b6f9:	74 17                	je     f011b712 <test_kmalloc_bestfit2+0x103e>
f011b6fb:	83 ec 04             	sub    $0x4,%esp
f011b6fe:	68 70 a9 13 f0       	push   $0xf013a970
f011b703:	68 bc 02 00 00       	push   $0x2bc
f011b708:	68 56 a5 13 f0       	push   $0xf013a556
f011b70d:	e8 94 4a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b712:	e8 75 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b717:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b71a:	74 17                	je     f011b733 <test_kmalloc_bestfit2+0x105f>
f011b71c:	83 ec 04             	sub    $0x4,%esp
f011b71f:	68 70 a5 13 f0       	push   $0xf013a570
f011b724:	68 bd 02 00 00       	push   $0x2bd
f011b729:	68 56 a5 13 f0       	push   $0xf013a556
f011b72e:	e8 73 4a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b733:	e8 7a 09 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b738:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b73b:	29 c2                	sub    %eax,%edx
f011b73d:	89 d0                	mov    %edx,%eax
f011b73f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b744:	74 17                	je     f011b75d <test_kmalloc_bestfit2+0x1089>
f011b746:	83 ec 04             	sub    $0x4,%esp
f011b749:	68 50 aa 13 f0       	push   $0xf013aa50
f011b74e:	68 be 02 00 00       	push   $0x2be
f011b753:	68 56 a5 13 f0       	push   $0xf013a556
f011b758:	e8 49 4a fe ff       	call   f01001a6 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011b75d:	e8 50 09 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b762:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b765:	e8 22 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b76a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011b76d:	83 ec 0c             	sub    $0xc,%esp
f011b770:	68 00 fc 3f 00       	push   $0x3ffc00
f011b775:	e8 a8 bc fe ff       	call   f0107422 <kmalloc>
f011b77a:	83 c4 10             	add    $0x10,%esp
f011b77d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b783:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011b789:	89 c1                	mov    %eax,%ecx
f011b78b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b792:	10 00 00 
f011b795:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b79b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b7a0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b7a6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b7ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7b1:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b7b7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b7bd:	29 d0                	sub    %edx,%eax
f011b7bf:	89 c3                	mov    %eax,%ebx
f011b7c1:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b7c8:	10 00 00 
f011b7cb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b7d0:	0f b6 d0             	movzbl %al,%edx
f011b7d3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b7d9:	01 d0                	add    %edx,%eax
f011b7db:	48                   	dec    %eax
f011b7dc:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b7e2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b7e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7ed:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b7f3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b7f9:	29 d0                	sub    %edx,%eax
f011b7fb:	01 c3                	add    %eax,%ebx
f011b7fd:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b804:	10 00 00 
f011b807:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b80c:	0f b6 c0             	movzbl %al,%eax
f011b80f:	c1 e0 04             	shl    $0x4,%eax
f011b812:	89 c2                	mov    %eax,%edx
f011b814:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b81a:	01 d0                	add    %edx,%eax
f011b81c:	48                   	dec    %eax
f011b81d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b823:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b829:	ba 00 00 00 00       	mov    $0x0,%edx
f011b82e:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b834:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b83a:	29 d0                	sub    %edx,%eax
f011b83c:	01 d8                	add    %ebx,%eax
f011b83e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b843:	39 c1                	cmp    %eax,%ecx
f011b845:	74 17                	je     f011b85e <test_kmalloc_bestfit2+0x118a>
f011b847:	83 ec 04             	sub    $0x4,%esp
f011b84a:	68 70 a9 13 f0       	push   $0xf013a970
f011b84f:	68 c4 02 00 00       	push   $0x2c4
f011b854:	68 56 a5 13 f0       	push   $0xf013a556
f011b859:	e8 48 49 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b85e:	e8 29 84 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b863:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b866:	74 17                	je     f011b87f <test_kmalloc_bestfit2+0x11ab>
f011b868:	83 ec 04             	sub    $0x4,%esp
f011b86b:	68 70 a5 13 f0       	push   $0xf013a570
f011b870:	68 c5 02 00 00       	push   $0x2c5
f011b875:	68 56 a5 13 f0       	push   $0xf013a556
f011b87a:	e8 27 49 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b87f:	e8 2e 08 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011b884:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b887:	29 c2                	sub    %eax,%edx
f011b889:	89 d0                	mov    %edx,%eax
f011b88b:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b890:	74 17                	je     f011b8a9 <test_kmalloc_bestfit2+0x11d5>
f011b892:	83 ec 04             	sub    $0x4,%esp
f011b895:	68 50 aa 13 f0       	push   $0xf013aa50
f011b89a:	68 c6 02 00 00       	push   $0x2c6
f011b89f:	68 56 a5 13 f0       	push   $0xf013a556
f011b8a4:	e8 fd 48 fe ff       	call   f01001a6 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011b8a9:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011b8b0:	10 00 00 
f011b8b3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011b8b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b8be:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011b8c4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011b8ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8cf:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011b8d5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011b8db:	29 d0                	sub    %edx,%eax
f011b8dd:	89 c1                	mov    %eax,%ecx
f011b8df:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011b8e6:	10 00 00 
f011b8e9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b8ee:	0f b6 d0             	movzbl %al,%edx
f011b8f1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011b8f7:	01 d0                	add    %edx,%eax
f011b8f9:	48                   	dec    %eax
f011b8fa:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011b900:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011b906:	ba 00 00 00 00       	mov    $0x0,%edx
f011b90b:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011b911:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011b917:	29 d0                	sub    %edx,%eax
f011b919:	01 c1                	add    %eax,%ecx
f011b91b:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011b922:	10 00 00 
f011b925:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b92a:	0f b6 c0             	movzbl %al,%eax
f011b92d:	c1 e0 04             	shl    $0x4,%eax
f011b930:	89 c2                	mov    %eax,%edx
f011b932:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011b938:	01 d0                	add    %edx,%eax
f011b93a:	48                   	dec    %eax
f011b93b:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011b941:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011b947:	ba 00 00 00 00       	mov    $0x0,%edx
f011b94c:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011b952:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011b958:	29 d0                	sub    %edx,%eax
f011b95a:	01 c8                	add    %ecx,%eax
f011b95c:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011b961:	29 c2                	sub    %eax,%edx
f011b963:	89 d0                	mov    %edx,%eax
f011b965:	83 ec 0c             	sub    $0xc,%esp
f011b968:	50                   	push   %eax
f011b969:	e8 b4 ba fe ff       	call   f0107422 <kmalloc>
f011b96e:	83 c4 10             	add    $0x10,%esp
f011b971:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011b977:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011b97d:	85 c0                	test   %eax,%eax
f011b97f:	74 17                	je     f011b998 <test_kmalloc_bestfit2+0x12c4>
f011b981:	83 ec 04             	sub    $0x4,%esp
f011b984:	68 a0 aa 13 f0       	push   $0xf013aaa0
f011b989:	68 ce 02 00 00       	push   $0x2ce
f011b98e:	68 56 a5 13 f0       	push   $0xf013a556
f011b993:	e8 0e 48 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011b998:	83 ec 0c             	sub    $0xc,%esp
f011b99b:	68 04 ab 13 f0       	push   $0xf013ab04
f011b9a0:	e8 88 52 fe ff       	call   f0100c2d <cprintf>
f011b9a5:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011b9a8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b9ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b9b0:	5b                   	pop    %ebx
f011b9b1:	5f                   	pop    %edi
f011b9b2:	5d                   	pop    %ebp
f011b9b3:	c3                   	ret    

f011b9b4 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011b9b4:	55                   	push   %ebp
f011b9b5:	89 e5                	mov    %esp,%ebp
f011b9b7:	57                   	push   %edi
f011b9b8:	53                   	push   %ebx
f011b9b9:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b9bf:	83 ec 0c             	sub    $0xc,%esp
f011b9c2:	68 98 a4 13 f0       	push   $0xf013a498
f011b9c7:	e8 61 52 fe ff       	call   f0100c2d <cprintf>
f011b9cc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b9cf:	83 ec 0c             	sub    $0xc,%esp
f011b9d2:	68 c8 a4 13 f0       	push   $0xf013a4c8
f011b9d7:	e8 51 52 fe ff       	call   f0100c2d <cprintf>
f011b9dc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b9df:	83 ec 0c             	sub    $0xc,%esp
f011b9e2:	68 98 a4 13 f0       	push   $0xf013a498
f011b9e7:	e8 41 52 fe ff       	call   f0100c2d <cprintf>
f011b9ec:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b9ef:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b9f5:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b9fa:	b8 00 00 00 00       	mov    $0x0,%eax
f011b9ff:	89 d7                	mov    %edx,%edi
f011ba01:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba03:	e8 aa 06 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ba08:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ba0b:	e8 7c 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ba10:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011ba13:	83 ec 0c             	sub    $0xc,%esp
f011ba16:	68 00 fc 0f 00       	push   $0xffc00
f011ba1b:	e8 02 ba fe ff       	call   f0107422 <kmalloc>
f011ba20:	83 c4 10             	add    $0x10,%esp
f011ba23:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ba29:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ba2f:	89 c1                	mov    %eax,%ecx
f011ba31:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ba38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ba3b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ba40:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ba43:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ba46:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba4b:	f7 75 ec             	divl   -0x14(%ebp)
f011ba4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ba51:	29 d0                	sub    %edx,%eax
f011ba53:	89 c3                	mov    %eax,%ebx
f011ba55:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ba5c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ba61:	0f b6 d0             	movzbl %al,%edx
f011ba64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ba67:	01 d0                	add    %edx,%eax
f011ba69:	48                   	dec    %eax
f011ba6a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ba6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ba70:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba75:	f7 75 e4             	divl   -0x1c(%ebp)
f011ba78:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ba7b:	29 d0                	sub    %edx,%eax
f011ba7d:	01 c3                	add    %eax,%ebx
f011ba7f:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ba86:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ba8b:	0f b6 c0             	movzbl %al,%eax
f011ba8e:	c1 e0 04             	shl    $0x4,%eax
f011ba91:	89 c2                	mov    %eax,%edx
f011ba93:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ba96:	01 d0                	add    %edx,%eax
f011ba98:	48                   	dec    %eax
f011ba99:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ba9c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ba9f:	ba 00 00 00 00       	mov    $0x0,%edx
f011baa4:	f7 75 dc             	divl   -0x24(%ebp)
f011baa7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011baaa:	29 d0                	sub    %edx,%eax
f011baac:	01 d8                	add    %ebx,%eax
f011baae:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bab3:	39 c1                	cmp    %eax,%ecx
f011bab5:	74 17                	je     f011bace <test_kmalloc_firstfit1+0x11a>
f011bab7:	83 ec 04             	sub    $0x4,%esp
f011baba:	68 70 a9 13 f0       	push   $0xf013a970
f011babf:	68 e6 02 00 00       	push   $0x2e6
f011bac4:	68 56 a5 13 f0       	push   $0xf013a556
f011bac9:	e8 d8 46 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bace:	e8 b9 81 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bad3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bad6:	74 17                	je     f011baef <test_kmalloc_firstfit1+0x13b>
f011bad8:	83 ec 04             	sub    $0x4,%esp
f011badb:	68 70 a5 13 f0       	push   $0xf013a570
f011bae0:	68 e7 02 00 00       	push   $0x2e7
f011bae5:	68 56 a5 13 f0       	push   $0xf013a556
f011baea:	e8 b7 46 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011baef:	e8 be 05 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011baf4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011baf7:	29 c2                	sub    %eax,%edx
f011baf9:	89 d0                	mov    %edx,%eax
f011bafb:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bb00:	74 17                	je     f011bb19 <test_kmalloc_firstfit1+0x165>
f011bb02:	83 ec 04             	sub    $0x4,%esp
f011bb05:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011bb0a:	68 e8 02 00 00       	push   $0x2e8
f011bb0f:	68 56 a5 13 f0       	push   $0xf013a556
f011bb14:	e8 8d 46 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bb19:	e8 94 05 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011bb1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bb21:	e8 66 81 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bb26:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011bb29:	83 ec 0c             	sub    $0xc,%esp
f011bb2c:	68 00 fc 0f 00       	push   $0xffc00
f011bb31:	e8 ec b8 fe ff       	call   f0107422 <kmalloc>
f011bb36:	83 c4 10             	add    $0x10,%esp
f011bb39:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011bb3f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bb45:	89 c1                	mov    %eax,%ecx
f011bb47:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011bb4e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bb51:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bb56:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011bb59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bb5c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb61:	f7 75 d4             	divl   -0x2c(%ebp)
f011bb64:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bb67:	29 d0                	sub    %edx,%eax
f011bb69:	89 c3                	mov    %eax,%ebx
f011bb6b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011bb72:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bb77:	0f b6 d0             	movzbl %al,%edx
f011bb7a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bb7d:	01 d0                	add    %edx,%eax
f011bb7f:	48                   	dec    %eax
f011bb80:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011bb83:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bb86:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb8b:	f7 75 cc             	divl   -0x34(%ebp)
f011bb8e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bb91:	29 d0                	sub    %edx,%eax
f011bb93:	01 c3                	add    %eax,%ebx
f011bb95:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bb9c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bba1:	0f b6 c0             	movzbl %al,%eax
f011bba4:	c1 e0 04             	shl    $0x4,%eax
f011bba7:	89 c2                	mov    %eax,%edx
f011bba9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bbac:	01 d0                	add    %edx,%eax
f011bbae:	48                   	dec    %eax
f011bbaf:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bbb2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bbb5:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbba:	f7 75 c4             	divl   -0x3c(%ebp)
f011bbbd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bbc0:	29 d0                	sub    %edx,%eax
f011bbc2:	01 d8                	add    %ebx,%eax
f011bbc4:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011bbc9:	39 c1                	cmp    %eax,%ecx
f011bbcb:	74 17                	je     f011bbe4 <test_kmalloc_firstfit1+0x230>
f011bbcd:	83 ec 04             	sub    $0x4,%esp
f011bbd0:	68 70 a9 13 f0       	push   $0xf013a970
f011bbd5:	68 ee 02 00 00       	push   $0x2ee
f011bbda:	68 56 a5 13 f0       	push   $0xf013a556
f011bbdf:	e8 c2 45 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbe4:	e8 a3 80 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bbe9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bbec:	74 17                	je     f011bc05 <test_kmalloc_firstfit1+0x251>
f011bbee:	83 ec 04             	sub    $0x4,%esp
f011bbf1:	68 70 a5 13 f0       	push   $0xf013a570
f011bbf6:	68 ef 02 00 00       	push   $0x2ef
f011bbfb:	68 56 a5 13 f0       	push   $0xf013a556
f011bc00:	e8 a1 45 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011bc05:	e8 a8 04 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011bc0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bc0d:	29 c2                	sub    %eax,%edx
f011bc0f:	89 d0                	mov    %edx,%eax
f011bc11:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bc16:	74 17                	je     f011bc2f <test_kmalloc_firstfit1+0x27b>
f011bc18:	83 ec 04             	sub    $0x4,%esp
f011bc1b:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011bc20:	68 f0 02 00 00       	push   $0x2f0
f011bc25:	68 56 a5 13 f0       	push   $0xf013a556
f011bc2a:	e8 77 45 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bc2f:	e8 7e 04 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011bc34:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bc37:	e8 50 80 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bc3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011bc3f:	83 ec 0c             	sub    $0xc,%esp
f011bc42:	68 00 fc 0f 00       	push   $0xffc00
f011bc47:	e8 d6 b7 fe ff       	call   f0107422 <kmalloc>
f011bc4c:	83 c4 10             	add    $0x10,%esp
f011bc4f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011bc55:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bc5b:	89 c1                	mov    %eax,%ecx
f011bc5d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bc64:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bc67:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bc6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bc72:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc77:	f7 75 bc             	divl   -0x44(%ebp)
f011bc7a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bc7d:	29 d0                	sub    %edx,%eax
f011bc7f:	89 c3                	mov    %eax,%ebx
f011bc81:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bc88:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bc8d:	0f b6 d0             	movzbl %al,%edx
f011bc90:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bc93:	01 d0                	add    %edx,%eax
f011bc95:	48                   	dec    %eax
f011bc96:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bc99:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bc9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bca1:	f7 75 b4             	divl   -0x4c(%ebp)
f011bca4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bca7:	29 d0                	sub    %edx,%eax
f011bca9:	01 c3                	add    %eax,%ebx
f011bcab:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bcb2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bcb7:	0f b6 c0             	movzbl %al,%eax
f011bcba:	c1 e0 04             	shl    $0x4,%eax
f011bcbd:	89 c2                	mov    %eax,%edx
f011bcbf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bcc2:	01 d0                	add    %edx,%eax
f011bcc4:	48                   	dec    %eax
f011bcc5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bcc8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bccb:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcd0:	f7 75 ac             	divl   -0x54(%ebp)
f011bcd3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bcd6:	29 d0                	sub    %edx,%eax
f011bcd8:	01 d8                	add    %ebx,%eax
f011bcda:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bcdf:	39 c1                	cmp    %eax,%ecx
f011bce1:	74 17                	je     f011bcfa <test_kmalloc_firstfit1+0x346>
f011bce3:	83 ec 04             	sub    $0x4,%esp
f011bce6:	68 70 a9 13 f0       	push   $0xf013a970
f011bceb:	68 f6 02 00 00       	push   $0x2f6
f011bcf0:	68 56 a5 13 f0       	push   $0xf013a556
f011bcf5:	e8 ac 44 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcfa:	e8 8d 7f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bcff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bd02:	74 17                	je     f011bd1b <test_kmalloc_firstfit1+0x367>
f011bd04:	83 ec 04             	sub    $0x4,%esp
f011bd07:	68 70 a5 13 f0       	push   $0xf013a570
f011bd0c:	68 f7 02 00 00       	push   $0x2f7
f011bd11:	68 56 a5 13 f0       	push   $0xf013a556
f011bd16:	e8 8b 44 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011bd1b:	e8 92 03 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011bd20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bd23:	29 c2                	sub    %eax,%edx
f011bd25:	89 d0                	mov    %edx,%eax
f011bd27:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bd2c:	74 17                	je     f011bd45 <test_kmalloc_firstfit1+0x391>
f011bd2e:	83 ec 04             	sub    $0x4,%esp
f011bd31:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011bd36:	68 f8 02 00 00       	push   $0x2f8
f011bd3b:	68 56 a5 13 f0       	push   $0xf013a556
f011bd40:	e8 61 44 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd45:	e8 68 03 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011bd4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bd4d:	e8 3a 7f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bd52:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011bd55:	83 ec 0c             	sub    $0xc,%esp
f011bd58:	68 00 fc 0f 00       	push   $0xffc00
f011bd5d:	e8 c0 b6 fe ff       	call   f0107422 <kmalloc>
f011bd62:	83 c4 10             	add    $0x10,%esp
f011bd65:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011bd6b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011bd71:	89 c1                	mov    %eax,%ecx
f011bd73:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011bd7a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bd7d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd82:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011bd85:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bd88:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd8d:	f7 75 a4             	divl   -0x5c(%ebp)
f011bd90:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bd93:	29 d0                	sub    %edx,%eax
f011bd95:	89 c3                	mov    %eax,%ebx
f011bd97:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bd9e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bda3:	0f b6 d0             	movzbl %al,%edx
f011bda6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bda9:	01 d0                	add    %edx,%eax
f011bdab:	48                   	dec    %eax
f011bdac:	89 45 98             	mov    %eax,-0x68(%ebp)
f011bdaf:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bdb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdb7:	f7 75 9c             	divl   -0x64(%ebp)
f011bdba:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bdbd:	29 d0                	sub    %edx,%eax
f011bdbf:	01 c3                	add    %eax,%ebx
f011bdc1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011bdc8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bdcd:	0f b6 c0             	movzbl %al,%eax
f011bdd0:	c1 e0 04             	shl    $0x4,%eax
f011bdd3:	89 c2                	mov    %eax,%edx
f011bdd5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bdd8:	01 d0                	add    %edx,%eax
f011bdda:	48                   	dec    %eax
f011bddb:	89 45 90             	mov    %eax,-0x70(%ebp)
f011bdde:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bde1:	ba 00 00 00 00       	mov    $0x0,%edx
f011bde6:	f7 75 94             	divl   -0x6c(%ebp)
f011bde9:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bdec:	29 d0                	sub    %edx,%eax
f011bdee:	01 d8                	add    %ebx,%eax
f011bdf0:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011bdf5:	39 c1                	cmp    %eax,%ecx
f011bdf7:	74 17                	je     f011be10 <test_kmalloc_firstfit1+0x45c>
f011bdf9:	83 ec 04             	sub    $0x4,%esp
f011bdfc:	68 70 a9 13 f0       	push   $0xf013a970
f011be01:	68 fe 02 00 00       	push   $0x2fe
f011be06:	68 56 a5 13 f0       	push   $0xf013a556
f011be0b:	e8 96 43 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be10:	e8 77 7e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011be15:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011be18:	74 17                	je     f011be31 <test_kmalloc_firstfit1+0x47d>
f011be1a:	83 ec 04             	sub    $0x4,%esp
f011be1d:	68 70 a5 13 f0       	push   $0xf013a570
f011be22:	68 ff 02 00 00       	push   $0x2ff
f011be27:	68 56 a5 13 f0       	push   $0xf013a556
f011be2c:	e8 75 43 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011be31:	e8 7c 02 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011be36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011be39:	29 c2                	sub    %eax,%edx
f011be3b:	89 d0                	mov    %edx,%eax
f011be3d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011be42:	74 17                	je     f011be5b <test_kmalloc_firstfit1+0x4a7>
f011be44:	83 ec 04             	sub    $0x4,%esp
f011be47:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011be4c:	68 00 03 00 00       	push   $0x300
f011be51:	68 56 a5 13 f0       	push   $0xf013a556
f011be56:	e8 4b 43 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011be5b:	e8 52 02 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011be60:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be63:	e8 24 7e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011be68:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011be6b:	83 ec 0c             	sub    $0xc,%esp
f011be6e:	68 00 fc 1f 00       	push   $0x1ffc00
f011be73:	e8 aa b5 fe ff       	call   f0107422 <kmalloc>
f011be78:	83 c4 10             	add    $0x10,%esp
f011be7b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011be81:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011be87:	89 c1                	mov    %eax,%ecx
f011be89:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011be90:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011be93:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be98:	89 45 88             	mov    %eax,-0x78(%ebp)
f011be9b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011be9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bea3:	f7 75 8c             	divl   -0x74(%ebp)
f011bea6:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bea9:	29 d0                	sub    %edx,%eax
f011beab:	89 c3                	mov    %eax,%ebx
f011bead:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011beb4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011beb9:	0f b6 d0             	movzbl %al,%edx
f011bebc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bebf:	01 d0                	add    %edx,%eax
f011bec1:	48                   	dec    %eax
f011bec2:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bec5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bec8:	ba 00 00 00 00       	mov    $0x0,%edx
f011becd:	f7 75 84             	divl   -0x7c(%ebp)
f011bed0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bed3:	29 d0                	sub    %edx,%eax
f011bed5:	01 c3                	add    %eax,%ebx
f011bed7:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bede:	10 00 00 
f011bee1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bee6:	0f b6 c0             	movzbl %al,%eax
f011bee9:	c1 e0 04             	shl    $0x4,%eax
f011beec:	89 c2                	mov    %eax,%edx
f011beee:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bef4:	01 d0                	add    %edx,%eax
f011bef6:	48                   	dec    %eax
f011bef7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011befd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf03:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf08:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bf0e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf14:	29 d0                	sub    %edx,%eax
f011bf16:	01 d8                	add    %ebx,%eax
f011bf18:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011bf1d:	39 c1                	cmp    %eax,%ecx
f011bf1f:	74 17                	je     f011bf38 <test_kmalloc_firstfit1+0x584>
f011bf21:	83 ec 04             	sub    $0x4,%esp
f011bf24:	68 70 a9 13 f0       	push   $0xf013a970
f011bf29:	68 06 03 00 00       	push   $0x306
f011bf2e:	68 56 a5 13 f0       	push   $0xf013a556
f011bf33:	e8 6e 42 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf38:	e8 4f 7d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bf3d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bf40:	74 17                	je     f011bf59 <test_kmalloc_firstfit1+0x5a5>
f011bf42:	83 ec 04             	sub    $0x4,%esp
f011bf45:	68 70 a5 13 f0       	push   $0xf013a570
f011bf4a:	68 07 03 00 00       	push   $0x307
f011bf4f:	68 56 a5 13 f0       	push   $0xf013a556
f011bf54:	e8 4d 42 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011bf59:	e8 54 01 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011bf5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bf61:	29 c2                	sub    %eax,%edx
f011bf63:	89 d0                	mov    %edx,%eax
f011bf65:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bf6a:	74 17                	je     f011bf83 <test_kmalloc_firstfit1+0x5cf>
f011bf6c:	83 ec 04             	sub    $0x4,%esp
f011bf6f:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011bf74:	68 08 03 00 00       	push   $0x308
f011bf79:	68 56 a5 13 f0       	push   $0xf013a556
f011bf7e:	e8 23 42 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bf83:	e8 2a 01 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011bf88:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bf8b:	e8 fc 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bf90:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011bf93:	83 ec 0c             	sub    $0xc,%esp
f011bf96:	68 00 fc 1f 00       	push   $0x1ffc00
f011bf9b:	e8 82 b4 fe ff       	call   f0107422 <kmalloc>
f011bfa0:	83 c4 10             	add    $0x10,%esp
f011bfa3:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011bfa9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bfaf:	89 c1                	mov    %eax,%ecx
f011bfb1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bfb8:	10 00 00 
f011bfbb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bfc1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bfc6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bfcc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bfd2:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfd7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bfdd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bfe3:	29 d0                	sub    %edx,%eax
f011bfe5:	89 c3                	mov    %eax,%ebx
f011bfe7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bfee:	10 00 00 
f011bff1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bff6:	0f b6 d0             	movzbl %al,%edx
f011bff9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bfff:	01 d0                	add    %edx,%eax
f011c001:	48                   	dec    %eax
f011c002:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c008:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c00e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c013:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c019:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c01f:	29 d0                	sub    %edx,%eax
f011c021:	01 c3                	add    %eax,%ebx
f011c023:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c02a:	10 00 00 
f011c02d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c032:	0f b6 c0             	movzbl %al,%eax
f011c035:	c1 e0 04             	shl    $0x4,%eax
f011c038:	89 c2                	mov    %eax,%edx
f011c03a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c040:	01 d0                	add    %edx,%eax
f011c042:	48                   	dec    %eax
f011c043:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c049:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c04f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c054:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c05a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c060:	29 d0                	sub    %edx,%eax
f011c062:	01 d8                	add    %ebx,%eax
f011c064:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c069:	39 c1                	cmp    %eax,%ecx
f011c06b:	74 17                	je     f011c084 <test_kmalloc_firstfit1+0x6d0>
f011c06d:	83 ec 04             	sub    $0x4,%esp
f011c070:	68 70 a9 13 f0       	push   $0xf013a970
f011c075:	68 0e 03 00 00       	push   $0x30e
f011c07a:	68 56 a5 13 f0       	push   $0xf013a556
f011c07f:	e8 22 41 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c084:	e8 03 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c089:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c08c:	74 17                	je     f011c0a5 <test_kmalloc_firstfit1+0x6f1>
f011c08e:	83 ec 04             	sub    $0x4,%esp
f011c091:	68 70 a5 13 f0       	push   $0xf013a570
f011c096:	68 0f 03 00 00       	push   $0x30f
f011c09b:	68 56 a5 13 f0       	push   $0xf013a556
f011c0a0:	e8 01 41 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c0a5:	e8 08 00 ff ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c0aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c0ad:	29 c2                	sub    %eax,%edx
f011c0af:	89 d0                	mov    %edx,%eax
f011c0b1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c0b6:	74 17                	je     f011c0cf <test_kmalloc_firstfit1+0x71b>
f011c0b8:	83 ec 04             	sub    $0x4,%esp
f011c0bb:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011c0c0:	68 10 03 00 00       	push   $0x310
f011c0c5:	68 56 a5 13 f0       	push   $0xf013a556
f011c0ca:	e8 d7 40 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0cf:	e8 de ff fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c0d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c0d7:	e8 b0 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c0dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c0df:	83 ec 0c             	sub    $0xc,%esp
f011c0e2:	68 00 fc 2f 00       	push   $0x2ffc00
f011c0e7:	e8 36 b3 fe ff       	call   f0107422 <kmalloc>
f011c0ec:	83 c4 10             	add    $0x10,%esp
f011c0ef:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c0f5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c0fb:	89 c1                	mov    %eax,%ecx
f011c0fd:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c104:	10 00 00 
f011c107:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c10d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c112:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c118:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c11e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c123:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c129:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c12f:	29 d0                	sub    %edx,%eax
f011c131:	89 c3                	mov    %eax,%ebx
f011c133:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c13a:	10 00 00 
f011c13d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c142:	0f b6 d0             	movzbl %al,%edx
f011c145:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c14b:	01 d0                	add    %edx,%eax
f011c14d:	48                   	dec    %eax
f011c14e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c154:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c15a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c15f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c165:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c16b:	29 d0                	sub    %edx,%eax
f011c16d:	01 c3                	add    %eax,%ebx
f011c16f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c176:	10 00 00 
f011c179:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c17e:	0f b6 c0             	movzbl %al,%eax
f011c181:	c1 e0 04             	shl    $0x4,%eax
f011c184:	89 c2                	mov    %eax,%edx
f011c186:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c18c:	01 d0                	add    %edx,%eax
f011c18e:	48                   	dec    %eax
f011c18f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c195:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c19b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1a0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c1a6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c1ac:	29 d0                	sub    %edx,%eax
f011c1ae:	01 d8                	add    %ebx,%eax
f011c1b0:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c1b5:	39 c1                	cmp    %eax,%ecx
f011c1b7:	74 17                	je     f011c1d0 <test_kmalloc_firstfit1+0x81c>
f011c1b9:	83 ec 04             	sub    $0x4,%esp
f011c1bc:	68 70 a9 13 f0       	push   $0xf013a970
f011c1c1:	68 16 03 00 00       	push   $0x316
f011c1c6:	68 56 a5 13 f0       	push   $0xf013a556
f011c1cb:	e8 d6 3f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1d0:	e8 b7 7a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c1d5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c1d8:	74 17                	je     f011c1f1 <test_kmalloc_firstfit1+0x83d>
f011c1da:	83 ec 04             	sub    $0x4,%esp
f011c1dd:	68 70 a5 13 f0       	push   $0xf013a570
f011c1e2:	68 17 03 00 00       	push   $0x317
f011c1e7:	68 56 a5 13 f0       	push   $0xf013a556
f011c1ec:	e8 b5 3f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c1f1:	e8 bc fe fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c1f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c1f9:	29 c2                	sub    %eax,%edx
f011c1fb:	89 d0                	mov    %edx,%eax
f011c1fd:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c202:	74 17                	je     f011c21b <test_kmalloc_firstfit1+0x867>
f011c204:	83 ec 04             	sub    $0x4,%esp
f011c207:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011c20c:	68 18 03 00 00       	push   $0x318
f011c211:	68 56 a5 13 f0       	push   $0xf013a556
f011c216:	e8 8b 3f fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c21b:	e8 92 fe fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c220:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c223:	e8 64 7a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c228:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011c22b:	83 ec 0c             	sub    $0xc,%esp
f011c22e:	68 00 fc 2f 00       	push   $0x2ffc00
f011c233:	e8 ea b1 fe ff       	call   f0107422 <kmalloc>
f011c238:	83 c4 10             	add    $0x10,%esp
f011c23b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011c241:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c247:	89 c1                	mov    %eax,%ecx
f011c249:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c250:	10 00 00 
f011c253:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c259:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c25e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c264:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c26a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c26f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c275:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c27b:	29 d0                	sub    %edx,%eax
f011c27d:	89 c3                	mov    %eax,%ebx
f011c27f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c286:	10 00 00 
f011c289:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c28e:	0f b6 d0             	movzbl %al,%edx
f011c291:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c297:	01 d0                	add    %edx,%eax
f011c299:	48                   	dec    %eax
f011c29a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c2a0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c2a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2ab:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c2b1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c2b7:	29 d0                	sub    %edx,%eax
f011c2b9:	01 c3                	add    %eax,%ebx
f011c2bb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c2c2:	10 00 00 
f011c2c5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c2ca:	0f b6 c0             	movzbl %al,%eax
f011c2cd:	c1 e0 04             	shl    $0x4,%eax
f011c2d0:	89 c2                	mov    %eax,%edx
f011c2d2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c2d8:	01 d0                	add    %edx,%eax
f011c2da:	48                   	dec    %eax
f011c2db:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c2e1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c2e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2ec:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c2f2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c2f8:	29 d0                	sub    %edx,%eax
f011c2fa:	01 d8                	add    %ebx,%eax
f011c2fc:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011c301:	39 c1                	cmp    %eax,%ecx
f011c303:	74 17                	je     f011c31c <test_kmalloc_firstfit1+0x968>
f011c305:	83 ec 04             	sub    $0x4,%esp
f011c308:	68 70 a9 13 f0       	push   $0xf013a970
f011c30d:	68 1e 03 00 00       	push   $0x31e
f011c312:	68 56 a5 13 f0       	push   $0xf013a556
f011c317:	e8 8a 3e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c31c:	e8 6b 79 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c321:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c324:	74 17                	je     f011c33d <test_kmalloc_firstfit1+0x989>
f011c326:	83 ec 04             	sub    $0x4,%esp
f011c329:	68 70 a5 13 f0       	push   $0xf013a570
f011c32e:	68 1f 03 00 00       	push   $0x31f
f011c333:	68 56 a5 13 f0       	push   $0xf013a556
f011c338:	e8 69 3e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c33d:	e8 70 fd fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c342:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c345:	29 c2                	sub    %eax,%edx
f011c347:	89 d0                	mov    %edx,%eax
f011c349:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c34e:	74 17                	je     f011c367 <test_kmalloc_firstfit1+0x9b3>
f011c350:	83 ec 04             	sub    $0x4,%esp
f011c353:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011c358:	68 20 03 00 00       	push   $0x320
f011c35d:	68 56 a5 13 f0       	push   $0xf013a556
f011c362:	e8 3f 3e fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c367:	e8 46 fd fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c36c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c36f:	e8 18 79 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c374:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011c377:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c37d:	83 ec 0c             	sub    $0xc,%esp
f011c380:	50                   	push   %eax
f011c381:	e8 b6 b0 fe ff       	call   f010743c <kfree>
f011c386:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c389:	e8 fe 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c38e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c391:	74 17                	je     f011c3aa <test_kmalloc_firstfit1+0x9f6>
f011c393:	83 ec 04             	sub    $0x4,%esp
f011c396:	68 70 a5 13 f0       	push   $0xf013a570
f011c39b:	68 29 03 00 00       	push   $0x329
f011c3a0:	68 56 a5 13 f0       	push   $0xf013a556
f011c3a5:	e8 fc 3d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c3aa:	e8 03 fd fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c3af:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c3b2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c3b7:	74 17                	je     f011c3d0 <test_kmalloc_firstfit1+0xa1c>
f011c3b9:	83 ec 04             	sub    $0x4,%esp
f011c3bc:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011c3c1:	68 2a 03 00 00       	push   $0x32a
f011c3c6:	68 56 a5 13 f0       	push   $0xf013a556
f011c3cb:	e8 d6 3d fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c3d0:	e8 dd fc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c3d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c3d8:	e8 af 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c3dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011c3e0:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c3e6:	83 ec 0c             	sub    $0xc,%esp
f011c3e9:	50                   	push   %eax
f011c3ea:	e8 4d b0 fe ff       	call   f010743c <kfree>
f011c3ef:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3f2:	e8 95 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c3f7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c3fa:	74 17                	je     f011c413 <test_kmalloc_firstfit1+0xa5f>
f011c3fc:	83 ec 04             	sub    $0x4,%esp
f011c3ff:	68 70 a5 13 f0       	push   $0xf013a570
f011c404:	68 30 03 00 00       	push   $0x330
f011c409:	68 56 a5 13 f0       	push   $0xf013a556
f011c40e:	e8 93 3d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011c413:	e8 9a fc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c418:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c41b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c420:	74 17                	je     f011c439 <test_kmalloc_firstfit1+0xa85>
f011c422:	83 ec 04             	sub    $0x4,%esp
f011c425:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011c42a:	68 31 03 00 00       	push   $0x331
f011c42f:	68 56 a5 13 f0       	push   $0xf013a556
f011c434:	e8 6d 3d fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c439:	e8 74 fc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c43e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c441:	e8 46 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c446:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011c449:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c44f:	83 ec 0c             	sub    $0xc,%esp
f011c452:	50                   	push   %eax
f011c453:	e8 e4 af fe ff       	call   f010743c <kfree>
f011c458:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c45b:	e8 2c 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c460:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c463:	74 17                	je     f011c47c <test_kmalloc_firstfit1+0xac8>
f011c465:	83 ec 04             	sub    $0x4,%esp
f011c468:	68 70 a5 13 f0       	push   $0xf013a570
f011c46d:	68 37 03 00 00       	push   $0x337
f011c472:	68 56 a5 13 f0       	push   $0xf013a556
f011c477:	e8 2a 3d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011c47c:	e8 31 fc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c481:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c484:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c489:	74 17                	je     f011c4a2 <test_kmalloc_firstfit1+0xaee>
f011c48b:	83 ec 04             	sub    $0x4,%esp
f011c48e:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011c493:	68 38 03 00 00       	push   $0x338
f011c498:	68 56 a5 13 f0       	push   $0xf013a556
f011c49d:	e8 04 3d fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c4a2:	e8 0b fc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c4a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c4aa:	e8 dd 77 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c4af:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011c4b2:	83 ec 0c             	sub    $0xc,%esp
f011c4b5:	68 00 fc 07 00       	push   $0x7fc00
f011c4ba:	e8 63 af fe ff       	call   f0107422 <kmalloc>
f011c4bf:	83 c4 10             	add    $0x10,%esp
f011c4c2:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c4c8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c4ce:	89 c1                	mov    %eax,%ecx
f011c4d0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c4d7:	10 00 00 
f011c4da:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c4e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c4e5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c4eb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c4f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4f6:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c4fc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c502:	29 d0                	sub    %edx,%eax
f011c504:	89 c3                	mov    %eax,%ebx
f011c506:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c50d:	10 00 00 
f011c510:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c515:	0f b6 d0             	movzbl %al,%edx
f011c518:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c51e:	01 d0                	add    %edx,%eax
f011c520:	48                   	dec    %eax
f011c521:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c527:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c52d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c532:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c538:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c53e:	29 d0                	sub    %edx,%eax
f011c540:	01 c3                	add    %eax,%ebx
f011c542:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c549:	10 00 00 
f011c54c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c551:	0f b6 c0             	movzbl %al,%eax
f011c554:	c1 e0 04             	shl    $0x4,%eax
f011c557:	89 c2                	mov    %eax,%edx
f011c559:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c55f:	01 d0                	add    %edx,%eax
f011c561:	48                   	dec    %eax
f011c562:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c568:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c56e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c573:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c579:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c57f:	29 d0                	sub    %edx,%eax
f011c581:	01 d8                	add    %ebx,%eax
f011c583:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c588:	39 c1                	cmp    %eax,%ecx
f011c58a:	74 17                	je     f011c5a3 <test_kmalloc_firstfit1+0xbef>
f011c58c:	83 ec 04             	sub    $0x4,%esp
f011c58f:	68 70 a9 13 f0       	push   $0xf013a970
f011c594:	68 41 03 00 00       	push   $0x341
f011c599:	68 56 a5 13 f0       	push   $0xf013a556
f011c59e:	e8 03 3c fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5a3:	e8 e4 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c5a8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c5ab:	74 17                	je     f011c5c4 <test_kmalloc_firstfit1+0xc10>
f011c5ad:	83 ec 04             	sub    $0x4,%esp
f011c5b0:	68 70 a5 13 f0       	push   $0xf013a570
f011c5b5:	68 42 03 00 00       	push   $0x342
f011c5ba:	68 56 a5 13 f0       	push   $0xf013a556
f011c5bf:	e8 e2 3b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011c5c4:	e8 e9 fa fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c5c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c5cc:	29 c2                	sub    %eax,%edx
f011c5ce:	89 d0                	mov    %edx,%eax
f011c5d0:	3d 80 00 00 00       	cmp    $0x80,%eax
f011c5d5:	74 17                	je     f011c5ee <test_kmalloc_firstfit1+0xc3a>
f011c5d7:	83 ec 04             	sub    $0x4,%esp
f011c5da:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011c5df:	68 43 03 00 00       	push   $0x343
f011c5e4:	68 56 a5 13 f0       	push   $0xf013a556
f011c5e9:	e8 b8 3b fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011c5ee:	e8 bf fa fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c5f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c5f6:	e8 91 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c5fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011c5fe:	83 ec 0c             	sub    $0xc,%esp
f011c601:	68 00 fc 0f 00       	push   $0xffc00
f011c606:	e8 17 ae fe ff       	call   f0107422 <kmalloc>
f011c60b:	83 c4 10             	add    $0x10,%esp
f011c60e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c614:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c61a:	89 c1                	mov    %eax,%ecx
f011c61c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c623:	10 00 00 
f011c626:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c62c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c631:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c637:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c63d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c642:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c648:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c64e:	29 d0                	sub    %edx,%eax
f011c650:	89 c3                	mov    %eax,%ebx
f011c652:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c659:	10 00 00 
f011c65c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c661:	0f b6 d0             	movzbl %al,%edx
f011c664:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c66a:	01 d0                	add    %edx,%eax
f011c66c:	48                   	dec    %eax
f011c66d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c673:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c679:	ba 00 00 00 00       	mov    $0x0,%edx
f011c67e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c684:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c68a:	29 d0                	sub    %edx,%eax
f011c68c:	01 c3                	add    %eax,%ebx
f011c68e:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c695:	10 00 00 
f011c698:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c69d:	0f b6 c0             	movzbl %al,%eax
f011c6a0:	c1 e0 04             	shl    $0x4,%eax
f011c6a3:	89 c2                	mov    %eax,%edx
f011c6a5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c6ab:	01 d0                	add    %edx,%eax
f011c6ad:	48                   	dec    %eax
f011c6ae:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c6b4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c6ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6bf:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c6c5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c6cb:	29 d0                	sub    %edx,%eax
f011c6cd:	01 d8                	add    %ebx,%eax
f011c6cf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c6d4:	39 c1                	cmp    %eax,%ecx
f011c6d6:	74 17                	je     f011c6ef <test_kmalloc_firstfit1+0xd3b>
f011c6d8:	83 ec 04             	sub    $0x4,%esp
f011c6db:	68 70 a9 13 f0       	push   $0xf013a970
f011c6e0:	68 49 03 00 00       	push   $0x349
f011c6e5:	68 56 a5 13 f0       	push   $0xf013a556
f011c6ea:	e8 b7 3a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6ef:	e8 98 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c6f4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c6f7:	74 17                	je     f011c710 <test_kmalloc_firstfit1+0xd5c>
f011c6f9:	83 ec 04             	sub    $0x4,%esp
f011c6fc:	68 70 a5 13 f0       	push   $0xf013a570
f011c701:	68 4a 03 00 00       	push   $0x34a
f011c706:	68 56 a5 13 f0       	push   $0xf013a556
f011c70b:	e8 96 3a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c710:	e8 9d f9 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c715:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c718:	29 c2                	sub    %eax,%edx
f011c71a:	89 d0                	mov    %edx,%eax
f011c71c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c721:	74 17                	je     f011c73a <test_kmalloc_firstfit1+0xd86>
f011c723:	83 ec 04             	sub    $0x4,%esp
f011c726:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011c72b:	68 4b 03 00 00       	push   $0x34b
f011c730:	68 56 a5 13 f0       	push   $0xf013a556
f011c735:	e8 6c 3a fe ff       	call   f01001a6 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c73a:	e8 73 f9 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c73f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c742:	e8 45 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c747:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011c74a:	83 ec 0c             	sub    $0xc,%esp
f011c74d:	68 00 fc 03 00       	push   $0x3fc00
f011c752:	e8 cb ac fe ff       	call   f0107422 <kmalloc>
f011c757:	83 c4 10             	add    $0x10,%esp
f011c75a:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011c760:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c766:	89 c1                	mov    %eax,%ecx
f011c768:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c76f:	10 00 00 
f011c772:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c778:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c77d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c783:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c789:	ba 00 00 00 00       	mov    $0x0,%edx
f011c78e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c794:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c79a:	29 d0                	sub    %edx,%eax
f011c79c:	89 c3                	mov    %eax,%ebx
f011c79e:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c7a5:	10 00 00 
f011c7a8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c7ad:	0f b6 d0             	movzbl %al,%edx
f011c7b0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c7b6:	01 d0                	add    %edx,%eax
f011c7b8:	48                   	dec    %eax
f011c7b9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c7bf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c7c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7ca:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c7d0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c7d6:	29 d0                	sub    %edx,%eax
f011c7d8:	01 c3                	add    %eax,%ebx
f011c7da:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c7e1:	10 00 00 
f011c7e4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c7e9:	0f b6 c0             	movzbl %al,%eax
f011c7ec:	c1 e0 04             	shl    $0x4,%eax
f011c7ef:	89 c2                	mov    %eax,%edx
f011c7f1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c7f7:	01 d0                	add    %edx,%eax
f011c7f9:	48                   	dec    %eax
f011c7fa:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c800:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c806:	ba 00 00 00 00       	mov    $0x0,%edx
f011c80b:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c811:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c817:	29 d0                	sub    %edx,%eax
f011c819:	01 d8                	add    %ebx,%eax
f011c81b:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011c820:	39 c1                	cmp    %eax,%ecx
f011c822:	74 17                	je     f011c83b <test_kmalloc_firstfit1+0xe87>
f011c824:	83 ec 04             	sub    $0x4,%esp
f011c827:	68 70 a9 13 f0       	push   $0xf013a970
f011c82c:	68 52 03 00 00       	push   $0x352
f011c831:	68 56 a5 13 f0       	push   $0xf013a556
f011c836:	e8 6b 39 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c83b:	e8 4c 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c840:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c843:	74 17                	je     f011c85c <test_kmalloc_firstfit1+0xea8>
f011c845:	83 ec 04             	sub    $0x4,%esp
f011c848:	68 70 a5 13 f0       	push   $0xf013a570
f011c84d:	68 53 03 00 00       	push   $0x353
f011c852:	68 56 a5 13 f0       	push   $0xf013a556
f011c857:	e8 4a 39 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011c85c:	e8 51 f8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c861:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c864:	29 c2                	sub    %eax,%edx
f011c866:	89 d0                	mov    %edx,%eax
f011c868:	83 f8 40             	cmp    $0x40,%eax
f011c86b:	74 17                	je     f011c884 <test_kmalloc_firstfit1+0xed0>
f011c86d:	83 ec 04             	sub    $0x4,%esp
f011c870:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011c875:	68 54 03 00 00       	push   $0x354
f011c87a:	68 56 a5 13 f0       	push   $0xf013a556
f011c87f:	e8 22 39 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011c884:	e8 29 f8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c889:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c88c:	e8 fb 73 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c891:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011c894:	83 ec 0c             	sub    $0xc,%esp
f011c897:	68 00 00 20 00       	push   $0x200000
f011c89c:	e8 81 ab fe ff       	call   f0107422 <kmalloc>
f011c8a1:	83 c4 10             	add    $0x10,%esp
f011c8a4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c8aa:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c8b0:	89 c1                	mov    %eax,%ecx
f011c8b2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c8b9:	10 00 00 
f011c8bc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c8c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c8c7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c8cd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c8d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8d8:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c8de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c8e4:	29 d0                	sub    %edx,%eax
f011c8e6:	89 c3                	mov    %eax,%ebx
f011c8e8:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c8ef:	10 00 00 
f011c8f2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c8f7:	0f b6 d0             	movzbl %al,%edx
f011c8fa:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c900:	01 d0                	add    %edx,%eax
f011c902:	48                   	dec    %eax
f011c903:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c909:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c90f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c914:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c91a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c920:	29 d0                	sub    %edx,%eax
f011c922:	01 c3                	add    %eax,%ebx
f011c924:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c92b:	10 00 00 
f011c92e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c933:	0f b6 c0             	movzbl %al,%eax
f011c936:	c1 e0 04             	shl    $0x4,%eax
f011c939:	89 c2                	mov    %eax,%edx
f011c93b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c941:	01 d0                	add    %edx,%eax
f011c943:	48                   	dec    %eax
f011c944:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c94a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c950:	ba 00 00 00 00       	mov    $0x0,%edx
f011c955:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c95b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c961:	29 d0                	sub    %edx,%eax
f011c963:	01 d8                	add    %ebx,%eax
f011c965:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c96a:	39 c1                	cmp    %eax,%ecx
f011c96c:	74 17                	je     f011c985 <test_kmalloc_firstfit1+0xfd1>
f011c96e:	83 ec 04             	sub    $0x4,%esp
f011c971:	68 70 a9 13 f0       	push   $0xf013a970
f011c976:	68 5a 03 00 00       	push   $0x35a
f011c97b:	68 56 a5 13 f0       	push   $0xf013a556
f011c980:	e8 21 38 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c985:	e8 28 f7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c98a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c98d:	29 c2                	sub    %eax,%edx
f011c98f:	89 d0                	mov    %edx,%eax
f011c991:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c996:	74 17                	je     f011c9af <test_kmalloc_firstfit1+0xffb>
f011c998:	83 ec 04             	sub    $0x4,%esp
f011c99b:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011c9a0:	68 5b 03 00 00       	push   $0x35b
f011c9a5:	68 56 a5 13 f0       	push   $0xf013a556
f011c9aa:	e8 f7 37 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9af:	e8 d8 72 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c9b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c9b7:	74 17                	je     f011c9d0 <test_kmalloc_firstfit1+0x101c>
f011c9b9:	83 ec 04             	sub    $0x4,%esp
f011c9bc:	68 70 a5 13 f0       	push   $0xf013a570
f011c9c1:	68 5c 03 00 00       	push   $0x35c
f011c9c6:	68 56 a5 13 f0       	push   $0xf013a556
f011c9cb:	e8 d6 37 fe ff       	call   f01001a6 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011c9d0:	e8 dd f6 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011c9d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9d8:	e8 af 72 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c9dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011c9e0:	83 ec 0c             	sub    $0xc,%esp
f011c9e3:	68 00 fc 3f 00       	push   $0x3ffc00
f011c9e8:	e8 35 aa fe ff       	call   f0107422 <kmalloc>
f011c9ed:	83 c4 10             	add    $0x10,%esp
f011c9f0:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011c9f6:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c9fc:	89 c1                	mov    %eax,%ecx
f011c9fe:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ca05:	10 00 00 
f011ca08:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ca0e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca13:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ca19:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ca1f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca24:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ca2a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ca30:	29 d0                	sub    %edx,%eax
f011ca32:	89 c3                	mov    %eax,%ebx
f011ca34:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ca3b:	10 00 00 
f011ca3e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ca43:	0f b6 d0             	movzbl %al,%edx
f011ca46:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ca4c:	01 d0                	add    %edx,%eax
f011ca4e:	48                   	dec    %eax
f011ca4f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011ca55:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ca5b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca60:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011ca66:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ca6c:	29 d0                	sub    %edx,%eax
f011ca6e:	01 c3                	add    %eax,%ebx
f011ca70:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011ca77:	10 00 00 
f011ca7a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ca7f:	0f b6 c0             	movzbl %al,%eax
f011ca82:	c1 e0 04             	shl    $0x4,%eax
f011ca85:	89 c2                	mov    %eax,%edx
f011ca87:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ca8d:	01 d0                	add    %edx,%eax
f011ca8f:	48                   	dec    %eax
f011ca90:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011ca96:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ca9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011caa1:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011caa7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011caad:	29 d0                	sub    %edx,%eax
f011caaf:	01 d8                	add    %ebx,%eax
f011cab1:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011cab6:	39 c1                	cmp    %eax,%ecx
f011cab8:	74 17                	je     f011cad1 <test_kmalloc_firstfit1+0x111d>
f011caba:	83 ec 04             	sub    $0x4,%esp
f011cabd:	68 70 a9 13 f0       	push   $0xf013a970
f011cac2:	68 63 03 00 00       	push   $0x363
f011cac7:	68 56 a5 13 f0       	push   $0xf013a556
f011cacc:	e8 d5 36 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cad1:	e8 b6 71 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cad6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cad9:	74 17                	je     f011caf2 <test_kmalloc_firstfit1+0x113e>
f011cadb:	83 ec 04             	sub    $0x4,%esp
f011cade:	68 70 a5 13 f0       	push   $0xf013a570
f011cae3:	68 64 03 00 00       	push   $0x364
f011cae8:	68 56 a5 13 f0       	push   $0xf013a556
f011caed:	e8 b4 36 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011caf2:	e8 bb f5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011caf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cafa:	29 c2                	sub    %eax,%edx
f011cafc:	89 d0                	mov    %edx,%eax
f011cafe:	3d 00 04 00 00       	cmp    $0x400,%eax
f011cb03:	74 17                	je     f011cb1c <test_kmalloc_firstfit1+0x1168>
f011cb05:	83 ec 04             	sub    $0x4,%esp
f011cb08:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011cb0d:	68 65 03 00 00       	push   $0x365
f011cb12:	68 56 a5 13 f0       	push   $0xf013a556
f011cb17:	e8 8a 36 fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011cb1c:	e8 91 f5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011cb21:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb24:	e8 63 71 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cb29:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011cb2c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011cb32:	83 ec 0c             	sub    $0xc,%esp
f011cb35:	50                   	push   %eax
f011cb36:	e8 01 a9 fe ff       	call   f010743c <kfree>
f011cb3b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb3e:	e8 49 71 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cb43:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb46:	74 17                	je     f011cb5f <test_kmalloc_firstfit1+0x11ab>
f011cb48:	83 ec 04             	sub    $0x4,%esp
f011cb4b:	68 70 a5 13 f0       	push   $0xf013a570
f011cb50:	68 6e 03 00 00       	push   $0x36e
f011cb55:	68 56 a5 13 f0       	push   $0xf013a556
f011cb5a:	e8 47 36 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cb5f:	e8 4e f5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011cb64:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cb67:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb6c:	74 17                	je     f011cb85 <test_kmalloc_firstfit1+0x11d1>
f011cb6e:	83 ec 04             	sub    $0x4,%esp
f011cb71:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011cb76:	68 6f 03 00 00       	push   $0x36f
f011cb7b:	68 56 a5 13 f0       	push   $0xf013a556
f011cb80:	e8 21 36 fe ff       	call   f01001a6 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011cb85:	e8 28 f5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011cb8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb8d:	e8 fa 70 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cb92:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011cb95:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011cb9b:	83 ec 0c             	sub    $0xc,%esp
f011cb9e:	50                   	push   %eax
f011cb9f:	e8 98 a8 fe ff       	call   f010743c <kfree>
f011cba4:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cba7:	e8 e0 70 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cbac:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cbaf:	74 17                	je     f011cbc8 <test_kmalloc_firstfit1+0x1214>
f011cbb1:	83 ec 04             	sub    $0x4,%esp
f011cbb4:	68 70 a5 13 f0       	push   $0xf013a570
f011cbb9:	68 75 03 00 00       	push   $0x375
f011cbbe:	68 56 a5 13 f0       	push   $0xf013a556
f011cbc3:	e8 de 35 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cbc8:	e8 e5 f4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011cbcd:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cbd0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cbd5:	74 17                	je     f011cbee <test_kmalloc_firstfit1+0x123a>
f011cbd7:	83 ec 04             	sub    $0x4,%esp
f011cbda:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011cbdf:	68 76 03 00 00       	push   $0x376
f011cbe4:	68 56 a5 13 f0       	push   $0xf013a556
f011cbe9:	e8 b8 35 fe ff       	call   f01001a6 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011cbee:	e8 bf f4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011cbf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbf6:	e8 91 70 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cbfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011cbfe:	83 ec 0c             	sub    $0xc,%esp
f011cc01:	68 00 00 10 00       	push   $0x100000
f011cc06:	e8 17 a8 fe ff       	call   f0107422 <kmalloc>
f011cc0b:	83 c4 10             	add    $0x10,%esp
f011cc0e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011cc14:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011cc1a:	89 c1                	mov    %eax,%ecx
f011cc1c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011cc23:	10 00 00 
f011cc26:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011cc2c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc31:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011cc37:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cc3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc42:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011cc48:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cc4e:	29 d0                	sub    %edx,%eax
f011cc50:	89 c3                	mov    %eax,%ebx
f011cc52:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011cc59:	10 00 00 
f011cc5c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cc61:	0f b6 d0             	movzbl %al,%edx
f011cc64:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011cc6a:	01 d0                	add    %edx,%eax
f011cc6c:	48                   	dec    %eax
f011cc6d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011cc73:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cc79:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc7e:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011cc84:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cc8a:	29 d0                	sub    %edx,%eax
f011cc8c:	01 c3                	add    %eax,%ebx
f011cc8e:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011cc95:	10 00 00 
f011cc98:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cc9d:	0f b6 c0             	movzbl %al,%eax
f011cca0:	c1 e0 04             	shl    $0x4,%eax
f011cca3:	89 c2                	mov    %eax,%edx
f011cca5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ccab:	01 d0                	add    %edx,%eax
f011ccad:	48                   	dec    %eax
f011ccae:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011ccb4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ccba:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccbf:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011ccc5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cccb:	29 d0                	sub    %edx,%eax
f011cccd:	01 d8                	add    %ebx,%eax
f011cccf:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011ccd4:	39 c1                	cmp    %eax,%ecx
f011ccd6:	74 17                	je     f011ccef <test_kmalloc_firstfit1+0x133b>
f011ccd8:	83 ec 04             	sub    $0x4,%esp
f011ccdb:	68 70 a9 13 f0       	push   $0xf013a970
f011cce0:	68 80 03 00 00       	push   $0x380
f011cce5:	68 56 a5 13 f0       	push   $0xf013a556
f011ccea:	e8 b7 34 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ccef:	e8 98 6f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ccf4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ccf7:	74 17                	je     f011cd10 <test_kmalloc_firstfit1+0x135c>
f011ccf9:	83 ec 04             	sub    $0x4,%esp
f011ccfc:	68 70 a5 13 f0       	push   $0xf013a570
f011cd01:	68 81 03 00 00       	push   $0x381
f011cd06:	68 56 a5 13 f0       	push   $0xf013a556
f011cd0b:	e8 96 34 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cd10:	e8 9d f3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011cd15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd18:	29 c2                	sub    %eax,%edx
f011cd1a:	89 d0                	mov    %edx,%eax
f011cd1c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cd21:	74 17                	je     f011cd3a <test_kmalloc_firstfit1+0x1386>
f011cd23:	83 ec 04             	sub    $0x4,%esp
f011cd26:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011cd2b:	68 82 03 00 00       	push   $0x382
f011cd30:	68 56 a5 13 f0       	push   $0xf013a556
f011cd35:	e8 6c 34 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011cd3a:	83 ec 0c             	sub    $0xc,%esp
f011cd3d:	68 4c ab 13 f0       	push   $0xf013ab4c
f011cd42:	e8 e6 3e fe ff       	call   f0100c2d <cprintf>
f011cd47:	83 c4 10             	add    $0x10,%esp

	return 1;
f011cd4a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011cd4f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011cd52:	5b                   	pop    %ebx
f011cd53:	5f                   	pop    %edi
f011cd54:	5d                   	pop    %ebp
f011cd55:	c3                   	ret    

f011cd56 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011cd56:	55                   	push   %ebp
f011cd57:	89 e5                	mov    %esp,%ebp
f011cd59:	57                   	push   %edi
f011cd5a:	53                   	push   %ebx
f011cd5b:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011cd61:	83 ec 0c             	sub    $0xc,%esp
f011cd64:	68 98 a4 13 f0       	push   $0xf013a498
f011cd69:	e8 bf 3e fe ff       	call   f0100c2d <cprintf>
f011cd6e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011cd71:	83 ec 0c             	sub    $0xc,%esp
f011cd74:	68 c8 a4 13 f0       	push   $0xf013a4c8
f011cd79:	e8 af 3e fe ff       	call   f0100c2d <cprintf>
f011cd7e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011cd81:	83 ec 0c             	sub    $0xc,%esp
f011cd84:	68 98 a4 13 f0       	push   $0xf013a498
f011cd89:	e8 9f 3e fe ff       	call   f0100c2d <cprintf>
f011cd8e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011cd91:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011cd97:	b9 14 00 00 00       	mov    $0x14,%ecx
f011cd9c:	b8 00 00 00 00       	mov    $0x0,%eax
f011cda1:	89 d7                	mov    %edx,%edi
f011cda3:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011cda5:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011cdac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011cdaf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cdb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011cdb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011cdba:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdbf:	f7 75 f4             	divl   -0xc(%ebp)
f011cdc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011cdc5:	29 d0                	sub    %edx,%eax
f011cdc7:	89 c1                	mov    %eax,%ecx
f011cdc9:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011cdd0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cdd5:	0f b6 d0             	movzbl %al,%edx
f011cdd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011cddb:	01 d0                	add    %edx,%eax
f011cddd:	48                   	dec    %eax
f011cdde:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011cde1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cde4:	ba 00 00 00 00       	mov    $0x0,%edx
f011cde9:	f7 75 ec             	divl   -0x14(%ebp)
f011cdec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cdef:	29 d0                	sub    %edx,%eax
f011cdf1:	01 c1                	add    %eax,%ecx
f011cdf3:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011cdfa:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cdff:	0f b6 c0             	movzbl %al,%eax
f011ce02:	c1 e0 04             	shl    $0x4,%eax
f011ce05:	89 c2                	mov    %eax,%edx
f011ce07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ce0a:	01 d0                	add    %edx,%eax
f011ce0c:	48                   	dec    %eax
f011ce0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ce10:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce13:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce18:	f7 75 e4             	divl   -0x1c(%ebp)
f011ce1b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce1e:	29 d0                	sub    %edx,%eax
f011ce20:	01 c8                	add    %ecx,%eax
f011ce22:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011ce27:	29 c2                	sub    %eax,%edx
f011ce29:	89 d0                	mov    %edx,%eax
f011ce2b:	83 ec 0c             	sub    $0xc,%esp
f011ce2e:	50                   	push   %eax
f011ce2f:	e8 ee a5 fe ff       	call   f0107422 <kmalloc>
f011ce34:	83 c4 10             	add    $0x10,%esp
f011ce37:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011ce3d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ce43:	85 c0                	test   %eax,%eax
f011ce45:	74 17                	je     f011ce5e <test_kmalloc_firstfit2+0x108>
f011ce47:	83 ec 04             	sub    $0x4,%esp
f011ce4a:	68 98 ab 13 f0       	push   $0xf013ab98
f011ce4f:	68 97 03 00 00       	push   $0x397
f011ce54:	68 56 a5 13 f0       	push   $0xf013a556
f011ce59:	e8 48 33 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ce5e:	e8 4f f2 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ce63:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce66:	e8 21 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ce6b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ce6e:	83 ec 0c             	sub    $0xc,%esp
f011ce71:	68 00 fc 1f 00       	push   $0x1ffc00
f011ce76:	e8 a7 a5 fe ff       	call   f0107422 <kmalloc>
f011ce7b:	83 c4 10             	add    $0x10,%esp
f011ce7e:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ce84:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ce8a:	89 c1                	mov    %eax,%ecx
f011ce8c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ce93:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ce96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ce9e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cea1:	ba 00 00 00 00       	mov    $0x0,%edx
f011cea6:	f7 75 d4             	divl   -0x2c(%ebp)
f011cea9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ceac:	29 d0                	sub    %edx,%eax
f011ceae:	89 c3                	mov    %eax,%ebx
f011ceb0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ceb7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cebc:	0f b6 d0             	movzbl %al,%edx
f011cebf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cec2:	01 d0                	add    %edx,%eax
f011cec4:	48                   	dec    %eax
f011cec5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cec8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cecb:	ba 00 00 00 00       	mov    $0x0,%edx
f011ced0:	f7 75 cc             	divl   -0x34(%ebp)
f011ced3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ced6:	29 d0                	sub    %edx,%eax
f011ced8:	01 c3                	add    %eax,%ebx
f011ceda:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cee1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cee6:	0f b6 c0             	movzbl %al,%eax
f011cee9:	c1 e0 04             	shl    $0x4,%eax
f011ceec:	89 c2                	mov    %eax,%edx
f011ceee:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cef1:	01 d0                	add    %edx,%eax
f011cef3:	48                   	dec    %eax
f011cef4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cef7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cefa:	ba 00 00 00 00       	mov    $0x0,%edx
f011ceff:	f7 75 c4             	divl   -0x3c(%ebp)
f011cf02:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf05:	29 d0                	sub    %edx,%eax
f011cf07:	01 d8                	add    %ebx,%eax
f011cf09:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cf0e:	39 c1                	cmp    %eax,%ecx
f011cf10:	74 17                	je     f011cf29 <test_kmalloc_firstfit2+0x1d3>
f011cf12:	83 ec 04             	sub    $0x4,%esp
f011cf15:	68 70 a9 13 f0       	push   $0xf013a970
f011cf1a:	68 a1 03 00 00       	push   $0x3a1
f011cf1f:	68 56 a5 13 f0       	push   $0xf013a556
f011cf24:	e8 7d 32 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf29:	e8 5e 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf2e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cf31:	74 17                	je     f011cf4a <test_kmalloc_firstfit2+0x1f4>
f011cf33:	83 ec 04             	sub    $0x4,%esp
f011cf36:	68 70 a5 13 f0       	push   $0xf013a570
f011cf3b:	68 a2 03 00 00       	push   $0x3a2
f011cf40:	68 56 a5 13 f0       	push   $0xf013a556
f011cf45:	e8 5c 32 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cf4a:	e8 63 f1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011cf4f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cf52:	29 c2                	sub    %eax,%edx
f011cf54:	89 d0                	mov    %edx,%eax
f011cf56:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cf5b:	74 17                	je     f011cf74 <test_kmalloc_firstfit2+0x21e>
f011cf5d:	83 ec 04             	sub    $0x4,%esp
f011cf60:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011cf65:	68 a3 03 00 00       	push   $0x3a3
f011cf6a:	68 56 a5 13 f0       	push   $0xf013a556
f011cf6f:	e8 32 32 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cf74:	e8 39 f1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011cf79:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf7c:	e8 0b 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf81:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011cf84:	83 ec 0c             	sub    $0xc,%esp
f011cf87:	68 00 fc 1f 00       	push   $0x1ffc00
f011cf8c:	e8 91 a4 fe ff       	call   f0107422 <kmalloc>
f011cf91:	83 c4 10             	add    $0x10,%esp
f011cf94:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cf9a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011cfa0:	89 c1                	mov    %eax,%ecx
f011cfa2:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cfa9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cfac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cfb1:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cfb4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cfb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfbc:	f7 75 bc             	divl   -0x44(%ebp)
f011cfbf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cfc2:	29 d0                	sub    %edx,%eax
f011cfc4:	89 c3                	mov    %eax,%ebx
f011cfc6:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cfcd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cfd2:	0f b6 d0             	movzbl %al,%edx
f011cfd5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cfd8:	01 d0                	add    %edx,%eax
f011cfda:	48                   	dec    %eax
f011cfdb:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cfde:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cfe1:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfe6:	f7 75 b4             	divl   -0x4c(%ebp)
f011cfe9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cfec:	29 d0                	sub    %edx,%eax
f011cfee:	01 c3                	add    %eax,%ebx
f011cff0:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cff7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cffc:	0f b6 c0             	movzbl %al,%eax
f011cfff:	c1 e0 04             	shl    $0x4,%eax
f011d002:	89 c2                	mov    %eax,%edx
f011d004:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d007:	01 d0                	add    %edx,%eax
f011d009:	48                   	dec    %eax
f011d00a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d00d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d010:	ba 00 00 00 00       	mov    $0x0,%edx
f011d015:	f7 75 ac             	divl   -0x54(%ebp)
f011d018:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d01b:	29 d0                	sub    %edx,%eax
f011d01d:	01 d8                	add    %ebx,%eax
f011d01f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d024:	39 c1                	cmp    %eax,%ecx
f011d026:	74 17                	je     f011d03f <test_kmalloc_firstfit2+0x2e9>
f011d028:	83 ec 04             	sub    $0x4,%esp
f011d02b:	68 70 a9 13 f0       	push   $0xf013a970
f011d030:	68 a9 03 00 00       	push   $0x3a9
f011d035:	68 56 a5 13 f0       	push   $0xf013a556
f011d03a:	e8 67 31 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d03f:	e8 48 6c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d044:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d047:	74 17                	je     f011d060 <test_kmalloc_firstfit2+0x30a>
f011d049:	83 ec 04             	sub    $0x4,%esp
f011d04c:	68 70 a5 13 f0       	push   $0xf013a570
f011d051:	68 aa 03 00 00       	push   $0x3aa
f011d056:	68 56 a5 13 f0       	push   $0xf013a556
f011d05b:	e8 46 31 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d060:	e8 4d f0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d065:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d068:	29 c2                	sub    %eax,%edx
f011d06a:	89 d0                	mov    %edx,%eax
f011d06c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d071:	74 17                	je     f011d08a <test_kmalloc_firstfit2+0x334>
f011d073:	83 ec 04             	sub    $0x4,%esp
f011d076:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011d07b:	68 ab 03 00 00       	push   $0x3ab
f011d080:	68 56 a5 13 f0       	push   $0xf013a556
f011d085:	e8 1c 31 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d08a:	e8 23 f0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d08f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d092:	e8 f5 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d097:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d09a:	83 ec 0c             	sub    $0xc,%esp
f011d09d:	68 00 08 00 00       	push   $0x800
f011d0a2:	e8 7b a3 fe ff       	call   f0107422 <kmalloc>
f011d0a7:	83 c4 10             	add    $0x10,%esp
f011d0aa:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d0b0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d0b6:	89 c1                	mov    %eax,%ecx
f011d0b8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d0bf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d0c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d0c7:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d0ca:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d0cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0d2:	f7 75 a4             	divl   -0x5c(%ebp)
f011d0d5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d0d8:	29 d0                	sub    %edx,%eax
f011d0da:	89 c3                	mov    %eax,%ebx
f011d0dc:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d0e3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d0e8:	0f b6 d0             	movzbl %al,%edx
f011d0eb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d0ee:	01 d0                	add    %edx,%eax
f011d0f0:	48                   	dec    %eax
f011d0f1:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d0f4:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d0f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0fc:	f7 75 9c             	divl   -0x64(%ebp)
f011d0ff:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d102:	29 d0                	sub    %edx,%eax
f011d104:	01 c3                	add    %eax,%ebx
f011d106:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d10d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d112:	0f b6 c0             	movzbl %al,%eax
f011d115:	c1 e0 04             	shl    $0x4,%eax
f011d118:	89 c2                	mov    %eax,%edx
f011d11a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d11d:	01 d0                	add    %edx,%eax
f011d11f:	48                   	dec    %eax
f011d120:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d123:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d126:	ba 00 00 00 00       	mov    $0x0,%edx
f011d12b:	f7 75 94             	divl   -0x6c(%ebp)
f011d12e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d131:	29 d0                	sub    %edx,%eax
f011d133:	01 d8                	add    %ebx,%eax
f011d135:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d13a:	39 c1                	cmp    %eax,%ecx
f011d13c:	73 17                	jae    f011d155 <test_kmalloc_firstfit2+0x3ff>
f011d13e:	83 ec 04             	sub    $0x4,%esp
f011d141:	68 70 a9 13 f0       	push   $0xf013a970
f011d146:	68 b1 03 00 00       	push   $0x3b1
f011d14b:	68 56 a5 13 f0       	push   $0xf013a556
f011d150:	e8 51 30 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d155:	e8 32 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d15a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d15d:	74 17                	je     f011d176 <test_kmalloc_firstfit2+0x420>
f011d15f:	83 ec 04             	sub    $0x4,%esp
f011d162:	68 70 a5 13 f0       	push   $0xf013a570
f011d167:	68 b2 03 00 00       	push   $0x3b2
f011d16c:	68 56 a5 13 f0       	push   $0xf013a556
f011d171:	e8 30 30 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d176:	e8 37 ef fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d17b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d17e:	29 c2                	sub    %eax,%edx
f011d180:	89 d0                	mov    %edx,%eax
f011d182:	83 f8 01             	cmp    $0x1,%eax
f011d185:	74 17                	je     f011d19e <test_kmalloc_firstfit2+0x448>
f011d187:	83 ec 04             	sub    $0x4,%esp
f011d18a:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011d18f:	68 b3 03 00 00       	push   $0x3b3
f011d194:	68 56 a5 13 f0       	push   $0xf013a556
f011d199:	e8 08 30 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d19e:	e8 0f ef fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d1a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1a6:	e8 e1 6a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d1ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d1ae:	83 ec 0c             	sub    $0xc,%esp
f011d1b1:	68 00 08 00 00       	push   $0x800
f011d1b6:	e8 67 a2 fe ff       	call   f0107422 <kmalloc>
f011d1bb:	83 c4 10             	add    $0x10,%esp
f011d1be:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d1c4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d1ca:	89 c1                	mov    %eax,%ecx
f011d1cc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d1d3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d1d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1db:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d1de:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d1e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1e6:	f7 75 8c             	divl   -0x74(%ebp)
f011d1e9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d1ec:	29 d0                	sub    %edx,%eax
f011d1ee:	89 c3                	mov    %eax,%ebx
f011d1f0:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d1f7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d1fc:	0f b6 d0             	movzbl %al,%edx
f011d1ff:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d202:	01 d0                	add    %edx,%eax
f011d204:	48                   	dec    %eax
f011d205:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d208:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d20b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d210:	f7 75 84             	divl   -0x7c(%ebp)
f011d213:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d216:	29 d0                	sub    %edx,%eax
f011d218:	01 c3                	add    %eax,%ebx
f011d21a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d221:	10 00 00 
f011d224:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d229:	0f b6 c0             	movzbl %al,%eax
f011d22c:	c1 e0 04             	shl    $0x4,%eax
f011d22f:	89 c2                	mov    %eax,%edx
f011d231:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d237:	01 d0                	add    %edx,%eax
f011d239:	48                   	dec    %eax
f011d23a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d240:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d246:	ba 00 00 00 00       	mov    $0x0,%edx
f011d24b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d251:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d257:	29 d0                	sub    %edx,%eax
f011d259:	01 d8                	add    %ebx,%eax
f011d25b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d260:	39 c1                	cmp    %eax,%ecx
f011d262:	74 17                	je     f011d27b <test_kmalloc_firstfit2+0x525>
f011d264:	83 ec 04             	sub    $0x4,%esp
f011d267:	68 70 a9 13 f0       	push   $0xf013a970
f011d26c:	68 b9 03 00 00       	push   $0x3b9
f011d271:	68 56 a5 13 f0       	push   $0xf013a556
f011d276:	e8 2b 2f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d27b:	e8 0c 6a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d280:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d283:	74 17                	je     f011d29c <test_kmalloc_firstfit2+0x546>
f011d285:	83 ec 04             	sub    $0x4,%esp
f011d288:	68 70 a5 13 f0       	push   $0xf013a570
f011d28d:	68 ba 03 00 00       	push   $0x3ba
f011d292:	68 56 a5 13 f0       	push   $0xf013a556
f011d297:	e8 0a 2f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d29c:	e8 11 ee fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d2a1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d2a4:	29 c2                	sub    %eax,%edx
f011d2a6:	89 d0                	mov    %edx,%eax
f011d2a8:	83 f8 01             	cmp    $0x1,%eax
f011d2ab:	74 17                	je     f011d2c4 <test_kmalloc_firstfit2+0x56e>
f011d2ad:	83 ec 04             	sub    $0x4,%esp
f011d2b0:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011d2b5:	68 bb 03 00 00       	push   $0x3bb
f011d2ba:	68 56 a5 13 f0       	push   $0xf013a556
f011d2bf:	e8 e2 2e fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d2c4:	e8 e9 ed fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d2c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2cc:	e8 bb 69 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d2d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011d2d4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d2da:	83 ec 0c             	sub    $0xc,%esp
f011d2dd:	50                   	push   %eax
f011d2de:	e8 59 a1 fe ff       	call   f010743c <kfree>
f011d2e3:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2e6:	e8 a1 69 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d2eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d2ee:	74 17                	je     f011d307 <test_kmalloc_firstfit2+0x5b1>
f011d2f0:	83 ec 04             	sub    $0x4,%esp
f011d2f3:	68 70 a5 13 f0       	push   $0xf013a570
f011d2f8:	68 c1 03 00 00       	push   $0x3c1
f011d2fd:	68 56 a5 13 f0       	push   $0xf013a556
f011d302:	e8 9f 2e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011d307:	e8 a6 ed fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d30c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d30f:	83 f8 01             	cmp    $0x1,%eax
f011d312:	74 17                	je     f011d32b <test_kmalloc_firstfit2+0x5d5>
f011d314:	83 ec 04             	sub    $0x4,%esp
f011d317:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011d31c:	68 c2 03 00 00       	push   $0x3c2
f011d321:	68 56 a5 13 f0       	push   $0xf013a556
f011d326:	e8 7b 2e fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d32b:	e8 82 ed fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d330:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d333:	e8 54 69 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d338:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011d33b:	83 ec 0c             	sub    $0xc,%esp
f011d33e:	68 00 1c 00 00       	push   $0x1c00
f011d343:	e8 da a0 fe ff       	call   f0107422 <kmalloc>
f011d348:	83 c4 10             	add    $0x10,%esp
f011d34b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011d351:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d357:	89 c1                	mov    %eax,%ecx
f011d359:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d360:	10 00 00 
f011d363:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d369:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d36e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d374:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d37a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d37f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d385:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d38b:	29 d0                	sub    %edx,%eax
f011d38d:	89 c3                	mov    %eax,%ebx
f011d38f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d396:	10 00 00 
f011d399:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d39e:	0f b6 d0             	movzbl %al,%edx
f011d3a1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d3a7:	01 d0                	add    %edx,%eax
f011d3a9:	48                   	dec    %eax
f011d3aa:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d3b0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3bb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d3c1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3c7:	29 d0                	sub    %edx,%eax
f011d3c9:	01 c3                	add    %eax,%ebx
f011d3cb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d3d2:	10 00 00 
f011d3d5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d3da:	0f b6 c0             	movzbl %al,%eax
f011d3dd:	c1 e0 04             	shl    $0x4,%eax
f011d3e0:	89 c2                	mov    %eax,%edx
f011d3e2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d3e8:	01 d0                	add    %edx,%eax
f011d3ea:	48                   	dec    %eax
f011d3eb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d3f1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d3f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3fc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d402:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d408:	29 d0                	sub    %edx,%eax
f011d40a:	01 d8                	add    %ebx,%eax
f011d40c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d411:	39 c1                	cmp    %eax,%ecx
f011d413:	74 17                	je     f011d42c <test_kmalloc_firstfit2+0x6d6>
f011d415:	83 ec 04             	sub    $0x4,%esp
f011d418:	68 70 a9 13 f0       	push   $0xf013a970
f011d41d:	68 c8 03 00 00       	push   $0x3c8
f011d422:	68 56 a5 13 f0       	push   $0xf013a556
f011d427:	e8 7a 2d fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d42c:	e8 5b 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d431:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d434:	74 17                	je     f011d44d <test_kmalloc_firstfit2+0x6f7>
f011d436:	83 ec 04             	sub    $0x4,%esp
f011d439:	68 70 a5 13 f0       	push   $0xf013a570
f011d43e:	68 c9 03 00 00       	push   $0x3c9
f011d443:	68 56 a5 13 f0       	push   $0xf013a556
f011d448:	e8 59 2d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011d44d:	e8 60 ec fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d452:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d455:	29 c2                	sub    %eax,%edx
f011d457:	89 d0                	mov    %edx,%eax
f011d459:	83 f8 02             	cmp    $0x2,%eax
f011d45c:	74 17                	je     f011d475 <test_kmalloc_firstfit2+0x71f>
f011d45e:	83 ec 04             	sub    $0x4,%esp
f011d461:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011d466:	68 ca 03 00 00       	push   $0x3ca
f011d46b:	68 56 a5 13 f0       	push   $0xf013a556
f011d470:	e8 31 2d fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d475:	e8 38 ec fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d47a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d47d:	e8 0a 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d482:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011d485:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d48b:	83 ec 0c             	sub    $0xc,%esp
f011d48e:	50                   	push   %eax
f011d48f:	e8 a8 9f fe ff       	call   f010743c <kfree>
f011d494:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d497:	e8 f0 67 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d49c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d49f:	74 17                	je     f011d4b8 <test_kmalloc_firstfit2+0x762>
f011d4a1:	83 ec 04             	sub    $0x4,%esp
f011d4a4:	68 70 a5 13 f0       	push   $0xf013a570
f011d4a9:	68 d0 03 00 00       	push   $0x3d0
f011d4ae:	68 56 a5 13 f0       	push   $0xf013a556
f011d4b3:	e8 ee 2c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d4b8:	e8 f5 eb fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d4bd:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d4c0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d4c5:	74 17                	je     f011d4de <test_kmalloc_firstfit2+0x788>
f011d4c7:	83 ec 04             	sub    $0x4,%esp
f011d4ca:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011d4cf:	68 d1 03 00 00       	push   $0x3d1
f011d4d4:	68 56 a5 13 f0       	push   $0xf013a556
f011d4d9:	e8 c8 2c fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d4de:	e8 cf eb fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d4e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4e6:	e8 a1 67 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d4eb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011d4ee:	83 ec 0c             	sub    $0xc,%esp
f011d4f1:	68 00 fc 2f 00       	push   $0x2ffc00
f011d4f6:	e8 27 9f fe ff       	call   f0107422 <kmalloc>
f011d4fb:	83 c4 10             	add    $0x10,%esp
f011d4fe:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d504:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d50a:	89 c1                	mov    %eax,%ecx
f011d50c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d513:	10 00 00 
f011d516:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d51c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d521:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d527:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d52d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d532:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d538:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d53e:	29 d0                	sub    %edx,%eax
f011d540:	89 c3                	mov    %eax,%ebx
f011d542:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d549:	10 00 00 
f011d54c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d551:	0f b6 d0             	movzbl %al,%edx
f011d554:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d55a:	01 d0                	add    %edx,%eax
f011d55c:	48                   	dec    %eax
f011d55d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d563:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d569:	ba 00 00 00 00       	mov    $0x0,%edx
f011d56e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d574:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d57a:	29 d0                	sub    %edx,%eax
f011d57c:	01 c3                	add    %eax,%ebx
f011d57e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d585:	10 00 00 
f011d588:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d58d:	0f b6 c0             	movzbl %al,%eax
f011d590:	c1 e0 04             	shl    $0x4,%eax
f011d593:	89 c2                	mov    %eax,%edx
f011d595:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d59b:	01 d0                	add    %edx,%eax
f011d59d:	48                   	dec    %eax
f011d59e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d5a4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d5aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5af:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d5b5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d5bb:	29 d0                	sub    %edx,%eax
f011d5bd:	01 d8                	add    %ebx,%eax
f011d5bf:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011d5c4:	39 c1                	cmp    %eax,%ecx
f011d5c6:	74 17                	je     f011d5df <test_kmalloc_firstfit2+0x889>
f011d5c8:	83 ec 04             	sub    $0x4,%esp
f011d5cb:	68 70 a9 13 f0       	push   $0xf013a970
f011d5d0:	68 d7 03 00 00       	push   $0x3d7
f011d5d5:	68 56 a5 13 f0       	push   $0xf013a556
f011d5da:	e8 c7 2b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5df:	e8 a8 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d5e4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d5e7:	74 17                	je     f011d600 <test_kmalloc_firstfit2+0x8aa>
f011d5e9:	83 ec 04             	sub    $0x4,%esp
f011d5ec:	68 70 a5 13 f0       	push   $0xf013a570
f011d5f1:	68 d8 03 00 00       	push   $0x3d8
f011d5f6:	68 56 a5 13 f0       	push   $0xf013a556
f011d5fb:	e8 a6 2b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d600:	e8 ad ea fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d605:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d608:	29 c2                	sub    %eax,%edx
f011d60a:	89 d0                	mov    %edx,%eax
f011d60c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d611:	74 17                	je     f011d62a <test_kmalloc_firstfit2+0x8d4>
f011d613:	83 ec 04             	sub    $0x4,%esp
f011d616:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011d61b:	68 d9 03 00 00       	push   $0x3d9
f011d620:	68 56 a5 13 f0       	push   $0xf013a556
f011d625:	e8 7c 2b fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011d62a:	e8 83 ea fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d62f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d632:	e8 55 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d637:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011d63a:	83 ec 0c             	sub    $0xc,%esp
f011d63d:	68 00 18 20 00       	push   $0x201800
f011d642:	e8 db 9d fe ff       	call   f0107422 <kmalloc>
f011d647:	83 c4 10             	add    $0x10,%esp
f011d64a:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d650:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d656:	89 c1                	mov    %eax,%ecx
f011d658:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d65f:	10 00 00 
f011d662:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d668:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d66d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d673:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d679:	ba 00 00 00 00       	mov    $0x0,%edx
f011d67e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d684:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d68a:	29 d0                	sub    %edx,%eax
f011d68c:	89 c3                	mov    %eax,%ebx
f011d68e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d695:	10 00 00 
f011d698:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d69d:	0f b6 d0             	movzbl %al,%edx
f011d6a0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d6a6:	01 d0                	add    %edx,%eax
f011d6a8:	48                   	dec    %eax
f011d6a9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d6af:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d6b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6ba:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d6c0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d6c6:	29 d0                	sub    %edx,%eax
f011d6c8:	01 c3                	add    %eax,%ebx
f011d6ca:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d6d1:	10 00 00 
f011d6d4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d6d9:	0f b6 c0             	movzbl %al,%eax
f011d6dc:	c1 e0 04             	shl    $0x4,%eax
f011d6df:	89 c2                	mov    %eax,%edx
f011d6e1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d6e7:	01 d0                	add    %edx,%eax
f011d6e9:	48                   	dec    %eax
f011d6ea:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d6f0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d6f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6fb:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d701:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d707:	29 d0                	sub    %edx,%eax
f011d709:	01 d8                	add    %ebx,%eax
f011d70b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011d710:	39 c1                	cmp    %eax,%ecx
f011d712:	74 17                	je     f011d72b <test_kmalloc_firstfit2+0x9d5>
f011d714:	83 ec 04             	sub    $0x4,%esp
f011d717:	68 70 a9 13 f0       	push   $0xf013a970
f011d71c:	68 df 03 00 00       	push   $0x3df
f011d721:	68 56 a5 13 f0       	push   $0xf013a556
f011d726:	e8 7b 2a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d72b:	e8 5c 65 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d730:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d733:	74 17                	je     f011d74c <test_kmalloc_firstfit2+0x9f6>
f011d735:	83 ec 04             	sub    $0x4,%esp
f011d738:	68 70 a5 13 f0       	push   $0xf013a570
f011d73d:	68 e0 03 00 00       	push   $0x3e0
f011d742:	68 56 a5 13 f0       	push   $0xf013a556
f011d747:	e8 5a 2a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011d74c:	e8 61 e9 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d751:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d754:	29 c2                	sub    %eax,%edx
f011d756:	89 d0                	mov    %edx,%eax
f011d758:	3d 02 02 00 00       	cmp    $0x202,%eax
f011d75d:	74 17                	je     f011d776 <test_kmalloc_firstfit2+0xa20>
f011d75f:	83 ec 04             	sub    $0x4,%esp
f011d762:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011d767:	68 e1 03 00 00       	push   $0x3e1
f011d76c:	68 56 a5 13 f0       	push   $0xf013a556
f011d771:	e8 30 2a fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d776:	e8 37 e9 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d77b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d77e:	e8 09 65 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d783:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011d786:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d78c:	83 ec 0c             	sub    $0xc,%esp
f011d78f:	50                   	push   %eax
f011d790:	e8 a7 9c fe ff       	call   f010743c <kfree>
f011d795:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d798:	e8 ef 64 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d79d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d7a0:	74 17                	je     f011d7b9 <test_kmalloc_firstfit2+0xa63>
f011d7a2:	83 ec 04             	sub    $0x4,%esp
f011d7a5:	68 70 a5 13 f0       	push   $0xf013a570
f011d7aa:	68 e7 03 00 00       	push   $0x3e7
f011d7af:	68 56 a5 13 f0       	push   $0xf013a556
f011d7b4:	e8 ed 29 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d7b9:	e8 f4 e8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d7be:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d7c1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d7c6:	74 17                	je     f011d7df <test_kmalloc_firstfit2+0xa89>
f011d7c8:	83 ec 04             	sub    $0x4,%esp
f011d7cb:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011d7d0:	68 e8 03 00 00       	push   $0x3e8
f011d7d5:	68 56 a5 13 f0       	push   $0xf013a556
f011d7da:	e8 c7 29 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011d7df:	e8 ce e8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d7e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7e7:	e8 a0 64 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d7ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011d7ef:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d7f5:	83 ec 0c             	sub    $0xc,%esp
f011d7f8:	50                   	push   %eax
f011d7f9:	e8 3e 9c fe ff       	call   f010743c <kfree>
f011d7fe:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d801:	e8 ac e8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d806:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d809:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d80e:	74 17                	je     f011d827 <test_kmalloc_firstfit2+0xad1>
f011d810:	83 ec 04             	sub    $0x4,%esp
f011d813:	68 b3 a9 13 f0       	push   $0xf013a9b3
f011d818:	68 ee 03 00 00       	push   $0x3ee
f011d81d:	68 56 a5 13 f0       	push   $0xf013a556
f011d822:	e8 7f 29 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d827:	e8 60 64 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d82c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d82f:	74 17                	je     f011d848 <test_kmalloc_firstfit2+0xaf2>
f011d831:	83 ec 04             	sub    $0x4,%esp
f011d834:	68 70 a5 13 f0       	push   $0xf013a570
f011d839:	68 ef 03 00 00       	push   $0x3ef
f011d83e:	68 56 a5 13 f0       	push   $0xf013a556
f011d843:	e8 5e 29 fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011d848:	e8 65 e8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d84d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d850:	e8 37 64 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d855:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011d858:	83 ec 0c             	sub    $0xc,%esp
f011d85b:	68 00 fc 4f 00       	push   $0x4ffc00
f011d860:	e8 bd 9b fe ff       	call   f0107422 <kmalloc>
f011d865:	83 c4 10             	add    $0x10,%esp
f011d868:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011d86e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d874:	89 c1                	mov    %eax,%ecx
f011d876:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d87d:	10 00 00 
f011d880:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d886:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d88b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d891:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d897:	ba 00 00 00 00       	mov    $0x0,%edx
f011d89c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d8a2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d8a8:	29 d0                	sub    %edx,%eax
f011d8aa:	89 c3                	mov    %eax,%ebx
f011d8ac:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d8b3:	10 00 00 
f011d8b6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d8bb:	0f b6 d0             	movzbl %al,%edx
f011d8be:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d8c4:	01 d0                	add    %edx,%eax
f011d8c6:	48                   	dec    %eax
f011d8c7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d8cd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d8d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8d8:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d8de:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d8e4:	29 d0                	sub    %edx,%eax
f011d8e6:	01 c3                	add    %eax,%ebx
f011d8e8:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d8ef:	10 00 00 
f011d8f2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d8f7:	0f b6 c0             	movzbl %al,%eax
f011d8fa:	c1 e0 04             	shl    $0x4,%eax
f011d8fd:	89 c2                	mov    %eax,%edx
f011d8ff:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d905:	01 d0                	add    %edx,%eax
f011d907:	48                   	dec    %eax
f011d908:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d90e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d914:	ba 00 00 00 00       	mov    $0x0,%edx
f011d919:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d91f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d925:	29 d0                	sub    %edx,%eax
f011d927:	01 d8                	add    %ebx,%eax
f011d929:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011d92e:	39 c1                	cmp    %eax,%ecx
f011d930:	74 17                	je     f011d949 <test_kmalloc_firstfit2+0xbf3>
f011d932:	83 ec 04             	sub    $0x4,%esp
f011d935:	68 70 a9 13 f0       	push   $0xf013a970
f011d93a:	68 f5 03 00 00       	push   $0x3f5
f011d93f:	68 56 a5 13 f0       	push   $0xf013a556
f011d944:	e8 5d 28 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d949:	e8 3e 63 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d94e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d951:	74 17                	je     f011d96a <test_kmalloc_firstfit2+0xc14>
f011d953:	83 ec 04             	sub    $0x4,%esp
f011d956:	68 70 a5 13 f0       	push   $0xf013a570
f011d95b:	68 f6 03 00 00       	push   $0x3f6
f011d960:	68 56 a5 13 f0       	push   $0xf013a556
f011d965:	e8 3c 28 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d96a:	e8 43 e7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d96f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d972:	29 c2                	sub    %eax,%edx
f011d974:	89 d0                	mov    %edx,%eax
f011d976:	3d 00 05 00 00       	cmp    $0x500,%eax
f011d97b:	74 17                	je     f011d994 <test_kmalloc_firstfit2+0xc3e>
f011d97d:	83 ec 04             	sub    $0x4,%esp
f011d980:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011d985:	68 f7 03 00 00       	push   $0x3f7
f011d98a:	68 56 a5 13 f0       	push   $0xf013a556
f011d98f:	e8 12 28 fe ff       	call   f01001a6 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d994:	e8 19 e7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011d999:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d99c:	e8 eb 62 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d9a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011d9a4:	83 ec 0c             	sub    $0xc,%esp
f011d9a7:	68 00 fc 2f 00       	push   $0x2ffc00
f011d9ac:	e8 71 9a fe ff       	call   f0107422 <kmalloc>
f011d9b1:	83 c4 10             	add    $0x10,%esp
f011d9b4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d9ba:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d9c0:	89 c1                	mov    %eax,%ecx
f011d9c2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d9c9:	10 00 00 
f011d9cc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d9d2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d9d7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d9dd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d9e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9e8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d9ee:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d9f4:	29 d0                	sub    %edx,%eax
f011d9f6:	89 c3                	mov    %eax,%ebx
f011d9f8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d9ff:	10 00 00 
f011da02:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011da07:	0f b6 d0             	movzbl %al,%edx
f011da0a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011da10:	01 d0                	add    %edx,%eax
f011da12:	48                   	dec    %eax
f011da13:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011da19:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da1f:	ba 00 00 00 00       	mov    $0x0,%edx
f011da24:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011da2a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da30:	29 d0                	sub    %edx,%eax
f011da32:	01 c3                	add    %eax,%ebx
f011da34:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011da3b:	10 00 00 
f011da3e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011da43:	0f b6 c0             	movzbl %al,%eax
f011da46:	c1 e0 04             	shl    $0x4,%eax
f011da49:	89 c2                	mov    %eax,%edx
f011da4b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011da51:	01 d0                	add    %edx,%eax
f011da53:	48                   	dec    %eax
f011da54:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011da5a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da60:	ba 00 00 00 00       	mov    $0x0,%edx
f011da65:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011da6b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da71:	29 d0                	sub    %edx,%eax
f011da73:	01 d8                	add    %ebx,%eax
f011da75:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011da7a:	39 c1                	cmp    %eax,%ecx
f011da7c:	74 17                	je     f011da95 <test_kmalloc_firstfit2+0xd3f>
f011da7e:	83 ec 04             	sub    $0x4,%esp
f011da81:	68 70 a9 13 f0       	push   $0xf013a970
f011da86:	68 05 04 00 00       	push   $0x405
f011da8b:	68 56 a5 13 f0       	push   $0xf013a556
f011da90:	e8 11 27 fe ff       	call   f01001a6 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da95:	e8 f2 61 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011da9a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011da9d:	74 17                	je     f011dab6 <test_kmalloc_firstfit2+0xd60>
f011da9f:	83 ec 04             	sub    $0x4,%esp
f011daa2:	68 70 a5 13 f0       	push   $0xf013a570
f011daa7:	68 06 04 00 00       	push   $0x406
f011daac:	68 56 a5 13 f0       	push   $0xf013a556
f011dab1:	e8 f0 26 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dab6:	e8 f7 e5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011dabb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dabe:	29 c2                	sub    %eax,%edx
f011dac0:	89 d0                	mov    %edx,%eax
f011dac2:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dac7:	74 17                	je     f011dae0 <test_kmalloc_firstfit2+0xd8a>
f011dac9:	83 ec 04             	sub    $0x4,%esp
f011dacc:	68 a0 a9 13 f0       	push   $0xf013a9a0
f011dad1:	68 07 04 00 00       	push   $0x407
f011dad6:	68 56 a5 13 f0       	push   $0xf013a556
f011dadb:	e8 c6 26 fe ff       	call   f01001a6 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011dae0:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011dae7:	10 00 00 
f011daea:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011daf0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011daf5:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011dafb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db01:	ba 00 00 00 00       	mov    $0x0,%edx
f011db06:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011db0c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db12:	29 d0                	sub    %edx,%eax
f011db14:	89 c1                	mov    %eax,%ecx
f011db16:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011db1d:	10 00 00 
f011db20:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011db25:	0f b6 d0             	movzbl %al,%edx
f011db28:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011db2e:	01 d0                	add    %edx,%eax
f011db30:	48                   	dec    %eax
f011db31:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011db37:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011db42:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011db48:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db4e:	29 d0                	sub    %edx,%eax
f011db50:	01 c1                	add    %eax,%ecx
f011db52:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011db59:	10 00 00 
f011db5c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011db61:	0f b6 c0             	movzbl %al,%eax
f011db64:	c1 e0 04             	shl    $0x4,%eax
f011db67:	89 c2                	mov    %eax,%edx
f011db69:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011db6f:	01 d0                	add    %edx,%eax
f011db71:	48                   	dec    %eax
f011db72:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011db78:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011db7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011db83:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011db89:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011db8f:	29 d0                	sub    %edx,%eax
f011db91:	01 c8                	add    %ecx,%eax
f011db93:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011db98:	29 c2                	sub    %eax,%edx
f011db9a:	89 d0                	mov    %edx,%eax
f011db9c:	83 ec 0c             	sub    $0xc,%esp
f011db9f:	50                   	push   %eax
f011dba0:	e8 7d 98 fe ff       	call   f0107422 <kmalloc>
f011dba5:	83 c4 10             	add    $0x10,%esp
f011dba8:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011dbae:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011dbb4:	85 c0                	test   %eax,%eax
f011dbb6:	74 17                	je     f011dbcf <test_kmalloc_firstfit2+0xe79>
f011dbb8:	83 ec 04             	sub    $0x4,%esp
f011dbbb:	68 a0 aa 13 f0       	push   $0xf013aaa0
f011dbc0:	68 0d 04 00 00       	push   $0x40d
f011dbc5:	68 56 a5 13 f0       	push   $0xf013a556
f011dbca:	e8 d7 25 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011dbcf:	83 ec 0c             	sub    $0xc,%esp
f011dbd2:	68 e0 ab 13 f0       	push   $0xf013abe0
f011dbd7:	e8 51 30 fe ff       	call   f0100c2d <cprintf>
f011dbdc:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011dbdf:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dbe4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dbe7:	5b                   	pop    %ebx
f011dbe8:	5f                   	pop    %edi
f011dbe9:	5d                   	pop    %ebp
f011dbea:	c3                   	ret    

f011dbeb <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011dbeb:	55                   	push   %ebp
f011dbec:	89 e5                	mov    %esp,%ebp
f011dbee:	57                   	push   %edi
f011dbef:	53                   	push   %ebx
f011dbf0:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011dbf6:	83 ec 0c             	sub    $0xc,%esp
f011dbf9:	68 98 a4 13 f0       	push   $0xf013a498
f011dbfe:	e8 2a 30 fe ff       	call   f0100c2d <cprintf>
f011dc03:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011dc06:	83 ec 0c             	sub    $0xc,%esp
f011dc09:	68 c8 a4 13 f0       	push   $0xf013a4c8
f011dc0e:	e8 1a 30 fe ff       	call   f0100c2d <cprintf>
f011dc13:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011dc16:	83 ec 0c             	sub    $0xc,%esp
f011dc19:	68 98 a4 13 f0       	push   $0xf013a498
f011dc1e:	e8 0a 30 fe ff       	call   f0100c2d <cprintf>
f011dc23:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011dc26:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011dc2c:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011dc31:	b8 00 00 00 00       	mov    $0x0,%eax
f011dc36:	89 d7                	mov    %edx,%edi
f011dc38:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011dc3a:	e8 73 e4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011dc3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011dc42:	e8 45 60 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dc47:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011dc4a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011dc51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011dc58:	eb 1f                	jmp    f011dc79 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011dc5a:	83 ec 0c             	sub    $0xc,%esp
f011dc5d:	68 00 00 20 00       	push   $0x200000
f011dc62:	e8 bb 97 fe ff       	call   f0107422 <kmalloc>
f011dc67:	83 c4 10             	add    $0x10,%esp
f011dc6a:	89 c2                	mov    %eax,%edx
f011dc6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dc6f:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011dc76:	ff 45 f4             	incl   -0xc(%ebp)
f011dc79:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011dc7d:	7e db                	jle    f011dc5a <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011dc7f:	83 ec 0c             	sub    $0xc,%esp
f011dc82:	68 00 b0 1f 00       	push   $0x1fb000
f011dc87:	e8 96 97 fe ff       	call   f0107422 <kmalloc>
f011dc8c:	83 c4 10             	add    $0x10,%esp
f011dc8f:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011dc95:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011dc9b:	89 c1                	mov    %eax,%ecx
f011dc9d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011dca4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011dca7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcac:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011dcaf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dcb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcb7:	f7 75 e4             	divl   -0x1c(%ebp)
f011dcba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dcbd:	29 d0                	sub    %edx,%eax
f011dcbf:	89 c3                	mov    %eax,%ebx
f011dcc1:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011dcc8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dccd:	0f b6 d0             	movzbl %al,%edx
f011dcd0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011dcd3:	01 d0                	add    %edx,%eax
f011dcd5:	48                   	dec    %eax
f011dcd6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011dcd9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011dcdc:	ba 00 00 00 00       	mov    $0x0,%edx
f011dce1:	f7 75 dc             	divl   -0x24(%ebp)
f011dce4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011dce7:	29 d0                	sub    %edx,%eax
f011dce9:	01 c3                	add    %eax,%ebx
f011dceb:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011dcf2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dcf7:	0f b6 c0             	movzbl %al,%eax
f011dcfa:	c1 e0 04             	shl    $0x4,%eax
f011dcfd:	89 c2                	mov    %eax,%edx
f011dcff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011dd02:	01 d0                	add    %edx,%eax
f011dd04:	48                   	dec    %eax
f011dd05:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011dd08:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011dd0b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd10:	f7 75 d4             	divl   -0x2c(%ebp)
f011dd13:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011dd16:	29 d0                	sub    %edx,%eax
f011dd18:	01 d8                	add    %ebx,%eax
f011dd1a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011dd1f:	39 c1                	cmp    %eax,%ecx
f011dd21:	0f 85 c0 04 00 00    	jne    f011e1e7 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011dd27:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011dd2d:	89 c1                	mov    %eax,%ecx
f011dd2f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011dd36:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011dd39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dd3e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011dd41:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dd44:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd49:	f7 75 cc             	divl   -0x34(%ebp)
f011dd4c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dd4f:	29 d0                	sub    %edx,%eax
f011dd51:	89 c3                	mov    %eax,%ebx
f011dd53:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011dd5a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dd5f:	0f b6 d0             	movzbl %al,%edx
f011dd62:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011dd65:	01 d0                	add    %edx,%eax
f011dd67:	48                   	dec    %eax
f011dd68:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011dd6b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dd6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd73:	f7 75 c4             	divl   -0x3c(%ebp)
f011dd76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dd79:	29 d0                	sub    %edx,%eax
f011dd7b:	01 c3                	add    %eax,%ebx
f011dd7d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011dd84:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dd89:	0f b6 c0             	movzbl %al,%eax
f011dd8c:	c1 e0 04             	shl    $0x4,%eax
f011dd8f:	89 c2                	mov    %eax,%edx
f011dd91:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011dd94:	01 d0                	add    %edx,%eax
f011dd96:	48                   	dec    %eax
f011dd97:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011dd9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011dd9d:	ba 00 00 00 00       	mov    $0x0,%edx
f011dda2:	f7 75 bc             	divl   -0x44(%ebp)
f011dda5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011dda8:	29 d0                	sub    %edx,%eax
f011ddaa:	01 d8                	add    %ebx,%eax
f011ddac:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ddb1:	39 c1                	cmp    %eax,%ecx
f011ddb3:	0f 85 2e 04 00 00    	jne    f011e1e7 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ddb9:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011ddbf:	89 c1                	mov    %eax,%ecx
f011ddc1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ddc8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ddcb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ddd0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ddd3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ddd6:	ba 00 00 00 00       	mov    $0x0,%edx
f011dddb:	f7 75 b4             	divl   -0x4c(%ebp)
f011ddde:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011dde1:	29 d0                	sub    %edx,%eax
f011dde3:	89 c3                	mov    %eax,%ebx
f011dde5:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ddec:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ddf1:	0f b6 d0             	movzbl %al,%edx
f011ddf4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ddf7:	01 d0                	add    %edx,%eax
f011ddf9:	48                   	dec    %eax
f011ddfa:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ddfd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011de00:	ba 00 00 00 00       	mov    $0x0,%edx
f011de05:	f7 75 ac             	divl   -0x54(%ebp)
f011de08:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011de0b:	29 d0                	sub    %edx,%eax
f011de0d:	01 c3                	add    %eax,%ebx
f011de0f:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011de16:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011de1b:	0f b6 c0             	movzbl %al,%eax
f011de1e:	c1 e0 04             	shl    $0x4,%eax
f011de21:	89 c2                	mov    %eax,%edx
f011de23:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011de26:	01 d0                	add    %edx,%eax
f011de28:	48                   	dec    %eax
f011de29:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011de2c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011de34:	f7 75 a4             	divl   -0x5c(%ebp)
f011de37:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de3a:	29 d0                	sub    %edx,%eax
f011de3c:	01 d8                	add    %ebx,%eax
f011de3e:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011de43:	39 c1                	cmp    %eax,%ecx
f011de45:	0f 85 9c 03 00 00    	jne    f011e1e7 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011de4b:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011de51:	89 c1                	mov    %eax,%ecx
f011de53:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011de5a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011de5d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de62:	89 45 98             	mov    %eax,-0x68(%ebp)
f011de65:	8b 45 98             	mov    -0x68(%ebp),%eax
f011de68:	ba 00 00 00 00       	mov    $0x0,%edx
f011de6d:	f7 75 9c             	divl   -0x64(%ebp)
f011de70:	8b 45 98             	mov    -0x68(%ebp),%eax
f011de73:	29 d0                	sub    %edx,%eax
f011de75:	89 c3                	mov    %eax,%ebx
f011de77:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011de7e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011de83:	0f b6 d0             	movzbl %al,%edx
f011de86:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011de89:	01 d0                	add    %edx,%eax
f011de8b:	48                   	dec    %eax
f011de8c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011de8f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011de92:	ba 00 00 00 00       	mov    $0x0,%edx
f011de97:	f7 75 94             	divl   -0x6c(%ebp)
f011de9a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011de9d:	29 d0                	sub    %edx,%eax
f011de9f:	01 c3                	add    %eax,%ebx
f011dea1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011dea8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dead:	0f b6 c0             	movzbl %al,%eax
f011deb0:	c1 e0 04             	shl    $0x4,%eax
f011deb3:	89 c2                	mov    %eax,%edx
f011deb5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011deb8:	01 d0                	add    %edx,%eax
f011deba:	48                   	dec    %eax
f011debb:	89 45 88             	mov    %eax,-0x78(%ebp)
f011debe:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dec1:	ba 00 00 00 00       	mov    $0x0,%edx
f011dec6:	f7 75 8c             	divl   -0x74(%ebp)
f011dec9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011decc:	29 d0                	sub    %edx,%eax
f011dece:	01 d8                	add    %ebx,%eax
f011ded0:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ded5:	39 c1                	cmp    %eax,%ecx
f011ded7:	0f 85 0a 03 00 00    	jne    f011e1e7 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011dedd:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011dee3:	89 c1                	mov    %eax,%ecx
f011dee5:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011deec:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011deef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011def4:	89 45 80             	mov    %eax,-0x80(%ebp)
f011def7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011defa:	ba 00 00 00 00       	mov    $0x0,%edx
f011deff:	f7 75 84             	divl   -0x7c(%ebp)
f011df02:	8b 45 80             	mov    -0x80(%ebp),%eax
f011df05:	29 d0                	sub    %edx,%eax
f011df07:	89 c3                	mov    %eax,%ebx
f011df09:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011df10:	10 00 00 
f011df13:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011df18:	0f b6 d0             	movzbl %al,%edx
f011df1b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011df21:	01 d0                	add    %edx,%eax
f011df23:	48                   	dec    %eax
f011df24:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011df2a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011df30:	ba 00 00 00 00       	mov    $0x0,%edx
f011df35:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011df3b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011df41:	29 d0                	sub    %edx,%eax
f011df43:	01 c3                	add    %eax,%ebx
f011df45:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011df4c:	10 00 00 
f011df4f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011df54:	0f b6 c0             	movzbl %al,%eax
f011df57:	c1 e0 04             	shl    $0x4,%eax
f011df5a:	89 c2                	mov    %eax,%edx
f011df5c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011df62:	01 d0                	add    %edx,%eax
f011df64:	48                   	dec    %eax
f011df65:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011df6b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df71:	ba 00 00 00 00       	mov    $0x0,%edx
f011df76:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011df7c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df82:	29 d0                	sub    %edx,%eax
f011df84:	01 d8                	add    %ebx,%eax
f011df86:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011df8b:	39 c1                	cmp    %eax,%ecx
f011df8d:	0f 85 54 02 00 00    	jne    f011e1e7 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011df93:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011df99:	89 c1                	mov    %eax,%ecx
f011df9b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011dfa2:	10 00 00 
f011dfa5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011dfab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dfb0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011dfb6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dfbc:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfc1:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011dfc7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dfcd:	29 d0                	sub    %edx,%eax
f011dfcf:	89 c3                	mov    %eax,%ebx
f011dfd1:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011dfd8:	10 00 00 
f011dfdb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dfe0:	0f b6 d0             	movzbl %al,%edx
f011dfe3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dfe9:	01 d0                	add    %edx,%eax
f011dfeb:	48                   	dec    %eax
f011dfec:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011dff2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dff8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dffd:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e003:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e009:	29 d0                	sub    %edx,%eax
f011e00b:	01 c3                	add    %eax,%ebx
f011e00d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e014:	10 00 00 
f011e017:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e01c:	0f b6 c0             	movzbl %al,%eax
f011e01f:	c1 e0 04             	shl    $0x4,%eax
f011e022:	89 c2                	mov    %eax,%edx
f011e024:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e02a:	01 d0                	add    %edx,%eax
f011e02c:	48                   	dec    %eax
f011e02d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e033:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e039:	ba 00 00 00 00       	mov    $0x0,%edx
f011e03e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e044:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e04a:	29 d0                	sub    %edx,%eax
f011e04c:	01 d8                	add    %ebx,%eax
f011e04e:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e053:	39 c1                	cmp    %eax,%ecx
f011e055:	0f 85 8c 01 00 00    	jne    f011e1e7 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e05b:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011e061:	89 c1                	mov    %eax,%ecx
f011e063:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e06a:	10 00 00 
f011e06d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e073:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e078:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e07e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e084:	ba 00 00 00 00       	mov    $0x0,%edx
f011e089:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e08f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e095:	29 d0                	sub    %edx,%eax
f011e097:	89 c3                	mov    %eax,%ebx
f011e099:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e0a0:	10 00 00 
f011e0a3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e0a8:	0f b6 d0             	movzbl %al,%edx
f011e0ab:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e0b1:	01 d0                	add    %edx,%eax
f011e0b3:	48                   	dec    %eax
f011e0b4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e0ba:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e0c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0c5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e0cb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e0d1:	29 d0                	sub    %edx,%eax
f011e0d3:	01 c3                	add    %eax,%ebx
f011e0d5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e0dc:	10 00 00 
f011e0df:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e0e4:	0f b6 c0             	movzbl %al,%eax
f011e0e7:	c1 e0 04             	shl    $0x4,%eax
f011e0ea:	89 c2                	mov    %eax,%edx
f011e0ec:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e0f2:	01 d0                	add    %edx,%eax
f011e0f4:	48                   	dec    %eax
f011e0f5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e0fb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e101:	ba 00 00 00 00       	mov    $0x0,%edx
f011e106:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e10c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e112:	29 d0                	sub    %edx,%eax
f011e114:	01 d8                	add    %ebx,%eax
f011e116:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e11b:	39 c1                	cmp    %eax,%ecx
f011e11d:	0f 85 c4 00 00 00    	jne    f011e1e7 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e123:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011e129:	89 c1                	mov    %eax,%ecx
f011e12b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e132:	10 00 00 
f011e135:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e13b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e140:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e146:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e14c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e151:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e157:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e15d:	29 d0                	sub    %edx,%eax
f011e15f:	89 c3                	mov    %eax,%ebx
f011e161:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e168:	10 00 00 
f011e16b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e170:	0f b6 d0             	movzbl %al,%edx
f011e173:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e179:	01 d0                	add    %edx,%eax
f011e17b:	48                   	dec    %eax
f011e17c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e182:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e188:	ba 00 00 00 00       	mov    $0x0,%edx
f011e18d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e193:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e199:	29 d0                	sub    %edx,%eax
f011e19b:	01 c3                	add    %eax,%ebx
f011e19d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e1a4:	10 00 00 
f011e1a7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e1ac:	0f b6 c0             	movzbl %al,%eax
f011e1af:	c1 e0 04             	shl    $0x4,%eax
f011e1b2:	89 c2                	mov    %eax,%edx
f011e1b4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e1ba:	01 d0                	add    %edx,%eax
f011e1bc:	48                   	dec    %eax
f011e1bd:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e1c3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e1c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1ce:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e1d4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e1da:	29 d0                	sub    %edx,%eax
f011e1dc:	01 d8                	add    %ebx,%eax
f011e1de:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e1e3:	39 c1                	cmp    %eax,%ecx
f011e1e5:	74 17                	je     f011e1fe <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e1e7:	83 ec 04             	sub    $0x4,%esp
f011e1ea:	68 2c ac 13 f0       	push   $0xf013ac2c
f011e1ef:	68 31 04 00 00       	push   $0x431
f011e1f4:	68 56 a5 13 f0       	push   $0xf013a556
f011e1f9:	e8 a8 1f fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1fe:	e8 89 5a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e203:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e206:	74 17                	je     f011e21f <test_kmalloc_worstfit+0x634>
f011e208:	83 ec 04             	sub    $0x4,%esp
f011e20b:	68 70 a5 13 f0       	push   $0xf013a570
f011e210:	68 33 04 00 00       	push   $0x433
f011e215:	68 56 a5 13 f0       	push   $0xf013a556
f011e21a:	e8 87 1f fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e21f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e222:	e8 8b de fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e227:	29 c3                	sub    %eax,%ebx
f011e229:	89 d8                	mov    %ebx,%eax
f011e22b:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e230:	74 17                	je     f011e249 <test_kmalloc_worstfit+0x65e>
f011e232:	83 ec 04             	sub    $0x4,%esp
f011e235:	68 13 a8 13 f0       	push   $0xf013a813
f011e23a:	68 34 04 00 00       	push   $0x434
f011e23f:	68 56 a5 13 f0       	push   $0xf013a556
f011e244:	e8 5d 1f fe ff       	call   f01001a6 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e249:	e8 64 de fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e24e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e251:	e8 36 5a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e256:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e259:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e25f:	83 ec 0c             	sub    $0xc,%esp
f011e262:	50                   	push   %eax
f011e263:	e8 d4 91 fe ff       	call   f010743c <kfree>
f011e268:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e26b:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e271:	83 ec 0c             	sub    $0xc,%esp
f011e274:	50                   	push   %eax
f011e275:	e8 c2 91 fe ff       	call   f010743c <kfree>
f011e27a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e27d:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011e283:	83 ec 0c             	sub    $0xc,%esp
f011e286:	50                   	push   %eax
f011e287:	e8 b0 91 fe ff       	call   f010743c <kfree>
f011e28c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e28f:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e295:	83 ec 0c             	sub    $0xc,%esp
f011e298:	50                   	push   %eax
f011e299:	e8 9e 91 fe ff       	call   f010743c <kfree>
f011e29e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e2a1:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011e2a7:	83 ec 0c             	sub    $0xc,%esp
f011e2aa:	50                   	push   %eax
f011e2ab:	e8 8c 91 fe ff       	call   f010743c <kfree>
f011e2b0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e2b3:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011e2b9:	83 ec 0c             	sub    $0xc,%esp
f011e2bc:	50                   	push   %eax
f011e2bd:	e8 7a 91 fe ff       	call   f010743c <kfree>
f011e2c2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e2c5:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011e2cb:	83 ec 0c             	sub    $0xc,%esp
f011e2ce:	50                   	push   %eax
f011e2cf:	e8 68 91 fe ff       	call   f010743c <kfree>
f011e2d4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e2d7:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011e2dd:	83 ec 0c             	sub    $0xc,%esp
f011e2e0:	50                   	push   %eax
f011e2e1:	e8 56 91 fe ff       	call   f010743c <kfree>
f011e2e6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e2e9:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011e2ef:	83 ec 0c             	sub    $0xc,%esp
f011e2f2:	50                   	push   %eax
f011e2f3:	e8 44 91 fe ff       	call   f010743c <kfree>
f011e2f8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e2fb:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011e301:	83 ec 0c             	sub    $0xc,%esp
f011e304:	50                   	push   %eax
f011e305:	e8 32 91 fe ff       	call   f010743c <kfree>
f011e30a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e30d:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011e313:	83 ec 0c             	sub    $0xc,%esp
f011e316:	50                   	push   %eax
f011e317:	e8 20 91 fe ff       	call   f010743c <kfree>
f011e31c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e31f:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e325:	83 ec 0c             	sub    $0xc,%esp
f011e328:	50                   	push   %eax
f011e329:	e8 0e 91 fe ff       	call   f010743c <kfree>
f011e32e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e331:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011e337:	83 ec 0c             	sub    $0xc,%esp
f011e33a:	50                   	push   %eax
f011e33b:	e8 fc 90 fe ff       	call   f010743c <kfree>
f011e340:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e343:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011e349:	83 ec 0c             	sub    $0xc,%esp
f011e34c:	50                   	push   %eax
f011e34d:	e8 ea 90 fe ff       	call   f010743c <kfree>
f011e352:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e355:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011e35b:	83 ec 0c             	sub    $0xc,%esp
f011e35e:	50                   	push   %eax
f011e35f:	e8 d8 90 fe ff       	call   f010743c <kfree>
f011e364:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e367:	e8 20 59 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e36c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e36f:	74 17                	je     f011e388 <test_kmalloc_worstfit+0x79d>
f011e371:	83 ec 04             	sub    $0x4,%esp
f011e374:	68 70 a5 13 f0       	push   $0xf013a570
f011e379:	68 4a 04 00 00       	push   $0x44a
f011e37e:	68 56 a5 13 f0       	push   $0xf013a556
f011e383:	e8 1e 1e fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e388:	e8 25 dd fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e38d:	89 c2                	mov    %eax,%edx
f011e38f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e392:	29 c2                	sub    %eax,%edx
f011e394:	89 d0                	mov    %edx,%eax
f011e396:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e39b:	74 17                	je     f011e3b4 <test_kmalloc_worstfit+0x7c9>
f011e39d:	83 ec 04             	sub    $0x4,%esp
f011e3a0:	68 24 a8 13 f0       	push   $0xf013a824
f011e3a5:	68 4b 04 00 00       	push   $0x44b
f011e3aa:	68 56 a5 13 f0       	push   $0xf013a556
f011e3af:	e8 f2 1d fe ff       	call   f01001a6 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e3b4:	e8 f9 dc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e3b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e3bc:	e8 cb 58 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e3c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e3c4:	83 ec 0c             	sub    $0xc,%esp
f011e3c7:	68 00 00 10 00       	push   $0x100000
f011e3cc:	e8 51 90 fe ff       	call   f0107422 <kmalloc>
f011e3d1:	83 c4 10             	add    $0x10,%esp
f011e3d4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e3da:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011e3e1:	10 00 00 
f011e3e4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e3ea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e3ef:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011e3f5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e3fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e400:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011e406:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e40c:	29 d0                	sub    %edx,%eax
f011e40e:	89 c1                	mov    %eax,%ecx
f011e410:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011e417:	10 00 00 
f011e41a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e41f:	0f b6 d0             	movzbl %al,%edx
f011e422:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e428:	01 d0                	add    %edx,%eax
f011e42a:	48                   	dec    %eax
f011e42b:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011e431:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e437:	ba 00 00 00 00       	mov    $0x0,%edx
f011e43c:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011e442:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e448:	29 d0                	sub    %edx,%eax
f011e44a:	01 c1                	add    %eax,%ecx
f011e44c:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011e453:	10 00 00 
f011e456:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e45b:	0f b6 c0             	movzbl %al,%eax
f011e45e:	c1 e0 04             	shl    $0x4,%eax
f011e461:	89 c2                	mov    %eax,%edx
f011e463:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e469:	01 d0                	add    %edx,%eax
f011e46b:	48                   	dec    %eax
f011e46c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011e472:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e478:	ba 00 00 00 00       	mov    $0x0,%edx
f011e47d:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011e483:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e489:	29 d0                	sub    %edx,%eax
f011e48b:	01 c8                	add    %ecx,%eax
f011e48d:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011e493:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e499:	39 c2                	cmp    %eax,%edx
f011e49b:	74 17                	je     f011e4b4 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011e49d:	83 ec 04             	sub    $0x4,%esp
f011e4a0:	68 70 ac 13 f0       	push   $0xf013ac70
f011e4a5:	68 52 04 00 00       	push   $0x452
f011e4aa:	68 56 a5 13 f0       	push   $0xf013a556
f011e4af:	e8 f2 1c fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e4b4:	e8 d3 57 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e4b9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e4bc:	74 17                	je     f011e4d5 <test_kmalloc_worstfit+0x8ea>
f011e4be:	83 ec 04             	sub    $0x4,%esp
f011e4c1:	68 70 a5 13 f0       	push   $0xf013a570
f011e4c6:	68 53 04 00 00       	push   $0x453
f011e4cb:	68 56 a5 13 f0       	push   $0xf013a556
f011e4d0:	e8 d1 1c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e4d5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e4d8:	e8 d5 db fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e4dd:	29 c3                	sub    %eax,%ebx
f011e4df:	89 d8                	mov    %ebx,%eax
f011e4e1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e4e6:	74 17                	je     f011e4ff <test_kmalloc_worstfit+0x914>
f011e4e8:	83 ec 04             	sub    $0x4,%esp
f011e4eb:	68 8e aa 13 f0       	push   $0xf013aa8e
f011e4f0:	68 54 04 00 00       	push   $0x454
f011e4f5:	68 56 a5 13 f0       	push   $0xf013a556
f011e4fa:	e8 a7 1c fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e4ff:	ff 45 e8             	incl   -0x18(%ebp)
f011e502:	83 ec 08             	sub    $0x8,%esp
f011e505:	ff 75 e8             	pushl  -0x18(%ebp)
f011e508:	68 90 ac 13 f0       	push   $0xf013ac90
f011e50d:	e8 1b 27 fe ff       	call   f0100c2d <cprintf>
f011e512:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e515:	e8 98 db fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e51a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e51d:	e8 6a 57 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e522:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011e525:	83 ec 0c             	sub    $0xc,%esp
f011e528:	68 00 00 40 00       	push   $0x400000
f011e52d:	e8 f0 8e fe ff       	call   f0107422 <kmalloc>
f011e532:	83 c4 10             	add    $0x10,%esp
f011e535:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011e53b:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011e542:	10 00 00 
f011e545:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e54b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e550:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011e556:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e55c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e561:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011e567:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e56d:	29 d0                	sub    %edx,%eax
f011e56f:	89 c1                	mov    %eax,%ecx
f011e571:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011e578:	10 00 00 
f011e57b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e580:	0f b6 d0             	movzbl %al,%edx
f011e583:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e589:	01 d0                	add    %edx,%eax
f011e58b:	48                   	dec    %eax
f011e58c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011e592:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e598:	ba 00 00 00 00       	mov    $0x0,%edx
f011e59d:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011e5a3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e5a9:	29 d0                	sub    %edx,%eax
f011e5ab:	01 c1                	add    %eax,%ecx
f011e5ad:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011e5b4:	10 00 00 
f011e5b7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e5bc:	0f b6 c0             	movzbl %al,%eax
f011e5bf:	c1 e0 04             	shl    $0x4,%eax
f011e5c2:	89 c2                	mov    %eax,%edx
f011e5c4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e5ca:	01 d0                	add    %edx,%eax
f011e5cc:	48                   	dec    %eax
f011e5cd:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011e5d3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e5d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5de:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011e5e4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e5ea:	29 d0                	sub    %edx,%eax
f011e5ec:	01 c8                	add    %ecx,%eax
f011e5ee:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011e5f4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e5fa:	39 c2                	cmp    %eax,%edx
f011e5fc:	74 17                	je     f011e615 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011e5fe:	83 ec 04             	sub    $0x4,%esp
f011e601:	68 70 ac 13 f0       	push   $0xf013ac70
f011e606:	68 5b 04 00 00       	push   $0x45b
f011e60b:	68 56 a5 13 f0       	push   $0xf013a556
f011e610:	e8 91 1b fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e615:	e8 72 56 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e61a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e61d:	74 17                	je     f011e636 <test_kmalloc_worstfit+0xa4b>
f011e61f:	83 ec 04             	sub    $0x4,%esp
f011e622:	68 70 a5 13 f0       	push   $0xf013a570
f011e627:	68 5c 04 00 00       	push   $0x45c
f011e62c:	68 56 a5 13 f0       	push   $0xf013a556
f011e631:	e8 70 1b fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e636:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e639:	e8 74 da fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e63e:	29 c3                	sub    %eax,%ebx
f011e640:	89 d8                	mov    %ebx,%eax
f011e642:	3d 00 04 00 00       	cmp    $0x400,%eax
f011e647:	74 17                	je     f011e660 <test_kmalloc_worstfit+0xa75>
f011e649:	83 ec 04             	sub    $0x4,%esp
f011e64c:	68 8e aa 13 f0       	push   $0xf013aa8e
f011e651:	68 5d 04 00 00       	push   $0x45d
f011e656:	68 56 a5 13 f0       	push   $0xf013a556
f011e65b:	e8 46 1b fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e660:	ff 45 e8             	incl   -0x18(%ebp)
f011e663:	83 ec 08             	sub    $0x8,%esp
f011e666:	ff 75 e8             	pushl  -0x18(%ebp)
f011e669:	68 90 ac 13 f0       	push   $0xf013ac90
f011e66e:	e8 ba 25 fe ff       	call   f0100c2d <cprintf>
f011e673:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e676:	e8 37 da fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e67b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e67e:	e8 09 56 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e683:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011e686:	83 ec 0c             	sub    $0xc,%esp
f011e689:	68 00 00 60 00       	push   $0x600000
f011e68e:	e8 8f 8d fe ff       	call   f0107422 <kmalloc>
f011e693:	83 c4 10             	add    $0x10,%esp
f011e696:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011e69c:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011e6a3:	10 00 00 
f011e6a6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e6ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6b1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011e6b7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e6bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6c2:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011e6c8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e6ce:	29 d0                	sub    %edx,%eax
f011e6d0:	89 c1                	mov    %eax,%ecx
f011e6d2:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011e6d9:	10 00 00 
f011e6dc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e6e1:	0f b6 d0             	movzbl %al,%edx
f011e6e4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e6ea:	01 d0                	add    %edx,%eax
f011e6ec:	48                   	dec    %eax
f011e6ed:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011e6f3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011e6f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6fe:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011e704:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011e70a:	29 d0                	sub    %edx,%eax
f011e70c:	01 c1                	add    %eax,%ecx
f011e70e:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011e715:	10 00 00 
f011e718:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e71d:	0f b6 c0             	movzbl %al,%eax
f011e720:	c1 e0 04             	shl    $0x4,%eax
f011e723:	89 c2                	mov    %eax,%edx
f011e725:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011e72b:	01 d0                	add    %edx,%eax
f011e72d:	48                   	dec    %eax
f011e72e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011e734:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011e73a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e73f:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011e745:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011e74b:	29 d0                	sub    %edx,%eax
f011e74d:	01 c8                	add    %ecx,%eax
f011e74f:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011e755:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e75b:	39 c2                	cmp    %eax,%edx
f011e75d:	74 17                	je     f011e776 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011e75f:	83 ec 04             	sub    $0x4,%esp
f011e762:	68 70 ac 13 f0       	push   $0xf013ac70
f011e767:	68 64 04 00 00       	push   $0x464
f011e76c:	68 56 a5 13 f0       	push   $0xf013a556
f011e771:	e8 30 1a fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e776:	e8 11 55 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e77b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e77e:	74 17                	je     f011e797 <test_kmalloc_worstfit+0xbac>
f011e780:	83 ec 04             	sub    $0x4,%esp
f011e783:	68 70 a5 13 f0       	push   $0xf013a570
f011e788:	68 65 04 00 00       	push   $0x465
f011e78d:	68 56 a5 13 f0       	push   $0xf013a556
f011e792:	e8 0f 1a fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e797:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e79a:	e8 13 d9 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e79f:	29 c3                	sub    %eax,%ebx
f011e7a1:	89 d8                	mov    %ebx,%eax
f011e7a3:	3d 00 06 00 00       	cmp    $0x600,%eax
f011e7a8:	74 17                	je     f011e7c1 <test_kmalloc_worstfit+0xbd6>
f011e7aa:	83 ec 04             	sub    $0x4,%esp
f011e7ad:	68 8e aa 13 f0       	push   $0xf013aa8e
f011e7b2:	68 66 04 00 00       	push   $0x466
f011e7b7:	68 56 a5 13 f0       	push   $0xf013a556
f011e7bc:	e8 e5 19 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e7c1:	ff 45 e8             	incl   -0x18(%ebp)
f011e7c4:	83 ec 08             	sub    $0x8,%esp
f011e7c7:	ff 75 e8             	pushl  -0x18(%ebp)
f011e7ca:	68 90 ac 13 f0       	push   $0xf013ac90
f011e7cf:	e8 59 24 fe ff       	call   f0100c2d <cprintf>
f011e7d4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e7d7:	e8 d6 d8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e7dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e7df:	e8 a8 54 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e7e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011e7e7:	83 ec 0c             	sub    $0xc,%esp
f011e7ea:	68 00 00 50 00       	push   $0x500000
f011e7ef:	e8 2e 8c fe ff       	call   f0107422 <kmalloc>
f011e7f4:	83 c4 10             	add    $0x10,%esp
f011e7f7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011e7fd:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011e804:	10 00 00 
f011e807:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e80d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e812:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011e818:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011e81e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e823:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011e829:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011e82f:	29 d0                	sub    %edx,%eax
f011e831:	89 c1                	mov    %eax,%ecx
f011e833:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011e83a:	10 00 00 
f011e83d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e842:	0f b6 d0             	movzbl %al,%edx
f011e845:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011e84b:	01 d0                	add    %edx,%eax
f011e84d:	48                   	dec    %eax
f011e84e:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011e854:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011e85a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e85f:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011e865:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011e86b:	29 d0                	sub    %edx,%eax
f011e86d:	01 c1                	add    %eax,%ecx
f011e86f:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011e876:	10 00 00 
f011e879:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e87e:	0f b6 c0             	movzbl %al,%eax
f011e881:	c1 e0 04             	shl    $0x4,%eax
f011e884:	89 c2                	mov    %eax,%edx
f011e886:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011e88c:	01 d0                	add    %edx,%eax
f011e88e:	48                   	dec    %eax
f011e88f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011e895:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011e89b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8a0:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011e8a6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011e8ac:	29 d0                	sub    %edx,%eax
f011e8ae:	01 c8                	add    %ecx,%eax
f011e8b0:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011e8b6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e8bc:	39 c2                	cmp    %eax,%edx
f011e8be:	74 17                	je     f011e8d7 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011e8c0:	83 ec 04             	sub    $0x4,%esp
f011e8c3:	68 70 ac 13 f0       	push   $0xf013ac70
f011e8c8:	68 6d 04 00 00       	push   $0x46d
f011e8cd:	68 56 a5 13 f0       	push   $0xf013a556
f011e8d2:	e8 cf 18 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8d7:	e8 b0 53 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e8dc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e8df:	74 17                	je     f011e8f8 <test_kmalloc_worstfit+0xd0d>
f011e8e1:	83 ec 04             	sub    $0x4,%esp
f011e8e4:	68 70 a5 13 f0       	push   $0xf013a570
f011e8e9:	68 6e 04 00 00       	push   $0x46e
f011e8ee:	68 56 a5 13 f0       	push   $0xf013a556
f011e8f3:	e8 ae 18 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e8f8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e8fb:	e8 b2 d7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e900:	29 c3                	sub    %eax,%ebx
f011e902:	89 d8                	mov    %ebx,%eax
f011e904:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e909:	74 17                	je     f011e922 <test_kmalloc_worstfit+0xd37>
f011e90b:	83 ec 04             	sub    $0x4,%esp
f011e90e:	68 8e aa 13 f0       	push   $0xf013aa8e
f011e913:	68 6f 04 00 00       	push   $0x46f
f011e918:	68 56 a5 13 f0       	push   $0xf013a556
f011e91d:	e8 84 18 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e922:	ff 45 e8             	incl   -0x18(%ebp)
f011e925:	83 ec 08             	sub    $0x8,%esp
f011e928:	ff 75 e8             	pushl  -0x18(%ebp)
f011e92b:	68 90 ac 13 f0       	push   $0xf013ac90
f011e930:	e8 f8 22 fe ff       	call   f0100c2d <cprintf>
f011e935:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e938:	e8 75 d7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011e93d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e940:	e8 47 53 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e945:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011e948:	83 ec 0c             	sub    $0xc,%esp
f011e94b:	68 00 00 40 00       	push   $0x400000
f011e950:	e8 cd 8a fe ff       	call   f0107422 <kmalloc>
f011e955:	83 c4 10             	add    $0x10,%esp
f011e958:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011e95e:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011e965:	10 00 00 
f011e968:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011e96e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e973:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011e979:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e97f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e984:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011e98a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e990:	29 d0                	sub    %edx,%eax
f011e992:	89 c1                	mov    %eax,%ecx
f011e994:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011e99b:	10 00 00 
f011e99e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e9a3:	0f b6 d0             	movzbl %al,%edx
f011e9a6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e9ac:	01 d0                	add    %edx,%eax
f011e9ae:	48                   	dec    %eax
f011e9af:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011e9b5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e9bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9c0:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011e9c6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e9cc:	29 d0                	sub    %edx,%eax
f011e9ce:	01 c1                	add    %eax,%ecx
f011e9d0:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011e9d7:	10 00 00 
f011e9da:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e9df:	0f b6 c0             	movzbl %al,%eax
f011e9e2:	c1 e0 04             	shl    $0x4,%eax
f011e9e5:	89 c2                	mov    %eax,%edx
f011e9e7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e9ed:	01 d0                	add    %edx,%eax
f011e9ef:	48                   	dec    %eax
f011e9f0:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011e9f6:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e9fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea01:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011ea07:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ea0d:	29 d0                	sub    %edx,%eax
f011ea0f:	01 c8                	add    %ecx,%eax
f011ea11:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011ea17:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ea1d:	39 c2                	cmp    %eax,%edx
f011ea1f:	74 17                	je     f011ea38 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011ea21:	83 ec 04             	sub    $0x4,%esp
f011ea24:	68 70 ac 13 f0       	push   $0xf013ac70
f011ea29:	68 76 04 00 00       	push   $0x476
f011ea2e:	68 56 a5 13 f0       	push   $0xf013a556
f011ea33:	e8 6e 17 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea38:	e8 4f 52 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ea3d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea40:	74 17                	je     f011ea59 <test_kmalloc_worstfit+0xe6e>
f011ea42:	83 ec 04             	sub    $0x4,%esp
f011ea45:	68 70 a5 13 f0       	push   $0xf013a570
f011ea4a:	68 77 04 00 00       	push   $0x477
f011ea4f:	68 56 a5 13 f0       	push   $0xf013a556
f011ea54:	e8 4d 17 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea59:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea5c:	e8 51 d6 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ea61:	29 c3                	sub    %eax,%ebx
f011ea63:	89 d8                	mov    %ebx,%eax
f011ea65:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ea6a:	74 17                	je     f011ea83 <test_kmalloc_worstfit+0xe98>
f011ea6c:	83 ec 04             	sub    $0x4,%esp
f011ea6f:	68 8e aa 13 f0       	push   $0xf013aa8e
f011ea74:	68 78 04 00 00       	push   $0x478
f011ea79:	68 56 a5 13 f0       	push   $0xf013a556
f011ea7e:	e8 23 17 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ea83:	ff 45 e8             	incl   -0x18(%ebp)
f011ea86:	83 ec 08             	sub    $0x8,%esp
f011ea89:	ff 75 e8             	pushl  -0x18(%ebp)
f011ea8c:	68 90 ac 13 f0       	push   $0xf013ac90
f011ea91:	e8 97 21 fe ff       	call   f0100c2d <cprintf>
f011ea96:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ea99:	e8 14 d6 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ea9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eaa1:	e8 e6 51 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eaa6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011eaa9:	83 ec 0c             	sub    $0xc,%esp
f011eaac:	68 00 00 20 00       	push   $0x200000
f011eab1:	e8 6c 89 fe ff       	call   f0107422 <kmalloc>
f011eab6:	83 c4 10             	add    $0x10,%esp
f011eab9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011eabf:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011eac6:	10 00 00 
f011eac9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011eacf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ead4:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011eada:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011eae0:	ba 00 00 00 00       	mov    $0x0,%edx
f011eae5:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011eaeb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011eaf1:	29 d0                	sub    %edx,%eax
f011eaf3:	89 c1                	mov    %eax,%ecx
f011eaf5:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011eafc:	10 00 00 
f011eaff:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011eb04:	0f b6 d0             	movzbl %al,%edx
f011eb07:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011eb0d:	01 d0                	add    %edx,%eax
f011eb0f:	48                   	dec    %eax
f011eb10:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011eb16:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011eb1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb21:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011eb27:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011eb2d:	29 d0                	sub    %edx,%eax
f011eb2f:	01 c1                	add    %eax,%ecx
f011eb31:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011eb38:	10 00 00 
f011eb3b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011eb40:	0f b6 c0             	movzbl %al,%eax
f011eb43:	c1 e0 04             	shl    $0x4,%eax
f011eb46:	89 c2                	mov    %eax,%edx
f011eb48:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011eb4e:	01 d0                	add    %edx,%eax
f011eb50:	48                   	dec    %eax
f011eb51:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011eb57:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011eb5d:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb62:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011eb68:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011eb6e:	29 d0                	sub    %edx,%eax
f011eb70:	01 c8                	add    %ecx,%eax
f011eb72:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011eb78:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011eb7e:	39 c2                	cmp    %eax,%edx
f011eb80:	74 17                	je     f011eb99 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011eb82:	83 ec 04             	sub    $0x4,%esp
f011eb85:	68 70 ac 13 f0       	push   $0xf013ac70
f011eb8a:	68 7f 04 00 00       	push   $0x47f
f011eb8f:	68 56 a5 13 f0       	push   $0xf013a556
f011eb94:	e8 0d 16 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb99:	e8 ee 50 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eb9e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eba1:	74 17                	je     f011ebba <test_kmalloc_worstfit+0xfcf>
f011eba3:	83 ec 04             	sub    $0x4,%esp
f011eba6:	68 70 a5 13 f0       	push   $0xf013a570
f011ebab:	68 80 04 00 00       	push   $0x480
f011ebb0:	68 56 a5 13 f0       	push   $0xf013a556
f011ebb5:	e8 ec 15 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ebba:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ebbd:	e8 f0 d4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ebc2:	29 c3                	sub    %eax,%ebx
f011ebc4:	89 d8                	mov    %ebx,%eax
f011ebc6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ebcb:	74 17                	je     f011ebe4 <test_kmalloc_worstfit+0xff9>
f011ebcd:	83 ec 04             	sub    $0x4,%esp
f011ebd0:	68 8e aa 13 f0       	push   $0xf013aa8e
f011ebd5:	68 81 04 00 00       	push   $0x481
f011ebda:	68 56 a5 13 f0       	push   $0xf013a556
f011ebdf:	e8 c2 15 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ebe4:	ff 45 e8             	incl   -0x18(%ebp)
f011ebe7:	83 ec 08             	sub    $0x8,%esp
f011ebea:	ff 75 e8             	pushl  -0x18(%ebp)
f011ebed:	68 90 ac 13 f0       	push   $0xf013ac90
f011ebf2:	e8 36 20 fe ff       	call   f0100c2d <cprintf>
f011ebf7:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ebfa:	e8 b3 d4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ebff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec02:	e8 85 50 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ec07:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011ec0a:	83 ec 0c             	sub    $0xc,%esp
f011ec0d:	68 00 00 18 00       	push   $0x180000
f011ec12:	e8 0b 88 fe ff       	call   f0107422 <kmalloc>
f011ec17:	83 c4 10             	add    $0x10,%esp
f011ec1a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011ec20:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011ec27:	10 00 00 
f011ec2a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011ec30:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec35:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011ec3b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ec41:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec46:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011ec4c:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ec52:	29 d0                	sub    %edx,%eax
f011ec54:	89 c1                	mov    %eax,%ecx
f011ec56:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011ec5d:	10 00 00 
f011ec60:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ec65:	0f b6 d0             	movzbl %al,%edx
f011ec68:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ec6e:	01 d0                	add    %edx,%eax
f011ec70:	48                   	dec    %eax
f011ec71:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011ec77:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ec7d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec82:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011ec88:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ec8e:	29 d0                	sub    %edx,%eax
f011ec90:	01 c1                	add    %eax,%ecx
f011ec92:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011ec99:	10 00 00 
f011ec9c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011eca1:	0f b6 c0             	movzbl %al,%eax
f011eca4:	c1 e0 04             	shl    $0x4,%eax
f011eca7:	89 c2                	mov    %eax,%edx
f011eca9:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ecaf:	01 d0                	add    %edx,%eax
f011ecb1:	48                   	dec    %eax
f011ecb2:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011ecb8:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ecbe:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecc3:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011ecc9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011eccf:	29 d0                	sub    %edx,%eax
f011ecd1:	01 c8                	add    %ecx,%eax
f011ecd3:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011ecd9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ecdf:	39 c2                	cmp    %eax,%edx
f011ece1:	74 17                	je     f011ecfa <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011ece3:	83 ec 04             	sub    $0x4,%esp
f011ece6:	68 70 ac 13 f0       	push   $0xf013ac70
f011eceb:	68 88 04 00 00       	push   $0x488
f011ecf0:	68 56 a5 13 f0       	push   $0xf013a556
f011ecf5:	e8 ac 14 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ecfa:	e8 8d 4f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ecff:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed02:	74 17                	je     f011ed1b <test_kmalloc_worstfit+0x1130>
f011ed04:	83 ec 04             	sub    $0x4,%esp
f011ed07:	68 70 a5 13 f0       	push   $0xf013a570
f011ed0c:	68 89 04 00 00       	push   $0x489
f011ed11:	68 56 a5 13 f0       	push   $0xf013a556
f011ed16:	e8 8b 14 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ed1b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed1e:	e8 8f d3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ed23:	29 c3                	sub    %eax,%ebx
f011ed25:	89 d8                	mov    %ebx,%eax
f011ed27:	3d 80 01 00 00       	cmp    $0x180,%eax
f011ed2c:	74 17                	je     f011ed45 <test_kmalloc_worstfit+0x115a>
f011ed2e:	83 ec 04             	sub    $0x4,%esp
f011ed31:	68 8e aa 13 f0       	push   $0xf013aa8e
f011ed36:	68 8a 04 00 00       	push   $0x48a
f011ed3b:	68 56 a5 13 f0       	push   $0xf013a556
f011ed40:	e8 61 14 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ed45:	ff 45 e8             	incl   -0x18(%ebp)
f011ed48:	83 ec 08             	sub    $0x8,%esp
f011ed4b:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed4e:	68 90 ac 13 f0       	push   $0xf013ac90
f011ed53:	e8 d5 1e fe ff       	call   f0100c2d <cprintf>
f011ed58:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ed5b:	e8 52 d3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ed60:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ed63:	e8 24 4f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ed68:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011ed6b:	83 ec 0c             	sub    $0xc,%esp
f011ed6e:	68 00 00 08 00       	push   $0x80000
f011ed73:	e8 aa 86 fe ff       	call   f0107422 <kmalloc>
f011ed78:	83 c4 10             	add    $0x10,%esp
f011ed7b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011ed81:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011ed88:	10 00 00 
f011ed8b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ed91:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed96:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011ed9c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011eda2:	ba 00 00 00 00       	mov    $0x0,%edx
f011eda7:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011edad:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011edb3:	29 d0                	sub    %edx,%eax
f011edb5:	89 c1                	mov    %eax,%ecx
f011edb7:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011edbe:	10 00 00 
f011edc1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011edc6:	0f b6 d0             	movzbl %al,%edx
f011edc9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011edcf:	01 d0                	add    %edx,%eax
f011edd1:	48                   	dec    %eax
f011edd2:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011edd8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011edde:	ba 00 00 00 00       	mov    $0x0,%edx
f011ede3:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011ede9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011edef:	29 d0                	sub    %edx,%eax
f011edf1:	01 c1                	add    %eax,%ecx
f011edf3:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011edfa:	10 00 00 
f011edfd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ee02:	0f b6 c0             	movzbl %al,%eax
f011ee05:	c1 e0 04             	shl    $0x4,%eax
f011ee08:	89 c2                	mov    %eax,%edx
f011ee0a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ee10:	01 d0                	add    %edx,%eax
f011ee12:	48                   	dec    %eax
f011ee13:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011ee19:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ee1f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee24:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011ee2a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ee30:	29 d0                	sub    %edx,%eax
f011ee32:	01 c8                	add    %ecx,%eax
f011ee34:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011ee3a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ee40:	39 c2                	cmp    %eax,%edx
f011ee42:	74 17                	je     f011ee5b <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011ee44:	83 ec 04             	sub    $0x4,%esp
f011ee47:	68 70 ac 13 f0       	push   $0xf013ac70
f011ee4c:	68 91 04 00 00       	push   $0x491
f011ee51:	68 56 a5 13 f0       	push   $0xf013a556
f011ee56:	e8 4b 13 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee5b:	e8 2c 4e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ee60:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee63:	74 17                	je     f011ee7c <test_kmalloc_worstfit+0x1291>
f011ee65:	83 ec 04             	sub    $0x4,%esp
f011ee68:	68 70 a5 13 f0       	push   $0xf013a570
f011ee6d:	68 92 04 00 00       	push   $0x492
f011ee72:	68 56 a5 13 f0       	push   $0xf013a556
f011ee77:	e8 2a 13 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ee7c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ee7f:	e8 2e d2 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ee84:	29 c3                	sub    %eax,%ebx
f011ee86:	89 d8                	mov    %ebx,%eax
f011ee88:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ee8d:	74 17                	je     f011eea6 <test_kmalloc_worstfit+0x12bb>
f011ee8f:	83 ec 04             	sub    $0x4,%esp
f011ee92:	68 8e aa 13 f0       	push   $0xf013aa8e
f011ee97:	68 93 04 00 00       	push   $0x493
f011ee9c:	68 56 a5 13 f0       	push   $0xf013a556
f011eea1:	e8 00 13 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eea6:	ff 45 e8             	incl   -0x18(%ebp)
f011eea9:	83 ec 08             	sub    $0x8,%esp
f011eeac:	ff 75 e8             	pushl  -0x18(%ebp)
f011eeaf:	68 90 ac 13 f0       	push   $0xf013ac90
f011eeb4:	e8 74 1d fe ff       	call   f0100c2d <cprintf>
f011eeb9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eebc:	e8 f1 d1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011eec1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eec4:	e8 c3 4d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eec9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011eecc:	83 ec 0c             	sub    $0xc,%esp
f011eecf:	68 00 04 00 00       	push   $0x400
f011eed4:	e8 49 85 fe ff       	call   f0107422 <kmalloc>
f011eed9:	83 c4 10             	add    $0x10,%esp
f011eedc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011eee2:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011eee9:	10 00 00 
f011eeec:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011eef2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eef7:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011eefd:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ef03:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef08:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011ef0e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ef14:	29 d0                	sub    %edx,%eax
f011ef16:	89 c1                	mov    %eax,%ecx
f011ef18:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011ef1f:	10 00 00 
f011ef22:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ef27:	0f b6 d0             	movzbl %al,%edx
f011ef2a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ef30:	01 d0                	add    %edx,%eax
f011ef32:	48                   	dec    %eax
f011ef33:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011ef39:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ef3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef44:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011ef4a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ef50:	29 d0                	sub    %edx,%eax
f011ef52:	01 c1                	add    %eax,%ecx
f011ef54:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011ef5b:	10 00 00 
f011ef5e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ef63:	0f b6 c0             	movzbl %al,%eax
f011ef66:	c1 e0 04             	shl    $0x4,%eax
f011ef69:	89 c2                	mov    %eax,%edx
f011ef6b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ef71:	01 d0                	add    %edx,%eax
f011ef73:	48                   	dec    %eax
f011ef74:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011ef7a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ef80:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef85:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011ef8b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ef91:	29 d0                	sub    %edx,%eax
f011ef93:	01 c8                	add    %ecx,%eax
f011ef95:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011ef9b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011efa1:	39 c2                	cmp    %eax,%edx
f011efa3:	74 17                	je     f011efbc <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011efa5:	83 ec 04             	sub    $0x4,%esp
f011efa8:	68 70 ac 13 f0       	push   $0xf013ac70
f011efad:	68 9a 04 00 00       	push   $0x49a
f011efb2:	68 56 a5 13 f0       	push   $0xf013a556
f011efb7:	e8 ea 11 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efbc:	e8 cb 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011efc1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011efc4:	74 17                	je     f011efdd <test_kmalloc_worstfit+0x13f2>
f011efc6:	83 ec 04             	sub    $0x4,%esp
f011efc9:	68 70 a5 13 f0       	push   $0xf013a570
f011efce:	68 9b 04 00 00       	push   $0x49b
f011efd3:	68 56 a5 13 f0       	push   $0xf013a556
f011efd8:	e8 c9 11 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011efdd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011efe0:	e8 cd d0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011efe5:	29 c3                	sub    %eax,%ebx
f011efe7:	89 d8                	mov    %ebx,%eax
f011efe9:	83 f8 01             	cmp    $0x1,%eax
f011efec:	74 17                	je     f011f005 <test_kmalloc_worstfit+0x141a>
f011efee:	83 ec 04             	sub    $0x4,%esp
f011eff1:	68 8e aa 13 f0       	push   $0xf013aa8e
f011eff6:	68 9c 04 00 00       	push   $0x49c
f011effb:	68 56 a5 13 f0       	push   $0xf013a556
f011f000:	e8 a1 11 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f005:	ff 45 e8             	incl   -0x18(%ebp)
f011f008:	83 ec 08             	sub    $0x8,%esp
f011f00b:	ff 75 e8             	pushl  -0x18(%ebp)
f011f00e:	68 90 ac 13 f0       	push   $0xf013ac90
f011f013:	e8 15 1c fe ff       	call   f0100c2d <cprintf>
f011f018:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f01b:	e8 92 d0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f020:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f023:	e8 64 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f028:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f02b:	83 ec 0c             	sub    $0xc,%esp
f011f02e:	68 00 f0 1f 00       	push   $0x1ff000
f011f033:	e8 ea 83 fe ff       	call   f0107422 <kmalloc>
f011f038:	83 c4 10             	add    $0x10,%esp
f011f03b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f041:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011f048:	10 00 00 
f011f04b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011f051:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f056:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011f05c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f062:	ba 00 00 00 00       	mov    $0x0,%edx
f011f067:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011f06d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f073:	29 d0                	sub    %edx,%eax
f011f075:	89 c1                	mov    %eax,%ecx
f011f077:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011f07e:	10 00 00 
f011f081:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f086:	0f b6 d0             	movzbl %al,%edx
f011f089:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011f08f:	01 d0                	add    %edx,%eax
f011f091:	48                   	dec    %eax
f011f092:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011f098:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f09e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0a3:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011f0a9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f0af:	29 d0                	sub    %edx,%eax
f011f0b1:	01 c1                	add    %eax,%ecx
f011f0b3:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011f0ba:	10 00 00 
f011f0bd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f0c2:	0f b6 c0             	movzbl %al,%eax
f011f0c5:	c1 e0 04             	shl    $0x4,%eax
f011f0c8:	89 c2                	mov    %eax,%edx
f011f0ca:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011f0d0:	01 d0                	add    %edx,%eax
f011f0d2:	48                   	dec    %eax
f011f0d3:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011f0d9:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f0df:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0e4:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011f0ea:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f0f0:	29 d0                	sub    %edx,%eax
f011f0f2:	01 c8                	add    %ecx,%eax
f011f0f4:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f0fa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f100:	39 c2                	cmp    %eax,%edx
f011f102:	74 17                	je     f011f11b <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011f104:	83 ec 04             	sub    $0x4,%esp
f011f107:	68 70 ac 13 f0       	push   $0xf013ac70
f011f10c:	68 a3 04 00 00       	push   $0x4a3
f011f111:	68 56 a5 13 f0       	push   $0xf013a556
f011f116:	e8 8b 10 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f11b:	e8 6c 4b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f120:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f123:	74 17                	je     f011f13c <test_kmalloc_worstfit+0x1551>
f011f125:	83 ec 04             	sub    $0x4,%esp
f011f128:	68 70 a5 13 f0       	push   $0xf013a570
f011f12d:	68 a4 04 00 00       	push   $0x4a4
f011f132:	68 56 a5 13 f0       	push   $0xf013a556
f011f137:	e8 6a 10 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f13c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f13f:	e8 6e cf fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f144:	29 c3                	sub    %eax,%ebx
f011f146:	89 d8                	mov    %ebx,%eax
f011f148:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f14d:	74 17                	je     f011f166 <test_kmalloc_worstfit+0x157b>
f011f14f:	83 ec 04             	sub    $0x4,%esp
f011f152:	68 8e aa 13 f0       	push   $0xf013aa8e
f011f157:	68 a5 04 00 00       	push   $0x4a5
f011f15c:	68 56 a5 13 f0       	push   $0xf013a556
f011f161:	e8 40 10 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f166:	ff 45 e8             	incl   -0x18(%ebp)
f011f169:	83 ec 08             	sub    $0x8,%esp
f011f16c:	ff 75 e8             	pushl  -0x18(%ebp)
f011f16f:	68 90 ac 13 f0       	push   $0xf013ac90
f011f174:	e8 b4 1a fe ff       	call   f0100c2d <cprintf>
f011f179:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f17c:	e8 31 cf fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f181:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f184:	e8 03 4b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f189:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f18c:	83 ec 0c             	sub    $0xc,%esp
f011f18f:	68 00 00 40 00       	push   $0x400000
f011f194:	e8 89 82 fe ff       	call   f0107422 <kmalloc>
f011f199:	83 c4 10             	add    $0x10,%esp
f011f19c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011f1a2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f1a8:	85 c0                	test   %eax,%eax
f011f1aa:	74 17                	je     f011f1c3 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011f1ac:	83 ec 04             	sub    $0x4,%esp
f011f1af:	68 70 ac 13 f0       	push   $0xf013ac70
f011f1b4:	68 ad 04 00 00       	push   $0x4ad
f011f1b9:	68 56 a5 13 f0       	push   $0xf013a556
f011f1be:	e8 e3 0f fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1c3:	e8 c4 4a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f1c8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f1cb:	74 17                	je     f011f1e4 <test_kmalloc_worstfit+0x15f9>
f011f1cd:	83 ec 04             	sub    $0x4,%esp
f011f1d0:	68 70 a5 13 f0       	push   $0xf013a570
f011f1d5:	68 ae 04 00 00       	push   $0x4ae
f011f1da:	68 56 a5 13 f0       	push   $0xf013a556
f011f1df:	e8 c2 0f fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f1e4:	e8 c9 ce fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f1e9:	89 c2                	mov    %eax,%edx
f011f1eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f1ee:	39 c2                	cmp    %eax,%edx
f011f1f0:	74 17                	je     f011f209 <test_kmalloc_worstfit+0x161e>
f011f1f2:	83 ec 04             	sub    $0x4,%esp
f011f1f5:	68 8e aa 13 f0       	push   $0xf013aa8e
f011f1fa:	68 af 04 00 00       	push   $0x4af
f011f1ff:	68 56 a5 13 f0       	push   $0xf013a556
f011f204:	e8 9d 0f fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f209:	ff 45 e8             	incl   -0x18(%ebp)
f011f20c:	83 ec 08             	sub    $0x8,%esp
f011f20f:	ff 75 e8             	pushl  -0x18(%ebp)
f011f212:	68 90 ac 13 f0       	push   $0xf013ac90
f011f217:	e8 11 1a fe ff       	call   f0100c2d <cprintf>
f011f21c:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f21f:	83 ec 0c             	sub    $0xc,%esp
f011f222:	68 a4 ac 13 f0       	push   $0xf013aca4
f011f227:	e8 01 1a fe ff       	call   f0100c2d <cprintf>
f011f22c:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f22f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f234:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f237:	5b                   	pop    %ebx
f011f238:	5f                   	pop    %edi
f011f239:	5d                   	pop    %ebp
f011f23a:	c3                   	ret    

f011f23b <test_kfree>:

int test_kfree()
{
f011f23b:	55                   	push   %ebp
f011f23c:	89 e5                	mov    %esp,%ebp
f011f23e:	57                   	push   %edi
f011f23f:	53                   	push   %ebx
f011f240:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011f246:	83 ec 0c             	sub    $0xc,%esp
f011f249:	68 98 a4 13 f0       	push   $0xf013a498
f011f24e:	e8 da 19 fe ff       	call   f0100c2d <cprintf>
f011f253:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f256:	83 ec 0c             	sub    $0xc,%esp
f011f259:	68 c8 a4 13 f0       	push   $0xf013a4c8
f011f25e:	e8 ca 19 fe ff       	call   f0100c2d <cprintf>
f011f263:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f266:	83 ec 0c             	sub    $0xc,%esp
f011f269:	68 98 a4 13 f0       	push   $0xf013a498
f011f26e:	e8 ba 19 fe ff       	call   f0100c2d <cprintf>
f011f273:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f276:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f27a:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f27e:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f284:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f28a:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f291:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f298:	e8 15 ce fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f29d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f2a0:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011f2a6:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2ab:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2b0:	89 d7                	mov    %edx,%edi
f011f2b2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f2b4:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011f2ba:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2bf:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2c4:	89 d7                	mov    %edx,%edi
f011f2c6:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f2c8:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011f2ce:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2d3:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2d8:	89 d7                	mov    %edx,%edi
f011f2da:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f2dc:	e8 d1 cd fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f2e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f2e4:	e8 a3 49 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f2e9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f2ec:	83 ec 0c             	sub    $0xc,%esp
f011f2ef:	68 00 fc 1f 00       	push   $0x1ffc00
f011f2f4:	e8 29 81 fe ff       	call   f0107422 <kmalloc>
f011f2f9:	83 c4 10             	add    $0x10,%esp
f011f2fc:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f302:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011f308:	89 c1                	mov    %eax,%ecx
f011f30a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f311:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f314:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f319:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f31c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f31f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f324:	f7 75 c8             	divl   -0x38(%ebp)
f011f327:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f32a:	29 d0                	sub    %edx,%eax
f011f32c:	89 c3                	mov    %eax,%ebx
f011f32e:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f335:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f33a:	0f b6 d0             	movzbl %al,%edx
f011f33d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f340:	01 d0                	add    %edx,%eax
f011f342:	48                   	dec    %eax
f011f343:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f346:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f349:	ba 00 00 00 00       	mov    $0x0,%edx
f011f34e:	f7 75 c0             	divl   -0x40(%ebp)
f011f351:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f354:	29 d0                	sub    %edx,%eax
f011f356:	01 c3                	add    %eax,%ebx
f011f358:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f35f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f364:	0f b6 c0             	movzbl %al,%eax
f011f367:	c1 e0 04             	shl    $0x4,%eax
f011f36a:	89 c2                	mov    %eax,%edx
f011f36c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f36f:	01 d0                	add    %edx,%eax
f011f371:	48                   	dec    %eax
f011f372:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f375:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f378:	ba 00 00 00 00       	mov    $0x0,%edx
f011f37d:	f7 75 b8             	divl   -0x48(%ebp)
f011f380:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f383:	29 d0                	sub    %edx,%eax
f011f385:	01 d8                	add    %ebx,%eax
f011f387:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f38c:	39 c1                	cmp    %eax,%ecx
f011f38e:	74 17                	je     f011f3a7 <test_kfree+0x16c>
f011f390:	83 ec 04             	sub    $0x4,%esp
f011f393:	68 3c a6 13 f0       	push   $0xf013a63c
f011f398:	68 d7 04 00 00       	push   $0x4d7
f011f39d:	68 56 a5 13 f0       	push   $0xf013a556
f011f3a2:	e8 ff 0d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3a7:	e8 e0 48 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f3ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f3af:	74 17                	je     f011f3c8 <test_kfree+0x18d>
f011f3b1:	83 ec 04             	sub    $0x4,%esp
f011f3b4:	68 70 a5 13 f0       	push   $0xf013a570
f011f3b9:	68 d8 04 00 00       	push   $0x4d8
f011f3be:	68 56 a5 13 f0       	push   $0xf013a556
f011f3c3:	e8 de 0d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f3c8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f3cb:	e8 e2 cc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f3d0:	29 c3                	sub    %eax,%ebx
f011f3d2:	89 d8                	mov    %ebx,%eax
f011f3d4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f3d9:	74 17                	je     f011f3f2 <test_kfree+0x1b7>
f011f3db:	83 ec 04             	sub    $0x4,%esp
f011f3de:	68 d8 a5 13 f0       	push   $0xf013a5d8
f011f3e3:	68 d9 04 00 00       	push   $0x4d9
f011f3e8:	68 56 a5 13 f0       	push   $0xf013a556
f011f3ed:	e8 b4 0d fe ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f3f2:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011f3f9:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f3fc:	e8 b1 cc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f401:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f404:	e8 83 48 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f409:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f40c:	83 ec 0c             	sub    $0xc,%esp
f011f40f:	68 00 fc 1f 00       	push   $0x1ffc00
f011f414:	e8 09 80 fe ff       	call   f0107422 <kmalloc>
f011f419:	83 c4 10             	add    $0x10,%esp
f011f41c:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f422:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011f428:	89 c1                	mov    %eax,%ecx
f011f42a:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f431:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f434:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f439:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f43c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f43f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f444:	f7 75 b0             	divl   -0x50(%ebp)
f011f447:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f44a:	29 d0                	sub    %edx,%eax
f011f44c:	89 c3                	mov    %eax,%ebx
f011f44e:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f455:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f45a:	0f b6 d0             	movzbl %al,%edx
f011f45d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f460:	01 d0                	add    %edx,%eax
f011f462:	48                   	dec    %eax
f011f463:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f466:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f469:	ba 00 00 00 00       	mov    $0x0,%edx
f011f46e:	f7 75 a8             	divl   -0x58(%ebp)
f011f471:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f474:	29 d0                	sub    %edx,%eax
f011f476:	01 c3                	add    %eax,%ebx
f011f478:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f47f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f484:	0f b6 c0             	movzbl %al,%eax
f011f487:	c1 e0 04             	shl    $0x4,%eax
f011f48a:	89 c2                	mov    %eax,%edx
f011f48c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f48f:	01 d0                	add    %edx,%eax
f011f491:	48                   	dec    %eax
f011f492:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f495:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f498:	ba 00 00 00 00       	mov    $0x0,%edx
f011f49d:	f7 75 a0             	divl   -0x60(%ebp)
f011f4a0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f4a3:	29 d0                	sub    %edx,%eax
f011f4a5:	01 d8                	add    %ebx,%eax
f011f4a7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f4ac:	39 c1                	cmp    %eax,%ecx
f011f4ae:	74 17                	je     f011f4c7 <test_kfree+0x28c>
f011f4b0:	83 ec 04             	sub    $0x4,%esp
f011f4b3:	68 3c a6 13 f0       	push   $0xf013a63c
f011f4b8:	68 e0 04 00 00       	push   $0x4e0
f011f4bd:	68 56 a5 13 f0       	push   $0xf013a556
f011f4c2:	e8 df 0c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f4c7:	e8 c0 47 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f4cc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f4cf:	74 17                	je     f011f4e8 <test_kfree+0x2ad>
f011f4d1:	83 ec 04             	sub    $0x4,%esp
f011f4d4:	68 70 a5 13 f0       	push   $0xf013a570
f011f4d9:	68 e1 04 00 00       	push   $0x4e1
f011f4de:	68 56 a5 13 f0       	push   $0xf013a556
f011f4e3:	e8 be 0c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f4e8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f4eb:	e8 c2 cb fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f4f0:	29 c3                	sub    %eax,%ebx
f011f4f2:	89 d8                	mov    %ebx,%eax
f011f4f4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f4f9:	74 17                	je     f011f512 <test_kfree+0x2d7>
f011f4fb:	83 ec 04             	sub    $0x4,%esp
f011f4fe:	68 d8 a5 13 f0       	push   $0xf013a5d8
f011f503:	68 e2 04 00 00       	push   $0x4e2
f011f508:	68 56 a5 13 f0       	push   $0xf013a556
f011f50d:	e8 94 0c fe ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f512:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011f519:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f51c:	e8 91 cb fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f521:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f524:	e8 63 47 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f529:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f52c:	83 ec 0c             	sub    $0xc,%esp
f011f52f:	68 00 08 00 00       	push   $0x800
f011f534:	e8 e9 7e fe ff       	call   f0107422 <kmalloc>
f011f539:	83 c4 10             	add    $0x10,%esp
f011f53c:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f542:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f548:	89 c1                	mov    %eax,%ecx
f011f54a:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011f551:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f554:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f559:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011f55c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f55f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f564:	f7 75 98             	divl   -0x68(%ebp)
f011f567:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f56a:	29 d0                	sub    %edx,%eax
f011f56c:	89 c3                	mov    %eax,%ebx
f011f56e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011f575:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f57a:	0f b6 d0             	movzbl %al,%edx
f011f57d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f580:	01 d0                	add    %edx,%eax
f011f582:	48                   	dec    %eax
f011f583:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011f586:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f589:	ba 00 00 00 00       	mov    $0x0,%edx
f011f58e:	f7 75 90             	divl   -0x70(%ebp)
f011f591:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f594:	29 d0                	sub    %edx,%eax
f011f596:	01 c3                	add    %eax,%ebx
f011f598:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011f59f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f5a4:	0f b6 c0             	movzbl %al,%eax
f011f5a7:	c1 e0 04             	shl    $0x4,%eax
f011f5aa:	89 c2                	mov    %eax,%edx
f011f5ac:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f5af:	01 d0                	add    %edx,%eax
f011f5b1:	48                   	dec    %eax
f011f5b2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011f5b5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f5b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5bd:	f7 75 88             	divl   -0x78(%ebp)
f011f5c0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f5c3:	29 d0                	sub    %edx,%eax
f011f5c5:	01 d8                	add    %ebx,%eax
f011f5c7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f5cc:	39 c1                	cmp    %eax,%ecx
f011f5ce:	74 17                	je     f011f5e7 <test_kfree+0x3ac>
f011f5d0:	83 ec 04             	sub    $0x4,%esp
f011f5d3:	68 3c a6 13 f0       	push   $0xf013a63c
f011f5d8:	68 e9 04 00 00       	push   $0x4e9
f011f5dd:	68 56 a5 13 f0       	push   $0xf013a556
f011f5e2:	e8 bf 0b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5e7:	e8 a0 46 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f5ec:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f5ef:	74 17                	je     f011f608 <test_kfree+0x3cd>
f011f5f1:	83 ec 04             	sub    $0x4,%esp
f011f5f4:	68 70 a5 13 f0       	push   $0xf013a570
f011f5f9:	68 ea 04 00 00       	push   $0x4ea
f011f5fe:	68 56 a5 13 f0       	push   $0xf013a556
f011f603:	e8 9e 0b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f608:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f60b:	e8 a2 ca fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f610:	29 c3                	sub    %eax,%ebx
f011f612:	89 d8                	mov    %ebx,%eax
f011f614:	83 f8 01             	cmp    $0x1,%eax
f011f617:	74 17                	je     f011f630 <test_kfree+0x3f5>
f011f619:	83 ec 04             	sub    $0x4,%esp
f011f61c:	68 d8 a5 13 f0       	push   $0xf013a5d8
f011f621:	68 eb 04 00 00       	push   $0x4eb
f011f626:	68 56 a5 13 f0       	push   $0xf013a556
f011f62b:	e8 76 0b fe ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f630:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011f637:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f63a:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f640:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f643:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f64a:	eb 0e                	jmp    f011f65a <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011f64c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f64f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f652:	01 d0                	add    %edx,%eax
f011f654:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f657:	ff 45 f4             	incl   -0xc(%ebp)
f011f65a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011f660:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f663:	7f e7                	jg     f011f64c <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f665:	e8 48 ca fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f66a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f66d:	e8 1a 46 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f672:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f675:	83 ec 0c             	sub    $0xc,%esp
f011f678:	68 00 08 00 00       	push   $0x800
f011f67d:	e8 a0 7d fe ff       	call   f0107422 <kmalloc>
f011f682:	83 c4 10             	add    $0x10,%esp
f011f685:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f68b:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011f691:	89 c1                	mov    %eax,%ecx
f011f693:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f69a:	10 00 00 
f011f69d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f6a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f6a8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f6ae:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f6b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6b9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f6bf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f6c5:	29 d0                	sub    %edx,%eax
f011f6c7:	89 c3                	mov    %eax,%ebx
f011f6c9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f6d0:	10 00 00 
f011f6d3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f6d8:	0f b6 d0             	movzbl %al,%edx
f011f6db:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f6e1:	01 d0                	add    %edx,%eax
f011f6e3:	48                   	dec    %eax
f011f6e4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f6ea:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f6f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6f5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f6fb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f701:	29 d0                	sub    %edx,%eax
f011f703:	01 c3                	add    %eax,%ebx
f011f705:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f70c:	10 00 00 
f011f70f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f714:	0f b6 c0             	movzbl %al,%eax
f011f717:	c1 e0 04             	shl    $0x4,%eax
f011f71a:	89 c2                	mov    %eax,%edx
f011f71c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f722:	01 d0                	add    %edx,%eax
f011f724:	48                   	dec    %eax
f011f725:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f72b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f731:	ba 00 00 00 00       	mov    $0x0,%edx
f011f736:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f73c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f742:	29 d0                	sub    %edx,%eax
f011f744:	01 d8                	add    %ebx,%eax
f011f746:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011f74b:	39 c1                	cmp    %eax,%ecx
f011f74d:	74 17                	je     f011f766 <test_kfree+0x52b>
f011f74f:	83 ec 04             	sub    $0x4,%esp
f011f752:	68 3c a6 13 f0       	push   $0xf013a63c
f011f757:	68 f7 04 00 00       	push   $0x4f7
f011f75c:	68 56 a5 13 f0       	push   $0xf013a556
f011f761:	e8 40 0a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f766:	e8 21 45 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f76b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f76e:	74 17                	je     f011f787 <test_kfree+0x54c>
f011f770:	83 ec 04             	sub    $0x4,%esp
f011f773:	68 70 a5 13 f0       	push   $0xf013a570
f011f778:	68 f8 04 00 00       	push   $0x4f8
f011f77d:	68 56 a5 13 f0       	push   $0xf013a556
f011f782:	e8 1f 0a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f787:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f78a:	e8 23 c9 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f78f:	29 c3                	sub    %eax,%ebx
f011f791:	89 d8                	mov    %ebx,%eax
f011f793:	83 f8 01             	cmp    $0x1,%eax
f011f796:	74 17                	je     f011f7af <test_kfree+0x574>
f011f798:	83 ec 04             	sub    $0x4,%esp
f011f79b:	68 d8 a5 13 f0       	push   $0xf013a5d8
f011f7a0:	68 f9 04 00 00       	push   $0x4f9
f011f7a5:	68 56 a5 13 f0       	push   $0xf013a556
f011f7aa:	e8 f7 09 fe ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011f7af:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011f7b6:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011f7b9:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011f7bf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011f7c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f7c9:	eb 0e                	jmp    f011f7d9 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011f7cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f7ce:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f7d1:	01 d0                	add    %edx,%eax
f011f7d3:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011f7d6:	ff 45 f4             	incl   -0xc(%ebp)
f011f7d9:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011f7df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f7e2:	7f e7                	jg     f011f7cb <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011f7e4:	e8 c9 c8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f7e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f7ec:	e8 9b 44 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f7f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011f7f4:	83 ec 0c             	sub    $0xc,%esp
f011f7f7:	68 00 1c 00 00       	push   $0x1c00
f011f7fc:	e8 21 7c fe ff       	call   f0107422 <kmalloc>
f011f801:	83 c4 10             	add    $0x10,%esp
f011f804:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f80a:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011f810:	89 c1                	mov    %eax,%ecx
f011f812:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f819:	10 00 00 
f011f81c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f822:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f827:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f82d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f833:	ba 00 00 00 00       	mov    $0x0,%edx
f011f838:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f83e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f844:	29 d0                	sub    %edx,%eax
f011f846:	89 c3                	mov    %eax,%ebx
f011f848:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f84f:	10 00 00 
f011f852:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f857:	0f b6 d0             	movzbl %al,%edx
f011f85a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f860:	01 d0                	add    %edx,%eax
f011f862:	48                   	dec    %eax
f011f863:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f869:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f86f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f874:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f87a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f880:	29 d0                	sub    %edx,%eax
f011f882:	01 c3                	add    %eax,%ebx
f011f884:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f88b:	10 00 00 
f011f88e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f893:	0f b6 c0             	movzbl %al,%eax
f011f896:	c1 e0 04             	shl    $0x4,%eax
f011f899:	89 c2                	mov    %eax,%edx
f011f89b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f8a1:	01 d0                	add    %edx,%eax
f011f8a3:	48                   	dec    %eax
f011f8a4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f8aa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f8b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8b5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f8bb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f8c1:	29 d0                	sub    %edx,%eax
f011f8c3:	01 d8                	add    %ebx,%eax
f011f8c5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011f8ca:	39 c1                	cmp    %eax,%ecx
f011f8cc:	74 17                	je     f011f8e5 <test_kfree+0x6aa>
f011f8ce:	83 ec 04             	sub    $0x4,%esp
f011f8d1:	68 3c a6 13 f0       	push   $0xf013a63c
f011f8d6:	68 05 05 00 00       	push   $0x505
f011f8db:	68 56 a5 13 f0       	push   $0xf013a556
f011f8e0:	e8 c1 08 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f8e5:	e8 a2 43 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f8ea:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f8ed:	74 17                	je     f011f906 <test_kfree+0x6cb>
f011f8ef:	83 ec 04             	sub    $0x4,%esp
f011f8f2:	68 70 a5 13 f0       	push   $0xf013a570
f011f8f7:	68 06 05 00 00       	push   $0x506
f011f8fc:	68 56 a5 13 f0       	push   $0xf013a556
f011f901:	e8 a0 08 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f906:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f909:	e8 a4 c7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f90e:	29 c3                	sub    %eax,%ebx
f011f910:	89 d8                	mov    %ebx,%eax
f011f912:	83 f8 02             	cmp    $0x2,%eax
f011f915:	74 17                	je     f011f92e <test_kfree+0x6f3>
f011f917:	83 ec 04             	sub    $0x4,%esp
f011f91a:	68 d8 a5 13 f0       	push   $0xf013a5d8
f011f91f:	68 07 05 00 00       	push   $0x507
f011f924:	68 56 a5 13 f0       	push   $0xf013a556
f011f929:	e8 78 08 fe ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011f92e:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f011f935:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011f938:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011f93e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011f941:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f948:	eb 0e                	jmp    f011f958 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f011f94a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f94d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f950:	01 d0                	add    %edx,%eax
f011f952:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011f955:	ff 45 f4             	incl   -0xc(%ebp)
f011f958:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011f95e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f961:	7f e7                	jg     f011f94a <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011f963:	e8 4a c7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011f968:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f96b:	e8 1c 43 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f970:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011f973:	83 ec 0c             	sub    $0xc,%esp
f011f976:	68 00 fc 2f 00       	push   $0x2ffc00
f011f97b:	e8 a2 7a fe ff       	call   f0107422 <kmalloc>
f011f980:	83 c4 10             	add    $0x10,%esp
f011f983:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f989:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011f98f:	89 c1                	mov    %eax,%ecx
f011f991:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f998:	10 00 00 
f011f99b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f9a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f9a6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f9ac:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f9b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9b7:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f9bd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f9c3:	29 d0                	sub    %edx,%eax
f011f9c5:	89 c3                	mov    %eax,%ebx
f011f9c7:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f9ce:	10 00 00 
f011f9d1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f9d6:	0f b6 d0             	movzbl %al,%edx
f011f9d9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f9df:	01 d0                	add    %edx,%eax
f011f9e1:	48                   	dec    %eax
f011f9e2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f9e8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f9ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9f3:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f9f9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f9ff:	29 d0                	sub    %edx,%eax
f011fa01:	01 c3                	add    %eax,%ebx
f011fa03:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011fa0a:	10 00 00 
f011fa0d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fa12:	0f b6 c0             	movzbl %al,%eax
f011fa15:	c1 e0 04             	shl    $0x4,%eax
f011fa18:	89 c2                	mov    %eax,%edx
f011fa1a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011fa20:	01 d0                	add    %edx,%eax
f011fa22:	48                   	dec    %eax
f011fa23:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011fa29:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fa2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa34:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011fa3a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fa40:	29 d0                	sub    %edx,%eax
f011fa42:	01 d8                	add    %ebx,%eax
f011fa44:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011fa49:	39 c1                	cmp    %eax,%ecx
f011fa4b:	74 17                	je     f011fa64 <test_kfree+0x829>
f011fa4d:	83 ec 04             	sub    $0x4,%esp
f011fa50:	68 3c a6 13 f0       	push   $0xf013a63c
f011fa55:	68 13 05 00 00       	push   $0x513
f011fa5a:	68 56 a5 13 f0       	push   $0xf013a556
f011fa5f:	e8 42 07 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa64:	e8 23 42 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fa69:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa6c:	74 17                	je     f011fa85 <test_kfree+0x84a>
f011fa6e:	83 ec 04             	sub    $0x4,%esp
f011fa71:	68 70 a5 13 f0       	push   $0xf013a570
f011fa76:	68 14 05 00 00       	push   $0x514
f011fa7b:	68 56 a5 13 f0       	push   $0xf013a556
f011fa80:	e8 21 07 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa85:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa88:	e8 25 c6 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fa8d:	29 c3                	sub    %eax,%ebx
f011fa8f:	89 d8                	mov    %ebx,%eax
f011fa91:	3d 00 03 00 00       	cmp    $0x300,%eax
f011fa96:	74 17                	je     f011faaf <test_kfree+0x874>
f011fa98:	83 ec 04             	sub    $0x4,%esp
f011fa9b:	68 d8 a5 13 f0       	push   $0xf013a5d8
f011faa0:	68 15 05 00 00       	push   $0x515
f011faa5:	68 56 a5 13 f0       	push   $0xf013a556
f011faaa:	e8 f7 06 fe ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011faaf:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f011fab6:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011fab9:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011fabf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fac2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fac9:	eb 0e                	jmp    f011fad9 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f011facb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011face:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fad1:	01 d0                	add    %edx,%eax
f011fad3:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011fad6:	ff 45 f4             	incl   -0xc(%ebp)
f011fad9:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011fadf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fae2:	7f e7                	jg     f011facb <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fae4:	e8 c9 c5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fae9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011faec:	e8 9b 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011faf1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011faf4:	83 ec 0c             	sub    $0xc,%esp
f011faf7:	68 00 fc 5f 00       	push   $0x5ffc00
f011fafc:	e8 21 79 fe ff       	call   f0107422 <kmalloc>
f011fb01:	83 c4 10             	add    $0x10,%esp
f011fb04:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb0a:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011fb10:	89 c1                	mov    %eax,%ecx
f011fb12:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011fb19:	10 00 00 
f011fb1c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011fb22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb27:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011fb2d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011fb33:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb38:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011fb3e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011fb44:	29 d0                	sub    %edx,%eax
f011fb46:	89 c3                	mov    %eax,%ebx
f011fb48:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011fb4f:	10 00 00 
f011fb52:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fb57:	0f b6 d0             	movzbl %al,%edx
f011fb5a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011fb60:	01 d0                	add    %edx,%eax
f011fb62:	48                   	dec    %eax
f011fb63:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011fb69:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011fb6f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb74:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011fb7a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011fb80:	29 d0                	sub    %edx,%eax
f011fb82:	01 c3                	add    %eax,%ebx
f011fb84:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011fb8b:	10 00 00 
f011fb8e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fb93:	0f b6 c0             	movzbl %al,%eax
f011fb96:	c1 e0 04             	shl    $0x4,%eax
f011fb99:	89 c2                	mov    %eax,%edx
f011fb9b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fba1:	01 d0                	add    %edx,%eax
f011fba3:	48                   	dec    %eax
f011fba4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011fbaa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011fbb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbb5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011fbbb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011fbc1:	29 d0                	sub    %edx,%eax
f011fbc3:	01 d8                	add    %ebx,%eax
f011fbc5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011fbca:	39 c1                	cmp    %eax,%ecx
f011fbcc:	74 17                	je     f011fbe5 <test_kfree+0x9aa>
f011fbce:	83 ec 04             	sub    $0x4,%esp
f011fbd1:	68 3c a6 13 f0       	push   $0xf013a63c
f011fbd6:	68 21 05 00 00       	push   $0x521
f011fbdb:	68 56 a5 13 f0       	push   $0xf013a556
f011fbe0:	e8 c1 05 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fbe5:	e8 a2 40 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fbea:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fbed:	74 17                	je     f011fc06 <test_kfree+0x9cb>
f011fbef:	83 ec 04             	sub    $0x4,%esp
f011fbf2:	68 70 a5 13 f0       	push   $0xf013a570
f011fbf7:	68 22 05 00 00       	push   $0x522
f011fbfc:	68 56 a5 13 f0       	push   $0xf013a556
f011fc01:	e8 a0 05 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fc06:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fc09:	e8 a4 c4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fc0e:	29 c3                	sub    %eax,%ebx
f011fc10:	89 d8                	mov    %ebx,%eax
f011fc12:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fc17:	74 17                	je     f011fc30 <test_kfree+0x9f5>
f011fc19:	83 ec 04             	sub    $0x4,%esp
f011fc1c:	68 d8 a5 13 f0       	push   $0xf013a5d8
f011fc21:	68 23 05 00 00       	push   $0x523
f011fc26:	68 56 a5 13 f0       	push   $0xf013a556
f011fc2b:	e8 76 05 fe ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011fc30:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f011fc37:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011fc3a:	e8 73 c4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fc3f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc42:	e8 45 40 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fc47:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011fc4a:	83 ec 0c             	sub    $0xc,%esp
f011fc4d:	68 00 38 00 00       	push   $0x3800
f011fc52:	e8 cb 77 fe ff       	call   f0107422 <kmalloc>
f011fc57:	83 c4 10             	add    $0x10,%esp
f011fc5a:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc60:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011fc66:	89 c1                	mov    %eax,%ecx
f011fc68:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011fc6f:	10 00 00 
f011fc72:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011fc78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc7d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011fc83:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011fc89:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc8e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011fc94:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011fc9a:	29 d0                	sub    %edx,%eax
f011fc9c:	89 c3                	mov    %eax,%ebx
f011fc9e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011fca5:	10 00 00 
f011fca8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fcad:	0f b6 d0             	movzbl %al,%edx
f011fcb0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011fcb6:	01 d0                	add    %edx,%eax
f011fcb8:	48                   	dec    %eax
f011fcb9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011fcbf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011fcc5:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcca:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011fcd0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011fcd6:	29 d0                	sub    %edx,%eax
f011fcd8:	01 c3                	add    %eax,%ebx
f011fcda:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011fce1:	10 00 00 
f011fce4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fce9:	0f b6 c0             	movzbl %al,%eax
f011fcec:	c1 e0 04             	shl    $0x4,%eax
f011fcef:	89 c2                	mov    %eax,%edx
f011fcf1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011fcf7:	01 d0                	add    %edx,%eax
f011fcf9:	48                   	dec    %eax
f011fcfa:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011fd00:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011fd06:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd0b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011fd11:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011fd17:	29 d0                	sub    %edx,%eax
f011fd19:	01 d8                	add    %ebx,%eax
f011fd1b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011fd20:	39 c1                	cmp    %eax,%ecx
f011fd22:	74 17                	je     f011fd3b <test_kfree+0xb00>
f011fd24:	83 ec 04             	sub    $0x4,%esp
f011fd27:	68 3c a6 13 f0       	push   $0xf013a63c
f011fd2c:	68 2a 05 00 00       	push   $0x52a
f011fd31:	68 56 a5 13 f0       	push   $0xf013a556
f011fd36:	e8 6b 04 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd3b:	e8 4c 3f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fd40:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd43:	74 17                	je     f011fd5c <test_kfree+0xb21>
f011fd45:	83 ec 04             	sub    $0x4,%esp
f011fd48:	68 70 a5 13 f0       	push   $0xf013a570
f011fd4d:	68 2b 05 00 00       	push   $0x52b
f011fd52:	68 56 a5 13 f0       	push   $0xf013a556
f011fd57:	e8 4a 04 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd5c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd5f:	e8 4e c3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fd64:	29 c3                	sub    %eax,%ebx
f011fd66:	89 d8                	mov    %ebx,%eax
f011fd68:	83 f8 04             	cmp    $0x4,%eax
f011fd6b:	74 17                	je     f011fd84 <test_kfree+0xb49>
f011fd6d:	83 ec 04             	sub    $0x4,%esp
f011fd70:	68 d8 a5 13 f0       	push   $0xf013a5d8
f011fd75:	68 2c 05 00 00       	push   $0x52c
f011fd7a:	68 56 a5 13 f0       	push   $0xf013a556
f011fd7f:	e8 22 04 fe ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011fd84:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f011fd8b:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011fd8e:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011fd94:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011fd97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd9e:	eb 0e                	jmp    f011fdae <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f011fda0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fda3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fda6:	01 d0                	add    %edx,%eax
f011fda8:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011fdab:	ff 45 f4             	incl   -0xc(%ebp)
f011fdae:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011fdb4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fdb7:	7f e7                	jg     f011fda0 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011fdb9:	e8 f4 c2 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fdbe:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011fdc4:	e8 c3 3e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fdc9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f011fdcf:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011fdd5:	83 ec 0c             	sub    $0xc,%esp
f011fdd8:	50                   	push   %eax
f011fdd9:	e8 5e 76 fe ff       	call   f010743c <kfree>
f011fdde:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fde1:	e8 a6 3e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fde6:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fdec:	74 17                	je     f011fe05 <test_kfree+0xbca>
f011fdee:	83 ec 04             	sub    $0x4,%esp
f011fdf1:	68 70 a5 13 f0       	push   $0xf013a570
f011fdf6:	68 3b 05 00 00       	push   $0x53b
f011fdfb:	68 56 a5 13 f0       	push   $0xf013a556
f011fe00:	e8 a1 03 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fe05:	e8 a8 c2 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fe0a:	89 c2                	mov    %eax,%edx
f011fe0c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fe12:	29 c2                	sub    %eax,%edx
f011fe14:	89 d0                	mov    %edx,%eax
f011fe16:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fe1b:	74 17                	je     f011fe34 <test_kfree+0xbf9>
f011fe1d:	83 ec 04             	sub    $0x4,%esp
f011fe20:	68 e0 ac 13 f0       	push   $0xf013ace0
f011fe25:	68 3c 05 00 00       	push   $0x53c
f011fe2a:	68 56 a5 13 f0       	push   $0xf013a556
f011fe2f:	e8 72 03 fe ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fe34:	e8 79 c2 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fe39:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fe3f:	e8 48 3e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fe44:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f011fe4a:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fe50:	83 ec 0c             	sub    $0xc,%esp
f011fe53:	50                   	push   %eax
f011fe54:	e8 e3 75 fe ff       	call   f010743c <kfree>
f011fe59:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe5c:	e8 2b 3e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fe61:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fe67:	74 17                	je     f011fe80 <test_kfree+0xc45>
f011fe69:	83 ec 04             	sub    $0x4,%esp
f011fe6c:	68 70 a5 13 f0       	push   $0xf013a570
f011fe71:	68 42 05 00 00       	push   $0x542
f011fe76:	68 56 a5 13 f0       	push   $0xf013a556
f011fe7b:	e8 26 03 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fe80:	e8 2d c2 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fe85:	89 c2                	mov    %eax,%edx
f011fe87:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fe8d:	29 c2                	sub    %eax,%edx
f011fe8f:	89 d0                	mov    %edx,%eax
f011fe91:	83 f8 01             	cmp    $0x1,%eax
f011fe94:	74 17                	je     f011fead <test_kfree+0xc72>
f011fe96:	83 ec 04             	sub    $0x4,%esp
f011fe99:	68 e0 ac 13 f0       	push   $0xf013ace0
f011fe9e:	68 43 05 00 00       	push   $0x543
f011fea3:	68 56 a5 13 f0       	push   $0xf013a556
f011fea8:	e8 f9 02 fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fead:	e8 00 c2 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011feb2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011feb8:	e8 cf 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011febd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f011fec3:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011fec9:	83 ec 0c             	sub    $0xc,%esp
f011fecc:	50                   	push   %eax
f011fecd:	e8 6a 75 fe ff       	call   f010743c <kfree>
f011fed2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fed5:	e8 b2 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011feda:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fee0:	74 17                	je     f011fef9 <test_kfree+0xcbe>
f011fee2:	83 ec 04             	sub    $0x4,%esp
f011fee5:	68 70 a5 13 f0       	push   $0xf013a570
f011feea:	68 49 05 00 00       	push   $0x549
f011feef:	68 56 a5 13 f0       	push   $0xf013a556
f011fef4:	e8 ad 02 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011fef9:	e8 b4 c1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011fefe:	89 c2                	mov    %eax,%edx
f011ff00:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ff06:	29 c2                	sub    %eax,%edx
f011ff08:	89 d0                	mov    %edx,%eax
f011ff0a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ff0f:	74 17                	je     f011ff28 <test_kfree+0xced>
f011ff11:	83 ec 04             	sub    $0x4,%esp
f011ff14:	68 e0 ac 13 f0       	push   $0xf013ace0
f011ff19:	68 4a 05 00 00       	push   $0x54a
f011ff1e:	68 56 a5 13 f0       	push   $0xf013a556
f011ff23:	e8 7e 02 fe ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff28:	e8 85 c1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ff2d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff33:	e8 54 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ff38:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f011ff3e:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011ff44:	83 ec 0c             	sub    $0xc,%esp
f011ff47:	50                   	push   %eax
f011ff48:	e8 ef 74 fe ff       	call   f010743c <kfree>
f011ff4d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff50:	e8 37 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ff55:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011ff5b:	74 17                	je     f011ff74 <test_kfree+0xd39>
f011ff5d:	83 ec 04             	sub    $0x4,%esp
f011ff60:	68 70 a5 13 f0       	push   $0xf013a570
f011ff65:	68 50 05 00 00       	push   $0x550
f011ff6a:	68 56 a5 13 f0       	push   $0xf013a556
f011ff6f:	e8 32 02 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011ff74:	e8 39 c1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f011ff79:	89 c2                	mov    %eax,%edx
f011ff7b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ff81:	29 c2                	sub    %eax,%edx
f011ff83:	89 d0                	mov    %edx,%eax
f011ff85:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ff8a:	74 17                	je     f011ffa3 <test_kfree+0xd68>
f011ff8c:	83 ec 04             	sub    $0x4,%esp
f011ff8f:	68 e0 ac 13 f0       	push   $0xf013ace0
f011ff94:	68 51 05 00 00       	push   $0x551
f011ff99:	68 56 a5 13 f0       	push   $0xf013a556
f011ff9e:	e8 03 02 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f011ffa3:	83 ec 0c             	sub    $0xc,%esp
f011ffa6:	68 18 ad 13 f0       	push   $0xf013ad18
f011ffab:	e8 7d 0c fe ff       	call   f0100c2d <cprintf>
f011ffb0:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011ffb3:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011ffb9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011ffbc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ffc3:	eb 1e                	jmp    f011ffe3 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f011ffc5:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f011ffcb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ffce:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ffd1:	01 c8                	add    %ecx,%eax
f011ffd3:	8a 00                	mov    (%eax),%al
f011ffd5:	0f be c0             	movsbl %al,%eax
f011ffd8:	01 d0                	add    %edx,%eax
f011ffda:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011ffe0:	ff 45 f4             	incl   -0xc(%ebp)
f011ffe3:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011ffe9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ffec:	7f d7                	jg     f011ffc5 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011ffee:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f011fff4:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fffa:	89 c1                	mov    %eax,%ecx
f011fffc:	01 c9                	add    %ecx,%ecx
f011fffe:	01 c8                	add    %ecx,%eax
f0120000:	39 c2                	cmp    %eax,%edx
f0120002:	74 17                	je     f012001b <test_kfree+0xde0>
f0120004:	83 ec 04             	sub    $0x4,%esp
f0120007:	68 3c ad 13 f0       	push   $0xf013ad3c
f012000c:	68 5e 05 00 00       	push   $0x55e
f0120011:	68 56 a5 13 f0       	push   $0xf013a556
f0120016:	e8 8b 01 fe ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012001b:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120021:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120024:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012002b:	eb 1e                	jmp    f012004b <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f012002d:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120033:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120036:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120039:	01 c8                	add    %ecx,%eax
f012003b:	8a 00                	mov    (%eax),%al
f012003d:	0f be c0             	movsbl %al,%eax
f0120040:	01 d0                	add    %edx,%eax
f0120042:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120048:	ff 45 f4             	incl   -0xc(%ebp)
f012004b:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120051:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120054:	7f d7                	jg     f012002d <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120056:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012005c:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120062:	c1 e2 02             	shl    $0x2,%edx
f0120065:	39 d0                	cmp    %edx,%eax
f0120067:	74 17                	je     f0120080 <test_kfree+0xe45>
f0120069:	83 ec 04             	sub    $0x4,%esp
f012006c:	68 3c ad 13 f0       	push   $0xf013ad3c
f0120071:	68 66 05 00 00       	push   $0x566
f0120076:	68 56 a5 13 f0       	push   $0xf013a556
f012007b:	e8 26 01 fe ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120080:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120086:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120089:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120090:	eb 1e                	jmp    f01200b0 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0120092:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0120098:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012009b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012009e:	01 c8                	add    %ecx,%eax
f01200a0:	8a 00                	mov    (%eax),%al
f01200a2:	0f be c0             	movsbl %al,%eax
f01200a5:	01 d0                	add    %edx,%eax
f01200a7:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01200ad:	ff 45 f4             	incl   -0xc(%ebp)
f01200b0:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01200b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01200b9:	7f d7                	jg     f0120092 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01200bb:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f01200c1:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f01200c7:	89 d0                	mov    %edx,%eax
f01200c9:	c1 e0 02             	shl    $0x2,%eax
f01200cc:	01 d0                	add    %edx,%eax
f01200ce:	39 c1                	cmp    %eax,%ecx
f01200d0:	74 17                	je     f01200e9 <test_kfree+0xeae>
f01200d2:	83 ec 04             	sub    $0x4,%esp
f01200d5:	68 3c ad 13 f0       	push   $0xf013ad3c
f01200da:	68 6e 05 00 00       	push   $0x56e
f01200df:	68 56 a5 13 f0       	push   $0xf013a556
f01200e4:	e8 bd 00 fe ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01200e9:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01200ef:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01200f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01200f9:	eb 1e                	jmp    f0120119 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f01200fb:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0120101:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120104:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120107:	01 c8                	add    %ecx,%eax
f0120109:	8a 00                	mov    (%eax),%al
f012010b:	0f be c0             	movsbl %al,%eax
f012010e:	01 d0                	add    %edx,%eax
f0120110:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120116:	ff 45 f4             	incl   -0xc(%ebp)
f0120119:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012011f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120122:	7f d7                	jg     f01200fb <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120124:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012012a:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f0120130:	89 d0                	mov    %edx,%eax
f0120132:	01 c0                	add    %eax,%eax
f0120134:	01 d0                	add    %edx,%eax
f0120136:	01 c0                	add    %eax,%eax
f0120138:	01 d0                	add    %edx,%eax
f012013a:	39 c1                	cmp    %eax,%ecx
f012013c:	74 17                	je     f0120155 <test_kfree+0xf1a>
f012013e:	83 ec 04             	sub    $0x4,%esp
f0120141:	68 3c ad 13 f0       	push   $0xf013ad3c
f0120146:	68 76 05 00 00       	push   $0x576
f012014b:	68 56 a5 13 f0       	push   $0xf013a556
f0120150:	e8 51 00 fe ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f0120155:	83 ec 0c             	sub    $0xc,%esp
f0120158:	68 6f ad 13 f0       	push   $0xf013ad6f
f012015d:	e8 cb 0a fe ff       	call   f0100c2d <cprintf>
f0120162:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120165:	e8 48 bf fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012016a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012016d:	e8 1a 3b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120172:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120175:	83 ec 0c             	sub    $0xc,%esp
f0120178:	68 00 50 00 00       	push   $0x5000
f012017d:	e8 a0 72 fe ff       	call   f0107422 <kmalloc>
f0120182:	83 c4 10             	add    $0x10,%esp
f0120185:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012018b:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120191:	89 c1                	mov    %eax,%ecx
f0120193:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012019a:	10 00 00 
f012019d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01201a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01201a8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01201ae:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01201b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01201b9:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01201bf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01201c5:	29 d0                	sub    %edx,%eax
f01201c7:	89 c3                	mov    %eax,%ebx
f01201c9:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01201d0:	10 00 00 
f01201d3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01201d8:	0f b6 d0             	movzbl %al,%edx
f01201db:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01201e1:	01 d0                	add    %edx,%eax
f01201e3:	48                   	dec    %eax
f01201e4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01201ea:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01201f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01201f5:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01201fb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120201:	29 d0                	sub    %edx,%eax
f0120203:	01 c3                	add    %eax,%ebx
f0120205:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012020c:	10 00 00 
f012020f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120214:	0f b6 c0             	movzbl %al,%eax
f0120217:	c1 e0 04             	shl    $0x4,%eax
f012021a:	89 c2                	mov    %eax,%edx
f012021c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120222:	01 d0                	add    %edx,%eax
f0120224:	48                   	dec    %eax
f0120225:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012022b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120231:	ba 00 00 00 00       	mov    $0x0,%edx
f0120236:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012023c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120242:	29 d0                	sub    %edx,%eax
f0120244:	01 d8                	add    %ebx,%eax
f0120246:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012024b:	39 c1                	cmp    %eax,%ecx
f012024d:	74 17                	je     f0120266 <test_kfree+0x102b>
f012024f:	83 ec 04             	sub    $0x4,%esp
f0120252:	68 3c a6 13 f0       	push   $0xf013a63c
f0120257:	68 80 05 00 00       	push   $0x580
f012025c:	68 56 a5 13 f0       	push   $0xf013a556
f0120261:	e8 40 ff fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120266:	e8 21 3a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012026b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012026e:	74 17                	je     f0120287 <test_kfree+0x104c>
f0120270:	83 ec 04             	sub    $0x4,%esp
f0120273:	68 70 a5 13 f0       	push   $0xf013a570
f0120278:	68 81 05 00 00       	push   $0x581
f012027d:	68 56 a5 13 f0       	push   $0xf013a556
f0120282:	e8 1f ff fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120287:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012028a:	e8 23 be fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012028f:	29 c3                	sub    %eax,%ebx
f0120291:	89 d8                	mov    %ebx,%eax
f0120293:	83 f8 05             	cmp    $0x5,%eax
f0120296:	74 17                	je     f01202af <test_kfree+0x1074>
f0120298:	83 ec 04             	sub    $0x4,%esp
f012029b:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01202a0:	68 82 05 00 00       	push   $0x582
f01202a5:	68 56 a5 13 f0       	push   $0xf013a556
f01202aa:	e8 f7 fe fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01202af:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f01202b6:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01202b9:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01202bf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01202c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01202c9:	eb 0e                	jmp    f01202d9 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f01202cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01202ce:	8b 45 80             	mov    -0x80(%ebp),%eax
f01202d1:	01 d0                	add    %edx,%eax
f01202d3:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01202d6:	ff 45 f4             	incl   -0xc(%ebp)
f01202d9:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01202df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01202e2:	7f e7                	jg     f01202cb <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01202e4:	e8 c9 bd fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01202e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01202ec:	e8 9b 39 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01202f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01202f4:	83 ec 0c             	sub    $0xc,%esp
f01202f7:	68 00 00 10 00       	push   $0x100000
f01202fc:	e8 21 71 fe ff       	call   f0107422 <kmalloc>
f0120301:	83 c4 10             	add    $0x10,%esp
f0120304:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012030a:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120310:	89 c1                	mov    %eax,%ecx
f0120312:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0120319:	10 00 00 
f012031c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120322:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120327:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012032d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120333:	ba 00 00 00 00       	mov    $0x0,%edx
f0120338:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012033e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120344:	29 d0                	sub    %edx,%eax
f0120346:	89 c3                	mov    %eax,%ebx
f0120348:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012034f:	10 00 00 
f0120352:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120357:	0f b6 d0             	movzbl %al,%edx
f012035a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120360:	01 d0                	add    %edx,%eax
f0120362:	48                   	dec    %eax
f0120363:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0120369:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012036f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120374:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012037a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120380:	29 d0                	sub    %edx,%eax
f0120382:	01 c3                	add    %eax,%ebx
f0120384:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012038b:	10 00 00 
f012038e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120393:	0f b6 c0             	movzbl %al,%eax
f0120396:	c1 e0 04             	shl    $0x4,%eax
f0120399:	89 c2                	mov    %eax,%edx
f012039b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01203a1:	01 d0                	add    %edx,%eax
f01203a3:	48                   	dec    %eax
f01203a4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01203aa:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01203b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01203b5:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01203bb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01203c1:	29 d0                	sub    %edx,%eax
f01203c3:	01 d8                	add    %ebx,%eax
f01203c5:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01203ca:	39 c1                	cmp    %eax,%ecx
f01203cc:	74 17                	je     f01203e5 <test_kfree+0x11aa>
f01203ce:	83 ec 04             	sub    $0x4,%esp
f01203d1:	68 3c a6 13 f0       	push   $0xf013a63c
f01203d6:	68 8e 05 00 00       	push   $0x58e
f01203db:	68 56 a5 13 f0       	push   $0xf013a556
f01203e0:	e8 c1 fd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203e5:	e8 a2 38 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01203ea:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01203ed:	74 17                	je     f0120406 <test_kfree+0x11cb>
f01203ef:	83 ec 04             	sub    $0x4,%esp
f01203f2:	68 70 a5 13 f0       	push   $0xf013a570
f01203f7:	68 8f 05 00 00       	push   $0x58f
f01203fc:	68 56 a5 13 f0       	push   $0xf013a556
f0120401:	e8 a0 fd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120406:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120409:	e8 a4 bc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012040e:	29 c3                	sub    %eax,%ebx
f0120410:	89 d8                	mov    %ebx,%eax
f0120412:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120417:	74 17                	je     f0120430 <test_kfree+0x11f5>
f0120419:	83 ec 04             	sub    $0x4,%esp
f012041c:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0120421:	68 90 05 00 00       	push   $0x590
f0120426:	68 56 a5 13 f0       	push   $0xf013a556
f012042b:	e8 76 fd fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120430:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0120437:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012043a:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120440:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120443:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012044a:	eb 0e                	jmp    f012045a <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f012044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012044f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120452:	01 d0                	add    %edx,%eax
f0120454:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120457:	ff 45 f4             	incl   -0xc(%ebp)
f012045a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0120460:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120463:	7f e7                	jg     f012044c <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120465:	e8 ac 66 ff ff       	call   f0116b16 <isKHeapPlacementStrategyNEXTFIT>
f012046a:	84 c0                	test   %al,%al
f012046c:	0f 84 ac 06 00 00    	je     f0120b1e <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120472:	e8 3b bc fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120477:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012047a:	e8 0d 38 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012047f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120482:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0120489:	10 00 00 
f012048c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120492:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120497:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012049d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01204a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01204a8:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01204ae:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01204b4:	29 d0                	sub    %edx,%eax
f01204b6:	89 c1                	mov    %eax,%ecx
f01204b8:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01204bf:	10 00 00 
f01204c2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01204c7:	0f b6 d0             	movzbl %al,%edx
f01204ca:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01204d0:	01 d0                	add    %edx,%eax
f01204d2:	48                   	dec    %eax
f01204d3:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01204d9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01204df:	ba 00 00 00 00       	mov    $0x0,%edx
f01204e4:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01204ea:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01204f0:	29 d0                	sub    %edx,%eax
f01204f2:	01 c1                	add    %eax,%ecx
f01204f4:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01204fb:	10 00 00 
f01204fe:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120503:	0f b6 c0             	movzbl %al,%eax
f0120506:	c1 e0 04             	shl    $0x4,%eax
f0120509:	89 c2                	mov    %eax,%edx
f012050b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120511:	01 d0                	add    %edx,%eax
f0120513:	48                   	dec    %eax
f0120514:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012051a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120520:	ba 00 00 00 00       	mov    $0x0,%edx
f0120525:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012052b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120531:	29 d0                	sub    %edx,%eax
f0120533:	01 c8                	add    %ecx,%eax
f0120535:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f012053a:	29 c2                	sub    %eax,%edx
f012053c:	89 d0                	mov    %edx,%eax
f012053e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120544:	83 ec 0c             	sub    $0xc,%esp
f0120547:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f012054d:	e8 d0 6e fe ff       	call   f0107422 <kmalloc>
f0120552:	83 c4 10             	add    $0x10,%esp
f0120555:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012055b:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120561:	89 c1                	mov    %eax,%ecx
f0120563:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012056a:	10 00 00 
f012056d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0120573:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120578:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012057e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120584:	ba 00 00 00 00       	mov    $0x0,%edx
f0120589:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012058f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120595:	29 d0                	sub    %edx,%eax
f0120597:	89 c3                	mov    %eax,%ebx
f0120599:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01205a0:	10 00 00 
f01205a3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01205a8:	0f b6 d0             	movzbl %al,%edx
f01205ab:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01205b1:	01 d0                	add    %edx,%eax
f01205b3:	48                   	dec    %eax
f01205b4:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01205ba:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01205c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01205c5:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01205cb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01205d1:	29 d0                	sub    %edx,%eax
f01205d3:	01 c3                	add    %eax,%ebx
f01205d5:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01205dc:	10 00 00 
f01205df:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01205e4:	0f b6 c0             	movzbl %al,%eax
f01205e7:	c1 e0 04             	shl    $0x4,%eax
f01205ea:	89 c2                	mov    %eax,%edx
f01205ec:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01205f2:	01 d0                	add    %edx,%eax
f01205f4:	48                   	dec    %eax
f01205f5:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01205fb:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120601:	ba 00 00 00 00       	mov    $0x0,%edx
f0120606:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012060c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120612:	29 d0                	sub    %edx,%eax
f0120614:	01 d8                	add    %ebx,%eax
f0120616:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f012061b:	39 c1                	cmp    %eax,%ecx
f012061d:	74 17                	je     f0120636 <test_kfree+0x13fb>
f012061f:	83 ec 04             	sub    $0x4,%esp
f0120622:	68 3c a6 13 f0       	push   $0xf013a63c
f0120627:	68 9f 05 00 00       	push   $0x59f
f012062c:	68 56 a5 13 f0       	push   $0xf013a556
f0120631:	e8 70 fb fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120636:	e8 51 36 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012063b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012063e:	74 17                	je     f0120657 <test_kfree+0x141c>
f0120640:	83 ec 04             	sub    $0x4,%esp
f0120643:	68 70 a5 13 f0       	push   $0xf013a570
f0120648:	68 a0 05 00 00       	push   $0x5a0
f012064d:	68 56 a5 13 f0       	push   $0xf013a556
f0120652:	e8 4f fb fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120657:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012065a:	e8 53 ba fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012065f:	29 c3                	sub    %eax,%ebx
f0120661:	89 da                	mov    %ebx,%edx
f0120663:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120669:	c1 e8 0c             	shr    $0xc,%eax
f012066c:	39 c2                	cmp    %eax,%edx
f012066e:	74 17                	je     f0120687 <test_kfree+0x144c>
f0120670:	83 ec 04             	sub    $0x4,%esp
f0120673:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0120678:	68 a1 05 00 00       	push   $0x5a1
f012067d:	68 56 a5 13 f0       	push   $0xf013a556
f0120682:	e8 1f fb fd ff       	call   f01001a6 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120687:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012068d:	48                   	dec    %eax
f012068e:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0120694:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012069a:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f012069d:	e8 10 ba fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01206a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01206a5:	e8 e2 35 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01206aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f01206ad:	83 ec 0c             	sub    $0xc,%esp
f01206b0:	68 00 00 30 00       	push   $0x300000
f01206b5:	e8 68 6d fe ff       	call   f0107422 <kmalloc>
f01206ba:	83 c4 10             	add    $0x10,%esp
f01206bd:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206c3:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01206c9:	89 c1                	mov    %eax,%ecx
f01206cb:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01206d2:	10 00 00 
f01206d5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01206db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01206e0:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01206e6:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01206ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01206f1:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01206f7:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01206fd:	29 d0                	sub    %edx,%eax
f01206ff:	89 c3                	mov    %eax,%ebx
f0120701:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120708:	10 00 00 
f012070b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120710:	0f b6 d0             	movzbl %al,%edx
f0120713:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120719:	01 d0                	add    %edx,%eax
f012071b:	48                   	dec    %eax
f012071c:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120722:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120728:	ba 00 00 00 00       	mov    $0x0,%edx
f012072d:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120733:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120739:	29 d0                	sub    %edx,%eax
f012073b:	01 c3                	add    %eax,%ebx
f012073d:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120744:	10 00 00 
f0120747:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012074c:	0f b6 c0             	movzbl %al,%eax
f012074f:	c1 e0 04             	shl    $0x4,%eax
f0120752:	89 c2                	mov    %eax,%edx
f0120754:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012075a:	01 d0                	add    %edx,%eax
f012075c:	48                   	dec    %eax
f012075d:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120763:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120769:	ba 00 00 00 00       	mov    $0x0,%edx
f012076e:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120774:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012077a:	29 d0                	sub    %edx,%eax
f012077c:	01 d8                	add    %ebx,%eax
f012077e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120783:	39 c1                	cmp    %eax,%ecx
f0120785:	74 17                	je     f012079e <test_kfree+0x1563>
f0120787:	83 ec 04             	sub    $0x4,%esp
f012078a:	68 3c a6 13 f0       	push   $0xf013a63c
f012078f:	68 ae 05 00 00       	push   $0x5ae
f0120794:	68 56 a5 13 f0       	push   $0xf013a556
f0120799:	e8 08 fa fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012079e:	e8 e9 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01207a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01207a6:	74 17                	je     f01207bf <test_kfree+0x1584>
f01207a8:	83 ec 04             	sub    $0x4,%esp
f01207ab:	68 70 a5 13 f0       	push   $0xf013a570
f01207b0:	68 af 05 00 00       	push   $0x5af
f01207b5:	68 56 a5 13 f0       	push   $0xf013a556
f01207ba:	e8 e7 f9 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01207bf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01207c2:	e8 eb b8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01207c7:	29 c3                	sub    %eax,%ebx
f01207c9:	89 d8                	mov    %ebx,%eax
f01207cb:	3d 00 03 00 00       	cmp    $0x300,%eax
f01207d0:	74 17                	je     f01207e9 <test_kfree+0x15ae>
f01207d2:	83 ec 04             	sub    $0x4,%esp
f01207d5:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01207da:	68 b0 05 00 00       	push   $0x5b0
f01207df:	68 56 a5 13 f0       	push   $0xf013a556
f01207e4:	e8 bd f9 fd ff       	call   f01001a6 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f01207e9:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f01207f0:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f01207f3:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01207f9:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f01207fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120803:	eb 0e                	jmp    f0120813 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0120805:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120808:	8b 45 80             	mov    -0x80(%ebp),%eax
f012080b:	01 d0                	add    %edx,%eax
f012080d:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120810:	ff 45 f4             	incl   -0xc(%ebp)
f0120813:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0120819:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012081c:	7f e7                	jg     f0120805 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f012081e:	e8 8f b8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120823:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120826:	e8 61 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012082b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f012082e:	83 ec 0c             	sub    $0xc,%esp
f0120831:	68 00 08 00 00       	push   $0x800
f0120836:	e8 e7 6b fe ff       	call   f0107422 <kmalloc>
f012083b:	83 c4 10             	add    $0x10,%esp
f012083e:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120844:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012084a:	89 c1                	mov    %eax,%ecx
f012084c:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120853:	10 00 00 
f0120856:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012085c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120861:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120867:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012086d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120872:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120878:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012087e:	29 d0                	sub    %edx,%eax
f0120880:	89 c3                	mov    %eax,%ebx
f0120882:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120889:	10 00 00 
f012088c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120891:	0f b6 d0             	movzbl %al,%edx
f0120894:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012089a:	01 d0                	add    %edx,%eax
f012089c:	48                   	dec    %eax
f012089d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01208a3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01208a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01208ae:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01208b4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01208ba:	29 d0                	sub    %edx,%eax
f01208bc:	01 c3                	add    %eax,%ebx
f01208be:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01208c5:	10 00 00 
f01208c8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01208cd:	0f b6 c0             	movzbl %al,%eax
f01208d0:	c1 e0 04             	shl    $0x4,%eax
f01208d3:	89 c2                	mov    %eax,%edx
f01208d5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01208db:	01 d0                	add    %edx,%eax
f01208dd:	48                   	dec    %eax
f01208de:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01208e4:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01208ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01208ef:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01208f5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01208fb:	29 d0                	sub    %edx,%eax
f01208fd:	01 d8                	add    %ebx,%eax
f01208ff:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120904:	39 c1                	cmp    %eax,%ecx
f0120906:	74 17                	je     f012091f <test_kfree+0x16e4>
f0120908:	83 ec 04             	sub    $0x4,%esp
f012090b:	68 3c a6 13 f0       	push   $0xf013a63c
f0120910:	68 bc 05 00 00       	push   $0x5bc
f0120915:	68 56 a5 13 f0       	push   $0xf013a556
f012091a:	e8 87 f8 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012091f:	e8 68 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120924:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120927:	74 17                	je     f0120940 <test_kfree+0x1705>
f0120929:	83 ec 04             	sub    $0x4,%esp
f012092c:	68 70 a5 13 f0       	push   $0xf013a570
f0120931:	68 bd 05 00 00       	push   $0x5bd
f0120936:	68 56 a5 13 f0       	push   $0xf013a556
f012093b:	e8 66 f8 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120940:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120943:	e8 6a b7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120948:	29 c3                	sub    %eax,%ebx
f012094a:	89 d8                	mov    %ebx,%eax
f012094c:	83 f8 01             	cmp    $0x1,%eax
f012094f:	74 17                	je     f0120968 <test_kfree+0x172d>
f0120951:	83 ec 04             	sub    $0x4,%esp
f0120954:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0120959:	68 be 05 00 00       	push   $0x5be
f012095e:	68 56 a5 13 f0       	push   $0xf013a556
f0120963:	e8 3e f8 fd ff       	call   f01001a6 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120968:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012096f:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120972:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120978:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f012097b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120982:	eb 0e                	jmp    f0120992 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0120984:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120987:	8b 45 80             	mov    -0x80(%ebp),%eax
f012098a:	01 d0                	add    %edx,%eax
f012098c:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f012098f:	ff 45 f4             	incl   -0xc(%ebp)
f0120992:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0120998:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012099b:	7f e7                	jg     f0120984 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f012099d:	e8 10 b7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01209a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01209a5:	e8 e2 32 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01209aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f01209ad:	83 ec 0c             	sub    $0xc,%esp
f01209b0:	68 00 00 10 00       	push   $0x100000
f01209b5:	e8 68 6a fe ff       	call   f0107422 <kmalloc>
f01209ba:	83 c4 10             	add    $0x10,%esp
f01209bd:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01209c3:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01209c9:	89 c1                	mov    %eax,%ecx
f01209cb:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01209d2:	10 00 00 
f01209d5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01209db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01209e0:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01209e6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01209ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01209f1:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01209f7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01209fd:	29 d0                	sub    %edx,%eax
f01209ff:	89 c3                	mov    %eax,%ebx
f0120a01:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120a08:	10 00 00 
f0120a0b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120a10:	0f b6 d0             	movzbl %al,%edx
f0120a13:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0120a19:	01 d0                	add    %edx,%eax
f0120a1b:	48                   	dec    %eax
f0120a1c:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0120a22:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120a28:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a2d:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0120a33:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120a39:	29 d0                	sub    %edx,%eax
f0120a3b:	01 c3                	add    %eax,%ebx
f0120a3d:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0120a44:	10 00 00 
f0120a47:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120a4c:	0f b6 c0             	movzbl %al,%eax
f0120a4f:	c1 e0 04             	shl    $0x4,%eax
f0120a52:	89 c2                	mov    %eax,%edx
f0120a54:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0120a5a:	01 d0                	add    %edx,%eax
f0120a5c:	48                   	dec    %eax
f0120a5d:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0120a63:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120a69:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a6e:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0120a74:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120a7a:	29 d0                	sub    %edx,%eax
f0120a7c:	01 d8                	add    %ebx,%eax
f0120a7e:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120a83:	39 c1                	cmp    %eax,%ecx
f0120a85:	74 17                	je     f0120a9e <test_kfree+0x1863>
f0120a87:	83 ec 04             	sub    $0x4,%esp
f0120a8a:	68 3c a6 13 f0       	push   $0xf013a63c
f0120a8f:	68 ca 05 00 00       	push   $0x5ca
f0120a94:	68 56 a5 13 f0       	push   $0xf013a556
f0120a99:	e8 08 f7 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a9e:	e8 e9 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120aa3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120aa6:	74 17                	je     f0120abf <test_kfree+0x1884>
f0120aa8:	83 ec 04             	sub    $0x4,%esp
f0120aab:	68 70 a5 13 f0       	push   $0xf013a570
f0120ab0:	68 cb 05 00 00       	push   $0x5cb
f0120ab5:	68 56 a5 13 f0       	push   $0xf013a556
f0120aba:	e8 e7 f6 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120abf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ac2:	e8 eb b5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120ac7:	29 c3                	sub    %eax,%ebx
f0120ac9:	89 d8                	mov    %ebx,%eax
f0120acb:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120ad0:	74 17                	je     f0120ae9 <test_kfree+0x18ae>
f0120ad2:	83 ec 04             	sub    $0x4,%esp
f0120ad5:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0120ada:	68 cc 05 00 00       	push   $0x5cc
f0120adf:	68 56 a5 13 f0       	push   $0xf013a556
f0120ae4:	e8 bd f6 fd ff       	call   f01001a6 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120ae9:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0120af0:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120af3:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120af9:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120afc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b03:	eb 0e                	jmp    f0120b13 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0120b05:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b08:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b0b:	01 d0                	add    %edx,%eax
f0120b0d:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120b10:	ff 45 f4             	incl   -0xc(%ebp)
f0120b13:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0120b19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b1c:	7f e7                	jg     f0120b05 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120b1e:	83 ec 0c             	sub    $0xc,%esp
f0120b21:	68 76 ad 13 f0       	push   $0xf013ad76
f0120b26:	e8 02 01 fe ff       	call   f0100c2d <cprintf>
f0120b2b:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120b2e:	e8 7f b5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120b33:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120b36:	e8 51 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120b3b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120b3e:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120b44:	83 ec 0c             	sub    $0xc,%esp
f0120b47:	50                   	push   %eax
f0120b48:	e8 ef 68 fe ff       	call   f010743c <kfree>
f0120b4d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b50:	e8 37 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120b55:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b58:	74 17                	je     f0120b71 <test_kfree+0x1936>
f0120b5a:	83 ec 04             	sub    $0x4,%esp
f0120b5d:	68 70 a5 13 f0       	push   $0xf013a570
f0120b62:	68 dd 05 00 00       	push   $0x5dd
f0120b67:	68 56 a5 13 f0       	push   $0xf013a556
f0120b6c:	e8 35 f6 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120b71:	e8 3c b5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120b76:	89 c2                	mov    %eax,%edx
f0120b78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120b7b:	29 c2                	sub    %eax,%edx
f0120b7d:	89 d0                	mov    %edx,%eax
f0120b7f:	83 f8 02             	cmp    $0x2,%eax
f0120b82:	74 17                	je     f0120b9b <test_kfree+0x1960>
f0120b84:	83 ec 04             	sub    $0x4,%esp
f0120b87:	68 e0 ac 13 f0       	push   $0xf013ace0
f0120b8c:	68 de 05 00 00       	push   $0x5de
f0120b91:	68 56 a5 13 f0       	push   $0xf013a556
f0120b96:	e8 0b f6 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120b9b:	e8 12 b5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120ba0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120ba3:	e8 e4 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120ba8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120bab:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120bb1:	83 ec 0c             	sub    $0xc,%esp
f0120bb4:	50                   	push   %eax
f0120bb5:	e8 82 68 fe ff       	call   f010743c <kfree>
f0120bba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bbd:	e8 ca 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120bc2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bc5:	74 17                	je     f0120bde <test_kfree+0x19a3>
f0120bc7:	83 ec 04             	sub    $0x4,%esp
f0120bca:	68 70 a5 13 f0       	push   $0xf013a570
f0120bcf:	68 e4 05 00 00       	push   $0x5e4
f0120bd4:	68 56 a5 13 f0       	push   $0xf013a556
f0120bd9:	e8 c8 f5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120bde:	e8 cf b4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120be3:	89 c2                	mov    %eax,%edx
f0120be5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120be8:	29 c2                	sub    %eax,%edx
f0120bea:	89 d0                	mov    %edx,%eax
f0120bec:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120bf1:	74 17                	je     f0120c0a <test_kfree+0x19cf>
f0120bf3:	83 ec 04             	sub    $0x4,%esp
f0120bf6:	68 e0 ac 13 f0       	push   $0xf013ace0
f0120bfb:	68 e5 05 00 00       	push   $0x5e5
f0120c00:	68 56 a5 13 f0       	push   $0xf013a556
f0120c05:	e8 9c f5 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c0a:	e8 a3 b4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120c0f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c12:	e8 75 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c17:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120c1a:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120c20:	83 ec 0c             	sub    $0xc,%esp
f0120c23:	50                   	push   %eax
f0120c24:	e8 13 68 fe ff       	call   f010743c <kfree>
f0120c29:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c2c:	e8 5b 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c31:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c34:	74 17                	je     f0120c4d <test_kfree+0x1a12>
f0120c36:	83 ec 04             	sub    $0x4,%esp
f0120c39:	68 70 a5 13 f0       	push   $0xf013a570
f0120c3e:	68 eb 05 00 00       	push   $0x5eb
f0120c43:	68 56 a5 13 f0       	push   $0xf013a556
f0120c48:	e8 59 f5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c4d:	e8 60 b4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120c52:	89 c2                	mov    %eax,%edx
f0120c54:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c57:	29 c2                	sub    %eax,%edx
f0120c59:	89 d0                	mov    %edx,%eax
f0120c5b:	83 f8 01             	cmp    $0x1,%eax
f0120c5e:	74 17                	je     f0120c77 <test_kfree+0x1a3c>
f0120c60:	83 ec 04             	sub    $0x4,%esp
f0120c63:	68 e0 ac 13 f0       	push   $0xf013ace0
f0120c68:	68 ec 05 00 00       	push   $0x5ec
f0120c6d:	68 56 a5 13 f0       	push   $0xf013a556
f0120c72:	e8 2f f5 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c77:	e8 36 b4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120c7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c7f:	e8 08 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c84:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0120c87:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120c8d:	83 ec 0c             	sub    $0xc,%esp
f0120c90:	50                   	push   %eax
f0120c91:	e8 a6 67 fe ff       	call   f010743c <kfree>
f0120c96:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c99:	e8 ee 2f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c9e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ca1:	74 17                	je     f0120cba <test_kfree+0x1a7f>
f0120ca3:	83 ec 04             	sub    $0x4,%esp
f0120ca6:	68 70 a5 13 f0       	push   $0xf013a570
f0120cab:	68 f2 05 00 00       	push   $0x5f2
f0120cb0:	68 56 a5 13 f0       	push   $0xf013a556
f0120cb5:	e8 ec f4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120cba:	e8 f3 b3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120cbf:	89 c2                	mov    %eax,%edx
f0120cc1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120cc4:	29 c2                	sub    %eax,%edx
f0120cc6:	89 d0                	mov    %edx,%eax
f0120cc8:	83 f8 04             	cmp    $0x4,%eax
f0120ccb:	74 17                	je     f0120ce4 <test_kfree+0x1aa9>
f0120ccd:	83 ec 04             	sub    $0x4,%esp
f0120cd0:	68 e0 ac 13 f0       	push   $0xf013ace0
f0120cd5:	68 f3 05 00 00       	push   $0x5f3
f0120cda:	68 56 a5 13 f0       	push   $0xf013a556
f0120cdf:	e8 c2 f4 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ce4:	e8 c9 b3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120ce9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120cec:	e8 9b 2f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120cf1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120cf4:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120cfa:	83 ec 0c             	sub    $0xc,%esp
f0120cfd:	50                   	push   %eax
f0120cfe:	e8 39 67 fe ff       	call   f010743c <kfree>
f0120d03:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d06:	e8 81 2f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120d0b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d0e:	74 17                	je     f0120d27 <test_kfree+0x1aec>
f0120d10:	83 ec 04             	sub    $0x4,%esp
f0120d13:	68 70 a5 13 f0       	push   $0xf013a570
f0120d18:	68 f9 05 00 00       	push   $0x5f9
f0120d1d:	68 56 a5 13 f0       	push   $0xf013a556
f0120d22:	e8 7f f4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d27:	e8 86 b3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120d2c:	89 c2                	mov    %eax,%edx
f0120d2e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120d31:	29 c2                	sub    %eax,%edx
f0120d33:	89 d0                	mov    %edx,%eax
f0120d35:	83 f8 05             	cmp    $0x5,%eax
f0120d38:	74 17                	je     f0120d51 <test_kfree+0x1b16>
f0120d3a:	83 ec 04             	sub    $0x4,%esp
f0120d3d:	68 e0 ac 13 f0       	push   $0xf013ace0
f0120d42:	68 fa 05 00 00       	push   $0x5fa
f0120d47:	68 56 a5 13 f0       	push   $0xf013a556
f0120d4c:	e8 55 f4 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120d51:	e8 5c b3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120d56:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d59:	e8 2e 2f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120d5e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120d61:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120d67:	83 ec 0c             	sub    $0xc,%esp
f0120d6a:	50                   	push   %eax
f0120d6b:	e8 cc 66 fe ff       	call   f010743c <kfree>
f0120d70:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d73:	e8 14 2f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120d78:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d7b:	74 17                	je     f0120d94 <test_kfree+0x1b59>
f0120d7d:	83 ec 04             	sub    $0x4,%esp
f0120d80:	68 70 a5 13 f0       	push   $0xf013a570
f0120d85:	68 00 06 00 00       	push   $0x600
f0120d8a:	68 56 a5 13 f0       	push   $0xf013a556
f0120d8f:	e8 12 f4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d94:	e8 19 b3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120d99:	89 c2                	mov    %eax,%edx
f0120d9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120d9e:	29 c2                	sub    %eax,%edx
f0120da0:	89 d0                	mov    %edx,%eax
f0120da2:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120da7:	74 17                	je     f0120dc0 <test_kfree+0x1b85>
f0120da9:	83 ec 04             	sub    $0x4,%esp
f0120dac:	68 e0 ac 13 f0       	push   $0xf013ace0
f0120db1:	68 01 06 00 00       	push   $0x601
f0120db6:	68 56 a5 13 f0       	push   $0xf013a556
f0120dbb:	e8 e6 f3 fd ff       	call   f01001a6 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120dc0:	e8 51 5d ff ff       	call   f0116b16 <isKHeapPlacementStrategyNEXTFIT>
f0120dc5:	84 c0                	test   %al,%al
f0120dc7:	0f 84 80 02 00 00    	je     f012104d <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120dcd:	e8 e0 b2 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120dd2:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120dd5:	e8 b2 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120dda:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120ddd:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120de3:	83 ec 0c             	sub    $0xc,%esp
f0120de6:	50                   	push   %eax
f0120de7:	e8 50 66 fe ff       	call   f010743c <kfree>
f0120dec:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120def:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0120df6:	10 00 00 
f0120df9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0120dff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e04:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0120e0a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120e10:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e15:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0120e1b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120e21:	29 d0                	sub    %edx,%eax
f0120e23:	89 c1                	mov    %eax,%ecx
f0120e25:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0120e2c:	10 00 00 
f0120e2f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120e34:	0f b6 d0             	movzbl %al,%edx
f0120e37:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0120e3d:	01 d0                	add    %edx,%eax
f0120e3f:	48                   	dec    %eax
f0120e40:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0120e46:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120e4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e51:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120e57:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120e5d:	29 d0                	sub    %edx,%eax
f0120e5f:	01 c1                	add    %eax,%ecx
f0120e61:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0120e68:	10 00 00 
f0120e6b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120e70:	0f b6 c0             	movzbl %al,%eax
f0120e73:	c1 e0 04             	shl    $0x4,%eax
f0120e76:	89 c2                	mov    %eax,%edx
f0120e78:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120e7e:	01 d0                	add    %edx,%eax
f0120e80:	48                   	dec    %eax
f0120e81:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0120e87:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120e8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e92:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0120e98:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120e9e:	29 d0                	sub    %edx,%eax
f0120ea0:	01 c8                	add    %ecx,%eax
f0120ea2:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120ea7:	29 c2                	sub    %eax,%edx
f0120ea9:	89 d0                	mov    %edx,%eax
f0120eab:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120eb1:	e8 d6 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120eb6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120eb9:	74 17                	je     f0120ed2 <test_kfree+0x1c97>
f0120ebb:	83 ec 04             	sub    $0x4,%esp
f0120ebe:	68 70 a5 13 f0       	push   $0xf013a570
f0120ec3:	68 0b 06 00 00       	push   $0x60b
f0120ec8:	68 56 a5 13 f0       	push   $0xf013a556
f0120ecd:	e8 d4 f2 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ed2:	e8 db b1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120ed7:	89 c2                	mov    %eax,%edx
f0120ed9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120edc:	29 c2                	sub    %eax,%edx
f0120ede:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120ee4:	c1 e8 0c             	shr    $0xc,%eax
f0120ee7:	39 c2                	cmp    %eax,%edx
f0120ee9:	74 17                	je     f0120f02 <test_kfree+0x1cc7>
f0120eeb:	83 ec 04             	sub    $0x4,%esp
f0120eee:	68 e0 ac 13 f0       	push   $0xf013ace0
f0120ef3:	68 0c 06 00 00       	push   $0x60c
f0120ef8:	68 56 a5 13 f0       	push   $0xf013a556
f0120efd:	e8 a4 f2 fd ff       	call   f01001a6 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120f02:	e8 ab b1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120f07:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f0a:	e8 7d 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120f12:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120f18:	83 ec 0c             	sub    $0xc,%esp
f0120f1b:	50                   	push   %eax
f0120f1c:	e8 1b 65 fe ff       	call   f010743c <kfree>
f0120f21:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f24:	e8 63 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f29:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f2c:	74 17                	je     f0120f45 <test_kfree+0x1d0a>
f0120f2e:	83 ec 04             	sub    $0x4,%esp
f0120f31:	68 70 a5 13 f0       	push   $0xf013a570
f0120f36:	68 12 06 00 00       	push   $0x612
f0120f3b:	68 56 a5 13 f0       	push   $0xf013a556
f0120f40:	e8 61 f2 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f45:	e8 68 b1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120f4a:	89 c2                	mov    %eax,%edx
f0120f4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f4f:	29 c2                	sub    %eax,%edx
f0120f51:	89 d0                	mov    %edx,%eax
f0120f53:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120f58:	74 17                	je     f0120f71 <test_kfree+0x1d36>
f0120f5a:	83 ec 04             	sub    $0x4,%esp
f0120f5d:	68 e0 ac 13 f0       	push   $0xf013ace0
f0120f62:	68 13 06 00 00       	push   $0x613
f0120f67:	68 56 a5 13 f0       	push   $0xf013a556
f0120f6c:	e8 35 f2 fd ff       	call   f01001a6 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120f71:	e8 3c b1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120f76:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f79:	e8 0e 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0120f81:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120f87:	83 ec 0c             	sub    $0xc,%esp
f0120f8a:	50                   	push   %eax
f0120f8b:	e8 ac 64 fe ff       	call   f010743c <kfree>
f0120f90:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f93:	e8 f4 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120f98:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f9b:	74 17                	je     f0120fb4 <test_kfree+0x1d79>
f0120f9d:	83 ec 04             	sub    $0x4,%esp
f0120fa0:	68 70 a5 13 f0       	push   $0xf013a570
f0120fa5:	68 19 06 00 00       	push   $0x619
f0120faa:	68 56 a5 13 f0       	push   $0xf013a556
f0120faf:	e8 f2 f1 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fb4:	e8 f9 b0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120fb9:	89 c2                	mov    %eax,%edx
f0120fbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fbe:	29 c2                	sub    %eax,%edx
f0120fc0:	89 d0                	mov    %edx,%eax
f0120fc2:	83 f8 01             	cmp    $0x1,%eax
f0120fc5:	74 17                	je     f0120fde <test_kfree+0x1da3>
f0120fc7:	83 ec 04             	sub    $0x4,%esp
f0120fca:	68 e0 ac 13 f0       	push   $0xf013ace0
f0120fcf:	68 1a 06 00 00       	push   $0x61a
f0120fd4:	68 56 a5 13 f0       	push   $0xf013a556
f0120fd9:	e8 c8 f1 fd ff       	call   f01001a6 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120fde:	e8 cf b0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0120fe3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120fe6:	e8 a1 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120feb:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0120fee:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120ff4:	83 ec 0c             	sub    $0xc,%esp
f0120ff7:	50                   	push   %eax
f0120ff8:	e8 3f 64 fe ff       	call   f010743c <kfree>
f0120ffd:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121000:	e8 87 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121005:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121008:	74 17                	je     f0121021 <test_kfree+0x1de6>
f012100a:	83 ec 04             	sub    $0x4,%esp
f012100d:	68 70 a5 13 f0       	push   $0xf013a570
f0121012:	68 20 06 00 00       	push   $0x620
f0121017:	68 56 a5 13 f0       	push   $0xf013a556
f012101c:	e8 85 f1 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121021:	e8 8c b0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121026:	89 c2                	mov    %eax,%edx
f0121028:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012102b:	29 c2                	sub    %eax,%edx
f012102d:	89 d0                	mov    %edx,%eax
f012102f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121034:	74 17                	je     f012104d <test_kfree+0x1e12>
f0121036:	83 ec 04             	sub    $0x4,%esp
f0121039:	68 e0 ac 13 f0       	push   $0xf013ace0
f012103e:	68 21 06 00 00       	push   $0x621
f0121043:	68 56 a5 13 f0       	push   $0xf013a556
f0121048:	e8 59 f1 fd ff       	call   f01001a6 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f012104d:	e8 60 b0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121052:	89 c2                	mov    %eax,%edx
f0121054:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121057:	39 c2                	cmp    %eax,%edx
f0121059:	74 17                	je     f0121072 <test_kfree+0x1e37>
f012105b:	83 ec 04             	sub    $0x4,%esp
f012105e:	68 80 ad 13 f0       	push   $0xf013ad80
f0121063:	68 24 06 00 00       	push   $0x624
f0121068:	68 56 a5 13 f0       	push   $0xf013a556
f012106d:	e8 34 f1 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f0121072:	83 ec 0c             	sub    $0xc,%esp
f0121075:	68 b4 ad 13 f0       	push   $0xf013adb4
f012107a:	e8 ae fb fd ff       	call   f0100c2d <cprintf>
f012107f:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121082:	83 ec 0c             	sub    $0xc,%esp
f0121085:	6a 03                	push   $0x3
f0121087:	e8 cf b4 fe ff       	call   f010c55b <sys_bypassPageFault>
f012108c:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012108f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121096:	e9 82 00 00 00       	jmp    f012111d <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f012109b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012109e:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f01210a5:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01210a8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210ab:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01210ae:	e8 96 b4 fe ff       	call   f010c549 <sys_rcr2>
f01210b3:	89 c2                	mov    %eax,%edx
f01210b5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210b8:	39 c2                	cmp    %eax,%edx
f01210ba:	74 17                	je     f01210d3 <test_kfree+0x1e98>
f01210bc:	83 ec 04             	sub    $0x4,%esp
f01210bf:	68 bc ad 13 f0       	push   $0xf013adbc
f01210c4:	68 33 06 00 00       	push   $0x633
f01210c9:	68 56 a5 13 f0       	push   $0xf013a556
f01210ce:	e8 d3 f0 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f01210d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210d6:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01210dd:	89 c2                	mov    %eax,%edx
f01210df:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210e2:	01 d0                	add    %edx,%eax
f01210e4:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01210e7:	e8 5d b4 fe ff       	call   f010c549 <sys_rcr2>
f01210ec:	89 c2                	mov    %eax,%edx
f01210ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210f1:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01210f8:	89 c1                	mov    %eax,%ecx
f01210fa:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210fd:	01 c8                	add    %ecx,%eax
f01210ff:	39 c2                	cmp    %eax,%edx
f0121101:	74 17                	je     f012111a <test_kfree+0x1edf>
f0121103:	83 ec 04             	sub    $0x4,%esp
f0121106:	68 bc ad 13 f0       	push   $0xf013adbc
f012110b:	68 35 06 00 00       	push   $0x635
f0121110:	68 56 a5 13 f0       	push   $0xf013a556
f0121115:	e8 8c f0 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012111a:	ff 45 f4             	incl   -0xc(%ebp)
f012111d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121121:	0f 8e 74 ff ff ff    	jle    f012109b <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121127:	83 ec 0c             	sub    $0xc,%esp
f012112a:	6a 00                	push   $0x0
f012112c:	e8 2a b4 fe ff       	call   f010c55b <sys_bypassPageFault>
f0121131:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121134:	83 ec 0c             	sub    $0xc,%esp
f0121137:	68 01 ae 13 f0       	push   $0xf013ae01
f012113c:	e8 ec fa fd ff       	call   f0100c2d <cprintf>
f0121141:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121144:	e8 69 af fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121149:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012114c:	e8 3b 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121151:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121154:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012115a:	83 ec 0c             	sub    $0xc,%esp
f012115d:	50                   	push   %eax
f012115e:	e8 d9 62 fe ff       	call   f010743c <kfree>
f0121163:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121166:	e8 21 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012116b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012116e:	74 17                	je     f0121187 <test_kfree+0x1f4c>
f0121170:	83 ec 04             	sub    $0x4,%esp
f0121173:	68 70 a5 13 f0       	push   $0xf013a570
f0121178:	68 43 06 00 00       	push   $0x643
f012117d:	68 56 a5 13 f0       	push   $0xf013a556
f0121182:	e8 1f f0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121187:	e8 26 af fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012118c:	89 c2                	mov    %eax,%edx
f012118e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121191:	39 c2                	cmp    %eax,%edx
f0121193:	74 17                	je     f01211ac <test_kfree+0x1f71>
f0121195:	83 ec 04             	sub    $0x4,%esp
f0121198:	68 08 ae 13 f0       	push   $0xf013ae08
f012119d:	68 44 06 00 00       	push   $0x644
f01211a2:	68 56 a5 13 f0       	push   $0xf013a556
f01211a7:	e8 fa ef fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01211ac:	e8 01 af fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01211b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211b4:	e8 d3 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01211b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01211bc:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01211c2:	83 ec 0c             	sub    $0xc,%esp
f01211c5:	50                   	push   %eax
f01211c6:	e8 71 62 fe ff       	call   f010743c <kfree>
f01211cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211ce:	e8 b9 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01211d3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211d6:	74 17                	je     f01211ef <test_kfree+0x1fb4>
f01211d8:	83 ec 04             	sub    $0x4,%esp
f01211db:	68 70 a5 13 f0       	push   $0xf013a570
f01211e0:	68 4a 06 00 00       	push   $0x64a
f01211e5:	68 56 a5 13 f0       	push   $0xf013a556
f01211ea:	e8 b7 ef fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01211ef:	e8 be ae fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01211f4:	89 c2                	mov    %eax,%edx
f01211f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211f9:	39 c2                	cmp    %eax,%edx
f01211fb:	74 17                	je     f0121214 <test_kfree+0x1fd9>
f01211fd:	83 ec 04             	sub    $0x4,%esp
f0121200:	68 08 ae 13 f0       	push   $0xf013ae08
f0121205:	68 4b 06 00 00       	push   $0x64b
f012120a:	68 56 a5 13 f0       	push   $0xf013a556
f012120f:	e8 92 ef fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121214:	e8 99 ae fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121219:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012121c:	e8 6b 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121221:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121224:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012122a:	83 ec 0c             	sub    $0xc,%esp
f012122d:	50                   	push   %eax
f012122e:	e8 09 62 fe ff       	call   f010743c <kfree>
f0121233:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121236:	e8 51 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012123b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012123e:	74 17                	je     f0121257 <test_kfree+0x201c>
f0121240:	83 ec 04             	sub    $0x4,%esp
f0121243:	68 70 a5 13 f0       	push   $0xf013a570
f0121248:	68 51 06 00 00       	push   $0x651
f012124d:	68 56 a5 13 f0       	push   $0xf013a556
f0121252:	e8 4f ef fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121257:	e8 56 ae fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012125c:	89 c2                	mov    %eax,%edx
f012125e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121261:	39 c2                	cmp    %eax,%edx
f0121263:	74 17                	je     f012127c <test_kfree+0x2041>
f0121265:	83 ec 04             	sub    $0x4,%esp
f0121268:	68 08 ae 13 f0       	push   $0xf013ae08
f012126d:	68 52 06 00 00       	push   $0x652
f0121272:	68 56 a5 13 f0       	push   $0xf013a556
f0121277:	e8 2a ef fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012127c:	e8 31 ae fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121281:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121284:	e8 03 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121289:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012128c:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121292:	83 ec 0c             	sub    $0xc,%esp
f0121295:	50                   	push   %eax
f0121296:	e8 a1 61 fe ff       	call   f010743c <kfree>
f012129b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012129e:	e8 e9 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01212a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212a6:	74 17                	je     f01212bf <test_kfree+0x2084>
f01212a8:	83 ec 04             	sub    $0x4,%esp
f01212ab:	68 70 a5 13 f0       	push   $0xf013a570
f01212b0:	68 58 06 00 00       	push   $0x658
f01212b5:	68 56 a5 13 f0       	push   $0xf013a556
f01212ba:	e8 e7 ee fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01212bf:	e8 ee ad fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01212c4:	89 c2                	mov    %eax,%edx
f01212c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212c9:	39 c2                	cmp    %eax,%edx
f01212cb:	74 17                	je     f01212e4 <test_kfree+0x20a9>
f01212cd:	83 ec 04             	sub    $0x4,%esp
f01212d0:	68 08 ae 13 f0       	push   $0xf013ae08
f01212d5:	68 59 06 00 00       	push   $0x659
f01212da:	68 56 a5 13 f0       	push   $0xf013a556
f01212df:	e8 c2 ee fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f01212e4:	83 ec 0c             	sub    $0xc,%esp
f01212e7:	68 4f ae 13 f0       	push   $0xf013ae4f
f01212ec:	e8 3c f9 fd ff       	call   f0100c2d <cprintf>
f01212f1:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01212f4:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01212fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121302:	eb 48                	jmp    f012134c <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121304:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121307:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012130c:	83 ec 04             	sub    $0x4,%esp
f012130f:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0121315:	51                   	push   %ecx
f0121316:	52                   	push   %edx
f0121317:	50                   	push   %eax
f0121318:	e8 4c 56 fe ff       	call   f0106969 <get_page_table>
f012131d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0121320:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0121326:	85 c0                	test   %eax,%eax
f0121328:	75 17                	jne    f0121341 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012132a:	83 ec 04             	sub    $0x4,%esp
f012132d:	68 58 ae 13 f0       	push   $0xf013ae58
f0121332:	68 67 06 00 00       	push   $0x667
f0121337:	68 56 a5 13 f0       	push   $0xf013a556
f012133c:	e8 65 ee fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121341:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121348:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012134c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121350:	78 b2                	js     f0121304 <test_kfree+0x20c9>
f0121352:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121356:	7f 09                	jg     f0121361 <test_kfree+0x2126>
f0121358:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012135f:	76 a3                	jbe    f0121304 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121361:	83 ec 0c             	sub    $0xc,%esp
f0121364:	68 3a a7 13 f0       	push   $0xf013a73a
f0121369:	e8 bf f8 fd ff       	call   f0100c2d <cprintf>
f012136e:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121371:	83 ec 0c             	sub    $0xc,%esp
f0121374:	68 c0 ae 13 f0       	push   $0xf013aec0
f0121379:	e8 af f8 fd ff       	call   f0100c2d <cprintf>
f012137e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121381:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121386:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121389:	5b                   	pop    %ebx
f012138a:	5f                   	pop    %edi
f012138b:	5d                   	pop    %ebp
f012138c:	c3                   	ret    

f012138d <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f012138d:	55                   	push   %ebp
f012138e:	89 e5                	mov    %esp,%ebp
f0121390:	57                   	push   %edi
f0121391:	53                   	push   %ebx
f0121392:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0121398:	83 ec 0c             	sub    $0xc,%esp
f012139b:	68 98 a4 13 f0       	push   $0xf013a498
f01213a0:	e8 88 f8 fd ff       	call   f0100c2d <cprintf>
f01213a5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01213a8:	83 ec 0c             	sub    $0xc,%esp
f01213ab:	68 c8 a4 13 f0       	push   $0xf013a4c8
f01213b0:	e8 78 f8 fd ff       	call   f0100c2d <cprintf>
f01213b5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01213b8:	83 ec 0c             	sub    $0xc,%esp
f01213bb:	68 98 a4 13 f0       	push   $0xf013a498
f01213c0:	e8 68 f8 fd ff       	call   f0100c2d <cprintf>
f01213c5:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01213c8:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01213cc:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01213d0:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01213d6:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01213dc:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01213e3:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01213ea:	e8 c3 ac fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01213ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01213f2:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01213f8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01213fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0121402:	89 d7                	mov    %edx,%edi
f0121404:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121406:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012140c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121411:	b8 00 00 00 00       	mov    $0x0,%eax
f0121416:	89 d7                	mov    %edx,%edi
f0121418:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012141a:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0121420:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121425:	b8 00 00 00 00       	mov    $0x0,%eax
f012142a:	89 d7                	mov    %edx,%edi
f012142c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012142e:	e8 7f ac fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121433:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121436:	e8 51 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012143b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012143e:	83 ec 0c             	sub    $0xc,%esp
f0121441:	68 00 fc 1f 00       	push   $0x1ffc00
f0121446:	e8 d7 5f fe ff       	call   f0107422 <kmalloc>
f012144b:	83 c4 10             	add    $0x10,%esp
f012144e:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121454:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012145a:	89 c1                	mov    %eax,%ecx
f012145c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121463:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121466:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012146b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f012146e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121471:	ba 00 00 00 00       	mov    $0x0,%edx
f0121476:	f7 75 c8             	divl   -0x38(%ebp)
f0121479:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012147c:	29 d0                	sub    %edx,%eax
f012147e:	89 c3                	mov    %eax,%ebx
f0121480:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121487:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012148c:	0f b6 d0             	movzbl %al,%edx
f012148f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121492:	01 d0                	add    %edx,%eax
f0121494:	48                   	dec    %eax
f0121495:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121498:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012149b:	ba 00 00 00 00       	mov    $0x0,%edx
f01214a0:	f7 75 c0             	divl   -0x40(%ebp)
f01214a3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01214a6:	29 d0                	sub    %edx,%eax
f01214a8:	01 c3                	add    %eax,%ebx
f01214aa:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01214b1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01214b6:	0f b6 c0             	movzbl %al,%eax
f01214b9:	c1 e0 04             	shl    $0x4,%eax
f01214bc:	89 c2                	mov    %eax,%edx
f01214be:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01214c1:	01 d0                	add    %edx,%eax
f01214c3:	48                   	dec    %eax
f01214c4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01214c7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01214ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01214cf:	f7 75 b8             	divl   -0x48(%ebp)
f01214d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01214d5:	29 d0                	sub    %edx,%eax
f01214d7:	01 d8                	add    %ebx,%eax
f01214d9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01214de:	39 c1                	cmp    %eax,%ecx
f01214e0:	74 17                	je     f01214f9 <test_kfree_bestfirstfit+0x16c>
f01214e2:	83 ec 04             	sub    $0x4,%esp
f01214e5:	68 3c a6 13 f0       	push   $0xf013a63c
f01214ea:	68 95 06 00 00       	push   $0x695
f01214ef:	68 56 a5 13 f0       	push   $0xf013a556
f01214f4:	e8 ad ec fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214f9:	e8 8e 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01214fe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121501:	74 17                	je     f012151a <test_kfree_bestfirstfit+0x18d>
f0121503:	83 ec 04             	sub    $0x4,%esp
f0121506:	68 70 a5 13 f0       	push   $0xf013a570
f012150b:	68 96 06 00 00       	push   $0x696
f0121510:	68 56 a5 13 f0       	push   $0xf013a556
f0121515:	e8 8c ec fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012151a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012151d:	e8 90 ab fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121522:	29 c3                	sub    %eax,%ebx
f0121524:	89 d8                	mov    %ebx,%eax
f0121526:	3d 00 02 00 00       	cmp    $0x200,%eax
f012152b:	74 17                	je     f0121544 <test_kfree_bestfirstfit+0x1b7>
f012152d:	83 ec 04             	sub    $0x4,%esp
f0121530:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0121535:	68 97 06 00 00       	push   $0x697
f012153a:	68 56 a5 13 f0       	push   $0xf013a556
f012153f:	e8 62 ec fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121544:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f012154b:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012154e:	e8 5f ab fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121553:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121556:	e8 31 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012155b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012155e:	83 ec 0c             	sub    $0xc,%esp
f0121561:	68 00 fc 1f 00       	push   $0x1ffc00
f0121566:	e8 b7 5e fe ff       	call   f0107422 <kmalloc>
f012156b:	83 c4 10             	add    $0x10,%esp
f012156e:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121574:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012157a:	89 c1                	mov    %eax,%ecx
f012157c:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121583:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121586:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012158b:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012158e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121591:	ba 00 00 00 00       	mov    $0x0,%edx
f0121596:	f7 75 b0             	divl   -0x50(%ebp)
f0121599:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012159c:	29 d0                	sub    %edx,%eax
f012159e:	89 c3                	mov    %eax,%ebx
f01215a0:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01215a7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01215ac:	0f b6 d0             	movzbl %al,%edx
f01215af:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01215b2:	01 d0                	add    %edx,%eax
f01215b4:	48                   	dec    %eax
f01215b5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01215b8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01215bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01215c0:	f7 75 a8             	divl   -0x58(%ebp)
f01215c3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01215c6:	29 d0                	sub    %edx,%eax
f01215c8:	01 c3                	add    %eax,%ebx
f01215ca:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01215d1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01215d6:	0f b6 c0             	movzbl %al,%eax
f01215d9:	c1 e0 04             	shl    $0x4,%eax
f01215dc:	89 c2                	mov    %eax,%edx
f01215de:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01215e1:	01 d0                	add    %edx,%eax
f01215e3:	48                   	dec    %eax
f01215e4:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01215e7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01215ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01215ef:	f7 75 a0             	divl   -0x60(%ebp)
f01215f2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01215f5:	29 d0                	sub    %edx,%eax
f01215f7:	01 d8                	add    %ebx,%eax
f01215f9:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01215fe:	39 c1                	cmp    %eax,%ecx
f0121600:	74 17                	je     f0121619 <test_kfree_bestfirstfit+0x28c>
f0121602:	83 ec 04             	sub    $0x4,%esp
f0121605:	68 3c a6 13 f0       	push   $0xf013a63c
f012160a:	68 9e 06 00 00       	push   $0x69e
f012160f:	68 56 a5 13 f0       	push   $0xf013a556
f0121614:	e8 8d eb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121619:	e8 6e 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012161e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121621:	74 17                	je     f012163a <test_kfree_bestfirstfit+0x2ad>
f0121623:	83 ec 04             	sub    $0x4,%esp
f0121626:	68 70 a5 13 f0       	push   $0xf013a570
f012162b:	68 9f 06 00 00       	push   $0x69f
f0121630:	68 56 a5 13 f0       	push   $0xf013a556
f0121635:	e8 6c eb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012163a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012163d:	e8 70 aa fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121642:	29 c3                	sub    %eax,%ebx
f0121644:	89 d8                	mov    %ebx,%eax
f0121646:	3d 00 02 00 00       	cmp    $0x200,%eax
f012164b:	74 17                	je     f0121664 <test_kfree_bestfirstfit+0x2d7>
f012164d:	83 ec 04             	sub    $0x4,%esp
f0121650:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0121655:	68 a0 06 00 00       	push   $0x6a0
f012165a:	68 56 a5 13 f0       	push   $0xf013a556
f012165f:	e8 42 eb fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121664:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f012166b:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012166e:	e8 3f aa fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121673:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121676:	e8 11 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012167b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012167e:	83 ec 0c             	sub    $0xc,%esp
f0121681:	68 00 08 00 00       	push   $0x800
f0121686:	e8 97 5d fe ff       	call   f0107422 <kmalloc>
f012168b:	83 c4 10             	add    $0x10,%esp
f012168e:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121694:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012169a:	89 c1                	mov    %eax,%ecx
f012169c:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01216a3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01216a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01216ab:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01216ae:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01216b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01216b6:	f7 75 98             	divl   -0x68(%ebp)
f01216b9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01216bc:	29 d0                	sub    %edx,%eax
f01216be:	89 c3                	mov    %eax,%ebx
f01216c0:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01216c7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01216cc:	0f b6 d0             	movzbl %al,%edx
f01216cf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01216d2:	01 d0                	add    %edx,%eax
f01216d4:	48                   	dec    %eax
f01216d5:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01216d8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01216db:	ba 00 00 00 00       	mov    $0x0,%edx
f01216e0:	f7 75 90             	divl   -0x70(%ebp)
f01216e3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01216e6:	29 d0                	sub    %edx,%eax
f01216e8:	01 c3                	add    %eax,%ebx
f01216ea:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01216f1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01216f6:	0f b6 c0             	movzbl %al,%eax
f01216f9:	c1 e0 04             	shl    $0x4,%eax
f01216fc:	89 c2                	mov    %eax,%edx
f01216fe:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121701:	01 d0                	add    %edx,%eax
f0121703:	48                   	dec    %eax
f0121704:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121707:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012170a:	ba 00 00 00 00       	mov    $0x0,%edx
f012170f:	f7 75 88             	divl   -0x78(%ebp)
f0121712:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121715:	29 d0                	sub    %edx,%eax
f0121717:	01 d8                	add    %ebx,%eax
f0121719:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012171e:	39 c1                	cmp    %eax,%ecx
f0121720:	74 17                	je     f0121739 <test_kfree_bestfirstfit+0x3ac>
f0121722:	83 ec 04             	sub    $0x4,%esp
f0121725:	68 3c a6 13 f0       	push   $0xf013a63c
f012172a:	68 a7 06 00 00       	push   $0x6a7
f012172f:	68 56 a5 13 f0       	push   $0xf013a556
f0121734:	e8 6d ea fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121739:	e8 4e 25 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012173e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121741:	74 17                	je     f012175a <test_kfree_bestfirstfit+0x3cd>
f0121743:	83 ec 04             	sub    $0x4,%esp
f0121746:	68 70 a5 13 f0       	push   $0xf013a570
f012174b:	68 a8 06 00 00       	push   $0x6a8
f0121750:	68 56 a5 13 f0       	push   $0xf013a556
f0121755:	e8 4c ea fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012175a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012175d:	e8 50 a9 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121762:	29 c3                	sub    %eax,%ebx
f0121764:	89 d8                	mov    %ebx,%eax
f0121766:	83 f8 01             	cmp    $0x1,%eax
f0121769:	74 17                	je     f0121782 <test_kfree_bestfirstfit+0x3f5>
f012176b:	83 ec 04             	sub    $0x4,%esp
f012176e:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0121773:	68 a9 06 00 00       	push   $0x6a9
f0121778:	68 56 a5 13 f0       	push   $0xf013a556
f012177d:	e8 24 ea fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121782:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0121789:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012178c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121792:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121795:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012179c:	eb 0e                	jmp    f01217ac <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f012179e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01217a1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01217a4:	01 d0                	add    %edx,%eax
f01217a6:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01217a9:	ff 45 f4             	incl   -0xc(%ebp)
f01217ac:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01217b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01217b5:	7f e7                	jg     f012179e <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01217b7:	e8 f6 a8 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01217bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01217bf:	e8 c8 24 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01217c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01217c7:	83 ec 0c             	sub    $0xc,%esp
f01217ca:	68 00 08 00 00       	push   $0x800
f01217cf:	e8 4e 5c fe ff       	call   f0107422 <kmalloc>
f01217d4:	83 c4 10             	add    $0x10,%esp
f01217d7:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217dd:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01217e3:	89 c1                	mov    %eax,%ecx
f01217e5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01217ec:	10 00 00 
f01217ef:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01217f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01217fa:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121800:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121806:	ba 00 00 00 00       	mov    $0x0,%edx
f012180b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121811:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121817:	29 d0                	sub    %edx,%eax
f0121819:	89 c3                	mov    %eax,%ebx
f012181b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121822:	10 00 00 
f0121825:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012182a:	0f b6 d0             	movzbl %al,%edx
f012182d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121833:	01 d0                	add    %edx,%eax
f0121835:	48                   	dec    %eax
f0121836:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012183c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121842:	ba 00 00 00 00       	mov    $0x0,%edx
f0121847:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012184d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121853:	29 d0                	sub    %edx,%eax
f0121855:	01 c3                	add    %eax,%ebx
f0121857:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012185e:	10 00 00 
f0121861:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121866:	0f b6 c0             	movzbl %al,%eax
f0121869:	c1 e0 04             	shl    $0x4,%eax
f012186c:	89 c2                	mov    %eax,%edx
f012186e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121874:	01 d0                	add    %edx,%eax
f0121876:	48                   	dec    %eax
f0121877:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012187d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121883:	ba 00 00 00 00       	mov    $0x0,%edx
f0121888:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012188e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121894:	29 d0                	sub    %edx,%eax
f0121896:	01 d8                	add    %ebx,%eax
f0121898:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012189d:	39 c1                	cmp    %eax,%ecx
f012189f:	74 17                	je     f01218b8 <test_kfree_bestfirstfit+0x52b>
f01218a1:	83 ec 04             	sub    $0x4,%esp
f01218a4:	68 3c a6 13 f0       	push   $0xf013a63c
f01218a9:	68 b5 06 00 00       	push   $0x6b5
f01218ae:	68 56 a5 13 f0       	push   $0xf013a556
f01218b3:	e8 ee e8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218b8:	e8 cf 23 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01218bd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218c0:	74 17                	je     f01218d9 <test_kfree_bestfirstfit+0x54c>
f01218c2:	83 ec 04             	sub    $0x4,%esp
f01218c5:	68 70 a5 13 f0       	push   $0xf013a570
f01218ca:	68 b6 06 00 00       	push   $0x6b6
f01218cf:	68 56 a5 13 f0       	push   $0xf013a556
f01218d4:	e8 cd e8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01218d9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01218dc:	e8 d1 a7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01218e1:	29 c3                	sub    %eax,%ebx
f01218e3:	89 d8                	mov    %ebx,%eax
f01218e5:	83 f8 01             	cmp    $0x1,%eax
f01218e8:	74 17                	je     f0121901 <test_kfree_bestfirstfit+0x574>
f01218ea:	83 ec 04             	sub    $0x4,%esp
f01218ed:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01218f2:	68 b7 06 00 00       	push   $0x6b7
f01218f7:	68 56 a5 13 f0       	push   $0xf013a556
f01218fc:	e8 a5 e8 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121901:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0121908:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012190b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121911:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121914:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012191b:	eb 0e                	jmp    f012192b <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f012191d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121920:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121923:	01 d0                	add    %edx,%eax
f0121925:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121928:	ff 45 f4             	incl   -0xc(%ebp)
f012192b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121931:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121934:	7f e7                	jg     f012191d <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121936:	e8 77 a7 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012193b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012193e:	e8 49 23 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121943:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121946:	83 ec 0c             	sub    $0xc,%esp
f0121949:	68 00 1c 00 00       	push   $0x1c00
f012194e:	e8 cf 5a fe ff       	call   f0107422 <kmalloc>
f0121953:	83 c4 10             	add    $0x10,%esp
f0121956:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012195c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121962:	89 c1                	mov    %eax,%ecx
f0121964:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012196b:	10 00 00 
f012196e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121974:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121979:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012197f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121985:	ba 00 00 00 00       	mov    $0x0,%edx
f012198a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121990:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121996:	29 d0                	sub    %edx,%eax
f0121998:	89 c3                	mov    %eax,%ebx
f012199a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01219a1:	10 00 00 
f01219a4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01219a9:	0f b6 d0             	movzbl %al,%edx
f01219ac:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01219b2:	01 d0                	add    %edx,%eax
f01219b4:	48                   	dec    %eax
f01219b5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01219bb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01219c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01219c6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01219cc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01219d2:	29 d0                	sub    %edx,%eax
f01219d4:	01 c3                	add    %eax,%ebx
f01219d6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01219dd:	10 00 00 
f01219e0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01219e5:	0f b6 c0             	movzbl %al,%eax
f01219e8:	c1 e0 04             	shl    $0x4,%eax
f01219eb:	89 c2                	mov    %eax,%edx
f01219ed:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01219f3:	01 d0                	add    %edx,%eax
f01219f5:	48                   	dec    %eax
f01219f6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01219fc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121a02:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a07:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121a0d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121a13:	29 d0                	sub    %edx,%eax
f0121a15:	01 d8                	add    %ebx,%eax
f0121a17:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121a1c:	39 c1                	cmp    %eax,%ecx
f0121a1e:	74 17                	je     f0121a37 <test_kfree_bestfirstfit+0x6aa>
f0121a20:	83 ec 04             	sub    $0x4,%esp
f0121a23:	68 3c a6 13 f0       	push   $0xf013a63c
f0121a28:	68 c3 06 00 00       	push   $0x6c3
f0121a2d:	68 56 a5 13 f0       	push   $0xf013a556
f0121a32:	e8 6f e7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a37:	e8 50 22 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121a3c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a3f:	74 17                	je     f0121a58 <test_kfree_bestfirstfit+0x6cb>
f0121a41:	83 ec 04             	sub    $0x4,%esp
f0121a44:	68 70 a5 13 f0       	push   $0xf013a570
f0121a49:	68 c4 06 00 00       	push   $0x6c4
f0121a4e:	68 56 a5 13 f0       	push   $0xf013a556
f0121a53:	e8 4e e7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a58:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a5b:	e8 52 a6 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121a60:	29 c3                	sub    %eax,%ebx
f0121a62:	89 d8                	mov    %ebx,%eax
f0121a64:	83 f8 02             	cmp    $0x2,%eax
f0121a67:	74 17                	je     f0121a80 <test_kfree_bestfirstfit+0x6f3>
f0121a69:	83 ec 04             	sub    $0x4,%esp
f0121a6c:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0121a71:	68 c5 06 00 00       	push   $0x6c5
f0121a76:	68 56 a5 13 f0       	push   $0xf013a556
f0121a7b:	e8 26 e7 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0121a80:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0121a87:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0121a8a:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121a90:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121a93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121a9a:	eb 0e                	jmp    f0121aaa <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0121a9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121a9f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121aa2:	01 d0                	add    %edx,%eax
f0121aa4:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121aa7:	ff 45 f4             	incl   -0xc(%ebp)
f0121aaa:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121ab0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ab3:	7f e7                	jg     f0121a9c <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121ab5:	e8 f8 a5 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121aba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121abd:	e8 ca 21 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121ac2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121ac5:	83 ec 0c             	sub    $0xc,%esp
f0121ac8:	68 00 fc 2f 00       	push   $0x2ffc00
f0121acd:	e8 50 59 fe ff       	call   f0107422 <kmalloc>
f0121ad2:	83 c4 10             	add    $0x10,%esp
f0121ad5:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121adb:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121ae1:	89 c1                	mov    %eax,%ecx
f0121ae3:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121aea:	10 00 00 
f0121aed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121af3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121af8:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121afe:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121b04:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b09:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121b0f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121b15:	29 d0                	sub    %edx,%eax
f0121b17:	89 c3                	mov    %eax,%ebx
f0121b19:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0121b20:	10 00 00 
f0121b23:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121b28:	0f b6 d0             	movzbl %al,%edx
f0121b2b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121b31:	01 d0                	add    %edx,%eax
f0121b33:	48                   	dec    %eax
f0121b34:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0121b3a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121b40:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b45:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0121b4b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121b51:	29 d0                	sub    %edx,%eax
f0121b53:	01 c3                	add    %eax,%ebx
f0121b55:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0121b5c:	10 00 00 
f0121b5f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121b64:	0f b6 c0             	movzbl %al,%eax
f0121b67:	c1 e0 04             	shl    $0x4,%eax
f0121b6a:	89 c2                	mov    %eax,%edx
f0121b6c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0121b72:	01 d0                	add    %edx,%eax
f0121b74:	48                   	dec    %eax
f0121b75:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0121b7b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121b81:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b86:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0121b8c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121b92:	29 d0                	sub    %edx,%eax
f0121b94:	01 d8                	add    %ebx,%eax
f0121b96:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121b9b:	39 c1                	cmp    %eax,%ecx
f0121b9d:	74 17                	je     f0121bb6 <test_kfree_bestfirstfit+0x829>
f0121b9f:	83 ec 04             	sub    $0x4,%esp
f0121ba2:	68 3c a6 13 f0       	push   $0xf013a63c
f0121ba7:	68 d1 06 00 00       	push   $0x6d1
f0121bac:	68 56 a5 13 f0       	push   $0xf013a556
f0121bb1:	e8 f0 e5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bb6:	e8 d1 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121bbb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bbe:	74 17                	je     f0121bd7 <test_kfree_bestfirstfit+0x84a>
f0121bc0:	83 ec 04             	sub    $0x4,%esp
f0121bc3:	68 70 a5 13 f0       	push   $0xf013a570
f0121bc8:	68 d2 06 00 00       	push   $0x6d2
f0121bcd:	68 56 a5 13 f0       	push   $0xf013a556
f0121bd2:	e8 cf e5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121bd7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121bda:	e8 d3 a4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121bdf:	29 c3                	sub    %eax,%ebx
f0121be1:	89 d8                	mov    %ebx,%eax
f0121be3:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121be8:	74 17                	je     f0121c01 <test_kfree_bestfirstfit+0x874>
f0121bea:	83 ec 04             	sub    $0x4,%esp
f0121bed:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0121bf2:	68 d3 06 00 00       	push   $0x6d3
f0121bf7:	68 56 a5 13 f0       	push   $0xf013a556
f0121bfc:	e8 a5 e5 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121c01:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0121c08:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121c0b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121c11:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121c14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121c1b:	eb 0e                	jmp    f0121c2b <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0121c1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121c20:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121c23:	01 d0                	add    %edx,%eax
f0121c25:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121c28:	ff 45 f4             	incl   -0xc(%ebp)
f0121c2b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121c31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121c34:	7f e7                	jg     f0121c1d <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121c36:	e8 77 a4 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121c3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c3e:	e8 49 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121c43:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121c46:	83 ec 0c             	sub    $0xc,%esp
f0121c49:	68 00 fc 5f 00       	push   $0x5ffc00
f0121c4e:	e8 cf 57 fe ff       	call   f0107422 <kmalloc>
f0121c53:	83 c4 10             	add    $0x10,%esp
f0121c56:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c5c:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0121c62:	89 c1                	mov    %eax,%ecx
f0121c64:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0121c6b:	10 00 00 
f0121c6e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0121c74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c79:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0121c7f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121c85:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c8a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0121c90:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121c96:	29 d0                	sub    %edx,%eax
f0121c98:	89 c3                	mov    %eax,%ebx
f0121c9a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0121ca1:	10 00 00 
f0121ca4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121ca9:	0f b6 d0             	movzbl %al,%edx
f0121cac:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0121cb2:	01 d0                	add    %edx,%eax
f0121cb4:	48                   	dec    %eax
f0121cb5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0121cbb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121cc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cc6:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0121ccc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121cd2:	29 d0                	sub    %edx,%eax
f0121cd4:	01 c3                	add    %eax,%ebx
f0121cd6:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0121cdd:	10 00 00 
f0121ce0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121ce5:	0f b6 c0             	movzbl %al,%eax
f0121ce8:	c1 e0 04             	shl    $0x4,%eax
f0121ceb:	89 c2                	mov    %eax,%edx
f0121ced:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0121cf3:	01 d0                	add    %edx,%eax
f0121cf5:	48                   	dec    %eax
f0121cf6:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0121cfc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121d02:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d07:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0121d0d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121d13:	29 d0                	sub    %edx,%eax
f0121d15:	01 d8                	add    %ebx,%eax
f0121d17:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121d1c:	39 c1                	cmp    %eax,%ecx
f0121d1e:	74 17                	je     f0121d37 <test_kfree_bestfirstfit+0x9aa>
f0121d20:	83 ec 04             	sub    $0x4,%esp
f0121d23:	68 3c a6 13 f0       	push   $0xf013a63c
f0121d28:	68 df 06 00 00       	push   $0x6df
f0121d2d:	68 56 a5 13 f0       	push   $0xf013a556
f0121d32:	e8 6f e4 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d37:	e8 50 1f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121d3c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d3f:	74 17                	je     f0121d58 <test_kfree_bestfirstfit+0x9cb>
f0121d41:	83 ec 04             	sub    $0x4,%esp
f0121d44:	68 70 a5 13 f0       	push   $0xf013a570
f0121d49:	68 e0 06 00 00       	push   $0x6e0
f0121d4e:	68 56 a5 13 f0       	push   $0xf013a556
f0121d53:	e8 4e e4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d58:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d5b:	e8 52 a3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121d60:	29 c3                	sub    %eax,%ebx
f0121d62:	89 d8                	mov    %ebx,%eax
f0121d64:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121d69:	74 17                	je     f0121d82 <test_kfree_bestfirstfit+0x9f5>
f0121d6b:	83 ec 04             	sub    $0x4,%esp
f0121d6e:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0121d73:	68 e1 06 00 00       	push   $0x6e1
f0121d78:	68 56 a5 13 f0       	push   $0xf013a556
f0121d7d:	e8 24 e4 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0121d82:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0121d89:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121d8c:	e8 21 a3 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121d91:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d94:	e8 f3 1e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121d99:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121d9c:	83 ec 0c             	sub    $0xc,%esp
f0121d9f:	68 00 38 00 00       	push   $0x3800
f0121da4:	e8 79 56 fe ff       	call   f0107422 <kmalloc>
f0121da9:	83 c4 10             	add    $0x10,%esp
f0121dac:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121db2:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0121db8:	89 c1                	mov    %eax,%ecx
f0121dba:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0121dc1:	10 00 00 
f0121dc4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0121dca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121dcf:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0121dd5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121ddb:	ba 00 00 00 00       	mov    $0x0,%edx
f0121de0:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0121de6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121dec:	29 d0                	sub    %edx,%eax
f0121dee:	89 c3                	mov    %eax,%ebx
f0121df0:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0121df7:	10 00 00 
f0121dfa:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121dff:	0f b6 d0             	movzbl %al,%edx
f0121e02:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0121e08:	01 d0                	add    %edx,%eax
f0121e0a:	48                   	dec    %eax
f0121e0b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0121e11:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121e17:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e1c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0121e22:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121e28:	29 d0                	sub    %edx,%eax
f0121e2a:	01 c3                	add    %eax,%ebx
f0121e2c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0121e33:	10 00 00 
f0121e36:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121e3b:	0f b6 c0             	movzbl %al,%eax
f0121e3e:	c1 e0 04             	shl    $0x4,%eax
f0121e41:	89 c2                	mov    %eax,%edx
f0121e43:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0121e49:	01 d0                	add    %edx,%eax
f0121e4b:	48                   	dec    %eax
f0121e4c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0121e52:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121e58:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e5d:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0121e63:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121e69:	29 d0                	sub    %edx,%eax
f0121e6b:	01 d8                	add    %ebx,%eax
f0121e6d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121e72:	39 c1                	cmp    %eax,%ecx
f0121e74:	74 17                	je     f0121e8d <test_kfree_bestfirstfit+0xb00>
f0121e76:	83 ec 04             	sub    $0x4,%esp
f0121e79:	68 3c a6 13 f0       	push   $0xf013a63c
f0121e7e:	68 e8 06 00 00       	push   $0x6e8
f0121e83:	68 56 a5 13 f0       	push   $0xf013a556
f0121e88:	e8 19 e3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e8d:	e8 fa 1d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121e92:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e95:	74 17                	je     f0121eae <test_kfree_bestfirstfit+0xb21>
f0121e97:	83 ec 04             	sub    $0x4,%esp
f0121e9a:	68 70 a5 13 f0       	push   $0xf013a570
f0121e9f:	68 e9 06 00 00       	push   $0x6e9
f0121ea4:	68 56 a5 13 f0       	push   $0xf013a556
f0121ea9:	e8 f8 e2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121eae:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121eb1:	e8 fc a1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121eb6:	29 c3                	sub    %eax,%ebx
f0121eb8:	89 d8                	mov    %ebx,%eax
f0121eba:	83 f8 04             	cmp    $0x4,%eax
f0121ebd:	74 17                	je     f0121ed6 <test_kfree_bestfirstfit+0xb49>
f0121ebf:	83 ec 04             	sub    $0x4,%esp
f0121ec2:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0121ec7:	68 ea 06 00 00       	push   $0x6ea
f0121ecc:	68 56 a5 13 f0       	push   $0xf013a556
f0121ed1:	e8 d0 e2 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121ed6:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0121edd:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121ee0:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0121ee6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121ee9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ef0:	eb 0e                	jmp    f0121f00 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0121ef2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ef5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ef8:	01 d0                	add    %edx,%eax
f0121efa:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121efd:	ff 45 f4             	incl   -0xc(%ebp)
f0121f00:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121f06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121f09:	7f e7                	jg     f0121ef2 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121f0b:	e8 a2 a1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121f10:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121f16:	e8 71 1d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121f1b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0121f21:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121f27:	83 ec 0c             	sub    $0xc,%esp
f0121f2a:	50                   	push   %eax
f0121f2b:	e8 0c 55 fe ff       	call   f010743c <kfree>
f0121f30:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f33:	e8 54 1d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121f38:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121f3e:	74 17                	je     f0121f57 <test_kfree_bestfirstfit+0xbca>
f0121f40:	83 ec 04             	sub    $0x4,%esp
f0121f43:	68 70 a5 13 f0       	push   $0xf013a570
f0121f48:	68 f9 06 00 00       	push   $0x6f9
f0121f4d:	68 56 a5 13 f0       	push   $0xf013a556
f0121f52:	e8 4f e2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f57:	e8 56 a1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121f5c:	89 c2                	mov    %eax,%edx
f0121f5e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121f64:	29 c2                	sub    %eax,%edx
f0121f66:	89 d0                	mov    %edx,%eax
f0121f68:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121f6d:	74 17                	je     f0121f86 <test_kfree_bestfirstfit+0xbf9>
f0121f6f:	83 ec 04             	sub    $0x4,%esp
f0121f72:	68 e0 ac 13 f0       	push   $0xf013ace0
f0121f77:	68 fa 06 00 00       	push   $0x6fa
f0121f7c:	68 56 a5 13 f0       	push   $0xf013a556
f0121f81:	e8 20 e2 fd ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121f86:	e8 27 a1 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121f8b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f91:	e8 f6 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121f96:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0121f9c:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121fa2:	83 ec 0c             	sub    $0xc,%esp
f0121fa5:	50                   	push   %eax
f0121fa6:	e8 91 54 fe ff       	call   f010743c <kfree>
f0121fab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fae:	e8 d9 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121fb3:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121fb9:	74 17                	je     f0121fd2 <test_kfree_bestfirstfit+0xc45>
f0121fbb:	83 ec 04             	sub    $0x4,%esp
f0121fbe:	68 70 a5 13 f0       	push   $0xf013a570
f0121fc3:	68 00 07 00 00       	push   $0x700
f0121fc8:	68 56 a5 13 f0       	push   $0xf013a556
f0121fcd:	e8 d4 e1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121fd2:	e8 db a0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0121fd7:	89 c2                	mov    %eax,%edx
f0121fd9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121fdf:	29 c2                	sub    %eax,%edx
f0121fe1:	89 d0                	mov    %edx,%eax
f0121fe3:	83 f8 01             	cmp    $0x1,%eax
f0121fe6:	74 17                	je     f0121fff <test_kfree_bestfirstfit+0xc72>
f0121fe8:	83 ec 04             	sub    $0x4,%esp
f0121feb:	68 e0 ac 13 f0       	push   $0xf013ace0
f0121ff0:	68 01 07 00 00       	push   $0x701
f0121ff5:	68 56 a5 13 f0       	push   $0xf013a556
f0121ffa:	e8 a7 e1 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121fff:	e8 ae a0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122004:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012200a:	e8 7d 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012200f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122015:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012201b:	83 ec 0c             	sub    $0xc,%esp
f012201e:	50                   	push   %eax
f012201f:	e8 18 54 fe ff       	call   f010743c <kfree>
f0122024:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122027:	e8 60 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012202c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122032:	74 17                	je     f012204b <test_kfree_bestfirstfit+0xcbe>
f0122034:	83 ec 04             	sub    $0x4,%esp
f0122037:	68 70 a5 13 f0       	push   $0xf013a570
f012203c:	68 07 07 00 00       	push   $0x707
f0122041:	68 56 a5 13 f0       	push   $0xf013a556
f0122046:	e8 5b e1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012204b:	e8 62 a0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122050:	89 c2                	mov    %eax,%edx
f0122052:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122058:	29 c2                	sub    %eax,%edx
f012205a:	89 d0                	mov    %edx,%eax
f012205c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122061:	74 17                	je     f012207a <test_kfree_bestfirstfit+0xced>
f0122063:	83 ec 04             	sub    $0x4,%esp
f0122066:	68 e0 ac 13 f0       	push   $0xf013ace0
f012206b:	68 08 07 00 00       	push   $0x708
f0122070:	68 56 a5 13 f0       	push   $0xf013a556
f0122075:	e8 2c e1 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012207a:	e8 33 a0 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012207f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122085:	e8 02 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012208a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0122090:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122096:	83 ec 0c             	sub    $0xc,%esp
f0122099:	50                   	push   %eax
f012209a:	e8 9d 53 fe ff       	call   f010743c <kfree>
f012209f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220a2:	e8 e5 1b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01220a7:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01220ad:	74 17                	je     f01220c6 <test_kfree_bestfirstfit+0xd39>
f01220af:	83 ec 04             	sub    $0x4,%esp
f01220b2:	68 70 a5 13 f0       	push   $0xf013a570
f01220b7:	68 0e 07 00 00       	push   $0x70e
f01220bc:	68 56 a5 13 f0       	push   $0xf013a556
f01220c1:	e8 e0 e0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01220c6:	e8 e7 9f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01220cb:	89 c2                	mov    %eax,%edx
f01220cd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01220d3:	29 c2                	sub    %eax,%edx
f01220d5:	89 d0                	mov    %edx,%eax
f01220d7:	3d 00 06 00 00       	cmp    $0x600,%eax
f01220dc:	74 17                	je     f01220f5 <test_kfree_bestfirstfit+0xd68>
f01220de:	83 ec 04             	sub    $0x4,%esp
f01220e1:	68 e0 ac 13 f0       	push   $0xf013ace0
f01220e6:	68 0f 07 00 00       	push   $0x70f
f01220eb:	68 56 a5 13 f0       	push   $0xf013a556
f01220f0:	e8 b1 e0 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01220f5:	83 ec 0c             	sub    $0xc,%esp
f01220f8:	68 18 ad 13 f0       	push   $0xf013ad18
f01220fd:	e8 2b eb fd ff       	call   f0100c2d <cprintf>
f0122102:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122105:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012210b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012210e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122115:	eb 1e                	jmp    f0122135 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0122117:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012211d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122120:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122123:	01 c8                	add    %ecx,%eax
f0122125:	8a 00                	mov    (%eax),%al
f0122127:	0f be c0             	movsbl %al,%eax
f012212a:	01 d0                	add    %edx,%eax
f012212c:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122132:	ff 45 f4             	incl   -0xc(%ebp)
f0122135:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012213b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012213e:	7f d7                	jg     f0122117 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0122140:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122146:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012214c:	89 c1                	mov    %eax,%ecx
f012214e:	01 c9                	add    %ecx,%ecx
f0122150:	01 c8                	add    %ecx,%eax
f0122152:	39 c2                	cmp    %eax,%edx
f0122154:	74 17                	je     f012216d <test_kfree_bestfirstfit+0xde0>
f0122156:	83 ec 04             	sub    $0x4,%esp
f0122159:	68 3c ad 13 f0       	push   $0xf013ad3c
f012215e:	68 1c 07 00 00       	push   $0x71c
f0122163:	68 56 a5 13 f0       	push   $0xf013a556
f0122168:	e8 39 e0 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012216d:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122173:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122176:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012217d:	eb 1e                	jmp    f012219d <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f012217f:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122185:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122188:	8b 45 80             	mov    -0x80(%ebp),%eax
f012218b:	01 c8                	add    %ecx,%eax
f012218d:	8a 00                	mov    (%eax),%al
f012218f:	0f be c0             	movsbl %al,%eax
f0122192:	01 d0                	add    %edx,%eax
f0122194:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012219a:	ff 45 f4             	incl   -0xc(%ebp)
f012219d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01221a3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221a6:	7f d7                	jg     f012217f <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01221a8:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01221ae:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01221b4:	c1 e2 02             	shl    $0x2,%edx
f01221b7:	39 d0                	cmp    %edx,%eax
f01221b9:	74 17                	je     f01221d2 <test_kfree_bestfirstfit+0xe45>
f01221bb:	83 ec 04             	sub    $0x4,%esp
f01221be:	68 3c ad 13 f0       	push   $0xf013ad3c
f01221c3:	68 24 07 00 00       	push   $0x724
f01221c8:	68 56 a5 13 f0       	push   $0xf013a556
f01221cd:	e8 d4 df fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01221d2:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01221d8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01221db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01221e2:	eb 1e                	jmp    f0122202 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f01221e4:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01221ea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01221ed:	8b 45 80             	mov    -0x80(%ebp),%eax
f01221f0:	01 c8                	add    %ecx,%eax
f01221f2:	8a 00                	mov    (%eax),%al
f01221f4:	0f be c0             	movsbl %al,%eax
f01221f7:	01 d0                	add    %edx,%eax
f01221f9:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01221ff:	ff 45 f4             	incl   -0xc(%ebp)
f0122202:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122208:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012220b:	7f d7                	jg     f01221e4 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012220d:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0122213:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122219:	89 d0                	mov    %edx,%eax
f012221b:	c1 e0 02             	shl    $0x2,%eax
f012221e:	01 d0                	add    %edx,%eax
f0122220:	39 c1                	cmp    %eax,%ecx
f0122222:	74 17                	je     f012223b <test_kfree_bestfirstfit+0xeae>
f0122224:	83 ec 04             	sub    $0x4,%esp
f0122227:	68 3c ad 13 f0       	push   $0xf013ad3c
f012222c:	68 2c 07 00 00       	push   $0x72c
f0122231:	68 56 a5 13 f0       	push   $0xf013a556
f0122236:	e8 6b df fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012223b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122241:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122244:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012224b:	eb 1e                	jmp    f012226b <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f012224d:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0122253:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122256:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122259:	01 c8                	add    %ecx,%eax
f012225b:	8a 00                	mov    (%eax),%al
f012225d:	0f be c0             	movsbl %al,%eax
f0122260:	01 d0                	add    %edx,%eax
f0122262:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122268:	ff 45 f4             	incl   -0xc(%ebp)
f012226b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122271:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122274:	7f d7                	jg     f012224d <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122276:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012227c:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0122282:	89 d0                	mov    %edx,%eax
f0122284:	01 c0                	add    %eax,%eax
f0122286:	01 d0                	add    %edx,%eax
f0122288:	01 c0                	add    %eax,%eax
f012228a:	01 d0                	add    %edx,%eax
f012228c:	39 c1                	cmp    %eax,%ecx
f012228e:	74 17                	je     f01222a7 <test_kfree_bestfirstfit+0xf1a>
f0122290:	83 ec 04             	sub    $0x4,%esp
f0122293:	68 3c ad 13 f0       	push   $0xf013ad3c
f0122298:	68 34 07 00 00       	push   $0x734
f012229d:	68 56 a5 13 f0       	push   $0xf013a556
f01222a2:	e8 ff de fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f01222a7:	83 ec 0c             	sub    $0xc,%esp
f01222aa:	68 6f ad 13 f0       	push   $0xf013ad6f
f01222af:	e8 79 e9 fd ff       	call   f0100c2d <cprintf>
f01222b4:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01222b7:	e8 f6 9d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01222bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222bf:	e8 c8 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01222c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f01222c7:	83 ec 0c             	sub    $0xc,%esp
f01222ca:	68 00 00 30 00       	push   $0x300000
f01222cf:	e8 4e 51 fe ff       	call   f0107422 <kmalloc>
f01222d4:	83 c4 10             	add    $0x10,%esp
f01222d7:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01222dd:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01222e3:	89 c1                	mov    %eax,%ecx
f01222e5:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01222ec:	10 00 00 
f01222ef:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01222f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01222fa:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0122300:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122306:	ba 00 00 00 00       	mov    $0x0,%edx
f012230b:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0122311:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122317:	29 d0                	sub    %edx,%eax
f0122319:	89 c3                	mov    %eax,%ebx
f012231b:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0122322:	10 00 00 
f0122325:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012232a:	0f b6 d0             	movzbl %al,%edx
f012232d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122333:	01 d0                	add    %edx,%eax
f0122335:	48                   	dec    %eax
f0122336:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012233c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122342:	ba 00 00 00 00       	mov    $0x0,%edx
f0122347:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012234d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122353:	29 d0                	sub    %edx,%eax
f0122355:	01 c3                	add    %eax,%ebx
f0122357:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012235e:	10 00 00 
f0122361:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122366:	0f b6 c0             	movzbl %al,%eax
f0122369:	c1 e0 04             	shl    $0x4,%eax
f012236c:	89 c2                	mov    %eax,%edx
f012236e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122374:	01 d0                	add    %edx,%eax
f0122376:	48                   	dec    %eax
f0122377:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012237d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122383:	ba 00 00 00 00       	mov    $0x0,%edx
f0122388:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012238e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122394:	29 d0                	sub    %edx,%eax
f0122396:	01 d8                	add    %ebx,%eax
f0122398:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012239d:	39 c1                	cmp    %eax,%ecx
f012239f:	74 17                	je     f01223b8 <test_kfree_bestfirstfit+0x102b>
f01223a1:	83 ec 04             	sub    $0x4,%esp
f01223a4:	68 3c a6 13 f0       	push   $0xf013a63c
f01223a9:	68 3f 07 00 00       	push   $0x73f
f01223ae:	68 56 a5 13 f0       	push   $0xf013a556
f01223b3:	e8 ee dd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223b8:	e8 cf 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01223bd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223c0:	74 17                	je     f01223d9 <test_kfree_bestfirstfit+0x104c>
f01223c2:	83 ec 04             	sub    $0x4,%esp
f01223c5:	68 70 a5 13 f0       	push   $0xf013a570
f01223ca:	68 40 07 00 00       	push   $0x740
f01223cf:	68 56 a5 13 f0       	push   $0xf013a556
f01223d4:	e8 cd dd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01223d9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01223dc:	e8 d1 9c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01223e1:	29 c3                	sub    %eax,%ebx
f01223e3:	89 d8                	mov    %ebx,%eax
f01223e5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01223ea:	74 17                	je     f0122403 <test_kfree_bestfirstfit+0x1076>
f01223ec:	83 ec 04             	sub    $0x4,%esp
f01223ef:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01223f4:	68 41 07 00 00       	push   $0x741
f01223f9:	68 56 a5 13 f0       	push   $0xf013a556
f01223fe:	e8 a3 dd fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122403:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f012240a:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f012240d:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122413:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122416:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012241d:	eb 0e                	jmp    f012242d <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f012241f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122422:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122425:	01 d0                	add    %edx,%eax
f0122427:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012242a:	ff 45 f4             	incl   -0xc(%ebp)
f012242d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0122433:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122436:	7f e7                	jg     f012241f <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122438:	e8 75 9c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012243d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122440:	e8 47 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122445:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122448:	83 ec 0c             	sub    $0xc,%esp
f012244b:	68 00 08 00 00       	push   $0x800
f0122450:	e8 cd 4f fe ff       	call   f0107422 <kmalloc>
f0122455:	83 c4 10             	add    $0x10,%esp
f0122458:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012245e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122464:	89 c1                	mov    %eax,%ecx
f0122466:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012246d:	10 00 00 
f0122470:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122476:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012247b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0122481:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122487:	ba 00 00 00 00       	mov    $0x0,%edx
f012248c:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0122492:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122498:	29 d0                	sub    %edx,%eax
f012249a:	89 c3                	mov    %eax,%ebx
f012249c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01224a3:	10 00 00 
f01224a6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01224ab:	0f b6 d0             	movzbl %al,%edx
f01224ae:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01224b4:	01 d0                	add    %edx,%eax
f01224b6:	48                   	dec    %eax
f01224b7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01224bd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01224c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01224c8:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01224ce:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01224d4:	29 d0                	sub    %edx,%eax
f01224d6:	01 c3                	add    %eax,%ebx
f01224d8:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01224df:	10 00 00 
f01224e2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01224e7:	0f b6 c0             	movzbl %al,%eax
f01224ea:	c1 e0 04             	shl    $0x4,%eax
f01224ed:	89 c2                	mov    %eax,%edx
f01224ef:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01224f5:	01 d0                	add    %edx,%eax
f01224f7:	48                   	dec    %eax
f01224f8:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01224fe:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122504:	ba 00 00 00 00       	mov    $0x0,%edx
f0122509:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012250f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122515:	29 d0                	sub    %edx,%eax
f0122517:	01 d8                	add    %ebx,%eax
f0122519:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012251e:	39 c1                	cmp    %eax,%ecx
f0122520:	74 17                	je     f0122539 <test_kfree_bestfirstfit+0x11ac>
f0122522:	83 ec 04             	sub    $0x4,%esp
f0122525:	68 3c a6 13 f0       	push   $0xf013a63c
f012252a:	68 4d 07 00 00       	push   $0x74d
f012252f:	68 56 a5 13 f0       	push   $0xf013a556
f0122534:	e8 6d dc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122539:	e8 4e 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012253e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122541:	74 17                	je     f012255a <test_kfree_bestfirstfit+0x11cd>
f0122543:	83 ec 04             	sub    $0x4,%esp
f0122546:	68 70 a5 13 f0       	push   $0xf013a570
f012254b:	68 4e 07 00 00       	push   $0x74e
f0122550:	68 56 a5 13 f0       	push   $0xf013a556
f0122555:	e8 4c dc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012255a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012255d:	e8 50 9b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122562:	29 c3                	sub    %eax,%ebx
f0122564:	89 d8                	mov    %ebx,%eax
f0122566:	83 f8 01             	cmp    $0x1,%eax
f0122569:	74 17                	je     f0122582 <test_kfree_bestfirstfit+0x11f5>
f012256b:	83 ec 04             	sub    $0x4,%esp
f012256e:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0122573:	68 4f 07 00 00       	push   $0x74f
f0122578:	68 56 a5 13 f0       	push   $0xf013a556
f012257d:	e8 24 dc fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122582:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0122589:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f012258c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122592:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122595:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012259c:	eb 0e                	jmp    f01225ac <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f012259e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01225a1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01225a4:	01 d0                	add    %edx,%eax
f01225a6:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01225a9:	ff 45 f4             	incl   -0xc(%ebp)
f01225ac:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01225b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01225b5:	7f e7                	jg     f012259e <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01225b7:	e8 f6 9a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01225bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225bf:	e8 c8 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01225c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01225c7:	83 ec 0c             	sub    $0xc,%esp
f01225ca:	68 00 00 10 00       	push   $0x100000
f01225cf:	e8 4e 4e fe ff       	call   f0107422 <kmalloc>
f01225d4:	83 c4 10             	add    $0x10,%esp
f01225d7:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01225dd:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01225e3:	89 c1                	mov    %eax,%ecx
f01225e5:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01225ec:	10 00 00 
f01225ef:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01225f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01225fa:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0122600:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122606:	ba 00 00 00 00       	mov    $0x0,%edx
f012260b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0122611:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122617:	29 d0                	sub    %edx,%eax
f0122619:	89 c3                	mov    %eax,%ebx
f012261b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0122622:	10 00 00 
f0122625:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012262a:	0f b6 d0             	movzbl %al,%edx
f012262d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0122633:	01 d0                	add    %edx,%eax
f0122635:	48                   	dec    %eax
f0122636:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012263c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122642:	ba 00 00 00 00       	mov    $0x0,%edx
f0122647:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012264d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122653:	29 d0                	sub    %edx,%eax
f0122655:	01 c3                	add    %eax,%ebx
f0122657:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012265e:	10 00 00 
f0122661:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122666:	0f b6 c0             	movzbl %al,%eax
f0122669:	c1 e0 04             	shl    $0x4,%eax
f012266c:	89 c2                	mov    %eax,%edx
f012266e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0122674:	01 d0                	add    %edx,%eax
f0122676:	48                   	dec    %eax
f0122677:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012267d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122683:	ba 00 00 00 00       	mov    $0x0,%edx
f0122688:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012268e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122694:	29 d0                	sub    %edx,%eax
f0122696:	01 d8                	add    %ebx,%eax
f0122698:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f012269d:	39 c1                	cmp    %eax,%ecx
f012269f:	74 17                	je     f01226b8 <test_kfree_bestfirstfit+0x132b>
f01226a1:	83 ec 04             	sub    $0x4,%esp
f01226a4:	68 3c a6 13 f0       	push   $0xf013a63c
f01226a9:	68 5b 07 00 00       	push   $0x75b
f01226ae:	68 56 a5 13 f0       	push   $0xf013a556
f01226b3:	e8 ee da fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226b8:	e8 cf 15 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01226bd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226c0:	74 17                	je     f01226d9 <test_kfree_bestfirstfit+0x134c>
f01226c2:	83 ec 04             	sub    $0x4,%esp
f01226c5:	68 70 a5 13 f0       	push   $0xf013a570
f01226ca:	68 5c 07 00 00       	push   $0x75c
f01226cf:	68 56 a5 13 f0       	push   $0xf013a556
f01226d4:	e8 cd da fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01226d9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01226dc:	e8 d1 99 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01226e1:	29 c3                	sub    %eax,%ebx
f01226e3:	89 d8                	mov    %ebx,%eax
f01226e5:	3d 00 01 00 00       	cmp    $0x100,%eax
f01226ea:	74 17                	je     f0122703 <test_kfree_bestfirstfit+0x1376>
f01226ec:	83 ec 04             	sub    $0x4,%esp
f01226ef:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01226f4:	68 5d 07 00 00       	push   $0x75d
f01226f9:	68 56 a5 13 f0       	push   $0xf013a556
f01226fe:	e8 a3 da fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122703:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f012270a:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f012270d:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122713:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122716:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012271d:	eb 0e                	jmp    f012272d <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f012271f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122722:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122725:	01 d0                	add    %edx,%eax
f0122727:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012272a:	ff 45 f4             	incl   -0xc(%ebp)
f012272d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122733:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122736:	7f e7                	jg     f012271f <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122738:	83 ec 0c             	sub    $0xc,%esp
f012273b:	68 76 ad 13 f0       	push   $0xf013ad76
f0122740:	e8 e8 e4 fd ff       	call   f0100c2d <cprintf>
f0122745:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122748:	e8 65 99 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012274d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122750:	e8 37 15 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122755:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122758:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012275e:	83 ec 0c             	sub    $0xc,%esp
f0122761:	50                   	push   %eax
f0122762:	e8 d5 4c fe ff       	call   f010743c <kfree>
f0122767:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012276a:	e8 1d 15 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012276f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122772:	74 17                	je     f012278b <test_kfree_bestfirstfit+0x13fe>
f0122774:	83 ec 04             	sub    $0x4,%esp
f0122777:	68 70 a5 13 f0       	push   $0xf013a570
f012277c:	68 6d 07 00 00       	push   $0x76d
f0122781:	68 56 a5 13 f0       	push   $0xf013a556
f0122786:	e8 1b da fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f012278b:	e8 22 99 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122790:	89 c2                	mov    %eax,%edx
f0122792:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122795:	29 c2                	sub    %eax,%edx
f0122797:	89 d0                	mov    %edx,%eax
f0122799:	83 f8 02             	cmp    $0x2,%eax
f012279c:	74 17                	je     f01227b5 <test_kfree_bestfirstfit+0x1428>
f012279e:	83 ec 04             	sub    $0x4,%esp
f01227a1:	68 e0 ac 13 f0       	push   $0xf013ace0
f01227a6:	68 6e 07 00 00       	push   $0x76e
f01227ab:	68 56 a5 13 f0       	push   $0xf013a556
f01227b0:	e8 f1 d9 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01227b5:	e8 f8 98 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01227ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227bd:	e8 ca 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01227c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01227c5:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01227cb:	83 ec 0c             	sub    $0xc,%esp
f01227ce:	50                   	push   %eax
f01227cf:	e8 68 4c fe ff       	call   f010743c <kfree>
f01227d4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227d7:	e8 b0 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01227dc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227df:	74 17                	je     f01227f8 <test_kfree_bestfirstfit+0x146b>
f01227e1:	83 ec 04             	sub    $0x4,%esp
f01227e4:	68 70 a5 13 f0       	push   $0xf013a570
f01227e9:	68 74 07 00 00       	push   $0x774
f01227ee:	68 56 a5 13 f0       	push   $0xf013a556
f01227f3:	e8 ae d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01227f8:	e8 b5 98 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01227fd:	89 c2                	mov    %eax,%edx
f01227ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122802:	29 c2                	sub    %eax,%edx
f0122804:	89 d0                	mov    %edx,%eax
f0122806:	3d 00 03 00 00       	cmp    $0x300,%eax
f012280b:	74 17                	je     f0122824 <test_kfree_bestfirstfit+0x1497>
f012280d:	83 ec 04             	sub    $0x4,%esp
f0122810:	68 e0 ac 13 f0       	push   $0xf013ace0
f0122815:	68 75 07 00 00       	push   $0x775
f012281a:	68 56 a5 13 f0       	push   $0xf013a556
f012281f:	e8 82 d9 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122824:	e8 89 98 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122829:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012282c:	e8 5b 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122831:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122834:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012283a:	83 ec 0c             	sub    $0xc,%esp
f012283d:	50                   	push   %eax
f012283e:	e8 f9 4b fe ff       	call   f010743c <kfree>
f0122843:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122846:	e8 41 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012284b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012284e:	74 17                	je     f0122867 <test_kfree_bestfirstfit+0x14da>
f0122850:	83 ec 04             	sub    $0x4,%esp
f0122853:	68 70 a5 13 f0       	push   $0xf013a570
f0122858:	68 7b 07 00 00       	push   $0x77b
f012285d:	68 56 a5 13 f0       	push   $0xf013a556
f0122862:	e8 3f d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122867:	e8 46 98 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012286c:	89 c2                	mov    %eax,%edx
f012286e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122871:	29 c2                	sub    %eax,%edx
f0122873:	89 d0                	mov    %edx,%eax
f0122875:	83 f8 01             	cmp    $0x1,%eax
f0122878:	74 17                	je     f0122891 <test_kfree_bestfirstfit+0x1504>
f012287a:	83 ec 04             	sub    $0x4,%esp
f012287d:	68 e0 ac 13 f0       	push   $0xf013ace0
f0122882:	68 7c 07 00 00       	push   $0x77c
f0122887:	68 56 a5 13 f0       	push   $0xf013a556
f012288c:	e8 15 d9 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122891:	e8 1c 98 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122896:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122899:	e8 ee 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012289e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01228a1:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01228a7:	83 ec 0c             	sub    $0xc,%esp
f01228aa:	50                   	push   %eax
f01228ab:	e8 8c 4b fe ff       	call   f010743c <kfree>
f01228b0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228b3:	e8 d4 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01228b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228bb:	74 17                	je     f01228d4 <test_kfree_bestfirstfit+0x1547>
f01228bd:	83 ec 04             	sub    $0x4,%esp
f01228c0:	68 70 a5 13 f0       	push   $0xf013a570
f01228c5:	68 82 07 00 00       	push   $0x782
f01228ca:	68 56 a5 13 f0       	push   $0xf013a556
f01228cf:	e8 d2 d8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01228d4:	e8 d9 97 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01228d9:	89 c2                	mov    %eax,%edx
f01228db:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01228de:	29 c2                	sub    %eax,%edx
f01228e0:	89 d0                	mov    %edx,%eax
f01228e2:	83 f8 04             	cmp    $0x4,%eax
f01228e5:	74 17                	je     f01228fe <test_kfree_bestfirstfit+0x1571>
f01228e7:	83 ec 04             	sub    $0x4,%esp
f01228ea:	68 e0 ac 13 f0       	push   $0xf013ace0
f01228ef:	68 83 07 00 00       	push   $0x783
f01228f4:	68 56 a5 13 f0       	push   $0xf013a556
f01228f9:	e8 a8 d8 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01228fe:	e8 af 97 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122903:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122906:	e8 81 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012290b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012290e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122914:	83 ec 0c             	sub    $0xc,%esp
f0122917:	50                   	push   %eax
f0122918:	e8 1f 4b fe ff       	call   f010743c <kfree>
f012291d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122920:	e8 67 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122925:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122928:	74 17                	je     f0122941 <test_kfree_bestfirstfit+0x15b4>
f012292a:	83 ec 04             	sub    $0x4,%esp
f012292d:	68 70 a5 13 f0       	push   $0xf013a570
f0122932:	68 89 07 00 00       	push   $0x789
f0122937:	68 56 a5 13 f0       	push   $0xf013a556
f012293c:	e8 65 d8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122941:	e8 6c 97 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122946:	89 c2                	mov    %eax,%edx
f0122948:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012294b:	29 c2                	sub    %eax,%edx
f012294d:	89 d0                	mov    %edx,%eax
f012294f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122954:	74 17                	je     f012296d <test_kfree_bestfirstfit+0x15e0>
f0122956:	83 ec 04             	sub    $0x4,%esp
f0122959:	68 e0 ac 13 f0       	push   $0xf013ace0
f012295e:	68 8a 07 00 00       	push   $0x78a
f0122963:	68 56 a5 13 f0       	push   $0xf013a556
f0122968:	e8 39 d8 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012296d:	e8 40 97 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122972:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122975:	e8 12 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012297a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012297d:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122983:	83 ec 0c             	sub    $0xc,%esp
f0122986:	50                   	push   %eax
f0122987:	e8 b0 4a fe ff       	call   f010743c <kfree>
f012298c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012298f:	e8 f8 12 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122994:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122997:	74 17                	je     f01229b0 <test_kfree_bestfirstfit+0x1623>
f0122999:	83 ec 04             	sub    $0x4,%esp
f012299c:	68 70 a5 13 f0       	push   $0xf013a570
f01229a1:	68 90 07 00 00       	push   $0x790
f01229a6:	68 56 a5 13 f0       	push   $0xf013a556
f01229ab:	e8 f6 d7 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01229b0:	e8 fd 96 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01229b5:	89 c2                	mov    %eax,%edx
f01229b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01229ba:	29 c2                	sub    %eax,%edx
f01229bc:	89 d0                	mov    %edx,%eax
f01229be:	83 f8 01             	cmp    $0x1,%eax
f01229c1:	74 17                	je     f01229da <test_kfree_bestfirstfit+0x164d>
f01229c3:	83 ec 04             	sub    $0x4,%esp
f01229c6:	68 e0 ac 13 f0       	push   $0xf013ace0
f01229cb:	68 91 07 00 00       	push   $0x791
f01229d0:	68 56 a5 13 f0       	push   $0xf013a556
f01229d5:	e8 cc d7 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01229da:	e8 d3 96 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01229df:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229e2:	e8 a5 12 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01229e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f01229ea:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01229f0:	83 ec 0c             	sub    $0xc,%esp
f01229f3:	50                   	push   %eax
f01229f4:	e8 43 4a fe ff       	call   f010743c <kfree>
f01229f9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229fc:	e8 8b 12 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122a01:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a04:	74 17                	je     f0122a1d <test_kfree_bestfirstfit+0x1690>
f0122a06:	83 ec 04             	sub    $0x4,%esp
f0122a09:	68 70 a5 13 f0       	push   $0xf013a570
f0122a0e:	68 97 07 00 00       	push   $0x797
f0122a13:	68 56 a5 13 f0       	push   $0xf013a556
f0122a18:	e8 89 d7 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122a1d:	e8 90 96 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122a22:	89 c2                	mov    %eax,%edx
f0122a24:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a27:	29 c2                	sub    %eax,%edx
f0122a29:	89 d0                	mov    %edx,%eax
f0122a2b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122a30:	74 17                	je     f0122a49 <test_kfree_bestfirstfit+0x16bc>
f0122a32:	83 ec 04             	sub    $0x4,%esp
f0122a35:	68 e0 ac 13 f0       	push   $0xf013ace0
f0122a3a:	68 98 07 00 00       	push   $0x798
f0122a3f:	68 56 a5 13 f0       	push   $0xf013a556
f0122a44:	e8 5d d7 fd ff       	call   f01001a6 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122a49:	e8 64 96 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122a4e:	89 c2                	mov    %eax,%edx
f0122a50:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122a53:	39 c2                	cmp    %eax,%edx
f0122a55:	74 17                	je     f0122a6e <test_kfree_bestfirstfit+0x16e1>
f0122a57:	83 ec 04             	sub    $0x4,%esp
f0122a5a:	68 80 ad 13 f0       	push   $0xf013ad80
f0122a5f:	68 9a 07 00 00       	push   $0x79a
f0122a64:	68 56 a5 13 f0       	push   $0xf013a556
f0122a69:	e8 38 d7 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f0122a6e:	83 ec 0c             	sub    $0xc,%esp
f0122a71:	68 b4 ad 13 f0       	push   $0xf013adb4
f0122a76:	e8 b2 e1 fd ff       	call   f0100c2d <cprintf>
f0122a7b:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0122a7e:	83 ec 0c             	sub    $0xc,%esp
f0122a81:	6a 03                	push   $0x3
f0122a83:	e8 d3 9a fe ff       	call   f010c55b <sys_bypassPageFault>
f0122a88:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122a8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a92:	e9 82 00 00 00       	jmp    f0122b19 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0122a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122a9a:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0122aa1:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0122aa4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122aa7:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122aaa:	e8 9a 9a fe ff       	call   f010c549 <sys_rcr2>
f0122aaf:	89 c2                	mov    %eax,%edx
f0122ab1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122ab4:	39 c2                	cmp    %eax,%edx
f0122ab6:	74 17                	je     f0122acf <test_kfree_bestfirstfit+0x1742>
f0122ab8:	83 ec 04             	sub    $0x4,%esp
f0122abb:	68 bc ad 13 f0       	push   $0xf013adbc
f0122ac0:	68 a9 07 00 00       	push   $0x7a9
f0122ac5:	68 56 a5 13 f0       	push   $0xf013a556
f0122aca:	e8 d7 d6 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0122acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122ad2:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0122ad9:	89 c2                	mov    %eax,%edx
f0122adb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122ade:	01 d0                	add    %edx,%eax
f0122ae0:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122ae3:	e8 61 9a fe ff       	call   f010c549 <sys_rcr2>
f0122ae8:	89 c2                	mov    %eax,%edx
f0122aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122aed:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0122af4:	89 c1                	mov    %eax,%ecx
f0122af6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122af9:	01 c8                	add    %ecx,%eax
f0122afb:	39 c2                	cmp    %eax,%edx
f0122afd:	74 17                	je     f0122b16 <test_kfree_bestfirstfit+0x1789>
f0122aff:	83 ec 04             	sub    $0x4,%esp
f0122b02:	68 bc ad 13 f0       	push   $0xf013adbc
f0122b07:	68 ab 07 00 00       	push   $0x7ab
f0122b0c:	68 56 a5 13 f0       	push   $0xf013a556
f0122b11:	e8 90 d6 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122b16:	ff 45 f4             	incl   -0xc(%ebp)
f0122b19:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122b1d:	0f 8e 74 ff ff ff    	jle    f0122a97 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122b23:	83 ec 0c             	sub    $0xc,%esp
f0122b26:	6a 00                	push   $0x0
f0122b28:	e8 2e 9a fe ff       	call   f010c55b <sys_bypassPageFault>
f0122b2d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122b30:	83 ec 0c             	sub    $0xc,%esp
f0122b33:	68 01 ae 13 f0       	push   $0xf013ae01
f0122b38:	e8 f0 e0 fd ff       	call   f0100c2d <cprintf>
f0122b3d:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b40:	e8 6d 95 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122b45:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b48:	e8 3f 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122b4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122b50:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122b56:	83 ec 0c             	sub    $0xc,%esp
f0122b59:	50                   	push   %eax
f0122b5a:	e8 dd 48 fe ff       	call   f010743c <kfree>
f0122b5f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b62:	e8 25 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122b67:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b6a:	74 17                	je     f0122b83 <test_kfree_bestfirstfit+0x17f6>
f0122b6c:	83 ec 04             	sub    $0x4,%esp
f0122b6f:	68 70 a5 13 f0       	push   $0xf013a570
f0122b74:	68 b9 07 00 00       	push   $0x7b9
f0122b79:	68 56 a5 13 f0       	push   $0xf013a556
f0122b7e:	e8 23 d6 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122b83:	e8 2a 95 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122b88:	89 c2                	mov    %eax,%edx
f0122b8a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122b8d:	39 c2                	cmp    %eax,%edx
f0122b8f:	74 17                	je     f0122ba8 <test_kfree_bestfirstfit+0x181b>
f0122b91:	83 ec 04             	sub    $0x4,%esp
f0122b94:	68 08 ae 13 f0       	push   $0xf013ae08
f0122b99:	68 ba 07 00 00       	push   $0x7ba
f0122b9e:	68 56 a5 13 f0       	push   $0xf013a556
f0122ba3:	e8 fe d5 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122ba8:	e8 05 95 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122bad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bb0:	e8 d7 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122bb5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122bb8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122bbe:	83 ec 0c             	sub    $0xc,%esp
f0122bc1:	50                   	push   %eax
f0122bc2:	e8 75 48 fe ff       	call   f010743c <kfree>
f0122bc7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122bca:	e8 bd 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122bcf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122bd2:	74 17                	je     f0122beb <test_kfree_bestfirstfit+0x185e>
f0122bd4:	83 ec 04             	sub    $0x4,%esp
f0122bd7:	68 70 a5 13 f0       	push   $0xf013a570
f0122bdc:	68 c0 07 00 00       	push   $0x7c0
f0122be1:	68 56 a5 13 f0       	push   $0xf013a556
f0122be6:	e8 bb d5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122beb:	e8 c2 94 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122bf0:	89 c2                	mov    %eax,%edx
f0122bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122bf5:	39 c2                	cmp    %eax,%edx
f0122bf7:	74 17                	je     f0122c10 <test_kfree_bestfirstfit+0x1883>
f0122bf9:	83 ec 04             	sub    $0x4,%esp
f0122bfc:	68 08 ae 13 f0       	push   $0xf013ae08
f0122c01:	68 c1 07 00 00       	push   $0x7c1
f0122c06:	68 56 a5 13 f0       	push   $0xf013a556
f0122c0b:	e8 96 d5 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122c10:	e8 9d 94 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122c15:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c18:	e8 6f 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c1d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122c20:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122c26:	83 ec 0c             	sub    $0xc,%esp
f0122c29:	50                   	push   %eax
f0122c2a:	e8 0d 48 fe ff       	call   f010743c <kfree>
f0122c2f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c32:	e8 55 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c37:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c3a:	74 17                	je     f0122c53 <test_kfree_bestfirstfit+0x18c6>
f0122c3c:	83 ec 04             	sub    $0x4,%esp
f0122c3f:	68 70 a5 13 f0       	push   $0xf013a570
f0122c44:	68 c7 07 00 00       	push   $0x7c7
f0122c49:	68 56 a5 13 f0       	push   $0xf013a556
f0122c4e:	e8 53 d5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122c53:	e8 5a 94 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122c58:	89 c2                	mov    %eax,%edx
f0122c5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c5d:	39 c2                	cmp    %eax,%edx
f0122c5f:	74 17                	je     f0122c78 <test_kfree_bestfirstfit+0x18eb>
f0122c61:	83 ec 04             	sub    $0x4,%esp
f0122c64:	68 08 ae 13 f0       	push   $0xf013ae08
f0122c69:	68 c8 07 00 00       	push   $0x7c8
f0122c6e:	68 56 a5 13 f0       	push   $0xf013a556
f0122c73:	e8 2e d5 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c78:	e8 35 94 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122c7d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c80:	e8 07 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c85:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122c88:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122c8e:	83 ec 0c             	sub    $0xc,%esp
f0122c91:	50                   	push   %eax
f0122c92:	e8 a5 47 fe ff       	call   f010743c <kfree>
f0122c97:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c9a:	e8 ed 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c9f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ca2:	74 17                	je     f0122cbb <test_kfree_bestfirstfit+0x192e>
f0122ca4:	83 ec 04             	sub    $0x4,%esp
f0122ca7:	68 70 a5 13 f0       	push   $0xf013a570
f0122cac:	68 ce 07 00 00       	push   $0x7ce
f0122cb1:	68 56 a5 13 f0       	push   $0xf013a556
f0122cb6:	e8 eb d4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122cbb:	e8 f2 93 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122cc0:	89 c2                	mov    %eax,%edx
f0122cc2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122cc5:	39 c2                	cmp    %eax,%edx
f0122cc7:	74 17                	je     f0122ce0 <test_kfree_bestfirstfit+0x1953>
f0122cc9:	83 ec 04             	sub    $0x4,%esp
f0122ccc:	68 08 ae 13 f0       	push   $0xf013ae08
f0122cd1:	68 cf 07 00 00       	push   $0x7cf
f0122cd6:	68 56 a5 13 f0       	push   $0xf013a556
f0122cdb:	e8 c6 d4 fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f0122ce0:	83 ec 0c             	sub    $0xc,%esp
f0122ce3:	68 4f ae 13 f0       	push   $0xf013ae4f
f0122ce8:	e8 40 df fd ff       	call   f0100c2d <cprintf>
f0122ced:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122cf0:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122cf7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122cfe:	eb 48                	jmp    f0122d48 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122d00:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122d03:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0122d08:	83 ec 04             	sub    $0x4,%esp
f0122d0b:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0122d11:	51                   	push   %ecx
f0122d12:	52                   	push   %edx
f0122d13:	50                   	push   %eax
f0122d14:	e8 50 3c fe ff       	call   f0106969 <get_page_table>
f0122d19:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122d1c:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0122d22:	85 c0                	test   %eax,%eax
f0122d24:	75 17                	jne    f0122d3d <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122d26:	83 ec 04             	sub    $0x4,%esp
f0122d29:	68 58 ae 13 f0       	push   $0xf013ae58
f0122d2e:	68 dd 07 00 00       	push   $0x7dd
f0122d33:	68 56 a5 13 f0       	push   $0xf013a556
f0122d38:	e8 69 d4 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122d3d:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122d44:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122d48:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122d4c:	78 b2                	js     f0122d00 <test_kfree_bestfirstfit+0x1973>
f0122d4e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122d52:	7f 09                	jg     f0122d5d <test_kfree_bestfirstfit+0x19d0>
f0122d54:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122d5b:	76 a3                	jbe    f0122d00 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0122d5d:	83 ec 0c             	sub    $0xc,%esp
f0122d60:	68 3a a7 13 f0       	push   $0xf013a73a
f0122d65:	e8 c3 de fd ff       	call   f0100c2d <cprintf>
f0122d6a:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122d6d:	83 ec 0c             	sub    $0xc,%esp
f0122d70:	68 c0 ae 13 f0       	push   $0xf013aec0
f0122d75:	e8 b3 de fd ff       	call   f0100c2d <cprintf>
f0122d7a:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122d7d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0122d82:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122d85:	5b                   	pop    %ebx
f0122d86:	5f                   	pop    %edi
f0122d87:	5d                   	pop    %ebp
f0122d88:	c3                   	ret    

f0122d89 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122d89:	55                   	push   %ebp
f0122d8a:	89 e5                	mov    %esp,%ebp
f0122d8c:	57                   	push   %edi
f0122d8d:	56                   	push   %esi
f0122d8e:	53                   	push   %ebx
f0122d8f:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0122d95:	83 ec 0c             	sub    $0xc,%esp
f0122d98:	68 98 a4 13 f0       	push   $0xf013a498
f0122d9d:	e8 8b de fd ff       	call   f0100c2d <cprintf>
f0122da2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122da5:	83 ec 0c             	sub    $0xc,%esp
f0122da8:	68 c8 a4 13 f0       	push   $0xf013a4c8
f0122dad:	e8 7b de fd ff       	call   f0100c2d <cprintf>
f0122db2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122db5:	83 ec 0c             	sub    $0xc,%esp
f0122db8:	68 98 a4 13 f0       	push   $0xf013a498
f0122dbd:	e8 6b de fd ff       	call   f0100c2d <cprintf>
f0122dc2:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122dc5:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122dc9:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122dcd:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122dd3:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122dd9:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122de0:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122de7:	e8 c6 92 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122dec:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122def:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0122df5:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122dfa:	b8 00 00 00 00       	mov    $0x0,%eax
f0122dff:	89 d7                	mov    %edx,%edi
f0122e01:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122e03:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0122e09:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122e0e:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e13:	89 d7                	mov    %edx,%edi
f0122e15:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122e17:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0122e1d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122e22:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e27:	89 d7                	mov    %edx,%edi
f0122e29:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e2b:	e8 82 92 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122e30:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e33:	e8 54 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122e38:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122e3b:	83 ec 0c             	sub    $0xc,%esp
f0122e3e:	68 00 fc 1f 00       	push   $0x1ffc00
f0122e43:	e8 da 45 fe ff       	call   f0107422 <kmalloc>
f0122e48:	83 c4 10             	add    $0x10,%esp
f0122e4b:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e51:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0122e57:	89 c1                	mov    %eax,%ecx
f0122e59:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122e60:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122e63:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122e68:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122e6b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122e6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e73:	f7 75 a0             	divl   -0x60(%ebp)
f0122e76:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122e79:	29 d0                	sub    %edx,%eax
f0122e7b:	89 c3                	mov    %eax,%ebx
f0122e7d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122e84:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122e89:	0f b6 d0             	movzbl %al,%edx
f0122e8c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122e8f:	01 d0                	add    %edx,%eax
f0122e91:	48                   	dec    %eax
f0122e92:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122e95:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122e98:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e9d:	f7 75 98             	divl   -0x68(%ebp)
f0122ea0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122ea3:	29 d0                	sub    %edx,%eax
f0122ea5:	01 c3                	add    %eax,%ebx
f0122ea7:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122eae:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122eb3:	0f b6 c0             	movzbl %al,%eax
f0122eb6:	c1 e0 04             	shl    $0x4,%eax
f0122eb9:	89 c2                	mov    %eax,%edx
f0122ebb:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122ebe:	01 d0                	add    %edx,%eax
f0122ec0:	48                   	dec    %eax
f0122ec1:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122ec4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122ec7:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ecc:	f7 75 90             	divl   -0x70(%ebp)
f0122ecf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122ed2:	29 d0                	sub    %edx,%eax
f0122ed4:	01 d8                	add    %ebx,%eax
f0122ed6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122edb:	39 c1                	cmp    %eax,%ecx
f0122edd:	74 17                	je     f0122ef6 <test_kheap_phys_addr+0x16d>
f0122edf:	83 ec 04             	sub    $0x4,%esp
f0122ee2:	68 3c a6 13 f0       	push   $0xf013a63c
f0122ee7:	68 0a 08 00 00       	push   $0x80a
f0122eec:	68 56 a5 13 f0       	push   $0xf013a556
f0122ef1:	e8 b0 d2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ef6:	e8 91 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122efb:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122efe:	74 17                	je     f0122f17 <test_kheap_phys_addr+0x18e>
f0122f00:	83 ec 04             	sub    $0x4,%esp
f0122f03:	68 70 a5 13 f0       	push   $0xf013a570
f0122f08:	68 0b 08 00 00       	push   $0x80b
f0122f0d:	68 56 a5 13 f0       	push   $0xf013a556
f0122f12:	e8 8f d2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f17:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122f1a:	e8 93 91 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122f1f:	29 c3                	sub    %eax,%ebx
f0122f21:	89 d8                	mov    %ebx,%eax
f0122f23:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122f28:	74 17                	je     f0122f41 <test_kheap_phys_addr+0x1b8>
f0122f2a:	83 ec 04             	sub    $0x4,%esp
f0122f2d:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0122f32:	68 0c 08 00 00       	push   $0x80c
f0122f37:	68 56 a5 13 f0       	push   $0xf013a556
f0122f3c:	e8 65 d2 fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f41:	e8 6c 91 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0122f46:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f49:	e8 3e 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f4e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122f51:	83 ec 0c             	sub    $0xc,%esp
f0122f54:	68 00 fc 1f 00       	push   $0x1ffc00
f0122f59:	e8 c4 44 fe ff       	call   f0107422 <kmalloc>
f0122f5e:	83 c4 10             	add    $0x10,%esp
f0122f61:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f67:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0122f6d:	89 c1                	mov    %eax,%ecx
f0122f6f:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122f76:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122f79:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122f7e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122f81:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122f84:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f89:	f7 75 88             	divl   -0x78(%ebp)
f0122f8c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122f8f:	29 d0                	sub    %edx,%eax
f0122f91:	89 c3                	mov    %eax,%ebx
f0122f93:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122f9a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122f9f:	0f b6 d0             	movzbl %al,%edx
f0122fa2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122fa5:	01 d0                	add    %edx,%eax
f0122fa7:	48                   	dec    %eax
f0122fa8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122fae:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122fb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fb9:	f7 75 80             	divl   -0x80(%ebp)
f0122fbc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122fc2:	29 d0                	sub    %edx,%eax
f0122fc4:	01 c3                	add    %eax,%ebx
f0122fc6:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122fcd:	10 00 00 
f0122fd0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122fd5:	0f b6 c0             	movzbl %al,%eax
f0122fd8:	c1 e0 04             	shl    $0x4,%eax
f0122fdb:	89 c2                	mov    %eax,%edx
f0122fdd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122fe3:	01 d0                	add    %edx,%eax
f0122fe5:	48                   	dec    %eax
f0122fe6:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122fec:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122ff2:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ff7:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122ffd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123003:	29 d0                	sub    %edx,%eax
f0123005:	01 d8                	add    %ebx,%eax
f0123007:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012300c:	39 c1                	cmp    %eax,%ecx
f012300e:	74 17                	je     f0123027 <test_kheap_phys_addr+0x29e>
f0123010:	83 ec 04             	sub    $0x4,%esp
f0123013:	68 3c a6 13 f0       	push   $0xf013a63c
f0123018:	68 12 08 00 00       	push   $0x812
f012301d:	68 56 a5 13 f0       	push   $0xf013a556
f0123022:	e8 7f d1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123027:	e8 60 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012302c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012302f:	74 17                	je     f0123048 <test_kheap_phys_addr+0x2bf>
f0123031:	83 ec 04             	sub    $0x4,%esp
f0123034:	68 70 a5 13 f0       	push   $0xf013a570
f0123039:	68 13 08 00 00       	push   $0x813
f012303e:	68 56 a5 13 f0       	push   $0xf013a556
f0123043:	e8 5e d1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123048:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012304b:	e8 62 90 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123050:	29 c3                	sub    %eax,%ebx
f0123052:	89 d8                	mov    %ebx,%eax
f0123054:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123059:	74 17                	je     f0123072 <test_kheap_phys_addr+0x2e9>
f012305b:	83 ec 04             	sub    $0x4,%esp
f012305e:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0123063:	68 14 08 00 00       	push   $0x814
f0123068:	68 56 a5 13 f0       	push   $0xf013a556
f012306d:	e8 34 d1 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123072:	e8 3b 90 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123077:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012307a:	e8 0d 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012307f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123082:	83 ec 0c             	sub    $0xc,%esp
f0123085:	68 00 08 00 00       	push   $0x800
f012308a:	e8 93 43 fe ff       	call   f0107422 <kmalloc>
f012308f:	83 c4 10             	add    $0x10,%esp
f0123092:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123098:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012309e:	89 c1                	mov    %eax,%ecx
f01230a0:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01230a7:	10 00 00 
f01230aa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01230b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01230b5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01230bb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01230c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01230c6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01230cc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01230d2:	29 d0                	sub    %edx,%eax
f01230d4:	89 c3                	mov    %eax,%ebx
f01230d6:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01230dd:	10 00 00 
f01230e0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01230e5:	0f b6 d0             	movzbl %al,%edx
f01230e8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01230ee:	01 d0                	add    %edx,%eax
f01230f0:	48                   	dec    %eax
f01230f1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01230f7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01230fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0123102:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123108:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012310e:	29 d0                	sub    %edx,%eax
f0123110:	01 c3                	add    %eax,%ebx
f0123112:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123119:	10 00 00 
f012311c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123121:	0f b6 c0             	movzbl %al,%eax
f0123124:	c1 e0 04             	shl    $0x4,%eax
f0123127:	89 c2                	mov    %eax,%edx
f0123129:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012312f:	01 d0                	add    %edx,%eax
f0123131:	48                   	dec    %eax
f0123132:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123138:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012313e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123143:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123149:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012314f:	29 d0                	sub    %edx,%eax
f0123151:	01 d8                	add    %ebx,%eax
f0123153:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123158:	39 c1                	cmp    %eax,%ecx
f012315a:	74 17                	je     f0123173 <test_kheap_phys_addr+0x3ea>
f012315c:	83 ec 04             	sub    $0x4,%esp
f012315f:	68 3c a6 13 f0       	push   $0xf013a63c
f0123164:	68 1a 08 00 00       	push   $0x81a
f0123169:	68 56 a5 13 f0       	push   $0xf013a556
f012316e:	e8 33 d0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123173:	e8 14 0b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123178:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012317b:	74 17                	je     f0123194 <test_kheap_phys_addr+0x40b>
f012317d:	83 ec 04             	sub    $0x4,%esp
f0123180:	68 70 a5 13 f0       	push   $0xf013a570
f0123185:	68 1b 08 00 00       	push   $0x81b
f012318a:	68 56 a5 13 f0       	push   $0xf013a556
f012318f:	e8 12 d0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123194:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123197:	e8 16 8f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012319c:	29 c3                	sub    %eax,%ebx
f012319e:	89 d8                	mov    %ebx,%eax
f01231a0:	83 f8 01             	cmp    $0x1,%eax
f01231a3:	74 17                	je     f01231bc <test_kheap_phys_addr+0x433>
f01231a5:	83 ec 04             	sub    $0x4,%esp
f01231a8:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01231ad:	68 1c 08 00 00       	push   $0x81c
f01231b2:	68 56 a5 13 f0       	push   $0xf013a556
f01231b7:	e8 ea cf fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01231bc:	e8 f1 8e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01231c1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01231c4:	e8 c3 0a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01231c9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01231cc:	83 ec 0c             	sub    $0xc,%esp
f01231cf:	68 00 08 00 00       	push   $0x800
f01231d4:	e8 49 42 fe ff       	call   f0107422 <kmalloc>
f01231d9:	83 c4 10             	add    $0x10,%esp
f01231dc:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01231e2:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01231e8:	89 c1                	mov    %eax,%ecx
f01231ea:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01231f1:	10 00 00 
f01231f4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01231fa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01231ff:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123205:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012320b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123210:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123216:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012321c:	29 d0                	sub    %edx,%eax
f012321e:	89 c3                	mov    %eax,%ebx
f0123220:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123227:	10 00 00 
f012322a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012322f:	0f b6 d0             	movzbl %al,%edx
f0123232:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123238:	01 d0                	add    %edx,%eax
f012323a:	48                   	dec    %eax
f012323b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0123241:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123247:	ba 00 00 00 00       	mov    $0x0,%edx
f012324c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123252:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123258:	29 d0                	sub    %edx,%eax
f012325a:	01 c3                	add    %eax,%ebx
f012325c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123263:	10 00 00 
f0123266:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012326b:	0f b6 c0             	movzbl %al,%eax
f012326e:	c1 e0 04             	shl    $0x4,%eax
f0123271:	89 c2                	mov    %eax,%edx
f0123273:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123279:	01 d0                	add    %edx,%eax
f012327b:	48                   	dec    %eax
f012327c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0123282:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123288:	ba 00 00 00 00       	mov    $0x0,%edx
f012328d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0123293:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123299:	29 d0                	sub    %edx,%eax
f012329b:	01 d8                	add    %ebx,%eax
f012329d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01232a2:	39 c1                	cmp    %eax,%ecx
f01232a4:	74 17                	je     f01232bd <test_kheap_phys_addr+0x534>
f01232a6:	83 ec 04             	sub    $0x4,%esp
f01232a9:	68 3c a6 13 f0       	push   $0xf013a63c
f01232ae:	68 22 08 00 00       	push   $0x822
f01232b3:	68 56 a5 13 f0       	push   $0xf013a556
f01232b8:	e8 e9 ce fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232bd:	e8 ca 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01232c2:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01232c5:	74 17                	je     f01232de <test_kheap_phys_addr+0x555>
f01232c7:	83 ec 04             	sub    $0x4,%esp
f01232ca:	68 70 a5 13 f0       	push   $0xf013a570
f01232cf:	68 23 08 00 00       	push   $0x823
f01232d4:	68 56 a5 13 f0       	push   $0xf013a556
f01232d9:	e8 c8 ce fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01232de:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01232e1:	e8 cc 8d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01232e6:	29 c3                	sub    %eax,%ebx
f01232e8:	89 d8                	mov    %ebx,%eax
f01232ea:	83 f8 01             	cmp    $0x1,%eax
f01232ed:	74 17                	je     f0123306 <test_kheap_phys_addr+0x57d>
f01232ef:	83 ec 04             	sub    $0x4,%esp
f01232f2:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01232f7:	68 24 08 00 00       	push   $0x824
f01232fc:	68 56 a5 13 f0       	push   $0xf013a556
f0123301:	e8 a0 ce fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123306:	e8 a7 8d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012330b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012330e:	e8 79 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123313:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123316:	83 ec 0c             	sub    $0xc,%esp
f0123319:	68 00 1c 00 00       	push   $0x1c00
f012331e:	e8 ff 40 fe ff       	call   f0107422 <kmalloc>
f0123323:	83 c4 10             	add    $0x10,%esp
f0123326:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012332c:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0123332:	89 c1                	mov    %eax,%ecx
f0123334:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012333b:	10 00 00 
f012333e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123344:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123349:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012334f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123355:	ba 00 00 00 00       	mov    $0x0,%edx
f012335a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123360:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123366:	29 d0                	sub    %edx,%eax
f0123368:	89 c3                	mov    %eax,%ebx
f012336a:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123371:	10 00 00 
f0123374:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123379:	0f b6 d0             	movzbl %al,%edx
f012337c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0123382:	01 d0                	add    %edx,%eax
f0123384:	48                   	dec    %eax
f0123385:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012338b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123391:	ba 00 00 00 00       	mov    $0x0,%edx
f0123396:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012339c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01233a2:	29 d0                	sub    %edx,%eax
f01233a4:	01 c3                	add    %eax,%ebx
f01233a6:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01233ad:	10 00 00 
f01233b0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01233b5:	0f b6 c0             	movzbl %al,%eax
f01233b8:	c1 e0 04             	shl    $0x4,%eax
f01233bb:	89 c2                	mov    %eax,%edx
f01233bd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01233c3:	01 d0                	add    %edx,%eax
f01233c5:	48                   	dec    %eax
f01233c6:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01233cc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01233d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01233d7:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01233dd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01233e3:	29 d0                	sub    %edx,%eax
f01233e5:	01 d8                	add    %ebx,%eax
f01233e7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01233ec:	39 c1                	cmp    %eax,%ecx
f01233ee:	74 17                	je     f0123407 <test_kheap_phys_addr+0x67e>
f01233f0:	83 ec 04             	sub    $0x4,%esp
f01233f3:	68 3c a6 13 f0       	push   $0xf013a63c
f01233f8:	68 2a 08 00 00       	push   $0x82a
f01233fd:	68 56 a5 13 f0       	push   $0xf013a556
f0123402:	e8 9f cd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123407:	e8 80 08 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012340c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012340f:	74 17                	je     f0123428 <test_kheap_phys_addr+0x69f>
f0123411:	83 ec 04             	sub    $0x4,%esp
f0123414:	68 70 a5 13 f0       	push   $0xf013a570
f0123419:	68 2b 08 00 00       	push   $0x82b
f012341e:	68 56 a5 13 f0       	push   $0xf013a556
f0123423:	e8 7e cd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123428:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012342b:	e8 82 8c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123430:	29 c3                	sub    %eax,%ebx
f0123432:	89 d8                	mov    %ebx,%eax
f0123434:	83 f8 02             	cmp    $0x2,%eax
f0123437:	74 17                	je     f0123450 <test_kheap_phys_addr+0x6c7>
f0123439:	83 ec 04             	sub    $0x4,%esp
f012343c:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0123441:	68 2c 08 00 00       	push   $0x82c
f0123446:	68 56 a5 13 f0       	push   $0xf013a556
f012344b:	e8 56 cd fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123450:	e8 5d 8c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123455:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123458:	e8 2f 08 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012345d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123460:	83 ec 0c             	sub    $0xc,%esp
f0123463:	68 00 fc 2f 00       	push   $0x2ffc00
f0123468:	e8 b5 3f fe ff       	call   f0107422 <kmalloc>
f012346d:	83 c4 10             	add    $0x10,%esp
f0123470:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123476:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f012347c:	89 c1                	mov    %eax,%ecx
f012347e:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123485:	10 00 00 
f0123488:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012348e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123493:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123499:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012349f:	ba 00 00 00 00       	mov    $0x0,%edx
f01234a4:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01234aa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01234b0:	29 d0                	sub    %edx,%eax
f01234b2:	89 c3                	mov    %eax,%ebx
f01234b4:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01234bb:	10 00 00 
f01234be:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01234c3:	0f b6 d0             	movzbl %al,%edx
f01234c6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01234cc:	01 d0                	add    %edx,%eax
f01234ce:	48                   	dec    %eax
f01234cf:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01234d5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01234db:	ba 00 00 00 00       	mov    $0x0,%edx
f01234e0:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01234e6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01234ec:	29 d0                	sub    %edx,%eax
f01234ee:	01 c3                	add    %eax,%ebx
f01234f0:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01234f7:	10 00 00 
f01234fa:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01234ff:	0f b6 c0             	movzbl %al,%eax
f0123502:	c1 e0 04             	shl    $0x4,%eax
f0123505:	89 c2                	mov    %eax,%edx
f0123507:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012350d:	01 d0                	add    %edx,%eax
f012350f:	48                   	dec    %eax
f0123510:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123516:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012351c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123521:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123527:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012352d:	29 d0                	sub    %edx,%eax
f012352f:	01 d8                	add    %ebx,%eax
f0123531:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123536:	39 c1                	cmp    %eax,%ecx
f0123538:	74 17                	je     f0123551 <test_kheap_phys_addr+0x7c8>
f012353a:	83 ec 04             	sub    $0x4,%esp
f012353d:	68 3c a6 13 f0       	push   $0xf013a63c
f0123542:	68 32 08 00 00       	push   $0x832
f0123547:	68 56 a5 13 f0       	push   $0xf013a556
f012354c:	e8 55 cc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123551:	e8 36 07 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123556:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123559:	74 17                	je     f0123572 <test_kheap_phys_addr+0x7e9>
f012355b:	83 ec 04             	sub    $0x4,%esp
f012355e:	68 70 a5 13 f0       	push   $0xf013a570
f0123563:	68 33 08 00 00       	push   $0x833
f0123568:	68 56 a5 13 f0       	push   $0xf013a556
f012356d:	e8 34 cc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123572:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123575:	e8 38 8b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012357a:	29 c3                	sub    %eax,%ebx
f012357c:	89 d8                	mov    %ebx,%eax
f012357e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123583:	74 17                	je     f012359c <test_kheap_phys_addr+0x813>
f0123585:	83 ec 04             	sub    $0x4,%esp
f0123588:	68 d8 a5 13 f0       	push   $0xf013a5d8
f012358d:	68 34 08 00 00       	push   $0x834
f0123592:	68 56 a5 13 f0       	push   $0xf013a556
f0123597:	e8 0a cc fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012359c:	e8 11 8b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01235a1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01235a4:	e8 e3 06 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01235a9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01235ac:	83 ec 0c             	sub    $0xc,%esp
f01235af:	68 00 fc 5f 00       	push   $0x5ffc00
f01235b4:	e8 69 3e fe ff       	call   f0107422 <kmalloc>
f01235b9:	83 c4 10             	add    $0x10,%esp
f01235bc:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01235c2:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01235c8:	89 c1                	mov    %eax,%ecx
f01235ca:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01235d1:	10 00 00 
f01235d4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01235da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01235df:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01235e5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01235eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01235f0:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01235f6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01235fc:	29 d0                	sub    %edx,%eax
f01235fe:	89 c3                	mov    %eax,%ebx
f0123600:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0123607:	10 00 00 
f012360a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012360f:	0f b6 d0             	movzbl %al,%edx
f0123612:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123618:	01 d0                	add    %edx,%eax
f012361a:	48                   	dec    %eax
f012361b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0123621:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123627:	ba 00 00 00 00       	mov    $0x0,%edx
f012362c:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0123632:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123638:	29 d0                	sub    %edx,%eax
f012363a:	01 c3                	add    %eax,%ebx
f012363c:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0123643:	10 00 00 
f0123646:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012364b:	0f b6 c0             	movzbl %al,%eax
f012364e:	c1 e0 04             	shl    $0x4,%eax
f0123651:	89 c2                	mov    %eax,%edx
f0123653:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123659:	01 d0                	add    %edx,%eax
f012365b:	48                   	dec    %eax
f012365c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0123662:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123668:	ba 00 00 00 00       	mov    $0x0,%edx
f012366d:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0123673:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123679:	29 d0                	sub    %edx,%eax
f012367b:	01 d8                	add    %ebx,%eax
f012367d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123682:	39 c1                	cmp    %eax,%ecx
f0123684:	74 17                	je     f012369d <test_kheap_phys_addr+0x914>
f0123686:	83 ec 04             	sub    $0x4,%esp
f0123689:	68 3c a6 13 f0       	push   $0xf013a63c
f012368e:	68 3a 08 00 00       	push   $0x83a
f0123693:	68 56 a5 13 f0       	push   $0xf013a556
f0123698:	e8 09 cb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012369d:	e8 ea 05 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01236a2:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01236a5:	74 17                	je     f01236be <test_kheap_phys_addr+0x935>
f01236a7:	83 ec 04             	sub    $0x4,%esp
f01236aa:	68 70 a5 13 f0       	push   $0xf013a570
f01236af:	68 3b 08 00 00       	push   $0x83b
f01236b4:	68 56 a5 13 f0       	push   $0xf013a556
f01236b9:	e8 e8 ca fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01236be:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01236c1:	e8 ec 89 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01236c6:	29 c3                	sub    %eax,%ebx
f01236c8:	89 d8                	mov    %ebx,%eax
f01236ca:	3d 00 06 00 00       	cmp    $0x600,%eax
f01236cf:	74 17                	je     f01236e8 <test_kheap_phys_addr+0x95f>
f01236d1:	83 ec 04             	sub    $0x4,%esp
f01236d4:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01236d9:	68 3c 08 00 00       	push   $0x83c
f01236de:	68 56 a5 13 f0       	push   $0xf013a556
f01236e3:	e8 be ca fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01236e8:	e8 c5 89 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01236ed:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236f0:	e8 97 05 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01236f5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01236f8:	83 ec 0c             	sub    $0xc,%esp
f01236fb:	68 00 38 00 00       	push   $0x3800
f0123700:	e8 1d 3d fe ff       	call   f0107422 <kmalloc>
f0123705:	83 c4 10             	add    $0x10,%esp
f0123708:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012370e:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0123714:	89 c1                	mov    %eax,%ecx
f0123716:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012371d:	10 00 00 
f0123720:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123726:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012372b:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0123731:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123737:	ba 00 00 00 00       	mov    $0x0,%edx
f012373c:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123742:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123748:	29 d0                	sub    %edx,%eax
f012374a:	89 c3                	mov    %eax,%ebx
f012374c:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123753:	10 00 00 
f0123756:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012375b:	0f b6 d0             	movzbl %al,%edx
f012375e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123764:	01 d0                	add    %edx,%eax
f0123766:	48                   	dec    %eax
f0123767:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012376d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123773:	ba 00 00 00 00       	mov    $0x0,%edx
f0123778:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012377e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123784:	29 d0                	sub    %edx,%eax
f0123786:	01 c3                	add    %eax,%ebx
f0123788:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012378f:	10 00 00 
f0123792:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123797:	0f b6 c0             	movzbl %al,%eax
f012379a:	c1 e0 04             	shl    $0x4,%eax
f012379d:	89 c2                	mov    %eax,%edx
f012379f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01237a5:	01 d0                	add    %edx,%eax
f01237a7:	48                   	dec    %eax
f01237a8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01237ae:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01237b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01237b9:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01237bf:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01237c5:	29 d0                	sub    %edx,%eax
f01237c7:	01 d8                	add    %ebx,%eax
f01237c9:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01237ce:	39 c1                	cmp    %eax,%ecx
f01237d0:	74 17                	je     f01237e9 <test_kheap_phys_addr+0xa60>
f01237d2:	83 ec 04             	sub    $0x4,%esp
f01237d5:	68 3c a6 13 f0       	push   $0xf013a63c
f01237da:	68 42 08 00 00       	push   $0x842
f01237df:	68 56 a5 13 f0       	push   $0xf013a556
f01237e4:	e8 bd c9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237e9:	e8 9e 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01237ee:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01237f1:	74 17                	je     f012380a <test_kheap_phys_addr+0xa81>
f01237f3:	83 ec 04             	sub    $0x4,%esp
f01237f6:	68 70 a5 13 f0       	push   $0xf013a570
f01237fb:	68 43 08 00 00       	push   $0x843
f0123800:	68 56 a5 13 f0       	push   $0xf013a556
f0123805:	e8 9c c9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012380a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012380d:	e8 a0 88 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123812:	29 c3                	sub    %eax,%ebx
f0123814:	89 d8                	mov    %ebx,%eax
f0123816:	83 f8 04             	cmp    $0x4,%eax
f0123819:	74 17                	je     f0123832 <test_kheap_phys_addr+0xaa9>
f012381b:	83 ec 04             	sub    $0x4,%esp
f012381e:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0123823:	68 44 08 00 00       	push   $0x844
f0123828:	68 56 a5 13 f0       	push   $0xf013a556
f012382d:	e8 74 c9 fd ff       	call   f01001a6 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123832:	89 e0                	mov    %esp,%eax
f0123834:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123836:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012383d:	10 00 00 
f0123840:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123846:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012384b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123851:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123857:	ba 00 00 00 00       	mov    $0x0,%edx
f012385c:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123862:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123868:	29 d0                	sub    %edx,%eax
f012386a:	89 c1                	mov    %eax,%ecx
f012386c:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0123873:	10 00 00 
f0123876:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012387b:	0f b6 d0             	movzbl %al,%edx
f012387e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123884:	01 d0                	add    %edx,%eax
f0123886:	48                   	dec    %eax
f0123887:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012388d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123893:	ba 00 00 00 00       	mov    $0x0,%edx
f0123898:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012389e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01238a4:	29 d0                	sub    %edx,%eax
f01238a6:	01 c1                	add    %eax,%ecx
f01238a8:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f01238af:	10 00 00 
f01238b2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01238b7:	0f b6 c0             	movzbl %al,%eax
f01238ba:	c1 e0 04             	shl    $0x4,%eax
f01238bd:	89 c2                	mov    %eax,%edx
f01238bf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01238c5:	01 d0                	add    %edx,%eax
f01238c7:	48                   	dec    %eax
f01238c8:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f01238ce:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01238d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01238d9:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f01238df:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01238e5:	29 d0                	sub    %edx,%eax
f01238e7:	01 c8                	add    %ecx,%eax
f01238e9:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01238ee:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01238f4:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01238fb:	10 00 00 
f01238fe:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123904:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123909:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012390f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123915:	ba 00 00 00 00       	mov    $0x0,%edx
f012391a:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123920:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123926:	29 d0                	sub    %edx,%eax
f0123928:	89 c1                	mov    %eax,%ecx
f012392a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123931:	10 00 00 
f0123934:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123939:	0f b6 d0             	movzbl %al,%edx
f012393c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123942:	01 d0                	add    %edx,%eax
f0123944:	48                   	dec    %eax
f0123945:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012394b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123951:	ba 00 00 00 00       	mov    $0x0,%edx
f0123956:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012395c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123962:	29 d0                	sub    %edx,%eax
f0123964:	01 c1                	add    %eax,%ecx
f0123966:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012396d:	10 00 00 
f0123970:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123975:	0f b6 c0             	movzbl %al,%eax
f0123978:	c1 e0 04             	shl    $0x4,%eax
f012397b:	89 c2                	mov    %eax,%edx
f012397d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123983:	01 d0                	add    %edx,%eax
f0123985:	48                   	dec    %eax
f0123986:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012398c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123992:	ba 00 00 00 00       	mov    $0x0,%edx
f0123997:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012399d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01239a3:	29 d0                	sub    %edx,%eax
f01239a5:	01 c8                	add    %ecx,%eax
f01239a7:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01239ac:	c1 e8 0c             	shr    $0xc,%eax
f01239af:	89 c2                	mov    %eax,%edx
f01239b1:	4a                   	dec    %edx
f01239b2:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f01239b8:	c1 e0 02             	shl    $0x2,%eax
f01239bb:	8d 50 03             	lea    0x3(%eax),%edx
f01239be:	b8 10 00 00 00       	mov    $0x10,%eax
f01239c3:	48                   	dec    %eax
f01239c4:	01 d0                	add    %edx,%eax
f01239c6:	bf 10 00 00 00       	mov    $0x10,%edi
f01239cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01239d0:	f7 f7                	div    %edi
f01239d2:	6b c0 10             	imul   $0x10,%eax,%eax
f01239d5:	29 c4                	sub    %eax,%esp
f01239d7:	89 e0                	mov    %esp,%eax
f01239d9:	83 c0 03             	add    $0x3,%eax
f01239dc:	c1 e8 02             	shr    $0x2,%eax
f01239df:	c1 e0 02             	shl    $0x2,%eax
f01239e2:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f01239e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01239ef:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01239f6:	10 00 00 
f01239f9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01239ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a04:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0123a0a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123a10:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a15:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0123a1b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123a21:	29 d0                	sub    %edx,%eax
f0123a23:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123a28:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123a2b:	eb 29                	jmp    f0123a56 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123a2d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123a30:	8d 43 01             	lea    0x1(%ebx),%eax
f0123a33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123a36:	83 ec 0c             	sub    $0xc,%esp
f0123a39:	ff 75 e0             	pushl  -0x20(%ebp)
f0123a3c:	e8 41 3a fe ff       	call   f0107482 <kheap_physical_address>
f0123a41:	83 c4 10             	add    $0x10,%esp
f0123a44:	89 c2                	mov    %eax,%edx
f0123a46:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123a4c:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123a4f:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123a56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123a59:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0123a5f:	72 cc                	jb     f0123a2d <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123a61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123a64:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0123a6a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123a71:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0123a78:	10 00 00 
f0123a7b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0123a81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a86:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0123a8c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0123a92:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a97:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0123a9d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0123aa3:	29 d0                	sub    %edx,%eax
f0123aa5:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123aaa:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123aad:	e9 ab 00 00 00       	jmp    f0123b5d <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123ab2:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0123ab7:	83 ec 04             	sub    $0x4,%esp
f0123aba:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0123ac0:	52                   	push   %edx
f0123ac1:	ff 75 e0             	pushl  -0x20(%ebp)
f0123ac4:	50                   	push   %eax
f0123ac5:	e8 9f 2e fe ff       	call   f0106969 <get_page_table>
f0123aca:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123acd:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0123ad3:	85 c0                	test   %eax,%eax
f0123ad5:	75 17                	jne    f0123aee <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123ad7:	83 ec 04             	sub    $0x4,%esp
f0123ada:	68 f8 ae 13 f0       	push   $0xf013aef8
f0123adf:	68 59 08 00 00       	push   $0x859
f0123ae4:	68 56 a5 13 f0       	push   $0xf013a556
f0123ae9:	e8 b8 c6 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123aee:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123af1:	c1 e8 0c             	shr    $0xc,%eax
f0123af4:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123af9:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123afc:	eb 4b                	jmp    f0123b49 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123afe:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0123b04:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0123b07:	c1 e2 02             	shl    $0x2,%edx
f0123b0a:	01 d0                	add    %edx,%eax
f0123b0c:	8b 00                	mov    (%eax),%eax
f0123b0e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123b13:	89 c1                	mov    %eax,%ecx
f0123b15:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123b1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123b1e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123b21:	39 c1                	cmp    %eax,%ecx
f0123b23:	74 17                	je     f0123b3c <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123b25:	83 ec 04             	sub    $0x4,%esp
f0123b28:	68 51 af 13 f0       	push   $0xf013af51
f0123b2d:	68 60 08 00 00       	push   $0x860
f0123b32:	68 56 a5 13 f0       	push   $0xf013a556
f0123b37:	e8 6a c6 fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f0123b3c:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123b43:	ff 45 dc             	incl   -0x24(%ebp)
f0123b46:	ff 45 e4             	incl   -0x1c(%ebp)
f0123b49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123b4c:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123b52:	7d 09                	jge    f0123b5d <test_kheap_phys_addr+0xdd4>
f0123b54:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0123b5b:	7e a1                	jle    f0123afe <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123b5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123b60:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0123b66:	0f 82 46 ff ff ff    	jb     f0123ab2 <test_kheap_phys_addr+0xd29>
f0123b6c:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123b6e:	83 ec 0c             	sub    $0xc,%esp
f0123b71:	68 70 af 13 f0       	push   $0xf013af70
f0123b76:	e8 b2 d0 fd ff       	call   f0100c2d <cprintf>
f0123b7b:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123b7e:	e8 2f 85 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123b83:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0123b89:	e8 fe 00 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123b8e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0123b94:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123b9a:	83 ec 0c             	sub    $0xc,%esp
f0123b9d:	50                   	push   %eax
f0123b9e:	e8 99 38 fe ff       	call   f010743c <kfree>
f0123ba3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ba6:	e8 e1 00 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123bab:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123bb1:	74 17                	je     f0123bca <test_kheap_phys_addr+0xe41>
f0123bb3:	83 ec 04             	sub    $0x4,%esp
f0123bb6:	68 70 a5 13 f0       	push   $0xf013a570
f0123bbb:	68 6e 08 00 00       	push   $0x86e
f0123bc0:	68 56 a5 13 f0       	push   $0xf013a556
f0123bc5:	e8 dc c5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123bca:	e8 e3 84 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123bcf:	89 c2                	mov    %eax,%edx
f0123bd1:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123bd7:	29 c2                	sub    %eax,%edx
f0123bd9:	89 d0                	mov    %edx,%eax
f0123bdb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123be0:	74 17                	je     f0123bf9 <test_kheap_phys_addr+0xe70>
f0123be2:	83 ec 04             	sub    $0x4,%esp
f0123be5:	68 e0 ac 13 f0       	push   $0xf013ace0
f0123bea:	68 6f 08 00 00       	push   $0x86f
f0123bef:	68 56 a5 13 f0       	push   $0xf013a556
f0123bf4:	e8 ad c5 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123bf9:	e8 b4 84 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123bfe:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c04:	e8 83 00 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123c09:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0123c0f:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123c15:	83 ec 0c             	sub    $0xc,%esp
f0123c18:	50                   	push   %eax
f0123c19:	e8 1e 38 fe ff       	call   f010743c <kfree>
f0123c1e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c21:	e8 66 00 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123c26:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123c2c:	74 17                	je     f0123c45 <test_kheap_phys_addr+0xebc>
f0123c2e:	83 ec 04             	sub    $0x4,%esp
f0123c31:	68 70 a5 13 f0       	push   $0xf013a570
f0123c36:	68 75 08 00 00       	push   $0x875
f0123c3b:	68 56 a5 13 f0       	push   $0xf013a556
f0123c40:	e8 61 c5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c45:	e8 68 84 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123c4a:	89 c2                	mov    %eax,%edx
f0123c4c:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123c52:	29 c2                	sub    %eax,%edx
f0123c54:	89 d0                	mov    %edx,%eax
f0123c56:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123c5b:	74 17                	je     f0123c74 <test_kheap_phys_addr+0xeeb>
f0123c5d:	83 ec 04             	sub    $0x4,%esp
f0123c60:	68 e0 ac 13 f0       	push   $0xf013ace0
f0123c65:	68 76 08 00 00       	push   $0x876
f0123c6a:	68 56 a5 13 f0       	push   $0xf013a556
f0123c6f:	e8 32 c5 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123c74:	e8 39 84 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123c79:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c7f:	e8 08 00 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123c84:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0123c8a:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123c90:	83 ec 0c             	sub    $0xc,%esp
f0123c93:	50                   	push   %eax
f0123c94:	e8 a3 37 fe ff       	call   f010743c <kfree>
f0123c99:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c9c:	e8 eb ff fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123ca1:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123ca7:	74 17                	je     f0123cc0 <test_kheap_phys_addr+0xf37>
f0123ca9:	83 ec 04             	sub    $0x4,%esp
f0123cac:	68 70 a5 13 f0       	push   $0xf013a570
f0123cb1:	68 7c 08 00 00       	push   $0x87c
f0123cb6:	68 56 a5 13 f0       	push   $0xf013a556
f0123cbb:	e8 e6 c4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123cc0:	e8 ed 83 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0123cc5:	89 c2                	mov    %eax,%edx
f0123cc7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123ccd:	29 c2                	sub    %eax,%edx
f0123ccf:	89 d0                	mov    %edx,%eax
f0123cd1:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123cd6:	74 17                	je     f0123cef <test_kheap_phys_addr+0xf66>
f0123cd8:	83 ec 04             	sub    $0x4,%esp
f0123cdb:	68 e0 ac 13 f0       	push   $0xf013ace0
f0123ce0:	68 7d 08 00 00       	push   $0x87d
f0123ce5:	68 56 a5 13 f0       	push   $0xf013a556
f0123cea:	e8 b7 c4 fd ff       	call   f01001a6 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123cef:	89 e0                	mov    %esp,%eax
f0123cf1:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123cf3:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0123cfa:	10 00 00 
f0123cfd:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0123d03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123d08:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0123d0e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0123d14:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d19:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0123d1f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0123d25:	29 d0                	sub    %edx,%eax
f0123d27:	89 c1                	mov    %eax,%ecx
f0123d29:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0123d30:	10 00 00 
f0123d33:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123d38:	0f b6 d0             	movzbl %al,%edx
f0123d3b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0123d41:	01 d0                	add    %edx,%eax
f0123d43:	48                   	dec    %eax
f0123d44:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0123d4a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0123d50:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d55:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0123d5b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0123d61:	29 d0                	sub    %edx,%eax
f0123d63:	01 c1                	add    %eax,%ecx
f0123d65:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0123d6c:	10 00 00 
f0123d6f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123d74:	0f b6 c0             	movzbl %al,%eax
f0123d77:	c1 e0 04             	shl    $0x4,%eax
f0123d7a:	89 c2                	mov    %eax,%edx
f0123d7c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0123d82:	01 d0                	add    %edx,%eax
f0123d84:	48                   	dec    %eax
f0123d85:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0123d8b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123d91:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d96:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0123d9c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123da2:	29 d0                	sub    %edx,%eax
f0123da4:	01 c8                	add    %ecx,%eax
f0123da6:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123dab:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123db1:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0123db8:	10 00 00 
f0123dbb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0123dc1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123dc6:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0123dcc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0123dd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0123dd7:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0123ddd:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0123de3:	29 d0                	sub    %edx,%eax
f0123de5:	89 c1                	mov    %eax,%ecx
f0123de7:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0123dee:	10 00 00 
f0123df1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123df6:	0f b6 d0             	movzbl %al,%edx
f0123df9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0123dff:	01 d0                	add    %edx,%eax
f0123e01:	48                   	dec    %eax
f0123e02:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0123e08:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0123e0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e13:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0123e19:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0123e1f:	29 d0                	sub    %edx,%eax
f0123e21:	01 c1                	add    %eax,%ecx
f0123e23:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0123e2a:	10 00 00 
f0123e2d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123e32:	0f b6 c0             	movzbl %al,%eax
f0123e35:	c1 e0 04             	shl    $0x4,%eax
f0123e38:	89 c2                	mov    %eax,%edx
f0123e3a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0123e40:	01 d0                	add    %edx,%eax
f0123e42:	48                   	dec    %eax
f0123e43:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0123e49:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0123e4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e54:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0123e5a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0123e60:	29 d0                	sub    %edx,%eax
f0123e62:	01 c8                	add    %ecx,%eax
f0123e64:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123e69:	c1 e8 0c             	shr    $0xc,%eax
f0123e6c:	89 c2                	mov    %eax,%edx
f0123e6e:	4a                   	dec    %edx
f0123e6f:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0123e75:	c1 e0 02             	shl    $0x2,%eax
f0123e78:	8d 50 03             	lea    0x3(%eax),%edx
f0123e7b:	b8 10 00 00 00       	mov    $0x10,%eax
f0123e80:	48                   	dec    %eax
f0123e81:	01 d0                	add    %edx,%eax
f0123e83:	bf 10 00 00 00       	mov    $0x10,%edi
f0123e88:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e8d:	f7 f7                	div    %edi
f0123e8f:	6b c0 10             	imul   $0x10,%eax,%eax
f0123e92:	29 c4                	sub    %eax,%esp
f0123e94:	89 e0                	mov    %esp,%eax
f0123e96:	83 c0 03             	add    $0x3,%eax
f0123e99:	c1 e8 02             	shr    $0x2,%eax
f0123e9c:	c1 e0 02             	shl    $0x2,%eax
f0123e9f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0123ea5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123eac:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0123eb3:	10 00 00 
f0123eb6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0123ebc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ec1:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0123ec7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0123ecd:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ed2:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0123ed8:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0123ede:	29 d0                	sub    %edx,%eax
f0123ee0:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123ee5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0123ee8:	eb 29                	jmp    f0123f13 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123eea:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123eed:	8d 43 01             	lea    0x1(%ebx),%eax
f0123ef0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123ef3:	83 ec 0c             	sub    $0xc,%esp
f0123ef6:	ff 75 d8             	pushl  -0x28(%ebp)
f0123ef9:	e8 84 35 fe ff       	call   f0107482 <kheap_physical_address>
f0123efe:	83 c4 10             	add    $0x10,%esp
f0123f01:	89 c2                	mov    %eax,%edx
f0123f03:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0123f09:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123f0c:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0123f13:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123f16:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0123f1c:	72 cc                	jb     f0123eea <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123f1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123f21:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0123f27:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123f2e:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0123f35:	10 00 00 
f0123f38:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0123f3e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123f43:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0123f49:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0123f4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f54:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0123f5a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0123f60:	29 d0                	sub    %edx,%eax
f0123f62:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123f67:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0123f6a:	e9 ab 00 00 00       	jmp    f012401a <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123f6f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0123f74:	83 ec 04             	sub    $0x4,%esp
f0123f77:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0123f7d:	52                   	push   %edx
f0123f7e:	ff 75 d8             	pushl  -0x28(%ebp)
f0123f81:	50                   	push   %eax
f0123f82:	e8 e2 29 fe ff       	call   f0106969 <get_page_table>
f0123f87:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123f8a:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0123f90:	85 c0                	test   %eax,%eax
f0123f92:	75 17                	jne    f0123fab <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123f94:	83 ec 04             	sub    $0x4,%esp
f0123f97:	68 f8 ae 13 f0       	push   $0xf013aef8
f0123f9c:	68 93 08 00 00       	push   $0x893
f0123fa1:	68 56 a5 13 f0       	push   $0xf013a556
f0123fa6:	e8 fb c1 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123fab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123fae:	c1 e8 0c             	shr    $0xc,%eax
f0123fb1:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123fb6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123fb9:	eb 4b                	jmp    f0124006 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123fbb:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0123fc1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123fc4:	c1 e2 02             	shl    $0x2,%edx
f0123fc7:	01 d0                	add    %edx,%eax
f0123fc9:	8b 00                	mov    (%eax),%eax
f0123fcb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123fd0:	89 c1                	mov    %eax,%ecx
f0123fd2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0123fd8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123fdb:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123fde:	39 c1                	cmp    %eax,%ecx
f0123fe0:	74 17                	je     f0123ff9 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123fe2:	83 ec 04             	sub    $0x4,%esp
f0123fe5:	68 51 af 13 f0       	push   $0xf013af51
f0123fea:	68 9a 08 00 00       	push   $0x89a
f0123fef:	68 56 a5 13 f0       	push   $0xf013a556
f0123ff4:	e8 ad c1 fd ff       	call   f01001a6 <_panic>
				}
				va += PAGE_SIZE;
f0123ff9:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124000:	ff 45 d4             	incl   -0x2c(%ebp)
f0124003:	ff 45 e4             	incl   -0x1c(%ebp)
f0124006:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124009:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f012400f:	7d 09                	jge    f012401a <test_kheap_phys_addr+0x1291>
f0124011:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124018:	7e a1                	jle    f0123fbb <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012401a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012401d:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124023:	0f 82 46 ff ff ff    	jb     f0123f6f <test_kheap_phys_addr+0x11e6>
f0124029:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f012402b:	83 ec 0c             	sub    $0xc,%esp
f012402e:	68 e1 a6 13 f0       	push   $0xf013a6e1
f0124033:	e8 f5 cb fd ff       	call   f0100c2d <cprintf>
f0124038:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f012403b:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124042:	10 00 00 
f0124045:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012404b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124050:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124056:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012405c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124061:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124067:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012406d:	29 d0                	sub    %edx,%eax
f012406f:	89 c1                	mov    %eax,%ecx
f0124071:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124078:	10 00 00 
f012407b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124080:	0f b6 d0             	movzbl %al,%edx
f0124083:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124089:	01 d0                	add    %edx,%eax
f012408b:	48                   	dec    %eax
f012408c:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0124092:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124098:	ba 00 00 00 00       	mov    $0x0,%edx
f012409d:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01240a3:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01240a9:	29 d0                	sub    %edx,%eax
f01240ab:	01 c1                	add    %eax,%ecx
f01240ad:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f01240b4:	10 00 00 
f01240b7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01240bc:	0f b6 c0             	movzbl %al,%eax
f01240bf:	c1 e0 04             	shl    $0x4,%eax
f01240c2:	89 c2                	mov    %eax,%edx
f01240c4:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01240ca:	01 d0                	add    %edx,%eax
f01240cc:	48                   	dec    %eax
f01240cd:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f01240d3:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01240d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01240de:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f01240e4:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01240ea:	29 d0                	sub    %edx,%eax
f01240ec:	01 c8                	add    %ecx,%eax
f01240ee:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01240f3:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f01240f9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124100:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124106:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0124109:	eb 0a                	jmp    f0124115 <test_kheap_phys_addr+0x138c>
		{
			i++;
f012410b:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012410e:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0124115:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012411c:	76 ed                	jbe    f012410b <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f012411e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124121:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0124127:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f012412e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124134:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124137:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f012413e:	e9 cc 00 00 00       	jmp    f012420f <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124143:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0124146:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012414b:	83 ec 04             	sub    $0x4,%esp
f012414e:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124154:	51                   	push   %ecx
f0124155:	52                   	push   %edx
f0124156:	50                   	push   %eax
f0124157:	e8 0d 28 fe ff       	call   f0106969 <get_page_table>
f012415c:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012415f:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124165:	85 c0                	test   %eax,%eax
f0124167:	75 17                	jne    f0124180 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124169:	83 ec 04             	sub    $0x4,%esp
f012416c:	68 f8 ae 13 f0       	push   $0xf013aef8
f0124171:	68 b6 08 00 00       	push   $0x8b6
f0124176:	68 56 a5 13 f0       	push   $0xf013a556
f012417b:	e8 26 c0 fd ff       	call   f01001a6 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124180:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0124187:	eb 67                	jmp    f01241f0 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0124189:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012418c:	c1 e0 0c             	shl    $0xc,%eax
f012418f:	89 c2                	mov    %eax,%edx
f0124191:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124197:	01 d0                	add    %edx,%eax
f0124199:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f012419f:	83 ec 0c             	sub    $0xc,%esp
f01241a2:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01241a8:	e8 d5 32 fe ff       	call   f0107482 <kheap_physical_address>
f01241ad:	83 c4 10             	add    $0x10,%esp
f01241b0:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f01241b6:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01241bc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01241bf:	c1 e2 02             	shl    $0x2,%edx
f01241c2:	01 d0                	add    %edx,%eax
f01241c4:	8b 00                	mov    (%eax),%eax
f01241c6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01241cb:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f01241d1:	74 17                	je     f01241ea <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01241d3:	83 ec 04             	sub    $0x4,%esp
f01241d6:	68 51 af 13 f0       	push   $0xf013af51
f01241db:	68 c0 08 00 00       	push   $0x8c0
f01241e0:	68 56 a5 13 f0       	push   $0xf013a556
f01241e5:	e8 bc bf fd ff       	call   f01001a6 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01241ea:	ff 45 cc             	incl   -0x34(%ebp)
f01241ed:	ff 45 e4             	incl   -0x1c(%ebp)
f01241f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01241f3:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f01241f9:	7d 09                	jge    f0124204 <test_kheap_phys_addr+0x147b>
f01241fb:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0124202:	7e 85                	jle    f0124189 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124204:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f012420b:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f012420f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124213:	0f 88 2a ff ff ff    	js     f0124143 <test_kheap_phys_addr+0x13ba>
f0124219:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f012421d:	7f 0d                	jg     f012422c <test_kheap_phys_addr+0x14a3>
f012421f:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0124226:	0f 86 17 ff ff ff    	jbe    f0124143 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012422c:	83 ec 0c             	sub    $0xc,%esp
f012422f:	68 3a a7 13 f0       	push   $0xf013a73a
f0124234:	e8 f4 c9 fd ff       	call   f0100c2d <cprintf>
f0124239:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f012423c:	83 ec 0c             	sub    $0xc,%esp
f012423f:	68 a4 af 13 f0       	push   $0xf013afa4
f0124244:	e8 e4 c9 fd ff       	call   f0100c2d <cprintf>
f0124249:	83 c4 10             	add    $0x10,%esp

	return 1;
f012424c:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124251:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124254:	5b                   	pop    %ebx
f0124255:	5e                   	pop    %esi
f0124256:	5f                   	pop    %edi
f0124257:	5d                   	pop    %ebp
f0124258:	c3                   	ret    

f0124259 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0124259:	55                   	push   %ebp
f012425a:	89 e5                	mov    %esp,%ebp
f012425c:	57                   	push   %edi
f012425d:	56                   	push   %esi
f012425e:	53                   	push   %ebx
f012425f:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0124265:	89 e0                	mov    %esp,%eax
f0124267:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0124269:	83 ec 0c             	sub    $0xc,%esp
f012426c:	68 98 a4 13 f0       	push   $0xf013a498
f0124271:	e8 b7 c9 fd ff       	call   f0100c2d <cprintf>
f0124276:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0124279:	83 ec 0c             	sub    $0xc,%esp
f012427c:	68 c8 a4 13 f0       	push   $0xf013a4c8
f0124281:	e8 a7 c9 fd ff       	call   f0100c2d <cprintf>
f0124286:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0124289:	83 ec 0c             	sub    $0xc,%esp
f012428c:	68 98 a4 13 f0       	push   $0xf013a498
f0124291:	e8 97 c9 fd ff       	call   f0100c2d <cprintf>
f0124296:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0124299:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f012429d:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01242a1:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01242a7:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01242ad:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f01242b4:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01242bb:	e8 f2 7d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01242c0:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01242c3:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01242c9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01242ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01242d3:	89 d7                	mov    %edx,%edi
f01242d5:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01242d7:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f01242dd:	b9 14 00 00 00       	mov    $0x14,%ecx
f01242e2:	b8 00 00 00 00       	mov    $0x0,%eax
f01242e7:	89 d7                	mov    %edx,%edi
f01242e9:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01242eb:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f01242f1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01242f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01242fb:	89 d7                	mov    %edx,%edi
f01242fd:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01242ff:	e8 ae 7d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124304:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124307:	e8 80 f9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012430c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012430f:	83 ec 0c             	sub    $0xc,%esp
f0124312:	68 00 fc 1f 00       	push   $0x1ffc00
f0124317:	e8 06 31 fe ff       	call   f0107422 <kmalloc>
f012431c:	83 c4 10             	add    $0x10,%esp
f012431f:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124325:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012432b:	89 c1                	mov    %eax,%ecx
f012432d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124334:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124337:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012433c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012433f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124342:	ba 00 00 00 00       	mov    $0x0,%edx
f0124347:	f7 75 b4             	divl   -0x4c(%ebp)
f012434a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012434d:	29 d0                	sub    %edx,%eax
f012434f:	89 c3                	mov    %eax,%ebx
f0124351:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124358:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012435d:	0f b6 d0             	movzbl %al,%edx
f0124360:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124363:	01 d0                	add    %edx,%eax
f0124365:	48                   	dec    %eax
f0124366:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124369:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012436c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124371:	f7 75 ac             	divl   -0x54(%ebp)
f0124374:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124377:	29 d0                	sub    %edx,%eax
f0124379:	01 c3                	add    %eax,%ebx
f012437b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0124382:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124387:	0f b6 c0             	movzbl %al,%eax
f012438a:	c1 e0 04             	shl    $0x4,%eax
f012438d:	89 c2                	mov    %eax,%edx
f012438f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124392:	01 d0                	add    %edx,%eax
f0124394:	48                   	dec    %eax
f0124395:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0124398:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012439b:	ba 00 00 00 00       	mov    $0x0,%edx
f01243a0:	f7 75 a4             	divl   -0x5c(%ebp)
f01243a3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01243a6:	29 d0                	sub    %edx,%eax
f01243a8:	01 d8                	add    %ebx,%eax
f01243aa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01243af:	39 c1                	cmp    %eax,%ecx
f01243b1:	74 17                	je     f01243ca <test_kheap_virt_addr+0x171>
f01243b3:	83 ec 04             	sub    $0x4,%esp
f01243b6:	68 3c a6 13 f0       	push   $0xf013a63c
f01243bb:	68 ed 08 00 00       	push   $0x8ed
f01243c0:	68 56 a5 13 f0       	push   $0xf013a556
f01243c5:	e8 dc bd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243ca:	e8 bd f8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01243cf:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01243d2:	74 17                	je     f01243eb <test_kheap_virt_addr+0x192>
f01243d4:	83 ec 04             	sub    $0x4,%esp
f01243d7:	68 70 a5 13 f0       	push   $0xf013a570
f01243dc:	68 ee 08 00 00       	push   $0x8ee
f01243e1:	68 56 a5 13 f0       	push   $0xf013a556
f01243e6:	e8 bb bd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01243eb:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01243ee:	e8 bf 7c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01243f3:	29 c3                	sub    %eax,%ebx
f01243f5:	89 d8                	mov    %ebx,%eax
f01243f7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01243fc:	74 17                	je     f0124415 <test_kheap_virt_addr+0x1bc>
f01243fe:	83 ec 04             	sub    $0x4,%esp
f0124401:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0124406:	68 ef 08 00 00       	push   $0x8ef
f012440b:	68 56 a5 13 f0       	push   $0xf013a556
f0124410:	e8 91 bd fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124415:	e8 98 7c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012441a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012441d:	e8 6a f8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124422:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124425:	83 ec 0c             	sub    $0xc,%esp
f0124428:	68 00 fc 1f 00       	push   $0x1ffc00
f012442d:	e8 f0 2f fe ff       	call   f0107422 <kmalloc>
f0124432:	83 c4 10             	add    $0x10,%esp
f0124435:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012443b:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124441:	89 c1                	mov    %eax,%ecx
f0124443:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012444a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012444d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124452:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124455:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124458:	ba 00 00 00 00       	mov    $0x0,%edx
f012445d:	f7 75 9c             	divl   -0x64(%ebp)
f0124460:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124463:	29 d0                	sub    %edx,%eax
f0124465:	89 c3                	mov    %eax,%ebx
f0124467:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012446e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124473:	0f b6 d0             	movzbl %al,%edx
f0124476:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124479:	01 d0                	add    %edx,%eax
f012447b:	48                   	dec    %eax
f012447c:	89 45 90             	mov    %eax,-0x70(%ebp)
f012447f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124482:	ba 00 00 00 00       	mov    $0x0,%edx
f0124487:	f7 75 94             	divl   -0x6c(%ebp)
f012448a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012448d:	29 d0                	sub    %edx,%eax
f012448f:	01 c3                	add    %eax,%ebx
f0124491:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124498:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012449d:	0f b6 c0             	movzbl %al,%eax
f01244a0:	c1 e0 04             	shl    $0x4,%eax
f01244a3:	89 c2                	mov    %eax,%edx
f01244a5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01244a8:	01 d0                	add    %edx,%eax
f01244aa:	48                   	dec    %eax
f01244ab:	89 45 88             	mov    %eax,-0x78(%ebp)
f01244ae:	8b 45 88             	mov    -0x78(%ebp),%eax
f01244b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01244b6:	f7 75 8c             	divl   -0x74(%ebp)
f01244b9:	8b 45 88             	mov    -0x78(%ebp),%eax
f01244bc:	29 d0                	sub    %edx,%eax
f01244be:	01 d8                	add    %ebx,%eax
f01244c0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01244c5:	39 c1                	cmp    %eax,%ecx
f01244c7:	74 17                	je     f01244e0 <test_kheap_virt_addr+0x287>
f01244c9:	83 ec 04             	sub    $0x4,%esp
f01244cc:	68 3c a6 13 f0       	push   $0xf013a63c
f01244d1:	68 f5 08 00 00       	push   $0x8f5
f01244d6:	68 56 a5 13 f0       	push   $0xf013a556
f01244db:	e8 c6 bc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01244e0:	e8 a7 f7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01244e5:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01244e8:	74 17                	je     f0124501 <test_kheap_virt_addr+0x2a8>
f01244ea:	83 ec 04             	sub    $0x4,%esp
f01244ed:	68 70 a5 13 f0       	push   $0xf013a570
f01244f2:	68 f6 08 00 00       	push   $0x8f6
f01244f7:	68 56 a5 13 f0       	push   $0xf013a556
f01244fc:	e8 a5 bc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124501:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124504:	e8 a9 7b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124509:	29 c3                	sub    %eax,%ebx
f012450b:	89 d8                	mov    %ebx,%eax
f012450d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124512:	74 17                	je     f012452b <test_kheap_virt_addr+0x2d2>
f0124514:	83 ec 04             	sub    $0x4,%esp
f0124517:	68 d8 a5 13 f0       	push   $0xf013a5d8
f012451c:	68 f7 08 00 00       	push   $0x8f7
f0124521:	68 56 a5 13 f0       	push   $0xf013a556
f0124526:	e8 7b bc fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012452b:	e8 82 7b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124530:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124533:	e8 54 f7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124538:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012453b:	83 ec 0c             	sub    $0xc,%esp
f012453e:	68 00 08 00 00       	push   $0x800
f0124543:	e8 da 2e fe ff       	call   f0107422 <kmalloc>
f0124548:	83 c4 10             	add    $0x10,%esp
f012454b:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124551:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124557:	89 c1                	mov    %eax,%ecx
f0124559:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124560:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124563:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124568:	89 45 80             	mov    %eax,-0x80(%ebp)
f012456b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012456e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124573:	f7 75 84             	divl   -0x7c(%ebp)
f0124576:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124579:	29 d0                	sub    %edx,%eax
f012457b:	89 c3                	mov    %eax,%ebx
f012457d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0124584:	10 00 00 
f0124587:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012458c:	0f b6 d0             	movzbl %al,%edx
f012458f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124595:	01 d0                	add    %edx,%eax
f0124597:	48                   	dec    %eax
f0124598:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012459e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01245a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01245a9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01245af:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01245b5:	29 d0                	sub    %edx,%eax
f01245b7:	01 c3                	add    %eax,%ebx
f01245b9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01245c0:	10 00 00 
f01245c3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01245c8:	0f b6 c0             	movzbl %al,%eax
f01245cb:	c1 e0 04             	shl    $0x4,%eax
f01245ce:	89 c2                	mov    %eax,%edx
f01245d0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01245d6:	01 d0                	add    %edx,%eax
f01245d8:	48                   	dec    %eax
f01245d9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01245df:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01245e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01245ea:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01245f0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01245f6:	29 d0                	sub    %edx,%eax
f01245f8:	01 d8                	add    %ebx,%eax
f01245fa:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01245ff:	39 c1                	cmp    %eax,%ecx
f0124601:	74 17                	je     f012461a <test_kheap_virt_addr+0x3c1>
f0124603:	83 ec 04             	sub    $0x4,%esp
f0124606:	68 3c a6 13 f0       	push   $0xf013a63c
f012460b:	68 fd 08 00 00       	push   $0x8fd
f0124610:	68 56 a5 13 f0       	push   $0xf013a556
f0124615:	e8 8c bb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012461a:	e8 6d f6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012461f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124622:	74 17                	je     f012463b <test_kheap_virt_addr+0x3e2>
f0124624:	83 ec 04             	sub    $0x4,%esp
f0124627:	68 70 a5 13 f0       	push   $0xf013a570
f012462c:	68 fe 08 00 00       	push   $0x8fe
f0124631:	68 56 a5 13 f0       	push   $0xf013a556
f0124636:	e8 6b bb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012463b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012463e:	e8 6f 7a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124643:	29 c3                	sub    %eax,%ebx
f0124645:	89 d8                	mov    %ebx,%eax
f0124647:	83 f8 01             	cmp    $0x1,%eax
f012464a:	74 17                	je     f0124663 <test_kheap_virt_addr+0x40a>
f012464c:	83 ec 04             	sub    $0x4,%esp
f012464f:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0124654:	68 ff 08 00 00       	push   $0x8ff
f0124659:	68 56 a5 13 f0       	push   $0xf013a556
f012465e:	e8 43 bb fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124663:	e8 4a 7a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124668:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012466b:	e8 1c f6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124670:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124673:	83 ec 0c             	sub    $0xc,%esp
f0124676:	68 00 08 00 00       	push   $0x800
f012467b:	e8 a2 2d fe ff       	call   f0107422 <kmalloc>
f0124680:	83 c4 10             	add    $0x10,%esp
f0124683:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124689:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f012468f:	89 c1                	mov    %eax,%ecx
f0124691:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0124698:	10 00 00 
f012469b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01246a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01246a6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01246ac:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01246b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01246b7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01246bd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01246c3:	29 d0                	sub    %edx,%eax
f01246c5:	89 c3                	mov    %eax,%ebx
f01246c7:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01246ce:	10 00 00 
f01246d1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01246d6:	0f b6 d0             	movzbl %al,%edx
f01246d9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01246df:	01 d0                	add    %edx,%eax
f01246e1:	48                   	dec    %eax
f01246e2:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01246e8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01246ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01246f3:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01246f9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01246ff:	29 d0                	sub    %edx,%eax
f0124701:	01 c3                	add    %eax,%ebx
f0124703:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012470a:	10 00 00 
f012470d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124712:	0f b6 c0             	movzbl %al,%eax
f0124715:	c1 e0 04             	shl    $0x4,%eax
f0124718:	89 c2                	mov    %eax,%edx
f012471a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124720:	01 d0                	add    %edx,%eax
f0124722:	48                   	dec    %eax
f0124723:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124729:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012472f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124734:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012473a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124740:	29 d0                	sub    %edx,%eax
f0124742:	01 d8                	add    %ebx,%eax
f0124744:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124749:	39 c1                	cmp    %eax,%ecx
f012474b:	74 17                	je     f0124764 <test_kheap_virt_addr+0x50b>
f012474d:	83 ec 04             	sub    $0x4,%esp
f0124750:	68 3c a6 13 f0       	push   $0xf013a63c
f0124755:	68 05 09 00 00       	push   $0x905
f012475a:	68 56 a5 13 f0       	push   $0xf013a556
f012475f:	e8 42 ba fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124764:	e8 23 f5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124769:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012476c:	74 17                	je     f0124785 <test_kheap_virt_addr+0x52c>
f012476e:	83 ec 04             	sub    $0x4,%esp
f0124771:	68 70 a5 13 f0       	push   $0xf013a570
f0124776:	68 06 09 00 00       	push   $0x906
f012477b:	68 56 a5 13 f0       	push   $0xf013a556
f0124780:	e8 21 ba fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124785:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124788:	e8 25 79 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012478d:	29 c3                	sub    %eax,%ebx
f012478f:	89 d8                	mov    %ebx,%eax
f0124791:	83 f8 01             	cmp    $0x1,%eax
f0124794:	74 17                	je     f01247ad <test_kheap_virt_addr+0x554>
f0124796:	83 ec 04             	sub    $0x4,%esp
f0124799:	68 d8 a5 13 f0       	push   $0xf013a5d8
f012479e:	68 07 09 00 00       	push   $0x907
f01247a3:	68 56 a5 13 f0       	push   $0xf013a556
f01247a8:	e8 f9 b9 fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01247ad:	e8 00 79 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01247b2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01247b5:	e8 d2 f4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01247ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01247bd:	83 ec 0c             	sub    $0xc,%esp
f01247c0:	68 00 1c 00 00       	push   $0x1c00
f01247c5:	e8 58 2c fe ff       	call   f0107422 <kmalloc>
f01247ca:	83 c4 10             	add    $0x10,%esp
f01247cd:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01247d3:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01247d9:	89 c1                	mov    %eax,%ecx
f01247db:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01247e2:	10 00 00 
f01247e5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01247eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01247f0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01247f6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01247fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0124801:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124807:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012480d:	29 d0                	sub    %edx,%eax
f012480f:	89 c3                	mov    %eax,%ebx
f0124811:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124818:	10 00 00 
f012481b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124820:	0f b6 d0             	movzbl %al,%edx
f0124823:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124829:	01 d0                	add    %edx,%eax
f012482b:	48                   	dec    %eax
f012482c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124832:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124838:	ba 00 00 00 00       	mov    $0x0,%edx
f012483d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124843:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124849:	29 d0                	sub    %edx,%eax
f012484b:	01 c3                	add    %eax,%ebx
f012484d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124854:	10 00 00 
f0124857:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012485c:	0f b6 c0             	movzbl %al,%eax
f012485f:	c1 e0 04             	shl    $0x4,%eax
f0124862:	89 c2                	mov    %eax,%edx
f0124864:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012486a:	01 d0                	add    %edx,%eax
f012486c:	48                   	dec    %eax
f012486d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124873:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124879:	ba 00 00 00 00       	mov    $0x0,%edx
f012487e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124884:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012488a:	29 d0                	sub    %edx,%eax
f012488c:	01 d8                	add    %ebx,%eax
f012488e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124893:	39 c1                	cmp    %eax,%ecx
f0124895:	74 17                	je     f01248ae <test_kheap_virt_addr+0x655>
f0124897:	83 ec 04             	sub    $0x4,%esp
f012489a:	68 3c a6 13 f0       	push   $0xf013a63c
f012489f:	68 0d 09 00 00       	push   $0x90d
f01248a4:	68 56 a5 13 f0       	push   $0xf013a556
f01248a9:	e8 f8 b8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01248ae:	e8 d9 f3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01248b3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01248b6:	74 17                	je     f01248cf <test_kheap_virt_addr+0x676>
f01248b8:	83 ec 04             	sub    $0x4,%esp
f01248bb:	68 70 a5 13 f0       	push   $0xf013a570
f01248c0:	68 0e 09 00 00       	push   $0x90e
f01248c5:	68 56 a5 13 f0       	push   $0xf013a556
f01248ca:	e8 d7 b8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01248cf:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01248d2:	e8 db 77 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01248d7:	29 c3                	sub    %eax,%ebx
f01248d9:	89 d8                	mov    %ebx,%eax
f01248db:	83 f8 02             	cmp    $0x2,%eax
f01248de:	74 17                	je     f01248f7 <test_kheap_virt_addr+0x69e>
f01248e0:	83 ec 04             	sub    $0x4,%esp
f01248e3:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01248e8:	68 0f 09 00 00       	push   $0x90f
f01248ed:	68 56 a5 13 f0       	push   $0xf013a556
f01248f2:	e8 af b8 fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01248f7:	e8 b6 77 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01248fc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01248ff:	e8 88 f3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124904:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124907:	83 ec 0c             	sub    $0xc,%esp
f012490a:	68 00 fc 2f 00       	push   $0x2ffc00
f012490f:	e8 0e 2b fe ff       	call   f0107422 <kmalloc>
f0124914:	83 c4 10             	add    $0x10,%esp
f0124917:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012491d:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124923:	89 c1                	mov    %eax,%ecx
f0124925:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012492c:	10 00 00 
f012492f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124935:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012493a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124940:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124946:	ba 00 00 00 00       	mov    $0x0,%edx
f012494b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124951:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124957:	29 d0                	sub    %edx,%eax
f0124959:	89 c3                	mov    %eax,%ebx
f012495b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124962:	10 00 00 
f0124965:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012496a:	0f b6 d0             	movzbl %al,%edx
f012496d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124973:	01 d0                	add    %edx,%eax
f0124975:	48                   	dec    %eax
f0124976:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012497c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124982:	ba 00 00 00 00       	mov    $0x0,%edx
f0124987:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012498d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124993:	29 d0                	sub    %edx,%eax
f0124995:	01 c3                	add    %eax,%ebx
f0124997:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012499e:	10 00 00 
f01249a1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01249a6:	0f b6 c0             	movzbl %al,%eax
f01249a9:	c1 e0 04             	shl    $0x4,%eax
f01249ac:	89 c2                	mov    %eax,%edx
f01249ae:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01249b4:	01 d0                	add    %edx,%eax
f01249b6:	48                   	dec    %eax
f01249b7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01249bd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01249c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01249c8:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01249ce:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01249d4:	29 d0                	sub    %edx,%eax
f01249d6:	01 d8                	add    %ebx,%eax
f01249d8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01249dd:	39 c1                	cmp    %eax,%ecx
f01249df:	74 17                	je     f01249f8 <test_kheap_virt_addr+0x79f>
f01249e1:	83 ec 04             	sub    $0x4,%esp
f01249e4:	68 3c a6 13 f0       	push   $0xf013a63c
f01249e9:	68 15 09 00 00       	push   $0x915
f01249ee:	68 56 a5 13 f0       	push   $0xf013a556
f01249f3:	e8 ae b7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01249f8:	e8 8f f2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01249fd:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124a00:	74 17                	je     f0124a19 <test_kheap_virt_addr+0x7c0>
f0124a02:	83 ec 04             	sub    $0x4,%esp
f0124a05:	68 70 a5 13 f0       	push   $0xf013a570
f0124a0a:	68 16 09 00 00       	push   $0x916
f0124a0f:	68 56 a5 13 f0       	push   $0xf013a556
f0124a14:	e8 8d b7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124a19:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124a1c:	e8 91 76 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124a21:	29 c3                	sub    %eax,%ebx
f0124a23:	89 d8                	mov    %ebx,%eax
f0124a25:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124a2a:	74 17                	je     f0124a43 <test_kheap_virt_addr+0x7ea>
f0124a2c:	83 ec 04             	sub    $0x4,%esp
f0124a2f:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0124a34:	68 17 09 00 00       	push   $0x917
f0124a39:	68 56 a5 13 f0       	push   $0xf013a556
f0124a3e:	e8 63 b7 fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124a43:	e8 6a 76 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124a48:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124a4b:	e8 3c f2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124a50:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124a53:	83 ec 0c             	sub    $0xc,%esp
f0124a56:	68 00 fc 5f 00       	push   $0x5ffc00
f0124a5b:	e8 c2 29 fe ff       	call   f0107422 <kmalloc>
f0124a60:	83 c4 10             	add    $0x10,%esp
f0124a63:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124a69:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124a6f:	89 c1                	mov    %eax,%ecx
f0124a71:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0124a78:	10 00 00 
f0124a7b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124a81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a86:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0124a8c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124a92:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a97:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0124a9d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124aa3:	29 d0                	sub    %edx,%eax
f0124aa5:	89 c3                	mov    %eax,%ebx
f0124aa7:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0124aae:	10 00 00 
f0124ab1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124ab6:	0f b6 d0             	movzbl %al,%edx
f0124ab9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124abf:	01 d0                	add    %edx,%eax
f0124ac1:	48                   	dec    %eax
f0124ac2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124ac8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124ace:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ad3:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124ad9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124adf:	29 d0                	sub    %edx,%eax
f0124ae1:	01 c3                	add    %eax,%ebx
f0124ae3:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124aea:	10 00 00 
f0124aed:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124af2:	0f b6 c0             	movzbl %al,%eax
f0124af5:	c1 e0 04             	shl    $0x4,%eax
f0124af8:	89 c2                	mov    %eax,%edx
f0124afa:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124b00:	01 d0                	add    %edx,%eax
f0124b02:	48                   	dec    %eax
f0124b03:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124b09:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124b0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b14:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124b1a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124b20:	29 d0                	sub    %edx,%eax
f0124b22:	01 d8                	add    %ebx,%eax
f0124b24:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124b29:	39 c1                	cmp    %eax,%ecx
f0124b2b:	74 17                	je     f0124b44 <test_kheap_virt_addr+0x8eb>
f0124b2d:	83 ec 04             	sub    $0x4,%esp
f0124b30:	68 3c a6 13 f0       	push   $0xf013a63c
f0124b35:	68 1d 09 00 00       	push   $0x91d
f0124b3a:	68 56 a5 13 f0       	push   $0xf013a556
f0124b3f:	e8 62 b6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b44:	e8 43 f1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124b49:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124b4c:	74 17                	je     f0124b65 <test_kheap_virt_addr+0x90c>
f0124b4e:	83 ec 04             	sub    $0x4,%esp
f0124b51:	68 70 a5 13 f0       	push   $0xf013a570
f0124b56:	68 1e 09 00 00       	push   $0x91e
f0124b5b:	68 56 a5 13 f0       	push   $0xf013a556
f0124b60:	e8 41 b6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124b65:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124b68:	e8 45 75 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124b6d:	29 c3                	sub    %eax,%ebx
f0124b6f:	89 d8                	mov    %ebx,%eax
f0124b71:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124b76:	74 17                	je     f0124b8f <test_kheap_virt_addr+0x936>
f0124b78:	83 ec 04             	sub    $0x4,%esp
f0124b7b:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0124b80:	68 1f 09 00 00       	push   $0x91f
f0124b85:	68 56 a5 13 f0       	push   $0xf013a556
f0124b8a:	e8 17 b6 fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124b8f:	e8 1e 75 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124b94:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124b97:	e8 f0 f0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124b9c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124b9f:	83 ec 0c             	sub    $0xc,%esp
f0124ba2:	68 00 38 00 00       	push   $0x3800
f0124ba7:	e8 76 28 fe ff       	call   f0107422 <kmalloc>
f0124bac:	83 c4 10             	add    $0x10,%esp
f0124baf:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124bb5:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0124bbb:	89 c1                	mov    %eax,%ecx
f0124bbd:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0124bc4:	10 00 00 
f0124bc7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124bcd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124bd2:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0124bd8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124bde:	ba 00 00 00 00       	mov    $0x0,%edx
f0124be3:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0124be9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124bef:	29 d0                	sub    %edx,%eax
f0124bf1:	89 c3                	mov    %eax,%ebx
f0124bf3:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0124bfa:	10 00 00 
f0124bfd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124c02:	0f b6 d0             	movzbl %al,%edx
f0124c05:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124c0b:	01 d0                	add    %edx,%eax
f0124c0d:	48                   	dec    %eax
f0124c0e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0124c14:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124c1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c1f:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0124c25:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124c2b:	29 d0                	sub    %edx,%eax
f0124c2d:	01 c3                	add    %eax,%ebx
f0124c2f:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0124c36:	10 00 00 
f0124c39:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124c3e:	0f b6 c0             	movzbl %al,%eax
f0124c41:	c1 e0 04             	shl    $0x4,%eax
f0124c44:	89 c2                	mov    %eax,%edx
f0124c46:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124c4c:	01 d0                	add    %edx,%eax
f0124c4e:	48                   	dec    %eax
f0124c4f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0124c55:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124c5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c60:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0124c66:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124c6c:	29 d0                	sub    %edx,%eax
f0124c6e:	01 d8                	add    %ebx,%eax
f0124c70:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124c75:	39 c1                	cmp    %eax,%ecx
f0124c77:	74 17                	je     f0124c90 <test_kheap_virt_addr+0xa37>
f0124c79:	83 ec 04             	sub    $0x4,%esp
f0124c7c:	68 3c a6 13 f0       	push   $0xf013a63c
f0124c81:	68 25 09 00 00       	push   $0x925
f0124c86:	68 56 a5 13 f0       	push   $0xf013a556
f0124c8b:	e8 16 b5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c90:	e8 f7 ef fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124c95:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124c98:	74 17                	je     f0124cb1 <test_kheap_virt_addr+0xa58>
f0124c9a:	83 ec 04             	sub    $0x4,%esp
f0124c9d:	68 70 a5 13 f0       	push   $0xf013a570
f0124ca2:	68 26 09 00 00       	push   $0x926
f0124ca7:	68 56 a5 13 f0       	push   $0xf013a556
f0124cac:	e8 f5 b4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124cb1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124cb4:	e8 f9 73 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0124cb9:	29 c3                	sub    %eax,%ebx
f0124cbb:	89 d8                	mov    %ebx,%eax
f0124cbd:	83 f8 04             	cmp    $0x4,%eax
f0124cc0:	74 17                	je     f0124cd9 <test_kheap_virt_addr+0xa80>
f0124cc2:	83 ec 04             	sub    $0x4,%esp
f0124cc5:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0124cca:	68 27 09 00 00       	push   $0x927
f0124ccf:	68 56 a5 13 f0       	push   $0xf013a556
f0124cd4:	e8 cd b4 fd ff       	call   f01001a6 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124cd9:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0124ce0:	10 00 00 
f0124ce3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124ce9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124cee:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0124cf4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124cfa:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cff:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0124d05:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124d0b:	29 d0                	sub    %edx,%eax
f0124d0d:	89 c1                	mov    %eax,%ecx
f0124d0f:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0124d16:	10 00 00 
f0124d19:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124d1e:	0f b6 d0             	movzbl %al,%edx
f0124d21:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124d27:	01 d0                	add    %edx,%eax
f0124d29:	48                   	dec    %eax
f0124d2a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0124d30:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124d36:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d3b:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0124d41:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124d47:	29 d0                	sub    %edx,%eax
f0124d49:	01 c1                	add    %eax,%ecx
f0124d4b:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0124d52:	10 00 00 
f0124d55:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124d5a:	0f b6 c0             	movzbl %al,%eax
f0124d5d:	c1 e0 04             	shl    $0x4,%eax
f0124d60:	89 c2                	mov    %eax,%edx
f0124d62:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124d68:	01 d0                	add    %edx,%eax
f0124d6a:	48                   	dec    %eax
f0124d6b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0124d71:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124d77:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d7c:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0124d82:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124d88:	29 d0                	sub    %edx,%eax
f0124d8a:	01 c1                	add    %eax,%ecx
f0124d8c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0124d93:	10 00 00 
f0124d96:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124d9c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124da1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0124da7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124dad:	ba 00 00 00 00       	mov    $0x0,%edx
f0124db2:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0124db8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124dbe:	29 d0                	sub    %edx,%eax
f0124dc0:	29 c1                	sub    %eax,%ecx
f0124dc2:	89 c8                	mov    %ecx,%eax
f0124dc4:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124dc9:	c1 e8 0c             	shr    $0xc,%eax
f0124dcc:	89 c2                	mov    %eax,%edx
f0124dce:	4a                   	dec    %edx
f0124dcf:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0124dd5:	c1 e0 02             	shl    $0x2,%eax
f0124dd8:	8d 50 03             	lea    0x3(%eax),%edx
f0124ddb:	b8 10 00 00 00       	mov    $0x10,%eax
f0124de0:	48                   	dec    %eax
f0124de1:	01 d0                	add    %edx,%eax
f0124de3:	bf 10 00 00 00       	mov    $0x10,%edi
f0124de8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ded:	f7 f7                	div    %edi
f0124def:	6b c0 10             	imul   $0x10,%eax,%eax
f0124df2:	29 c4                	sub    %eax,%esp
f0124df4:	89 e0                	mov    %esp,%eax
f0124df6:	83 c0 03             	add    $0x3,%eax
f0124df9:	c1 e8 02             	shr    $0x2,%eax
f0124dfc:	c1 e0 02             	shl    $0x2,%eax
f0124dff:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124e05:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124e0c:	10 00 00 
f0124e0f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124e15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e1a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124e20:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124e26:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e2b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124e31:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124e37:	29 d0                	sub    %edx,%eax
f0124e39:	89 c1                	mov    %eax,%ecx
f0124e3b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124e42:	10 00 00 
f0124e45:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124e4a:	0f b6 d0             	movzbl %al,%edx
f0124e4d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124e53:	01 d0                	add    %edx,%eax
f0124e55:	48                   	dec    %eax
f0124e56:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124e5c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124e62:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e67:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124e6d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124e73:	29 d0                	sub    %edx,%eax
f0124e75:	01 c1                	add    %eax,%ecx
f0124e77:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124e7e:	10 00 00 
f0124e81:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124e86:	0f b6 c0             	movzbl %al,%eax
f0124e89:	c1 e0 04             	shl    $0x4,%eax
f0124e8c:	89 c2                	mov    %eax,%edx
f0124e8e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124e94:	01 d0                	add    %edx,%eax
f0124e96:	48                   	dec    %eax
f0124e97:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124e9d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124ea3:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ea8:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124eae:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124eb4:	29 d0                	sub    %edx,%eax
f0124eb6:	01 c1                	add    %eax,%ecx
f0124eb8:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124ebf:	10 00 00 
f0124ec2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124ec8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ecd:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124ed3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124ed9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ede:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124ee4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124eea:	29 d0                	sub    %edx,%eax
f0124eec:	29 c1                	sub    %eax,%ecx
f0124eee:	89 c8                	mov    %ecx,%eax
f0124ef0:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124ef5:	c1 e8 0c             	shr    $0xc,%eax
f0124ef8:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124efe:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0124f05:	10 00 00 
f0124f08:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124f0e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f13:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0124f19:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124f1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f24:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0124f2a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124f30:	29 d0                	sub    %edx,%eax
f0124f32:	89 c1                	mov    %eax,%ecx
f0124f34:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0124f3b:	10 00 00 
f0124f3e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124f43:	0f b6 d0             	movzbl %al,%edx
f0124f46:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124f4c:	01 d0                	add    %edx,%eax
f0124f4e:	48                   	dec    %eax
f0124f4f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0124f55:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0124f5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f60:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0124f66:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0124f6c:	29 d0                	sub    %edx,%eax
f0124f6e:	01 c1                	add    %eax,%ecx
f0124f70:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124f77:	10 00 00 
f0124f7a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124f7f:	0f b6 c0             	movzbl %al,%eax
f0124f82:	c1 e0 04             	shl    $0x4,%eax
f0124f85:	89 c2                	mov    %eax,%edx
f0124f87:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124f8d:	01 d0                	add    %edx,%eax
f0124f8f:	48                   	dec    %eax
f0124f90:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124f96:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124f9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fa1:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124fa7:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124fad:	29 d0                	sub    %edx,%eax
f0124faf:	01 c8                	add    %ecx,%eax
f0124fb1:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124fb6:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0124fbc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124fc3:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0124fca:	10 00 00 
f0124fcd:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0124fd3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124fd8:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0124fde:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124fe4:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fe9:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0124fef:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124ff5:	29 d0                	sub    %edx,%eax
f0124ff7:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124ffc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124fff:	e9 21 01 00 00       	jmp    f0125125 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125004:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0125009:	83 ec 04             	sub    $0x4,%esp
f012500c:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125012:	52                   	push   %edx
f0125013:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125016:	50                   	push   %eax
f0125017:	e8 4d 19 fe ff       	call   f0106969 <get_page_table>
f012501c:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012501f:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125025:	85 c0                	test   %eax,%eax
f0125027:	75 17                	jne    f0125040 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125029:	83 ec 04             	sub    $0x4,%esp
f012502c:	68 f8 ae 13 f0       	push   $0xf013aef8
f0125031:	68 38 09 00 00       	push   $0x938
f0125036:	68 56 a5 13 f0       	push   $0xf013a556
f012503b:	e8 66 b1 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125040:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125043:	c1 e8 0c             	shr    $0xc,%eax
f0125046:	25 ff 03 00 00       	and    $0x3ff,%eax
f012504b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012504e:	e9 ba 00 00 00       	jmp    f012510d <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125053:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125059:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012505c:	c1 e2 02             	shl    $0x2,%edx
f012505f:	01 d0                	add    %edx,%eax
f0125061:	8b 00                	mov    (%eax),%eax
f0125063:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125068:	89 c1                	mov    %eax,%ecx
f012506a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125070:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125073:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125076:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012507c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012507f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125082:	83 ec 0c             	sub    $0xc,%esp
f0125085:	50                   	push   %eax
f0125086:	e8 cb 23 fe ff       	call   f0107456 <kheap_virtual_address>
f012508b:	83 c4 10             	add    $0x10,%esp
f012508e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0125094:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012509a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012509d:	74 61                	je     f0125100 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f012509f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01250a5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01250a8:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01250ab:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f01250b1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01250b4:	c1 e1 02             	shl    $0x2,%ecx
f01250b7:	01 ca                	add    %ecx,%edx
f01250b9:	8b 12                	mov    (%edx),%edx
f01250bb:	89 d1                	mov    %edx,%ecx
f01250bd:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f01250c3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01250c6:	c1 e2 0c             	shl    $0xc,%edx
f01250c9:	89 d3                	mov    %edx,%ebx
f01250cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01250ce:	01 da                	add    %ebx,%edx
f01250d0:	83 ec 0c             	sub    $0xc,%esp
f01250d3:	50                   	push   %eax
f01250d4:	51                   	push   %ecx
f01250d5:	52                   	push   %edx
f01250d6:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f01250dc:	68 ec af 13 f0       	push   $0xf013afec
f01250e1:	e8 47 bb fd ff       	call   f0100c2d <cprintf>
f01250e6:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f01250e9:	83 ec 04             	sub    $0x4,%esp
f01250ec:	68 2f b0 13 f0       	push   $0xf013b02f
f01250f1:	68 42 09 00 00       	push   $0x942
f01250f6:	68 56 a5 13 f0       	push   $0xf013a556
f01250fb:	e8 a6 b0 fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f0125100:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125107:	ff 45 dc             	incl   -0x24(%ebp)
f012510a:	ff 45 e0             	incl   -0x20(%ebp)
f012510d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125110:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0125116:	7d 0d                	jge    f0125125 <test_kheap_virt_addr+0xecc>
f0125118:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f012511f:	0f 8e 2e ff ff ff    	jle    f0125053 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125125:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125128:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f012512e:	0f 82 d0 fe ff ff    	jb     f0125004 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0125134:	83 ec 0c             	sub    $0xc,%esp
f0125137:	68 4c b0 13 f0       	push   $0xf013b04c
f012513c:	e8 ec ba fd ff       	call   f0100c2d <cprintf>
f0125141:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125144:	e8 69 6f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125149:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012514f:	e8 38 eb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125154:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f012515a:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125160:	83 ec 0c             	sub    $0xc,%esp
f0125163:	50                   	push   %eax
f0125164:	e8 d3 22 fe ff       	call   f010743c <kfree>
f0125169:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012516c:	e8 1b eb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125171:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125177:	74 17                	je     f0125190 <test_kheap_virt_addr+0xf37>
f0125179:	83 ec 04             	sub    $0x4,%esp
f012517c:	68 70 a5 13 f0       	push   $0xf013a570
f0125181:	68 50 09 00 00       	push   $0x950
f0125186:	68 56 a5 13 f0       	push   $0xf013a556
f012518b:	e8 16 b0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125190:	e8 1d 6f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125195:	89 c2                	mov    %eax,%edx
f0125197:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012519d:	29 c2                	sub    %eax,%edx
f012519f:	89 d0                	mov    %edx,%eax
f01251a1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01251a6:	74 17                	je     f01251bf <test_kheap_virt_addr+0xf66>
f01251a8:	83 ec 04             	sub    $0x4,%esp
f01251ab:	68 e0 ac 13 f0       	push   $0xf013ace0
f01251b0:	68 51 09 00 00       	push   $0x951
f01251b5:	68 56 a5 13 f0       	push   $0xf013a556
f01251ba:	e8 e7 af fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01251bf:	e8 ee 6e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01251c4:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01251ca:	e8 bd ea fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01251cf:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f01251d5:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01251db:	83 ec 0c             	sub    $0xc,%esp
f01251de:	50                   	push   %eax
f01251df:	e8 58 22 fe ff       	call   f010743c <kfree>
f01251e4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01251e7:	e8 a0 ea fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01251ec:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01251f2:	74 17                	je     f012520b <test_kheap_virt_addr+0xfb2>
f01251f4:	83 ec 04             	sub    $0x4,%esp
f01251f7:	68 70 a5 13 f0       	push   $0xf013a570
f01251fc:	68 57 09 00 00       	push   $0x957
f0125201:	68 56 a5 13 f0       	push   $0xf013a556
f0125206:	e8 9b af fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012520b:	e8 a2 6e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125210:	89 c2                	mov    %eax,%edx
f0125212:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125218:	29 c2                	sub    %eax,%edx
f012521a:	89 d0                	mov    %edx,%eax
f012521c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125221:	74 17                	je     f012523a <test_kheap_virt_addr+0xfe1>
f0125223:	83 ec 04             	sub    $0x4,%esp
f0125226:	68 e0 ac 13 f0       	push   $0xf013ace0
f012522b:	68 58 09 00 00       	push   $0x958
f0125230:	68 56 a5 13 f0       	push   $0xf013a556
f0125235:	e8 6c af fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012523a:	e8 73 6e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012523f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125245:	e8 42 ea fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012524a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0125250:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125256:	83 ec 0c             	sub    $0xc,%esp
f0125259:	50                   	push   %eax
f012525a:	e8 dd 21 fe ff       	call   f010743c <kfree>
f012525f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125262:	e8 25 ea fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125267:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f012526d:	74 17                	je     f0125286 <test_kheap_virt_addr+0x102d>
f012526f:	83 ec 04             	sub    $0x4,%esp
f0125272:	68 70 a5 13 f0       	push   $0xf013a570
f0125277:	68 5e 09 00 00       	push   $0x95e
f012527c:	68 56 a5 13 f0       	push   $0xf013a556
f0125281:	e8 20 af fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125286:	e8 27 6e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012528b:	89 c2                	mov    %eax,%edx
f012528d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125293:	29 c2                	sub    %eax,%edx
f0125295:	89 d0                	mov    %edx,%eax
f0125297:	3d 00 06 00 00       	cmp    $0x600,%eax
f012529c:	74 17                	je     f01252b5 <test_kheap_virt_addr+0x105c>
f012529e:	83 ec 04             	sub    $0x4,%esp
f01252a1:	68 e0 ac 13 f0       	push   $0xf013ace0
f01252a6:	68 5f 09 00 00       	push   $0x95f
f01252ab:	68 56 a5 13 f0       	push   $0xf013a556
f01252b0:	e8 f1 ae fd ff       	call   f01001a6 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01252b5:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01252bc:	10 00 00 
f01252bf:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01252c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252ca:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01252d0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01252d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01252db:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01252e1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01252e7:	29 d0                	sub    %edx,%eax
f01252e9:	89 c1                	mov    %eax,%ecx
f01252eb:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01252f2:	10 00 00 
f01252f5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01252fa:	0f b6 d0             	movzbl %al,%edx
f01252fd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125303:	01 d0                	add    %edx,%eax
f0125305:	48                   	dec    %eax
f0125306:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012530c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125312:	ba 00 00 00 00       	mov    $0x0,%edx
f0125317:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012531d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125323:	29 d0                	sub    %edx,%eax
f0125325:	01 c1                	add    %eax,%ecx
f0125327:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012532e:	10 00 00 
f0125331:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125336:	0f b6 c0             	movzbl %al,%eax
f0125339:	c1 e0 04             	shl    $0x4,%eax
f012533c:	89 c2                	mov    %eax,%edx
f012533e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125344:	01 d0                	add    %edx,%eax
f0125346:	48                   	dec    %eax
f0125347:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012534d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125353:	ba 00 00 00 00       	mov    $0x0,%edx
f0125358:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012535e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125364:	29 d0                	sub    %edx,%eax
f0125366:	01 c8                	add    %ecx,%eax
f0125368:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012536d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0125373:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f012537a:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0125381:	10 00 00 
f0125384:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012538a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012538f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125395:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012539b:	ba 00 00 00 00       	mov    $0x0,%edx
f01253a0:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01253a6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01253ac:	29 d0                	sub    %edx,%eax
f01253ae:	89 c1                	mov    %eax,%ecx
f01253b0:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f01253b7:	10 00 00 
f01253ba:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01253bf:	0f b6 d0             	movzbl %al,%edx
f01253c2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01253c8:	01 d0                	add    %edx,%eax
f01253ca:	48                   	dec    %eax
f01253cb:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f01253d1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01253d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01253dc:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f01253e2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01253e8:	29 d0                	sub    %edx,%eax
f01253ea:	01 c1                	add    %eax,%ecx
f01253ec:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01253f3:	10 00 00 
f01253f6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01253fb:	0f b6 c0             	movzbl %al,%eax
f01253fe:	c1 e0 04             	shl    $0x4,%eax
f0125401:	89 c2                	mov    %eax,%edx
f0125403:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125409:	01 d0                	add    %edx,%eax
f012540b:	48                   	dec    %eax
f012540c:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125412:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125418:	ba 00 00 00 00       	mov    $0x0,%edx
f012541d:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125423:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125429:	29 d0                	sub    %edx,%eax
f012542b:	01 c1                	add    %eax,%ecx
f012542d:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0125434:	10 00 00 
f0125437:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012543d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125442:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0125448:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012544e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125453:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0125459:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012545f:	29 d0                	sub    %edx,%eax
f0125461:	29 c1                	sub    %eax,%ecx
f0125463:	89 c8                	mov    %ecx,%eax
f0125465:	05 00 40 00 00       	add    $0x4000,%eax
f012546a:	c1 e8 0c             	shr    $0xc,%eax
f012546d:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125473:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125479:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012547c:	eb 41                	jmp    f01254bf <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012547e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125484:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125487:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012548a:	83 ec 0c             	sub    $0xc,%esp
f012548d:	50                   	push   %eax
f012548e:	e8 c3 1f fe ff       	call   f0107456 <kheap_virtual_address>
f0125493:	83 c4 10             	add    $0x10,%esp
f0125496:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f012549c:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f01254a3:	74 17                	je     f01254bc <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f01254a5:	83 ec 04             	sub    $0x4,%esp
f01254a8:	68 2f b0 13 f0       	push   $0xf013b02f
f01254ad:	68 70 09 00 00       	push   $0x970
f01254b2:	68 56 a5 13 f0       	push   $0xf013a556
f01254b7:	e8 ea ac fd ff       	call   f01001a6 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01254bc:	ff 45 d8             	incl   -0x28(%ebp)
f01254bf:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01254c5:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f01254cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01254ce:	39 c2                	cmp    %eax,%edx
f01254d0:	77 ac                	ja     f012547e <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01254d2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01254d8:	05 00 04 00 00       	add    $0x400,%eax
f01254dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01254e0:	e9 83 00 00 00       	jmp    f0125568 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01254e5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01254eb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01254ee:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01254f1:	83 ec 0c             	sub    $0xc,%esp
f01254f4:	50                   	push   %eax
f01254f5:	e8 5c 1f fe ff       	call   f0107456 <kheap_virtual_address>
f01254fa:	83 c4 10             	add    $0x10,%esp
f01254fd:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125503:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f012550a:	10 00 00 
f012550d:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125513:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125518:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012551e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125524:	ba 00 00 00 00       	mov    $0x0,%edx
f0125529:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012552f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125535:	29 d0                	sub    %edx,%eax
f0125537:	89 c2                	mov    %eax,%edx
f0125539:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012553c:	c1 e0 0c             	shl    $0xc,%eax
f012553f:	01 d0                	add    %edx,%eax
f0125541:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125546:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f012554c:	74 17                	je     f0125565 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f012554e:	83 ec 04             	sub    $0x4,%esp
f0125551:	68 2f b0 13 f0       	push   $0xf013b02f
f0125556:	68 7a 09 00 00       	push   $0x97a
f012555b:	68 56 a5 13 f0       	push   $0xf013a556
f0125560:	e8 41 ac fd ff       	call   f01001a6 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125565:	ff 45 d8             	incl   -0x28(%ebp)
f0125568:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012556e:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0125574:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125577:	39 c2                	cmp    %eax,%edx
f0125579:	0f 87 66 ff ff ff    	ja     f01254e5 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012557f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125585:	05 04 07 00 00       	add    $0x704,%eax
f012558a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012558d:	eb 41                	jmp    f01255d0 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012558f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125595:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125598:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012559b:	83 ec 0c             	sub    $0xc,%esp
f012559e:	50                   	push   %eax
f012559f:	e8 b2 1e fe ff       	call   f0107456 <kheap_virtual_address>
f01255a4:	83 c4 10             	add    $0x10,%esp
f01255a7:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f01255ad:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f01255b4:	74 17                	je     f01255cd <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f01255b6:	83 ec 04             	sub    $0x4,%esp
f01255b9:	68 2f b0 13 f0       	push   $0xf013b02f
f01255be:	68 83 09 00 00       	push   $0x983
f01255c3:	68 56 a5 13 f0       	push   $0xf013a556
f01255c8:	e8 d9 ab fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01255cd:	ff 45 d8             	incl   -0x28(%ebp)
f01255d0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01255d6:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01255dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01255df:	39 c2                	cmp    %eax,%edx
f01255e1:	77 ac                	ja     f012558f <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01255e3:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01255e9:	05 04 0d 00 00       	add    $0xd04,%eax
f01255ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01255f1:	e9 83 00 00 00       	jmp    f0125679 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01255f6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01255fc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01255ff:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125602:	83 ec 0c             	sub    $0xc,%esp
f0125605:	50                   	push   %eax
f0125606:	e8 4b 1e fe ff       	call   f0107456 <kheap_virtual_address>
f012560b:	83 c4 10             	add    $0x10,%esp
f012560e:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125614:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f012561b:	10 00 00 
f012561e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125624:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125629:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f012562f:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125635:	ba 00 00 00 00       	mov    $0x0,%edx
f012563a:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0125640:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125646:	29 d0                	sub    %edx,%eax
f0125648:	89 c2                	mov    %eax,%edx
f012564a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012564d:	c1 e0 0c             	shl    $0xc,%eax
f0125650:	01 d0                	add    %edx,%eax
f0125652:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125657:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f012565d:	74 17                	je     f0125676 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f012565f:	83 ec 04             	sub    $0x4,%esp
f0125662:	68 2f b0 13 f0       	push   $0xf013b02f
f0125667:	68 8c 09 00 00       	push   $0x98c
f012566c:	68 56 a5 13 f0       	push   $0xf013a556
f0125671:	e8 30 ab fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125676:	ff 45 d8             	incl   -0x28(%ebp)
f0125679:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012567f:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0125685:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125688:	39 c2                	cmp    %eax,%edx
f012568a:	0f 87 66 ff ff ff    	ja     f01255f6 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0125690:	83 ec 0c             	sub    $0xc,%esp
f0125693:	68 e1 a6 13 f0       	push   $0xf013a6e1
f0125698:	e8 90 b5 fd ff       	call   f0100c2d <cprintf>
f012569d:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01256a0:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f01256a7:	eb 54                	jmp    f01256fd <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f01256a9:	83 ec 0c             	sub    $0xc,%esp
f01256ac:	ff 75 d4             	pushl  -0x2c(%ebp)
f01256af:	e8 a2 1d fe ff       	call   f0107456 <kheap_virtual_address>
f01256b4:	83 c4 10             	add    $0x10,%esp
f01256b7:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f01256bd:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f01256c4:	74 30                	je     f01256f6 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f01256c6:	83 ec 04             	sub    $0x4,%esp
f01256c9:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01256cf:	ff 75 d4             	pushl  -0x2c(%ebp)
f01256d2:	68 7d b0 13 f0       	push   $0xf013b07d
f01256d7:	e8 51 b5 fd ff       	call   f0100c2d <cprintf>
f01256dc:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f01256df:	83 ec 04             	sub    $0x4,%esp
f01256e2:	68 2f b0 13 f0       	push   $0xf013b02f
f01256e7:	68 9c 09 00 00       	push   $0x99c
f01256ec:	68 56 a5 13 f0       	push   $0xf013a556
f01256f1:	e8 b0 aa fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01256f6:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01256fd:	b8 1c 86 6e 00       	mov    $0x6e861c,%eax
f0125702:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0125705:	72 a2                	jb     f01256a9 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125707:	83 ec 0c             	sub    $0xc,%esp
f012570a:	68 3a a7 13 f0       	push   $0xf013a73a
f012570f:	e8 19 b5 fd ff       	call   f0100c2d <cprintf>
f0125714:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125717:	83 ec 0c             	sub    $0xc,%esp
f012571a:	68 9c b0 13 f0       	push   $0xf013b09c
f012571f:	e8 09 b5 fd ff       	call   f0100c2d <cprintf>
f0125724:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125727:	b8 01 00 00 00       	mov    $0x1,%eax
f012572c:	89 f4                	mov    %esi,%esp

}
f012572e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125731:	5b                   	pop    %ebx
f0125732:	5e                   	pop    %esi
f0125733:	5f                   	pop    %edi
f0125734:	5d                   	pop    %ebp
f0125735:	c3                   	ret    

f0125736 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125736:	55                   	push   %ebp
f0125737:	89 e5                	mov    %esp,%ebp
f0125739:	57                   	push   %edi
f012573a:	56                   	push   %esi
f012573b:	53                   	push   %ebx
f012573c:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125742:	a0 cf 0c 19 f0       	mov    0xf0190ccf,%al
f0125747:	84 c0                	test   %al,%al
f0125749:	74 56                	je     f01257a1 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f012574b:	c6 05 cf 0c 19 f0 00 	movb   $0x0,0xf0190ccf
		initFreeFrames = sys_calculate_free_frames() ;
f0125752:	e8 5b 69 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125757:	a3 18 86 6e f0       	mov    %eax,0xf06e8618
		initFreeDiskFrames = pf_calculate_free_frames() ;
f012575c:	e8 2b e5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125761:	a3 14 86 6e f0       	mov    %eax,0xf06e8614
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125766:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f012576c:	bb f9 b1 13 f0       	mov    $0xf013b1f9,%ebx
f0125771:	ba 11 00 00 00       	mov    $0x11,%edx
f0125776:	89 c7                	mov    %eax,%edi
f0125778:	89 de                	mov    %ebx,%esi
f012577a:	89 d1                	mov    %edx,%ecx
f012577c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f012577e:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0125784:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125789:	b0 00                	mov    $0x0,%al
f012578b:	89 d7                	mov    %edx,%edi
f012578d:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f012578f:	83 ec 0c             	sub    $0xc,%esp
f0125792:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125798:	50                   	push   %eax
f0125799:	e8 f1 b4 fd ff       	call   f0100c8f <execute_command>
f012579e:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f01257a1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f01257a8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01257af:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f01257b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01257b7:	eb 2d                	jmp    f01257e6 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f01257b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01257bc:	05 18 da 01 00       	add    $0x1da18,%eax
f01257c1:	83 ec 08             	sub    $0x8,%esp
f01257c4:	68 e3 b0 13 f0       	push   $0xf013b0e3
f01257c9:	50                   	push   %eax
f01257ca:	e8 5c ad 00 00       	call   f013052b <strcmp>
f01257cf:	83 c4 10             	add    $0x10,%esp
f01257d2:	85 c0                	test   %eax,%eax
f01257d4:	75 08                	jne    f01257de <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f01257d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01257d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f01257dc:	eb 2f                	jmp    f012580d <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01257de:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f01257e3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01257e6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01257ea:	74 08                	je     f01257f4 <test_three_creation_functions+0xbe>
f01257ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01257ef:	8b 40 44             	mov    0x44(%eax),%eax
f01257f2:	eb 05                	jmp    f01257f9 <test_three_creation_functions+0xc3>
f01257f4:	b8 00 00 00 00       	mov    $0x0,%eax
f01257f9:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f01257fe:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0125803:	85 c0                	test   %eax,%eax
f0125805:	75 b2                	jne    f01257b9 <test_three_creation_functions+0x83>
f0125807:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012580b:	75 ac                	jne    f01257b9 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f012580d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125810:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f0125816:	85 c0                	test   %eax,%eax
f0125818:	74 17                	je     f0125831 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f012581a:	83 ec 04             	sub    $0x4,%esp
f012581d:	68 ec b0 13 f0       	push   $0xf013b0ec
f0125822:	68 c6 09 00 00       	push   $0x9c6
f0125827:	68 56 a5 13 f0       	push   $0xf013a556
f012582c:	e8 75 a9 fd ff       	call   f01001a6 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0125831:	83 ec 0c             	sub    $0xc,%esp
f0125834:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125837:	e8 7c 1f fe ff       	call   f01077b8 <env_page_ws_get_size>
f012583c:	83 c4 10             	add    $0x10,%esp
f012583f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125842:	e8 6b 68 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125847:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f012584a:	e8 3d e4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012584f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125852:	a1 14 86 6e f0       	mov    0xf06e8614,%eax
f0125857:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f012585a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012585d:	74 17                	je     f0125876 <test_three_creation_functions+0x140>
f012585f:	83 ec 04             	sub    $0x4,%esp
f0125862:	68 70 a5 13 f0       	push   $0xf013a570
f0125867:	68 cc 09 00 00       	push   $0x9cc
f012586c:	68 56 a5 13 f0       	push   $0xf013a556
f0125871:	e8 30 a9 fd ff       	call   f01001a6 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125876:	a1 18 86 6e f0       	mov    0xf06e8618,%eax
f012587b:	2b 45 d8             	sub    -0x28(%ebp),%eax
f012587e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125881:	83 c2 15             	add    $0x15,%edx
f0125884:	39 d0                	cmp    %edx,%eax
f0125886:	74 17                	je     f012589f <test_three_creation_functions+0x169>
f0125888:	83 ec 04             	sub    $0x4,%esp
f012588b:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0125890:	68 ce 09 00 00       	push   $0x9ce
f0125895:	68 56 a5 13 f0       	push   $0xf013a556
f012589a:	e8 07 a9 fd ff       	call   f01001a6 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f012589f:	83 ec 0c             	sub    $0xc,%esp
f01258a2:	68 00 10 00 00       	push   $0x1000
f01258a7:	e8 76 1b fe ff       	call   f0107422 <kmalloc>
f01258ac:	83 c4 10             	add    $0x10,%esp
f01258af:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f01258b2:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01258b9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01258bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01258c1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01258c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01258c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01258cc:	f7 75 cc             	divl   -0x34(%ebp)
f01258cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01258d2:	29 d0                	sub    %edx,%eax
f01258d4:	89 c1                	mov    %eax,%ecx
f01258d6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01258dd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01258e2:	0f b6 d0             	movzbl %al,%edx
f01258e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01258e8:	01 d0                	add    %edx,%eax
f01258ea:	48                   	dec    %eax
f01258eb:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01258ee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01258f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01258f6:	f7 75 c4             	divl   -0x3c(%ebp)
f01258f9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01258fc:	29 d0                	sub    %edx,%eax
f01258fe:	01 c1                	add    %eax,%ecx
f0125900:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0125907:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012590c:	0f b6 c0             	movzbl %al,%eax
f012590f:	c1 e0 04             	shl    $0x4,%eax
f0125912:	89 c2                	mov    %eax,%edx
f0125914:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125917:	01 d0                	add    %edx,%eax
f0125919:	48                   	dec    %eax
f012591a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012591d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125920:	ba 00 00 00 00       	mov    $0x0,%edx
f0125925:	f7 75 bc             	divl   -0x44(%ebp)
f0125928:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012592b:	29 d0                	sub    %edx,%eax
f012592d:	01 c8                	add    %ecx,%eax
f012592f:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0125935:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125938:	39 c2                	cmp    %eax,%edx
f012593a:	74 17                	je     f0125953 <test_three_creation_functions+0x21d>
f012593c:	83 ec 04             	sub    $0x4,%esp
f012593f:	68 3c b1 13 f0       	push   $0xf013b13c
f0125944:	68 d2 09 00 00       	push   $0x9d2
f0125949:	68 56 a5 13 f0       	push   $0xf013a556
f012594e:	e8 53 a8 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0125953:	83 ec 0c             	sub    $0xc,%esp
f0125956:	68 ac b1 13 f0       	push   $0xf013b1ac
f012595b:	e8 cd b2 fd ff       	call   f0100c2d <cprintf>
f0125960:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125963:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0125968:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012596b:	5b                   	pop    %ebx
f012596c:	5e                   	pop    %esi
f012596d:	5f                   	pop    %edi
f012596e:	5d                   	pop    %ebp
f012596f:	c3                   	ret    

f0125970 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0125970:	55                   	push   %ebp
f0125971:	89 e5                	mov    %esp,%ebp
f0125973:	57                   	push   %edi
f0125974:	53                   	push   %ebx
f0125975:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f012597b:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012597f:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0125983:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0125989:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012598f:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125996:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012599d:	e8 10 67 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01259a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01259a5:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01259ab:	b9 14 00 00 00       	mov    $0x14,%ecx
f01259b0:	b8 00 00 00 00       	mov    $0x0,%eax
f01259b5:	89 d7                	mov    %edx,%edi
f01259b7:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01259b9:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f01259bf:	b9 14 00 00 00       	mov    $0x14,%ecx
f01259c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01259c9:	89 d7                	mov    %edx,%edi
f01259cb:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01259cd:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01259d3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01259d8:	b8 00 00 00 00       	mov    $0x0,%eax
f01259dd:	89 d7                	mov    %edx,%edi
f01259df:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01259e1:	e8 cc 66 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01259e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259e9:	e8 9e e2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01259ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01259f1:	83 ec 0c             	sub    $0xc,%esp
f01259f4:	68 00 fc 1f 00       	push   $0x1ffc00
f01259f9:	e8 24 1a fe ff       	call   f0107422 <kmalloc>
f01259fe:	83 c4 10             	add    $0x10,%esp
f0125a01:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a07:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0125a0d:	89 c1                	mov    %eax,%ecx
f0125a0f:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125a16:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125a19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a1e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125a21:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125a24:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a29:	f7 75 c8             	divl   -0x38(%ebp)
f0125a2c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125a2f:	29 d0                	sub    %edx,%eax
f0125a31:	89 c3                	mov    %eax,%ebx
f0125a33:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0125a3a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125a3f:	0f b6 d0             	movzbl %al,%edx
f0125a42:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125a45:	01 d0                	add    %edx,%eax
f0125a47:	48                   	dec    %eax
f0125a48:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125a4b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125a4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a53:	f7 75 c0             	divl   -0x40(%ebp)
f0125a56:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125a59:	29 d0                	sub    %edx,%eax
f0125a5b:	01 c3                	add    %eax,%ebx
f0125a5d:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0125a64:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125a69:	0f b6 c0             	movzbl %al,%eax
f0125a6c:	c1 e0 04             	shl    $0x4,%eax
f0125a6f:	89 c2                	mov    %eax,%edx
f0125a71:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125a74:	01 d0                	add    %edx,%eax
f0125a76:	48                   	dec    %eax
f0125a77:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0125a7a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125a7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a82:	f7 75 b8             	divl   -0x48(%ebp)
f0125a85:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125a88:	29 d0                	sub    %edx,%eax
f0125a8a:	01 d8                	add    %ebx,%eax
f0125a8c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125a91:	39 c1                	cmp    %eax,%ecx
f0125a93:	74 17                	je     f0125aac <test_kfreeall+0x13c>
f0125a95:	83 ec 04             	sub    $0x4,%esp
f0125a98:	68 3c a6 13 f0       	push   $0xf013a63c
f0125a9d:	68 f9 09 00 00       	push   $0x9f9
f0125aa2:	68 56 a5 13 f0       	push   $0xf013a556
f0125aa7:	e8 fa a6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125aac:	e8 db e1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125ab1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ab4:	74 17                	je     f0125acd <test_kfreeall+0x15d>
f0125ab6:	83 ec 04             	sub    $0x4,%esp
f0125ab9:	68 70 a5 13 f0       	push   $0xf013a570
f0125abe:	68 fa 09 00 00       	push   $0x9fa
f0125ac3:	68 56 a5 13 f0       	push   $0xf013a556
f0125ac8:	e8 d9 a6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125acd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125ad0:	e8 dd 65 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125ad5:	29 c3                	sub    %eax,%ebx
f0125ad7:	89 d8                	mov    %ebx,%eax
f0125ad9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125ade:	74 17                	je     f0125af7 <test_kfreeall+0x187>
f0125ae0:	83 ec 04             	sub    $0x4,%esp
f0125ae3:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0125ae8:	68 fb 09 00 00       	push   $0x9fb
f0125aed:	68 56 a5 13 f0       	push   $0xf013a556
f0125af2:	e8 af a6 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0125af7:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0125afe:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125b01:	e8 ac 65 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125b06:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b09:	e8 7e e1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125b0e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125b11:	83 ec 0c             	sub    $0xc,%esp
f0125b14:	68 00 fc 1f 00       	push   $0x1ffc00
f0125b19:	e8 04 19 fe ff       	call   f0107422 <kmalloc>
f0125b1e:	83 c4 10             	add    $0x10,%esp
f0125b21:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b27:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0125b2d:	89 c1                	mov    %eax,%ecx
f0125b2f:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0125b36:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125b39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b3e:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0125b41:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125b44:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b49:	f7 75 b0             	divl   -0x50(%ebp)
f0125b4c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125b4f:	29 d0                	sub    %edx,%eax
f0125b51:	89 c3                	mov    %eax,%ebx
f0125b53:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0125b5a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125b5f:	0f b6 d0             	movzbl %al,%edx
f0125b62:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125b65:	01 d0                	add    %edx,%eax
f0125b67:	48                   	dec    %eax
f0125b68:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0125b6b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125b6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b73:	f7 75 a8             	divl   -0x58(%ebp)
f0125b76:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125b79:	29 d0                	sub    %edx,%eax
f0125b7b:	01 c3                	add    %eax,%ebx
f0125b7d:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0125b84:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125b89:	0f b6 c0             	movzbl %al,%eax
f0125b8c:	c1 e0 04             	shl    $0x4,%eax
f0125b8f:	89 c2                	mov    %eax,%edx
f0125b91:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125b94:	01 d0                	add    %edx,%eax
f0125b96:	48                   	dec    %eax
f0125b97:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0125b9a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125b9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ba2:	f7 75 a0             	divl   -0x60(%ebp)
f0125ba5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125ba8:	29 d0                	sub    %edx,%eax
f0125baa:	01 d8                	add    %ebx,%eax
f0125bac:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125bb1:	39 c1                	cmp    %eax,%ecx
f0125bb3:	74 17                	je     f0125bcc <test_kfreeall+0x25c>
f0125bb5:	83 ec 04             	sub    $0x4,%esp
f0125bb8:	68 3c a6 13 f0       	push   $0xf013a63c
f0125bbd:	68 02 0a 00 00       	push   $0xa02
f0125bc2:	68 56 a5 13 f0       	push   $0xf013a556
f0125bc7:	e8 da a5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125bcc:	e8 bb e0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125bd1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125bd4:	74 17                	je     f0125bed <test_kfreeall+0x27d>
f0125bd6:	83 ec 04             	sub    $0x4,%esp
f0125bd9:	68 70 a5 13 f0       	push   $0xf013a570
f0125bde:	68 03 0a 00 00       	push   $0xa03
f0125be3:	68 56 a5 13 f0       	push   $0xf013a556
f0125be8:	e8 b9 a5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125bed:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125bf0:	e8 bd 64 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125bf5:	29 c3                	sub    %eax,%ebx
f0125bf7:	89 d8                	mov    %ebx,%eax
f0125bf9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125bfe:	74 17                	je     f0125c17 <test_kfreeall+0x2a7>
f0125c00:	83 ec 04             	sub    $0x4,%esp
f0125c03:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0125c08:	68 04 0a 00 00       	push   $0xa04
f0125c0d:	68 56 a5 13 f0       	push   $0xf013a556
f0125c12:	e8 8f a5 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0125c17:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0125c1e:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125c21:	e8 8c 64 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125c26:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125c29:	e8 5e e0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125c2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125c31:	83 ec 0c             	sub    $0xc,%esp
f0125c34:	68 00 08 00 00       	push   $0x800
f0125c39:	e8 e4 17 fe ff       	call   f0107422 <kmalloc>
f0125c3e:	83 c4 10             	add    $0x10,%esp
f0125c41:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125c47:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0125c4d:	89 c1                	mov    %eax,%ecx
f0125c4f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0125c56:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125c59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c5e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0125c61:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125c64:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c69:	f7 75 98             	divl   -0x68(%ebp)
f0125c6c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125c6f:	29 d0                	sub    %edx,%eax
f0125c71:	89 c3                	mov    %eax,%ebx
f0125c73:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0125c7a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125c7f:	0f b6 d0             	movzbl %al,%edx
f0125c82:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125c85:	01 d0                	add    %edx,%eax
f0125c87:	48                   	dec    %eax
f0125c88:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0125c8b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125c8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c93:	f7 75 90             	divl   -0x70(%ebp)
f0125c96:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125c99:	29 d0                	sub    %edx,%eax
f0125c9b:	01 c3                	add    %eax,%ebx
f0125c9d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0125ca4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125ca9:	0f b6 c0             	movzbl %al,%eax
f0125cac:	c1 e0 04             	shl    $0x4,%eax
f0125caf:	89 c2                	mov    %eax,%edx
f0125cb1:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125cb4:	01 d0                	add    %edx,%eax
f0125cb6:	48                   	dec    %eax
f0125cb7:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0125cba:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125cbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cc2:	f7 75 88             	divl   -0x78(%ebp)
f0125cc5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125cc8:	29 d0                	sub    %edx,%eax
f0125cca:	01 d8                	add    %ebx,%eax
f0125ccc:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125cd1:	39 c1                	cmp    %eax,%ecx
f0125cd3:	74 17                	je     f0125cec <test_kfreeall+0x37c>
f0125cd5:	83 ec 04             	sub    $0x4,%esp
f0125cd8:	68 3c a6 13 f0       	push   $0xf013a63c
f0125cdd:	68 0b 0a 00 00       	push   $0xa0b
f0125ce2:	68 56 a5 13 f0       	push   $0xf013a556
f0125ce7:	e8 ba a4 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125cec:	e8 9b df fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125cf1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125cf4:	74 17                	je     f0125d0d <test_kfreeall+0x39d>
f0125cf6:	83 ec 04             	sub    $0x4,%esp
f0125cf9:	68 70 a5 13 f0       	push   $0xf013a570
f0125cfe:	68 0c 0a 00 00       	push   $0xa0c
f0125d03:	68 56 a5 13 f0       	push   $0xf013a556
f0125d08:	e8 99 a4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125d0d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125d10:	e8 9d 63 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125d15:	29 c3                	sub    %eax,%ebx
f0125d17:	89 d8                	mov    %ebx,%eax
f0125d19:	83 f8 01             	cmp    $0x1,%eax
f0125d1c:	74 17                	je     f0125d35 <test_kfreeall+0x3c5>
f0125d1e:	83 ec 04             	sub    $0x4,%esp
f0125d21:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0125d26:	68 0d 0a 00 00       	push   $0xa0d
f0125d2b:	68 56 a5 13 f0       	push   $0xf013a556
f0125d30:	e8 71 a4 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0125d35:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0125d3c:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0125d3f:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0125d45:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125d48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125d4f:	eb 0e                	jmp    f0125d5f <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0125d51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125d54:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125d57:	01 d0                	add    %edx,%eax
f0125d59:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125d5c:	ff 45 f4             	incl   -0xc(%ebp)
f0125d5f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125d65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125d68:	7f e7                	jg     f0125d51 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125d6a:	e8 43 63 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125d6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125d72:	e8 15 df fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125d77:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125d7a:	83 ec 0c             	sub    $0xc,%esp
f0125d7d:	68 00 08 00 00       	push   $0x800
f0125d82:	e8 9b 16 fe ff       	call   f0107422 <kmalloc>
f0125d87:	83 c4 10             	add    $0x10,%esp
f0125d8a:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125d90:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0125d96:	89 c1                	mov    %eax,%ecx
f0125d98:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0125d9f:	10 00 00 
f0125da2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125da8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125dad:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125db3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125db9:	ba 00 00 00 00       	mov    $0x0,%edx
f0125dbe:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125dc4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125dca:	29 d0                	sub    %edx,%eax
f0125dcc:	89 c3                	mov    %eax,%ebx
f0125dce:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125dd5:	10 00 00 
f0125dd8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125ddd:	0f b6 d0             	movzbl %al,%edx
f0125de0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125de6:	01 d0                	add    %edx,%eax
f0125de8:	48                   	dec    %eax
f0125de9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125def:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125df5:	ba 00 00 00 00       	mov    $0x0,%edx
f0125dfa:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125e00:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125e06:	29 d0                	sub    %edx,%eax
f0125e08:	01 c3                	add    %eax,%ebx
f0125e0a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125e11:	10 00 00 
f0125e14:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125e19:	0f b6 c0             	movzbl %al,%eax
f0125e1c:	c1 e0 04             	shl    $0x4,%eax
f0125e1f:	89 c2                	mov    %eax,%edx
f0125e21:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125e27:	01 d0                	add    %edx,%eax
f0125e29:	48                   	dec    %eax
f0125e2a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125e30:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125e36:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e3b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125e41:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125e47:	29 d0                	sub    %edx,%eax
f0125e49:	01 d8                	add    %ebx,%eax
f0125e4b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125e50:	39 c1                	cmp    %eax,%ecx
f0125e52:	74 17                	je     f0125e6b <test_kfreeall+0x4fb>
f0125e54:	83 ec 04             	sub    $0x4,%esp
f0125e57:	68 3c a6 13 f0       	push   $0xf013a63c
f0125e5c:	68 19 0a 00 00       	push   $0xa19
f0125e61:	68 56 a5 13 f0       	push   $0xf013a556
f0125e66:	e8 3b a3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e6b:	e8 1c de fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125e70:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125e73:	74 17                	je     f0125e8c <test_kfreeall+0x51c>
f0125e75:	83 ec 04             	sub    $0x4,%esp
f0125e78:	68 70 a5 13 f0       	push   $0xf013a570
f0125e7d:	68 1a 0a 00 00       	push   $0xa1a
f0125e82:	68 56 a5 13 f0       	push   $0xf013a556
f0125e87:	e8 1a a3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e8c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125e8f:	e8 1e 62 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125e94:	29 c3                	sub    %eax,%ebx
f0125e96:	89 d8                	mov    %ebx,%eax
f0125e98:	83 f8 01             	cmp    $0x1,%eax
f0125e9b:	74 17                	je     f0125eb4 <test_kfreeall+0x544>
f0125e9d:	83 ec 04             	sub    $0x4,%esp
f0125ea0:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0125ea5:	68 1b 0a 00 00       	push   $0xa1b
f0125eaa:	68 56 a5 13 f0       	push   $0xf013a556
f0125eaf:	e8 f2 a2 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0125eb4:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0125ebb:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125ebe:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0125ec4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125ec7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125ece:	eb 0e                	jmp    f0125ede <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0125ed0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125ed3:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125ed6:	01 d0                	add    %edx,%eax
f0125ed8:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125edb:	ff 45 f4             	incl   -0xc(%ebp)
f0125ede:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125ee4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125ee7:	7f e7                	jg     f0125ed0 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125ee9:	e8 c4 61 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0125eee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125ef1:	e8 96 dd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125ef6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125ef9:	83 ec 0c             	sub    $0xc,%esp
f0125efc:	68 00 1c 00 00       	push   $0x1c00
f0125f01:	e8 1c 15 fe ff       	call   f0107422 <kmalloc>
f0125f06:	83 c4 10             	add    $0x10,%esp
f0125f09:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125f0f:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0125f15:	89 c1                	mov    %eax,%ecx
f0125f17:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125f1e:	10 00 00 
f0125f21:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125f27:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f2c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125f32:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125f38:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f3d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125f43:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125f49:	29 d0                	sub    %edx,%eax
f0125f4b:	89 c3                	mov    %eax,%ebx
f0125f4d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125f54:	10 00 00 
f0125f57:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125f5c:	0f b6 d0             	movzbl %al,%edx
f0125f5f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125f65:	01 d0                	add    %edx,%eax
f0125f67:	48                   	dec    %eax
f0125f68:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125f6e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125f74:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f79:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125f7f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125f85:	29 d0                	sub    %edx,%eax
f0125f87:	01 c3                	add    %eax,%ebx
f0125f89:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125f90:	10 00 00 
f0125f93:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125f98:	0f b6 c0             	movzbl %al,%eax
f0125f9b:	c1 e0 04             	shl    $0x4,%eax
f0125f9e:	89 c2                	mov    %eax,%edx
f0125fa0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125fa6:	01 d0                	add    %edx,%eax
f0125fa8:	48                   	dec    %eax
f0125fa9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125faf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125fb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fba:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125fc0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125fc6:	29 d0                	sub    %edx,%eax
f0125fc8:	01 d8                	add    %ebx,%eax
f0125fca:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125fcf:	39 c1                	cmp    %eax,%ecx
f0125fd1:	74 17                	je     f0125fea <test_kfreeall+0x67a>
f0125fd3:	83 ec 04             	sub    $0x4,%esp
f0125fd6:	68 3c a6 13 f0       	push   $0xf013a63c
f0125fdb:	68 27 0a 00 00       	push   $0xa27
f0125fe0:	68 56 a5 13 f0       	push   $0xf013a556
f0125fe5:	e8 bc a1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125fea:	e8 9d dc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125fef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ff2:	74 17                	je     f012600b <test_kfreeall+0x69b>
f0125ff4:	83 ec 04             	sub    $0x4,%esp
f0125ff7:	68 70 a5 13 f0       	push   $0xf013a570
f0125ffc:	68 28 0a 00 00       	push   $0xa28
f0126001:	68 56 a5 13 f0       	push   $0xf013a556
f0126006:	e8 9b a1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012600b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012600e:	e8 9f 60 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126013:	29 c3                	sub    %eax,%ebx
f0126015:	89 d8                	mov    %ebx,%eax
f0126017:	83 f8 02             	cmp    $0x2,%eax
f012601a:	74 17                	je     f0126033 <test_kfreeall+0x6c3>
f012601c:	83 ec 04             	sub    $0x4,%esp
f012601f:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0126024:	68 29 0a 00 00       	push   $0xa29
f0126029:	68 56 a5 13 f0       	push   $0xf013a556
f012602e:	e8 73 a1 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126033:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f012603a:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012603d:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126043:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126046:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012604d:	eb 0e                	jmp    f012605d <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f012604f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126052:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126055:	01 d0                	add    %edx,%eax
f0126057:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012605a:	ff 45 f4             	incl   -0xc(%ebp)
f012605d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126063:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126066:	7f e7                	jg     f012604f <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126068:	e8 45 60 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012606d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126070:	e8 17 dc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126075:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126078:	83 ec 0c             	sub    $0xc,%esp
f012607b:	68 00 fc 2f 00       	push   $0x2ffc00
f0126080:	e8 9d 13 fe ff       	call   f0107422 <kmalloc>
f0126085:	83 c4 10             	add    $0x10,%esp
f0126088:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012608e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126094:	89 c1                	mov    %eax,%ecx
f0126096:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012609d:	10 00 00 
f01260a0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01260a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01260ab:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01260b1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01260b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01260bc:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01260c2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01260c8:	29 d0                	sub    %edx,%eax
f01260ca:	89 c3                	mov    %eax,%ebx
f01260cc:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01260d3:	10 00 00 
f01260d6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01260db:	0f b6 d0             	movzbl %al,%edx
f01260de:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01260e4:	01 d0                	add    %edx,%eax
f01260e6:	48                   	dec    %eax
f01260e7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01260ed:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01260f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01260f8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01260fe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126104:	29 d0                	sub    %edx,%eax
f0126106:	01 c3                	add    %eax,%ebx
f0126108:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012610f:	10 00 00 
f0126112:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126117:	0f b6 c0             	movzbl %al,%eax
f012611a:	c1 e0 04             	shl    $0x4,%eax
f012611d:	89 c2                	mov    %eax,%edx
f012611f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126125:	01 d0                	add    %edx,%eax
f0126127:	48                   	dec    %eax
f0126128:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012612e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126134:	ba 00 00 00 00       	mov    $0x0,%edx
f0126139:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012613f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126145:	29 d0                	sub    %edx,%eax
f0126147:	01 d8                	add    %ebx,%eax
f0126149:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012614e:	39 c1                	cmp    %eax,%ecx
f0126150:	74 17                	je     f0126169 <test_kfreeall+0x7f9>
f0126152:	83 ec 04             	sub    $0x4,%esp
f0126155:	68 3c a6 13 f0       	push   $0xf013a63c
f012615a:	68 35 0a 00 00       	push   $0xa35
f012615f:	68 56 a5 13 f0       	push   $0xf013a556
f0126164:	e8 3d a0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126169:	e8 1e db fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012616e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126171:	74 17                	je     f012618a <test_kfreeall+0x81a>
f0126173:	83 ec 04             	sub    $0x4,%esp
f0126176:	68 70 a5 13 f0       	push   $0xf013a570
f012617b:	68 36 0a 00 00       	push   $0xa36
f0126180:	68 56 a5 13 f0       	push   $0xf013a556
f0126185:	e8 1c a0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012618a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012618d:	e8 20 5f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126192:	29 c3                	sub    %eax,%ebx
f0126194:	89 d8                	mov    %ebx,%eax
f0126196:	3d 00 03 00 00       	cmp    $0x300,%eax
f012619b:	74 17                	je     f01261b4 <test_kfreeall+0x844>
f012619d:	83 ec 04             	sub    $0x4,%esp
f01261a0:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01261a5:	68 37 0a 00 00       	push   $0xa37
f01261aa:	68 56 a5 13 f0       	push   $0xf013a556
f01261af:	e8 f2 9f fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01261b4:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01261bb:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01261be:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01261c4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01261c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01261ce:	eb 0e                	jmp    f01261de <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f01261d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01261d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01261d6:	01 d0                	add    %edx,%eax
f01261d8:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01261db:	ff 45 f4             	incl   -0xc(%ebp)
f01261de:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01261e4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01261e7:	7f e7                	jg     f01261d0 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01261e9:	e8 c4 5e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01261ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261f1:	e8 96 da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01261f6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01261f9:	83 ec 0c             	sub    $0xc,%esp
f01261fc:	68 00 fc 5f 00       	push   $0x5ffc00
f0126201:	e8 1c 12 fe ff       	call   f0107422 <kmalloc>
f0126206:	83 c4 10             	add    $0x10,%esp
f0126209:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012620f:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126215:	89 c1                	mov    %eax,%ecx
f0126217:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012621e:	10 00 00 
f0126221:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0126227:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012622c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126232:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126238:	ba 00 00 00 00       	mov    $0x0,%edx
f012623d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126243:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126249:	29 d0                	sub    %edx,%eax
f012624b:	89 c3                	mov    %eax,%ebx
f012624d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126254:	10 00 00 
f0126257:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012625c:	0f b6 d0             	movzbl %al,%edx
f012625f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126265:	01 d0                	add    %edx,%eax
f0126267:	48                   	dec    %eax
f0126268:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012626e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126274:	ba 00 00 00 00       	mov    $0x0,%edx
f0126279:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012627f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126285:	29 d0                	sub    %edx,%eax
f0126287:	01 c3                	add    %eax,%ebx
f0126289:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0126290:	10 00 00 
f0126293:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126298:	0f b6 c0             	movzbl %al,%eax
f012629b:	c1 e0 04             	shl    $0x4,%eax
f012629e:	89 c2                	mov    %eax,%edx
f01262a0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01262a6:	01 d0                	add    %edx,%eax
f01262a8:	48                   	dec    %eax
f01262a9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01262af:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01262b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01262ba:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01262c0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01262c6:	29 d0                	sub    %edx,%eax
f01262c8:	01 d8                	add    %ebx,%eax
f01262ca:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01262cf:	39 c1                	cmp    %eax,%ecx
f01262d1:	74 17                	je     f01262ea <test_kfreeall+0x97a>
f01262d3:	83 ec 04             	sub    $0x4,%esp
f01262d6:	68 3c a6 13 f0       	push   $0xf013a63c
f01262db:	68 43 0a 00 00       	push   $0xa43
f01262e0:	68 56 a5 13 f0       	push   $0xf013a556
f01262e5:	e8 bc 9e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262ea:	e8 9d d9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01262ef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01262f2:	74 17                	je     f012630b <test_kfreeall+0x99b>
f01262f4:	83 ec 04             	sub    $0x4,%esp
f01262f7:	68 70 a5 13 f0       	push   $0xf013a570
f01262fc:	68 44 0a 00 00       	push   $0xa44
f0126301:	68 56 a5 13 f0       	push   $0xf013a556
f0126306:	e8 9b 9e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012630b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012630e:	e8 9f 5d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126313:	29 c3                	sub    %eax,%ebx
f0126315:	89 d8                	mov    %ebx,%eax
f0126317:	3d 00 06 00 00       	cmp    $0x600,%eax
f012631c:	74 17                	je     f0126335 <test_kfreeall+0x9c5>
f012631e:	83 ec 04             	sub    $0x4,%esp
f0126321:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0126326:	68 45 0a 00 00       	push   $0xa45
f012632b:	68 56 a5 13 f0       	push   $0xf013a556
f0126330:	e8 71 9e fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0126335:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f012633c:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012633f:	e8 6e 5d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126344:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126347:	e8 40 d9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012634c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012634f:	83 ec 0c             	sub    $0xc,%esp
f0126352:	68 00 38 00 00       	push   $0x3800
f0126357:	e8 c6 10 fe ff       	call   f0107422 <kmalloc>
f012635c:	83 c4 10             	add    $0x10,%esp
f012635f:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126365:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012636b:	89 c1                	mov    %eax,%ecx
f012636d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126374:	10 00 00 
f0126377:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012637d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126382:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126388:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012638e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126393:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126399:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012639f:	29 d0                	sub    %edx,%eax
f01263a1:	89 c3                	mov    %eax,%ebx
f01263a3:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01263aa:	10 00 00 
f01263ad:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01263b2:	0f b6 d0             	movzbl %al,%edx
f01263b5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01263bb:	01 d0                	add    %edx,%eax
f01263bd:	48                   	dec    %eax
f01263be:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01263c4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01263ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01263cf:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01263d5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01263db:	29 d0                	sub    %edx,%eax
f01263dd:	01 c3                	add    %eax,%ebx
f01263df:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01263e6:	10 00 00 
f01263e9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01263ee:	0f b6 c0             	movzbl %al,%eax
f01263f1:	c1 e0 04             	shl    $0x4,%eax
f01263f4:	89 c2                	mov    %eax,%edx
f01263f6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01263fc:	01 d0                	add    %edx,%eax
f01263fe:	48                   	dec    %eax
f01263ff:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126405:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012640b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126410:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126416:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012641c:	29 d0                	sub    %edx,%eax
f012641e:	01 d8                	add    %ebx,%eax
f0126420:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0126425:	39 c1                	cmp    %eax,%ecx
f0126427:	74 17                	je     f0126440 <test_kfreeall+0xad0>
f0126429:	83 ec 04             	sub    $0x4,%esp
f012642c:	68 3c a6 13 f0       	push   $0xf013a63c
f0126431:	68 4c 0a 00 00       	push   $0xa4c
f0126436:	68 56 a5 13 f0       	push   $0xf013a556
f012643b:	e8 66 9d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126440:	e8 47 d8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126445:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126448:	74 17                	je     f0126461 <test_kfreeall+0xaf1>
f012644a:	83 ec 04             	sub    $0x4,%esp
f012644d:	68 70 a5 13 f0       	push   $0xf013a570
f0126452:	68 4d 0a 00 00       	push   $0xa4d
f0126457:	68 56 a5 13 f0       	push   $0xf013a556
f012645c:	e8 45 9d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126461:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126464:	e8 49 5c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126469:	29 c3                	sub    %eax,%ebx
f012646b:	89 d8                	mov    %ebx,%eax
f012646d:	83 f8 04             	cmp    $0x4,%eax
f0126470:	74 17                	je     f0126489 <test_kfreeall+0xb19>
f0126472:	83 ec 04             	sub    $0x4,%esp
f0126475:	68 d8 a5 13 f0       	push   $0xf013a5d8
f012647a:	68 4e 0a 00 00       	push   $0xa4e
f012647f:	68 56 a5 13 f0       	push   $0xf013a556
f0126484:	e8 1d 9d fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0126489:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0126490:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0126493:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126499:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012649c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01264a3:	eb 0e                	jmp    f01264b3 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f01264a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01264a8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01264ab:	01 d0                	add    %edx,%eax
f01264ad:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01264b0:	ff 45 f4             	incl   -0xc(%ebp)
f01264b3:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01264b9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01264bc:	7f e7                	jg     f01264a5 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01264be:	e8 ef 5b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01264c3:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01264c9:	e8 be d7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01264ce:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01264d4:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01264da:	83 ec 0c             	sub    $0xc,%esp
f01264dd:	50                   	push   %eax
f01264de:	e8 59 0f fe ff       	call   f010743c <kfree>
f01264e3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01264e6:	e8 a1 d7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01264eb:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01264f1:	74 17                	je     f012650a <test_kfreeall+0xb9a>
f01264f3:	83 ec 04             	sub    $0x4,%esp
f01264f6:	68 70 a5 13 f0       	push   $0xf013a570
f01264fb:	68 5d 0a 00 00       	push   $0xa5d
f0126500:	68 56 a5 13 f0       	push   $0xf013a556
f0126505:	e8 9c 9c fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012650a:	e8 a3 5b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012650f:	89 c2                	mov    %eax,%edx
f0126511:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126517:	29 c2                	sub    %eax,%edx
f0126519:	89 d0                	mov    %edx,%eax
f012651b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126520:	74 17                	je     f0126539 <test_kfreeall+0xbc9>
f0126522:	83 ec 04             	sub    $0x4,%esp
f0126525:	68 e0 ac 13 f0       	push   $0xf013ace0
f012652a:	68 5e 0a 00 00       	push   $0xa5e
f012652f:	68 56 a5 13 f0       	push   $0xf013a556
f0126534:	e8 6d 9c fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126539:	e8 74 5b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012653e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126544:	e8 43 d7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126549:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012654f:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126555:	83 ec 0c             	sub    $0xc,%esp
f0126558:	50                   	push   %eax
f0126559:	e8 de 0e fe ff       	call   f010743c <kfree>
f012655e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126561:	e8 26 d7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126566:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012656c:	74 17                	je     f0126585 <test_kfreeall+0xc15>
f012656e:	83 ec 04             	sub    $0x4,%esp
f0126571:	68 70 a5 13 f0       	push   $0xf013a570
f0126576:	68 64 0a 00 00       	push   $0xa64
f012657b:	68 56 a5 13 f0       	push   $0xf013a556
f0126580:	e8 21 9c fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0126585:	e8 28 5b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012658a:	89 c2                	mov    %eax,%edx
f012658c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126592:	29 c2                	sub    %eax,%edx
f0126594:	89 d0                	mov    %edx,%eax
f0126596:	3d 00 02 00 00       	cmp    $0x200,%eax
f012659b:	74 17                	je     f01265b4 <test_kfreeall+0xc44>
f012659d:	83 ec 04             	sub    $0x4,%esp
f01265a0:	68 e0 ac 13 f0       	push   $0xf013ace0
f01265a5:	68 65 0a 00 00       	push   $0xa65
f01265aa:	68 56 a5 13 f0       	push   $0xf013a556
f01265af:	e8 f2 9b fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01265b4:	e8 f9 5a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01265b9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265bf:	e8 c8 d6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01265c4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01265ca:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01265d0:	83 ec 0c             	sub    $0xc,%esp
f01265d3:	50                   	push   %eax
f01265d4:	e8 63 0e fe ff       	call   f010743c <kfree>
f01265d9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265dc:	e8 ab d6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01265e1:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01265e7:	74 17                	je     f0126600 <test_kfreeall+0xc90>
f01265e9:	83 ec 04             	sub    $0x4,%esp
f01265ec:	68 70 a5 13 f0       	push   $0xf013a570
f01265f1:	68 6b 0a 00 00       	push   $0xa6b
f01265f6:	68 56 a5 13 f0       	push   $0xf013a556
f01265fb:	e8 a6 9b fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126600:	e8 ad 5a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126605:	89 c2                	mov    %eax,%edx
f0126607:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012660d:	29 c2                	sub    %eax,%edx
f012660f:	89 d0                	mov    %edx,%eax
f0126611:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126616:	74 17                	je     f012662f <test_kfreeall+0xcbf>
f0126618:	83 ec 04             	sub    $0x4,%esp
f012661b:	68 e0 ac 13 f0       	push   $0xf013ace0
f0126620:	68 6c 0a 00 00       	push   $0xa6c
f0126625:	68 56 a5 13 f0       	push   $0xf013a556
f012662a:	e8 77 9b fd ff       	call   f01001a6 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012662f:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126635:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126638:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012663f:	eb 1e                	jmp    f012665f <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0126641:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126647:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012664a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012664d:	01 c8                	add    %ecx,%eax
f012664f:	8a 00                	mov    (%eax),%al
f0126651:	0f be c0             	movsbl %al,%eax
f0126654:	01 d0                	add    %edx,%eax
f0126656:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012665c:	ff 45 f4             	incl   -0xc(%ebp)
f012665f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126665:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126668:	7f d7                	jg     f0126641 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012666a:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126670:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126676:	01 c0                	add    %eax,%eax
f0126678:	39 c2                	cmp    %eax,%edx
f012667a:	74 17                	je     f0126693 <test_kfreeall+0xd23>
f012667c:	83 ec 04             	sub    $0x4,%esp
f012667f:	68 3c ad 13 f0       	push   $0xf013ad3c
f0126684:	68 78 0a 00 00       	push   $0xa78
f0126689:	68 56 a5 13 f0       	push   $0xf013a556
f012668e:	e8 13 9b fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0126693:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126699:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012669c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01266a3:	eb 1e                	jmp    f01266c3 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f01266a5:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01266ab:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01266ae:	8b 45 80             	mov    -0x80(%ebp),%eax
f01266b1:	01 c8                	add    %ecx,%eax
f01266b3:	8a 00                	mov    (%eax),%al
f01266b5:	0f be c0             	movsbl %al,%eax
f01266b8:	01 d0                	add    %edx,%eax
f01266ba:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01266c0:	ff 45 f4             	incl   -0xc(%ebp)
f01266c3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01266c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01266cc:	7f d7                	jg     f01266a5 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01266ce:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01266d4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01266da:	89 c1                	mov    %eax,%ecx
f01266dc:	01 c9                	add    %ecx,%ecx
f01266de:	01 c8                	add    %ecx,%eax
f01266e0:	39 c2                	cmp    %eax,%edx
f01266e2:	74 17                	je     f01266fb <test_kfreeall+0xd8b>
f01266e4:	83 ec 04             	sub    $0x4,%esp
f01266e7:	68 3c ad 13 f0       	push   $0xf013ad3c
f01266ec:	68 80 0a 00 00       	push   $0xa80
f01266f1:	68 56 a5 13 f0       	push   $0xf013a556
f01266f6:	e8 ab 9a fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01266fb:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126701:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126704:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012670b:	eb 1e                	jmp    f012672b <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f012670d:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126713:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126716:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126719:	01 c8                	add    %ecx,%eax
f012671b:	8a 00                	mov    (%eax),%al
f012671d:	0f be c0             	movsbl %al,%eax
f0126720:	01 d0                	add    %edx,%eax
f0126722:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126728:	ff 45 f4             	incl   -0xc(%ebp)
f012672b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126731:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126734:	7f d7                	jg     f012670d <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0126736:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012673c:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126742:	c1 e2 02             	shl    $0x2,%edx
f0126745:	39 d0                	cmp    %edx,%eax
f0126747:	74 17                	je     f0126760 <test_kfreeall+0xdf0>
f0126749:	83 ec 04             	sub    $0x4,%esp
f012674c:	68 3c ad 13 f0       	push   $0xf013ad3c
f0126751:	68 88 0a 00 00       	push   $0xa88
f0126756:	68 56 a5 13 f0       	push   $0xf013a556
f012675b:	e8 46 9a fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0126760:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126766:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126769:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126770:	eb 1e                	jmp    f0126790 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0126772:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0126778:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012677b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012677e:	01 c8                	add    %ecx,%eax
f0126780:	8a 00                	mov    (%eax),%al
f0126782:	0f be c0             	movsbl %al,%eax
f0126785:	01 d0                	add    %edx,%eax
f0126787:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012678d:	ff 45 f4             	incl   -0xc(%ebp)
f0126790:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126796:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126799:	7f d7                	jg     f0126772 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012679b:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01267a1:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01267a7:	89 d0                	mov    %edx,%eax
f01267a9:	c1 e0 02             	shl    $0x2,%eax
f01267ac:	01 d0                	add    %edx,%eax
f01267ae:	39 c1                	cmp    %eax,%ecx
f01267b0:	74 17                	je     f01267c9 <test_kfreeall+0xe59>
f01267b2:	83 ec 04             	sub    $0x4,%esp
f01267b5:	68 3c ad 13 f0       	push   $0xf013ad3c
f01267ba:	68 90 0a 00 00       	push   $0xa90
f01267bf:	68 56 a5 13 f0       	push   $0xf013a556
f01267c4:	e8 dd 99 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01267c9:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01267cf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01267d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01267d9:	eb 1e                	jmp    f01267f9 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f01267db:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01267e1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01267e4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01267e7:	01 c8                	add    %ecx,%eax
f01267e9:	8a 00                	mov    (%eax),%al
f01267eb:	0f be c0             	movsbl %al,%eax
f01267ee:	01 d0                	add    %edx,%eax
f01267f0:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01267f6:	ff 45 f4             	incl   -0xc(%ebp)
f01267f9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01267ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126802:	7f d7                	jg     f01267db <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0126804:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012680a:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0126810:	89 d0                	mov    %edx,%eax
f0126812:	01 c0                	add    %eax,%eax
f0126814:	01 d0                	add    %edx,%eax
f0126816:	01 c0                	add    %eax,%eax
f0126818:	01 d0                	add    %edx,%eax
f012681a:	39 c1                	cmp    %eax,%ecx
f012681c:	74 17                	je     f0126835 <test_kfreeall+0xec5>
f012681e:	83 ec 04             	sub    $0x4,%esp
f0126821:	68 3c ad 13 f0       	push   $0xf013ad3c
f0126826:	68 98 0a 00 00       	push   $0xa98
f012682b:	68 56 a5 13 f0       	push   $0xf013a556
f0126830:	e8 71 99 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126835:	e8 78 58 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012683a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012683d:	e8 4a d4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126842:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0126845:	83 ec 0c             	sub    $0xc,%esp
f0126848:	68 00 50 00 00       	push   $0x5000
f012684d:	e8 d0 0b fe ff       	call   f0107422 <kmalloc>
f0126852:	83 c4 10             	add    $0x10,%esp
f0126855:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012685b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126861:	89 c1                	mov    %eax,%ecx
f0126863:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012686a:	10 00 00 
f012686d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126873:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126878:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012687e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126884:	ba 00 00 00 00       	mov    $0x0,%edx
f0126889:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012688f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126895:	29 d0                	sub    %edx,%eax
f0126897:	89 c3                	mov    %eax,%ebx
f0126899:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01268a0:	10 00 00 
f01268a3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01268a8:	0f b6 d0             	movzbl %al,%edx
f01268ab:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01268b1:	01 d0                	add    %edx,%eax
f01268b3:	48                   	dec    %eax
f01268b4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01268ba:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01268c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01268c5:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01268cb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01268d1:	29 d0                	sub    %edx,%eax
f01268d3:	01 c3                	add    %eax,%ebx
f01268d5:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01268dc:	10 00 00 
f01268df:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01268e4:	0f b6 c0             	movzbl %al,%eax
f01268e7:	c1 e0 04             	shl    $0x4,%eax
f01268ea:	89 c2                	mov    %eax,%edx
f01268ec:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01268f2:	01 d0                	add    %edx,%eax
f01268f4:	48                   	dec    %eax
f01268f5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01268fb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126901:	ba 00 00 00 00       	mov    $0x0,%edx
f0126906:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012690c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126912:	29 d0                	sub    %edx,%eax
f0126914:	01 d8                	add    %ebx,%eax
f0126916:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012691b:	39 c1                	cmp    %eax,%ecx
f012691d:	74 17                	je     f0126936 <test_kfreeall+0xfc6>
f012691f:	83 ec 04             	sub    $0x4,%esp
f0126922:	68 3c a6 13 f0       	push   $0xf013a63c
f0126927:	68 a1 0a 00 00       	push   $0xaa1
f012692c:	68 56 a5 13 f0       	push   $0xf013a556
f0126931:	e8 70 98 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126936:	e8 51 d3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012693b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012693e:	74 17                	je     f0126957 <test_kfreeall+0xfe7>
f0126940:	83 ec 04             	sub    $0x4,%esp
f0126943:	68 70 a5 13 f0       	push   $0xf013a570
f0126948:	68 a2 0a 00 00       	push   $0xaa2
f012694d:	68 56 a5 13 f0       	push   $0xf013a556
f0126952:	e8 4f 98 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126957:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012695a:	e8 53 57 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012695f:	29 c3                	sub    %eax,%ebx
f0126961:	89 d8                	mov    %ebx,%eax
f0126963:	83 f8 05             	cmp    $0x5,%eax
f0126966:	74 17                	je     f012697f <test_kfreeall+0x100f>
f0126968:	83 ec 04             	sub    $0x4,%esp
f012696b:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0126970:	68 a3 0a 00 00       	push   $0xaa3
f0126975:	68 56 a5 13 f0       	push   $0xf013a556
f012697a:	e8 27 98 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012697f:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0126986:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0126989:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012698f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0126992:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126999:	eb 0e                	jmp    f01269a9 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f012699b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012699e:	8b 45 80             	mov    -0x80(%ebp),%eax
f01269a1:	01 d0                	add    %edx,%eax
f01269a3:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01269a6:	ff 45 f4             	incl   -0xc(%ebp)
f01269a9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01269af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01269b2:	7f e7                	jg     f012699b <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01269b4:	e8 f9 56 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01269b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269bc:	e8 cb d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01269c1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01269c4:	83 ec 0c             	sub    $0xc,%esp
f01269c7:	68 00 00 10 00       	push   $0x100000
f01269cc:	e8 51 0a fe ff       	call   f0107422 <kmalloc>
f01269d1:	83 c4 10             	add    $0x10,%esp
f01269d4:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01269da:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01269e0:	89 c1                	mov    %eax,%ecx
f01269e2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01269e9:	10 00 00 
f01269ec:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01269f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01269f7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01269fd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126a03:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a08:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126a0e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126a14:	29 d0                	sub    %edx,%eax
f0126a16:	89 c3                	mov    %eax,%ebx
f0126a18:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0126a1f:	10 00 00 
f0126a22:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126a27:	0f b6 d0             	movzbl %al,%edx
f0126a2a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126a30:	01 d0                	add    %edx,%eax
f0126a32:	48                   	dec    %eax
f0126a33:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0126a39:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126a3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a44:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0126a4a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126a50:	29 d0                	sub    %edx,%eax
f0126a52:	01 c3                	add    %eax,%ebx
f0126a54:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0126a5b:	10 00 00 
f0126a5e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126a63:	0f b6 c0             	movzbl %al,%eax
f0126a66:	c1 e0 04             	shl    $0x4,%eax
f0126a69:	89 c2                	mov    %eax,%edx
f0126a6b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0126a71:	01 d0                	add    %edx,%eax
f0126a73:	48                   	dec    %eax
f0126a74:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0126a7a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126a80:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a85:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0126a8b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126a91:	29 d0                	sub    %edx,%eax
f0126a93:	01 d8                	add    %ebx,%eax
f0126a95:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0126a9a:	39 c1                	cmp    %eax,%ecx
f0126a9c:	74 17                	je     f0126ab5 <test_kfreeall+0x1145>
f0126a9e:	83 ec 04             	sub    $0x4,%esp
f0126aa1:	68 3c a6 13 f0       	push   $0xf013a63c
f0126aa6:	68 af 0a 00 00       	push   $0xaaf
f0126aab:	68 56 a5 13 f0       	push   $0xf013a556
f0126ab0:	e8 f1 96 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ab5:	e8 d2 d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126aba:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126abd:	74 17                	je     f0126ad6 <test_kfreeall+0x1166>
f0126abf:	83 ec 04             	sub    $0x4,%esp
f0126ac2:	68 70 a5 13 f0       	push   $0xf013a570
f0126ac7:	68 b0 0a 00 00       	push   $0xab0
f0126acc:	68 56 a5 13 f0       	push   $0xf013a556
f0126ad1:	e8 d0 96 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ad6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126ad9:	e8 d4 55 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126ade:	29 c3                	sub    %eax,%ebx
f0126ae0:	89 d8                	mov    %ebx,%eax
f0126ae2:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126ae7:	74 17                	je     f0126b00 <test_kfreeall+0x1190>
f0126ae9:	83 ec 04             	sub    $0x4,%esp
f0126aec:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0126af1:	68 b1 0a 00 00       	push   $0xab1
f0126af6:	68 56 a5 13 f0       	push   $0xf013a556
f0126afb:	e8 a6 96 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0126b00:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0126b07:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0126b0a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126b10:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0126b13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126b1a:	eb 0e                	jmp    f0126b2a <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0126b1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126b1f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126b22:	01 d0                	add    %edx,%eax
f0126b24:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0126b27:	ff 45 f4             	incl   -0xc(%ebp)
f0126b2a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0126b30:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b33:	7f e7                	jg     f0126b1c <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0126b35:	e8 78 55 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126b3a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b3d:	e8 4a d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126b42:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0126b45:	e8 52 09 fe ff       	call   f010749c <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b4a:	e8 3d d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126b4f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b52:	74 17                	je     f0126b6b <test_kfreeall+0x11fb>
f0126b54:	83 ec 04             	sub    $0x4,%esp
f0126b57:	68 70 a5 13 f0       	push   $0xf013a570
f0126b5c:	68 c1 0a 00 00       	push   $0xac1
f0126b61:	68 56 a5 13 f0       	push   $0xf013a556
f0126b66:	e8 3b 96 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0126b6b:	e8 42 55 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126b70:	89 c2                	mov    %eax,%edx
f0126b72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126b75:	89 d1                	mov    %edx,%ecx
f0126b77:	29 c1                	sub    %eax,%ecx
f0126b79:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0126b80:	10 00 00 
f0126b83:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0126b89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126b8e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0126b94:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126b9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b9f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0126ba5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126bab:	29 d0                	sub    %edx,%eax
f0126bad:	89 c3                	mov    %eax,%ebx
f0126baf:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0126bb6:	10 00 00 
f0126bb9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126bbe:	0f b6 d0             	movzbl %al,%edx
f0126bc1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126bc7:	01 d0                	add    %edx,%eax
f0126bc9:	48                   	dec    %eax
f0126bca:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0126bd0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126bd6:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bdb:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126be1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126be7:	29 d0                	sub    %edx,%eax
f0126be9:	01 c3                	add    %eax,%ebx
f0126beb:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0126bf2:	10 00 00 
f0126bf5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126bfa:	0f b6 c0             	movzbl %al,%eax
f0126bfd:	c1 e0 04             	shl    $0x4,%eax
f0126c00:	89 c2                	mov    %eax,%edx
f0126c02:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126c08:	01 d0                	add    %edx,%eax
f0126c0a:	48                   	dec    %eax
f0126c0b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0126c11:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126c17:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c1c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0126c22:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126c28:	29 d0                	sub    %edx,%eax
f0126c2a:	01 d8                	add    %ebx,%eax
f0126c2c:	05 00 40 00 00       	add    $0x4000,%eax
f0126c31:	c1 e8 0c             	shr    $0xc,%eax
f0126c34:	05 0d 04 00 00       	add    $0x40d,%eax
f0126c39:	39 c1                	cmp    %eax,%ecx
f0126c3b:	74 17                	je     f0126c54 <test_kfreeall+0x12e4>
f0126c3d:	83 ec 04             	sub    $0x4,%esp
f0126c40:	68 e0 ac 13 f0       	push   $0xf013ace0
f0126c45:	68 c2 0a 00 00       	push   $0xac2
f0126c4a:	68 56 a5 13 f0       	push   $0xf013a556
f0126c4f:	e8 52 95 fd ff       	call   f01001a6 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0126c54:	83 ec 0c             	sub    $0xc,%esp
f0126c57:	6a 03                	push   $0x3
f0126c59:	e8 fd 58 fe ff       	call   f010c55b <sys_bypassPageFault>
f0126c5e:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0126c61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c68:	e9 82 00 00 00       	jmp    f0126cef <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0126c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126c70:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0126c77:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0126c7a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c7d:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126c80:	e8 c4 58 fe ff       	call   f010c549 <sys_rcr2>
f0126c85:	89 c2                	mov    %eax,%edx
f0126c87:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c8a:	39 c2                	cmp    %eax,%edx
f0126c8c:	74 17                	je     f0126ca5 <test_kfreeall+0x1335>
f0126c8e:	83 ec 04             	sub    $0x4,%esp
f0126c91:	68 bc ad 13 f0       	push   $0xf013adbc
f0126c96:	68 d0 0a 00 00       	push   $0xad0
f0126c9b:	68 56 a5 13 f0       	push   $0xf013a556
f0126ca0:	e8 01 95 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0126ca5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126ca8:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0126caf:	89 c2                	mov    %eax,%edx
f0126cb1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cb4:	01 d0                	add    %edx,%eax
f0126cb6:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126cb9:	e8 8b 58 fe ff       	call   f010c549 <sys_rcr2>
f0126cbe:	89 c2                	mov    %eax,%edx
f0126cc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126cc3:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0126cca:	89 c1                	mov    %eax,%ecx
f0126ccc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ccf:	01 c8                	add    %ecx,%eax
f0126cd1:	39 c2                	cmp    %eax,%edx
f0126cd3:	74 17                	je     f0126cec <test_kfreeall+0x137c>
f0126cd5:	83 ec 04             	sub    $0x4,%esp
f0126cd8:	68 bc ad 13 f0       	push   $0xf013adbc
f0126cdd:	68 d2 0a 00 00       	push   $0xad2
f0126ce2:	68 56 a5 13 f0       	push   $0xf013a556
f0126ce7:	e8 ba 94 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0126cec:	ff 45 f4             	incl   -0xc(%ebp)
f0126cef:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0126cf3:	0f 8e 74 ff ff ff    	jle    f0126c6d <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0126cf9:	83 ec 0c             	sub    $0xc,%esp
f0126cfc:	6a 00                	push   $0x0
f0126cfe:	e8 58 58 fe ff       	call   f010c55b <sys_bypassPageFault>
f0126d03:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126d06:	e8 a7 53 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126d0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d0e:	e8 79 cf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126d13:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0126d16:	83 ec 0c             	sub    $0xc,%esp
f0126d19:	68 00 00 40 00       	push   $0x400000
f0126d1e:	e8 ff 06 fe ff       	call   f0107422 <kmalloc>
f0126d23:	83 c4 10             	add    $0x10,%esp
f0126d26:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126d2c:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0126d32:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0126d37:	74 17                	je     f0126d50 <test_kfreeall+0x13e0>
f0126d39:	83 ec 04             	sub    $0x4,%esp
f0126d3c:	68 60 b2 13 f0       	push   $0xf013b260
f0126d41:	68 de 0a 00 00       	push   $0xade
f0126d46:	68 56 a5 13 f0       	push   $0xf013a556
f0126d4b:	e8 56 94 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d50:	e8 37 cf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126d55:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126d58:	74 17                	je     f0126d71 <test_kfreeall+0x1401>
f0126d5a:	83 ec 04             	sub    $0x4,%esp
f0126d5d:	68 70 a5 13 f0       	push   $0xf013a570
f0126d62:	68 df 0a 00 00       	push   $0xadf
f0126d67:	68 56 a5 13 f0       	push   $0xf013a556
f0126d6c:	e8 35 94 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126d71:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126d74:	e8 39 53 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126d79:	29 c3                	sub    %eax,%ebx
f0126d7b:	89 d8                	mov    %ebx,%eax
f0126d7d:	3d 00 04 00 00       	cmp    $0x400,%eax
f0126d82:	74 17                	je     f0126d9b <test_kfreeall+0x142b>
f0126d84:	83 ec 04             	sub    $0x4,%esp
f0126d87:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0126d8c:	68 e0 0a 00 00       	push   $0xae0
f0126d91:	68 56 a5 13 f0       	push   $0xf013a556
f0126d96:	e8 0b 94 fd ff       	call   f01001a6 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126d9b:	e8 12 53 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126da0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126da3:	e8 e4 ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126da8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0126dab:	83 ec 0c             	sub    $0xc,%esp
f0126dae:	68 00 30 00 00       	push   $0x3000
f0126db3:	e8 6a 06 fe ff       	call   f0107422 <kmalloc>
f0126db8:	83 c4 10             	add    $0x10,%esp
f0126dbb:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126dc1:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0126dc7:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0126dcc:	74 17                	je     f0126de5 <test_kfreeall+0x1475>
f0126dce:	83 ec 04             	sub    $0x4,%esp
f0126dd1:	68 60 b2 13 f0       	push   $0xf013b260
f0126dd6:	68 e6 0a 00 00       	push   $0xae6
f0126ddb:	68 56 a5 13 f0       	push   $0xf013a556
f0126de0:	e8 c1 93 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126de5:	e8 a2 ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126dea:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ded:	74 17                	je     f0126e06 <test_kfreeall+0x1496>
f0126def:	83 ec 04             	sub    $0x4,%esp
f0126df2:	68 70 a5 13 f0       	push   $0xf013a570
f0126df7:	68 e7 0a 00 00       	push   $0xae7
f0126dfc:	68 56 a5 13 f0       	push   $0xf013a556
f0126e01:	e8 a0 93 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e06:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126e09:	e8 a4 52 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126e0e:	29 c3                	sub    %eax,%ebx
f0126e10:	89 d8                	mov    %ebx,%eax
f0126e12:	83 f8 03             	cmp    $0x3,%eax
f0126e15:	74 17                	je     f0126e2e <test_kfreeall+0x14be>
f0126e17:	83 ec 04             	sub    $0x4,%esp
f0126e1a:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0126e1f:	68 e8 0a 00 00       	push   $0xae8
f0126e24:	68 56 a5 13 f0       	push   $0xf013a556
f0126e29:	e8 78 93 fd ff       	call   f01001a6 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126e2e:	e8 7f 52 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126e33:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e36:	e8 51 ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126e3b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0126e3e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0126e44:	83 ec 0c             	sub    $0xc,%esp
f0126e47:	50                   	push   %eax
f0126e48:	e8 ef 05 fe ff       	call   f010743c <kfree>
f0126e4d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e50:	e8 37 ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126e55:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e58:	74 17                	je     f0126e71 <test_kfreeall+0x1501>
f0126e5a:	83 ec 04             	sub    $0x4,%esp
f0126e5d:	68 70 a5 13 f0       	push   $0xf013a570
f0126e62:	68 f2 0a 00 00       	push   $0xaf2
f0126e67:	68 56 a5 13 f0       	push   $0xf013a556
f0126e6c:	e8 35 93 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126e71:	e8 3c 52 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126e76:	89 c2                	mov    %eax,%edx
f0126e78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126e7b:	29 c2                	sub    %eax,%edx
f0126e7d:	89 d0                	mov    %edx,%eax
f0126e7f:	83 f8 03             	cmp    $0x3,%eax
f0126e82:	74 17                	je     f0126e9b <test_kfreeall+0x152b>
f0126e84:	83 ec 04             	sub    $0x4,%esp
f0126e87:	68 08 ae 13 f0       	push   $0xf013ae08
f0126e8c:	68 f3 0a 00 00       	push   $0xaf3
f0126e91:	68 56 a5 13 f0       	push   $0xf013a556
f0126e96:	e8 0b 93 fd ff       	call   f01001a6 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126e9b:	e8 12 52 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126ea0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ea3:	e8 e4 cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126ea8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0126eab:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126eb1:	83 ec 0c             	sub    $0xc,%esp
f0126eb4:	50                   	push   %eax
f0126eb5:	e8 82 05 fe ff       	call   f010743c <kfree>
f0126eba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ebd:	e8 ca cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126ec2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ec5:	74 17                	je     f0126ede <test_kfreeall+0x156e>
f0126ec7:	83 ec 04             	sub    $0x4,%esp
f0126eca:	68 70 a5 13 f0       	push   $0xf013a570
f0126ecf:	68 fc 0a 00 00       	push   $0xafc
f0126ed4:	68 56 a5 13 f0       	push   $0xf013a556
f0126ed9:	e8 c8 92 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126ede:	e8 cf 51 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126ee3:	89 c2                	mov    %eax,%edx
f0126ee5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126ee8:	39 c2                	cmp    %eax,%edx
f0126eea:	74 17                	je     f0126f03 <test_kfreeall+0x1593>
f0126eec:	83 ec 04             	sub    $0x4,%esp
f0126eef:	68 08 ae 13 f0       	push   $0xf013ae08
f0126ef4:	68 fd 0a 00 00       	push   $0xafd
f0126ef9:	68 56 a5 13 f0       	push   $0xf013a556
f0126efe:	e8 a3 92 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126f03:	e8 aa 51 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126f08:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f0b:	e8 7c cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126f10:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0126f13:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126f19:	83 ec 0c             	sub    $0xc,%esp
f0126f1c:	50                   	push   %eax
f0126f1d:	e8 1a 05 fe ff       	call   f010743c <kfree>
f0126f22:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f25:	e8 62 cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126f2a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f2d:	74 17                	je     f0126f46 <test_kfreeall+0x15d6>
f0126f2f:	83 ec 04             	sub    $0x4,%esp
f0126f32:	68 70 a5 13 f0       	push   $0xf013a570
f0126f37:	68 03 0b 00 00       	push   $0xb03
f0126f3c:	68 56 a5 13 f0       	push   $0xf013a556
f0126f41:	e8 60 92 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126f46:	e8 67 51 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126f4b:	89 c2                	mov    %eax,%edx
f0126f4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126f50:	39 c2                	cmp    %eax,%edx
f0126f52:	74 17                	je     f0126f6b <test_kfreeall+0x15fb>
f0126f54:	83 ec 04             	sub    $0x4,%esp
f0126f57:	68 08 ae 13 f0       	push   $0xf013ae08
f0126f5c:	68 04 0b 00 00       	push   $0xb04
f0126f61:	68 56 a5 13 f0       	push   $0xf013a556
f0126f66:	e8 3b 92 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126f6b:	e8 42 51 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126f70:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f73:	e8 14 cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126f78:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0126f7b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126f81:	83 ec 0c             	sub    $0xc,%esp
f0126f84:	50                   	push   %eax
f0126f85:	e8 b2 04 fe ff       	call   f010743c <kfree>
f0126f8a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f8d:	e8 fa cc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126f92:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f95:	74 17                	je     f0126fae <test_kfreeall+0x163e>
f0126f97:	83 ec 04             	sub    $0x4,%esp
f0126f9a:	68 70 a5 13 f0       	push   $0xf013a570
f0126f9f:	68 0a 0b 00 00       	push   $0xb0a
f0126fa4:	68 56 a5 13 f0       	push   $0xf013a556
f0126fa9:	e8 f8 91 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126fae:	e8 ff 50 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0126fb3:	89 c2                	mov    %eax,%edx
f0126fb5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126fb8:	39 c2                	cmp    %eax,%edx
f0126fba:	74 17                	je     f0126fd3 <test_kfreeall+0x1663>
f0126fbc:	83 ec 04             	sub    $0x4,%esp
f0126fbf:	68 08 ae 13 f0       	push   $0xf013ae08
f0126fc4:	68 0b 0b 00 00       	push   $0xb0b
f0126fc9:	68 56 a5 13 f0       	push   $0xf013a556
f0126fce:	e8 d3 91 fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126fd3:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0126fda:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0126fe1:	eb 48                	jmp    f012702b <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0126fe3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0126fe6:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0126feb:	83 ec 04             	sub    $0x4,%esp
f0126fee:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0126ff4:	51                   	push   %ecx
f0126ff5:	52                   	push   %edx
f0126ff6:	50                   	push   %eax
f0126ff7:	e8 6d f9 fd ff       	call   f0106969 <get_page_table>
f0126ffc:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0126fff:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127005:	85 c0                	test   %eax,%eax
f0127007:	75 17                	jne    f0127020 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127009:	83 ec 04             	sub    $0x4,%esp
f012700c:	68 58 ae 13 f0       	push   $0xf013ae58
f0127011:	68 18 0b 00 00       	push   $0xb18
f0127016:	68 56 a5 13 f0       	push   $0xf013a556
f012701b:	e8 86 91 fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127020:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127027:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012702b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012702f:	78 b2                	js     f0126fe3 <test_kfreeall+0x1673>
f0127031:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127035:	7f 09                	jg     f0127040 <test_kfreeall+0x16d0>
f0127037:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012703e:	76 a3                	jbe    f0126fe3 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127040:	83 ec 0c             	sub    $0xc,%esp
f0127043:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127048:	e8 e0 9b fd ff       	call   f0100c2d <cprintf>
f012704d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127050:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127055:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127058:	5b                   	pop    %ebx
f0127059:	5f                   	pop    %edi
f012705a:	5d                   	pop    %ebp
f012705b:	c3                   	ret    

f012705c <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f012705c:	55                   	push   %ebp
f012705d:	89 e5                	mov    %esp,%ebp
f012705f:	57                   	push   %edi
f0127060:	53                   	push   %ebx
f0127061:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127067:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f012706b:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012706f:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127075:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f012707b:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127082:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127089:	e8 24 50 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012708e:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127091:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0127097:	b9 14 00 00 00       	mov    $0x14,%ecx
f012709c:	b8 00 00 00 00       	mov    $0x0,%eax
f01270a1:	89 d7                	mov    %edx,%edi
f01270a3:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01270a5:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f01270ab:	b9 14 00 00 00       	mov    $0x14,%ecx
f01270b0:	b8 00 00 00 00       	mov    $0x0,%eax
f01270b5:	89 d7                	mov    %edx,%edi
f01270b7:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01270b9:	e8 f4 4f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01270be:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270c1:	e8 c6 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01270c6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01270c9:	83 ec 0c             	sub    $0xc,%esp
f01270cc:	68 00 fc 1f 00       	push   $0x1ffc00
f01270d1:	e8 4c 03 fe ff       	call   f0107422 <kmalloc>
f01270d6:	83 c4 10             	add    $0x10,%esp
f01270d9:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01270df:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01270e5:	89 c1                	mov    %eax,%ecx
f01270e7:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01270ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01270f1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01270f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01270f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01270fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0127101:	f7 75 d4             	divl   -0x2c(%ebp)
f0127104:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127107:	29 d0                	sub    %edx,%eax
f0127109:	89 c3                	mov    %eax,%ebx
f012710b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127112:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127117:	0f b6 d0             	movzbl %al,%edx
f012711a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012711d:	01 d0                	add    %edx,%eax
f012711f:	48                   	dec    %eax
f0127120:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127123:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127126:	ba 00 00 00 00       	mov    $0x0,%edx
f012712b:	f7 75 cc             	divl   -0x34(%ebp)
f012712e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127131:	29 d0                	sub    %edx,%eax
f0127133:	01 c3                	add    %eax,%ebx
f0127135:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012713c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127141:	0f b6 c0             	movzbl %al,%eax
f0127144:	c1 e0 04             	shl    $0x4,%eax
f0127147:	89 c2                	mov    %eax,%edx
f0127149:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012714c:	01 d0                	add    %edx,%eax
f012714e:	48                   	dec    %eax
f012714f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127152:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127155:	ba 00 00 00 00       	mov    $0x0,%edx
f012715a:	f7 75 c4             	divl   -0x3c(%ebp)
f012715d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127160:	29 d0                	sub    %edx,%eax
f0127162:	01 d8                	add    %ebx,%eax
f0127164:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127169:	39 c1                	cmp    %eax,%ecx
f012716b:	74 17                	je     f0127184 <test_kexpand+0x128>
f012716d:	83 ec 04             	sub    $0x4,%esp
f0127170:	68 3c a6 13 f0       	push   $0xf013a63c
f0127175:	68 43 0b 00 00       	push   $0xb43
f012717a:	68 56 a5 13 f0       	push   $0xf013a556
f012717f:	e8 22 90 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127184:	e8 03 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127189:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012718c:	74 17                	je     f01271a5 <test_kexpand+0x149>
f012718e:	83 ec 04             	sub    $0x4,%esp
f0127191:	68 70 a5 13 f0       	push   $0xf013a570
f0127196:	68 44 0b 00 00       	push   $0xb44
f012719b:	68 56 a5 13 f0       	push   $0xf013a556
f01271a0:	e8 01 90 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01271a5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01271a8:	e8 05 4f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01271ad:	29 c3                	sub    %eax,%ebx
f01271af:	89 d8                	mov    %ebx,%eax
f01271b1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01271b6:	74 17                	je     f01271cf <test_kexpand+0x173>
f01271b8:	83 ec 04             	sub    $0x4,%esp
f01271bb:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01271c0:	68 45 0b 00 00       	push   $0xb45
f01271c5:	68 56 a5 13 f0       	push   $0xf013a556
f01271ca:	e8 d7 8f fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01271cf:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f01271d6:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01271d9:	e8 d4 4e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01271de:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271e1:	e8 a6 ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01271e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01271e9:	83 ec 0c             	sub    $0xc,%esp
f01271ec:	68 00 fc 1f 00       	push   $0x1ffc00
f01271f1:	e8 2c 02 fe ff       	call   f0107422 <kmalloc>
f01271f6:	83 c4 10             	add    $0x10,%esp
f01271f9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01271ff:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127205:	89 c1                	mov    %eax,%ecx
f0127207:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012720e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127211:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127216:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127219:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012721c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127221:	f7 75 bc             	divl   -0x44(%ebp)
f0127224:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127227:	29 d0                	sub    %edx,%eax
f0127229:	89 c3                	mov    %eax,%ebx
f012722b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127232:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127237:	0f b6 d0             	movzbl %al,%edx
f012723a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012723d:	01 d0                	add    %edx,%eax
f012723f:	48                   	dec    %eax
f0127240:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127243:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127246:	ba 00 00 00 00       	mov    $0x0,%edx
f012724b:	f7 75 b4             	divl   -0x4c(%ebp)
f012724e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127251:	29 d0                	sub    %edx,%eax
f0127253:	01 c3                	add    %eax,%ebx
f0127255:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012725c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127261:	0f b6 c0             	movzbl %al,%eax
f0127264:	c1 e0 04             	shl    $0x4,%eax
f0127267:	89 c2                	mov    %eax,%edx
f0127269:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012726c:	01 d0                	add    %edx,%eax
f012726e:	48                   	dec    %eax
f012726f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127272:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127275:	ba 00 00 00 00       	mov    $0x0,%edx
f012727a:	f7 75 ac             	divl   -0x54(%ebp)
f012727d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127280:	29 d0                	sub    %edx,%eax
f0127282:	01 d8                	add    %ebx,%eax
f0127284:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127289:	39 c1                	cmp    %eax,%ecx
f012728b:	74 17                	je     f01272a4 <test_kexpand+0x248>
f012728d:	83 ec 04             	sub    $0x4,%esp
f0127290:	68 3c a6 13 f0       	push   $0xf013a63c
f0127295:	68 4c 0b 00 00       	push   $0xb4c
f012729a:	68 56 a5 13 f0       	push   $0xf013a556
f012729f:	e8 02 8f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01272a4:	e8 e3 c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01272a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01272ac:	74 17                	je     f01272c5 <test_kexpand+0x269>
f01272ae:	83 ec 04             	sub    $0x4,%esp
f01272b1:	68 70 a5 13 f0       	push   $0xf013a570
f01272b6:	68 4d 0b 00 00       	push   $0xb4d
f01272bb:	68 56 a5 13 f0       	push   $0xf013a556
f01272c0:	e8 e1 8e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01272c5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01272c8:	e8 e5 4d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01272cd:	29 c3                	sub    %eax,%ebx
f01272cf:	89 d8                	mov    %ebx,%eax
f01272d1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01272d6:	74 17                	je     f01272ef <test_kexpand+0x293>
f01272d8:	83 ec 04             	sub    $0x4,%esp
f01272db:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01272e0:	68 4e 0b 00 00       	push   $0xb4e
f01272e5:	68 56 a5 13 f0       	push   $0xf013a556
f01272ea:	e8 b7 8e fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01272ef:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01272f6:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01272f9:	e8 b4 4d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01272fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127301:	e8 86 c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127306:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127309:	83 ec 0c             	sub    $0xc,%esp
f012730c:	68 00 08 00 00       	push   $0x800
f0127311:	e8 0c 01 fe ff       	call   f0107422 <kmalloc>
f0127316:	83 c4 10             	add    $0x10,%esp
f0127319:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012731f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127325:	89 c1                	mov    %eax,%ecx
f0127327:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012732e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127331:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127336:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127339:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012733c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127341:	f7 75 a4             	divl   -0x5c(%ebp)
f0127344:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127347:	29 d0                	sub    %edx,%eax
f0127349:	89 c3                	mov    %eax,%ebx
f012734b:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127352:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127357:	0f b6 d0             	movzbl %al,%edx
f012735a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012735d:	01 d0                	add    %edx,%eax
f012735f:	48                   	dec    %eax
f0127360:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127363:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127366:	ba 00 00 00 00       	mov    $0x0,%edx
f012736b:	f7 75 9c             	divl   -0x64(%ebp)
f012736e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127371:	29 d0                	sub    %edx,%eax
f0127373:	01 c3                	add    %eax,%ebx
f0127375:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012737c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127381:	0f b6 c0             	movzbl %al,%eax
f0127384:	c1 e0 04             	shl    $0x4,%eax
f0127387:	89 c2                	mov    %eax,%edx
f0127389:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012738c:	01 d0                	add    %edx,%eax
f012738e:	48                   	dec    %eax
f012738f:	89 45 90             	mov    %eax,-0x70(%ebp)
f0127392:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127395:	ba 00 00 00 00       	mov    $0x0,%edx
f012739a:	f7 75 94             	divl   -0x6c(%ebp)
f012739d:	8b 45 90             	mov    -0x70(%ebp),%eax
f01273a0:	29 d0                	sub    %edx,%eax
f01273a2:	01 d8                	add    %ebx,%eax
f01273a4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01273a9:	39 c1                	cmp    %eax,%ecx
f01273ab:	74 17                	je     f01273c4 <test_kexpand+0x368>
f01273ad:	83 ec 04             	sub    $0x4,%esp
f01273b0:	68 3c a6 13 f0       	push   $0xf013a63c
f01273b5:	68 55 0b 00 00       	push   $0xb55
f01273ba:	68 56 a5 13 f0       	push   $0xf013a556
f01273bf:	e8 e2 8d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273c4:	e8 c3 c8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01273c9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01273cc:	74 17                	je     f01273e5 <test_kexpand+0x389>
f01273ce:	83 ec 04             	sub    $0x4,%esp
f01273d1:	68 70 a5 13 f0       	push   $0xf013a570
f01273d6:	68 56 0b 00 00       	push   $0xb56
f01273db:	68 56 a5 13 f0       	push   $0xf013a556
f01273e0:	e8 c1 8d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273e5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01273e8:	e8 c5 4c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01273ed:	29 c3                	sub    %eax,%ebx
f01273ef:	89 d8                	mov    %ebx,%eax
f01273f1:	83 f8 01             	cmp    $0x1,%eax
f01273f4:	74 17                	je     f012740d <test_kexpand+0x3b1>
f01273f6:	83 ec 04             	sub    $0x4,%esp
f01273f9:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01273fe:	68 57 0b 00 00       	push   $0xb57
f0127403:	68 56 a5 13 f0       	push   $0xf013a556
f0127408:	e8 99 8d fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012740d:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0127414:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127417:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012741d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127420:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127427:	eb 0e                	jmp    f0127437 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0127429:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012742c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012742f:	01 d0                	add    %edx,%eax
f0127431:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127434:	ff 45 f4             	incl   -0xc(%ebp)
f0127437:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012743d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127440:	7f e7                	jg     f0127429 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127442:	e8 6b 4c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127447:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012744a:	e8 3d c8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012744f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127452:	83 ec 0c             	sub    $0xc,%esp
f0127455:	68 00 08 00 00       	push   $0x800
f012745a:	e8 c3 ff fd ff       	call   f0107422 <kmalloc>
f012745f:	83 c4 10             	add    $0x10,%esp
f0127462:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127468:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012746e:	89 c1                	mov    %eax,%ecx
f0127470:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127477:	8b 45 88             	mov    -0x78(%ebp),%eax
f012747a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012747f:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127482:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127485:	ba 00 00 00 00       	mov    $0x0,%edx
f012748a:	f7 75 88             	divl   -0x78(%ebp)
f012748d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127490:	29 d0                	sub    %edx,%eax
f0127492:	89 c3                	mov    %eax,%ebx
f0127494:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012749b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01274a0:	0f b6 d0             	movzbl %al,%edx
f01274a3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01274a6:	01 d0                	add    %edx,%eax
f01274a8:	48                   	dec    %eax
f01274a9:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01274af:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01274b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01274ba:	f7 75 80             	divl   -0x80(%ebp)
f01274bd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01274c3:	29 d0                	sub    %edx,%eax
f01274c5:	01 c3                	add    %eax,%ebx
f01274c7:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01274ce:	10 00 00 
f01274d1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01274d6:	0f b6 c0             	movzbl %al,%eax
f01274d9:	c1 e0 04             	shl    $0x4,%eax
f01274dc:	89 c2                	mov    %eax,%edx
f01274de:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01274e4:	01 d0                	add    %edx,%eax
f01274e6:	48                   	dec    %eax
f01274e7:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01274ed:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01274f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01274f8:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01274fe:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127504:	29 d0                	sub    %edx,%eax
f0127506:	01 d8                	add    %ebx,%eax
f0127508:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012750d:	39 c1                	cmp    %eax,%ecx
f012750f:	74 17                	je     f0127528 <test_kexpand+0x4cc>
f0127511:	83 ec 04             	sub    $0x4,%esp
f0127514:	68 3c a6 13 f0       	push   $0xf013a63c
f0127519:	68 63 0b 00 00       	push   $0xb63
f012751e:	68 56 a5 13 f0       	push   $0xf013a556
f0127523:	e8 7e 8c fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127528:	e8 5f c7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012752d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127530:	74 17                	je     f0127549 <test_kexpand+0x4ed>
f0127532:	83 ec 04             	sub    $0x4,%esp
f0127535:	68 70 a5 13 f0       	push   $0xf013a570
f012753a:	68 64 0b 00 00       	push   $0xb64
f012753f:	68 56 a5 13 f0       	push   $0xf013a556
f0127544:	e8 5d 8c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127549:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012754c:	e8 61 4b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127551:	29 c3                	sub    %eax,%ebx
f0127553:	89 d8                	mov    %ebx,%eax
f0127555:	83 f8 01             	cmp    $0x1,%eax
f0127558:	74 17                	je     f0127571 <test_kexpand+0x515>
f012755a:	83 ec 04             	sub    $0x4,%esp
f012755d:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0127562:	68 65 0b 00 00       	push   $0xb65
f0127567:	68 56 a5 13 f0       	push   $0xf013a556
f012756c:	e8 35 8c fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127571:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0127578:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012757b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127581:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127584:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012758b:	eb 0e                	jmp    f012759b <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f012758d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127590:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127593:	01 d0                	add    %edx,%eax
f0127595:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127598:	ff 45 f4             	incl   -0xc(%ebp)
f012759b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01275a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01275a4:	7f e7                	jg     f012758d <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01275a6:	e8 07 4b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01275ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275ae:	e8 d9 c6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01275b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01275b6:	83 ec 0c             	sub    $0xc,%esp
f01275b9:	68 00 1c 00 00       	push   $0x1c00
f01275be:	e8 5f fe fd ff       	call   f0107422 <kmalloc>
f01275c3:	83 c4 10             	add    $0x10,%esp
f01275c6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01275cc:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01275d2:	89 c1                	mov    %eax,%ecx
f01275d4:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01275db:	10 00 00 
f01275de:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01275e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01275e9:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01275ef:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01275f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01275fa:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127600:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127606:	29 d0                	sub    %edx,%eax
f0127608:	89 c3                	mov    %eax,%ebx
f012760a:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127611:	10 00 00 
f0127614:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127619:	0f b6 d0             	movzbl %al,%edx
f012761c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127622:	01 d0                	add    %edx,%eax
f0127624:	48                   	dec    %eax
f0127625:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012762b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127631:	ba 00 00 00 00       	mov    $0x0,%edx
f0127636:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012763c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127642:	29 d0                	sub    %edx,%eax
f0127644:	01 c3                	add    %eax,%ebx
f0127646:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012764d:	10 00 00 
f0127650:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127655:	0f b6 c0             	movzbl %al,%eax
f0127658:	c1 e0 04             	shl    $0x4,%eax
f012765b:	89 c2                	mov    %eax,%edx
f012765d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127663:	01 d0                	add    %edx,%eax
f0127665:	48                   	dec    %eax
f0127666:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012766c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127672:	ba 00 00 00 00       	mov    $0x0,%edx
f0127677:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012767d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127683:	29 d0                	sub    %edx,%eax
f0127685:	01 d8                	add    %ebx,%eax
f0127687:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012768c:	39 c1                	cmp    %eax,%ecx
f012768e:	74 17                	je     f01276a7 <test_kexpand+0x64b>
f0127690:	83 ec 04             	sub    $0x4,%esp
f0127693:	68 3c a6 13 f0       	push   $0xf013a63c
f0127698:	68 71 0b 00 00       	push   $0xb71
f012769d:	68 56 a5 13 f0       	push   $0xf013a556
f01276a2:	e8 ff 8a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276a7:	e8 e0 c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01276ac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276af:	74 17                	je     f01276c8 <test_kexpand+0x66c>
f01276b1:	83 ec 04             	sub    $0x4,%esp
f01276b4:	68 70 a5 13 f0       	push   $0xf013a570
f01276b9:	68 72 0b 00 00       	push   $0xb72
f01276be:	68 56 a5 13 f0       	push   $0xf013a556
f01276c3:	e8 de 8a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276c8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276cb:	e8 e2 49 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01276d0:	29 c3                	sub    %eax,%ebx
f01276d2:	89 d8                	mov    %ebx,%eax
f01276d4:	83 f8 02             	cmp    $0x2,%eax
f01276d7:	74 17                	je     f01276f0 <test_kexpand+0x694>
f01276d9:	83 ec 04             	sub    $0x4,%esp
f01276dc:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01276e1:	68 73 0b 00 00       	push   $0xb73
f01276e6:	68 56 a5 13 f0       	push   $0xf013a556
f01276eb:	e8 b6 8a fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01276f0:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f01276f7:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01276fa:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127700:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127703:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012770a:	eb 0e                	jmp    f012771a <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f012770c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012770f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127712:	01 d0                	add    %edx,%eax
f0127714:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127717:	ff 45 f4             	incl   -0xc(%ebp)
f012771a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127720:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127723:	7f e7                	jg     f012770c <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127725:	e8 88 49 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012772a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012772d:	e8 5a c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127732:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127735:	83 ec 0c             	sub    $0xc,%esp
f0127738:	68 00 fc 2f 00       	push   $0x2ffc00
f012773d:	e8 e0 fc fd ff       	call   f0107422 <kmalloc>
f0127742:	83 c4 10             	add    $0x10,%esp
f0127745:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012774b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127751:	89 c1                	mov    %eax,%ecx
f0127753:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012775a:	10 00 00 
f012775d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127763:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127768:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012776e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127774:	ba 00 00 00 00       	mov    $0x0,%edx
f0127779:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012777f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127785:	29 d0                	sub    %edx,%eax
f0127787:	89 c3                	mov    %eax,%ebx
f0127789:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127790:	10 00 00 
f0127793:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127798:	0f b6 d0             	movzbl %al,%edx
f012779b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01277a1:	01 d0                	add    %edx,%eax
f01277a3:	48                   	dec    %eax
f01277a4:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01277aa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01277b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01277b5:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01277bb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01277c1:	29 d0                	sub    %edx,%eax
f01277c3:	01 c3                	add    %eax,%ebx
f01277c5:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01277cc:	10 00 00 
f01277cf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01277d4:	0f b6 c0             	movzbl %al,%eax
f01277d7:	c1 e0 04             	shl    $0x4,%eax
f01277da:	89 c2                	mov    %eax,%edx
f01277dc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01277e2:	01 d0                	add    %edx,%eax
f01277e4:	48                   	dec    %eax
f01277e5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01277eb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01277f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01277f6:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01277fc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127802:	29 d0                	sub    %edx,%eax
f0127804:	01 d8                	add    %ebx,%eax
f0127806:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012780b:	39 c1                	cmp    %eax,%ecx
f012780d:	74 17                	je     f0127826 <test_kexpand+0x7ca>
f012780f:	83 ec 04             	sub    $0x4,%esp
f0127812:	68 3c a6 13 f0       	push   $0xf013a63c
f0127817:	68 7f 0b 00 00       	push   $0xb7f
f012781c:	68 56 a5 13 f0       	push   $0xf013a556
f0127821:	e8 80 89 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127826:	e8 61 c4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012782b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012782e:	74 17                	je     f0127847 <test_kexpand+0x7eb>
f0127830:	83 ec 04             	sub    $0x4,%esp
f0127833:	68 70 a5 13 f0       	push   $0xf013a570
f0127838:	68 80 0b 00 00       	push   $0xb80
f012783d:	68 56 a5 13 f0       	push   $0xf013a556
f0127842:	e8 5f 89 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127847:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012784a:	e8 63 48 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012784f:	29 c3                	sub    %eax,%ebx
f0127851:	89 d8                	mov    %ebx,%eax
f0127853:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127858:	74 17                	je     f0127871 <test_kexpand+0x815>
f012785a:	83 ec 04             	sub    $0x4,%esp
f012785d:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0127862:	68 81 0b 00 00       	push   $0xb81
f0127867:	68 56 a5 13 f0       	push   $0xf013a556
f012786c:	e8 35 89 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127871:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0127878:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012787b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127881:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127884:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012788b:	eb 0e                	jmp    f012789b <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f012788d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127890:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127893:	01 d0                	add    %edx,%eax
f0127895:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127898:	ff 45 f4             	incl   -0xc(%ebp)
f012789b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01278a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01278a4:	7f e7                	jg     f012788d <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01278a6:	e8 07 48 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01278ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278ae:	e8 d9 c3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01278b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01278b6:	83 ec 0c             	sub    $0xc,%esp
f01278b9:	68 00 00 60 00       	push   $0x600000
f01278be:	e8 5f fb fd ff       	call   f0107422 <kmalloc>
f01278c3:	83 c4 10             	add    $0x10,%esp
f01278c6:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01278cc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01278d2:	89 c1                	mov    %eax,%ecx
f01278d4:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01278db:	10 00 00 
f01278de:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01278e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01278e9:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01278ef:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01278f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01278fa:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127900:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127906:	29 d0                	sub    %edx,%eax
f0127908:	89 c3                	mov    %eax,%ebx
f012790a:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0127911:	10 00 00 
f0127914:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127919:	0f b6 d0             	movzbl %al,%edx
f012791c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127922:	01 d0                	add    %edx,%eax
f0127924:	48                   	dec    %eax
f0127925:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012792b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127931:	ba 00 00 00 00       	mov    $0x0,%edx
f0127936:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012793c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127942:	29 d0                	sub    %edx,%eax
f0127944:	01 c3                	add    %eax,%ebx
f0127946:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012794d:	10 00 00 
f0127950:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127955:	0f b6 c0             	movzbl %al,%eax
f0127958:	c1 e0 04             	shl    $0x4,%eax
f012795b:	89 c2                	mov    %eax,%edx
f012795d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127963:	01 d0                	add    %edx,%eax
f0127965:	48                   	dec    %eax
f0127966:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012796c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127972:	ba 00 00 00 00       	mov    $0x0,%edx
f0127977:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012797d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127983:	29 d0                	sub    %edx,%eax
f0127985:	01 d8                	add    %ebx,%eax
f0127987:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012798c:	39 c1                	cmp    %eax,%ecx
f012798e:	74 17                	je     f01279a7 <test_kexpand+0x94b>
f0127990:	83 ec 04             	sub    $0x4,%esp
f0127993:	68 3c a6 13 f0       	push   $0xf013a63c
f0127998:	68 8d 0b 00 00       	push   $0xb8d
f012799d:	68 56 a5 13 f0       	push   $0xf013a556
f01279a2:	e8 ff 87 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01279a7:	e8 e0 c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01279ac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01279af:	74 17                	je     f01279c8 <test_kexpand+0x96c>
f01279b1:	83 ec 04             	sub    $0x4,%esp
f01279b4:	68 70 a5 13 f0       	push   $0xf013a570
f01279b9:	68 8e 0b 00 00       	push   $0xb8e
f01279be:	68 56 a5 13 f0       	push   $0xf013a556
f01279c3:	e8 de 87 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01279c8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01279cb:	e8 e2 46 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01279d0:	29 c3                	sub    %eax,%ebx
f01279d2:	89 d8                	mov    %ebx,%eax
f01279d4:	3d 00 06 00 00       	cmp    $0x600,%eax
f01279d9:	74 17                	je     f01279f2 <test_kexpand+0x996>
f01279db:	83 ec 04             	sub    $0x4,%esp
f01279de:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01279e3:	68 8f 0b 00 00       	push   $0xb8f
f01279e8:	68 56 a5 13 f0       	push   $0xf013a556
f01279ed:	e8 b4 87 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01279f2:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f01279f9:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01279fc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127a02:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127a08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a0f:	eb 1a                	jmp    f0127a2b <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0127a11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127a14:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127a1b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127a21:	01 c2                	add    %eax,%edx
f0127a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127a26:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127a28:	ff 45 f4             	incl   -0xc(%ebp)
f0127a2b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127a31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a34:	7d db                	jge    f0127a11 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0127a36:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0127a3d:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0127a40:	e8 6d 46 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127a45:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a48:	e8 3f c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127a4d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0127a50:	83 ec 0c             	sub    $0xc,%esp
f0127a53:	68 00 00 70 00       	push   $0x700000
f0127a58:	e8 73 fa fd ff       	call   f01074d0 <kexpand>
f0127a5d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127a60:	e8 27 c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127a65:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127a68:	74 19                	je     f0127a83 <test_kexpand+0xa27>
f0127a6a:	68 f0 b2 13 f0       	push   $0xf013b2f0
f0127a6f:	68 21 b3 13 f0       	push   $0xf013b321
f0127a74:	68 a0 0b 00 00       	push   $0xba0
f0127a79:	68 56 a5 13 f0       	push   $0xf013a556
f0127a7e:	e8 23 87 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0127a83:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127a86:	e8 27 46 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127a8b:	29 c3                	sub    %eax,%ebx
f0127a8d:	89 d8                	mov    %ebx,%eax
f0127a8f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127a94:	74 19                	je     f0127aaf <test_kexpand+0xa53>
f0127a96:	68 38 b3 13 f0       	push   $0xf013b338
f0127a9b:	68 21 b3 13 f0       	push   $0xf013b321
f0127aa0:	68 a1 0b 00 00       	push   $0xba1
f0127aa5:	68 56 a5 13 f0       	push   $0xf013a556
f0127aaa:	e8 f7 86 fd ff       	call   f01001a6 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127aaf:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127ab5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0127ab8:	eb 1a                	jmp    f0127ad4 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0127aba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127ac4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127aca:	01 c2                	add    %eax,%edx
f0127acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127acf:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127ad1:	ff 45 f4             	incl   -0xc(%ebp)
f0127ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127ad7:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127add:	7c db                	jl     f0127aba <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127adf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ae6:	eb 37                	jmp    f0127b1f <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0127ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127aeb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127af2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127af8:	01 d0                	add    %edx,%eax
f0127afa:	8b 10                	mov    (%eax),%edx
f0127afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127aff:	39 c2                	cmp    %eax,%edx
f0127b01:	74 19                	je     f0127b1c <test_kexpand+0xac0>
f0127b03:	68 68 b3 13 f0       	push   $0xf013b368
f0127b08:	68 21 b3 13 f0       	push   $0xf013b321
f0127b0d:	68 ad 0b 00 00       	push   $0xbad
f0127b12:	68 56 a5 13 f0       	push   $0xf013a556
f0127b17:	e8 8a 86 fd ff       	call   f01001a6 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127b1c:	ff 45 f4             	incl   -0xc(%ebp)
f0127b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127b22:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127b28:	7c be                	jl     f0127ae8 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127b2a:	e8 83 45 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127b2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b32:	e8 55 c1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127b37:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0127b3a:	83 ec 0c             	sub    $0xc,%esp
f0127b3d:	68 00 00 a0 00       	push   $0xa00000
f0127b42:	e8 89 f9 fd ff       	call   f01074d0 <kexpand>
f0127b47:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127b4a:	e8 3d c1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127b4f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b52:	74 19                	je     f0127b6d <test_kexpand+0xb11>
f0127b54:	68 f0 b2 13 f0       	push   $0xf013b2f0
f0127b59:	68 21 b3 13 f0       	push   $0xf013b321
f0127b5e:	68 b8 0b 00 00       	push   $0xbb8
f0127b63:	68 56 a5 13 f0       	push   $0xf013a556
f0127b68:	e8 39 86 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0127b6d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b70:	e8 3d 45 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127b75:	29 c3                	sub    %eax,%ebx
f0127b77:	89 d8                	mov    %ebx,%eax
f0127b79:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127b7e:	74 19                	je     f0127b99 <test_kexpand+0xb3d>
f0127b80:	68 74 b3 13 f0       	push   $0xf013b374
f0127b85:	68 21 b3 13 f0       	push   $0xf013b321
f0127b8a:	68 b9 0b 00 00       	push   $0xbb9
f0127b8f:	68 56 a5 13 f0       	push   $0xf013a556
f0127b94:	e8 0d 86 fd ff       	call   f01001a6 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127b99:	e8 14 45 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127b9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ba1:	e8 e6 c0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127ba6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127ba9:	83 ec 0c             	sub    $0xc,%esp
f0127bac:	68 00 00 40 00       	push   $0x400000
f0127bb1:	e8 6c f8 fd ff       	call   f0107422 <kmalloc>
f0127bb6:	83 c4 10             	add    $0x10,%esp
f0127bb9:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0127bbf:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127bc5:	89 c1                	mov    %eax,%ecx
f0127bc7:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0127bce:	10 00 00 
f0127bd1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127bd7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127bdc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0127be2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127be8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bed:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0127bf3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127bf9:	29 d0                	sub    %edx,%eax
f0127bfb:	89 c3                	mov    %eax,%ebx
f0127bfd:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0127c04:	10 00 00 
f0127c07:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127c0c:	0f b6 d0             	movzbl %al,%edx
f0127c0f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127c15:	01 d0                	add    %edx,%eax
f0127c17:	48                   	dec    %eax
f0127c18:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0127c1e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c29:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0127c2f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127c35:	29 d0                	sub    %edx,%eax
f0127c37:	01 c3                	add    %eax,%ebx
f0127c39:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0127c40:	10 00 00 
f0127c43:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127c48:	0f b6 c0             	movzbl %al,%eax
f0127c4b:	c1 e0 04             	shl    $0x4,%eax
f0127c4e:	89 c2                	mov    %eax,%edx
f0127c50:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127c56:	01 d0                	add    %edx,%eax
f0127c58:	48                   	dec    %eax
f0127c59:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0127c5f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127c65:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c6a:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0127c70:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127c76:	29 d0                	sub    %edx,%eax
f0127c78:	01 d8                	add    %ebx,%eax
f0127c7a:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0127c7f:	39 c1                	cmp    %eax,%ecx
f0127c81:	74 17                	je     f0127c9a <test_kexpand+0xc3e>
f0127c83:	83 ec 04             	sub    $0x4,%esp
f0127c86:	68 a4 b3 13 f0       	push   $0xf013b3a4
f0127c8b:	68 c4 0b 00 00       	push   $0xbc4
f0127c90:	68 56 a5 13 f0       	push   $0xf013a556
f0127c95:	e8 0c 85 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c9a:	e8 ed bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127c9f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127ca2:	74 17                	je     f0127cbb <test_kexpand+0xc5f>
f0127ca4:	83 ec 04             	sub    $0x4,%esp
f0127ca7:	68 70 a5 13 f0       	push   $0xf013a570
f0127cac:	68 c5 0b 00 00       	push   $0xbc5
f0127cb1:	68 56 a5 13 f0       	push   $0xf013a556
f0127cb6:	e8 eb 84 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127cbb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127cbe:	e8 ef 43 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127cc3:	29 c3                	sub    %eax,%ebx
f0127cc5:	89 d8                	mov    %ebx,%eax
f0127cc7:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127ccc:	74 17                	je     f0127ce5 <test_kexpand+0xc89>
f0127cce:	83 ec 04             	sub    $0x4,%esp
f0127cd1:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0127cd6:	68 c6 0b 00 00       	push   $0xbc6
f0127cdb:	68 56 a5 13 f0       	push   $0xf013a556
f0127ce0:	e8 c1 84 fd ff       	call   f01001a6 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0127ce5:	e8 c8 43 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127cea:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ced:	e8 9a bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127cf2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127cf5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127cfb:	83 ec 0c             	sub    $0xc,%esp
f0127cfe:	50                   	push   %eax
f0127cff:	e8 38 f7 fd ff       	call   f010743c <kfree>
f0127d04:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d07:	e8 80 bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127d0c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127d0f:	74 17                	je     f0127d28 <test_kexpand+0xccc>
f0127d11:	83 ec 04             	sub    $0x4,%esp
f0127d14:	68 70 a5 13 f0       	push   $0xf013a570
f0127d19:	68 cf 0b 00 00       	push   $0xbcf
f0127d1e:	68 56 a5 13 f0       	push   $0xf013a556
f0127d23:	e8 7e 84 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127d28:	e8 85 43 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127d2d:	89 c2                	mov    %eax,%edx
f0127d2f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127d32:	29 c2                	sub    %eax,%edx
f0127d34:	89 d0                	mov    %edx,%eax
f0127d36:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0127d3b:	74 17                	je     f0127d54 <test_kexpand+0xcf8>
f0127d3d:	83 ec 04             	sub    $0x4,%esp
f0127d40:	68 08 ae 13 f0       	push   $0xf013ae08
f0127d45:	68 d0 0b 00 00       	push   $0xbd0
f0127d4a:	68 56 a5 13 f0       	push   $0xf013a556
f0127d4f:	e8 52 84 fd ff       	call   f01001a6 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127d54:	e8 59 43 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127d59:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d5c:	e8 2b bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127d61:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0127d64:	83 ec 0c             	sub    $0xc,%esp
f0127d67:	68 00 50 40 00       	push   $0x405000
f0127d6c:	e8 5f f7 fd ff       	call   f01074d0 <kexpand>
f0127d71:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127d74:	e8 13 bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127d79:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127d7c:	74 19                	je     f0127d97 <test_kexpand+0xd3b>
f0127d7e:	68 f0 b2 13 f0       	push   $0xf013b2f0
f0127d83:	68 21 b3 13 f0       	push   $0xf013b321
f0127d88:	68 da 0b 00 00       	push   $0xbda
f0127d8d:	68 56 a5 13 f0       	push   $0xf013a556
f0127d92:	e8 0f 84 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0127d97:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127d9a:	e8 13 43 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127d9f:	29 c3                	sub    %eax,%ebx
f0127da1:	89 d8                	mov    %ebx,%eax
f0127da3:	83 f8 05             	cmp    $0x5,%eax
f0127da6:	74 19                	je     f0127dc1 <test_kexpand+0xd65>
f0127da8:	68 cc b3 13 f0       	push   $0xf013b3cc
f0127dad:	68 21 b3 13 f0       	push   $0xf013b321
f0127db2:	68 db 0b 00 00       	push   $0xbdb
f0127db7:	68 56 a5 13 f0       	push   $0xf013a556
f0127dbc:	e8 e5 83 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127dc1:	83 ec 0c             	sub    $0xc,%esp
f0127dc4:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0127dc9:	e8 5f 8e fd ff       	call   f0100c2d <cprintf>
f0127dce:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127dd1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127dd6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127dd9:	5b                   	pop    %ebx
f0127dda:	5f                   	pop    %edi
f0127ddb:	5d                   	pop    %ebp
f0127ddc:	c3                   	ret    

f0127ddd <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0127ddd:	55                   	push   %ebp
f0127dde:	89 e5                	mov    %esp,%ebp
f0127de0:	57                   	push   %edi
f0127de1:	53                   	push   %ebx
f0127de2:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0127de8:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127dec:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127df0:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127df6:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127dfc:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127e03:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127e0a:	e8 a3 42 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127e0f:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127e12:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0127e18:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127e1d:	b8 00 00 00 00       	mov    $0x0,%eax
f0127e22:	89 d7                	mov    %edx,%edi
f0127e24:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127e26:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0127e2c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127e31:	b8 00 00 00 00       	mov    $0x0,%eax
f0127e36:	89 d7                	mov    %edx,%edi
f0127e38:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127e3a:	e8 73 42 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127e3f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e42:	e8 45 be fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127e47:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127e4a:	83 ec 0c             	sub    $0xc,%esp
f0127e4d:	68 00 fc 1f 00       	push   $0x1ffc00
f0127e52:	e8 cb f5 fd ff       	call   f0107422 <kmalloc>
f0127e57:	83 c4 10             	add    $0x10,%esp
f0127e5a:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e60:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0127e66:	89 c1                	mov    %eax,%ecx
f0127e68:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127e6f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127e72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e77:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127e7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127e7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e82:	f7 75 d4             	divl   -0x2c(%ebp)
f0127e85:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127e88:	29 d0                	sub    %edx,%eax
f0127e8a:	89 c3                	mov    %eax,%ebx
f0127e8c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127e93:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127e98:	0f b6 d0             	movzbl %al,%edx
f0127e9b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127e9e:	01 d0                	add    %edx,%eax
f0127ea0:	48                   	dec    %eax
f0127ea1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127ea4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127ea7:	ba 00 00 00 00       	mov    $0x0,%edx
f0127eac:	f7 75 cc             	divl   -0x34(%ebp)
f0127eaf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127eb2:	29 d0                	sub    %edx,%eax
f0127eb4:	01 c3                	add    %eax,%ebx
f0127eb6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127ebd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127ec2:	0f b6 c0             	movzbl %al,%eax
f0127ec5:	c1 e0 04             	shl    $0x4,%eax
f0127ec8:	89 c2                	mov    %eax,%edx
f0127eca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127ecd:	01 d0                	add    %edx,%eax
f0127ecf:	48                   	dec    %eax
f0127ed0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127ed3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127ed6:	ba 00 00 00 00       	mov    $0x0,%edx
f0127edb:	f7 75 c4             	divl   -0x3c(%ebp)
f0127ede:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127ee1:	29 d0                	sub    %edx,%eax
f0127ee3:	01 d8                	add    %ebx,%eax
f0127ee5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127eea:	39 c1                	cmp    %eax,%ecx
f0127eec:	74 17                	je     f0127f05 <test_kshrink+0x128>
f0127eee:	83 ec 04             	sub    $0x4,%esp
f0127ef1:	68 3c a6 13 f0       	push   $0xf013a63c
f0127ef6:	68 01 0c 00 00       	push   $0xc01
f0127efb:	68 56 a5 13 f0       	push   $0xf013a556
f0127f00:	e8 a1 82 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f05:	e8 82 bd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127f0a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f0d:	74 17                	je     f0127f26 <test_kshrink+0x149>
f0127f0f:	83 ec 04             	sub    $0x4,%esp
f0127f12:	68 70 a5 13 f0       	push   $0xf013a570
f0127f17:	68 02 0c 00 00       	push   $0xc02
f0127f1c:	68 56 a5 13 f0       	push   $0xf013a556
f0127f21:	e8 80 82 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f26:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f29:	e8 84 41 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127f2e:	29 c3                	sub    %eax,%ebx
f0127f30:	89 d8                	mov    %ebx,%eax
f0127f32:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127f37:	74 17                	je     f0127f50 <test_kshrink+0x173>
f0127f39:	83 ec 04             	sub    $0x4,%esp
f0127f3c:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0127f41:	68 03 0c 00 00       	push   $0xc03
f0127f46:	68 56 a5 13 f0       	push   $0xf013a556
f0127f4b:	e8 56 82 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127f50:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0127f57:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127f5a:	e8 53 41 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0127f5f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f62:	e8 25 bd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127f67:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127f6a:	83 ec 0c             	sub    $0xc,%esp
f0127f6d:	68 00 fc 1f 00       	push   $0x1ffc00
f0127f72:	e8 ab f4 fd ff       	call   f0107422 <kmalloc>
f0127f77:	83 c4 10             	add    $0x10,%esp
f0127f7a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f80:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0127f86:	89 c1                	mov    %eax,%ecx
f0127f88:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127f8f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127f92:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127f97:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127f9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127f9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fa2:	f7 75 bc             	divl   -0x44(%ebp)
f0127fa5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127fa8:	29 d0                	sub    %edx,%eax
f0127faa:	89 c3                	mov    %eax,%ebx
f0127fac:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127fb3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127fb8:	0f b6 d0             	movzbl %al,%edx
f0127fbb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127fbe:	01 d0                	add    %edx,%eax
f0127fc0:	48                   	dec    %eax
f0127fc1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127fc4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127fc7:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fcc:	f7 75 b4             	divl   -0x4c(%ebp)
f0127fcf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127fd2:	29 d0                	sub    %edx,%eax
f0127fd4:	01 c3                	add    %eax,%ebx
f0127fd6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127fdd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127fe2:	0f b6 c0             	movzbl %al,%eax
f0127fe5:	c1 e0 04             	shl    $0x4,%eax
f0127fe8:	89 c2                	mov    %eax,%edx
f0127fea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127fed:	01 d0                	add    %edx,%eax
f0127fef:	48                   	dec    %eax
f0127ff0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127ff3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127ff6:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ffb:	f7 75 ac             	divl   -0x54(%ebp)
f0127ffe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128001:	29 d0                	sub    %edx,%eax
f0128003:	01 d8                	add    %ebx,%eax
f0128005:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012800a:	39 c1                	cmp    %eax,%ecx
f012800c:	74 17                	je     f0128025 <test_kshrink+0x248>
f012800e:	83 ec 04             	sub    $0x4,%esp
f0128011:	68 3c a6 13 f0       	push   $0xf013a63c
f0128016:	68 0a 0c 00 00       	push   $0xc0a
f012801b:	68 56 a5 13 f0       	push   $0xf013a556
f0128020:	e8 81 81 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128025:	e8 62 bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012802a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012802d:	74 17                	je     f0128046 <test_kshrink+0x269>
f012802f:	83 ec 04             	sub    $0x4,%esp
f0128032:	68 70 a5 13 f0       	push   $0xf013a570
f0128037:	68 0b 0c 00 00       	push   $0xc0b
f012803c:	68 56 a5 13 f0       	push   $0xf013a556
f0128041:	e8 60 81 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128046:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128049:	e8 64 40 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012804e:	29 c3                	sub    %eax,%ebx
f0128050:	89 d8                	mov    %ebx,%eax
f0128052:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128057:	74 17                	je     f0128070 <test_kshrink+0x293>
f0128059:	83 ec 04             	sub    $0x4,%esp
f012805c:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0128061:	68 0c 0c 00 00       	push   $0xc0c
f0128066:	68 56 a5 13 f0       	push   $0xf013a556
f012806b:	e8 36 81 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128070:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128077:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012807a:	e8 33 40 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012807f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128082:	e8 05 bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128087:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012808a:	83 ec 0c             	sub    $0xc,%esp
f012808d:	68 00 08 00 00       	push   $0x800
f0128092:	e8 8b f3 fd ff       	call   f0107422 <kmalloc>
f0128097:	83 c4 10             	add    $0x10,%esp
f012809a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280a0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01280a6:	89 c1                	mov    %eax,%ecx
f01280a8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01280af:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01280b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01280b7:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01280ba:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01280bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01280c2:	f7 75 a4             	divl   -0x5c(%ebp)
f01280c5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01280c8:	29 d0                	sub    %edx,%eax
f01280ca:	89 c3                	mov    %eax,%ebx
f01280cc:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01280d3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01280d8:	0f b6 d0             	movzbl %al,%edx
f01280db:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01280de:	01 d0                	add    %edx,%eax
f01280e0:	48                   	dec    %eax
f01280e1:	89 45 98             	mov    %eax,-0x68(%ebp)
f01280e4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01280e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01280ec:	f7 75 9c             	divl   -0x64(%ebp)
f01280ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f01280f2:	29 d0                	sub    %edx,%eax
f01280f4:	01 c3                	add    %eax,%ebx
f01280f6:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01280fd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128102:	0f b6 c0             	movzbl %al,%eax
f0128105:	c1 e0 04             	shl    $0x4,%eax
f0128108:	89 c2                	mov    %eax,%edx
f012810a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012810d:	01 d0                	add    %edx,%eax
f012810f:	48                   	dec    %eax
f0128110:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128113:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128116:	ba 00 00 00 00       	mov    $0x0,%edx
f012811b:	f7 75 94             	divl   -0x6c(%ebp)
f012811e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128121:	29 d0                	sub    %edx,%eax
f0128123:	01 d8                	add    %ebx,%eax
f0128125:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012812a:	39 c1                	cmp    %eax,%ecx
f012812c:	74 17                	je     f0128145 <test_kshrink+0x368>
f012812e:	83 ec 04             	sub    $0x4,%esp
f0128131:	68 3c a6 13 f0       	push   $0xf013a63c
f0128136:	68 13 0c 00 00       	push   $0xc13
f012813b:	68 56 a5 13 f0       	push   $0xf013a556
f0128140:	e8 61 80 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128145:	e8 42 bb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012814a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012814d:	74 17                	je     f0128166 <test_kshrink+0x389>
f012814f:	83 ec 04             	sub    $0x4,%esp
f0128152:	68 70 a5 13 f0       	push   $0xf013a570
f0128157:	68 14 0c 00 00       	push   $0xc14
f012815c:	68 56 a5 13 f0       	push   $0xf013a556
f0128161:	e8 40 80 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128166:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128169:	e8 44 3f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012816e:	29 c3                	sub    %eax,%ebx
f0128170:	89 d8                	mov    %ebx,%eax
f0128172:	83 f8 01             	cmp    $0x1,%eax
f0128175:	74 17                	je     f012818e <test_kshrink+0x3b1>
f0128177:	83 ec 04             	sub    $0x4,%esp
f012817a:	68 d8 a5 13 f0       	push   $0xf013a5d8
f012817f:	68 15 0c 00 00       	push   $0xc15
f0128184:	68 56 a5 13 f0       	push   $0xf013a556
f0128189:	e8 18 80 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012818e:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0128195:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128198:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012819e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01281a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01281a8:	eb 0e                	jmp    f01281b8 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f01281aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01281ad:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01281b0:	01 d0                	add    %edx,%eax
f01281b2:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01281b5:	ff 45 f4             	incl   -0xc(%ebp)
f01281b8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01281be:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01281c1:	7f e7                	jg     f01281aa <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01281c3:	e8 ea 3e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01281c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281cb:	e8 bc ba fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01281d0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01281d3:	83 ec 0c             	sub    $0xc,%esp
f01281d6:	68 00 08 00 00       	push   $0x800
f01281db:	e8 42 f2 fd ff       	call   f0107422 <kmalloc>
f01281e0:	83 c4 10             	add    $0x10,%esp
f01281e3:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01281e9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01281ef:	89 c1                	mov    %eax,%ecx
f01281f1:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01281f8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01281fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128200:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128203:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128206:	ba 00 00 00 00       	mov    $0x0,%edx
f012820b:	f7 75 88             	divl   -0x78(%ebp)
f012820e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128211:	29 d0                	sub    %edx,%eax
f0128213:	89 c3                	mov    %eax,%ebx
f0128215:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012821c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128221:	0f b6 d0             	movzbl %al,%edx
f0128224:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128227:	01 d0                	add    %edx,%eax
f0128229:	48                   	dec    %eax
f012822a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128230:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128236:	ba 00 00 00 00       	mov    $0x0,%edx
f012823b:	f7 75 80             	divl   -0x80(%ebp)
f012823e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128244:	29 d0                	sub    %edx,%eax
f0128246:	01 c3                	add    %eax,%ebx
f0128248:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012824f:	10 00 00 
f0128252:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128257:	0f b6 c0             	movzbl %al,%eax
f012825a:	c1 e0 04             	shl    $0x4,%eax
f012825d:	89 c2                	mov    %eax,%edx
f012825f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128265:	01 d0                	add    %edx,%eax
f0128267:	48                   	dec    %eax
f0128268:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012826e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128274:	ba 00 00 00 00       	mov    $0x0,%edx
f0128279:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012827f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128285:	29 d0                	sub    %edx,%eax
f0128287:	01 d8                	add    %ebx,%eax
f0128289:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012828e:	39 c1                	cmp    %eax,%ecx
f0128290:	74 17                	je     f01282a9 <test_kshrink+0x4cc>
f0128292:	83 ec 04             	sub    $0x4,%esp
f0128295:	68 3c a6 13 f0       	push   $0xf013a63c
f012829a:	68 21 0c 00 00       	push   $0xc21
f012829f:	68 56 a5 13 f0       	push   $0xf013a556
f01282a4:	e8 fd 7e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282a9:	e8 de b9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01282ae:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01282b1:	74 17                	je     f01282ca <test_kshrink+0x4ed>
f01282b3:	83 ec 04             	sub    $0x4,%esp
f01282b6:	68 70 a5 13 f0       	push   $0xf013a570
f01282bb:	68 22 0c 00 00       	push   $0xc22
f01282c0:	68 56 a5 13 f0       	push   $0xf013a556
f01282c5:	e8 dc 7e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01282ca:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01282cd:	e8 e0 3d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01282d2:	29 c3                	sub    %eax,%ebx
f01282d4:	89 d8                	mov    %ebx,%eax
f01282d6:	83 f8 01             	cmp    $0x1,%eax
f01282d9:	74 17                	je     f01282f2 <test_kshrink+0x515>
f01282db:	83 ec 04             	sub    $0x4,%esp
f01282de:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01282e3:	68 23 0c 00 00       	push   $0xc23
f01282e8:	68 56 a5 13 f0       	push   $0xf013a556
f01282ed:	e8 b4 7e fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01282f2:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f01282f9:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01282fc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128302:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128305:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012830c:	eb 0e                	jmp    f012831c <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f012830e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128311:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128314:	01 d0                	add    %edx,%eax
f0128316:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128319:	ff 45 f4             	incl   -0xc(%ebp)
f012831c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128322:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128325:	7f e7                	jg     f012830e <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128327:	e8 86 3d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012832c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012832f:	e8 58 b9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128334:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128337:	83 ec 0c             	sub    $0xc,%esp
f012833a:	68 00 1c 00 00       	push   $0x1c00
f012833f:	e8 de f0 fd ff       	call   f0107422 <kmalloc>
f0128344:	83 c4 10             	add    $0x10,%esp
f0128347:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012834d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128353:	89 c1                	mov    %eax,%ecx
f0128355:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012835c:	10 00 00 
f012835f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128365:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012836a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128370:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128376:	ba 00 00 00 00       	mov    $0x0,%edx
f012837b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128381:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128387:	29 d0                	sub    %edx,%eax
f0128389:	89 c3                	mov    %eax,%ebx
f012838b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128392:	10 00 00 
f0128395:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012839a:	0f b6 d0             	movzbl %al,%edx
f012839d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01283a3:	01 d0                	add    %edx,%eax
f01283a5:	48                   	dec    %eax
f01283a6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01283ac:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01283b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01283b7:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01283bd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01283c3:	29 d0                	sub    %edx,%eax
f01283c5:	01 c3                	add    %eax,%ebx
f01283c7:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01283ce:	10 00 00 
f01283d1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01283d6:	0f b6 c0             	movzbl %al,%eax
f01283d9:	c1 e0 04             	shl    $0x4,%eax
f01283dc:	89 c2                	mov    %eax,%edx
f01283de:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01283e4:	01 d0                	add    %edx,%eax
f01283e6:	48                   	dec    %eax
f01283e7:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01283ed:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01283f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01283f8:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01283fe:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128404:	29 d0                	sub    %edx,%eax
f0128406:	01 d8                	add    %ebx,%eax
f0128408:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012840d:	39 c1                	cmp    %eax,%ecx
f012840f:	74 17                	je     f0128428 <test_kshrink+0x64b>
f0128411:	83 ec 04             	sub    $0x4,%esp
f0128414:	68 3c a6 13 f0       	push   $0xf013a63c
f0128419:	68 2f 0c 00 00       	push   $0xc2f
f012841e:	68 56 a5 13 f0       	push   $0xf013a556
f0128423:	e8 7e 7d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128428:	e8 5f b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012842d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128430:	74 17                	je     f0128449 <test_kshrink+0x66c>
f0128432:	83 ec 04             	sub    $0x4,%esp
f0128435:	68 70 a5 13 f0       	push   $0xf013a570
f012843a:	68 30 0c 00 00       	push   $0xc30
f012843f:	68 56 a5 13 f0       	push   $0xf013a556
f0128444:	e8 5d 7d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128449:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012844c:	e8 61 3c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128451:	29 c3                	sub    %eax,%ebx
f0128453:	89 d8                	mov    %ebx,%eax
f0128455:	83 f8 02             	cmp    $0x2,%eax
f0128458:	74 17                	je     f0128471 <test_kshrink+0x694>
f012845a:	83 ec 04             	sub    $0x4,%esp
f012845d:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0128462:	68 31 0c 00 00       	push   $0xc31
f0128467:	68 56 a5 13 f0       	push   $0xf013a556
f012846c:	e8 35 7d fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128471:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0128478:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012847b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128481:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128484:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012848b:	eb 0e                	jmp    f012849b <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f012848d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128490:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128493:	01 d0                	add    %edx,%eax
f0128495:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128498:	ff 45 f4             	incl   -0xc(%ebp)
f012849b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01284a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01284a4:	7f e7                	jg     f012848d <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01284a6:	e8 07 3c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01284ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01284ae:	e8 d9 b7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01284b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01284b6:	83 ec 0c             	sub    $0xc,%esp
f01284b9:	68 00 fc 2f 00       	push   $0x2ffc00
f01284be:	e8 5f ef fd ff       	call   f0107422 <kmalloc>
f01284c3:	83 c4 10             	add    $0x10,%esp
f01284c6:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01284cc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01284d2:	89 c1                	mov    %eax,%ecx
f01284d4:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01284db:	10 00 00 
f01284de:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01284e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01284e9:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01284ef:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01284f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01284fa:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128500:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128506:	29 d0                	sub    %edx,%eax
f0128508:	89 c3                	mov    %eax,%ebx
f012850a:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128511:	10 00 00 
f0128514:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128519:	0f b6 d0             	movzbl %al,%edx
f012851c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128522:	01 d0                	add    %edx,%eax
f0128524:	48                   	dec    %eax
f0128525:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012852b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128531:	ba 00 00 00 00       	mov    $0x0,%edx
f0128536:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012853c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128542:	29 d0                	sub    %edx,%eax
f0128544:	01 c3                	add    %eax,%ebx
f0128546:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012854d:	10 00 00 
f0128550:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128555:	0f b6 c0             	movzbl %al,%eax
f0128558:	c1 e0 04             	shl    $0x4,%eax
f012855b:	89 c2                	mov    %eax,%edx
f012855d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128563:	01 d0                	add    %edx,%eax
f0128565:	48                   	dec    %eax
f0128566:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012856c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128572:	ba 00 00 00 00       	mov    $0x0,%edx
f0128577:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012857d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128583:	29 d0                	sub    %edx,%eax
f0128585:	01 d8                	add    %ebx,%eax
f0128587:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012858c:	39 c1                	cmp    %eax,%ecx
f012858e:	74 17                	je     f01285a7 <test_kshrink+0x7ca>
f0128590:	83 ec 04             	sub    $0x4,%esp
f0128593:	68 3c a6 13 f0       	push   $0xf013a63c
f0128598:	68 3d 0c 00 00       	push   $0xc3d
f012859d:	68 56 a5 13 f0       	push   $0xf013a556
f01285a2:	e8 ff 7b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01285a7:	e8 e0 b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01285ac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01285af:	74 17                	je     f01285c8 <test_kshrink+0x7eb>
f01285b1:	83 ec 04             	sub    $0x4,%esp
f01285b4:	68 70 a5 13 f0       	push   $0xf013a570
f01285b9:	68 3e 0c 00 00       	push   $0xc3e
f01285be:	68 56 a5 13 f0       	push   $0xf013a556
f01285c3:	e8 de 7b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01285c8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01285cb:	e8 e2 3a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01285d0:	29 c3                	sub    %eax,%ebx
f01285d2:	89 d8                	mov    %ebx,%eax
f01285d4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01285d9:	74 17                	je     f01285f2 <test_kshrink+0x815>
f01285db:	83 ec 04             	sub    $0x4,%esp
f01285de:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01285e3:	68 3f 0c 00 00       	push   $0xc3f
f01285e8:	68 56 a5 13 f0       	push   $0xf013a556
f01285ed:	e8 b4 7b fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01285f2:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f01285f9:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01285fc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128602:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128605:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012860c:	eb 0e                	jmp    f012861c <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f012860e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128611:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128614:	01 d0                	add    %edx,%eax
f0128616:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128619:	ff 45 f4             	incl   -0xc(%ebp)
f012861c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128622:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128625:	7f e7                	jg     f012860e <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128627:	e8 86 3a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012862c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012862f:	e8 58 b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128634:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128637:	83 ec 0c             	sub    $0xc,%esp
f012863a:	68 00 00 60 00       	push   $0x600000
f012863f:	e8 de ed fd ff       	call   f0107422 <kmalloc>
f0128644:	83 c4 10             	add    $0x10,%esp
f0128647:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012864d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128653:	89 c1                	mov    %eax,%ecx
f0128655:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012865c:	10 00 00 
f012865f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128665:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012866a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128670:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128676:	ba 00 00 00 00       	mov    $0x0,%edx
f012867b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128681:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128687:	29 d0                	sub    %edx,%eax
f0128689:	89 c3                	mov    %eax,%ebx
f012868b:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128692:	10 00 00 
f0128695:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012869a:	0f b6 d0             	movzbl %al,%edx
f012869d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01286a3:	01 d0                	add    %edx,%eax
f01286a5:	48                   	dec    %eax
f01286a6:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01286ac:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01286b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01286b7:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01286bd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01286c3:	29 d0                	sub    %edx,%eax
f01286c5:	01 c3                	add    %eax,%ebx
f01286c7:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01286ce:	10 00 00 
f01286d1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01286d6:	0f b6 c0             	movzbl %al,%eax
f01286d9:	c1 e0 04             	shl    $0x4,%eax
f01286dc:	89 c2                	mov    %eax,%edx
f01286de:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01286e4:	01 d0                	add    %edx,%eax
f01286e6:	48                   	dec    %eax
f01286e7:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01286ed:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01286f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01286f8:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01286fe:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128704:	29 d0                	sub    %edx,%eax
f0128706:	01 d8                	add    %ebx,%eax
f0128708:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012870d:	39 c1                	cmp    %eax,%ecx
f012870f:	74 17                	je     f0128728 <test_kshrink+0x94b>
f0128711:	83 ec 04             	sub    $0x4,%esp
f0128714:	68 3c a6 13 f0       	push   $0xf013a63c
f0128719:	68 4b 0c 00 00       	push   $0xc4b
f012871e:	68 56 a5 13 f0       	push   $0xf013a556
f0128723:	e8 7e 7a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128728:	e8 5f b5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012872d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128730:	74 17                	je     f0128749 <test_kshrink+0x96c>
f0128732:	83 ec 04             	sub    $0x4,%esp
f0128735:	68 70 a5 13 f0       	push   $0xf013a570
f012873a:	68 4c 0c 00 00       	push   $0xc4c
f012873f:	68 56 a5 13 f0       	push   $0xf013a556
f0128744:	e8 5d 7a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128749:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012874c:	e8 61 39 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128751:	29 c3                	sub    %eax,%ebx
f0128753:	89 d8                	mov    %ebx,%eax
f0128755:	3d 00 06 00 00       	cmp    $0x600,%eax
f012875a:	74 17                	je     f0128773 <test_kshrink+0x996>
f012875c:	83 ec 04             	sub    $0x4,%esp
f012875f:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0128764:	68 4d 0c 00 00       	push   $0xc4d
f0128769:	68 56 a5 13 f0       	push   $0xf013a556
f012876e:	e8 33 7a fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128773:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f012877a:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012877d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128783:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128789:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128790:	eb 1a                	jmp    f01287ac <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0128792:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128795:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012879c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01287a2:	01 c2                	add    %eax,%edx
f01287a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01287a7:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01287a9:	ff 45 f4             	incl   -0xc(%ebp)
f01287ac:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01287b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01287b5:	7d db                	jge    f0128792 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01287b7:	e8 f6 38 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01287bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287bf:	e8 c8 b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01287c4:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f01287c7:	83 ec 0c             	sub    $0xc,%esp
f01287ca:	68 00 00 50 00       	push   $0x500000
f01287cf:	e8 e2 ec fd ff       	call   f01074b6 <kshrink>
f01287d4:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01287d7:	e8 b0 b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01287dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01287df:	74 19                	je     f01287fa <test_kshrink+0xa1d>
f01287e1:	68 f0 b2 13 f0       	push   $0xf013b2f0
f01287e6:	68 21 b3 13 f0       	push   $0xf013b321
f01287eb:	68 5d 0c 00 00       	push   $0xc5d
f01287f0:	68 56 a5 13 f0       	push   $0xf013a556
f01287f5:	e8 ac 79 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f01287fa:	e8 b3 38 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01287ff:	89 c2                	mov    %eax,%edx
f0128801:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128804:	29 c2                	sub    %eax,%edx
f0128806:	89 d0                	mov    %edx,%eax
f0128808:	3d 00 01 00 00       	cmp    $0x100,%eax
f012880d:	74 19                	je     f0128828 <test_kshrink+0xa4b>
f012880f:	68 fc b3 13 f0       	push   $0xf013b3fc
f0128814:	68 21 b3 13 f0       	push   $0xf013b321
f0128819:	68 5e 0c 00 00       	push   $0xc5e
f012881e:	68 56 a5 13 f0       	push   $0xf013a556
f0128823:	e8 7e 79 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0128828:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f012882f:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128832:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128839:	eb 37                	jmp    f0128872 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f012883b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012883e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128845:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012884b:	01 d0                	add    %edx,%eax
f012884d:	8b 10                	mov    (%eax),%edx
f012884f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128852:	39 c2                	cmp    %eax,%edx
f0128854:	74 19                	je     f012886f <test_kshrink+0xa92>
f0128856:	68 2c b4 13 f0       	push   $0xf013b42c
f012885b:	68 21 b3 13 f0       	push   $0xf013b321
f0128860:	68 66 0c 00 00       	push   $0xc66
f0128865:	68 56 a5 13 f0       	push   $0xf013a556
f012886a:	e8 37 79 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f012886f:	ff 45 f4             	incl   -0xc(%ebp)
f0128872:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128875:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f012887b:	7e be                	jle    f012883b <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012887d:	83 ec 0c             	sub    $0xc,%esp
f0128880:	6a 03                	push   $0x3
f0128882:	e8 d4 3c fe ff       	call   f010c55b <sys_bypassPageFault>
f0128887:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f012888a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128890:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0128893:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128896:	05 00 00 50 00       	add    $0x500000,%eax
f012889b:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f012889e:	e8 a6 3c fe ff       	call   f010c549 <sys_rcr2>
f01288a3:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01288a6:	81 c2 00 00 50 00    	add    $0x500000,%edx
f01288ac:	39 d0                	cmp    %edx,%eax
f01288ae:	74 19                	je     f01288c9 <test_kshrink+0xaec>
f01288b0:	68 38 b4 13 f0       	push   $0xf013b438
f01288b5:	68 21 b3 13 f0       	push   $0xf013b321
f01288ba:	68 6f 0c 00 00       	push   $0xc6f
f01288bf:	68 56 a5 13 f0       	push   $0xf013a556
f01288c4:	e8 dd 78 fd ff       	call   f01001a6 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f01288c9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01288cc:	05 00 10 50 00       	add    $0x501000,%eax
f01288d1:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f01288d4:	e8 70 3c fe ff       	call   f010c549 <sys_rcr2>
f01288d9:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01288dc:	81 c2 00 10 50 00    	add    $0x501000,%edx
f01288e2:	39 d0                	cmp    %edx,%eax
f01288e4:	74 19                	je     f01288ff <test_kshrink+0xb22>
f01288e6:	68 60 b4 13 f0       	push   $0xf013b460
f01288eb:	68 21 b3 13 f0       	push   $0xf013b321
f01288f0:	68 72 0c 00 00       	push   $0xc72
f01288f5:	68 56 a5 13 f0       	push   $0xf013a556
f01288fa:	e8 a7 78 fd ff       	call   f01001a6 <_panic>

		ptr[6*Mega - kilo] = 10;
f01288ff:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128902:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0128907:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f012890a:	e8 3a 3c fe ff       	call   f010c549 <sys_rcr2>
f012890f:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128912:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0128918:	39 d0                	cmp    %edx,%eax
f012891a:	74 19                	je     f0128935 <test_kshrink+0xb58>
f012891c:	68 8c b4 13 f0       	push   $0xf013b48c
f0128921:	68 21 b3 13 f0       	push   $0xf013b321
f0128926:	68 75 0c 00 00       	push   $0xc75
f012892b:	68 56 a5 13 f0       	push   $0xf013a556
f0128930:	e8 71 78 fd ff       	call   f01001a6 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128935:	83 ec 0c             	sub    $0xc,%esp
f0128938:	6a 00                	push   $0x0
f012893a:	e8 1c 3c fe ff       	call   f010c55b <sys_bypassPageFault>
f012893f:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128942:	e8 6b 37 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128947:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012894a:	e8 3d b3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012894f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0128952:	83 ec 0c             	sub    $0xc,%esp
f0128955:	68 00 00 20 00       	push   $0x200000
f012895a:	e8 57 eb fd ff       	call   f01074b6 <kshrink>
f012895f:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128962:	e8 25 b3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128967:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012896a:	74 19                	je     f0128985 <test_kshrink+0xba8>
f012896c:	68 f0 b2 13 f0       	push   $0xf013b2f0
f0128971:	68 21 b3 13 f0       	push   $0xf013b321
f0128976:	68 82 0c 00 00       	push   $0xc82
f012897b:	68 56 a5 13 f0       	push   $0xf013a556
f0128980:	e8 21 78 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0128985:	e8 28 37 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012898a:	89 c2                	mov    %eax,%edx
f012898c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012898f:	29 c2                	sub    %eax,%edx
f0128991:	89 d0                	mov    %edx,%eax
f0128993:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128998:	74 19                	je     f01289b3 <test_kshrink+0xbd6>
f012899a:	68 b8 b4 13 f0       	push   $0xf013b4b8
f012899f:	68 21 b3 13 f0       	push   $0xf013b321
f01289a4:	68 83 0c 00 00       	push   $0xc83
f01289a9:	68 56 a5 13 f0       	push   $0xf013a556
f01289ae:	e8 f3 77 fd ff       	call   f01001a6 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01289b3:	e8 fa 36 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01289b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289bb:	e8 cc b2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01289c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01289c3:	83 ec 0c             	sub    $0xc,%esp
f01289c6:	68 00 00 40 00       	push   $0x400000
f01289cb:	e8 52 ea fd ff       	call   f0107422 <kmalloc>
f01289d0:	83 c4 10             	add    $0x10,%esp
f01289d3:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f01289d9:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01289e0:	10 00 00 
f01289e3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01289e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01289ee:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01289f4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01289fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01289ff:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128a05:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128a0b:	29 d0                	sub    %edx,%eax
f0128a0d:	89 c1                	mov    %eax,%ecx
f0128a0f:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128a16:	10 00 00 
f0128a19:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128a1e:	0f b6 d0             	movzbl %al,%edx
f0128a21:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128a27:	01 d0                	add    %edx,%eax
f0128a29:	48                   	dec    %eax
f0128a2a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128a30:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128a36:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a3b:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128a41:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128a47:	29 d0                	sub    %edx,%eax
f0128a49:	01 c1                	add    %eax,%ecx
f0128a4b:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128a52:	10 00 00 
f0128a55:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128a5a:	0f b6 c0             	movzbl %al,%eax
f0128a5d:	c1 e0 04             	shl    $0x4,%eax
f0128a60:	89 c2                	mov    %eax,%edx
f0128a62:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128a68:	01 d0                	add    %edx,%eax
f0128a6a:	48                   	dec    %eax
f0128a6b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128a71:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128a77:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a7c:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128a82:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128a88:	29 d0                	sub    %edx,%eax
f0128a8a:	01 c8                	add    %ecx,%eax
f0128a8c:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0128a92:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128a98:	83 ec 04             	sub    $0x4,%esp
f0128a9b:	52                   	push   %edx
f0128a9c:	50                   	push   %eax
f0128a9d:	68 e8 b4 13 f0       	push   $0xf013b4e8
f0128aa2:	e8 86 81 fd ff       	call   f0100c2d <cprintf>
f0128aa7:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0128aaa:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128ab0:	89 c1                	mov    %eax,%ecx
f0128ab2:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128ab9:	10 00 00 
f0128abc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128ac2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128ac7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128acd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128ad3:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ad8:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128ade:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128ae4:	29 d0                	sub    %edx,%eax
f0128ae6:	89 c3                	mov    %eax,%ebx
f0128ae8:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0128aef:	10 00 00 
f0128af2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128af7:	0f b6 d0             	movzbl %al,%edx
f0128afa:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0128b00:	01 d0                	add    %edx,%eax
f0128b02:	48                   	dec    %eax
f0128b03:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0128b09:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128b0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b14:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0128b1a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128b20:	29 d0                	sub    %edx,%eax
f0128b22:	01 c3                	add    %eax,%ebx
f0128b24:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0128b2b:	10 00 00 
f0128b2e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128b33:	0f b6 c0             	movzbl %al,%eax
f0128b36:	c1 e0 04             	shl    $0x4,%eax
f0128b39:	89 c2                	mov    %eax,%edx
f0128b3b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0128b41:	01 d0                	add    %edx,%eax
f0128b43:	48                   	dec    %eax
f0128b44:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0128b4a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128b50:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b55:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0128b5b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128b61:	29 d0                	sub    %edx,%eax
f0128b63:	01 d8                	add    %ebx,%eax
f0128b65:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0128b6a:	39 c1                	cmp    %eax,%ecx
f0128b6c:	74 17                	je     f0128b85 <test_kshrink+0xda8>
f0128b6e:	83 ec 04             	sub    $0x4,%esp
f0128b71:	68 04 b5 13 f0       	push   $0xf013b504
f0128b76:	68 8e 0c 00 00       	push   $0xc8e
f0128b7b:	68 56 a5 13 f0       	push   $0xf013a556
f0128b80:	e8 21 76 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b85:	e8 02 b1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128b8a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b8d:	74 17                	je     f0128ba6 <test_kshrink+0xdc9>
f0128b8f:	83 ec 04             	sub    $0x4,%esp
f0128b92:	68 70 a5 13 f0       	push   $0xf013a570
f0128b97:	68 8f 0c 00 00       	push   $0xc8f
f0128b9c:	68 56 a5 13 f0       	push   $0xf013a556
f0128ba1:	e8 00 76 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128ba6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128ba9:	e8 04 35 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128bae:	29 c3                	sub    %eax,%ebx
f0128bb0:	89 d8                	mov    %ebx,%eax
f0128bb2:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128bb7:	74 17                	je     f0128bd0 <test_kshrink+0xdf3>
f0128bb9:	83 ec 04             	sub    $0x4,%esp
f0128bbc:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0128bc1:	68 90 0c 00 00       	push   $0xc90
f0128bc6:	68 56 a5 13 f0       	push   $0xf013a556
f0128bcb:	e8 d6 75 fd ff       	call   f01001a6 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0128bd0:	e8 dd 34 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128bd5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bd8:	e8 af b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128bdd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128be0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128be6:	83 ec 0c             	sub    $0xc,%esp
f0128be9:	50                   	push   %eax
f0128bea:	e8 4d e8 fd ff       	call   f010743c <kfree>
f0128bef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128bf2:	e8 95 b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128bf7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128bfa:	74 17                	je     f0128c13 <test_kshrink+0xe36>
f0128bfc:	83 ec 04             	sub    $0x4,%esp
f0128bff:	68 70 a5 13 f0       	push   $0xf013a570
f0128c04:	68 9a 0c 00 00       	push   $0xc9a
f0128c09:	68 56 a5 13 f0       	push   $0xf013a556
f0128c0e:	e8 93 75 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128c13:	e8 9a 34 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128c18:	89 c2                	mov    %eax,%edx
f0128c1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128c1d:	29 c2                	sub    %eax,%edx
f0128c1f:	89 d0                	mov    %edx,%eax
f0128c21:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128c26:	74 17                	je     f0128c3f <test_kshrink+0xe62>
f0128c28:	83 ec 04             	sub    $0x4,%esp
f0128c2b:	68 08 ae 13 f0       	push   $0xf013ae08
f0128c30:	68 9b 0c 00 00       	push   $0xc9b
f0128c35:	68 56 a5 13 f0       	push   $0xf013a556
f0128c3a:	e8 67 75 fd ff       	call   f01001a6 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128c3f:	e8 6e 34 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128c44:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c47:	e8 40 b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128c4c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0128c4f:	83 ec 0c             	sub    $0xc,%esp
f0128c52:	68 00 b0 3f 00       	push   $0x3fb000
f0128c57:	e8 5a e8 fd ff       	call   f01074b6 <kshrink>
f0128c5c:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128c5f:	e8 28 b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128c64:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c67:	74 19                	je     f0128c82 <test_kshrink+0xea5>
f0128c69:	68 f0 b2 13 f0       	push   $0xf013b2f0
f0128c6e:	68 21 b3 13 f0       	push   $0xf013b321
f0128c73:	68 a5 0c 00 00       	push   $0xca5
f0128c78:	68 56 a5 13 f0       	push   $0xf013a556
f0128c7d:	e8 24 75 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0128c82:	e8 2b 34 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128c87:	89 c2                	mov    %eax,%edx
f0128c89:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128c8c:	29 c2                	sub    %eax,%edx
f0128c8e:	89 d0                	mov    %edx,%eax
f0128c90:	83 f8 05             	cmp    $0x5,%eax
f0128c93:	74 19                	je     f0128cae <test_kshrink+0xed1>
f0128c95:	68 58 b5 13 f0       	push   $0xf013b558
f0128c9a:	68 21 b3 13 f0       	push   $0xf013b321
f0128c9f:	68 a6 0c 00 00       	push   $0xca6
f0128ca4:	68 56 a5 13 f0       	push   $0xf013a556
f0128ca9:	e8 f8 74 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128cae:	83 ec 0c             	sub    $0xc,%esp
f0128cb1:	68 b4 b2 13 f0       	push   $0xf013b2b4
f0128cb6:	e8 72 7f fd ff       	call   f0100c2d <cprintf>
f0128cbb:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128cc3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128cc6:	5b                   	pop    %ebx
f0128cc7:	5f                   	pop    %edi
f0128cc8:	5d                   	pop    %ebp
f0128cc9:	c3                   	ret    

f0128cca <test_kfreelast>:


int test_kfreelast()
{
f0128cca:	55                   	push   %ebp
f0128ccb:	89 e5                	mov    %esp,%ebp
f0128ccd:	57                   	push   %edi
f0128cce:	53                   	push   %ebx
f0128ccf:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0128cd5:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0128cd9:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0128cdd:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0128ce3:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0128ce9:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128cf0:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128cf7:	e8 b6 33 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128cfc:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128cff:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0128d05:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128d0a:	b8 00 00 00 00       	mov    $0x0,%eax
f0128d0f:	89 d7                	mov    %edx,%edi
f0128d11:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0128d13:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0128d19:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128d1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0128d23:	89 d7                	mov    %edx,%edi
f0128d25:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0128d27:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0128d2d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128d32:	b8 00 00 00 00       	mov    $0x0,%eax
f0128d37:	89 d7                	mov    %edx,%edi
f0128d39:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128d3b:	e8 72 33 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128d40:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d43:	e8 44 af fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128d48:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128d4b:	83 ec 0c             	sub    $0xc,%esp
f0128d4e:	68 00 fc 1f 00       	push   $0x1ffc00
f0128d53:	e8 ca e6 fd ff       	call   f0107422 <kmalloc>
f0128d58:	83 c4 10             	add    $0x10,%esp
f0128d5b:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d61:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0128d67:	89 c1                	mov    %eax,%ecx
f0128d69:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128d70:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128d73:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128d78:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128d7b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128d7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d83:	f7 75 cc             	divl   -0x34(%ebp)
f0128d86:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128d89:	29 d0                	sub    %edx,%eax
f0128d8b:	89 c3                	mov    %eax,%ebx
f0128d8d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128d94:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128d99:	0f b6 d0             	movzbl %al,%edx
f0128d9c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128d9f:	01 d0                	add    %edx,%eax
f0128da1:	48                   	dec    %eax
f0128da2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128da5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128da8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dad:	f7 75 c4             	divl   -0x3c(%ebp)
f0128db0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128db3:	29 d0                	sub    %edx,%eax
f0128db5:	01 c3                	add    %eax,%ebx
f0128db7:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128dbe:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128dc3:	0f b6 c0             	movzbl %al,%eax
f0128dc6:	c1 e0 04             	shl    $0x4,%eax
f0128dc9:	89 c2                	mov    %eax,%edx
f0128dcb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128dce:	01 d0                	add    %edx,%eax
f0128dd0:	48                   	dec    %eax
f0128dd1:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128dd4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128dd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ddc:	f7 75 bc             	divl   -0x44(%ebp)
f0128ddf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128de2:	29 d0                	sub    %edx,%eax
f0128de4:	01 d8                	add    %ebx,%eax
f0128de6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128deb:	39 c1                	cmp    %eax,%ecx
f0128ded:	74 17                	je     f0128e06 <test_kfreelast+0x13c>
f0128def:	83 ec 04             	sub    $0x4,%esp
f0128df2:	68 3c a6 13 f0       	push   $0xf013a63c
f0128df7:	68 ca 0c 00 00       	push   $0xcca
f0128dfc:	68 56 a5 13 f0       	push   $0xf013a556
f0128e01:	e8 a0 73 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e06:	e8 81 ae fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128e0b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128e0e:	74 17                	je     f0128e27 <test_kfreelast+0x15d>
f0128e10:	83 ec 04             	sub    $0x4,%esp
f0128e13:	68 70 a5 13 f0       	push   $0xf013a570
f0128e18:	68 cb 0c 00 00       	push   $0xccb
f0128e1d:	68 56 a5 13 f0       	push   $0xf013a556
f0128e22:	e8 7f 73 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e27:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e2a:	e8 83 32 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128e2f:	29 c3                	sub    %eax,%ebx
f0128e31:	89 d8                	mov    %ebx,%eax
f0128e33:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128e38:	74 17                	je     f0128e51 <test_kfreelast+0x187>
f0128e3a:	83 ec 04             	sub    $0x4,%esp
f0128e3d:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0128e42:	68 cc 0c 00 00       	push   $0xccc
f0128e47:	68 56 a5 13 f0       	push   $0xf013a556
f0128e4c:	e8 55 73 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128e51:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0128e58:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128e5b:	e8 52 32 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128e60:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e63:	e8 24 ae fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128e68:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128e6b:	83 ec 0c             	sub    $0xc,%esp
f0128e6e:	68 00 fc 1f 00       	push   $0x1ffc00
f0128e73:	e8 aa e5 fd ff       	call   f0107422 <kmalloc>
f0128e78:	83 c4 10             	add    $0x10,%esp
f0128e7b:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128e81:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0128e87:	89 c1                	mov    %eax,%ecx
f0128e89:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128e90:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128e93:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128e98:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128e9b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128e9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ea3:	f7 75 b4             	divl   -0x4c(%ebp)
f0128ea6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128ea9:	29 d0                	sub    %edx,%eax
f0128eab:	89 c3                	mov    %eax,%ebx
f0128ead:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128eb4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128eb9:	0f b6 d0             	movzbl %al,%edx
f0128ebc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128ebf:	01 d0                	add    %edx,%eax
f0128ec1:	48                   	dec    %eax
f0128ec2:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128ec5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128ec8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ecd:	f7 75 ac             	divl   -0x54(%ebp)
f0128ed0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128ed3:	29 d0                	sub    %edx,%eax
f0128ed5:	01 c3                	add    %eax,%ebx
f0128ed7:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128ede:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128ee3:	0f b6 c0             	movzbl %al,%eax
f0128ee6:	c1 e0 04             	shl    $0x4,%eax
f0128ee9:	89 c2                	mov    %eax,%edx
f0128eeb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128eee:	01 d0                	add    %edx,%eax
f0128ef0:	48                   	dec    %eax
f0128ef1:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128ef4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128ef7:	ba 00 00 00 00       	mov    $0x0,%edx
f0128efc:	f7 75 a4             	divl   -0x5c(%ebp)
f0128eff:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128f02:	29 d0                	sub    %edx,%eax
f0128f04:	01 d8                	add    %ebx,%eax
f0128f06:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128f0b:	39 c1                	cmp    %eax,%ecx
f0128f0d:	74 17                	je     f0128f26 <test_kfreelast+0x25c>
f0128f0f:	83 ec 04             	sub    $0x4,%esp
f0128f12:	68 3c a6 13 f0       	push   $0xf013a63c
f0128f17:	68 d3 0c 00 00       	push   $0xcd3
f0128f1c:	68 56 a5 13 f0       	push   $0xf013a556
f0128f21:	e8 80 72 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f26:	e8 61 ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128f2b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128f2e:	74 17                	je     f0128f47 <test_kfreelast+0x27d>
f0128f30:	83 ec 04             	sub    $0x4,%esp
f0128f33:	68 70 a5 13 f0       	push   $0xf013a570
f0128f38:	68 d4 0c 00 00       	push   $0xcd4
f0128f3d:	68 56 a5 13 f0       	push   $0xf013a556
f0128f42:	e8 5f 72 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f47:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128f4a:	e8 63 31 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128f4f:	29 c3                	sub    %eax,%ebx
f0128f51:	89 d8                	mov    %ebx,%eax
f0128f53:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128f58:	74 17                	je     f0128f71 <test_kfreelast+0x2a7>
f0128f5a:	83 ec 04             	sub    $0x4,%esp
f0128f5d:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0128f62:	68 d5 0c 00 00       	push   $0xcd5
f0128f67:	68 56 a5 13 f0       	push   $0xf013a556
f0128f6c:	e8 35 72 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128f71:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0128f78:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128f7b:	e8 32 31 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0128f80:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f83:	e8 04 ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128f88:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128f8b:	83 ec 0c             	sub    $0xc,%esp
f0128f8e:	68 00 08 00 00       	push   $0x800
f0128f93:	e8 8a e4 fd ff       	call   f0107422 <kmalloc>
f0128f98:	83 c4 10             	add    $0x10,%esp
f0128f9b:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128fa1:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0128fa7:	89 c1                	mov    %eax,%ecx
f0128fa9:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128fb0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128fb3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128fb8:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128fbb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128fbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fc3:	f7 75 9c             	divl   -0x64(%ebp)
f0128fc6:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128fc9:	29 d0                	sub    %edx,%eax
f0128fcb:	89 c3                	mov    %eax,%ebx
f0128fcd:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128fd4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128fd9:	0f b6 d0             	movzbl %al,%edx
f0128fdc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128fdf:	01 d0                	add    %edx,%eax
f0128fe1:	48                   	dec    %eax
f0128fe2:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128fe5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128fe8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fed:	f7 75 94             	divl   -0x6c(%ebp)
f0128ff0:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128ff3:	29 d0                	sub    %edx,%eax
f0128ff5:	01 c3                	add    %eax,%ebx
f0128ff7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0128ffe:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129003:	0f b6 c0             	movzbl %al,%eax
f0129006:	c1 e0 04             	shl    $0x4,%eax
f0129009:	89 c2                	mov    %eax,%edx
f012900b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012900e:	01 d0                	add    %edx,%eax
f0129010:	48                   	dec    %eax
f0129011:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129014:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129017:	ba 00 00 00 00       	mov    $0x0,%edx
f012901c:	f7 75 8c             	divl   -0x74(%ebp)
f012901f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129022:	29 d0                	sub    %edx,%eax
f0129024:	01 d8                	add    %ebx,%eax
f0129026:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012902b:	39 c1                	cmp    %eax,%ecx
f012902d:	74 17                	je     f0129046 <test_kfreelast+0x37c>
f012902f:	83 ec 04             	sub    $0x4,%esp
f0129032:	68 3c a6 13 f0       	push   $0xf013a63c
f0129037:	68 dc 0c 00 00       	push   $0xcdc
f012903c:	68 56 a5 13 f0       	push   $0xf013a556
f0129041:	e8 60 71 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129046:	e8 41 ac fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012904b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012904e:	74 17                	je     f0129067 <test_kfreelast+0x39d>
f0129050:	83 ec 04             	sub    $0x4,%esp
f0129053:	68 70 a5 13 f0       	push   $0xf013a570
f0129058:	68 dd 0c 00 00       	push   $0xcdd
f012905d:	68 56 a5 13 f0       	push   $0xf013a556
f0129062:	e8 3f 71 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129067:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012906a:	e8 43 30 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012906f:	29 c3                	sub    %eax,%ebx
f0129071:	89 d8                	mov    %ebx,%eax
f0129073:	83 f8 01             	cmp    $0x1,%eax
f0129076:	74 17                	je     f012908f <test_kfreelast+0x3c5>
f0129078:	83 ec 04             	sub    $0x4,%esp
f012907b:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0129080:	68 de 0c 00 00       	push   $0xcde
f0129085:	68 56 a5 13 f0       	push   $0xf013a556
f012908a:	e8 17 71 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012908f:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0129096:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129099:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012909f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01290a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01290a9:	eb 0e                	jmp    f01290b9 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f01290ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01290ae:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01290b1:	01 d0                	add    %edx,%eax
f01290b3:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01290b6:	ff 45 f4             	incl   -0xc(%ebp)
f01290b9:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01290bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01290c2:	7f e7                	jg     f01290ab <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01290c4:	e8 e9 2f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01290c9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290cc:	e8 bb ab fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01290d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01290d4:	83 ec 0c             	sub    $0xc,%esp
f01290d7:	68 00 08 00 00       	push   $0x800
f01290dc:	e8 41 e3 fd ff       	call   f0107422 <kmalloc>
f01290e1:	83 c4 10             	add    $0x10,%esp
f01290e4:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01290ea:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01290f0:	89 c1                	mov    %eax,%ecx
f01290f2:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01290f9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01290fc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129101:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129107:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012910d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129112:	f7 75 80             	divl   -0x80(%ebp)
f0129115:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012911b:	29 d0                	sub    %edx,%eax
f012911d:	89 c3                	mov    %eax,%ebx
f012911f:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129126:	10 00 00 
f0129129:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012912e:	0f b6 d0             	movzbl %al,%edx
f0129131:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129137:	01 d0                	add    %edx,%eax
f0129139:	48                   	dec    %eax
f012913a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129140:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129146:	ba 00 00 00 00       	mov    $0x0,%edx
f012914b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129151:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129157:	29 d0                	sub    %edx,%eax
f0129159:	01 c3                	add    %eax,%ebx
f012915b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129162:	10 00 00 
f0129165:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012916a:	0f b6 c0             	movzbl %al,%eax
f012916d:	c1 e0 04             	shl    $0x4,%eax
f0129170:	89 c2                	mov    %eax,%edx
f0129172:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129178:	01 d0                	add    %edx,%eax
f012917a:	48                   	dec    %eax
f012917b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129181:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129187:	ba 00 00 00 00       	mov    $0x0,%edx
f012918c:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0129192:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129198:	29 d0                	sub    %edx,%eax
f012919a:	01 d8                	add    %ebx,%eax
f012919c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01291a1:	39 c1                	cmp    %eax,%ecx
f01291a3:	74 17                	je     f01291bc <test_kfreelast+0x4f2>
f01291a5:	83 ec 04             	sub    $0x4,%esp
f01291a8:	68 3c a6 13 f0       	push   $0xf013a63c
f01291ad:	68 ea 0c 00 00       	push   $0xcea
f01291b2:	68 56 a5 13 f0       	push   $0xf013a556
f01291b7:	e8 ea 6f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01291bc:	e8 cb aa fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01291c1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01291c4:	74 17                	je     f01291dd <test_kfreelast+0x513>
f01291c6:	83 ec 04             	sub    $0x4,%esp
f01291c9:	68 70 a5 13 f0       	push   $0xf013a570
f01291ce:	68 eb 0c 00 00       	push   $0xceb
f01291d3:	68 56 a5 13 f0       	push   $0xf013a556
f01291d8:	e8 c9 6f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01291dd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01291e0:	e8 cd 2e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01291e5:	29 c3                	sub    %eax,%ebx
f01291e7:	89 d8                	mov    %ebx,%eax
f01291e9:	83 f8 01             	cmp    $0x1,%eax
f01291ec:	74 17                	je     f0129205 <test_kfreelast+0x53b>
f01291ee:	83 ec 04             	sub    $0x4,%esp
f01291f1:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01291f6:	68 ec 0c 00 00       	push   $0xcec
f01291fb:	68 56 a5 13 f0       	push   $0xf013a556
f0129200:	e8 a1 6f fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129205:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012920c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012920f:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129215:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129218:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012921f:	eb 0e                	jmp    f012922f <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f0129221:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129224:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129227:	01 d0                	add    %edx,%eax
f0129229:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012922c:	ff 45 f4             	incl   -0xc(%ebp)
f012922f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129235:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129238:	7f e7                	jg     f0129221 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012923a:	e8 73 2e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012923f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129242:	e8 45 aa fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129247:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012924a:	83 ec 0c             	sub    $0xc,%esp
f012924d:	68 00 1c 00 00       	push   $0x1c00
f0129252:	e8 cb e1 fd ff       	call   f0107422 <kmalloc>
f0129257:	83 c4 10             	add    $0x10,%esp
f012925a:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129260:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129266:	89 c1                	mov    %eax,%ecx
f0129268:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012926f:	10 00 00 
f0129272:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129278:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012927d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129283:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129289:	ba 00 00 00 00       	mov    $0x0,%edx
f012928e:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129294:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012929a:	29 d0                	sub    %edx,%eax
f012929c:	89 c3                	mov    %eax,%ebx
f012929e:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01292a5:	10 00 00 
f01292a8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01292ad:	0f b6 d0             	movzbl %al,%edx
f01292b0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01292b6:	01 d0                	add    %edx,%eax
f01292b8:	48                   	dec    %eax
f01292b9:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01292bf:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01292c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01292ca:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01292d0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01292d6:	29 d0                	sub    %edx,%eax
f01292d8:	01 c3                	add    %eax,%ebx
f01292da:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01292e1:	10 00 00 
f01292e4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01292e9:	0f b6 c0             	movzbl %al,%eax
f01292ec:	c1 e0 04             	shl    $0x4,%eax
f01292ef:	89 c2                	mov    %eax,%edx
f01292f1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01292f7:	01 d0                	add    %edx,%eax
f01292f9:	48                   	dec    %eax
f01292fa:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129300:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129306:	ba 00 00 00 00       	mov    $0x0,%edx
f012930b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129311:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129317:	29 d0                	sub    %edx,%eax
f0129319:	01 d8                	add    %ebx,%eax
f012931b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129320:	39 c1                	cmp    %eax,%ecx
f0129322:	74 17                	je     f012933b <test_kfreelast+0x671>
f0129324:	83 ec 04             	sub    $0x4,%esp
f0129327:	68 3c a6 13 f0       	push   $0xf013a63c
f012932c:	68 f8 0c 00 00       	push   $0xcf8
f0129331:	68 56 a5 13 f0       	push   $0xf013a556
f0129336:	e8 6b 6e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012933b:	e8 4c a9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129340:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129343:	74 17                	je     f012935c <test_kfreelast+0x692>
f0129345:	83 ec 04             	sub    $0x4,%esp
f0129348:	68 70 a5 13 f0       	push   $0xf013a570
f012934d:	68 f9 0c 00 00       	push   $0xcf9
f0129352:	68 56 a5 13 f0       	push   $0xf013a556
f0129357:	e8 4a 6e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012935c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012935f:	e8 4e 2d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129364:	29 c3                	sub    %eax,%ebx
f0129366:	89 d8                	mov    %ebx,%eax
f0129368:	83 f8 02             	cmp    $0x2,%eax
f012936b:	74 17                	je     f0129384 <test_kfreelast+0x6ba>
f012936d:	83 ec 04             	sub    $0x4,%esp
f0129370:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0129375:	68 fa 0c 00 00       	push   $0xcfa
f012937a:	68 56 a5 13 f0       	push   $0xf013a556
f012937f:	e8 22 6e fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129384:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012938b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012938e:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129394:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129397:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012939e:	eb 0e                	jmp    f01293ae <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f01293a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01293a3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01293a6:	01 d0                	add    %edx,%eax
f01293a8:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01293ab:	ff 45 f4             	incl   -0xc(%ebp)
f01293ae:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01293b4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01293b7:	7f e7                	jg     f01293a0 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01293b9:	e8 f4 2c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01293be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293c1:	e8 c6 a8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01293c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01293c9:	83 ec 0c             	sub    $0xc,%esp
f01293cc:	68 00 fc 2f 00       	push   $0x2ffc00
f01293d1:	e8 4c e0 fd ff       	call   f0107422 <kmalloc>
f01293d6:	83 c4 10             	add    $0x10,%esp
f01293d9:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01293df:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f01293e5:	89 c1                	mov    %eax,%ecx
f01293e7:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01293ee:	10 00 00 
f01293f1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01293f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01293fc:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129402:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129408:	ba 00 00 00 00       	mov    $0x0,%edx
f012940d:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129413:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129419:	29 d0                	sub    %edx,%eax
f012941b:	89 c3                	mov    %eax,%ebx
f012941d:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129424:	10 00 00 
f0129427:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012942c:	0f b6 d0             	movzbl %al,%edx
f012942f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129435:	01 d0                	add    %edx,%eax
f0129437:	48                   	dec    %eax
f0129438:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012943e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129444:	ba 00 00 00 00       	mov    $0x0,%edx
f0129449:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012944f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129455:	29 d0                	sub    %edx,%eax
f0129457:	01 c3                	add    %eax,%ebx
f0129459:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129460:	10 00 00 
f0129463:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129468:	0f b6 c0             	movzbl %al,%eax
f012946b:	c1 e0 04             	shl    $0x4,%eax
f012946e:	89 c2                	mov    %eax,%edx
f0129470:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129476:	01 d0                	add    %edx,%eax
f0129478:	48                   	dec    %eax
f0129479:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012947f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129485:	ba 00 00 00 00       	mov    $0x0,%edx
f012948a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129490:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129496:	29 d0                	sub    %edx,%eax
f0129498:	01 d8                	add    %ebx,%eax
f012949a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012949f:	39 c1                	cmp    %eax,%ecx
f01294a1:	74 17                	je     f01294ba <test_kfreelast+0x7f0>
f01294a3:	83 ec 04             	sub    $0x4,%esp
f01294a6:	68 3c a6 13 f0       	push   $0xf013a63c
f01294ab:	68 06 0d 00 00       	push   $0xd06
f01294b0:	68 56 a5 13 f0       	push   $0xf013a556
f01294b5:	e8 ec 6c fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01294ba:	e8 cd a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01294bf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01294c2:	74 17                	je     f01294db <test_kfreelast+0x811>
f01294c4:	83 ec 04             	sub    $0x4,%esp
f01294c7:	68 70 a5 13 f0       	push   $0xf013a570
f01294cc:	68 07 0d 00 00       	push   $0xd07
f01294d1:	68 56 a5 13 f0       	push   $0xf013a556
f01294d6:	e8 cb 6c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01294db:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01294de:	e8 cf 2b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01294e3:	29 c3                	sub    %eax,%ebx
f01294e5:	89 d8                	mov    %ebx,%eax
f01294e7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01294ec:	74 17                	je     f0129505 <test_kfreelast+0x83b>
f01294ee:	83 ec 04             	sub    $0x4,%esp
f01294f1:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01294f6:	68 08 0d 00 00       	push   $0xd08
f01294fb:	68 56 a5 13 f0       	push   $0xf013a556
f0129500:	e8 a1 6c fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129505:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012950c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012950f:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129515:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129518:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012951f:	eb 0e                	jmp    f012952f <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129521:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129524:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129527:	01 d0                	add    %edx,%eax
f0129529:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012952c:	ff 45 f4             	incl   -0xc(%ebp)
f012952f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129535:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129538:	7f e7                	jg     f0129521 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012953a:	e8 73 2b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012953f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129542:	e8 45 a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129547:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012954a:	83 ec 0c             	sub    $0xc,%esp
f012954d:	68 00 fc 5f 00       	push   $0x5ffc00
f0129552:	e8 cb de fd ff       	call   f0107422 <kmalloc>
f0129557:	83 c4 10             	add    $0x10,%esp
f012955a:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129560:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129566:	89 c1                	mov    %eax,%ecx
f0129568:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012956f:	10 00 00 
f0129572:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129578:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012957d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129583:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129589:	ba 00 00 00 00       	mov    $0x0,%edx
f012958e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129594:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012959a:	29 d0                	sub    %edx,%eax
f012959c:	89 c3                	mov    %eax,%ebx
f012959e:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01295a5:	10 00 00 
f01295a8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01295ad:	0f b6 d0             	movzbl %al,%edx
f01295b0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01295b6:	01 d0                	add    %edx,%eax
f01295b8:	48                   	dec    %eax
f01295b9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01295bf:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01295c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01295ca:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01295d0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01295d6:	29 d0                	sub    %edx,%eax
f01295d8:	01 c3                	add    %eax,%ebx
f01295da:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01295e1:	10 00 00 
f01295e4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01295e9:	0f b6 c0             	movzbl %al,%eax
f01295ec:	c1 e0 04             	shl    $0x4,%eax
f01295ef:	89 c2                	mov    %eax,%edx
f01295f1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01295f7:	01 d0                	add    %edx,%eax
f01295f9:	48                   	dec    %eax
f01295fa:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0129600:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129606:	ba 00 00 00 00       	mov    $0x0,%edx
f012960b:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0129611:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129617:	29 d0                	sub    %edx,%eax
f0129619:	01 d8                	add    %ebx,%eax
f012961b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129620:	39 c1                	cmp    %eax,%ecx
f0129622:	74 17                	je     f012963b <test_kfreelast+0x971>
f0129624:	83 ec 04             	sub    $0x4,%esp
f0129627:	68 3c a6 13 f0       	push   $0xf013a63c
f012962c:	68 14 0d 00 00       	push   $0xd14
f0129631:	68 56 a5 13 f0       	push   $0xf013a556
f0129636:	e8 6b 6b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012963b:	e8 4c a6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129640:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129643:	74 17                	je     f012965c <test_kfreelast+0x992>
f0129645:	83 ec 04             	sub    $0x4,%esp
f0129648:	68 70 a5 13 f0       	push   $0xf013a570
f012964d:	68 15 0d 00 00       	push   $0xd15
f0129652:	68 56 a5 13 f0       	push   $0xf013a556
f0129657:	e8 4a 6b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012965c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012965f:	e8 4e 2a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129664:	29 c3                	sub    %eax,%ebx
f0129666:	89 d8                	mov    %ebx,%eax
f0129668:	3d 00 06 00 00       	cmp    $0x600,%eax
f012966d:	74 17                	je     f0129686 <test_kfreelast+0x9bc>
f012966f:	83 ec 04             	sub    $0x4,%esp
f0129672:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0129677:	68 16 0d 00 00       	push   $0xd16
f012967c:	68 56 a5 13 f0       	push   $0xf013a556
f0129681:	e8 20 6b fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0129686:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012968d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129690:	e8 1d 2a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129695:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129698:	e8 ef a5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012969d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01296a0:	83 ec 0c             	sub    $0xc,%esp
f01296a3:	68 00 38 00 00       	push   $0x3800
f01296a8:	e8 75 dd fd ff       	call   f0107422 <kmalloc>
f01296ad:	83 c4 10             	add    $0x10,%esp
f01296b0:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01296b6:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f01296bc:	89 c1                	mov    %eax,%ecx
f01296be:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01296c5:	10 00 00 
f01296c8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01296ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01296d3:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01296d9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01296df:	ba 00 00 00 00       	mov    $0x0,%edx
f01296e4:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01296ea:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01296f0:	29 d0                	sub    %edx,%eax
f01296f2:	89 c3                	mov    %eax,%ebx
f01296f4:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01296fb:	10 00 00 
f01296fe:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129703:	0f b6 d0             	movzbl %al,%edx
f0129706:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012970c:	01 d0                	add    %edx,%eax
f012970e:	48                   	dec    %eax
f012970f:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129715:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012971b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129720:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129726:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012972c:	29 d0                	sub    %edx,%eax
f012972e:	01 c3                	add    %eax,%ebx
f0129730:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129737:	10 00 00 
f012973a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012973f:	0f b6 c0             	movzbl %al,%eax
f0129742:	c1 e0 04             	shl    $0x4,%eax
f0129745:	89 c2                	mov    %eax,%edx
f0129747:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012974d:	01 d0                	add    %edx,%eax
f012974f:	48                   	dec    %eax
f0129750:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129756:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012975c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129761:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129767:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012976d:	29 d0                	sub    %edx,%eax
f012976f:	01 d8                	add    %ebx,%eax
f0129771:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0129776:	39 c1                	cmp    %eax,%ecx
f0129778:	74 17                	je     f0129791 <test_kfreelast+0xac7>
f012977a:	83 ec 04             	sub    $0x4,%esp
f012977d:	68 3c a6 13 f0       	push   $0xf013a63c
f0129782:	68 1d 0d 00 00       	push   $0xd1d
f0129787:	68 56 a5 13 f0       	push   $0xf013a556
f012978c:	e8 15 6a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129791:	e8 f6 a4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129796:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129799:	74 17                	je     f01297b2 <test_kfreelast+0xae8>
f012979b:	83 ec 04             	sub    $0x4,%esp
f012979e:	68 70 a5 13 f0       	push   $0xf013a570
f01297a3:	68 1e 0d 00 00       	push   $0xd1e
f01297a8:	68 56 a5 13 f0       	push   $0xf013a556
f01297ad:	e8 f4 69 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01297b2:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01297b5:	e8 f8 28 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01297ba:	29 c3                	sub    %eax,%ebx
f01297bc:	89 d8                	mov    %ebx,%eax
f01297be:	83 f8 04             	cmp    $0x4,%eax
f01297c1:	74 17                	je     f01297da <test_kfreelast+0xb10>
f01297c3:	83 ec 04             	sub    $0x4,%esp
f01297c6:	68 d8 a5 13 f0       	push   $0xf013a5d8
f01297cb:	68 1f 0d 00 00       	push   $0xd1f
f01297d0:	68 56 a5 13 f0       	push   $0xf013a556
f01297d5:	e8 cc 69 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01297da:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f01297e1:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01297e4:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f01297ea:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01297ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01297f4:	eb 0e                	jmp    f0129804 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f01297f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01297f9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01297fc:	01 d0                	add    %edx,%eax
f01297fe:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129801:	ff 45 f4             	incl   -0xc(%ebp)
f0129804:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012980a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012980d:	7f e7                	jg     f01297f6 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012980f:	e8 9e 28 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129814:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012981a:	e8 6d a4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012981f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f0129825:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012982b:	83 ec 0c             	sub    $0xc,%esp
f012982e:	50                   	push   %eax
f012982f:	e8 08 dc fd ff       	call   f010743c <kfree>
f0129834:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129837:	e8 50 a4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012983c:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129842:	74 17                	je     f012985b <test_kfreelast+0xb91>
f0129844:	83 ec 04             	sub    $0x4,%esp
f0129847:	68 70 a5 13 f0       	push   $0xf013a570
f012984c:	68 2e 0d 00 00       	push   $0xd2e
f0129851:	68 56 a5 13 f0       	push   $0xf013a556
f0129856:	e8 4b 69 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012985b:	e8 52 28 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129860:	89 c2                	mov    %eax,%edx
f0129862:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129868:	29 c2                	sub    %eax,%edx
f012986a:	89 d0                	mov    %edx,%eax
f012986c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129871:	74 17                	je     f012988a <test_kfreelast+0xbc0>
f0129873:	83 ec 04             	sub    $0x4,%esp
f0129876:	68 e0 ac 13 f0       	push   $0xf013ace0
f012987b:	68 2f 0d 00 00       	push   $0xd2f
f0129880:	68 56 a5 13 f0       	push   $0xf013a556
f0129885:	e8 1c 69 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012988a:	e8 23 28 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012988f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129895:	e8 f2 a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012989a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f01298a0:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01298a6:	83 ec 0c             	sub    $0xc,%esp
f01298a9:	50                   	push   %eax
f01298aa:	e8 8d db fd ff       	call   f010743c <kfree>
f01298af:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01298b2:	e8 d5 a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01298b7:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f01298bd:	74 17                	je     f01298d6 <test_kfreelast+0xc0c>
f01298bf:	83 ec 04             	sub    $0x4,%esp
f01298c2:	68 70 a5 13 f0       	push   $0xf013a570
f01298c7:	68 35 0d 00 00       	push   $0xd35
f01298cc:	68 56 a5 13 f0       	push   $0xf013a556
f01298d1:	e8 d0 68 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01298d6:	e8 d7 27 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f01298db:	89 c2                	mov    %eax,%edx
f01298dd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01298e3:	29 c2                	sub    %eax,%edx
f01298e5:	89 d0                	mov    %edx,%eax
f01298e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01298ec:	74 17                	je     f0129905 <test_kfreelast+0xc3b>
f01298ee:	83 ec 04             	sub    $0x4,%esp
f01298f1:	68 e0 ac 13 f0       	push   $0xf013ace0
f01298f6:	68 36 0d 00 00       	push   $0xd36
f01298fb:	68 56 a5 13 f0       	push   $0xf013a556
f0129900:	e8 a1 68 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129905:	e8 a8 27 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012990a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129910:	e8 77 a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129915:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012991b:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129921:	83 ec 0c             	sub    $0xc,%esp
f0129924:	50                   	push   %eax
f0129925:	e8 12 db fd ff       	call   f010743c <kfree>
f012992a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012992d:	e8 5a a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129932:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129938:	74 17                	je     f0129951 <test_kfreelast+0xc87>
f012993a:	83 ec 04             	sub    $0x4,%esp
f012993d:	68 70 a5 13 f0       	push   $0xf013a570
f0129942:	68 3c 0d 00 00       	push   $0xd3c
f0129947:	68 56 a5 13 f0       	push   $0xf013a556
f012994c:	e8 55 68 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0129951:	e8 5c 27 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129956:	89 c2                	mov    %eax,%edx
f0129958:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012995e:	29 c2                	sub    %eax,%edx
f0129960:	89 d0                	mov    %edx,%eax
f0129962:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129967:	74 17                	je     f0129980 <test_kfreelast+0xcb6>
f0129969:	83 ec 04             	sub    $0x4,%esp
f012996c:	68 e0 ac 13 f0       	push   $0xf013ace0
f0129971:	68 3d 0d 00 00       	push   $0xd3d
f0129976:	68 56 a5 13 f0       	push   $0xf013a556
f012997b:	e8 26 68 fd ff       	call   f01001a6 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0129980:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129986:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129990:	eb 1e                	jmp    f01299b0 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f0129992:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129998:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012999b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012999e:	01 c8                	add    %ecx,%eax
f01299a0:	8a 00                	mov    (%eax),%al
f01299a2:	0f be c0             	movsbl %al,%eax
f01299a5:	01 d0                	add    %edx,%eax
f01299a7:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01299ad:	ff 45 f4             	incl   -0xc(%ebp)
f01299b0:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01299b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01299b9:	7f d7                	jg     f0129992 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01299bb:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f01299c1:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01299c7:	01 c0                	add    %eax,%eax
f01299c9:	39 c2                	cmp    %eax,%edx
f01299cb:	74 17                	je     f01299e4 <test_kfreelast+0xd1a>
f01299cd:	83 ec 04             	sub    $0x4,%esp
f01299d0:	68 3c ad 13 f0       	push   $0xf013ad3c
f01299d5:	68 48 0d 00 00       	push   $0xd48
f01299da:	68 56 a5 13 f0       	push   $0xf013a556
f01299df:	e8 c2 67 fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01299e4:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01299ea:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01299ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01299f4:	eb 1e                	jmp    f0129a14 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f01299f6:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f01299fc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01299ff:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129a02:	01 c8                	add    %ecx,%eax
f0129a04:	8a 00                	mov    (%eax),%al
f0129a06:	0f be c0             	movsbl %al,%eax
f0129a09:	01 d0                	add    %edx,%eax
f0129a0b:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129a11:	ff 45 f4             	incl   -0xc(%ebp)
f0129a14:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129a1a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129a1d:	7f d7                	jg     f01299f6 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0129a1f:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129a25:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129a2b:	89 c1                	mov    %eax,%ecx
f0129a2d:	01 c9                	add    %ecx,%ecx
f0129a2f:	01 c8                	add    %ecx,%eax
f0129a31:	39 c2                	cmp    %eax,%edx
f0129a33:	74 17                	je     f0129a4c <test_kfreelast+0xd82>
f0129a35:	83 ec 04             	sub    $0x4,%esp
f0129a38:	68 3c ad 13 f0       	push   $0xf013ad3c
f0129a3d:	68 50 0d 00 00       	push   $0xd50
f0129a42:	68 56 a5 13 f0       	push   $0xf013a556
f0129a47:	e8 5a 67 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0129a4c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129a52:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129a55:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129a5c:	eb 1e                	jmp    f0129a7c <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f0129a5e:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f0129a64:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129a67:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129a6a:	01 c8                	add    %ecx,%eax
f0129a6c:	8a 00                	mov    (%eax),%al
f0129a6e:	0f be c0             	movsbl %al,%eax
f0129a71:	01 d0                	add    %edx,%eax
f0129a73:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129a79:	ff 45 f4             	incl   -0xc(%ebp)
f0129a7c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129a82:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129a85:	7f d7                	jg     f0129a5e <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0129a87:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0129a8d:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f0129a93:	c1 e2 02             	shl    $0x2,%edx
f0129a96:	39 d0                	cmp    %edx,%eax
f0129a98:	74 17                	je     f0129ab1 <test_kfreelast+0xde7>
f0129a9a:	83 ec 04             	sub    $0x4,%esp
f0129a9d:	68 3c ad 13 f0       	push   $0xf013ad3c
f0129aa2:	68 58 0d 00 00       	push   $0xd58
f0129aa7:	68 56 a5 13 f0       	push   $0xf013a556
f0129aac:	e8 f5 66 fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0129ab1:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129ab7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129aba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ac1:	eb 1e                	jmp    f0129ae1 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f0129ac3:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f0129ac9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129acc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129acf:	01 c8                	add    %ecx,%eax
f0129ad1:	8a 00                	mov    (%eax),%al
f0129ad3:	0f be c0             	movsbl %al,%eax
f0129ad6:	01 d0                	add    %edx,%eax
f0129ad8:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129ade:	ff 45 f4             	incl   -0xc(%ebp)
f0129ae1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129ae7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129aea:	7f d7                	jg     f0129ac3 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0129aec:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f0129af2:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0129af8:	89 d0                	mov    %edx,%eax
f0129afa:	c1 e0 02             	shl    $0x2,%eax
f0129afd:	01 d0                	add    %edx,%eax
f0129aff:	39 c1                	cmp    %eax,%ecx
f0129b01:	74 17                	je     f0129b1a <test_kfreelast+0xe50>
f0129b03:	83 ec 04             	sub    $0x4,%esp
f0129b06:	68 3c ad 13 f0       	push   $0xf013ad3c
f0129b0b:	68 60 0d 00 00       	push   $0xd60
f0129b10:	68 56 a5 13 f0       	push   $0xf013a556
f0129b15:	e8 8c 66 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0129b1a:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129b20:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129b23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b2a:	eb 1e                	jmp    f0129b4a <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f0129b2c:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f0129b32:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129b35:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129b38:	01 c8                	add    %ecx,%eax
f0129b3a:	8a 00                	mov    (%eax),%al
f0129b3c:	0f be c0             	movsbl %al,%eax
f0129b3f:	01 d0                	add    %edx,%eax
f0129b41:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129b47:	ff 45 f4             	incl   -0xc(%ebp)
f0129b4a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129b50:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129b53:	7f d7                	jg     f0129b2c <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0129b55:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f0129b5b:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0129b61:	89 d0                	mov    %edx,%eax
f0129b63:	01 c0                	add    %eax,%eax
f0129b65:	01 d0                	add    %edx,%eax
f0129b67:	01 c0                	add    %eax,%eax
f0129b69:	01 d0                	add    %edx,%eax
f0129b6b:	39 c1                	cmp    %eax,%ecx
f0129b6d:	74 17                	je     f0129b86 <test_kfreelast+0xebc>
f0129b6f:	83 ec 04             	sub    $0x4,%esp
f0129b72:	68 3c ad 13 f0       	push   $0xf013ad3c
f0129b77:	68 68 0d 00 00       	push   $0xd68
f0129b7c:	68 56 a5 13 f0       	push   $0xf013a556
f0129b81:	e8 20 66 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129b86:	e8 27 25 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129b8b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b8e:	e8 f9 a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129b93:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0129b96:	83 ec 0c             	sub    $0xc,%esp
f0129b99:	68 00 50 00 00       	push   $0x5000
f0129b9e:	e8 7f d8 fd ff       	call   f0107422 <kmalloc>
f0129ba3:	83 c4 10             	add    $0x10,%esp
f0129ba6:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129bac:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0129bb2:	89 c1                	mov    %eax,%ecx
f0129bb4:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129bbb:	10 00 00 
f0129bbe:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129bc4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129bc9:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129bcf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129bd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bda:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129be0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129be6:	29 d0                	sub    %edx,%eax
f0129be8:	89 c3                	mov    %eax,%ebx
f0129bea:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129bf1:	10 00 00 
f0129bf4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129bf9:	0f b6 d0             	movzbl %al,%edx
f0129bfc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129c02:	01 d0                	add    %edx,%eax
f0129c04:	48                   	dec    %eax
f0129c05:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129c0b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129c11:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c16:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129c1c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129c22:	29 d0                	sub    %edx,%eax
f0129c24:	01 c3                	add    %eax,%ebx
f0129c26:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129c2d:	10 00 00 
f0129c30:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129c35:	0f b6 c0             	movzbl %al,%eax
f0129c38:	c1 e0 04             	shl    $0x4,%eax
f0129c3b:	89 c2                	mov    %eax,%edx
f0129c3d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129c43:	01 d0                	add    %edx,%eax
f0129c45:	48                   	dec    %eax
f0129c46:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0129c4c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129c52:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c57:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0129c5d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129c63:	29 d0                	sub    %edx,%eax
f0129c65:	01 d8                	add    %ebx,%eax
f0129c67:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0129c6c:	39 c1                	cmp    %eax,%ecx
f0129c6e:	74 17                	je     f0129c87 <test_kfreelast+0xfbd>
f0129c70:	83 ec 04             	sub    $0x4,%esp
f0129c73:	68 3c a6 13 f0       	push   $0xf013a63c
f0129c78:	68 71 0d 00 00       	push   $0xd71
f0129c7d:	68 56 a5 13 f0       	push   $0xf013a556
f0129c82:	e8 1f 65 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129c87:	e8 00 a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129c8c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c8f:	74 17                	je     f0129ca8 <test_kfreelast+0xfde>
f0129c91:	83 ec 04             	sub    $0x4,%esp
f0129c94:	68 70 a5 13 f0       	push   $0xf013a570
f0129c99:	68 72 0d 00 00       	push   $0xd72
f0129c9e:	68 56 a5 13 f0       	push   $0xf013a556
f0129ca3:	e8 fe 64 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129ca8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129cab:	e8 02 24 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129cb0:	29 c3                	sub    %eax,%ebx
f0129cb2:	89 d8                	mov    %ebx,%eax
f0129cb4:	83 f8 05             	cmp    $0x5,%eax
f0129cb7:	74 17                	je     f0129cd0 <test_kfreelast+0x1006>
f0129cb9:	83 ec 04             	sub    $0x4,%esp
f0129cbc:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0129cc1:	68 73 0d 00 00       	push   $0xd73
f0129cc6:	68 56 a5 13 f0       	push   $0xf013a556
f0129ccb:	e8 d6 64 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0129cd0:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f0129cd7:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0129cda:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0129ce0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0129ce3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129cea:	eb 0e                	jmp    f0129cfa <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f0129cec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129cef:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129cf2:	01 d0                	add    %edx,%eax
f0129cf4:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0129cf7:	ff 45 f4             	incl   -0xc(%ebp)
f0129cfa:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0129d00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129d03:	7f e7                	jg     f0129cec <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129d05:	e8 a8 23 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129d0a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d0d:	e8 7a 9f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129d12:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0129d15:	83 ec 0c             	sub    $0xc,%esp
f0129d18:	68 00 00 10 00       	push   $0x100000
f0129d1d:	e8 00 d7 fd ff       	call   f0107422 <kmalloc>
f0129d22:	83 c4 10             	add    $0x10,%esp
f0129d25:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129d2b:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129d31:	89 c1                	mov    %eax,%ecx
f0129d33:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0129d3a:	10 00 00 
f0129d3d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0129d43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d48:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0129d4e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129d54:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d59:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0129d5f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129d65:	29 d0                	sub    %edx,%eax
f0129d67:	89 c3                	mov    %eax,%ebx
f0129d69:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0129d70:	10 00 00 
f0129d73:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129d78:	0f b6 d0             	movzbl %al,%edx
f0129d7b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0129d81:	01 d0                	add    %edx,%eax
f0129d83:	48                   	dec    %eax
f0129d84:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0129d8a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129d90:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d95:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0129d9b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129da1:	29 d0                	sub    %edx,%eax
f0129da3:	01 c3                	add    %eax,%ebx
f0129da5:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0129dac:	10 00 00 
f0129daf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129db4:	0f b6 c0             	movzbl %al,%eax
f0129db7:	c1 e0 04             	shl    $0x4,%eax
f0129dba:	89 c2                	mov    %eax,%edx
f0129dbc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0129dc2:	01 d0                	add    %edx,%eax
f0129dc4:	48                   	dec    %eax
f0129dc5:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0129dcb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129dd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0129dd6:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0129ddc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129de2:	29 d0                	sub    %edx,%eax
f0129de4:	01 d8                	add    %ebx,%eax
f0129de6:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129deb:	39 c1                	cmp    %eax,%ecx
f0129ded:	74 17                	je     f0129e06 <test_kfreelast+0x113c>
f0129def:	83 ec 04             	sub    $0x4,%esp
f0129df2:	68 3c a6 13 f0       	push   $0xf013a63c
f0129df7:	68 7f 0d 00 00       	push   $0xd7f
f0129dfc:	68 56 a5 13 f0       	push   $0xf013a556
f0129e01:	e8 a0 63 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e06:	e8 81 9e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129e0b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e0e:	74 17                	je     f0129e27 <test_kfreelast+0x115d>
f0129e10:	83 ec 04             	sub    $0x4,%esp
f0129e13:	68 70 a5 13 f0       	push   $0xf013a570
f0129e18:	68 80 0d 00 00       	push   $0xd80
f0129e1d:	68 56 a5 13 f0       	push   $0xf013a556
f0129e22:	e8 7f 63 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129e27:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129e2a:	e8 83 22 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129e2f:	29 c3                	sub    %eax,%ebx
f0129e31:	89 d8                	mov    %ebx,%eax
f0129e33:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129e38:	74 17                	je     f0129e51 <test_kfreelast+0x1187>
f0129e3a:	83 ec 04             	sub    $0x4,%esp
f0129e3d:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0129e42:	68 81 0d 00 00       	push   $0xd81
f0129e47:	68 56 a5 13 f0       	push   $0xf013a556
f0129e4c:	e8 55 63 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0129e51:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f0129e58:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0129e5b:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129e61:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0129e64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e6b:	eb 0e                	jmp    f0129e7b <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f0129e6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129e70:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e73:	01 d0                	add    %edx,%eax
f0129e75:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0129e78:	ff 45 f4             	incl   -0xc(%ebp)
f0129e7b:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0129e81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129e84:	7f e7                	jg     f0129e6d <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0129e86:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129e8d:	e8 20 22 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129e92:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e95:	e8 f2 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129e9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129e9d:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129ea3:	83 ec 0c             	sub    $0xc,%esp
f0129ea6:	50                   	push   %eax
f0129ea7:	e8 90 d5 fd ff       	call   f010743c <kfree>
f0129eac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129eaf:	e8 d8 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129eb4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129eb7:	74 17                	je     f0129ed0 <test_kfreelast+0x1206>
f0129eb9:	83 ec 04             	sub    $0x4,%esp
f0129ebc:	68 70 a5 13 f0       	push   $0xf013a570
f0129ec1:	68 91 0d 00 00       	push   $0xd91
f0129ec6:	68 56 a5 13 f0       	push   $0xf013a556
f0129ecb:	e8 d6 62 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0129ed0:	e8 dd 21 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129ed5:	89 c2                	mov    %eax,%edx
f0129ed7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129eda:	29 c2                	sub    %eax,%edx
f0129edc:	89 d0                	mov    %edx,%eax
f0129ede:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129ee3:	74 17                	je     f0129efc <test_kfreelast+0x1232>
f0129ee5:	83 ec 04             	sub    $0x4,%esp
f0129ee8:	68 e0 ac 13 f0       	push   $0xf013ace0
f0129eed:	68 92 0d 00 00       	push   $0xd92
f0129ef2:	68 56 a5 13 f0       	push   $0xf013a556
f0129ef7:	e8 aa 62 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129efc:	e8 b1 21 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f0129f01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f04:	e8 83 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129f09:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0129f0c:	83 ec 0c             	sub    $0xc,%esp
f0129f0f:	68 00 78 00 00       	push   $0x7800
f0129f14:	e8 09 d5 fd ff       	call   f0107422 <kmalloc>
f0129f19:	83 c4 10             	add    $0x10,%esp
f0129f1c:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129f22:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f0129f28:	89 c1                	mov    %eax,%ecx
f0129f2a:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0129f31:	10 00 00 
f0129f34:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0129f3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129f3f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0129f45:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0129f4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f50:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0129f56:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0129f5c:	29 d0                	sub    %edx,%eax
f0129f5e:	89 c3                	mov    %eax,%ebx
f0129f60:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0129f67:	10 00 00 
f0129f6a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129f6f:	0f b6 d0             	movzbl %al,%edx
f0129f72:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0129f78:	01 d0                	add    %edx,%eax
f0129f7a:	48                   	dec    %eax
f0129f7b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0129f81:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0129f87:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f8c:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0129f92:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0129f98:	29 d0                	sub    %edx,%eax
f0129f9a:	01 c3                	add    %eax,%ebx
f0129f9c:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0129fa3:	10 00 00 
f0129fa6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129fab:	0f b6 c0             	movzbl %al,%eax
f0129fae:	c1 e0 04             	shl    $0x4,%eax
f0129fb1:	89 c2                	mov    %eax,%edx
f0129fb3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0129fb9:	01 d0                	add    %edx,%eax
f0129fbb:	48                   	dec    %eax
f0129fbc:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0129fc2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129fc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fcd:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0129fd3:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129fd9:	29 d0                	sub    %edx,%eax
f0129fdb:	01 d8                	add    %ebx,%eax
f0129fdd:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129fe2:	39 c1                	cmp    %eax,%ecx
f0129fe4:	74 17                	je     f0129ffd <test_kfreelast+0x1333>
f0129fe6:	83 ec 04             	sub    $0x4,%esp
f0129fe9:	68 3c a6 13 f0       	push   $0xf013a63c
f0129fee:	68 9b 0d 00 00       	push   $0xd9b
f0129ff3:	68 56 a5 13 f0       	push   $0xf013a556
f0129ff8:	e8 a9 61 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ffd:	e8 8a 9c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a002:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a005:	74 17                	je     f012a01e <test_kfreelast+0x1354>
f012a007:	83 ec 04             	sub    $0x4,%esp
f012a00a:	68 70 a5 13 f0       	push   $0xf013a570
f012a00f:	68 9c 0d 00 00       	push   $0xd9c
f012a014:	68 56 a5 13 f0       	push   $0xf013a556
f012a019:	e8 88 61 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a01e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a021:	e8 8c 20 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a026:	29 c3                	sub    %eax,%ebx
f012a028:	89 d8                	mov    %ebx,%eax
f012a02a:	83 f8 08             	cmp    $0x8,%eax
f012a02d:	74 17                	je     f012a046 <test_kfreelast+0x137c>
f012a02f:	83 ec 04             	sub    $0x4,%esp
f012a032:	68 d8 a5 13 f0       	push   $0xf013a5d8
f012a037:	68 9d 0d 00 00       	push   $0xd9d
f012a03c:	68 56 a5 13 f0       	push   $0xf013a556
f012a041:	e8 60 61 fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012a046:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012a04d:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012a050:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a056:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012a059:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a060:	eb 0e                	jmp    f012a070 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012a062:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a065:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a068:	01 d0                	add    %edx,%eax
f012a06a:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012a06d:	ff 45 f4             	incl   -0xc(%ebp)
f012a070:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012a076:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a079:	7f e7                	jg     f012a062 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a07b:	e8 32 20 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a080:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a083:	e8 04 9c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a088:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012a08b:	83 ec 0c             	sub    $0xc,%esp
f012a08e:	68 00 00 10 00       	push   $0x100000
f012a093:	e8 8a d3 fd ff       	call   f0107422 <kmalloc>
f012a098:	83 c4 10             	add    $0x10,%esp
f012a09b:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a0a1:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a0a7:	89 c1                	mov    %eax,%ecx
f012a0a9:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012a0b0:	10 00 00 
f012a0b3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a0b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a0be:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012a0c4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a0ca:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0cf:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012a0d5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a0db:	29 d0                	sub    %edx,%eax
f012a0dd:	89 c3                	mov    %eax,%ebx
f012a0df:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012a0e6:	10 00 00 
f012a0e9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a0ee:	0f b6 d0             	movzbl %al,%edx
f012a0f1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a0f7:	01 d0                	add    %edx,%eax
f012a0f9:	48                   	dec    %eax
f012a0fa:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012a100:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a106:	ba 00 00 00 00       	mov    $0x0,%edx
f012a10b:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012a111:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a117:	29 d0                	sub    %edx,%eax
f012a119:	01 c3                	add    %eax,%ebx
f012a11b:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012a122:	10 00 00 
f012a125:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a12a:	0f b6 c0             	movzbl %al,%eax
f012a12d:	c1 e0 04             	shl    $0x4,%eax
f012a130:	89 c2                	mov    %eax,%edx
f012a132:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a138:	01 d0                	add    %edx,%eax
f012a13a:	48                   	dec    %eax
f012a13b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012a141:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a147:	ba 00 00 00 00       	mov    $0x0,%edx
f012a14c:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012a152:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a158:	29 d0                	sub    %edx,%eax
f012a15a:	01 d8                	add    %ebx,%eax
f012a15c:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012a161:	39 c1                	cmp    %eax,%ecx
f012a163:	74 17                	je     f012a17c <test_kfreelast+0x14b2>
f012a165:	83 ec 04             	sub    $0x4,%esp
f012a168:	68 3c a6 13 f0       	push   $0xf013a63c
f012a16d:	68 a9 0d 00 00       	push   $0xda9
f012a172:	68 56 a5 13 f0       	push   $0xf013a556
f012a177:	e8 2a 60 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a17c:	e8 0b 9b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a181:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a184:	74 17                	je     f012a19d <test_kfreelast+0x14d3>
f012a186:	83 ec 04             	sub    $0x4,%esp
f012a189:	68 70 a5 13 f0       	push   $0xf013a570
f012a18e:	68 aa 0d 00 00       	push   $0xdaa
f012a193:	68 56 a5 13 f0       	push   $0xf013a556
f012a198:	e8 09 60 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a19d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a1a0:	e8 0d 1f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a1a5:	29 c3                	sub    %eax,%ebx
f012a1a7:	89 d8                	mov    %ebx,%eax
f012a1a9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a1ae:	74 17                	je     f012a1c7 <test_kfreelast+0x14fd>
f012a1b0:	83 ec 04             	sub    $0x4,%esp
f012a1b3:	68 d8 a5 13 f0       	push   $0xf013a5d8
f012a1b8:	68 ab 0d 00 00       	push   $0xdab
f012a1bd:	68 56 a5 13 f0       	push   $0xf013a556
f012a1c2:	e8 df 5f fd ff       	call   f01001a6 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012a1c7:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012a1ce:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012a1d1:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a1d7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012a1da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a1e1:	eb 0e                	jmp    f012a1f1 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012a1e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a1e6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a1e9:	01 d0                	add    %edx,%eax
f012a1eb:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012a1ee:	ff 45 f4             	incl   -0xc(%ebp)
f012a1f1:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012a1f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a1fa:	7f e7                	jg     f012a1e3 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012a1fc:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012a200:	83 ec 08             	sub    $0x8,%esp
f012a203:	ff 75 f0             	pushl  -0x10(%ebp)
f012a206:	68 88 b5 13 f0       	push   $0xf013b588
f012a20b:	e8 1d 6a fd ff       	call   f0100c2d <cprintf>
f012a210:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012a213:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a21a:	e8 93 1e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a21f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a222:	e8 65 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a227:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012a22a:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a230:	83 ec 0c             	sub    $0xc,%esp
f012a233:	50                   	push   %eax
f012a234:	e8 03 d2 fd ff       	call   f010743c <kfree>
f012a239:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a23c:	e8 4b 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a241:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a244:	74 1d                	je     f012a263 <test_kfreelast+0x1599>
f012a246:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a24a:	75 17                	jne    f012a263 <test_kfreelast+0x1599>
f012a24c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a253:	83 ec 0c             	sub    $0xc,%esp
f012a256:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012a25b:	e8 cd 69 fd ff       	call   f0100c2d <cprintf>
f012a260:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a263:	e8 4a 1e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a268:	89 c2                	mov    %eax,%edx
f012a26a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a26d:	29 c2                	sub    %eax,%edx
f012a26f:	89 d0                	mov    %edx,%eax
f012a271:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a276:	74 1d                	je     f012a295 <test_kfreelast+0x15cb>
f012a278:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a27c:	75 17                	jne    f012a295 <test_kfreelast+0x15cb>
f012a27e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a285:	83 ec 0c             	sub    $0xc,%esp
f012a288:	68 1c b6 13 f0       	push   $0xf013b61c
f012a28d:	e8 9b 69 fd ff       	call   f0100c2d <cprintf>
f012a292:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a295:	e8 18 1e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a29a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a29d:	e8 ea 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a2a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012a2a5:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a2ab:	83 ec 0c             	sub    $0xc,%esp
f012a2ae:	50                   	push   %eax
f012a2af:	e8 88 d1 fd ff       	call   f010743c <kfree>
f012a2b4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a2b7:	e8 d0 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a2bc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2bf:	74 1d                	je     f012a2de <test_kfreelast+0x1614>
f012a2c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a2c5:	75 17                	jne    f012a2de <test_kfreelast+0x1614>
f012a2c7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a2ce:	83 ec 0c             	sub    $0xc,%esp
f012a2d1:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012a2d6:	e8 52 69 fd ff       	call   f0100c2d <cprintf>
f012a2db:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a2de:	e8 cf 1d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a2e3:	89 c2                	mov    %eax,%edx
f012a2e5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a2e8:	29 c2                	sub    %eax,%edx
f012a2ea:	89 d0                	mov    %edx,%eax
f012a2ec:	83 f8 08             	cmp    $0x8,%eax
f012a2ef:	74 1d                	je     f012a30e <test_kfreelast+0x1644>
f012a2f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a2f5:	75 17                	jne    f012a30e <test_kfreelast+0x1644>
f012a2f7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a2fe:	83 ec 0c             	sub    $0xc,%esp
f012a301:	68 1c b6 13 f0       	push   $0xf013b61c
f012a306:	e8 22 69 fd ff       	call   f0100c2d <cprintf>
f012a30b:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a30e:	e8 9f 1d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a313:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a316:	e8 71 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a31b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012a31e:	83 ec 0c             	sub    $0xc,%esp
f012a321:	68 00 28 00 00       	push   $0x2800
f012a326:	e8 f7 d0 fd ff       	call   f0107422 <kmalloc>
f012a32b:	83 c4 10             	add    $0x10,%esp
f012a32e:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a334:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a33a:	89 c1                	mov    %eax,%ecx
f012a33c:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012a343:	10 00 00 
f012a346:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012a34c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a351:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012a357:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a35d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a362:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012a368:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a36e:	29 d0                	sub    %edx,%eax
f012a370:	89 c3                	mov    %eax,%ebx
f012a372:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012a379:	10 00 00 
f012a37c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a381:	0f b6 d0             	movzbl %al,%edx
f012a384:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012a38a:	01 d0                	add    %edx,%eax
f012a38c:	48                   	dec    %eax
f012a38d:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012a393:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a399:	ba 00 00 00 00       	mov    $0x0,%edx
f012a39e:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012a3a4:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a3aa:	29 d0                	sub    %edx,%eax
f012a3ac:	01 c3                	add    %eax,%ebx
f012a3ae:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012a3b5:	10 00 00 
f012a3b8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a3bd:	0f b6 c0             	movzbl %al,%eax
f012a3c0:	c1 e0 04             	shl    $0x4,%eax
f012a3c3:	89 c2                	mov    %eax,%edx
f012a3c5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012a3cb:	01 d0                	add    %edx,%eax
f012a3cd:	48                   	dec    %eax
f012a3ce:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012a3d4:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a3da:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3df:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012a3e5:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a3eb:	29 d0                	sub    %edx,%eax
f012a3ed:	01 d8                	add    %ebx,%eax
f012a3ef:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a3f4:	39 c1                	cmp    %eax,%ecx
f012a3f6:	74 1d                	je     f012a415 <test_kfreelast+0x174b>
f012a3f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a3fc:	75 17                	jne    f012a415 <test_kfreelast+0x174b>
f012a3fe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a405:	83 ec 0c             	sub    $0xc,%esp
f012a408:	68 54 b6 13 f0       	push   $0xf013b654
f012a40d:	e8 1b 68 fd ff       	call   f0100c2d <cprintf>
f012a412:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a415:	e8 72 98 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a41a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a41d:	74 1d                	je     f012a43c <test_kfreelast+0x1772>
f012a41f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a423:	75 17                	jne    f012a43c <test_kfreelast+0x1772>
f012a425:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a42c:	83 ec 0c             	sub    $0xc,%esp
f012a42f:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012a434:	e8 f4 67 fd ff       	call   f0100c2d <cprintf>
f012a439:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a43c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a43f:	e8 6e 1c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a444:	29 c3                	sub    %eax,%ebx
f012a446:	89 d8                	mov    %ebx,%eax
f012a448:	83 f8 03             	cmp    $0x3,%eax
f012a44b:	74 1d                	je     f012a46a <test_kfreelast+0x17a0>
f012a44d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a451:	75 17                	jne    f012a46a <test_kfreelast+0x17a0>
f012a453:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a45a:	83 ec 0c             	sub    $0xc,%esp
f012a45d:	68 bc b6 13 f0       	push   $0xf013b6bc
f012a462:	e8 c6 67 fd ff       	call   f0100c2d <cprintf>
f012a467:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012a46a:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012a471:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012a474:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a47a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a47d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a484:	eb 0e                	jmp    f012a494 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012a486:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a489:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a48c:	01 d0                	add    %edx,%eax
f012a48e:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a491:	ff 45 f4             	incl   -0xc(%ebp)
f012a494:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a49a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a49d:	7f e7                	jg     f012a486 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a49f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a4a3:	75 17                	jne    f012a4bc <test_kfreelast+0x17f2>
f012a4a5:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012a4a9:	83 ec 08             	sub    $0x8,%esp
f012a4ac:	ff 75 f0             	pushl  -0x10(%ebp)
f012a4af:	68 88 b5 13 f0       	push   $0xf013b588
f012a4b4:	e8 74 67 fd ff       	call   f0100c2d <cprintf>
f012a4b9:	83 c4 10             	add    $0x10,%esp
f012a4bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012a4c3:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a4c9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a4cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4d3:	eb 1e                	jmp    f012a4f3 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012a4d5:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012a4db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a4de:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4e1:	01 c8                	add    %ecx,%eax
f012a4e3:	8a 00                	mov    (%eax),%al
f012a4e5:	0f be c0             	movsbl %al,%eax
f012a4e8:	01 d0                	add    %edx,%eax
f012a4ea:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a4f0:	ff 45 f4             	incl   -0xc(%ebp)
f012a4f3:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a4f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a4fc:	7f d7                	jg     f012a4d5 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012a4fe:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012a504:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012a50a:	89 d0                	mov    %edx,%eax
f012a50c:	01 c0                	add    %eax,%eax
f012a50e:	01 d0                	add    %edx,%eax
f012a510:	c1 e0 02             	shl    $0x2,%eax
f012a513:	39 c1                	cmp    %eax,%ecx
f012a515:	74 1d                	je     f012a534 <test_kfreelast+0x186a>
f012a517:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a51b:	75 17                	jne    f012a534 <test_kfreelast+0x186a>
f012a51d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a524:	83 ec 0c             	sub    $0xc,%esp
f012a527:	68 00 b7 13 f0       	push   $0xf013b700
f012a52c:	e8 fc 66 fd ff       	call   f0100c2d <cprintf>
f012a531:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012a534:	83 ec 0c             	sub    $0xc,%esp
f012a537:	6a 03                	push   $0x3
f012a539:	e8 1d 20 fe ff       	call   f010c55b <sys_bypassPageFault>
f012a53e:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012a541:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a547:	05 00 30 00 00       	add    $0x3000,%eax
f012a54c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012a54f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a556:	eb 3c                	jmp    f012a594 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012a558:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a55b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a55e:	01 d0                	add    %edx,%eax
f012a560:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a563:	e8 e1 1f fe ff       	call   f010c549 <sys_rcr2>
f012a568:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a56b:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012a56e:	01 ca                	add    %ecx,%edx
f012a570:	39 d0                	cmp    %edx,%eax
f012a572:	74 1d                	je     f012a591 <test_kfreelast+0x18c7>
f012a574:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a578:	75 17                	jne    f012a591 <test_kfreelast+0x18c7>
f012a57a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a581:	83 ec 0c             	sub    $0xc,%esp
f012a584:	68 34 b7 13 f0       	push   $0xf013b734
f012a589:	e8 9f 66 fd ff       	call   f0100c2d <cprintf>
f012a58e:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012a591:	ff 45 f4             	incl   -0xc(%ebp)
f012a594:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012a59b:	7e bb                	jle    f012a558 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012a59d:	83 ec 0c             	sub    $0xc,%esp
f012a5a0:	6a 00                	push   $0x0
f012a5a2:	e8 b4 1f fe ff       	call   f010c55b <sys_bypassPageFault>
f012a5a7:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a5aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a5ae:	75 17                	jne    f012a5c7 <test_kfreelast+0x18fd>
f012a5b0:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012a5b4:	83 ec 08             	sub    $0x8,%esp
f012a5b7:	ff 75 f0             	pushl  -0x10(%ebp)
f012a5ba:	68 88 b5 13 f0       	push   $0xf013b588
f012a5bf:	e8 69 66 fd ff       	call   f0100c2d <cprintf>
f012a5c4:	83 c4 10             	add    $0x10,%esp
f012a5c7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a5ce:	e8 df 1a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a5d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a5d6:	e8 b1 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a5db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012a5de:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a5e4:	83 ec 0c             	sub    $0xc,%esp
f012a5e7:	50                   	push   %eax
f012a5e8:	e8 4f ce fd ff       	call   f010743c <kfree>
f012a5ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a5f0:	e8 97 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a5f5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5f8:	74 1d                	je     f012a617 <test_kfreelast+0x194d>
f012a5fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a5fe:	75 17                	jne    f012a617 <test_kfreelast+0x194d>
f012a600:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a607:	83 ec 0c             	sub    $0xc,%esp
f012a60a:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012a60f:	e8 19 66 fd ff       	call   f0100c2d <cprintf>
f012a614:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a617:	e8 96 1a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a61c:	89 c2                	mov    %eax,%edx
f012a61e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a621:	29 c2                	sub    %eax,%edx
f012a623:	89 d0                	mov    %edx,%eax
f012a625:	83 f8 03             	cmp    $0x3,%eax
f012a628:	74 1d                	je     f012a647 <test_kfreelast+0x197d>
f012a62a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a62e:	75 17                	jne    f012a647 <test_kfreelast+0x197d>
f012a630:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a637:	83 ec 0c             	sub    $0xc,%esp
f012a63a:	68 1c b6 13 f0       	push   $0xf013b61c
f012a63f:	e8 e9 65 fd ff       	call   f0100c2d <cprintf>
f012a644:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a647:	e8 66 1a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a64c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a64f:	e8 38 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a654:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012a657:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a65d:	83 ec 0c             	sub    $0xc,%esp
f012a660:	50                   	push   %eax
f012a661:	e8 d6 cd fd ff       	call   f010743c <kfree>
f012a666:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a669:	e8 1e 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a66e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a671:	74 1d                	je     f012a690 <test_kfreelast+0x19c6>
f012a673:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a677:	75 17                	jne    f012a690 <test_kfreelast+0x19c6>
f012a679:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a680:	83 ec 0c             	sub    $0xc,%esp
f012a683:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012a688:	e8 a0 65 fd ff       	call   f0100c2d <cprintf>
f012a68d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a690:	e8 1d 1a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a695:	89 c2                	mov    %eax,%edx
f012a697:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a69a:	29 c2                	sub    %eax,%edx
f012a69c:	89 d0                	mov    %edx,%eax
f012a69e:	83 f8 04             	cmp    $0x4,%eax
f012a6a1:	74 1d                	je     f012a6c0 <test_kfreelast+0x19f6>
f012a6a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a6a7:	75 17                	jne    f012a6c0 <test_kfreelast+0x19f6>
f012a6a9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a6b0:	83 ec 0c             	sub    $0xc,%esp
f012a6b3:	68 1c b6 13 f0       	push   $0xf013b61c
f012a6b8:	e8 70 65 fd ff       	call   f0100c2d <cprintf>
f012a6bd:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a6c0:	e8 ed 19 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a6c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a6c8:	e8 bf 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a6cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012a6d0:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a6d6:	83 ec 0c             	sub    $0xc,%esp
f012a6d9:	50                   	push   %eax
f012a6da:	e8 5d cd fd ff       	call   f010743c <kfree>
f012a6df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a6e2:	e8 a5 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a6e7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a6ea:	74 1d                	je     f012a709 <test_kfreelast+0x1a3f>
f012a6ec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a6f0:	75 17                	jne    f012a709 <test_kfreelast+0x1a3f>
f012a6f2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a6f9:	83 ec 0c             	sub    $0xc,%esp
f012a6fc:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012a701:	e8 27 65 fd ff       	call   f0100c2d <cprintf>
f012a706:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a709:	e8 a4 19 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a70e:	89 c2                	mov    %eax,%edx
f012a710:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a713:	29 c2                	sub    %eax,%edx
f012a715:	89 d0                	mov    %edx,%eax
f012a717:	83 f8 05             	cmp    $0x5,%eax
f012a71a:	74 1d                	je     f012a739 <test_kfreelast+0x1a6f>
f012a71c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a720:	75 17                	jne    f012a739 <test_kfreelast+0x1a6f>
f012a722:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a729:	83 ec 0c             	sub    $0xc,%esp
f012a72c:	68 1c b6 13 f0       	push   $0xf013b61c
f012a731:	e8 f7 64 fd ff       	call   f0100c2d <cprintf>
f012a736:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012a739:	e8 74 19 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a73e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a741:	e8 46 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a746:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012a749:	83 ec 0c             	sub    $0xc,%esp
f012a74c:	68 00 c8 00 00       	push   $0xc800
f012a751:	e8 cc cc fd ff       	call   f0107422 <kmalloc>
f012a756:	83 c4 10             	add    $0x10,%esp
f012a759:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a75f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a765:	89 c1                	mov    %eax,%ecx
f012a767:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012a76e:	10 00 00 
f012a771:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012a777:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a77c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012a782:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012a788:	ba 00 00 00 00       	mov    $0x0,%edx
f012a78d:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012a793:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012a799:	29 d0                	sub    %edx,%eax
f012a79b:	89 c3                	mov    %eax,%ebx
f012a79d:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012a7a4:	10 00 00 
f012a7a7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a7ac:	0f b6 d0             	movzbl %al,%edx
f012a7af:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012a7b5:	01 d0                	add    %edx,%eax
f012a7b7:	48                   	dec    %eax
f012a7b8:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012a7be:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012a7c4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7c9:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012a7cf:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012a7d5:	29 d0                	sub    %edx,%eax
f012a7d7:	01 c3                	add    %eax,%ebx
f012a7d9:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012a7e0:	10 00 00 
f012a7e3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a7e8:	0f b6 c0             	movzbl %al,%eax
f012a7eb:	c1 e0 04             	shl    $0x4,%eax
f012a7ee:	89 c2                	mov    %eax,%edx
f012a7f0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012a7f6:	01 d0                	add    %edx,%eax
f012a7f8:	48                   	dec    %eax
f012a7f9:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012a7ff:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a805:	ba 00 00 00 00       	mov    $0x0,%edx
f012a80a:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012a810:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a816:	29 d0                	sub    %edx,%eax
f012a818:	01 d8                	add    %ebx,%eax
f012a81a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a81f:	39 c1                	cmp    %eax,%ecx
f012a821:	74 1d                	je     f012a840 <test_kfreelast+0x1b76>
f012a823:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a827:	75 17                	jne    f012a840 <test_kfreelast+0x1b76>
f012a829:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a830:	83 ec 0c             	sub    $0xc,%esp
f012a833:	68 54 b6 13 f0       	push   $0xf013b654
f012a838:	e8 f0 63 fd ff       	call   f0100c2d <cprintf>
f012a83d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a840:	e8 47 94 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a845:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a848:	74 1d                	je     f012a867 <test_kfreelast+0x1b9d>
f012a84a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a84e:	75 17                	jne    f012a867 <test_kfreelast+0x1b9d>
f012a850:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a857:	83 ec 0c             	sub    $0xc,%esp
f012a85a:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012a85f:	e8 c9 63 fd ff       	call   f0100c2d <cprintf>
f012a864:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a867:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a86a:	e8 43 18 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a86f:	29 c3                	sub    %eax,%ebx
f012a871:	89 d8                	mov    %ebx,%eax
f012a873:	83 f8 0d             	cmp    $0xd,%eax
f012a876:	74 1d                	je     f012a895 <test_kfreelast+0x1bcb>
f012a878:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a87c:	75 17                	jne    f012a895 <test_kfreelast+0x1bcb>
f012a87e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a885:	83 ec 0c             	sub    $0xc,%esp
f012a888:	68 bc b6 13 f0       	push   $0xf013b6bc
f012a88d:	e8 9b 63 fd ff       	call   f0100c2d <cprintf>
f012a892:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012a895:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012a89c:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012a89f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a8a5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012a8a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8af:	eb 0e                	jmp    f012a8bf <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012a8b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a8b4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8b7:	01 d0                	add    %edx,%eax
f012a8b9:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012a8bc:	ff 45 f4             	incl   -0xc(%ebp)
f012a8bf:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012a8c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a8c8:	7f e7                	jg     f012a8b1 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a8ca:	e8 e3 17 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012a8cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8d2:	e8 b5 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a8d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012a8da:	83 ec 0c             	sub    $0xc,%esp
f012a8dd:	68 00 fc 2f 00       	push   $0x2ffc00
f012a8e2:	e8 3b cb fd ff       	call   f0107422 <kmalloc>
f012a8e7:	83 c4 10             	add    $0x10,%esp
f012a8ea:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a8f0:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a8f6:	89 c1                	mov    %eax,%ecx
f012a8f8:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012a8ff:	10 00 00 
f012a902:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a908:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a90d:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012a913:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a919:	ba 00 00 00 00       	mov    $0x0,%edx
f012a91e:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012a924:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a92a:	29 d0                	sub    %edx,%eax
f012a92c:	89 c3                	mov    %eax,%ebx
f012a92e:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012a935:	10 00 00 
f012a938:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a93d:	0f b6 d0             	movzbl %al,%edx
f012a940:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a946:	01 d0                	add    %edx,%eax
f012a948:	48                   	dec    %eax
f012a949:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012a94f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a955:	ba 00 00 00 00       	mov    $0x0,%edx
f012a95a:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012a960:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a966:	29 d0                	sub    %edx,%eax
f012a968:	01 c3                	add    %eax,%ebx
f012a96a:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012a971:	10 00 00 
f012a974:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a979:	0f b6 c0             	movzbl %al,%eax
f012a97c:	c1 e0 04             	shl    $0x4,%eax
f012a97f:	89 c2                	mov    %eax,%edx
f012a981:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a987:	01 d0                	add    %edx,%eax
f012a989:	48                   	dec    %eax
f012a98a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012a990:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a996:	ba 00 00 00 00       	mov    $0x0,%edx
f012a99b:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012a9a1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a9a7:	29 d0                	sub    %edx,%eax
f012a9a9:	01 d8                	add    %ebx,%eax
f012a9ab:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012a9b0:	39 c1                	cmp    %eax,%ecx
f012a9b2:	74 1d                	je     f012a9d1 <test_kfreelast+0x1d07>
f012a9b4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9b8:	75 17                	jne    f012a9d1 <test_kfreelast+0x1d07>
f012a9ba:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9c1:	83 ec 0c             	sub    $0xc,%esp
f012a9c4:	68 54 b6 13 f0       	push   $0xf013b654
f012a9c9:	e8 5f 62 fd ff       	call   f0100c2d <cprintf>
f012a9ce:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a9d1:	e8 b6 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a9d6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a9d9:	74 1d                	je     f012a9f8 <test_kfreelast+0x1d2e>
f012a9db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9df:	75 17                	jne    f012a9f8 <test_kfreelast+0x1d2e>
f012a9e1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9e8:	83 ec 0c             	sub    $0xc,%esp
f012a9eb:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012a9f0:	e8 38 62 fd ff       	call   f0100c2d <cprintf>
f012a9f5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a9f8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a9fb:	e8 b2 16 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012aa00:	29 c3                	sub    %eax,%ebx
f012aa02:	89 d8                	mov    %ebx,%eax
f012aa04:	3d 00 03 00 00       	cmp    $0x300,%eax
f012aa09:	74 1d                	je     f012aa28 <test_kfreelast+0x1d5e>
f012aa0b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa0f:	75 17                	jne    f012aa28 <test_kfreelast+0x1d5e>
f012aa11:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa18:	83 ec 0c             	sub    $0xc,%esp
f012aa1b:	68 bc b6 13 f0       	push   $0xf013b6bc
f012aa20:	e8 08 62 fd ff       	call   f0100c2d <cprintf>
f012aa25:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012aa28:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012aa2f:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012aa32:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012aa38:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012aa3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa42:	eb 0e                	jmp    f012aa52 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012aa44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aa47:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa4a:	01 d0                	add    %edx,%eax
f012aa4c:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012aa4f:	ff 45 f4             	incl   -0xc(%ebp)
f012aa52:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012aa58:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa5b:	7f e7                	jg     f012aa44 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012aa5d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa61:	75 17                	jne    f012aa7a <test_kfreelast+0x1db0>
f012aa63:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012aa67:	83 ec 08             	sub    $0x8,%esp
f012aa6a:	ff 75 f0             	pushl  -0x10(%ebp)
f012aa6d:	68 88 b5 13 f0       	push   $0xf013b588
f012aa72:	e8 b6 61 fd ff       	call   f0100c2d <cprintf>
f012aa77:	83 c4 10             	add    $0x10,%esp
f012aa7a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa81:	e8 2c 16 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012aa86:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa89:	e8 fe 91 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa8e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012aa91:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012aa97:	83 ec 0c             	sub    $0xc,%esp
f012aa9a:	50                   	push   %eax
f012aa9b:	e8 9c c9 fd ff       	call   f010743c <kfree>
f012aaa0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aaa3:	e8 e4 91 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aaa8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aaab:	74 1d                	je     f012aaca <test_kfreelast+0x1e00>
f012aaad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aab1:	75 17                	jne    f012aaca <test_kfreelast+0x1e00>
f012aab3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aaba:	83 ec 0c             	sub    $0xc,%esp
f012aabd:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012aac2:	e8 66 61 fd ff       	call   f0100c2d <cprintf>
f012aac7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aaca:	e8 e3 15 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012aacf:	89 c2                	mov    %eax,%edx
f012aad1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aad4:	29 c2                	sub    %eax,%edx
f012aad6:	89 d0                	mov    %edx,%eax
f012aad8:	83 f8 0d             	cmp    $0xd,%eax
f012aadb:	74 1d                	je     f012aafa <test_kfreelast+0x1e30>
f012aadd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aae1:	75 17                	jne    f012aafa <test_kfreelast+0x1e30>
f012aae3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aaea:	83 ec 0c             	sub    $0xc,%esp
f012aaed:	68 1c b6 13 f0       	push   $0xf013b61c
f012aaf2:	e8 36 61 fd ff       	call   f0100c2d <cprintf>
f012aaf7:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012aafa:	83 ec 0c             	sub    $0xc,%esp
f012aafd:	6a 03                	push   $0x3
f012aaff:	e8 57 1a fe ff       	call   f010c55b <sys_bypassPageFault>
f012ab04:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012ab07:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ab0d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012ab10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab17:	eb 3c                	jmp    f012ab55 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012ab19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ab1c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab1f:	01 d0                	add    %edx,%eax
f012ab21:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ab24:	e8 20 1a fe ff       	call   f010c549 <sys_rcr2>
f012ab29:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ab2c:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012ab2f:	01 ca                	add    %ecx,%edx
f012ab31:	39 d0                	cmp    %edx,%eax
f012ab33:	74 1d                	je     f012ab52 <test_kfreelast+0x1e88>
f012ab35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab39:	75 17                	jne    f012ab52 <test_kfreelast+0x1e88>
f012ab3b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab42:	83 ec 0c             	sub    $0xc,%esp
f012ab45:	68 34 b7 13 f0       	push   $0xf013b734
f012ab4a:	e8 de 60 fd ff       	call   f0100c2d <cprintf>
f012ab4f:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012ab52:	ff 45 f4             	incl   -0xc(%ebp)
f012ab55:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012ab5c:	7e bb                	jle    f012ab19 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012ab5e:	83 ec 0c             	sub    $0xc,%esp
f012ab61:	6a 00                	push   $0x0
f012ab63:	e8 f3 19 fe ff       	call   f010c55b <sys_bypassPageFault>
f012ab68:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012ab6b:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ab71:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012ab74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab7b:	eb 1e                	jmp    f012ab9b <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012ab7d:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012ab83:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ab86:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab89:	01 c8                	add    %ecx,%eax
f012ab8b:	8a 00                	mov    (%eax),%al
f012ab8d:	0f be c0             	movsbl %al,%eax
f012ab90:	01 d0                	add    %edx,%eax
f012ab92:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012ab98:	ff 45 f4             	incl   -0xc(%ebp)
f012ab9b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012aba1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aba4:	7f d7                	jg     f012ab7d <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012aba6:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012abac:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012abb2:	89 d0                	mov    %edx,%eax
f012abb4:	01 c0                	add    %eax,%eax
f012abb6:	01 d0                	add    %edx,%eax
f012abb8:	01 c0                	add    %eax,%eax
f012abba:	01 d0                	add    %edx,%eax
f012abbc:	01 c0                	add    %eax,%eax
f012abbe:	39 c1                	cmp    %eax,%ecx
f012abc0:	74 1d                	je     f012abdf <test_kfreelast+0x1f15>
f012abc2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abc6:	75 17                	jne    f012abdf <test_kfreelast+0x1f15>
f012abc8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abcf:	83 ec 0c             	sub    $0xc,%esp
f012abd2:	68 00 b7 13 f0       	push   $0xf013b700
f012abd7:	e8 51 60 fd ff       	call   f0100c2d <cprintf>
f012abdc:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012abdf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abe3:	75 17                	jne    f012abfc <test_kfreelast+0x1f32>
f012abe5:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012abe9:	83 ec 08             	sub    $0x8,%esp
f012abec:	ff 75 f0             	pushl  -0x10(%ebp)
f012abef:	68 88 b5 13 f0       	push   $0xf013b588
f012abf4:	e8 34 60 fd ff       	call   f0100c2d <cprintf>
f012abf9:	83 c4 10             	add    $0x10,%esp
f012abfc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac03:	e8 aa 14 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ac08:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac0b:	e8 7c 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ac10:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012ac13:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012ac19:	83 ec 0c             	sub    $0xc,%esp
f012ac1c:	50                   	push   %eax
f012ac1d:	e8 1a c8 fd ff       	call   f010743c <kfree>
f012ac22:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac25:	e8 62 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ac2a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac2d:	74 1d                	je     f012ac4c <test_kfreelast+0x1f82>
f012ac2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac33:	75 17                	jne    f012ac4c <test_kfreelast+0x1f82>
f012ac35:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac3c:	83 ec 0c             	sub    $0xc,%esp
f012ac3f:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012ac44:	e8 e4 5f fd ff       	call   f0100c2d <cprintf>
f012ac49:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ac4c:	e8 61 14 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ac51:	89 c2                	mov    %eax,%edx
f012ac53:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ac56:	29 c2                	sub    %eax,%edx
f012ac58:	89 d0                	mov    %edx,%eax
f012ac5a:	83 f8 02             	cmp    $0x2,%eax
f012ac5d:	74 1d                	je     f012ac7c <test_kfreelast+0x1fb2>
f012ac5f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac63:	75 17                	jne    f012ac7c <test_kfreelast+0x1fb2>
f012ac65:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac6c:	83 ec 0c             	sub    $0xc,%esp
f012ac6f:	68 1c b6 13 f0       	push   $0xf013b61c
f012ac74:	e8 b4 5f fd ff       	call   f0100c2d <cprintf>
f012ac79:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012ac7c:	e8 31 14 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ac81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac84:	e8 03 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ac89:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012ac8c:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ac92:	83 ec 0c             	sub    $0xc,%esp
f012ac95:	50                   	push   %eax
f012ac96:	e8 a1 c7 fd ff       	call   f010743c <kfree>
f012ac9b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac9e:	e8 e9 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aca3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aca6:	74 1d                	je     f012acc5 <test_kfreelast+0x1ffb>
f012aca8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acac:	75 17                	jne    f012acc5 <test_kfreelast+0x1ffb>
f012acae:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acb5:	83 ec 0c             	sub    $0xc,%esp
f012acb8:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012acbd:	e8 6b 5f fd ff       	call   f0100c2d <cprintf>
f012acc2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012acc5:	e8 e8 13 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012acca:	89 c2                	mov    %eax,%edx
f012accc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012accf:	29 c2                	sub    %eax,%edx
f012acd1:	89 d0                	mov    %edx,%eax
f012acd3:	3d 00 03 00 00       	cmp    $0x300,%eax
f012acd8:	74 1d                	je     f012acf7 <test_kfreelast+0x202d>
f012acda:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acde:	75 17                	jne    f012acf7 <test_kfreelast+0x202d>
f012ace0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ace7:	83 ec 0c             	sub    $0xc,%esp
f012acea:	68 1c b6 13 f0       	push   $0xf013b61c
f012acef:	e8 39 5f fd ff       	call   f0100c2d <cprintf>
f012acf4:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012acf7:	e8 b6 13 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012acfc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012acff:	e8 88 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ad04:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012ad07:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012ad0d:	83 ec 0c             	sub    $0xc,%esp
f012ad10:	50                   	push   %eax
f012ad11:	e8 26 c7 fd ff       	call   f010743c <kfree>
f012ad16:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ad19:	e8 6e 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ad1e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad21:	74 1d                	je     f012ad40 <test_kfreelast+0x2076>
f012ad23:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad27:	75 17                	jne    f012ad40 <test_kfreelast+0x2076>
f012ad29:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad30:	83 ec 0c             	sub    $0xc,%esp
f012ad33:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012ad38:	e8 f0 5e fd ff       	call   f0100c2d <cprintf>
f012ad3d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ad40:	e8 6d 13 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ad45:	89 c2                	mov    %eax,%edx
f012ad47:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ad4a:	29 c2                	sub    %eax,%edx
f012ad4c:	89 d0                	mov    %edx,%eax
f012ad4e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ad53:	74 1d                	je     f012ad72 <test_kfreelast+0x20a8>
f012ad55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad59:	75 17                	jne    f012ad72 <test_kfreelast+0x20a8>
f012ad5b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad62:	83 ec 0c             	sub    $0xc,%esp
f012ad65:	68 1c b6 13 f0       	push   $0xf013b61c
f012ad6a:	e8 be 5e fd ff       	call   f0100c2d <cprintf>
f012ad6f:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012ad72:	e8 3b 13 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ad77:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad7a:	e8 0d 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ad7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012ad82:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012ad88:	83 ec 0c             	sub    $0xc,%esp
f012ad8b:	50                   	push   %eax
f012ad8c:	e8 ab c6 fd ff       	call   f010743c <kfree>
f012ad91:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ad94:	e8 f3 8e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ad99:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad9c:	74 1d                	je     f012adbb <test_kfreelast+0x20f1>
f012ad9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ada2:	75 17                	jne    f012adbb <test_kfreelast+0x20f1>
f012ada4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adab:	83 ec 0c             	sub    $0xc,%esp
f012adae:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012adb3:	e8 75 5e fd ff       	call   f0100c2d <cprintf>
f012adb8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012adbb:	e8 f2 12 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012adc0:	89 c2                	mov    %eax,%edx
f012adc2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012adc5:	29 c2                	sub    %eax,%edx
f012adc7:	89 d0                	mov    %edx,%eax
f012adc9:	83 f8 01             	cmp    $0x1,%eax
f012adcc:	74 1d                	je     f012adeb <test_kfreelast+0x2121>
f012adce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012add2:	75 17                	jne    f012adeb <test_kfreelast+0x2121>
f012add4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012addb:	83 ec 0c             	sub    $0xc,%esp
f012adde:	68 1c b6 13 f0       	push   $0xf013b61c
f012ade3:	e8 45 5e fd ff       	call   f0100c2d <cprintf>
f012ade8:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012adeb:	e8 c2 12 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012adf0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012adf3:	e8 94 8e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012adf8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012adfb:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012ae01:	83 ec 0c             	sub    $0xc,%esp
f012ae04:	50                   	push   %eax
f012ae05:	e8 32 c6 fd ff       	call   f010743c <kfree>
f012ae0a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ae0d:	e8 7a 8e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ae12:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae15:	74 1d                	je     f012ae34 <test_kfreelast+0x216a>
f012ae17:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae1b:	75 17                	jne    f012ae34 <test_kfreelast+0x216a>
f012ae1d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae24:	83 ec 0c             	sub    $0xc,%esp
f012ae27:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012ae2c:	e8 fc 5d fd ff       	call   f0100c2d <cprintf>
f012ae31:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ae34:	e8 79 12 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ae39:	89 c2                	mov    %eax,%edx
f012ae3b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ae3e:	29 c2                	sub    %eax,%edx
f012ae40:	89 d0                	mov    %edx,%eax
f012ae42:	83 f8 01             	cmp    $0x1,%eax
f012ae45:	74 1d                	je     f012ae64 <test_kfreelast+0x219a>
f012ae47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae4b:	75 17                	jne    f012ae64 <test_kfreelast+0x219a>
f012ae4d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae54:	83 ec 0c             	sub    $0xc,%esp
f012ae57:	68 1c b6 13 f0       	push   $0xf013b61c
f012ae5c:	e8 cc 5d fd ff       	call   f0100c2d <cprintf>
f012ae61:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012ae64:	e8 49 12 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ae69:	89 c2                	mov    %eax,%edx
f012ae6b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ae6e:	39 c2                	cmp    %eax,%edx
f012ae70:	74 1d                	je     f012ae8f <test_kfreelast+0x21c5>
f012ae72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae76:	75 17                	jne    f012ae8f <test_kfreelast+0x21c5>
f012ae78:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae7f:	83 ec 0c             	sub    $0xc,%esp
f012ae82:	68 7c b7 13 f0       	push   $0xf013b77c
f012ae87:	e8 a1 5d fd ff       	call   f0100c2d <cprintf>
f012ae8c:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012ae8f:	83 ec 0c             	sub    $0xc,%esp
f012ae92:	6a 03                	push   $0x3
f012ae94:	e8 c2 16 fe ff       	call   f010c55b <sys_bypassPageFault>
f012ae99:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012ae9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aea3:	e9 8e 00 00 00       	jmp    f012af36 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012aea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012aeab:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012aeb2:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012aeb5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aeb8:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012aebb:	e8 89 16 fe ff       	call   f010c549 <sys_rcr2>
f012aec0:	89 c2                	mov    %eax,%edx
f012aec2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aec5:	39 c2                	cmp    %eax,%edx
f012aec7:	74 1d                	je     f012aee6 <test_kfreelast+0x221c>
f012aec9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aecd:	75 17                	jne    f012aee6 <test_kfreelast+0x221c>
f012aecf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aed6:	83 ec 0c             	sub    $0xc,%esp
f012aed9:	68 34 b7 13 f0       	push   $0xf013b734
f012aede:	e8 4a 5d fd ff       	call   f0100c2d <cprintf>
f012aee3:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012aee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012aee9:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012aef0:	89 c2                	mov    %eax,%edx
f012aef2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aef5:	01 d0                	add    %edx,%eax
f012aef7:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012aefa:	e8 4a 16 fe ff       	call   f010c549 <sys_rcr2>
f012aeff:	89 c2                	mov    %eax,%edx
f012af01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012af04:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012af0b:	89 c1                	mov    %eax,%ecx
f012af0d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012af10:	01 c8                	add    %ecx,%eax
f012af12:	39 c2                	cmp    %eax,%edx
f012af14:	74 1d                	je     f012af33 <test_kfreelast+0x2269>
f012af16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af1a:	75 17                	jne    f012af33 <test_kfreelast+0x2269>
f012af1c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af23:	83 ec 0c             	sub    $0xc,%esp
f012af26:	68 34 b7 13 f0       	push   $0xf013b734
f012af2b:	e8 fd 5c fd ff       	call   f0100c2d <cprintf>
f012af30:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012af33:	ff 45 f4             	incl   -0xc(%ebp)
f012af36:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012af3a:	0f 8e 68 ff ff ff    	jle    f012aea8 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012af40:	83 ec 0c             	sub    $0xc,%esp
f012af43:	6a 00                	push   $0x0
f012af45:	e8 11 16 fe ff       	call   f010c55b <sys_bypassPageFault>
f012af4a:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012af4d:	e8 60 11 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012af52:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af55:	e8 32 8d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012af5a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012af5d:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012af63:	83 ec 0c             	sub    $0xc,%esp
f012af66:	50                   	push   %eax
f012af67:	e8 d0 c4 fd ff       	call   f010743c <kfree>
f012af6c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012af6f:	e8 18 8d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012af74:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af77:	74 1d                	je     f012af96 <test_kfreelast+0x22cc>
f012af79:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af7d:	75 17                	jne    f012af96 <test_kfreelast+0x22cc>
f012af7f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af86:	83 ec 0c             	sub    $0xc,%esp
f012af89:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012af8e:	e8 9a 5c fd ff       	call   f0100c2d <cprintf>
f012af93:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012af96:	e8 17 11 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012af9b:	89 c2                	mov    %eax,%edx
f012af9d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012afa0:	39 c2                	cmp    %eax,%edx
f012afa2:	74 1d                	je     f012afc1 <test_kfreelast+0x22f7>
f012afa4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afa8:	75 17                	jne    f012afc1 <test_kfreelast+0x22f7>
f012afaa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afb1:	83 ec 0c             	sub    $0xc,%esp
f012afb4:	68 b4 b7 13 f0       	push   $0xf013b7b4
f012afb9:	e8 6f 5c fd ff       	call   f0100c2d <cprintf>
f012afbe:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012afc1:	e8 ec 10 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012afc6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012afc9:	e8 be 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012afce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012afd1:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012afd7:	83 ec 0c             	sub    $0xc,%esp
f012afda:	50                   	push   %eax
f012afdb:	e8 5c c4 fd ff       	call   f010743c <kfree>
f012afe0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012afe3:	e8 a4 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012afe8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012afeb:	74 1d                	je     f012b00a <test_kfreelast+0x2340>
f012afed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aff1:	75 17                	jne    f012b00a <test_kfreelast+0x2340>
f012aff3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012affa:	83 ec 0c             	sub    $0xc,%esp
f012affd:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012b002:	e8 26 5c fd ff       	call   f0100c2d <cprintf>
f012b007:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b00a:	e8 a3 10 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b00f:	89 c2                	mov    %eax,%edx
f012b011:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b014:	39 c2                	cmp    %eax,%edx
f012b016:	74 1d                	je     f012b035 <test_kfreelast+0x236b>
f012b018:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b01c:	75 17                	jne    f012b035 <test_kfreelast+0x236b>
f012b01e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b025:	83 ec 0c             	sub    $0xc,%esp
f012b028:	68 b4 b7 13 f0       	push   $0xf013b7b4
f012b02d:	e8 fb 5b fd ff       	call   f0100c2d <cprintf>
f012b032:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b035:	e8 78 10 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b03a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b03d:	e8 4a 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b042:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b045:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b04b:	83 ec 0c             	sub    $0xc,%esp
f012b04e:	50                   	push   %eax
f012b04f:	e8 e8 c3 fd ff       	call   f010743c <kfree>
f012b054:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b057:	e8 30 8c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b05c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b05f:	74 1d                	je     f012b07e <test_kfreelast+0x23b4>
f012b061:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b065:	75 17                	jne    f012b07e <test_kfreelast+0x23b4>
f012b067:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b06e:	83 ec 0c             	sub    $0xc,%esp
f012b071:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012b076:	e8 b2 5b fd ff       	call   f0100c2d <cprintf>
f012b07b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b07e:	e8 2f 10 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b083:	89 c2                	mov    %eax,%edx
f012b085:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b088:	39 c2                	cmp    %eax,%edx
f012b08a:	74 1d                	je     f012b0a9 <test_kfreelast+0x23df>
f012b08c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b090:	75 17                	jne    f012b0a9 <test_kfreelast+0x23df>
f012b092:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b099:	83 ec 0c             	sub    $0xc,%esp
f012b09c:	68 b4 b7 13 f0       	push   $0xf013b7b4
f012b0a1:	e8 87 5b fd ff       	call   f0100c2d <cprintf>
f012b0a6:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b0a9:	e8 04 10 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b0ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0b1:	e8 d6 8b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b0b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b0b9:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b0bf:	83 ec 0c             	sub    $0xc,%esp
f012b0c2:	50                   	push   %eax
f012b0c3:	e8 74 c3 fd ff       	call   f010743c <kfree>
f012b0c8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b0cb:	e8 bc 8b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012b0d0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0d3:	74 1d                	je     f012b0f2 <test_kfreelast+0x2428>
f012b0d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0d9:	75 17                	jne    f012b0f2 <test_kfreelast+0x2428>
f012b0db:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0e2:	83 ec 0c             	sub    $0xc,%esp
f012b0e5:	68 b0 b5 13 f0       	push   $0xf013b5b0
f012b0ea:	e8 3e 5b fd ff       	call   f0100c2d <cprintf>
f012b0ef:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b0f2:	e8 bb 0f fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b0f7:	89 c2                	mov    %eax,%edx
f012b0f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b0fc:	39 c2                	cmp    %eax,%edx
f012b0fe:	74 1d                	je     f012b11d <test_kfreelast+0x2453>
f012b100:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b104:	75 17                	jne    f012b11d <test_kfreelast+0x2453>
f012b106:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b10d:	83 ec 0c             	sub    $0xc,%esp
f012b110:	68 b4 b7 13 f0       	push   $0xf013b7b4
f012b115:	e8 13 5b fd ff       	call   f0100c2d <cprintf>
f012b11a:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b11d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b121:	75 17                	jne    f012b13a <test_kfreelast+0x2470>
f012b123:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b127:	83 ec 08             	sub    $0x8,%esp
f012b12a:	ff 75 f0             	pushl  -0x10(%ebp)
f012b12d:	68 88 b5 13 f0       	push   $0xf013b588
f012b132:	e8 f6 5a fd ff       	call   f0100c2d <cprintf>
f012b137:	83 c4 10             	add    $0x10,%esp
f012b13a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012b141:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012b146:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b149:	5b                   	pop    %ebx
f012b14a:	5f                   	pop    %edi
f012b14b:	5d                   	pop    %ebp
f012b14c:	c3                   	ret    

f012b14d <test_krealloc>:

int test_krealloc() {
f012b14d:	55                   	push   %ebp
f012b14e:	89 e5                	mov    %esp,%ebp
f012b150:	57                   	push   %edi
f012b151:	53                   	push   %ebx
f012b152:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012b158:	83 ec 0c             	sub    $0xc,%esp
f012b15b:	68 98 a4 13 f0       	push   $0xf013a498
f012b160:	e8 c8 5a fd ff       	call   f0100c2d <cprintf>
f012b165:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b168:	83 ec 0c             	sub    $0xc,%esp
f012b16b:	68 c8 a4 13 f0       	push   $0xf013a4c8
f012b170:	e8 b8 5a fd ff       	call   f0100c2d <cprintf>
f012b175:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b178:	83 ec 0c             	sub    $0xc,%esp
f012b17b:	68 98 a4 13 f0       	push   $0xf013a498
f012b180:	e8 a8 5a fd ff       	call   f0100c2d <cprintf>
f012b185:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b188:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b18c:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b190:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b196:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b19c:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b1a3:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b1aa:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012b1b0:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b1b5:	b8 00 00 00 00       	mov    $0x0,%eax
f012b1ba:	89 d7                	mov    %edx,%edi
f012b1bc:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b1be:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b1c5:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012b1cb:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b1d0:	b8 00 00 00 00       	mov    $0x0,%eax
f012b1d5:	89 d7                	mov    %edx,%edi
f012b1d7:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b1d9:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012b1df:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b1e4:	b8 00 00 00 00       	mov    $0x0,%eax
f012b1e9:	89 d7                	mov    %edx,%edi
f012b1eb:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b1ed:	e8 c0 0e fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b1f2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b1f5:	83 ec 08             	sub    $0x8,%esp
f012b1f8:	68 00 fc 0f 00       	push   $0xffc00
f012b1fd:	6a 00                	push   $0x0
f012b1ff:	e8 e6 c2 fd ff       	call   f01074ea <krealloc>
f012b204:	83 c4 10             	add    $0x10,%esp
f012b207:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b20d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b213:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b218:	77 17                	ja     f012b231 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b21a:	83 ec 04             	sub    $0x4,%esp
f012b21d:	68 fc b7 13 f0       	push   $0xf013b7fc
f012b222:	68 e2 0e 00 00       	push   $0xee2
f012b227:	68 56 a5 13 f0       	push   $0xf013a556
f012b22c:	e8 75 4f fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b231:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b237:	89 c1                	mov    %eax,%ecx
f012b239:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b240:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b243:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b248:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b24b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b24e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b253:	f7 75 b4             	divl   -0x4c(%ebp)
f012b256:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b259:	29 d0                	sub    %edx,%eax
f012b25b:	89 c3                	mov    %eax,%ebx
f012b25d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b264:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b269:	0f b6 d0             	movzbl %al,%edx
f012b26c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b26f:	01 d0                	add    %edx,%eax
f012b271:	48                   	dec    %eax
f012b272:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b275:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b278:	ba 00 00 00 00       	mov    $0x0,%edx
f012b27d:	f7 75 ac             	divl   -0x54(%ebp)
f012b280:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b283:	29 d0                	sub    %edx,%eax
f012b285:	01 c3                	add    %eax,%ebx
f012b287:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012b28e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b293:	0f b6 c0             	movzbl %al,%eax
f012b296:	c1 e0 04             	shl    $0x4,%eax
f012b299:	89 c2                	mov    %eax,%edx
f012b29b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012b29e:	01 d0                	add    %edx,%eax
f012b2a0:	48                   	dec    %eax
f012b2a1:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012b2a4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b2a7:	ba 00 00 00 00       	mov    $0x0,%edx
f012b2ac:	f7 75 a4             	divl   -0x5c(%ebp)
f012b2af:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b2b2:	29 d0                	sub    %edx,%eax
f012b2b4:	01 d8                	add    %ebx,%eax
f012b2b6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b2bb:	39 c1                	cmp    %eax,%ecx
f012b2bd:	74 17                	je     f012b2d6 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012b2bf:	83 ec 04             	sub    $0x4,%esp
f012b2c2:	68 38 b8 13 f0       	push   $0xf013b838
f012b2c7:	68 e4 0e 00 00       	push   $0xee4
f012b2cc:	68 56 a5 13 f0       	push   $0xf013a556
f012b2d1:	e8 d0 4e fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b2d6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b2d9:	e8 d4 0d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b2de:	29 c3                	sub    %eax,%ebx
f012b2e0:	89 d8                	mov    %ebx,%eax
f012b2e2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b2e7:	74 17                	je     f012b300 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012b2e9:	83 ec 04             	sub    $0x4,%esp
f012b2ec:	68 6a b8 13 f0       	push   $0xf013b86a
f012b2f1:	68 e7 0e 00 00       	push   $0xee7
f012b2f6:	68 56 a5 13 f0       	push   $0xf013a556
f012b2fb:	e8 a6 4e fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b300:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012b307:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b30a:	e8 a3 0d fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b30f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012b312:	83 ec 08             	sub    $0x8,%esp
f012b315:	68 00 fc 0f 00       	push   $0xffc00
f012b31a:	6a 00                	push   $0x0
f012b31c:	e8 c9 c1 fd ff       	call   f01074ea <krealloc>
f012b321:	83 c4 10             	add    $0x10,%esp
f012b324:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012b32a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b330:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012b335:	77 17                	ja     f012b34e <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b337:	83 ec 04             	sub    $0x4,%esp
f012b33a:	68 fc b7 13 f0       	push   $0xf013b7fc
f012b33f:	68 ef 0e 00 00       	push   $0xeef
f012b344:	68 56 a5 13 f0       	push   $0xf013a556
f012b349:	e8 58 4e fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012b34e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b354:	89 c1                	mov    %eax,%ecx
f012b356:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012b35d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012b360:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b365:	89 45 98             	mov    %eax,-0x68(%ebp)
f012b368:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b36b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b370:	f7 75 9c             	divl   -0x64(%ebp)
f012b373:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b376:	29 d0                	sub    %edx,%eax
f012b378:	89 c3                	mov    %eax,%ebx
f012b37a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012b381:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b386:	0f b6 d0             	movzbl %al,%edx
f012b389:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012b38c:	01 d0                	add    %edx,%eax
f012b38e:	48                   	dec    %eax
f012b38f:	89 45 90             	mov    %eax,-0x70(%ebp)
f012b392:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b395:	ba 00 00 00 00       	mov    $0x0,%edx
f012b39a:	f7 75 94             	divl   -0x6c(%ebp)
f012b39d:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b3a0:	29 d0                	sub    %edx,%eax
f012b3a2:	01 c3                	add    %eax,%ebx
f012b3a4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012b3ab:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b3b0:	0f b6 c0             	movzbl %al,%eax
f012b3b3:	c1 e0 04             	shl    $0x4,%eax
f012b3b6:	89 c2                	mov    %eax,%edx
f012b3b8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012b3bb:	01 d0                	add    %edx,%eax
f012b3bd:	48                   	dec    %eax
f012b3be:	89 45 88             	mov    %eax,-0x78(%ebp)
f012b3c1:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b3c4:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3c9:	f7 75 8c             	divl   -0x74(%ebp)
f012b3cc:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b3cf:	29 d0                	sub    %edx,%eax
f012b3d1:	01 d8                	add    %ebx,%eax
f012b3d3:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012b3d8:	39 c1                	cmp    %eax,%ecx
f012b3da:	74 17                	je     f012b3f3 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012b3dc:	83 ec 04             	sub    $0x4,%esp
f012b3df:	68 38 b8 13 f0       	push   $0xf013b838
f012b3e4:	68 f1 0e 00 00       	push   $0xef1
f012b3e9:	68 56 a5 13 f0       	push   $0xf013a556
f012b3ee:	e8 b3 4d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b3f3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b3f6:	e8 b7 0c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b3fb:	29 c3                	sub    %eax,%ebx
f012b3fd:	89 d8                	mov    %ebx,%eax
f012b3ff:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b404:	74 17                	je     f012b41d <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012b406:	83 ec 04             	sub    $0x4,%esp
f012b409:	68 6a b8 13 f0       	push   $0xf013b86a
f012b40e:	68 f3 0e 00 00       	push   $0xef3
f012b413:	68 56 a5 13 f0       	push   $0xf013a556
f012b418:	e8 89 4d fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b41d:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012b424:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b427:	e8 86 0c fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b42c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012b42f:	83 ec 08             	sub    $0x8,%esp
f012b432:	68 00 fc 0f 00       	push   $0xffc00
f012b437:	6a 00                	push   $0x0
f012b439:	e8 ac c0 fd ff       	call   f01074ea <krealloc>
f012b43e:	83 c4 10             	add    $0x10,%esp
f012b441:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012b447:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b44d:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012b452:	77 17                	ja     f012b46b <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b454:	83 ec 04             	sub    $0x4,%esp
f012b457:	68 fc b7 13 f0       	push   $0xf013b7fc
f012b45c:	68 fb 0e 00 00       	push   $0xefb
f012b461:	68 56 a5 13 f0       	push   $0xf013a556
f012b466:	e8 3b 4d fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012b46b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b471:	89 c1                	mov    %eax,%ecx
f012b473:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012b47a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b47d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b482:	89 45 80             	mov    %eax,-0x80(%ebp)
f012b485:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b488:	ba 00 00 00 00       	mov    $0x0,%edx
f012b48d:	f7 75 84             	divl   -0x7c(%ebp)
f012b490:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b493:	29 d0                	sub    %edx,%eax
f012b495:	89 c3                	mov    %eax,%ebx
f012b497:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012b49e:	10 00 00 
f012b4a1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b4a6:	0f b6 d0             	movzbl %al,%edx
f012b4a9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012b4af:	01 d0                	add    %edx,%eax
f012b4b1:	48                   	dec    %eax
f012b4b2:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012b4b8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b4be:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4c3:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012b4c9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b4cf:	29 d0                	sub    %edx,%eax
f012b4d1:	01 c3                	add    %eax,%ebx
f012b4d3:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012b4da:	10 00 00 
f012b4dd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b4e2:	0f b6 c0             	movzbl %al,%eax
f012b4e5:	c1 e0 04             	shl    $0x4,%eax
f012b4e8:	89 c2                	mov    %eax,%edx
f012b4ea:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012b4f0:	01 d0                	add    %edx,%eax
f012b4f2:	48                   	dec    %eax
f012b4f3:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012b4f9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b4ff:	ba 00 00 00 00       	mov    $0x0,%edx
f012b504:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012b50a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b510:	29 d0                	sub    %edx,%eax
f012b512:	01 d8                	add    %ebx,%eax
f012b514:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012b519:	39 c1                	cmp    %eax,%ecx
f012b51b:	74 17                	je     f012b534 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012b51d:	83 ec 04             	sub    $0x4,%esp
f012b520:	68 38 b8 13 f0       	push   $0xf013b838
f012b525:	68 fd 0e 00 00       	push   $0xefd
f012b52a:	68 56 a5 13 f0       	push   $0xf013a556
f012b52f:	e8 72 4c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b534:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b537:	e8 76 0b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b53c:	29 c3                	sub    %eax,%ebx
f012b53e:	89 d8                	mov    %ebx,%eax
f012b540:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b545:	74 17                	je     f012b55e <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012b547:	83 ec 04             	sub    $0x4,%esp
f012b54a:	68 6a b8 13 f0       	push   $0xf013b86a
f012b54f:	68 ff 0e 00 00       	push   $0xeff
f012b554:	68 56 a5 13 f0       	push   $0xf013a556
f012b559:	e8 48 4c fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b55e:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012b565:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b568:	e8 45 0b fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b56d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012b570:	83 ec 08             	sub    $0x8,%esp
f012b573:	68 00 fc 0f 00       	push   $0xffc00
f012b578:	6a 00                	push   $0x0
f012b57a:	e8 6b bf fd ff       	call   f01074ea <krealloc>
f012b57f:	83 c4 10             	add    $0x10,%esp
f012b582:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012b588:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b58e:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012b593:	77 17                	ja     f012b5ac <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b595:	83 ec 04             	sub    $0x4,%esp
f012b598:	68 fc b7 13 f0       	push   $0xf013b7fc
f012b59d:	68 06 0f 00 00       	push   $0xf06
f012b5a2:	68 56 a5 13 f0       	push   $0xf013a556
f012b5a7:	e8 fa 4b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012b5ac:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b5b2:	89 c1                	mov    %eax,%ecx
f012b5b4:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012b5bb:	10 00 00 
f012b5be:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012b5c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b5c9:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012b5cf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b5d5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b5da:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012b5e0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b5e6:	29 d0                	sub    %edx,%eax
f012b5e8:	89 c3                	mov    %eax,%ebx
f012b5ea:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012b5f1:	10 00 00 
f012b5f4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b5f9:	0f b6 d0             	movzbl %al,%edx
f012b5fc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012b602:	01 d0                	add    %edx,%eax
f012b604:	48                   	dec    %eax
f012b605:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012b60b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b611:	ba 00 00 00 00       	mov    $0x0,%edx
f012b616:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012b61c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b622:	29 d0                	sub    %edx,%eax
f012b624:	01 c3                	add    %eax,%ebx
f012b626:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012b62d:	10 00 00 
f012b630:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b635:	0f b6 c0             	movzbl %al,%eax
f012b638:	c1 e0 04             	shl    $0x4,%eax
f012b63b:	89 c2                	mov    %eax,%edx
f012b63d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012b643:	01 d0                	add    %edx,%eax
f012b645:	48                   	dec    %eax
f012b646:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012b64c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b652:	ba 00 00 00 00       	mov    $0x0,%edx
f012b657:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012b65d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b663:	29 d0                	sub    %edx,%eax
f012b665:	01 d8                	add    %ebx,%eax
f012b667:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012b66c:	39 c1                	cmp    %eax,%ecx
f012b66e:	74 17                	je     f012b687 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012b670:	83 ec 04             	sub    $0x4,%esp
f012b673:	68 38 b8 13 f0       	push   $0xf013b838
f012b678:	68 08 0f 00 00       	push   $0xf08
f012b67d:	68 56 a5 13 f0       	push   $0xf013a556
f012b682:	e8 1f 4b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b687:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b68a:	e8 23 0a fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b68f:	29 c3                	sub    %eax,%ebx
f012b691:	89 d8                	mov    %ebx,%eax
f012b693:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b698:	74 17                	je     f012b6b1 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012b69a:	83 ec 04             	sub    $0x4,%esp
f012b69d:	68 6a b8 13 f0       	push   $0xf013b86a
f012b6a2:	68 0a 0f 00 00       	push   $0xf0a
f012b6a7:	68 56 a5 13 f0       	push   $0xf013a556
f012b6ac:	e8 f5 4a fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b6b1:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012b6b8:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012b6bb:	e8 f2 09 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b6c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012b6c3:	83 ec 08             	sub    $0x8,%esp
f012b6c6:	68 00 fc 1f 00       	push   $0x1ffc00
f012b6cb:	6a 00                	push   $0x0
f012b6cd:	e8 18 be fd ff       	call   f01074ea <krealloc>
f012b6d2:	83 c4 10             	add    $0x10,%esp
f012b6d5:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012b6db:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b6e1:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012b6e6:	77 17                	ja     f012b6ff <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b6e8:	83 ec 04             	sub    $0x4,%esp
f012b6eb:	68 fc b7 13 f0       	push   $0xf013b7fc
f012b6f0:	68 11 0f 00 00       	push   $0xf11
f012b6f5:	68 56 a5 13 f0       	push   $0xf013a556
f012b6fa:	e8 a7 4a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012b6ff:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b705:	89 c1                	mov    %eax,%ecx
f012b707:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012b70e:	10 00 00 
f012b711:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012b717:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b71c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012b722:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012b728:	ba 00 00 00 00       	mov    $0x0,%edx
f012b72d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012b733:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012b739:	29 d0                	sub    %edx,%eax
f012b73b:	89 c3                	mov    %eax,%ebx
f012b73d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012b744:	10 00 00 
f012b747:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b74c:	0f b6 d0             	movzbl %al,%edx
f012b74f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012b755:	01 d0                	add    %edx,%eax
f012b757:	48                   	dec    %eax
f012b758:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012b75e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012b764:	ba 00 00 00 00       	mov    $0x0,%edx
f012b769:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012b76f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012b775:	29 d0                	sub    %edx,%eax
f012b777:	01 c3                	add    %eax,%ebx
f012b779:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012b780:	10 00 00 
f012b783:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b788:	0f b6 c0             	movzbl %al,%eax
f012b78b:	c1 e0 04             	shl    $0x4,%eax
f012b78e:	89 c2                	mov    %eax,%edx
f012b790:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012b796:	01 d0                	add    %edx,%eax
f012b798:	48                   	dec    %eax
f012b799:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012b79f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012b7a5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7aa:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012b7b0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012b7b6:	29 d0                	sub    %edx,%eax
f012b7b8:	01 d8                	add    %ebx,%eax
f012b7ba:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012b7bf:	39 c1                	cmp    %eax,%ecx
f012b7c1:	74 17                	je     f012b7da <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012b7c3:	83 ec 04             	sub    $0x4,%esp
f012b7c6:	68 38 b8 13 f0       	push   $0xf013b838
f012b7cb:	68 13 0f 00 00       	push   $0xf13
f012b7d0:	68 56 a5 13 f0       	push   $0xf013a556
f012b7d5:	e8 cc 49 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012b7da:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b7dd:	e8 d0 08 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b7e2:	29 c3                	sub    %eax,%ebx
f012b7e4:	89 d8                	mov    %ebx,%eax
f012b7e6:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b7eb:	74 17                	je     f012b804 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012b7ed:	83 ec 04             	sub    $0x4,%esp
f012b7f0:	68 6a b8 13 f0       	push   $0xf013b86a
f012b7f5:	68 15 0f 00 00       	push   $0xf15
f012b7fa:	68 56 a5 13 f0       	push   $0xf013a556
f012b7ff:	e8 a2 49 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012b804:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012b80b:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012b80e:	e8 9f 08 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b813:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012b816:	83 ec 08             	sub    $0x8,%esp
f012b819:	68 00 fc 1f 00       	push   $0x1ffc00
f012b81e:	6a 00                	push   $0x0
f012b820:	e8 c5 bc fd ff       	call   f01074ea <krealloc>
f012b825:	83 c4 10             	add    $0x10,%esp
f012b828:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012b82e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b834:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012b839:	77 17                	ja     f012b852 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b83b:	83 ec 04             	sub    $0x4,%esp
f012b83e:	68 fc b7 13 f0       	push   $0xf013b7fc
f012b843:	68 1c 0f 00 00       	push   $0xf1c
f012b848:	68 56 a5 13 f0       	push   $0xf013a556
f012b84d:	e8 54 49 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012b852:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b858:	89 c1                	mov    %eax,%ecx
f012b85a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012b861:	10 00 00 
f012b864:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012b86a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b86f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012b875:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012b87b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b880:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012b886:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012b88c:	29 d0                	sub    %edx,%eax
f012b88e:	89 c3                	mov    %eax,%ebx
f012b890:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012b897:	10 00 00 
f012b89a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b89f:	0f b6 d0             	movzbl %al,%edx
f012b8a2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012b8a8:	01 d0                	add    %edx,%eax
f012b8aa:	48                   	dec    %eax
f012b8ab:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012b8b1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b8b7:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8bc:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012b8c2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b8c8:	29 d0                	sub    %edx,%eax
f012b8ca:	01 c3                	add    %eax,%ebx
f012b8cc:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012b8d3:	10 00 00 
f012b8d6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b8db:	0f b6 c0             	movzbl %al,%eax
f012b8de:	c1 e0 04             	shl    $0x4,%eax
f012b8e1:	89 c2                	mov    %eax,%edx
f012b8e3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b8e9:	01 d0                	add    %edx,%eax
f012b8eb:	48                   	dec    %eax
f012b8ec:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012b8f2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b8f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8fd:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012b903:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b909:	29 d0                	sub    %edx,%eax
f012b90b:	01 d8                	add    %ebx,%eax
f012b90d:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012b912:	39 c1                	cmp    %eax,%ecx
f012b914:	74 17                	je     f012b92d <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012b916:	83 ec 04             	sub    $0x4,%esp
f012b919:	68 38 b8 13 f0       	push   $0xf013b838
f012b91e:	68 1e 0f 00 00       	push   $0xf1e
f012b923:	68 56 a5 13 f0       	push   $0xf013a556
f012b928:	e8 79 48 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012b92d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b930:	e8 7d 07 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b935:	29 c3                	sub    %eax,%ebx
f012b937:	89 d8                	mov    %ebx,%eax
f012b939:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b93e:	74 17                	je     f012b957 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012b940:	83 ec 04             	sub    $0x4,%esp
f012b943:	68 6a b8 13 f0       	push   $0xf013b86a
f012b948:	68 20 0f 00 00       	push   $0xf20
f012b94d:	68 56 a5 13 f0       	push   $0xf013a556
f012b952:	e8 4f 48 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012b957:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012b95e:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012b961:	e8 4c 07 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012b966:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012b969:	83 ec 08             	sub    $0x8,%esp
f012b96c:	68 00 fc 2f 00       	push   $0x2ffc00
f012b971:	6a 00                	push   $0x0
f012b973:	e8 72 bb fd ff       	call   f01074ea <krealloc>
f012b978:	83 c4 10             	add    $0x10,%esp
f012b97b:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012b981:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b987:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012b98c:	77 17                	ja     f012b9a5 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b98e:	83 ec 04             	sub    $0x4,%esp
f012b991:	68 fc b7 13 f0       	push   $0xf013b7fc
f012b996:	68 27 0f 00 00       	push   $0xf27
f012b99b:	68 56 a5 13 f0       	push   $0xf013a556
f012b9a0:	e8 01 48 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012b9a5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9ab:	89 c1                	mov    %eax,%ecx
f012b9ad:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012b9b4:	10 00 00 
f012b9b7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b9bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b9c2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012b9c8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b9ce:	ba 00 00 00 00       	mov    $0x0,%edx
f012b9d3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012b9d9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b9df:	29 d0                	sub    %edx,%eax
f012b9e1:	89 c3                	mov    %eax,%ebx
f012b9e3:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012b9ea:	10 00 00 
f012b9ed:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b9f2:	0f b6 d0             	movzbl %al,%edx
f012b9f5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012b9fb:	01 d0                	add    %edx,%eax
f012b9fd:	48                   	dec    %eax
f012b9fe:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ba04:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ba0a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba0f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ba15:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ba1b:	29 d0                	sub    %edx,%eax
f012ba1d:	01 c3                	add    %eax,%ebx
f012ba1f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ba26:	10 00 00 
f012ba29:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ba2e:	0f b6 c0             	movzbl %al,%eax
f012ba31:	c1 e0 04             	shl    $0x4,%eax
f012ba34:	89 c2                	mov    %eax,%edx
f012ba36:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ba3c:	01 d0                	add    %edx,%eax
f012ba3e:	48                   	dec    %eax
f012ba3f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ba45:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ba4b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba50:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ba56:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ba5c:	29 d0                	sub    %edx,%eax
f012ba5e:	01 d8                	add    %ebx,%eax
f012ba60:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ba65:	39 c1                	cmp    %eax,%ecx
f012ba67:	74 17                	je     f012ba80 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ba69:	83 ec 04             	sub    $0x4,%esp
f012ba6c:	68 38 b8 13 f0       	push   $0xf013b838
f012ba71:	68 29 0f 00 00       	push   $0xf29
f012ba76:	68 56 a5 13 f0       	push   $0xf013a556
f012ba7b:	e8 26 47 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ba80:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ba83:	e8 2a 06 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ba88:	29 c3                	sub    %eax,%ebx
f012ba8a:	89 d8                	mov    %ebx,%eax
f012ba8c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ba91:	74 17                	je     f012baaa <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012ba93:	83 ec 04             	sub    $0x4,%esp
f012ba96:	68 a0 a9 13 f0       	push   $0xf013a9a0
f012ba9b:	68 2b 0f 00 00       	push   $0xf2b
f012baa0:	68 56 a5 13 f0       	push   $0xf013a556
f012baa5:	e8 fc 46 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012baaa:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012bab1:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bab4:	e8 f9 05 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012bab9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012babc:	83 ec 08             	sub    $0x8,%esp
f012babf:	68 00 fc 2f 00       	push   $0x2ffc00
f012bac4:	6a 00                	push   $0x0
f012bac6:	e8 1f ba fd ff       	call   f01074ea <krealloc>
f012bacb:	83 c4 10             	add    $0x10,%esp
f012bace:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012bad4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bada:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012badf:	77 17                	ja     f012baf8 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bae1:	83 ec 04             	sub    $0x4,%esp
f012bae4:	68 fc b7 13 f0       	push   $0xf013b7fc
f012bae9:	68 32 0f 00 00       	push   $0xf32
f012baee:	68 56 a5 13 f0       	push   $0xf013a556
f012baf3:	e8 ae 46 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012baf8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bafe:	89 c1                	mov    %eax,%ecx
f012bb00:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012bb07:	10 00 00 
f012bb0a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012bb10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bb15:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012bb1b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012bb21:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb26:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012bb2c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012bb32:	29 d0                	sub    %edx,%eax
f012bb34:	89 c3                	mov    %eax,%ebx
f012bb36:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012bb3d:	10 00 00 
f012bb40:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012bb45:	0f b6 d0             	movzbl %al,%edx
f012bb48:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012bb4e:	01 d0                	add    %edx,%eax
f012bb50:	48                   	dec    %eax
f012bb51:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012bb57:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012bb5d:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb62:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012bb68:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012bb6e:	29 d0                	sub    %edx,%eax
f012bb70:	01 c3                	add    %eax,%ebx
f012bb72:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012bb79:	10 00 00 
f012bb7c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012bb81:	0f b6 c0             	movzbl %al,%eax
f012bb84:	c1 e0 04             	shl    $0x4,%eax
f012bb87:	89 c2                	mov    %eax,%edx
f012bb89:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012bb8f:	01 d0                	add    %edx,%eax
f012bb91:	48                   	dec    %eax
f012bb92:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012bb98:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012bb9e:	ba 00 00 00 00       	mov    $0x0,%edx
f012bba3:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012bba9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012bbaf:	29 d0                	sub    %edx,%eax
f012bbb1:	01 d8                	add    %ebx,%eax
f012bbb3:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012bbb8:	39 c1                	cmp    %eax,%ecx
f012bbba:	74 17                	je     f012bbd3 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012bbbc:	83 ec 04             	sub    $0x4,%esp
f012bbbf:	68 38 b8 13 f0       	push   $0xf013b838
f012bbc4:	68 34 0f 00 00       	push   $0xf34
f012bbc9:	68 56 a5 13 f0       	push   $0xf013a556
f012bbce:	e8 d3 45 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012bbd3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bbd6:	e8 d7 04 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012bbdb:	29 c3                	sub    %eax,%ebx
f012bbdd:	89 d8                	mov    %ebx,%eax
f012bbdf:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bbe4:	74 17                	je     f012bbfd <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012bbe6:	83 ec 04             	sub    $0x4,%esp
f012bbe9:	68 6a b8 13 f0       	push   $0xf013b86a
f012bbee:	68 36 0f 00 00       	push   $0xf36
f012bbf3:	68 56 a5 13 f0       	push   $0xf013a556
f012bbf8:	e8 a9 45 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012bbfd:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012bc04:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012bc07:	e8 a6 04 fe ff       	call   f010c0b2 <sys_calculate_free_frames>
f012bc0c:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012bc0f:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012bc16:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012bc19:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012bc1f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012bc25:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012bc2b:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012bc2e:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012bc30:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012bc36:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012bc3c:	01 c2                	add    %eax,%edx
f012bc3e:	8a 45 ce             	mov    -0x32(%ebp),%al
f012bc41:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012bc43:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bc49:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012bc4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bc56:	eb 11                	jmp    f012bc69 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012bc58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bc5b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012bc61:	01 d0                	add    %edx,%eax
f012bc63:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012bc66:	ff 45 f4             	incl   -0xc(%ebp)
f012bc69:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012bc6f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bc72:	7d e4                	jge    f012bc58 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012bc74:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bc7a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012bc80:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bc86:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012bc8c:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012bc92:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bc99:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bc9f:	01 d0                	add    %edx,%eax
f012bca1:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012bca7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bcad:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012bcb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012bcba:	eb 1b                	jmp    f012bcd7 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012bcbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012bcbf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bcc6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bccc:	01 d0                	add    %edx,%eax
f012bcce:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012bcd4:	ff 45 f0             	incl   -0x10(%ebp)
f012bcd7:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012bcdd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012bce0:	7d da                	jge    f012bcbc <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012bce2:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bce8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012bcee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012bcf5:	eb 17                	jmp    f012bd0e <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012bcf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012bcfa:	01 c0                	add    %eax,%eax
f012bcfc:	89 c2                	mov    %eax,%edx
f012bcfe:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bd04:	01 d0                	add    %edx,%eax
f012bd06:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012bd0b:	ff 45 ec             	incl   -0x14(%ebp)
f012bd0e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012bd14:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012bd17:	7d de                	jge    f012bcf7 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012bd19:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bd1f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012bd25:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bd2b:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012bd30:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012bd36:	01 c0                	add    %eax,%eax
f012bd38:	89 c2                	mov    %eax,%edx
f012bd3a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bd40:	01 d0                	add    %edx,%eax
f012bd42:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012bd47:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bd4d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012bd53:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012bd5a:	eb 49                	jmp    f012bda5 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012bd5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012bd5f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd66:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd6c:	01 d0                	add    %edx,%eax
f012bd6e:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012bd71:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012bd74:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd7b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd81:	01 d0                	add    %edx,%eax
f012bd83:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012bd89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012bd8c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd93:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd99:	01 d0                	add    %edx,%eax
f012bd9b:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012bda2:	ff 45 e8             	incl   -0x18(%ebp)
f012bda5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012bdab:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012bdae:	7d ac                	jge    f012bd5c <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012bdb0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bdb6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012bdbc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bdc2:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012bdc5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bdcb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012bdd1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bdd7:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012bdde:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012bde4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bdeb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bdf1:	01 d0                	add    %edx,%eax
f012bdf3:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012bdf6:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012bdfc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012be03:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012be09:	01 d0                	add    %edx,%eax
f012be0b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012be11:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012be17:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012be1e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012be24:	01 d0                	add    %edx,%eax
f012be26:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012be2d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012be33:	8a 00                	mov    (%eax),%al
f012be35:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012be38:	75 17                	jne    f012be51 <test_krealloc+0xd04>
f012be3a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012be40:	89 c2                	mov    %eax,%edx
f012be42:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012be48:	01 d0                	add    %edx,%eax
f012be4a:	8a 00                	mov    (%eax),%al
f012be4c:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012be4f:	74 17                	je     f012be68 <test_krealloc+0xd1b>
			panic(
f012be51:	83 ec 04             	sub    $0x4,%esp
f012be54:	68 88 b8 13 f0       	push   $0xf013b888
f012be59:	68 79 0f 00 00       	push   $0xf79
f012be5e:	68 56 a5 13 f0       	push   $0xf013a556
f012be63:	e8 3e 43 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012be68:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012be6e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012be74:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012be7a:	8a 00                	mov    (%eax),%al
f012be7c:	3c 02                	cmp    $0x2,%al
f012be7e:	75 16                	jne    f012be96 <test_krealloc+0xd49>
f012be80:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012be86:	89 c2                	mov    %eax,%edx
f012be88:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012be8e:	01 d0                	add    %edx,%eax
f012be90:	8a 00                	mov    (%eax),%al
f012be92:	3c 02                	cmp    $0x2,%al
f012be94:	74 20                	je     f012beb6 <test_krealloc+0xd69>
			panic(
f012be96:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012be9c:	8a 00                	mov    (%eax),%al
f012be9e:	0f be c0             	movsbl %al,%eax
f012bea1:	50                   	push   %eax
f012bea2:	68 c8 b8 13 f0       	push   $0xf013b8c8
f012bea7:	68 7f 0f 00 00       	push   $0xf7f
f012beac:	68 56 a5 13 f0       	push   $0xf013a556
f012beb1:	e8 f0 42 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012beb6:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bebc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012bec2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bec8:	8b 00                	mov    (%eax),%eax
f012beca:	83 f8 03             	cmp    $0x3,%eax
f012becd:	75 1c                	jne    f012beeb <test_krealloc+0xd9e>
f012becf:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012bed5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bedc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bee2:	01 d0                	add    %edx,%eax
f012bee4:	8b 00                	mov    (%eax),%eax
f012bee6:	83 f8 03             	cmp    $0x3,%eax
f012bee9:	74 17                	je     f012bf02 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012beeb:	83 ec 04             	sub    $0x4,%esp
f012beee:	68 14 b9 13 f0       	push   $0xf013b914
f012bef3:	68 83 0f 00 00       	push   $0xf83
f012bef8:	68 56 a5 13 f0       	push   $0xf013a556
f012befd:	e8 a4 42 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012bf02:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bf08:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012bf0e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bf14:	8b 00                	mov    (%eax),%eax
f012bf16:	83 f8 04             	cmp    $0x4,%eax
f012bf19:	75 1c                	jne    f012bf37 <test_krealloc+0xdea>
f012bf1b:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012bf21:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bf28:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bf2e:	01 d0                	add    %edx,%eax
f012bf30:	8b 00                	mov    (%eax),%eax
f012bf32:	83 f8 04             	cmp    $0x4,%eax
f012bf35:	74 17                	je     f012bf4e <test_krealloc+0xe01>
			panic(
f012bf37:	83 ec 04             	sub    $0x4,%esp
f012bf3a:	68 88 b8 13 f0       	push   $0xf013b888
f012bf3f:	68 88 0f 00 00       	push   $0xf88
f012bf44:	68 56 a5 13 f0       	push   $0xf013a556
f012bf49:	e8 58 42 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012bf4e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bf54:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012bf5a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bf60:	66 8b 00             	mov    (%eax),%ax
f012bf63:	66 83 f8 05          	cmp    $0x5,%ax
f012bf67:	75 1b                	jne    f012bf84 <test_krealloc+0xe37>
f012bf69:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012bf6f:	01 c0                	add    %eax,%eax
f012bf71:	89 c2                	mov    %eax,%edx
f012bf73:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bf79:	01 d0                	add    %edx,%eax
f012bf7b:	66 8b 00             	mov    (%eax),%ax
f012bf7e:	66 83 f8 05          	cmp    $0x5,%ax
f012bf82:	74 17                	je     f012bf9b <test_krealloc+0xe4e>
			panic(
f012bf84:	83 ec 04             	sub    $0x4,%esp
f012bf87:	68 88 b8 13 f0       	push   $0xf013b888
f012bf8c:	68 8d 0f 00 00       	push   $0xf8d
f012bf91:	68 56 a5 13 f0       	push   $0xf013a556
f012bf96:	e8 0b 42 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012bf9b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bfa1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012bfa7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bfad:	66 8b 00             	mov    (%eax),%ax
f012bfb0:	66 83 f8 06          	cmp    $0x6,%ax
f012bfb4:	75 1b                	jne    f012bfd1 <test_krealloc+0xe84>
f012bfb6:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012bfbc:	01 c0                	add    %eax,%eax
f012bfbe:	89 c2                	mov    %eax,%edx
f012bfc0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bfc6:	01 d0                	add    %edx,%eax
f012bfc8:	66 8b 00             	mov    (%eax),%ax
f012bfcb:	66 83 f8 06          	cmp    $0x6,%ax
f012bfcf:	74 17                	je     f012bfe8 <test_krealloc+0xe9b>
			panic(
f012bfd1:	83 ec 04             	sub    $0x4,%esp
f012bfd4:	68 88 b8 13 f0       	push   $0xf013b888
f012bfd9:	68 92 0f 00 00       	push   $0xf92
f012bfde:	68 56 a5 13 f0       	push   $0xf013a556
f012bfe3:	e8 be 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012bfe8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bfee:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012bff4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bffa:	8a 00                	mov    (%eax),%al
f012bffc:	3c 07                	cmp    $0x7,%al
f012bffe:	75 1b                	jne    f012c01b <test_krealloc+0xece>
f012c000:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c006:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c00d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c013:	01 d0                	add    %edx,%eax
f012c015:	8a 00                	mov    (%eax),%al
f012c017:	3c 07                	cmp    $0x7,%al
f012c019:	74 17                	je     f012c032 <test_krealloc+0xee5>
			panic(
f012c01b:	83 ec 04             	sub    $0x4,%esp
f012c01e:	68 88 b8 13 f0       	push   $0xf013b888
f012c023:	68 97 0f 00 00       	push   $0xf97
f012c028:	68 56 a5 13 f0       	push   $0xf013a556
f012c02d:	e8 74 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c032:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c038:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c03c:	66 83 f8 07          	cmp    $0x7,%ax
f012c040:	75 1f                	jne    f012c061 <test_krealloc+0xf14>
f012c042:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c048:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c04f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c055:	01 d0                	add    %edx,%eax
f012c057:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c05b:	66 83 f8 07          	cmp    $0x7,%ax
f012c05f:	74 17                	je     f012c078 <test_krealloc+0xf2b>
			panic(
f012c061:	83 ec 04             	sub    $0x4,%esp
f012c064:	68 88 b8 13 f0       	push   $0xf013b888
f012c069:	68 9a 0f 00 00       	push   $0xf9a
f012c06e:	68 56 a5 13 f0       	push   $0xf013a556
f012c073:	e8 2e 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c078:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c07e:	8b 40 04             	mov    0x4(%eax),%eax
f012c081:	83 f8 07             	cmp    $0x7,%eax
f012c084:	75 1d                	jne    f012c0a3 <test_krealloc+0xf56>
f012c086:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c08c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c093:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c099:	01 d0                	add    %edx,%eax
f012c09b:	8b 40 04             	mov    0x4(%eax),%eax
f012c09e:	83 f8 07             	cmp    $0x7,%eax
f012c0a1:	74 17                	je     f012c0ba <test_krealloc+0xf6d>
			panic(
f012c0a3:	83 ec 04             	sub    $0x4,%esp
f012c0a6:	68 88 b8 13 f0       	push   $0xf013b888
f012c0ab:	68 9d 0f 00 00       	push   $0xf9d
f012c0b0:	68 56 a5 13 f0       	push   $0xf013a556
f012c0b5:	e8 ec 40 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c0ba:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c0c0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c0c6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c0cc:	8a 00                	mov    (%eax),%al
f012c0ce:	3c 08                	cmp    $0x8,%al
f012c0d0:	75 1b                	jne    f012c0ed <test_krealloc+0xfa0>
f012c0d2:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c0d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c0df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c0e5:	01 d0                	add    %edx,%eax
f012c0e7:	8a 00                	mov    (%eax),%al
f012c0e9:	3c 08                	cmp    $0x8,%al
f012c0eb:	74 17                	je     f012c104 <test_krealloc+0xfb7>
			panic(
f012c0ed:	83 ec 04             	sub    $0x4,%esp
f012c0f0:	68 88 b8 13 f0       	push   $0xf013b888
f012c0f5:	68 a2 0f 00 00       	push   $0xfa2
f012c0fa:	68 56 a5 13 f0       	push   $0xf013a556
f012c0ff:	e8 a2 40 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c104:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c10a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c10e:	66 83 f8 08          	cmp    $0x8,%ax
f012c112:	75 1f                	jne    f012c133 <test_krealloc+0xfe6>
f012c114:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c11a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c121:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c127:	01 d0                	add    %edx,%eax
f012c129:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c12d:	66 83 f8 08          	cmp    $0x8,%ax
f012c131:	74 17                	je     f012c14a <test_krealloc+0xffd>
			panic(
f012c133:	83 ec 04             	sub    $0x4,%esp
f012c136:	68 88 b8 13 f0       	push   $0xf013b888
f012c13b:	68 a5 0f 00 00       	push   $0xfa5
f012c140:	68 56 a5 13 f0       	push   $0xf013a556
f012c145:	e8 5c 40 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c14a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c150:	8b 40 04             	mov    0x4(%eax),%eax
f012c153:	83 f8 08             	cmp    $0x8,%eax
f012c156:	75 1d                	jne    f012c175 <test_krealloc+0x1028>
f012c158:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c15e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c165:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c16b:	01 d0                	add    %edx,%eax
f012c16d:	8b 40 04             	mov    0x4(%eax),%eax
f012c170:	83 f8 08             	cmp    $0x8,%eax
f012c173:	74 17                	je     f012c18c <test_krealloc+0x103f>
			panic(
f012c175:	83 ec 04             	sub    $0x4,%esp
f012c178:	68 88 b8 13 f0       	push   $0xf013b888
f012c17d:	68 a8 0f 00 00       	push   $0xfa8
f012c182:	68 56 a5 13 f0       	push   $0xf013a556
f012c187:	e8 1a 40 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c18c:	e8 21 ff fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c191:	89 c2                	mov    %eax,%edx
f012c193:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c196:	39 c2                	cmp    %eax,%edx
f012c198:	74 17                	je     f012c1b1 <test_krealloc+0x1064>
			panic(
f012c19a:	83 ec 04             	sub    $0x4,%esp
f012c19d:	68 48 b9 13 f0       	push   $0xf013b948
f012c1a2:	68 ac 0f 00 00       	push   $0xfac
f012c1a7:	68 56 a5 13 f0       	push   $0xf013a556
f012c1ac:	e8 f5 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c1b1:	83 ec 0c             	sub    $0xc,%esp
f012c1b4:	68 94 b9 13 f0       	push   $0xf013b994
f012c1b9:	e8 6f 4a fd ff       	call   f0100c2d <cprintf>
f012c1be:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c1c1:	e8 ec fe fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c1c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c1c9:	e8 be 7a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c1ce:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c1d4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c1da:	83 ec 08             	sub    $0x8,%esp
f012c1dd:	6a 00                	push   $0x0
f012c1df:	50                   	push   %eax
f012c1e0:	e8 05 b3 fd ff       	call   f01074ea <krealloc>
f012c1e5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c1e8:	e8 9f 7a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c1ed:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c1f3:	74 17                	je     f012c20c <test_krealloc+0x10bf>
			panic(
f012c1f5:	83 ec 04             	sub    $0x4,%esp
f012c1f8:	68 b8 b9 13 f0       	push   $0xf013b9b8
f012c1fd:	68 b9 0f 00 00       	push   $0xfb9
f012c202:	68 56 a5 13 f0       	push   $0xf013a556
f012c207:	e8 9a 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c20c:	e8 a1 fe fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c211:	89 c2                	mov    %eax,%edx
f012c213:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c216:	29 c2                	sub    %eax,%edx
f012c218:	89 d0                	mov    %edx,%eax
f012c21a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c21f:	74 17                	je     f012c238 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012c221:	83 ec 04             	sub    $0x4,%esp
f012c224:	68 2c ba 13 f0       	push   $0xf013ba2c
f012c229:	68 bb 0f 00 00       	push   $0xfbb
f012c22e:	68 56 a5 13 f0       	push   $0xf013a556
f012c233:	e8 6e 3f fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c238:	e8 75 fe fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c23d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c240:	e8 47 7a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c245:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c24b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c251:	83 ec 08             	sub    $0x8,%esp
f012c254:	6a 00                	push   $0x0
f012c256:	50                   	push   %eax
f012c257:	e8 8e b2 fd ff       	call   f01074ea <krealloc>
f012c25c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c25f:	e8 28 7a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c264:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c26a:	74 17                	je     f012c283 <test_krealloc+0x1136>
			panic(
f012c26c:	83 ec 04             	sub    $0x4,%esp
f012c26f:	68 b8 b9 13 f0       	push   $0xf013b9b8
f012c274:	68 c4 0f 00 00       	push   $0xfc4
f012c279:	68 56 a5 13 f0       	push   $0xf013a556
f012c27e:	e8 23 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c283:	e8 2a fe fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c288:	89 c2                	mov    %eax,%edx
f012c28a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c28d:	29 c2                	sub    %eax,%edx
f012c28f:	89 d0                	mov    %edx,%eax
f012c291:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c296:	74 17                	je     f012c2af <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012c298:	83 ec 04             	sub    $0x4,%esp
f012c29b:	68 2c ba 13 f0       	push   $0xf013ba2c
f012c2a0:	68 c6 0f 00 00       	push   $0xfc6
f012c2a5:	68 56 a5 13 f0       	push   $0xf013a556
f012c2aa:	e8 f7 3e fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c2af:	e8 fe fd fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c2b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c2b7:	e8 d0 79 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c2bc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012c2c2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c2c8:	83 ec 08             	sub    $0x8,%esp
f012c2cb:	6a 00                	push   $0x0
f012c2cd:	50                   	push   %eax
f012c2ce:	e8 17 b2 fd ff       	call   f01074ea <krealloc>
f012c2d3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c2d6:	e8 b1 79 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c2db:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c2e1:	74 17                	je     f012c2fa <test_krealloc+0x11ad>
			panic(
f012c2e3:	83 ec 04             	sub    $0x4,%esp
f012c2e6:	68 70 a5 13 f0       	push   $0xf013a570
f012c2eb:	68 ce 0f 00 00       	push   $0xfce
f012c2f0:	68 56 a5 13 f0       	push   $0xf013a556
f012c2f5:	e8 ac 3e fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012c2fa:	e8 b3 fd fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c2ff:	89 c2                	mov    %eax,%edx
f012c301:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c304:	29 c2                	sub    %eax,%edx
f012c306:	89 d0                	mov    %edx,%eax
f012c308:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c30d:	74 17                	je     f012c326 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012c30f:	83 ec 04             	sub    $0x4,%esp
f012c312:	68 2c ba 13 f0       	push   $0xf013ba2c
f012c317:	68 d0 0f 00 00       	push   $0xfd0
f012c31c:	68 56 a5 13 f0       	push   $0xf013a556
f012c321:	e8 80 3e fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012c326:	e8 87 fd fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c32b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c32e:	e8 59 79 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c333:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012c339:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c33f:	83 ec 08             	sub    $0x8,%esp
f012c342:	6a 00                	push   $0x0
f012c344:	50                   	push   %eax
f012c345:	e8 a0 b1 fd ff       	call   f01074ea <krealloc>
f012c34a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c34d:	e8 3a 79 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012c352:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c358:	74 17                	je     f012c371 <test_krealloc+0x1224>
			panic(
f012c35a:	83 ec 04             	sub    $0x4,%esp
f012c35d:	68 b8 b9 13 f0       	push   $0xf013b9b8
f012c362:	68 d8 0f 00 00       	push   $0xfd8
f012c367:	68 56 a5 13 f0       	push   $0xf013a556
f012c36c:	e8 35 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012c371:	e8 3c fd fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c376:	89 c2                	mov    %eax,%edx
f012c378:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c37b:	29 c2                	sub    %eax,%edx
f012c37d:	89 d0                	mov    %edx,%eax
f012c37f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c384:	74 17                	je     f012c39d <test_krealloc+0x1250>
			panic(
f012c386:	83 ec 04             	sub    $0x4,%esp
f012c389:	68 60 ba 13 f0       	push   $0xf013ba60
f012c38e:	68 db 0f 00 00       	push   $0xfdb
f012c393:	68 56 a5 13 f0       	push   $0xf013a556
f012c398:	e8 09 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c39d:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c3a4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c3ab:	eb 48                	jmp    f012c3f5 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c3ad:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c3b0:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012c3b5:	83 ec 04             	sub    $0x4,%esp
f012c3b8:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012c3be:	51                   	push   %ecx
f012c3bf:	52                   	push   %edx
f012c3c0:	50                   	push   %eax
f012c3c1:	e8 a3 a5 fd ff       	call   f0106969 <get_page_table>
f012c3c6:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c3c9:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012c3cf:	85 c0                	test   %eax,%eax
f012c3d1:	75 17                	jne    f012c3ea <test_krealloc+0x129d>
					panic(
f012c3d3:	83 ec 04             	sub    $0x4,%esp
f012c3d6:	68 58 ae 13 f0       	push   $0xf013ae58
f012c3db:	68 e7 0f 00 00       	push   $0xfe7
f012c3e0:	68 56 a5 13 f0       	push   $0xf013a556
f012c3e5:	e8 bc 3d fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c3ea:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c3f1:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c3f5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c3f9:	78 b2                	js     f012c3ad <test_krealloc+0x1260>
f012c3fb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c3ff:	7f 09                	jg     f012c40a <test_krealloc+0x12bd>
f012c401:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c408:	76 a3                	jbe    f012c3ad <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c40a:	83 ec 0c             	sub    $0xc,%esp
f012c40d:	68 9f ba 13 f0       	push   $0xf013ba9f
f012c412:	e8 16 48 fd ff       	call   f0100c2d <cprintf>
f012c417:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c41a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c420:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c426:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c42d:	eb 21                	jmp    f012c450 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012c42f:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012c435:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c438:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c43e:	01 c8                	add    %ecx,%eax
f012c440:	8a 00                	mov    (%eax),%al
f012c442:	0f be c0             	movsbl %al,%eax
f012c445:	01 d0                	add    %edx,%eax
f012c447:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c44d:	ff 45 dc             	incl   -0x24(%ebp)
f012c450:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c456:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c459:	7d d4                	jge    f012c42f <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012c45b:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012c461:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012c467:	42                   	inc    %edx
f012c468:	01 d2                	add    %edx,%edx
f012c46a:	39 d0                	cmp    %edx,%eax
f012c46c:	74 17                	je     f012c485 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012c46e:	83 ec 04             	sub    $0x4,%esp
f012c471:	68 a8 ba 13 f0       	push   $0xf013baa8
f012c476:	68 f9 0f 00 00       	push   $0xff9
f012c47b:	68 56 a5 13 f0       	push   $0xf013a556
f012c480:	e8 21 3d fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012c485:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c48b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c491:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c498:	eb 25                	jmp    f012c4bf <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012c49a:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012c4a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c4a3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012c4aa:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c4b0:	01 c8                	add    %ecx,%eax
f012c4b2:	8b 00                	mov    (%eax),%eax
f012c4b4:	01 d0                	add    %edx,%eax
f012c4b6:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c4bc:	ff 45 dc             	incl   -0x24(%ebp)
f012c4bf:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c4c5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c4c8:	7d d0                	jge    f012c49a <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012c4ca:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012c4d0:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012c4d6:	42                   	inc    %edx
f012c4d7:	c1 e2 02             	shl    $0x2,%edx
f012c4da:	39 d0                	cmp    %edx,%eax
f012c4dc:	74 17                	je     f012c4f5 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012c4de:	83 ec 04             	sub    $0x4,%esp
f012c4e1:	68 a8 ba 13 f0       	push   $0xf013baa8
f012c4e6:	68 03 10 00 00       	push   $0x1003
f012c4eb:	68 56 a5 13 f0       	push   $0xf013a556
f012c4f0:	e8 b1 3c fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012c4f5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c4fb:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c501:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c508:	eb 24                	jmp    f012c52e <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012c50a:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c510:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c513:	01 c0                	add    %eax,%eax
f012c515:	89 c1                	mov    %eax,%ecx
f012c517:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c51d:	01 c8                	add    %ecx,%eax
f012c51f:	66 8b 00             	mov    (%eax),%ax
f012c522:	98                   	cwtl   
f012c523:	01 d0                	add    %edx,%eax
f012c525:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c52b:	ff 45 dc             	incl   -0x24(%ebp)
f012c52e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c534:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c537:	7d d1                	jge    f012c50a <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012c539:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c53f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c545:	8d 48 01             	lea    0x1(%eax),%ecx
f012c548:	89 c8                	mov    %ecx,%eax
f012c54a:	c1 e0 02             	shl    $0x2,%eax
f012c54d:	01 c8                	add    %ecx,%eax
f012c54f:	39 c2                	cmp    %eax,%edx
f012c551:	74 17                	je     f012c56a <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012c553:	83 ec 04             	sub    $0x4,%esp
f012c556:	68 a8 ba 13 f0       	push   $0xf013baa8
f012c55b:	68 0d 10 00 00       	push   $0x100d
f012c560:	68 56 a5 13 f0       	push   $0xf013a556
f012c565:	e8 3c 3c fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012c56a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c570:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c576:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c57d:	eb 70                	jmp    f012c5ef <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012c57f:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012c585:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c588:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c58f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c595:	01 c8                	add    %ecx,%eax
f012c597:	8a 00                	mov    (%eax),%al
f012c599:	0f be c0             	movsbl %al,%eax
f012c59c:	01 d0                	add    %edx,%eax
f012c59e:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012c5a4:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012c5aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c5ad:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c5b4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5ba:	01 c8                	add    %ecx,%eax
f012c5bc:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c5c0:	98                   	cwtl   
f012c5c1:	01 d0                	add    %edx,%eax
f012c5c3:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012c5c9:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012c5cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c5d2:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c5d9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5df:	01 c8                	add    %ecx,%eax
f012c5e1:	8b 40 04             	mov    0x4(%eax),%eax
f012c5e4:	01 d0                	add    %edx,%eax
f012c5e6:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c5ec:	ff 45 dc             	incl   -0x24(%ebp)
f012c5ef:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c5f5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c5f8:	7d 85                	jge    f012c57f <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012c5fa:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012c600:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c606:	8d 50 01             	lea    0x1(%eax),%edx
f012c609:	89 d0                	mov    %edx,%eax
f012c60b:	01 c0                	add    %eax,%eax
f012c60d:	01 d0                	add    %edx,%eax
f012c60f:	01 c0                	add    %eax,%eax
f012c611:	01 d0                	add    %edx,%eax
f012c613:	39 c1                	cmp    %eax,%ecx
f012c615:	75 3a                	jne    f012c651 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012c617:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012c61d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c623:	8d 50 01             	lea    0x1(%eax),%edx
f012c626:	89 d0                	mov    %edx,%eax
f012c628:	01 c0                	add    %eax,%eax
f012c62a:	01 d0                	add    %edx,%eax
f012c62c:	01 c0                	add    %eax,%eax
f012c62e:	01 d0                	add    %edx,%eax
f012c630:	39 c1                	cmp    %eax,%ecx
f012c632:	75 1d                	jne    f012c651 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012c634:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012c63a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c640:	8d 50 01             	lea    0x1(%eax),%edx
f012c643:	89 d0                	mov    %edx,%eax
f012c645:	01 c0                	add    %eax,%eax
f012c647:	01 d0                	add    %edx,%eax
f012c649:	01 c0                	add    %eax,%eax
f012c64b:	01 d0                	add    %edx,%eax
f012c64d:	39 c1                	cmp    %eax,%ecx
f012c64f:	74 17                	je     f012c668 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012c651:	83 ec 04             	sub    $0x4,%esp
f012c654:	68 a8 ba 13 f0       	push   $0xf013baa8
f012c659:	68 1b 10 00 00       	push   $0x101b
f012c65e:	68 56 a5 13 f0       	push   $0xf013a556
f012c663:	e8 3e 3b fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012c668:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012c66f:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012c672:	e8 3b fa fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c677:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012c67a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c680:	83 ec 08             	sub    $0x8,%esp
f012c683:	68 00 3c 00 00       	push   $0x3c00
f012c688:	50                   	push   %eax
f012c689:	e8 5c ae fd ff       	call   f01074ea <krealloc>
f012c68e:	83 c4 10             	add    $0x10,%esp
f012c691:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c697:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c69d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c6a2:	77 17                	ja     f012c6bb <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c6a4:	83 ec 04             	sub    $0x4,%esp
f012c6a7:	68 fc b7 13 f0       	push   $0xf013b7fc
f012c6ac:	68 27 10 00 00       	push   $0x1027
f012c6b1:	68 56 a5 13 f0       	push   $0xf013a556
f012c6b6:	e8 eb 3a fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c6bb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c6c1:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c6c7:	74 17                	je     f012c6e0 <test_krealloc+0x1593>
			panic(
f012c6c9:	83 ec 04             	sub    $0x4,%esp
f012c6cc:	68 e0 ba 13 f0       	push   $0xf013bae0
f012c6d1:	68 2a 10 00 00       	push   $0x102a
f012c6d6:	68 56 a5 13 f0       	push   $0xf013a556
f012c6db:	e8 c6 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c6e0:	e8 cd f9 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c6e5:	89 c2                	mov    %eax,%edx
f012c6e7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c6ea:	39 c2                	cmp    %eax,%edx
f012c6ec:	74 17                	je     f012c705 <test_krealloc+0x15b8>
			panic(
f012c6ee:	83 ec 04             	sub    $0x4,%esp
f012c6f1:	68 4c bb 13 f0       	push   $0xf013bb4c
f012c6f6:	68 2d 10 00 00       	push   $0x102d
f012c6fb:	68 56 a5 13 f0       	push   $0xf013a556
f012c700:	e8 a1 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012c705:	e8 a8 f9 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c70a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012c70d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c713:	83 ec 08             	sub    $0x8,%esp
f012c716:	68 00 fc 0f 00       	push   $0xffc00
f012c71b:	50                   	push   %eax
f012c71c:	e8 c9 ad fd ff       	call   f01074ea <krealloc>
f012c721:	83 c4 10             	add    $0x10,%esp
f012c724:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c72a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c730:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c735:	77 17                	ja     f012c74e <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c737:	83 ec 04             	sub    $0x4,%esp
f012c73a:	68 fc b7 13 f0       	push   $0xf013b7fc
f012c73f:	68 33 10 00 00       	push   $0x1033
f012c744:	68 56 a5 13 f0       	push   $0xf013a556
f012c749:	e8 58 3a fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012c74e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c754:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c75a:	74 17                	je     f012c773 <test_krealloc+0x1626>
			panic(
f012c75c:	83 ec 04             	sub    $0x4,%esp
f012c75f:	68 e0 ba 13 f0       	push   $0xf013bae0
f012c764:	68 36 10 00 00       	push   $0x1036
f012c769:	68 56 a5 13 f0       	push   $0xf013a556
f012c76e:	e8 33 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c773:	e8 3a f9 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c778:	89 c2                	mov    %eax,%edx
f012c77a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c77d:	39 c2                	cmp    %eax,%edx
f012c77f:	74 17                	je     f012c798 <test_krealloc+0x164b>
			panic(
f012c781:	83 ec 04             	sub    $0x4,%esp
f012c784:	68 4c bb 13 f0       	push   $0xf013bb4c
f012c789:	68 39 10 00 00       	push   $0x1039
f012c78e:	68 56 a5 13 f0       	push   $0xf013a556
f012c793:	e8 0e 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012c798:	e8 15 f9 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c79d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012c7a0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c7a6:	83 ec 08             	sub    $0x8,%esp
f012c7a9:	68 00 fc 0f 00       	push   $0xffc00
f012c7ae:	50                   	push   %eax
f012c7af:	e8 36 ad fd ff       	call   f01074ea <krealloc>
f012c7b4:	83 c4 10             	add    $0x10,%esp
f012c7b7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c7bd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c7c3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c7c8:	77 17                	ja     f012c7e1 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c7ca:	83 ec 04             	sub    $0x4,%esp
f012c7cd:	68 fc b7 13 f0       	push   $0xf013b7fc
f012c7d2:	68 3f 10 00 00       	push   $0x103f
f012c7d7:	68 56 a5 13 f0       	push   $0xf013a556
f012c7dc:	e8 c5 39 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c7e1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c7e7:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c7ed:	74 17                	je     f012c806 <test_krealloc+0x16b9>
			panic(
f012c7ef:	83 ec 04             	sub    $0x4,%esp
f012c7f2:	68 e0 ba 13 f0       	push   $0xf013bae0
f012c7f7:	68 42 10 00 00       	push   $0x1042
f012c7fc:	68 56 a5 13 f0       	push   $0xf013a556
f012c801:	e8 a0 39 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c806:	e8 a7 f8 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c80b:	89 c2                	mov    %eax,%edx
f012c80d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c810:	39 c2                	cmp    %eax,%edx
f012c812:	74 17                	je     f012c82b <test_krealloc+0x16de>
			panic(
f012c814:	83 ec 04             	sub    $0x4,%esp
f012c817:	68 4c bb 13 f0       	push   $0xf013bb4c
f012c81c:	68 45 10 00 00       	push   $0x1045
f012c821:	68 56 a5 13 f0       	push   $0xf013a556
f012c826:	e8 7b 39 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012c82b:	e8 82 f8 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c830:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012c833:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c839:	83 ec 08             	sub    $0x8,%esp
f012c83c:	68 00 fc 0f 00       	push   $0xffc00
f012c841:	50                   	push   %eax
f012c842:	e8 a3 ac fd ff       	call   f01074ea <krealloc>
f012c847:	83 c4 10             	add    $0x10,%esp
f012c84a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c850:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c856:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c85b:	77 17                	ja     f012c874 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c85d:	83 ec 04             	sub    $0x4,%esp
f012c860:	68 fc b7 13 f0       	push   $0xf013b7fc
f012c865:	68 4d 10 00 00       	push   $0x104d
f012c86a:	68 56 a5 13 f0       	push   $0xf013a556
f012c86f:	e8 32 39 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012c874:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c87a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c880:	74 17                	je     f012c899 <test_krealloc+0x174c>
			panic(
f012c882:	83 ec 04             	sub    $0x4,%esp
f012c885:	68 90 bb 13 f0       	push   $0xf013bb90
f012c88a:	68 50 10 00 00       	push   $0x1050
f012c88f:	68 56 a5 13 f0       	push   $0xf013a556
f012c894:	e8 0d 39 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c899:	e8 14 f8 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c89e:	89 c2                	mov    %eax,%edx
f012c8a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c8a3:	39 c2                	cmp    %eax,%edx
f012c8a5:	74 17                	je     f012c8be <test_krealloc+0x1771>
			panic(
f012c8a7:	83 ec 04             	sub    $0x4,%esp
f012c8aa:	68 4c bb 13 f0       	push   $0xf013bb4c
f012c8af:	68 53 10 00 00       	push   $0x1053
f012c8b4:	68 56 a5 13 f0       	push   $0xf013a556
f012c8b9:	e8 e8 38 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012c8be:	83 ec 0c             	sub    $0xc,%esp
f012c8c1:	68 6f ad 13 f0       	push   $0xf013ad6f
f012c8c6:	e8 62 43 fd ff       	call   f0100c2d <cprintf>
f012c8cb:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012c8ce:	e8 df f7 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c8d3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012c8d6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c8dc:	83 ec 08             	sub    $0x8,%esp
f012c8df:	68 00 18 10 00       	push   $0x101800
f012c8e4:	50                   	push   %eax
f012c8e5:	e8 00 ac fd ff       	call   f01074ea <krealloc>
f012c8ea:	83 c4 10             	add    $0x10,%esp
f012c8ed:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c8f0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c8f3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c8f8:	77 17                	ja     f012c911 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c8fa:	83 ec 04             	sub    $0x4,%esp
f012c8fd:	68 fc b7 13 f0       	push   $0xf013b7fc
f012c902:	68 5c 10 00 00       	push   $0x105c
f012c907:	68 56 a5 13 f0       	push   $0xf013a556
f012c90c:	e8 95 38 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c911:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c917:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c91a:	74 17                	je     f012c933 <test_krealloc+0x17e6>
			panic(
f012c91c:	83 ec 04             	sub    $0x4,%esp
f012c91f:	68 f0 bb 13 f0       	push   $0xf013bbf0
f012c924:	68 5f 10 00 00       	push   $0x105f
f012c929:	68 56 a5 13 f0       	push   $0xf013a556
f012c92e:	e8 73 38 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012c933:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c936:	e8 77 f7 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c93b:	29 c3                	sub    %eax,%ebx
f012c93d:	89 d8                	mov    %ebx,%eax
f012c93f:	83 f8 02             	cmp    $0x2,%eax
f012c942:	74 17                	je     f012c95b <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012c944:	83 ec 04             	sub    $0x4,%esp
f012c947:	68 6c bc 13 f0       	push   $0xf013bc6c
f012c94c:	68 61 10 00 00       	push   $0x1061
f012c951:	68 56 a5 13 f0       	push   $0xf013a556
f012c956:	e8 4b 38 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012c95b:	e8 52 f7 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c960:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012c963:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c969:	83 ec 08             	sub    $0x8,%esp
f012c96c:	68 00 fc 3f 00       	push   $0x3ffc00
f012c971:	50                   	push   %eax
f012c972:	e8 73 ab fd ff       	call   f01074ea <krealloc>
f012c977:	83 c4 10             	add    $0x10,%esp
f012c97a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c97d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c980:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c985:	77 17                	ja     f012c99e <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c987:	83 ec 04             	sub    $0x4,%esp
f012c98a:	68 fc b7 13 f0       	push   $0xf013b7fc
f012c98f:	68 67 10 00 00       	push   $0x1067
f012c994:	68 56 a5 13 f0       	push   $0xf013a556
f012c999:	e8 08 38 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012c99e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c9a4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c9a7:	74 17                	je     f012c9c0 <test_krealloc+0x1873>
			panic(
f012c9a9:	83 ec 04             	sub    $0x4,%esp
f012c9ac:	68 f0 bb 13 f0       	push   $0xf013bbf0
f012c9b1:	68 6a 10 00 00       	push   $0x106a
f012c9b6:	68 56 a5 13 f0       	push   $0xf013a556
f012c9bb:	e8 e6 37 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012c9c0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c9c3:	e8 ea f6 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c9c8:	29 c3                	sub    %eax,%ebx
f012c9ca:	89 d8                	mov    %ebx,%eax
f012c9cc:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c9d1:	74 17                	je     f012c9ea <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012c9d3:	83 ec 04             	sub    $0x4,%esp
f012c9d6:	68 6c bc 13 f0       	push   $0xf013bc6c
f012c9db:	68 6d 10 00 00       	push   $0x106d
f012c9e0:	68 56 a5 13 f0       	push   $0xf013a556
f012c9e5:	e8 bc 37 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012c9ea:	83 ec 0c             	sub    $0xc,%esp
f012c9ed:	68 b4 ad 13 f0       	push   $0xf013adb4
f012c9f2:	e8 36 42 fd ff       	call   f0100c2d <cprintf>
f012c9f7:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012c9fa:	e8 b3 f6 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012c9ff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012ca02:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ca08:	83 ec 08             	sub    $0x8,%esp
f012ca0b:	68 00 fc 9f 00       	push   $0x9ffc00
f012ca10:	50                   	push   %eax
f012ca11:	e8 d4 aa fd ff       	call   f01074ea <krealloc>
f012ca16:	83 c4 10             	add    $0x10,%esp
f012ca19:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ca1c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ca1f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ca24:	77 17                	ja     f012ca3d <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ca26:	83 ec 04             	sub    $0x4,%esp
f012ca29:	68 fc b7 13 f0       	push   $0xf013b7fc
f012ca2e:	68 78 10 00 00       	push   $0x1078
f012ca33:	68 56 a5 13 f0       	push   $0xf013a556
f012ca38:	e8 69 37 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012ca3d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012ca44:	10 00 00 
f012ca47:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ca4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ca52:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012ca58:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ca5e:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca63:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012ca69:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ca6f:	29 d0                	sub    %edx,%eax
f012ca71:	89 c1                	mov    %eax,%ecx
f012ca73:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012ca7a:	10 00 00 
f012ca7d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ca82:	0f b6 d0             	movzbl %al,%edx
f012ca85:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012ca8b:	01 d0                	add    %edx,%eax
f012ca8d:	48                   	dec    %eax
f012ca8e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012ca94:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ca9a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca9f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012caa5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012caab:	29 d0                	sub    %edx,%eax
f012caad:	01 c1                	add    %eax,%ecx
f012caaf:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012cab6:	10 00 00 
f012cab9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012cabe:	0f b6 c0             	movzbl %al,%eax
f012cac1:	c1 e0 04             	shl    $0x4,%eax
f012cac4:	89 c2                	mov    %eax,%edx
f012cac6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012cacc:	01 d0                	add    %edx,%eax
f012cace:	48                   	dec    %eax
f012cacf:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012cad5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012cadb:	ba 00 00 00 00       	mov    $0x0,%edx
f012cae0:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012cae6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012caec:	29 d0                	sub    %edx,%eax
f012caee:	01 c8                	add    %ecx,%eax
f012caf0:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012caf6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012caf9:	39 c2                	cmp    %eax,%edx
f012cafb:	74 18                	je     f012cb15 <test_krealloc+0x19c8>
			panic(
f012cafd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cb00:	50                   	push   %eax
f012cb01:	68 a0 bc 13 f0       	push   $0xf013bca0
f012cb06:	68 7c 10 00 00       	push   $0x107c
f012cb0b:	68 56 a5 13 f0       	push   $0xf013a556
f012cb10:	e8 91 36 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012cb15:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb1b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cb1e:	75 17                	jne    f012cb37 <test_krealloc+0x19ea>
			panic(
f012cb20:	83 ec 04             	sub    $0x4,%esp
f012cb23:	68 e4 bc 13 f0       	push   $0xf013bce4
f012cb28:	68 7f 10 00 00       	push   $0x107f
f012cb2d:	68 56 a5 13 f0       	push   $0xf013a556
f012cb32:	e8 6f 36 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012cb37:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cb3a:	e8 73 f5 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012cb3f:	29 c3                	sub    %eax,%ebx
f012cb41:	89 d8                	mov    %ebx,%eax
f012cb43:	3d 00 06 00 00       	cmp    $0x600,%eax
f012cb48:	74 17                	je     f012cb61 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012cb4a:	83 ec 04             	sub    $0x4,%esp
f012cb4d:	68 6c bc 13 f0       	push   $0xf013bc6c
f012cb52:	68 82 10 00 00       	push   $0x1082
f012cb57:	68 56 a5 13 f0       	push   $0xf013a556
f012cb5c:	e8 45 36 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012cb61:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cb64:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012cb6a:	e8 43 f5 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012cb6f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012cb72:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cb78:	83 ec 08             	sub    $0x8,%esp
f012cb7b:	68 00 fc 5f 00       	push   $0x5ffc00
f012cb80:	50                   	push   %eax
f012cb81:	e8 64 a9 fd ff       	call   f01074ea <krealloc>
f012cb86:	83 c4 10             	add    $0x10,%esp
f012cb89:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cb8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cb8f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cb94:	77 17                	ja     f012cbad <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cb96:	83 ec 04             	sub    $0x4,%esp
f012cb99:	68 fc b7 13 f0       	push   $0xf013b7fc
f012cb9e:	68 8b 10 00 00       	push   $0x108b
f012cba3:	68 56 a5 13 f0       	push   $0xf013a556
f012cba8:	e8 f9 35 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[6])
f012cbad:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cbb3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cbb6:	74 17                	je     f012cbcf <test_krealloc+0x1a82>
			panic(
f012cbb8:	83 ec 04             	sub    $0x4,%esp
f012cbbb:	68 f0 bb 13 f0       	push   $0xf013bbf0
f012cbc0:	68 8e 10 00 00       	push   $0x108e
f012cbc5:	68 56 a5 13 f0       	push   $0xf013a556
f012cbca:	e8 d7 35 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012cbcf:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cbd2:	e8 db f4 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012cbd7:	29 c3                	sub    %eax,%ebx
f012cbd9:	89 d8                	mov    %ebx,%eax
f012cbdb:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cbe0:	74 17                	je     f012cbf9 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012cbe2:	83 ec 04             	sub    $0x4,%esp
f012cbe5:	68 6c bc 13 f0       	push   $0xf013bc6c
f012cbea:	68 91 10 00 00       	push   $0x1091
f012cbef:	68 56 a5 13 f0       	push   $0xf013a556
f012cbf4:	e8 ad 35 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012cbf9:	e8 b4 f4 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012cbfe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012cc01:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cc07:	83 ec 08             	sub    $0x8,%esp
f012cc0a:	68 00 fc 3f 01       	push   $0x13ffc00
f012cc0f:	50                   	push   %eax
f012cc10:	e8 d5 a8 fd ff       	call   f01074ea <krealloc>
f012cc15:	83 c4 10             	add    $0x10,%esp
f012cc18:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cc1b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cc1e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cc23:	77 17                	ja     f012cc3c <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc25:	83 ec 04             	sub    $0x4,%esp
f012cc28:	68 fc b7 13 f0       	push   $0xf013b7fc
f012cc2d:	68 98 10 00 00       	push   $0x1098
f012cc32:	68 56 a5 13 f0       	push   $0xf013a556
f012cc37:	e8 6a 35 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012cc3c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cc42:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cc45:	75 17                	jne    f012cc5e <test_krealloc+0x1b11>
			panic(
f012cc47:	83 ec 04             	sub    $0x4,%esp
f012cc4a:	68 e4 bc 13 f0       	push   $0xf013bce4
f012cc4f:	68 9b 10 00 00       	push   $0x109b
f012cc54:	68 56 a5 13 f0       	push   $0xf013a556
f012cc59:	e8 48 35 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012cc5e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012cc65:	10 00 00 
f012cc68:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012cc6e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cc73:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012cc79:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012cc7f:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc84:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012cc8a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012cc90:	29 d0                	sub    %edx,%eax
f012cc92:	89 c1                	mov    %eax,%ecx
f012cc94:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012cc9b:	10 00 00 
f012cc9e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012cca3:	0f b6 d0             	movzbl %al,%edx
f012cca6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ccac:	01 d0                	add    %edx,%eax
f012ccae:	48                   	dec    %eax
f012ccaf:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012ccb5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ccbb:	ba 00 00 00 00       	mov    $0x0,%edx
f012ccc0:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012ccc6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012cccc:	29 d0                	sub    %edx,%eax
f012ccce:	01 c1                	add    %eax,%ecx
f012ccd0:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012ccd7:	10 00 00 
f012ccda:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ccdf:	0f b6 c0             	movzbl %al,%eax
f012cce2:	c1 e0 04             	shl    $0x4,%eax
f012cce5:	89 c2                	mov    %eax,%edx
f012cce7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cced:	01 d0                	add    %edx,%eax
f012ccef:	48                   	dec    %eax
f012ccf0:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012ccf6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ccfc:	ba 00 00 00 00       	mov    $0x0,%edx
f012cd01:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012cd07:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cd0d:	29 d0                	sub    %edx,%eax
f012cd0f:	01 c8                	add    %ecx,%eax
f012cd11:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012cd17:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cd1a:	39 c2                	cmp    %eax,%edx
f012cd1c:	74 17                	je     f012cd35 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012cd1e:	83 ec 04             	sub    $0x4,%esp
f012cd21:	68 68 bd 13 f0       	push   $0xf013bd68
f012cd26:	68 9d 10 00 00       	push   $0x109d
f012cd2b:	68 56 a5 13 f0       	push   $0xf013a556
f012cd30:	e8 71 34 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012cd35:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cd38:	e8 75 f3 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012cd3d:	29 c3                	sub    %eax,%ebx
f012cd3f:	89 d8                	mov    %ebx,%eax
f012cd41:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012cd46:	74 17                	je     f012cd5f <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012cd48:	83 ec 04             	sub    $0x4,%esp
f012cd4b:	68 6c bc 13 f0       	push   $0xf013bc6c
f012cd50:	68 a0 10 00 00       	push   $0x10a0
f012cd55:	68 56 a5 13 f0       	push   $0xf013a556
f012cd5a:	e8 47 34 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012cd5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cd62:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012cd68:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cd6e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012cd74:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012cd7b:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cd7e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012cd85:	eb 21                	jmp    f012cda8 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012cd87:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cd8d:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012cd90:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cd96:	01 c8                	add    %ecx,%eax
f012cd98:	8a 00                	mov    (%eax),%al
f012cd9a:	0f be c0             	movsbl %al,%eax
f012cd9d:	01 d0                	add    %edx,%eax
f012cd9f:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cda5:	ff 45 d8             	incl   -0x28(%ebp)
f012cda8:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cdae:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012cdb1:	7d d4                	jge    f012cd87 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cdb3:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012cdb9:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cdbf:	42                   	inc    %edx
f012cdc0:	01 d2                	add    %edx,%edx
f012cdc2:	39 d0                	cmp    %edx,%eax
f012cdc4:	74 17                	je     f012cddd <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012cdc6:	83 ec 04             	sub    $0x4,%esp
f012cdc9:	68 9c bd 13 f0       	push   $0xf013bd9c
f012cdce:	68 ae 10 00 00       	push   $0x10ae
f012cdd3:	68 56 a5 13 f0       	push   $0xf013a556
f012cdd8:	e8 c9 33 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012cddd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cde3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012cde9:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012cdf0:	00 00 00 
		sums[1] = 0;
f012cdf3:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012cdfa:	00 00 00 
		sums[2] = 0;
f012cdfd:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012ce04:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce07:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ce0e:	eb 70                	jmp    f012ce80 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012ce10:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012ce16:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ce19:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce20:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce26:	01 c8                	add    %ecx,%eax
f012ce28:	8a 00                	mov    (%eax),%al
f012ce2a:	0f be c0             	movsbl %al,%eax
f012ce2d:	01 d0                	add    %edx,%eax
f012ce2f:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012ce35:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012ce3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ce3e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce45:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce4b:	01 c8                	add    %ecx,%eax
f012ce4d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ce51:	98                   	cwtl   
f012ce52:	01 d0                	add    %edx,%eax
f012ce54:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012ce5a:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012ce60:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ce63:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce6a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce70:	01 c8                	add    %ecx,%eax
f012ce72:	8b 40 04             	mov    0x4(%eax),%eax
f012ce75:	01 d0                	add    %edx,%eax
f012ce77:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce7d:	ff 45 d8             	incl   -0x28(%ebp)
f012ce80:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ce86:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ce89:	7d 85                	jge    f012ce10 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012ce8b:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012ce91:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ce97:	8d 50 01             	lea    0x1(%eax),%edx
f012ce9a:	89 d0                	mov    %edx,%eax
f012ce9c:	01 c0                	add    %eax,%eax
f012ce9e:	01 d0                	add    %edx,%eax
f012cea0:	01 c0                	add    %eax,%eax
f012cea2:	01 d0                	add    %edx,%eax
f012cea4:	39 c1                	cmp    %eax,%ecx
f012cea6:	75 3a                	jne    f012cee2 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012cea8:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012ceae:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ceb4:	8d 50 01             	lea    0x1(%eax),%edx
f012ceb7:	89 d0                	mov    %edx,%eax
f012ceb9:	01 c0                	add    %eax,%eax
f012cebb:	01 d0                	add    %edx,%eax
f012cebd:	01 c0                	add    %eax,%eax
f012cebf:	01 d0                	add    %edx,%eax
f012cec1:	39 c1                	cmp    %eax,%ecx
f012cec3:	75 1d                	jne    f012cee2 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012cec5:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012cecb:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ced1:	8d 50 01             	lea    0x1(%eax),%edx
f012ced4:	89 d0                	mov    %edx,%eax
f012ced6:	01 c0                	add    %eax,%eax
f012ced8:	01 d0                	add    %edx,%eax
f012ceda:	01 c0                	add    %eax,%eax
f012cedc:	01 d0                	add    %edx,%eax
f012cede:	39 c1                	cmp    %eax,%ecx
f012cee0:	74 17                	je     f012cef9 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012cee2:	83 ec 04             	sub    $0x4,%esp
f012cee5:	68 9c bd 13 f0       	push   $0xf013bd9c
f012ceea:	68 c0 10 00 00       	push   $0x10c0
f012ceef:	68 56 a5 13 f0       	push   $0xf013a556
f012cef4:	e8 ad 32 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cef9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ceff:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012cf05:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012cf0c:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012cf0f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012cf16:	eb 24                	jmp    f012cf3c <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012cf18:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cf1e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012cf21:	01 c0                	add    %eax,%eax
f012cf23:	89 c1                	mov    %eax,%ecx
f012cf25:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf2b:	01 c8                	add    %ecx,%eax
f012cf2d:	66 8b 00             	mov    (%eax),%ax
f012cf30:	98                   	cwtl   
f012cf31:	01 d0                	add    %edx,%eax
f012cf33:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012cf39:	ff 45 d8             	incl   -0x28(%ebp)
f012cf3c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cf42:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012cf45:	7d d1                	jge    f012cf18 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012cf47:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cf4d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cf53:	8d 48 01             	lea    0x1(%eax),%ecx
f012cf56:	89 c8                	mov    %ecx,%eax
f012cf58:	c1 e0 02             	shl    $0x2,%eax
f012cf5b:	01 c8                	add    %ecx,%eax
f012cf5d:	39 c2                	cmp    %eax,%edx
f012cf5f:	74 17                	je     f012cf78 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012cf61:	83 ec 04             	sub    $0x4,%esp
f012cf64:	68 9c bd 13 f0       	push   $0xf013bd9c
f012cf69:	68 ca 10 00 00       	push   $0x10ca
f012cf6e:	68 56 a5 13 f0       	push   $0xf013a556
f012cf73:	e8 2e 32 fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012cf78:	e8 35 f1 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012cf7d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cf80:	e8 07 6d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cf85:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012cf8b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cf91:	83 ec 08             	sub    $0x8,%esp
f012cf94:	6a 00                	push   $0x0
f012cf96:	50                   	push   %eax
f012cf97:	e8 4e a5 fd ff       	call   f01074ea <krealloc>
f012cf9c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cf9f:	e8 e8 6c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cfa4:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cfaa:	74 17                	je     f012cfc3 <test_krealloc+0x1e76>
			panic(
f012cfac:	83 ec 04             	sub    $0x4,%esp
f012cfaf:	68 70 a5 13 f0       	push   $0xf013a570
f012cfb4:	68 d2 10 00 00       	push   $0x10d2
f012cfb9:	68 56 a5 13 f0       	push   $0xf013a556
f012cfbe:	e8 e3 31 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012cfc3:	e8 ea f0 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012cfc8:	89 c2                	mov    %eax,%edx
f012cfca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cfcd:	29 c2                	sub    %eax,%edx
f012cfcf:	89 d0                	mov    %edx,%eax
f012cfd1:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012cfd6:	74 17                	je     f012cfef <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012cfd8:	83 ec 04             	sub    $0x4,%esp
f012cfdb:	68 2c ba 13 f0       	push   $0xf013ba2c
f012cfe0:	68 d4 10 00 00       	push   $0x10d4
f012cfe5:	68 56 a5 13 f0       	push   $0xf013a556
f012cfea:	e8 b7 31 fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012cfef:	e8 be f0 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012cff4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cff7:	e8 90 6c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cffc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012d002:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d008:	83 ec 0c             	sub    $0xc,%esp
f012d00b:	50                   	push   %eax
f012d00c:	e8 2b a4 fd ff       	call   f010743c <kfree>
f012d011:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d014:	e8 73 6c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012d019:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d01f:	74 17                	je     f012d038 <test_krealloc+0x1eeb>
			panic(
f012d021:	83 ec 04             	sub    $0x4,%esp
f012d024:	68 70 a5 13 f0       	push   $0xf013a570
f012d029:	68 dc 10 00 00       	push   $0x10dc
f012d02e:	68 56 a5 13 f0       	push   $0xf013a556
f012d033:	e8 6e 31 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d038:	e8 75 f0 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d03d:	89 c2                	mov    %eax,%edx
f012d03f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d042:	29 c2                	sub    %eax,%edx
f012d044:	89 d0                	mov    %edx,%eax
f012d046:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d04b:	74 17                	je     f012d064 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012d04d:	83 ec 04             	sub    $0x4,%esp
f012d050:	68 2c ba 13 f0       	push   $0xf013ba2c
f012d055:	68 de 10 00 00       	push   $0x10de
f012d05a:	68 56 a5 13 f0       	push   $0xf013a556
f012d05f:	e8 42 31 fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d064:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d06b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d072:	eb 48                	jmp    f012d0bc <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d074:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d077:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012d07c:	83 ec 04             	sub    $0x4,%esp
f012d07f:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012d085:	51                   	push   %ecx
f012d086:	52                   	push   %edx
f012d087:	50                   	push   %eax
f012d088:	e8 dc 98 fd ff       	call   f0106969 <get_page_table>
f012d08d:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d090:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012d096:	85 c0                	test   %eax,%eax
f012d098:	75 17                	jne    f012d0b1 <test_krealloc+0x1f64>
					panic(
f012d09a:	83 ec 04             	sub    $0x4,%esp
f012d09d:	68 58 ae 13 f0       	push   $0xf013ae58
f012d0a2:	68 eb 10 00 00       	push   $0x10eb
f012d0a7:	68 56 a5 13 f0       	push   $0xf013a556
f012d0ac:	e8 f5 30 fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d0b1:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d0b8:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d0bc:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d0c0:	78 b2                	js     f012d074 <test_krealloc+0x1f27>
f012d0c2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d0c6:	7f 09                	jg     f012d0d1 <test_krealloc+0x1f84>
f012d0c8:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d0cf:	76 a3                	jbe    f012d074 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d0d1:	83 ec 0c             	sub    $0xc,%esp
f012d0d4:	68 3a a7 13 f0       	push   $0xf013a73a
f012d0d9:	e8 4f 3b fd ff       	call   f0100c2d <cprintf>
f012d0de:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012d0e1:	83 ec 0c             	sub    $0xc,%esp
f012d0e4:	68 c8 bd 13 f0       	push   $0xf013bdc8
f012d0e9:	e8 3f 3b fd ff       	call   f0100c2d <cprintf>
f012d0ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d0f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d0f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d0f9:	5b                   	pop    %ebx
f012d0fa:	5f                   	pop    %edi
f012d0fb:	5d                   	pop    %ebp
f012d0fc:	c3                   	ret    

f012d0fd <test_krealloc_BF>:


int test_krealloc_BF() {
f012d0fd:	55                   	push   %ebp
f012d0fe:	89 e5                	mov    %esp,%ebp
f012d100:	57                   	push   %edi
f012d101:	53                   	push   %ebx
f012d102:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012d108:	83 ec 0c             	sub    $0xc,%esp
f012d10b:	68 98 a4 13 f0       	push   $0xf013a498
f012d110:	e8 18 3b fd ff       	call   f0100c2d <cprintf>
f012d115:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012d118:	83 ec 0c             	sub    $0xc,%esp
f012d11b:	68 c8 a4 13 f0       	push   $0xf013a4c8
f012d120:	e8 08 3b fd ff       	call   f0100c2d <cprintf>
f012d125:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012d128:	83 ec 0c             	sub    $0xc,%esp
f012d12b:	68 98 a4 13 f0       	push   $0xf013a498
f012d130:	e8 f8 3a fd ff       	call   f0100c2d <cprintf>
f012d135:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012d138:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012d13c:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012d140:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012d146:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012d14c:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012d153:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012d15a:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012d160:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d165:	b8 00 00 00 00       	mov    $0x0,%eax
f012d16a:	89 d7                	mov    %edx,%edi
f012d16c:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012d16e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012d175:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012d17b:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d180:	b8 00 00 00 00       	mov    $0x0,%eax
f012d185:	89 d7                	mov    %edx,%edi
f012d187:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012d189:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012d18f:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d194:	b8 00 00 00 00       	mov    $0x0,%eax
f012d199:	89 d7                	mov    %edx,%edi
f012d19b:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d19d:	e8 10 ef fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d1a2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012d1a5:	83 ec 08             	sub    $0x8,%esp
f012d1a8:	68 00 fc 0f 00       	push   $0xffc00
f012d1ad:	6a 00                	push   $0x0
f012d1af:	e8 36 a3 fd ff       	call   f01074ea <krealloc>
f012d1b4:	83 c4 10             	add    $0x10,%esp
f012d1b7:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012d1bd:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d1c3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d1c8:	77 17                	ja     f012d1e1 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1ca:	83 ec 04             	sub    $0x4,%esp
f012d1cd:	68 fc b7 13 f0       	push   $0xf013b7fc
f012d1d2:	68 1a 11 00 00       	push   $0x111a
f012d1d7:	68 56 a5 13 f0       	push   $0xf013a556
f012d1dc:	e8 c5 2f fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012d1e1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d1e7:	89 c1                	mov    %eax,%ecx
f012d1e9:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012d1f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012d1f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d1f8:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012d1fb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d1fe:	ba 00 00 00 00       	mov    $0x0,%edx
f012d203:	f7 75 b4             	divl   -0x4c(%ebp)
f012d206:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d209:	29 d0                	sub    %edx,%eax
f012d20b:	89 c3                	mov    %eax,%ebx
f012d20d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012d214:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d219:	0f b6 d0             	movzbl %al,%edx
f012d21c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012d21f:	01 d0                	add    %edx,%eax
f012d221:	48                   	dec    %eax
f012d222:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012d225:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d228:	ba 00 00 00 00       	mov    $0x0,%edx
f012d22d:	f7 75 ac             	divl   -0x54(%ebp)
f012d230:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d233:	29 d0                	sub    %edx,%eax
f012d235:	01 c3                	add    %eax,%ebx
f012d237:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012d23e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d243:	0f b6 c0             	movzbl %al,%eax
f012d246:	c1 e0 04             	shl    $0x4,%eax
f012d249:	89 c2                	mov    %eax,%edx
f012d24b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012d24e:	01 d0                	add    %edx,%eax
f012d250:	48                   	dec    %eax
f012d251:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012d254:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d257:	ba 00 00 00 00       	mov    $0x0,%edx
f012d25c:	f7 75 a4             	divl   -0x5c(%ebp)
f012d25f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d262:	29 d0                	sub    %edx,%eax
f012d264:	01 d8                	add    %ebx,%eax
f012d266:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012d26b:	39 c1                	cmp    %eax,%ecx
f012d26d:	74 17                	je     f012d286 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012d26f:	83 ec 04             	sub    $0x4,%esp
f012d272:	68 38 b8 13 f0       	push   $0xf013b838
f012d277:	68 1c 11 00 00       	push   $0x111c
f012d27c:	68 56 a5 13 f0       	push   $0xf013a556
f012d281:	e8 20 2f fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d286:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d289:	e8 24 ee fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d28e:	29 c3                	sub    %eax,%ebx
f012d290:	89 d8                	mov    %ebx,%eax
f012d292:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d297:	74 17                	je     f012d2b0 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012d299:	83 ec 04             	sub    $0x4,%esp
f012d29c:	68 6a b8 13 f0       	push   $0xf013b86a
f012d2a1:	68 1f 11 00 00       	push   $0x111f
f012d2a6:	68 56 a5 13 f0       	push   $0xf013a556
f012d2ab:	e8 f6 2e fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d2b0:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012d2b7:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d2ba:	e8 f3 ed fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d2bf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012d2c2:	83 ec 08             	sub    $0x8,%esp
f012d2c5:	68 00 fc 0f 00       	push   $0xffc00
f012d2ca:	6a 00                	push   $0x0
f012d2cc:	e8 19 a2 fd ff       	call   f01074ea <krealloc>
f012d2d1:	83 c4 10             	add    $0x10,%esp
f012d2d4:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012d2da:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d2e0:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012d2e5:	77 17                	ja     f012d2fe <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2e7:	83 ec 04             	sub    $0x4,%esp
f012d2ea:	68 fc b7 13 f0       	push   $0xf013b7fc
f012d2ef:	68 27 11 00 00       	push   $0x1127
f012d2f4:	68 56 a5 13 f0       	push   $0xf013a556
f012d2f9:	e8 a8 2e fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012d2fe:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d304:	89 c1                	mov    %eax,%ecx
f012d306:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012d30d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012d310:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d315:	89 45 98             	mov    %eax,-0x68(%ebp)
f012d318:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d31b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d320:	f7 75 9c             	divl   -0x64(%ebp)
f012d323:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d326:	29 d0                	sub    %edx,%eax
f012d328:	89 c3                	mov    %eax,%ebx
f012d32a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012d331:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d336:	0f b6 d0             	movzbl %al,%edx
f012d339:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012d33c:	01 d0                	add    %edx,%eax
f012d33e:	48                   	dec    %eax
f012d33f:	89 45 90             	mov    %eax,-0x70(%ebp)
f012d342:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d345:	ba 00 00 00 00       	mov    $0x0,%edx
f012d34a:	f7 75 94             	divl   -0x6c(%ebp)
f012d34d:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d350:	29 d0                	sub    %edx,%eax
f012d352:	01 c3                	add    %eax,%ebx
f012d354:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012d35b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d360:	0f b6 c0             	movzbl %al,%eax
f012d363:	c1 e0 04             	shl    $0x4,%eax
f012d366:	89 c2                	mov    %eax,%edx
f012d368:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012d36b:	01 d0                	add    %edx,%eax
f012d36d:	48                   	dec    %eax
f012d36e:	89 45 88             	mov    %eax,-0x78(%ebp)
f012d371:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d374:	ba 00 00 00 00       	mov    $0x0,%edx
f012d379:	f7 75 8c             	divl   -0x74(%ebp)
f012d37c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d37f:	29 d0                	sub    %edx,%eax
f012d381:	01 d8                	add    %ebx,%eax
f012d383:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012d388:	39 c1                	cmp    %eax,%ecx
f012d38a:	74 17                	je     f012d3a3 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012d38c:	83 ec 04             	sub    $0x4,%esp
f012d38f:	68 38 b8 13 f0       	push   $0xf013b838
f012d394:	68 29 11 00 00       	push   $0x1129
f012d399:	68 56 a5 13 f0       	push   $0xf013a556
f012d39e:	e8 03 2e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d3a3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d3a6:	e8 07 ed fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d3ab:	29 c3                	sub    %eax,%ebx
f012d3ad:	89 d8                	mov    %ebx,%eax
f012d3af:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d3b4:	74 17                	je     f012d3cd <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012d3b6:	83 ec 04             	sub    $0x4,%esp
f012d3b9:	68 6a b8 13 f0       	push   $0xf013b86a
f012d3be:	68 2b 11 00 00       	push   $0x112b
f012d3c3:	68 56 a5 13 f0       	push   $0xf013a556
f012d3c8:	e8 d9 2d fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d3cd:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012d3d4:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d3d7:	e8 d6 ec fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d3dc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012d3df:	83 ec 08             	sub    $0x8,%esp
f012d3e2:	68 00 fc 0f 00       	push   $0xffc00
f012d3e7:	6a 00                	push   $0x0
f012d3e9:	e8 fc a0 fd ff       	call   f01074ea <krealloc>
f012d3ee:	83 c4 10             	add    $0x10,%esp
f012d3f1:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012d3f7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d3fd:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012d402:	77 17                	ja     f012d41b <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d404:	83 ec 04             	sub    $0x4,%esp
f012d407:	68 fc b7 13 f0       	push   $0xf013b7fc
f012d40c:	68 33 11 00 00       	push   $0x1133
f012d411:	68 56 a5 13 f0       	push   $0xf013a556
f012d416:	e8 8b 2d fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012d41b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d421:	89 c1                	mov    %eax,%ecx
f012d423:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012d42a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012d42d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d432:	89 45 80             	mov    %eax,-0x80(%ebp)
f012d435:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d438:	ba 00 00 00 00       	mov    $0x0,%edx
f012d43d:	f7 75 84             	divl   -0x7c(%ebp)
f012d440:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d443:	29 d0                	sub    %edx,%eax
f012d445:	89 c3                	mov    %eax,%ebx
f012d447:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012d44e:	10 00 00 
f012d451:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d456:	0f b6 d0             	movzbl %al,%edx
f012d459:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012d45f:	01 d0                	add    %edx,%eax
f012d461:	48                   	dec    %eax
f012d462:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012d468:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d46e:	ba 00 00 00 00       	mov    $0x0,%edx
f012d473:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012d479:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d47f:	29 d0                	sub    %edx,%eax
f012d481:	01 c3                	add    %eax,%ebx
f012d483:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012d48a:	10 00 00 
f012d48d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d492:	0f b6 c0             	movzbl %al,%eax
f012d495:	c1 e0 04             	shl    $0x4,%eax
f012d498:	89 c2                	mov    %eax,%edx
f012d49a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012d4a0:	01 d0                	add    %edx,%eax
f012d4a2:	48                   	dec    %eax
f012d4a3:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012d4a9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d4af:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4b4:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012d4ba:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d4c0:	29 d0                	sub    %edx,%eax
f012d4c2:	01 d8                	add    %ebx,%eax
f012d4c4:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012d4c9:	39 c1                	cmp    %eax,%ecx
f012d4cb:	74 17                	je     f012d4e4 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012d4cd:	83 ec 04             	sub    $0x4,%esp
f012d4d0:	68 38 b8 13 f0       	push   $0xf013b838
f012d4d5:	68 35 11 00 00       	push   $0x1135
f012d4da:	68 56 a5 13 f0       	push   $0xf013a556
f012d4df:	e8 c2 2c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d4e4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d4e7:	e8 c6 eb fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d4ec:	29 c3                	sub    %eax,%ebx
f012d4ee:	89 d8                	mov    %ebx,%eax
f012d4f0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d4f5:	74 17                	je     f012d50e <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012d4f7:	83 ec 04             	sub    $0x4,%esp
f012d4fa:	68 6a b8 13 f0       	push   $0xf013b86a
f012d4ff:	68 37 11 00 00       	push   $0x1137
f012d504:	68 56 a5 13 f0       	push   $0xf013a556
f012d509:	e8 98 2c fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d50e:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012d515:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d518:	e8 95 eb fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d51d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012d520:	83 ec 08             	sub    $0x8,%esp
f012d523:	68 00 fc 0f 00       	push   $0xffc00
f012d528:	6a 00                	push   $0x0
f012d52a:	e8 bb 9f fd ff       	call   f01074ea <krealloc>
f012d52f:	83 c4 10             	add    $0x10,%esp
f012d532:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012d538:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d53e:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012d543:	77 17                	ja     f012d55c <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d545:	83 ec 04             	sub    $0x4,%esp
f012d548:	68 fc b7 13 f0       	push   $0xf013b7fc
f012d54d:	68 3e 11 00 00       	push   $0x113e
f012d552:	68 56 a5 13 f0       	push   $0xf013a556
f012d557:	e8 4a 2c fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012d55c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d562:	89 c1                	mov    %eax,%ecx
f012d564:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012d56b:	10 00 00 
f012d56e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012d574:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d579:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012d57f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d585:	ba 00 00 00 00       	mov    $0x0,%edx
f012d58a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012d590:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d596:	29 d0                	sub    %edx,%eax
f012d598:	89 c3                	mov    %eax,%ebx
f012d59a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012d5a1:	10 00 00 
f012d5a4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d5a9:	0f b6 d0             	movzbl %al,%edx
f012d5ac:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012d5b2:	01 d0                	add    %edx,%eax
f012d5b4:	48                   	dec    %eax
f012d5b5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012d5bb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d5c1:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5c6:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012d5cc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d5d2:	29 d0                	sub    %edx,%eax
f012d5d4:	01 c3                	add    %eax,%ebx
f012d5d6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012d5dd:	10 00 00 
f012d5e0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d5e5:	0f b6 c0             	movzbl %al,%eax
f012d5e8:	c1 e0 04             	shl    $0x4,%eax
f012d5eb:	89 c2                	mov    %eax,%edx
f012d5ed:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012d5f3:	01 d0                	add    %edx,%eax
f012d5f5:	48                   	dec    %eax
f012d5f6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012d5fc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d602:	ba 00 00 00 00       	mov    $0x0,%edx
f012d607:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012d60d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d613:	29 d0                	sub    %edx,%eax
f012d615:	01 d8                	add    %ebx,%eax
f012d617:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012d61c:	39 c1                	cmp    %eax,%ecx
f012d61e:	74 17                	je     f012d637 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012d620:	83 ec 04             	sub    $0x4,%esp
f012d623:	68 38 b8 13 f0       	push   $0xf013b838
f012d628:	68 40 11 00 00       	push   $0x1140
f012d62d:	68 56 a5 13 f0       	push   $0xf013a556
f012d632:	e8 6f 2b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d637:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d63a:	e8 73 ea fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d63f:	29 c3                	sub    %eax,%ebx
f012d641:	89 d8                	mov    %ebx,%eax
f012d643:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d648:	74 17                	je     f012d661 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012d64a:	83 ec 04             	sub    $0x4,%esp
f012d64d:	68 6a b8 13 f0       	push   $0xf013b86a
f012d652:	68 42 11 00 00       	push   $0x1142
f012d657:	68 56 a5 13 f0       	push   $0xf013a556
f012d65c:	e8 45 2b fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d661:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012d668:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012d66b:	e8 42 ea fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d670:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012d673:	83 ec 08             	sub    $0x8,%esp
f012d676:	68 00 fc 1f 00       	push   $0x1ffc00
f012d67b:	6a 00                	push   $0x0
f012d67d:	e8 68 9e fd ff       	call   f01074ea <krealloc>
f012d682:	83 c4 10             	add    $0x10,%esp
f012d685:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012d68b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d691:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012d696:	77 17                	ja     f012d6af <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d698:	83 ec 04             	sub    $0x4,%esp
f012d69b:	68 fc b7 13 f0       	push   $0xf013b7fc
f012d6a0:	68 49 11 00 00       	push   $0x1149
f012d6a5:	68 56 a5 13 f0       	push   $0xf013a556
f012d6aa:	e8 f7 2a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012d6af:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d6b5:	89 c1                	mov    %eax,%ecx
f012d6b7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012d6be:	10 00 00 
f012d6c1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012d6c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d6cc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012d6d2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d6d8:	ba 00 00 00 00       	mov    $0x0,%edx
f012d6dd:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012d6e3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d6e9:	29 d0                	sub    %edx,%eax
f012d6eb:	89 c3                	mov    %eax,%ebx
f012d6ed:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012d6f4:	10 00 00 
f012d6f7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d6fc:	0f b6 d0             	movzbl %al,%edx
f012d6ff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012d705:	01 d0                	add    %edx,%eax
f012d707:	48                   	dec    %eax
f012d708:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012d70e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012d714:	ba 00 00 00 00       	mov    $0x0,%edx
f012d719:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012d71f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012d725:	29 d0                	sub    %edx,%eax
f012d727:	01 c3                	add    %eax,%ebx
f012d729:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012d730:	10 00 00 
f012d733:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d738:	0f b6 c0             	movzbl %al,%eax
f012d73b:	c1 e0 04             	shl    $0x4,%eax
f012d73e:	89 c2                	mov    %eax,%edx
f012d740:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012d746:	01 d0                	add    %edx,%eax
f012d748:	48                   	dec    %eax
f012d749:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012d74f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012d755:	ba 00 00 00 00       	mov    $0x0,%edx
f012d75a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012d760:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012d766:	29 d0                	sub    %edx,%eax
f012d768:	01 d8                	add    %ebx,%eax
f012d76a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012d76f:	39 c1                	cmp    %eax,%ecx
f012d771:	74 17                	je     f012d78a <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012d773:	83 ec 04             	sub    $0x4,%esp
f012d776:	68 38 b8 13 f0       	push   $0xf013b838
f012d77b:	68 4b 11 00 00       	push   $0x114b
f012d780:	68 56 a5 13 f0       	push   $0xf013a556
f012d785:	e8 1c 2a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012d78a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d78d:	e8 20 e9 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d792:	29 c3                	sub    %eax,%ebx
f012d794:	89 d8                	mov    %ebx,%eax
f012d796:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d79b:	74 17                	je     f012d7b4 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012d79d:	83 ec 04             	sub    $0x4,%esp
f012d7a0:	68 6a b8 13 f0       	push   $0xf013b86a
f012d7a5:	68 4d 11 00 00       	push   $0x114d
f012d7aa:	68 56 a5 13 f0       	push   $0xf013a556
f012d7af:	e8 f2 29 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012d7b4:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012d7bb:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012d7be:	e8 ef e8 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d7c3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012d7c6:	83 ec 08             	sub    $0x8,%esp
f012d7c9:	68 00 fc 1f 00       	push   $0x1ffc00
f012d7ce:	6a 00                	push   $0x0
f012d7d0:	e8 15 9d fd ff       	call   f01074ea <krealloc>
f012d7d5:	83 c4 10             	add    $0x10,%esp
f012d7d8:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012d7de:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d7e4:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012d7e9:	77 17                	ja     f012d802 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d7eb:	83 ec 04             	sub    $0x4,%esp
f012d7ee:	68 fc b7 13 f0       	push   $0xf013b7fc
f012d7f3:	68 54 11 00 00       	push   $0x1154
f012d7f8:	68 56 a5 13 f0       	push   $0xf013a556
f012d7fd:	e8 a4 29 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012d802:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d808:	89 c1                	mov    %eax,%ecx
f012d80a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012d811:	10 00 00 
f012d814:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012d81a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d81f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012d825:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012d82b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d830:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012d836:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012d83c:	29 d0                	sub    %edx,%eax
f012d83e:	89 c3                	mov    %eax,%ebx
f012d840:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012d847:	10 00 00 
f012d84a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d84f:	0f b6 d0             	movzbl %al,%edx
f012d852:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012d858:	01 d0                	add    %edx,%eax
f012d85a:	48                   	dec    %eax
f012d85b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012d861:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012d867:	ba 00 00 00 00       	mov    $0x0,%edx
f012d86c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012d872:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012d878:	29 d0                	sub    %edx,%eax
f012d87a:	01 c3                	add    %eax,%ebx
f012d87c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012d883:	10 00 00 
f012d886:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d88b:	0f b6 c0             	movzbl %al,%eax
f012d88e:	c1 e0 04             	shl    $0x4,%eax
f012d891:	89 c2                	mov    %eax,%edx
f012d893:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d899:	01 d0                	add    %edx,%eax
f012d89b:	48                   	dec    %eax
f012d89c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012d8a2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d8a8:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8ad:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012d8b3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d8b9:	29 d0                	sub    %edx,%eax
f012d8bb:	01 d8                	add    %ebx,%eax
f012d8bd:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012d8c2:	39 c1                	cmp    %eax,%ecx
f012d8c4:	74 17                	je     f012d8dd <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012d8c6:	83 ec 04             	sub    $0x4,%esp
f012d8c9:	68 38 b8 13 f0       	push   $0xf013b838
f012d8ce:	68 56 11 00 00       	push   $0x1156
f012d8d3:	68 56 a5 13 f0       	push   $0xf013a556
f012d8d8:	e8 c9 28 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012d8dd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d8e0:	e8 cd e7 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d8e5:	29 c3                	sub    %eax,%ebx
f012d8e7:	89 d8                	mov    %ebx,%eax
f012d8e9:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d8ee:	74 17                	je     f012d907 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012d8f0:	83 ec 04             	sub    $0x4,%esp
f012d8f3:	68 6a b8 13 f0       	push   $0xf013b86a
f012d8f8:	68 58 11 00 00       	push   $0x1158
f012d8fd:	68 56 a5 13 f0       	push   $0xf013a556
f012d902:	e8 9f 28 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012d907:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012d90e:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012d911:	e8 9c e7 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012d916:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012d919:	83 ec 08             	sub    $0x8,%esp
f012d91c:	68 00 fc 2f 00       	push   $0x2ffc00
f012d921:	6a 00                	push   $0x0
f012d923:	e8 c2 9b fd ff       	call   f01074ea <krealloc>
f012d928:	83 c4 10             	add    $0x10,%esp
f012d92b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012d931:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d937:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012d93c:	77 17                	ja     f012d955 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d93e:	83 ec 04             	sub    $0x4,%esp
f012d941:	68 fc b7 13 f0       	push   $0xf013b7fc
f012d946:	68 5f 11 00 00       	push   $0x115f
f012d94b:	68 56 a5 13 f0       	push   $0xf013a556
f012d950:	e8 51 28 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012d955:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d95b:	89 c1                	mov    %eax,%ecx
f012d95d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012d964:	10 00 00 
f012d967:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d96d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d972:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012d978:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d97e:	ba 00 00 00 00       	mov    $0x0,%edx
f012d983:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012d989:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d98f:	29 d0                	sub    %edx,%eax
f012d991:	89 c3                	mov    %eax,%ebx
f012d993:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012d99a:	10 00 00 
f012d99d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d9a2:	0f b6 d0             	movzbl %al,%edx
f012d9a5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012d9ab:	01 d0                	add    %edx,%eax
f012d9ad:	48                   	dec    %eax
f012d9ae:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012d9b4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d9ba:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9bf:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012d9c5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d9cb:	29 d0                	sub    %edx,%eax
f012d9cd:	01 c3                	add    %eax,%ebx
f012d9cf:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d9d6:	10 00 00 
f012d9d9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d9de:	0f b6 c0             	movzbl %al,%eax
f012d9e1:	c1 e0 04             	shl    $0x4,%eax
f012d9e4:	89 c2                	mov    %eax,%edx
f012d9e6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d9ec:	01 d0                	add    %edx,%eax
f012d9ee:	48                   	dec    %eax
f012d9ef:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d9f5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d9fb:	ba 00 00 00 00       	mov    $0x0,%edx
f012da00:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012da06:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012da0c:	29 d0                	sub    %edx,%eax
f012da0e:	01 d8                	add    %ebx,%eax
f012da10:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012da15:	39 c1                	cmp    %eax,%ecx
f012da17:	74 17                	je     f012da30 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012da19:	83 ec 04             	sub    $0x4,%esp
f012da1c:	68 38 b8 13 f0       	push   $0xf013b838
f012da21:	68 61 11 00 00       	push   $0x1161
f012da26:	68 56 a5 13 f0       	push   $0xf013a556
f012da2b:	e8 76 27 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012da30:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012da33:	e8 7a e6 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012da38:	29 c3                	sub    %eax,%ebx
f012da3a:	89 d8                	mov    %ebx,%eax
f012da3c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012da41:	74 17                	je     f012da5a <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012da43:	83 ec 04             	sub    $0x4,%esp
f012da46:	68 a0 a9 13 f0       	push   $0xf013a9a0
f012da4b:	68 63 11 00 00       	push   $0x1163
f012da50:	68 56 a5 13 f0       	push   $0xf013a556
f012da55:	e8 4c 27 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012da5a:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012da61:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012da64:	e8 49 e6 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012da69:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012da6c:	83 ec 08             	sub    $0x8,%esp
f012da6f:	68 00 fc 2f 00       	push   $0x2ffc00
f012da74:	6a 00                	push   $0x0
f012da76:	e8 6f 9a fd ff       	call   f01074ea <krealloc>
f012da7b:	83 c4 10             	add    $0x10,%esp
f012da7e:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012da84:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012da8a:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012da8f:	77 17                	ja     f012daa8 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da91:	83 ec 04             	sub    $0x4,%esp
f012da94:	68 fc b7 13 f0       	push   $0xf013b7fc
f012da99:	68 6a 11 00 00       	push   $0x116a
f012da9e:	68 56 a5 13 f0       	push   $0xf013a556
f012daa3:	e8 fe 26 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012daa8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012daae:	89 c1                	mov    %eax,%ecx
f012dab0:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012dab7:	10 00 00 
f012daba:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012dac0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dac5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012dacb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012dad1:	ba 00 00 00 00       	mov    $0x0,%edx
f012dad6:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012dadc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012dae2:	29 d0                	sub    %edx,%eax
f012dae4:	89 c3                	mov    %eax,%ebx
f012dae6:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012daed:	10 00 00 
f012daf0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012daf5:	0f b6 d0             	movzbl %al,%edx
f012daf8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012dafe:	01 d0                	add    %edx,%eax
f012db00:	48                   	dec    %eax
f012db01:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012db07:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012db0d:	ba 00 00 00 00       	mov    $0x0,%edx
f012db12:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012db18:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012db1e:	29 d0                	sub    %edx,%eax
f012db20:	01 c3                	add    %eax,%ebx
f012db22:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012db29:	10 00 00 
f012db2c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012db31:	0f b6 c0             	movzbl %al,%eax
f012db34:	c1 e0 04             	shl    $0x4,%eax
f012db37:	89 c2                	mov    %eax,%edx
f012db39:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012db3f:	01 d0                	add    %edx,%eax
f012db41:	48                   	dec    %eax
f012db42:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012db48:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012db4e:	ba 00 00 00 00       	mov    $0x0,%edx
f012db53:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012db59:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012db5f:	29 d0                	sub    %edx,%eax
f012db61:	01 d8                	add    %ebx,%eax
f012db63:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012db68:	39 c1                	cmp    %eax,%ecx
f012db6a:	74 17                	je     f012db83 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012db6c:	83 ec 04             	sub    $0x4,%esp
f012db6f:	68 38 b8 13 f0       	push   $0xf013b838
f012db74:	68 6c 11 00 00       	push   $0x116c
f012db79:	68 56 a5 13 f0       	push   $0xf013a556
f012db7e:	e8 23 26 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012db83:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012db86:	e8 27 e5 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012db8b:	29 c3                	sub    %eax,%ebx
f012db8d:	89 d8                	mov    %ebx,%eax
f012db8f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012db94:	74 17                	je     f012dbad <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012db96:	83 ec 04             	sub    $0x4,%esp
f012db99:	68 6a b8 13 f0       	push   $0xf013b86a
f012db9e:	68 6e 11 00 00       	push   $0x116e
f012dba3:	68 56 a5 13 f0       	push   $0xf013a556
f012dba8:	e8 f9 25 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012dbad:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012dbb4:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012dbb7:	e8 f6 e4 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012dbbc:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012dbbf:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012dbc6:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012dbc9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012dbcf:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012dbd5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012dbdb:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012dbde:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012dbe0:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012dbe6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012dbec:	01 c2                	add    %eax,%edx
f012dbee:	8a 45 ce             	mov    -0x32(%ebp),%al
f012dbf1:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012dbf3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012dbf9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012dbff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012dc06:	eb 11                	jmp    f012dc19 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012dc08:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012dc0b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012dc11:	01 d0                	add    %edx,%eax
f012dc13:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012dc16:	ff 45 f4             	incl   -0xc(%ebp)
f012dc19:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012dc1f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc22:	7d e4                	jge    f012dc08 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012dc24:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012dc2a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012dc30:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dc36:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012dc3c:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012dc42:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dc49:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dc4f:	01 d0                	add    %edx,%eax
f012dc51:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012dc57:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012dc5d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012dc63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012dc6a:	eb 1b                	jmp    f012dc87 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012dc6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dc76:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dc7c:	01 d0                	add    %edx,%eax
f012dc7e:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012dc84:	ff 45 f0             	incl   -0x10(%ebp)
f012dc87:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012dc8d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012dc90:	7d da                	jge    f012dc6c <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012dc92:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dc98:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012dc9e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012dca5:	eb 17                	jmp    f012dcbe <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012dca7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012dcaa:	01 c0                	add    %eax,%eax
f012dcac:	89 c2                	mov    %eax,%edx
f012dcae:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dcb4:	01 d0                	add    %edx,%eax
f012dcb6:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012dcbb:	ff 45 ec             	incl   -0x14(%ebp)
f012dcbe:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012dcc4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012dcc7:	7d de                	jge    f012dca7 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012dcc9:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012dccf:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012dcd5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dcdb:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012dce0:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012dce6:	01 c0                	add    %eax,%eax
f012dce8:	89 c2                	mov    %eax,%edx
f012dcea:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dcf0:	01 d0                	add    %edx,%eax
f012dcf2:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012dcf7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dcfd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012dd03:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012dd0a:	eb 49                	jmp    f012dd55 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012dd0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd0f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd16:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd1c:	01 d0                	add    %edx,%eax
f012dd1e:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012dd21:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd24:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd2b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd31:	01 d0                	add    %edx,%eax
f012dd33:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012dd39:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd3c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd43:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd49:	01 d0                	add    %edx,%eax
f012dd4b:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012dd52:	ff 45 e8             	incl   -0x18(%ebp)
f012dd55:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dd5b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012dd5e:	7d ac                	jge    f012dd0c <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012dd60:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dd66:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012dd6c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd72:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012dd75:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd7b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012dd81:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd87:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012dd8e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dd94:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd9b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dda1:	01 d0                	add    %edx,%eax
f012dda3:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012dda6:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ddac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ddb3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ddb9:	01 d0                	add    %edx,%eax
f012ddbb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ddc1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ddc7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ddce:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ddd4:	01 d0                	add    %edx,%eax
f012ddd6:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012dddd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012dde3:	8a 00                	mov    (%eax),%al
f012dde5:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012dde8:	75 17                	jne    f012de01 <test_krealloc_BF+0xd04>
f012ddea:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012ddf0:	89 c2                	mov    %eax,%edx
f012ddf2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ddf8:	01 d0                	add    %edx,%eax
f012ddfa:	8a 00                	mov    (%eax),%al
f012ddfc:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ddff:	74 17                	je     f012de18 <test_krealloc_BF+0xd1b>
			panic(
f012de01:	83 ec 04             	sub    $0x4,%esp
f012de04:	68 88 b8 13 f0       	push   $0xf013b888
f012de09:	68 b1 11 00 00       	push   $0x11b1
f012de0e:	68 56 a5 13 f0       	push   $0xf013a556
f012de13:	e8 8e 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012de18:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012de1e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012de24:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012de2a:	8a 00                	mov    (%eax),%al
f012de2c:	3c 02                	cmp    $0x2,%al
f012de2e:	75 16                	jne    f012de46 <test_krealloc_BF+0xd49>
f012de30:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012de36:	89 c2                	mov    %eax,%edx
f012de38:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012de3e:	01 d0                	add    %edx,%eax
f012de40:	8a 00                	mov    (%eax),%al
f012de42:	3c 02                	cmp    $0x2,%al
f012de44:	74 20                	je     f012de66 <test_krealloc_BF+0xd69>
			panic(
f012de46:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012de4c:	8a 00                	mov    (%eax),%al
f012de4e:	0f be c0             	movsbl %al,%eax
f012de51:	50                   	push   %eax
f012de52:	68 c8 b8 13 f0       	push   $0xf013b8c8
f012de57:	68 b7 11 00 00       	push   $0x11b7
f012de5c:	68 56 a5 13 f0       	push   $0xf013a556
f012de61:	e8 40 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012de66:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012de6c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012de72:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012de78:	8b 00                	mov    (%eax),%eax
f012de7a:	83 f8 03             	cmp    $0x3,%eax
f012de7d:	75 1c                	jne    f012de9b <test_krealloc_BF+0xd9e>
f012de7f:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012de85:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012de8c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012de92:	01 d0                	add    %edx,%eax
f012de94:	8b 00                	mov    (%eax),%eax
f012de96:	83 f8 03             	cmp    $0x3,%eax
f012de99:	74 17                	je     f012deb2 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012de9b:	83 ec 04             	sub    $0x4,%esp
f012de9e:	68 14 b9 13 f0       	push   $0xf013b914
f012dea3:	68 bb 11 00 00       	push   $0x11bb
f012dea8:	68 56 a5 13 f0       	push   $0xf013a556
f012dead:	e8 f4 22 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012deb2:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012deb8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012debe:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dec4:	8b 00                	mov    (%eax),%eax
f012dec6:	83 f8 04             	cmp    $0x4,%eax
f012dec9:	75 1c                	jne    f012dee7 <test_krealloc_BF+0xdea>
f012decb:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ded1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ded8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dede:	01 d0                	add    %edx,%eax
f012dee0:	8b 00                	mov    (%eax),%eax
f012dee2:	83 f8 04             	cmp    $0x4,%eax
f012dee5:	74 17                	je     f012defe <test_krealloc_BF+0xe01>
			panic(
f012dee7:	83 ec 04             	sub    $0x4,%esp
f012deea:	68 88 b8 13 f0       	push   $0xf013b888
f012deef:	68 c0 11 00 00       	push   $0x11c0
f012def4:	68 56 a5 13 f0       	push   $0xf013a556
f012def9:	e8 a8 22 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012defe:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012df04:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012df0a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012df10:	66 8b 00             	mov    (%eax),%ax
f012df13:	66 83 f8 05          	cmp    $0x5,%ax
f012df17:	75 1b                	jne    f012df34 <test_krealloc_BF+0xe37>
f012df19:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012df1f:	01 c0                	add    %eax,%eax
f012df21:	89 c2                	mov    %eax,%edx
f012df23:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012df29:	01 d0                	add    %edx,%eax
f012df2b:	66 8b 00             	mov    (%eax),%ax
f012df2e:	66 83 f8 05          	cmp    $0x5,%ax
f012df32:	74 17                	je     f012df4b <test_krealloc_BF+0xe4e>
			panic(
f012df34:	83 ec 04             	sub    $0x4,%esp
f012df37:	68 88 b8 13 f0       	push   $0xf013b888
f012df3c:	68 c5 11 00 00       	push   $0x11c5
f012df41:	68 56 a5 13 f0       	push   $0xf013a556
f012df46:	e8 5b 22 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012df4b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012df51:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012df57:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012df5d:	66 8b 00             	mov    (%eax),%ax
f012df60:	66 83 f8 06          	cmp    $0x6,%ax
f012df64:	75 1b                	jne    f012df81 <test_krealloc_BF+0xe84>
f012df66:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012df6c:	01 c0                	add    %eax,%eax
f012df6e:	89 c2                	mov    %eax,%edx
f012df70:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012df76:	01 d0                	add    %edx,%eax
f012df78:	66 8b 00             	mov    (%eax),%ax
f012df7b:	66 83 f8 06          	cmp    $0x6,%ax
f012df7f:	74 17                	je     f012df98 <test_krealloc_BF+0xe9b>
			panic(
f012df81:	83 ec 04             	sub    $0x4,%esp
f012df84:	68 88 b8 13 f0       	push   $0xf013b888
f012df89:	68 ca 11 00 00       	push   $0x11ca
f012df8e:	68 56 a5 13 f0       	push   $0xf013a556
f012df93:	e8 0e 22 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012df98:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012df9e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012dfa4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dfaa:	8a 00                	mov    (%eax),%al
f012dfac:	3c 07                	cmp    $0x7,%al
f012dfae:	75 1b                	jne    f012dfcb <test_krealloc_BF+0xece>
f012dfb0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dfb6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dfbd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dfc3:	01 d0                	add    %edx,%eax
f012dfc5:	8a 00                	mov    (%eax),%al
f012dfc7:	3c 07                	cmp    $0x7,%al
f012dfc9:	74 17                	je     f012dfe2 <test_krealloc_BF+0xee5>
			panic(
f012dfcb:	83 ec 04             	sub    $0x4,%esp
f012dfce:	68 88 b8 13 f0       	push   $0xf013b888
f012dfd3:	68 cf 11 00 00       	push   $0x11cf
f012dfd8:	68 56 a5 13 f0       	push   $0xf013a556
f012dfdd:	e8 c4 21 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012dfe2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dfe8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dfec:	66 83 f8 07          	cmp    $0x7,%ax
f012dff0:	75 1f                	jne    f012e011 <test_krealloc_BF+0xf14>
f012dff2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dff8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dfff:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e005:	01 d0                	add    %edx,%eax
f012e007:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e00b:	66 83 f8 07          	cmp    $0x7,%ax
f012e00f:	74 17                	je     f012e028 <test_krealloc_BF+0xf2b>
			panic(
f012e011:	83 ec 04             	sub    $0x4,%esp
f012e014:	68 88 b8 13 f0       	push   $0xf013b888
f012e019:	68 d2 11 00 00       	push   $0x11d2
f012e01e:	68 56 a5 13 f0       	push   $0xf013a556
f012e023:	e8 7e 21 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012e028:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e02e:	8b 40 04             	mov    0x4(%eax),%eax
f012e031:	83 f8 07             	cmp    $0x7,%eax
f012e034:	75 1d                	jne    f012e053 <test_krealloc_BF+0xf56>
f012e036:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e03c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e043:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e049:	01 d0                	add    %edx,%eax
f012e04b:	8b 40 04             	mov    0x4(%eax),%eax
f012e04e:	83 f8 07             	cmp    $0x7,%eax
f012e051:	74 17                	je     f012e06a <test_krealloc_BF+0xf6d>
			panic(
f012e053:	83 ec 04             	sub    $0x4,%esp
f012e056:	68 88 b8 13 f0       	push   $0xf013b888
f012e05b:	68 d5 11 00 00       	push   $0x11d5
f012e060:	68 56 a5 13 f0       	push   $0xf013a556
f012e065:	e8 3c 21 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012e06a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e070:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012e076:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e07c:	8a 00                	mov    (%eax),%al
f012e07e:	3c 08                	cmp    $0x8,%al
f012e080:	75 1b                	jne    f012e09d <test_krealloc_BF+0xfa0>
f012e082:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e088:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e08f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e095:	01 d0                	add    %edx,%eax
f012e097:	8a 00                	mov    (%eax),%al
f012e099:	3c 08                	cmp    $0x8,%al
f012e09b:	74 17                	je     f012e0b4 <test_krealloc_BF+0xfb7>
			panic(
f012e09d:	83 ec 04             	sub    $0x4,%esp
f012e0a0:	68 88 b8 13 f0       	push   $0xf013b888
f012e0a5:	68 da 11 00 00       	push   $0x11da
f012e0aa:	68 56 a5 13 f0       	push   $0xf013a556
f012e0af:	e8 f2 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012e0b4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0ba:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e0be:	66 83 f8 08          	cmp    $0x8,%ax
f012e0c2:	75 1f                	jne    f012e0e3 <test_krealloc_BF+0xfe6>
f012e0c4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e0ca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e0d1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0d7:	01 d0                	add    %edx,%eax
f012e0d9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e0dd:	66 83 f8 08          	cmp    $0x8,%ax
f012e0e1:	74 17                	je     f012e0fa <test_krealloc_BF+0xffd>
			panic(
f012e0e3:	83 ec 04             	sub    $0x4,%esp
f012e0e6:	68 88 b8 13 f0       	push   $0xf013b888
f012e0eb:	68 dd 11 00 00       	push   $0x11dd
f012e0f0:	68 56 a5 13 f0       	push   $0xf013a556
f012e0f5:	e8 ac 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012e0fa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e100:	8b 40 04             	mov    0x4(%eax),%eax
f012e103:	83 f8 08             	cmp    $0x8,%eax
f012e106:	75 1d                	jne    f012e125 <test_krealloc_BF+0x1028>
f012e108:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e10e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e115:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e11b:	01 d0                	add    %edx,%eax
f012e11d:	8b 40 04             	mov    0x4(%eax),%eax
f012e120:	83 f8 08             	cmp    $0x8,%eax
f012e123:	74 17                	je     f012e13c <test_krealloc_BF+0x103f>
			panic(
f012e125:	83 ec 04             	sub    $0x4,%esp
f012e128:	68 88 b8 13 f0       	push   $0xf013b888
f012e12d:	68 e0 11 00 00       	push   $0x11e0
f012e132:	68 56 a5 13 f0       	push   $0xf013a556
f012e137:	e8 6a 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012e13c:	e8 71 df fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e141:	89 c2                	mov    %eax,%edx
f012e143:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e146:	39 c2                	cmp    %eax,%edx
f012e148:	74 17                	je     f012e161 <test_krealloc_BF+0x1064>
			panic(
f012e14a:	83 ec 04             	sub    $0x4,%esp
f012e14d:	68 48 b9 13 f0       	push   $0xf013b948
f012e152:	68 e4 11 00 00       	push   $0x11e4
f012e157:	68 56 a5 13 f0       	push   $0xf013a556
f012e15c:	e8 45 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012e161:	83 ec 0c             	sub    $0xc,%esp
f012e164:	68 94 b9 13 f0       	push   $0xf013b994
f012e169:	e8 bf 2a fd ff       	call   f0100c2d <cprintf>
f012e16e:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012e171:	e8 3c df fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e176:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e179:	e8 0e 5b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e17e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012e184:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e18a:	83 ec 08             	sub    $0x8,%esp
f012e18d:	6a 00                	push   $0x0
f012e18f:	50                   	push   %eax
f012e190:	e8 55 93 fd ff       	call   f01074ea <krealloc>
f012e195:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e198:	e8 ef 5a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e19d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e1a3:	74 17                	je     f012e1bc <test_krealloc_BF+0x10bf>
			panic(
f012e1a5:	83 ec 04             	sub    $0x4,%esp
f012e1a8:	68 b8 b9 13 f0       	push   $0xf013b9b8
f012e1ad:	68 f1 11 00 00       	push   $0x11f1
f012e1b2:	68 56 a5 13 f0       	push   $0xf013a556
f012e1b7:	e8 ea 1f fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e1bc:	e8 f1 de fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e1c1:	89 c2                	mov    %eax,%edx
f012e1c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e1c6:	29 c2                	sub    %eax,%edx
f012e1c8:	89 d0                	mov    %edx,%eax
f012e1ca:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e1cf:	74 17                	je     f012e1e8 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012e1d1:	83 ec 04             	sub    $0x4,%esp
f012e1d4:	68 2c ba 13 f0       	push   $0xf013ba2c
f012e1d9:	68 f3 11 00 00       	push   $0x11f3
f012e1de:	68 56 a5 13 f0       	push   $0xf013a556
f012e1e3:	e8 be 1f fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012e1e8:	e8 c5 de fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e1ed:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e1f0:	e8 97 5a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e1f5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012e1fb:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e201:	83 ec 08             	sub    $0x8,%esp
f012e204:	6a 00                	push   $0x0
f012e206:	50                   	push   %eax
f012e207:	e8 de 92 fd ff       	call   f01074ea <krealloc>
f012e20c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e20f:	e8 78 5a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e214:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e21a:	74 17                	je     f012e233 <test_krealloc_BF+0x1136>
			panic(
f012e21c:	83 ec 04             	sub    $0x4,%esp
f012e21f:	68 b8 b9 13 f0       	push   $0xf013b9b8
f012e224:	68 fc 11 00 00       	push   $0x11fc
f012e229:	68 56 a5 13 f0       	push   $0xf013a556
f012e22e:	e8 73 1f fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e233:	e8 7a de fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e238:	89 c2                	mov    %eax,%edx
f012e23a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e23d:	29 c2                	sub    %eax,%edx
f012e23f:	89 d0                	mov    %edx,%eax
f012e241:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e246:	74 17                	je     f012e25f <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012e248:	83 ec 04             	sub    $0x4,%esp
f012e24b:	68 2c ba 13 f0       	push   $0xf013ba2c
f012e250:	68 fe 11 00 00       	push   $0x11fe
f012e255:	68 56 a5 13 f0       	push   $0xf013a556
f012e25a:	e8 47 1f fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012e25f:	e8 4e de fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e264:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e267:	e8 20 5a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e26c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012e272:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e278:	83 ec 08             	sub    $0x8,%esp
f012e27b:	6a 00                	push   $0x0
f012e27d:	50                   	push   %eax
f012e27e:	e8 67 92 fd ff       	call   f01074ea <krealloc>
f012e283:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e286:	e8 01 5a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e28b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e291:	74 17                	je     f012e2aa <test_krealloc_BF+0x11ad>
			panic(
f012e293:	83 ec 04             	sub    $0x4,%esp
f012e296:	68 70 a5 13 f0       	push   $0xf013a570
f012e29b:	68 06 12 00 00       	push   $0x1206
f012e2a0:	68 56 a5 13 f0       	push   $0xf013a556
f012e2a5:	e8 fc 1e fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012e2aa:	e8 03 de fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e2af:	89 c2                	mov    %eax,%edx
f012e2b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e2b4:	29 c2                	sub    %eax,%edx
f012e2b6:	89 d0                	mov    %edx,%eax
f012e2b8:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e2bd:	74 17                	je     f012e2d6 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012e2bf:	83 ec 04             	sub    $0x4,%esp
f012e2c2:	68 2c ba 13 f0       	push   $0xf013ba2c
f012e2c7:	68 08 12 00 00       	push   $0x1208
f012e2cc:	68 56 a5 13 f0       	push   $0xf013a556
f012e2d1:	e8 d0 1e fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012e2d6:	e8 d7 dd fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e2db:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e2de:	e8 a9 59 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e2e3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012e2e9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e2ef:	83 ec 08             	sub    $0x8,%esp
f012e2f2:	6a 00                	push   $0x0
f012e2f4:	50                   	push   %eax
f012e2f5:	e8 f0 91 fd ff       	call   f01074ea <krealloc>
f012e2fa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e2fd:	e8 8a 59 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012e302:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e308:	74 17                	je     f012e321 <test_krealloc_BF+0x1224>
			panic(
f012e30a:	83 ec 04             	sub    $0x4,%esp
f012e30d:	68 b8 b9 13 f0       	push   $0xf013b9b8
f012e312:	68 10 12 00 00       	push   $0x1210
f012e317:	68 56 a5 13 f0       	push   $0xf013a556
f012e31c:	e8 85 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012e321:	e8 8c dd fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e326:	89 c2                	mov    %eax,%edx
f012e328:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e32b:	29 c2                	sub    %eax,%edx
f012e32d:	89 d0                	mov    %edx,%eax
f012e32f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e334:	74 17                	je     f012e34d <test_krealloc_BF+0x1250>
			panic(
f012e336:	83 ec 04             	sub    $0x4,%esp
f012e339:	68 60 ba 13 f0       	push   $0xf013ba60
f012e33e:	68 13 12 00 00       	push   $0x1213
f012e343:	68 56 a5 13 f0       	push   $0xf013a556
f012e348:	e8 59 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e34d:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012e354:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012e35b:	eb 48                	jmp    f012e3a5 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e35d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e360:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012e365:	83 ec 04             	sub    $0x4,%esp
f012e368:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012e36e:	51                   	push   %ecx
f012e36f:	52                   	push   %edx
f012e370:	50                   	push   %eax
f012e371:	e8 f3 85 fd ff       	call   f0106969 <get_page_table>
f012e376:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e379:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012e37f:	85 c0                	test   %eax,%eax
f012e381:	75 17                	jne    f012e39a <test_krealloc_BF+0x129d>
					panic(
f012e383:	83 ec 04             	sub    $0x4,%esp
f012e386:	68 58 ae 13 f0       	push   $0xf013ae58
f012e38b:	68 1f 12 00 00       	push   $0x121f
f012e390:	68 56 a5 13 f0       	push   $0xf013a556
f012e395:	e8 0c 1e fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e39a:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012e3a1:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012e3a5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e3a9:	78 b2                	js     f012e35d <test_krealloc_BF+0x1260>
f012e3ab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e3af:	7f 09                	jg     f012e3ba <test_krealloc_BF+0x12bd>
f012e3b1:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012e3b8:	76 a3                	jbe    f012e35d <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012e3ba:	83 ec 0c             	sub    $0xc,%esp
f012e3bd:	68 9f ba 13 f0       	push   $0xf013ba9f
f012e3c2:	e8 66 28 fd ff       	call   f0100c2d <cprintf>
f012e3c7:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012e3ca:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e3d0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e3d6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e3dd:	eb 21                	jmp    f012e400 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012e3df:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012e3e5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012e3e8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e3ee:	01 c8                	add    %ecx,%eax
f012e3f0:	8a 00                	mov    (%eax),%al
f012e3f2:	0f be c0             	movsbl %al,%eax
f012e3f5:	01 d0                	add    %edx,%eax
f012e3f7:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e3fd:	ff 45 dc             	incl   -0x24(%ebp)
f012e400:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e406:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e409:	7d d4                	jge    f012e3df <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e40b:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012e411:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012e417:	42                   	inc    %edx
f012e418:	01 d2                	add    %edx,%edx
f012e41a:	39 d0                	cmp    %edx,%eax
f012e41c:	74 17                	je     f012e435 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012e41e:	83 ec 04             	sub    $0x4,%esp
f012e421:	68 a8 ba 13 f0       	push   $0xf013baa8
f012e426:	68 31 12 00 00       	push   $0x1231
f012e42b:	68 56 a5 13 f0       	push   $0xf013a556
f012e430:	e8 71 1d fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012e435:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e43b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e441:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e448:	eb 25                	jmp    f012e46f <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012e44a:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012e450:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e453:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012e45a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e460:	01 c8                	add    %ecx,%eax
f012e462:	8b 00                	mov    (%eax),%eax
f012e464:	01 d0                	add    %edx,%eax
f012e466:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e46c:	ff 45 dc             	incl   -0x24(%ebp)
f012e46f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e475:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e478:	7d d0                	jge    f012e44a <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012e47a:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012e480:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012e486:	42                   	inc    %edx
f012e487:	c1 e2 02             	shl    $0x2,%edx
f012e48a:	39 d0                	cmp    %edx,%eax
f012e48c:	74 17                	je     f012e4a5 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012e48e:	83 ec 04             	sub    $0x4,%esp
f012e491:	68 a8 ba 13 f0       	push   $0xf013baa8
f012e496:	68 3b 12 00 00       	push   $0x123b
f012e49b:	68 56 a5 13 f0       	push   $0xf013a556
f012e4a0:	e8 01 1d fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012e4a5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e4ab:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e4b1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e4b8:	eb 24                	jmp    f012e4de <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012e4ba:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e4c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e4c3:	01 c0                	add    %eax,%eax
f012e4c5:	89 c1                	mov    %eax,%ecx
f012e4c7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e4cd:	01 c8                	add    %ecx,%eax
f012e4cf:	66 8b 00             	mov    (%eax),%ax
f012e4d2:	98                   	cwtl   
f012e4d3:	01 d0                	add    %edx,%eax
f012e4d5:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e4db:	ff 45 dc             	incl   -0x24(%ebp)
f012e4de:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e4e4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e4e7:	7d d1                	jge    f012e4ba <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012e4e9:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e4ef:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e4f5:	8d 48 01             	lea    0x1(%eax),%ecx
f012e4f8:	89 c8                	mov    %ecx,%eax
f012e4fa:	c1 e0 02             	shl    $0x2,%eax
f012e4fd:	01 c8                	add    %ecx,%eax
f012e4ff:	39 c2                	cmp    %eax,%edx
f012e501:	74 17                	je     f012e51a <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012e503:	83 ec 04             	sub    $0x4,%esp
f012e506:	68 a8 ba 13 f0       	push   $0xf013baa8
f012e50b:	68 45 12 00 00       	push   $0x1245
f012e510:	68 56 a5 13 f0       	push   $0xf013a556
f012e515:	e8 8c 1c fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e51a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e520:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e526:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e52d:	eb 70                	jmp    f012e59f <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012e52f:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012e535:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e538:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e53f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e545:	01 c8                	add    %ecx,%eax
f012e547:	8a 00                	mov    (%eax),%al
f012e549:	0f be c0             	movsbl %al,%eax
f012e54c:	01 d0                	add    %edx,%eax
f012e54e:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012e554:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012e55a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e55d:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e564:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e56a:	01 c8                	add    %ecx,%eax
f012e56c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e570:	98                   	cwtl   
f012e571:	01 d0                	add    %edx,%eax
f012e573:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012e579:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012e57f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e582:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e589:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e58f:	01 c8                	add    %ecx,%eax
f012e591:	8b 40 04             	mov    0x4(%eax),%eax
f012e594:	01 d0                	add    %edx,%eax
f012e596:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e59c:	ff 45 dc             	incl   -0x24(%ebp)
f012e59f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5a5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e5a8:	7d 85                	jge    f012e52f <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012e5aa:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012e5b0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5b6:	8d 50 01             	lea    0x1(%eax),%edx
f012e5b9:	89 d0                	mov    %edx,%eax
f012e5bb:	01 c0                	add    %eax,%eax
f012e5bd:	01 d0                	add    %edx,%eax
f012e5bf:	01 c0                	add    %eax,%eax
f012e5c1:	01 d0                	add    %edx,%eax
f012e5c3:	39 c1                	cmp    %eax,%ecx
f012e5c5:	75 3a                	jne    f012e601 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012e5c7:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012e5cd:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5d3:	8d 50 01             	lea    0x1(%eax),%edx
f012e5d6:	89 d0                	mov    %edx,%eax
f012e5d8:	01 c0                	add    %eax,%eax
f012e5da:	01 d0                	add    %edx,%eax
f012e5dc:	01 c0                	add    %eax,%eax
f012e5de:	01 d0                	add    %edx,%eax
f012e5e0:	39 c1                	cmp    %eax,%ecx
f012e5e2:	75 1d                	jne    f012e601 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012e5e4:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012e5ea:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5f0:	8d 50 01             	lea    0x1(%eax),%edx
f012e5f3:	89 d0                	mov    %edx,%eax
f012e5f5:	01 c0                	add    %eax,%eax
f012e5f7:	01 d0                	add    %edx,%eax
f012e5f9:	01 c0                	add    %eax,%eax
f012e5fb:	01 d0                	add    %edx,%eax
f012e5fd:	39 c1                	cmp    %eax,%ecx
f012e5ff:	74 17                	je     f012e618 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012e601:	83 ec 04             	sub    $0x4,%esp
f012e604:	68 a8 ba 13 f0       	push   $0xf013baa8
f012e609:	68 53 12 00 00       	push   $0x1253
f012e60e:	68 56 a5 13 f0       	push   $0xf013a556
f012e613:	e8 8e 1b fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012e618:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012e61f:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e622:	e8 8b da fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e627:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012e62a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e630:	83 ec 08             	sub    $0x8,%esp
f012e633:	68 00 3c 00 00       	push   $0x3c00
f012e638:	50                   	push   %eax
f012e639:	e8 ac 8e fd ff       	call   f01074ea <krealloc>
f012e63e:	83 c4 10             	add    $0x10,%esp
f012e641:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e647:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e64d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e652:	77 17                	ja     f012e66b <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e654:	83 ec 04             	sub    $0x4,%esp
f012e657:	68 fc b7 13 f0       	push   $0xf013b7fc
f012e65c:	68 5f 12 00 00       	push   $0x125f
f012e661:	68 56 a5 13 f0       	push   $0xf013a556
f012e666:	e8 3b 1b fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e66b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e671:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e677:	74 17                	je     f012e690 <test_krealloc_BF+0x1593>
			panic(
f012e679:	83 ec 04             	sub    $0x4,%esp
f012e67c:	68 e0 ba 13 f0       	push   $0xf013bae0
f012e681:	68 62 12 00 00       	push   $0x1262
f012e686:	68 56 a5 13 f0       	push   $0xf013a556
f012e68b:	e8 16 1b fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e690:	e8 1d da fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e695:	89 c2                	mov    %eax,%edx
f012e697:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e69a:	39 c2                	cmp    %eax,%edx
f012e69c:	74 17                	je     f012e6b5 <test_krealloc_BF+0x15b8>
			panic(
f012e69e:	83 ec 04             	sub    $0x4,%esp
f012e6a1:	68 4c bb 13 f0       	push   $0xf013bb4c
f012e6a6:	68 65 12 00 00       	push   $0x1265
f012e6ab:	68 56 a5 13 f0       	push   $0xf013a556
f012e6b0:	e8 f1 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e6b5:	e8 f8 d9 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e6ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012e6bd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e6c3:	83 ec 08             	sub    $0x8,%esp
f012e6c6:	68 00 fc 0f 00       	push   $0xffc00
f012e6cb:	50                   	push   %eax
f012e6cc:	e8 19 8e fd ff       	call   f01074ea <krealloc>
f012e6d1:	83 c4 10             	add    $0x10,%esp
f012e6d4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e6da:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e6e0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e6e5:	77 17                	ja     f012e6fe <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e6e7:	83 ec 04             	sub    $0x4,%esp
f012e6ea:	68 fc b7 13 f0       	push   $0xf013b7fc
f012e6ef:	68 6b 12 00 00       	push   $0x126b
f012e6f4:	68 56 a5 13 f0       	push   $0xf013a556
f012e6f9:	e8 a8 1a fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012e6fe:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e704:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e70a:	74 17                	je     f012e723 <test_krealloc_BF+0x1626>
			panic(
f012e70c:	83 ec 04             	sub    $0x4,%esp
f012e70f:	68 e0 ba 13 f0       	push   $0xf013bae0
f012e714:	68 6e 12 00 00       	push   $0x126e
f012e719:	68 56 a5 13 f0       	push   $0xf013a556
f012e71e:	e8 83 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e723:	e8 8a d9 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e728:	89 c2                	mov    %eax,%edx
f012e72a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e72d:	39 c2                	cmp    %eax,%edx
f012e72f:	74 17                	je     f012e748 <test_krealloc_BF+0x164b>
			panic(
f012e731:	83 ec 04             	sub    $0x4,%esp
f012e734:	68 4c bb 13 f0       	push   $0xf013bb4c
f012e739:	68 71 12 00 00       	push   $0x1271
f012e73e:	68 56 a5 13 f0       	push   $0xf013a556
f012e743:	e8 5e 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012e748:	e8 65 d9 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e74d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012e750:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e756:	83 ec 08             	sub    $0x8,%esp
f012e759:	68 00 fc 0f 00       	push   $0xffc00
f012e75e:	50                   	push   %eax
f012e75f:	e8 86 8d fd ff       	call   f01074ea <krealloc>
f012e764:	83 c4 10             	add    $0x10,%esp
f012e767:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e76d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e773:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e778:	77 17                	ja     f012e791 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e77a:	83 ec 04             	sub    $0x4,%esp
f012e77d:	68 fc b7 13 f0       	push   $0xf013b7fc
f012e782:	68 77 12 00 00       	push   $0x1277
f012e787:	68 56 a5 13 f0       	push   $0xf013a556
f012e78c:	e8 15 1a fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e791:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e797:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e79d:	74 17                	je     f012e7b6 <test_krealloc_BF+0x16b9>
			panic(
f012e79f:	83 ec 04             	sub    $0x4,%esp
f012e7a2:	68 e0 ba 13 f0       	push   $0xf013bae0
f012e7a7:	68 7a 12 00 00       	push   $0x127a
f012e7ac:	68 56 a5 13 f0       	push   $0xf013a556
f012e7b1:	e8 f0 19 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e7b6:	e8 f7 d8 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e7bb:	89 c2                	mov    %eax,%edx
f012e7bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e7c0:	39 c2                	cmp    %eax,%edx
f012e7c2:	74 17                	je     f012e7db <test_krealloc_BF+0x16de>
			panic(
f012e7c4:	83 ec 04             	sub    $0x4,%esp
f012e7c7:	68 4c bb 13 f0       	push   $0xf013bb4c
f012e7cc:	68 7d 12 00 00       	push   $0x127d
f012e7d1:	68 56 a5 13 f0       	push   $0xf013a556
f012e7d6:	e8 cb 19 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012e7db:	e8 d2 d8 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e7e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012e7e3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e7e9:	83 ec 08             	sub    $0x8,%esp
f012e7ec:	68 00 fc 0f 00       	push   $0xffc00
f012e7f1:	50                   	push   %eax
f012e7f2:	e8 f3 8c fd ff       	call   f01074ea <krealloc>
f012e7f7:	83 c4 10             	add    $0x10,%esp
f012e7fa:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e800:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e806:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e80b:	77 17                	ja     f012e824 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e80d:	83 ec 04             	sub    $0x4,%esp
f012e810:	68 fc b7 13 f0       	push   $0xf013b7fc
f012e815:	68 85 12 00 00       	push   $0x1285
f012e81a:	68 56 a5 13 f0       	push   $0xf013a556
f012e81f:	e8 82 19 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012e824:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e82a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e830:	74 17                	je     f012e849 <test_krealloc_BF+0x174c>
			panic(
f012e832:	83 ec 04             	sub    $0x4,%esp
f012e835:	68 90 bb 13 f0       	push   $0xf013bb90
f012e83a:	68 88 12 00 00       	push   $0x1288
f012e83f:	68 56 a5 13 f0       	push   $0xf013a556
f012e844:	e8 5d 19 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e849:	e8 64 d8 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e84e:	89 c2                	mov    %eax,%edx
f012e850:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e853:	39 c2                	cmp    %eax,%edx
f012e855:	74 17                	je     f012e86e <test_krealloc_BF+0x1771>
			panic(
f012e857:	83 ec 04             	sub    $0x4,%esp
f012e85a:	68 4c bb 13 f0       	push   $0xf013bb4c
f012e85f:	68 8b 12 00 00       	push   $0x128b
f012e864:	68 56 a5 13 f0       	push   $0xf013a556
f012e869:	e8 38 19 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012e86e:	83 ec 0c             	sub    $0xc,%esp
f012e871:	68 6f ad 13 f0       	push   $0xf013ad6f
f012e876:	e8 b2 23 fd ff       	call   f0100c2d <cprintf>
f012e87b:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012e87e:	e8 2f d8 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e883:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012e886:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e88c:	83 ec 08             	sub    $0x8,%esp
f012e88f:	68 00 18 10 00       	push   $0x101800
f012e894:	50                   	push   %eax
f012e895:	e8 50 8c fd ff       	call   f01074ea <krealloc>
f012e89a:	83 c4 10             	add    $0x10,%esp
f012e89d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e8a0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e8a3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e8a8:	77 17                	ja     f012e8c1 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e8aa:	83 ec 04             	sub    $0x4,%esp
f012e8ad:	68 fc b7 13 f0       	push   $0xf013b7fc
f012e8b2:	68 93 12 00 00       	push   $0x1293
f012e8b7:	68 56 a5 13 f0       	push   $0xf013a556
f012e8bc:	e8 e5 18 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e8c1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e8c7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e8ca:	74 17                	je     f012e8e3 <test_krealloc_BF+0x17e6>
			panic(
f012e8cc:	83 ec 04             	sub    $0x4,%esp
f012e8cf:	68 f0 bb 13 f0       	push   $0xf013bbf0
f012e8d4:	68 96 12 00 00       	push   $0x1296
f012e8d9:	68 56 a5 13 f0       	push   $0xf013a556
f012e8de:	e8 c3 18 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012e8e3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e8e6:	e8 c7 d7 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e8eb:	29 c3                	sub    %eax,%ebx
f012e8ed:	89 d8                	mov    %ebx,%eax
f012e8ef:	83 f8 02             	cmp    $0x2,%eax
f012e8f2:	74 17                	je     f012e90b <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012e8f4:	83 ec 04             	sub    $0x4,%esp
f012e8f7:	68 6c bc 13 f0       	push   $0xf013bc6c
f012e8fc:	68 98 12 00 00       	push   $0x1298
f012e901:	68 56 a5 13 f0       	push   $0xf013a556
f012e906:	e8 9b 18 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012e90b:	e8 a2 d7 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e910:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012e913:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e919:	83 ec 08             	sub    $0x8,%esp
f012e91c:	68 00 fc 3f 00       	push   $0x3ffc00
f012e921:	50                   	push   %eax
f012e922:	e8 c3 8b fd ff       	call   f01074ea <krealloc>
f012e927:	83 c4 10             	add    $0x10,%esp
f012e92a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e92d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e930:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e935:	77 17                	ja     f012e94e <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e937:	83 ec 04             	sub    $0x4,%esp
f012e93a:	68 fc b7 13 f0       	push   $0xf013b7fc
f012e93f:	68 9e 12 00 00       	push   $0x129e
f012e944:	68 56 a5 13 f0       	push   $0xf013a556
f012e949:	e8 58 18 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012e94e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e954:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e957:	74 17                	je     f012e970 <test_krealloc_BF+0x1873>
			panic(
f012e959:	83 ec 04             	sub    $0x4,%esp
f012e95c:	68 f0 bb 13 f0       	push   $0xf013bbf0
f012e961:	68 a1 12 00 00       	push   $0x12a1
f012e966:	68 56 a5 13 f0       	push   $0xf013a556
f012e96b:	e8 36 18 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012e970:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e973:	e8 3a d7 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e978:	29 c3                	sub    %eax,%ebx
f012e97a:	89 d8                	mov    %ebx,%eax
f012e97c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e981:	74 17                	je     f012e99a <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012e983:	83 ec 04             	sub    $0x4,%esp
f012e986:	68 6c bc 13 f0       	push   $0xf013bc6c
f012e98b:	68 a4 12 00 00       	push   $0x12a4
f012e990:	68 56 a5 13 f0       	push   $0xf013a556
f012e995:	e8 0c 18 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012e99a:	83 ec 0c             	sub    $0xc,%esp
f012e99d:	68 b4 ad 13 f0       	push   $0xf013adb4
f012e9a2:	e8 86 22 fd ff       	call   f0100c2d <cprintf>
f012e9a7:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012e9aa:	e8 03 d7 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012e9af:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012e9b2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e9b8:	83 ec 08             	sub    $0x8,%esp
f012e9bb:	68 00 fc 9f 00       	push   $0x9ffc00
f012e9c0:	50                   	push   %eax
f012e9c1:	e8 24 8b fd ff       	call   f01074ea <krealloc>
f012e9c6:	83 c4 10             	add    $0x10,%esp
f012e9c9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e9cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e9cf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e9d4:	77 17                	ja     f012e9ed <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e9d6:	83 ec 04             	sub    $0x4,%esp
f012e9d9:	68 fc b7 13 f0       	push   $0xf013b7fc
f012e9de:	68 af 12 00 00       	push   $0x12af
f012e9e3:	68 56 a5 13 f0       	push   $0xf013a556
f012e9e8:	e8 b9 17 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012e9ed:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012e9f4:	10 00 00 
f012e9f7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012e9fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ea02:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012ea08:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ea0e:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea13:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012ea19:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ea1f:	29 d0                	sub    %edx,%eax
f012ea21:	89 c1                	mov    %eax,%ecx
f012ea23:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012ea2a:	10 00 00 
f012ea2d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ea32:	0f b6 d0             	movzbl %al,%edx
f012ea35:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012ea3b:	01 d0                	add    %edx,%eax
f012ea3d:	48                   	dec    %eax
f012ea3e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012ea44:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ea4a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea4f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012ea55:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ea5b:	29 d0                	sub    %edx,%eax
f012ea5d:	01 c1                	add    %eax,%ecx
f012ea5f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012ea66:	10 00 00 
f012ea69:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ea6e:	0f b6 c0             	movzbl %al,%eax
f012ea71:	c1 e0 04             	shl    $0x4,%eax
f012ea74:	89 c2                	mov    %eax,%edx
f012ea76:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ea7c:	01 d0                	add    %edx,%eax
f012ea7e:	48                   	dec    %eax
f012ea7f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012ea85:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ea8b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea90:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012ea96:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ea9c:	29 d0                	sub    %edx,%eax
f012ea9e:	01 c8                	add    %ecx,%eax
f012eaa0:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012eaa6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eaa9:	39 c2                	cmp    %eax,%edx
f012eaab:	74 18                	je     f012eac5 <test_krealloc_BF+0x19c8>
			panic(
f012eaad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eab0:	50                   	push   %eax
f012eab1:	68 a0 bc 13 f0       	push   $0xf013bca0
f012eab6:	68 b3 12 00 00       	push   $0x12b3
f012eabb:	68 56 a5 13 f0       	push   $0xf013a556
f012eac0:	e8 e1 16 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012eac5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eacb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012eace:	75 17                	jne    f012eae7 <test_krealloc_BF+0x19ea>
			panic(
f012ead0:	83 ec 04             	sub    $0x4,%esp
f012ead3:	68 e4 bc 13 f0       	push   $0xf013bce4
f012ead8:	68 b6 12 00 00       	push   $0x12b6
f012eadd:	68 56 a5 13 f0       	push   $0xf013a556
f012eae2:	e8 bf 16 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012eae7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eaea:	e8 c3 d5 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012eaef:	29 c3                	sub    %eax,%ebx
f012eaf1:	89 d8                	mov    %ebx,%eax
f012eaf3:	3d 00 06 00 00       	cmp    $0x600,%eax
f012eaf8:	74 17                	je     f012eb11 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012eafa:	83 ec 04             	sub    $0x4,%esp
f012eafd:	68 6c bc 13 f0       	push   $0xf013bc6c
f012eb02:	68 b9 12 00 00       	push   $0x12b9
f012eb07:	68 56 a5 13 f0       	push   $0xf013a556
f012eb0c:	e8 95 16 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012eb11:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eb14:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012eb1a:	e8 93 d5 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012eb1f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012eb22:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eb28:	83 ec 08             	sub    $0x8,%esp
f012eb2b:	68 00 fc 3f 00       	push   $0x3ffc00
f012eb30:	50                   	push   %eax
f012eb31:	e8 b4 89 fd ff       	call   f01074ea <krealloc>
f012eb36:	83 c4 10             	add    $0x10,%esp
f012eb39:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eb3c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eb3f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eb44:	77 17                	ja     f012eb5d <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eb46:	83 ec 04             	sub    $0x4,%esp
f012eb49:	68 fc b7 13 f0       	push   $0xf013b7fc
f012eb4e:	68 c2 12 00 00       	push   $0x12c2
f012eb53:	68 56 a5 13 f0       	push   $0xf013a556
f012eb58:	e8 49 16 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012eb5d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eb63:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012eb66:	75 17                	jne    f012eb7f <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012eb68:	83 ec 04             	sub    $0x4,%esp
f012eb6b:	68 e4 bc 13 f0       	push   $0xf013bce4
f012eb70:	68 c4 12 00 00       	push   $0x12c4
f012eb75:	68 56 a5 13 f0       	push   $0xf013a556
f012eb7a:	e8 27 16 fd ff       	call   f01001a6 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012eb7f:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012eb86:	10 00 00 
f012eb89:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012eb8f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012eb94:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012eb9a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012eba0:	ba 00 00 00 00       	mov    $0x0,%edx
f012eba5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012ebab:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ebb1:	29 d0                	sub    %edx,%eax
f012ebb3:	89 c1                	mov    %eax,%ecx
f012ebb5:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012ebbc:	10 00 00 
f012ebbf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ebc4:	0f b6 d0             	movzbl %al,%edx
f012ebc7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ebcd:	01 d0                	add    %edx,%eax
f012ebcf:	48                   	dec    %eax
f012ebd0:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012ebd6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ebdc:	ba 00 00 00 00       	mov    $0x0,%edx
f012ebe1:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012ebe7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ebed:	29 d0                	sub    %edx,%eax
f012ebef:	01 c1                	add    %eax,%ecx
f012ebf1:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012ebf8:	10 00 00 
f012ebfb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ec00:	0f b6 c0             	movzbl %al,%eax
f012ec03:	c1 e0 04             	shl    $0x4,%eax
f012ec06:	89 c2                	mov    %eax,%edx
f012ec08:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ec0e:	01 d0                	add    %edx,%eax
f012ec10:	48                   	dec    %eax
f012ec11:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012ec17:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ec1d:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec22:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012ec28:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ec2e:	29 d0                	sub    %edx,%eax
f012ec30:	01 c8                	add    %ecx,%eax
f012ec32:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012ec38:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ec3b:	39 c2                	cmp    %eax,%edx
f012ec3d:	74 17                	je     f012ec56 <test_krealloc_BF+0x1b59>
f012ec3f:	83 ec 04             	sub    $0x4,%esp
f012ec42:	68 38 b8 13 f0       	push   $0xf013b838
f012ec47:	68 c5 12 00 00       	push   $0x12c5
f012ec4c:	68 56 a5 13 f0       	push   $0xf013a556
f012ec51:	e8 50 15 fd ff       	call   f01001a6 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012ec56:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ec59:	e8 54 d4 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ec5e:	29 c3                	sub    %eax,%ebx
f012ec60:	89 d8                	mov    %ebx,%eax
f012ec62:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ec67:	74 17                	je     f012ec80 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012ec69:	83 ec 04             	sub    $0x4,%esp
f012ec6c:	68 6c bc 13 f0       	push   $0xf013bc6c
f012ec71:	68 c9 12 00 00       	push   $0x12c9
f012ec76:	68 56 a5 13 f0       	push   $0xf013a556
f012ec7b:	e8 26 15 fd ff       	call   f01001a6 <_panic>
		ptr_allocations[6] = newAddress;
f012ec80:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ec83:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ec89:	e8 24 d4 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012ec8e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012ec91:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ec97:	83 ec 08             	sub    $0x8,%esp
f012ec9a:	68 00 fc 3f 01       	push   $0x13ffc00
f012ec9f:	50                   	push   %eax
f012eca0:	e8 45 88 fd ff       	call   f01074ea <krealloc>
f012eca5:	83 c4 10             	add    $0x10,%esp
f012eca8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ecab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ecae:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ecb3:	77 17                	ja     f012eccc <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ecb5:	83 ec 04             	sub    $0x4,%esp
f012ecb8:	68 fc b7 13 f0       	push   $0xf013b7fc
f012ecbd:	68 cf 12 00 00       	push   $0x12cf
f012ecc2:	68 56 a5 13 f0       	push   $0xf013a556
f012ecc7:	e8 da 14 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012eccc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ecd2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ecd5:	75 17                	jne    f012ecee <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012ecd7:	83 ec 04             	sub    $0x4,%esp
f012ecda:	68 e4 bc 13 f0       	push   $0xf013bce4
f012ecdf:	68 d1 12 00 00       	push   $0x12d1
f012ece4:	68 56 a5 13 f0       	push   $0xf013a556
f012ece9:	e8 b8 14 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012ecee:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012ecf5:	10 00 00 
f012ecf8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ecfe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ed03:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012ed09:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012ed0f:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed14:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012ed1a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012ed20:	29 d0                	sub    %edx,%eax
f012ed22:	89 c1                	mov    %eax,%ecx
f012ed24:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012ed2b:	10 00 00 
f012ed2e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ed33:	0f b6 d0             	movzbl %al,%edx
f012ed36:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ed3c:	01 d0                	add    %edx,%eax
f012ed3e:	48                   	dec    %eax
f012ed3f:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012ed45:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012ed4b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed50:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012ed56:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012ed5c:	29 d0                	sub    %edx,%eax
f012ed5e:	01 c1                	add    %eax,%ecx
f012ed60:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012ed67:	10 00 00 
f012ed6a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ed6f:	0f b6 c0             	movzbl %al,%eax
f012ed72:	c1 e0 04             	shl    $0x4,%eax
f012ed75:	89 c2                	mov    %eax,%edx
f012ed77:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012ed7d:	01 d0                	add    %edx,%eax
f012ed7f:	48                   	dec    %eax
f012ed80:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012ed86:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012ed8c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed91:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012ed97:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012ed9d:	29 d0                	sub    %edx,%eax
f012ed9f:	01 c8                	add    %ecx,%eax
f012eda1:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012eda7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012edaa:	39 c2                	cmp    %eax,%edx
f012edac:	74 17                	je     f012edc5 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012edae:	83 ec 04             	sub    $0x4,%esp
f012edb1:	68 04 be 13 f0       	push   $0xf013be04
f012edb6:	68 d3 12 00 00       	push   $0x12d3
f012edbb:	68 56 a5 13 f0       	push   $0xf013a556
f012edc0:	e8 e1 13 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012edc5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012edc8:	e8 e5 d2 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012edcd:	29 c3                	sub    %eax,%ebx
f012edcf:	89 d8                	mov    %ebx,%eax
f012edd1:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012edd6:	74 17                	je     f012edef <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012edd8:	83 ec 04             	sub    $0x4,%esp
f012eddb:	68 6c bc 13 f0       	push   $0xf013bc6c
f012ede0:	68 d6 12 00 00       	push   $0x12d6
f012ede5:	68 56 a5 13 f0       	push   $0xf013a556
f012edea:	e8 b7 13 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012edef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012edf2:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012edf8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012edfe:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012ee04:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ee0b:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ee0e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ee15:	eb 21                	jmp    f012ee38 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012ee17:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ee1d:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012ee20:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ee26:	01 c8                	add    %ecx,%eax
f012ee28:	8a 00                	mov    (%eax),%al
f012ee2a:	0f be c0             	movsbl %al,%eax
f012ee2d:	01 d0                	add    %edx,%eax
f012ee2f:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ee35:	ff 45 d8             	incl   -0x28(%ebp)
f012ee38:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ee3e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ee41:	7d d4                	jge    f012ee17 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ee43:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ee49:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012ee4f:	42                   	inc    %edx
f012ee50:	01 d2                	add    %edx,%edx
f012ee52:	39 d0                	cmp    %edx,%eax
f012ee54:	74 17                	je     f012ee6d <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012ee56:	83 ec 04             	sub    $0x4,%esp
f012ee59:	68 9c bd 13 f0       	push   $0xf013bd9c
f012ee5e:	68 e4 12 00 00       	push   $0x12e4
f012ee63:	68 56 a5 13 f0       	push   $0xf013a556
f012ee68:	e8 39 13 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ee6d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ee73:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012ee79:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ee80:	00 00 00 
		sums[1] = 0;
f012ee83:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012ee8a:	00 00 00 
		sums[2] = 0;
f012ee8d:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012ee94:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ee97:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ee9e:	eb 70                	jmp    f012ef10 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012eea0:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012eea6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eea9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eeb0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eeb6:	01 c8                	add    %ecx,%eax
f012eeb8:	8a 00                	mov    (%eax),%al
f012eeba:	0f be c0             	movsbl %al,%eax
f012eebd:	01 d0                	add    %edx,%eax
f012eebf:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012eec5:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012eecb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eece:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eed5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eedb:	01 c8                	add    %ecx,%eax
f012eedd:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eee1:	98                   	cwtl   
f012eee2:	01 d0                	add    %edx,%eax
f012eee4:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012eeea:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012eef0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eef3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eefa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef00:	01 c8                	add    %ecx,%eax
f012ef02:	8b 40 04             	mov    0x4(%eax),%eax
f012ef05:	01 d0                	add    %edx,%eax
f012ef07:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ef0d:	ff 45 d8             	incl   -0x28(%ebp)
f012ef10:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ef19:	7d 85                	jge    f012eea0 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012ef1b:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012ef21:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef27:	8d 50 01             	lea    0x1(%eax),%edx
f012ef2a:	89 d0                	mov    %edx,%eax
f012ef2c:	01 c0                	add    %eax,%eax
f012ef2e:	01 d0                	add    %edx,%eax
f012ef30:	01 c0                	add    %eax,%eax
f012ef32:	01 d0                	add    %edx,%eax
f012ef34:	39 c1                	cmp    %eax,%ecx
f012ef36:	75 3a                	jne    f012ef72 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012ef38:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012ef3e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef44:	8d 50 01             	lea    0x1(%eax),%edx
f012ef47:	89 d0                	mov    %edx,%eax
f012ef49:	01 c0                	add    %eax,%eax
f012ef4b:	01 d0                	add    %edx,%eax
f012ef4d:	01 c0                	add    %eax,%eax
f012ef4f:	01 d0                	add    %edx,%eax
f012ef51:	39 c1                	cmp    %eax,%ecx
f012ef53:	75 1d                	jne    f012ef72 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012ef55:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012ef5b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef61:	8d 50 01             	lea    0x1(%eax),%edx
f012ef64:	89 d0                	mov    %edx,%eax
f012ef66:	01 c0                	add    %eax,%eax
f012ef68:	01 d0                	add    %edx,%eax
f012ef6a:	01 c0                	add    %eax,%eax
f012ef6c:	01 d0                	add    %edx,%eax
f012ef6e:	39 c1                	cmp    %eax,%ecx
f012ef70:	74 17                	je     f012ef89 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012ef72:	83 ec 04             	sub    $0x4,%esp
f012ef75:	68 9c bd 13 f0       	push   $0xf013bd9c
f012ef7a:	68 f6 12 00 00       	push   $0x12f6
f012ef7f:	68 56 a5 13 f0       	push   $0xf013a556
f012ef84:	e8 1d 12 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ef89:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef8f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012ef95:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ef9c:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ef9f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012efa6:	eb 24                	jmp    f012efcc <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012efa8:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012efae:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012efb1:	01 c0                	add    %eax,%eax
f012efb3:	89 c1                	mov    %eax,%ecx
f012efb5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012efbb:	01 c8                	add    %ecx,%eax
f012efbd:	66 8b 00             	mov    (%eax),%ax
f012efc0:	98                   	cwtl   
f012efc1:	01 d0                	add    %edx,%eax
f012efc3:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012efc9:	ff 45 d8             	incl   -0x28(%ebp)
f012efcc:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012efd2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012efd5:	7d d1                	jge    f012efa8 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012efd7:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012efdd:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012efe3:	8d 48 01             	lea    0x1(%eax),%ecx
f012efe6:	89 c8                	mov    %ecx,%eax
f012efe8:	c1 e0 02             	shl    $0x2,%eax
f012efeb:	01 c8                	add    %ecx,%eax
f012efed:	39 c2                	cmp    %eax,%edx
f012efef:	74 17                	je     f012f008 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012eff1:	83 ec 04             	sub    $0x4,%esp
f012eff4:	68 9c bd 13 f0       	push   $0xf013bd9c
f012eff9:	68 00 13 00 00       	push   $0x1300
f012effe:	68 56 a5 13 f0       	push   $0xf013a556
f012f003:	e8 9e 11 fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012f008:	e8 a5 d0 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012f00d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f010:	e8 77 4c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f015:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012f01b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f021:	83 ec 08             	sub    $0x8,%esp
f012f024:	6a 00                	push   $0x0
f012f026:	50                   	push   %eax
f012f027:	e8 be 84 fd ff       	call   f01074ea <krealloc>
f012f02c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f02f:	e8 58 4c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f034:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f03a:	74 17                	je     f012f053 <test_krealloc_BF+0x1f56>
			panic(
f012f03c:	83 ec 04             	sub    $0x4,%esp
f012f03f:	68 70 a5 13 f0       	push   $0xf013a570
f012f044:	68 08 13 00 00       	push   $0x1308
f012f049:	68 56 a5 13 f0       	push   $0xf013a556
f012f04e:	e8 53 11 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012f053:	e8 5a d0 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012f058:	89 c2                	mov    %eax,%edx
f012f05a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f05d:	29 c2                	sub    %eax,%edx
f012f05f:	89 d0                	mov    %edx,%eax
f012f061:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012f066:	74 17                	je     f012f07f <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012f068:	83 ec 04             	sub    $0x4,%esp
f012f06b:	68 2c ba 13 f0       	push   $0xf013ba2c
f012f070:	68 0a 13 00 00       	push   $0x130a
f012f075:	68 56 a5 13 f0       	push   $0xf013a556
f012f07a:	e8 27 11 fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012f07f:	e8 2e d0 fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012f084:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f087:	e8 00 4c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f08c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012f092:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f098:	83 ec 0c             	sub    $0xc,%esp
f012f09b:	50                   	push   %eax
f012f09c:	e8 9b 83 fd ff       	call   f010743c <kfree>
f012f0a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f0a4:	e8 e3 4b fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012f0a9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f0af:	74 17                	je     f012f0c8 <test_krealloc_BF+0x1fcb>
			panic(
f012f0b1:	83 ec 04             	sub    $0x4,%esp
f012f0b4:	68 70 a5 13 f0       	push   $0xf013a570
f012f0b9:	68 12 13 00 00       	push   $0x1312
f012f0be:	68 56 a5 13 f0       	push   $0xf013a556
f012f0c3:	e8 de 10 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012f0c8:	e8 e5 cf fd ff       	call   f010c0b2 <sys_calculate_free_frames>
f012f0cd:	89 c2                	mov    %eax,%edx
f012f0cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f0d2:	29 c2                	sub    %eax,%edx
f012f0d4:	89 d0                	mov    %edx,%eax
f012f0d6:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012f0db:	74 17                	je     f012f0f4 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012f0dd:	83 ec 04             	sub    $0x4,%esp
f012f0e0:	68 2c ba 13 f0       	push   $0xf013ba2c
f012f0e5:	68 14 13 00 00       	push   $0x1314
f012f0ea:	68 56 a5 13 f0       	push   $0xf013a556
f012f0ef:	e8 b2 10 fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f0f4:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012f0fb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012f102:	eb 48                	jmp    f012f14c <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f104:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012f107:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012f10c:	83 ec 04             	sub    $0x4,%esp
f012f10f:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012f115:	51                   	push   %ecx
f012f116:	52                   	push   %edx
f012f117:	50                   	push   %eax
f012f118:	e8 4c 78 fd ff       	call   f0106969 <get_page_table>
f012f11d:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f120:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012f126:	85 c0                	test   %eax,%eax
f012f128:	75 17                	jne    f012f141 <test_krealloc_BF+0x2044>
					panic(
f012f12a:	83 ec 04             	sub    $0x4,%esp
f012f12d:	68 58 ae 13 f0       	push   $0xf013ae58
f012f132:	68 21 13 00 00       	push   $0x1321
f012f137:	68 56 a5 13 f0       	push   $0xf013a556
f012f13c:	e8 65 10 fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f141:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012f148:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012f14c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f150:	78 b2                	js     f012f104 <test_krealloc_BF+0x2007>
f012f152:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f156:	7f 09                	jg     f012f161 <test_krealloc_BF+0x2064>
f012f158:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012f15f:	76 a3                	jbe    f012f104 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012f161:	83 ec 0c             	sub    $0xc,%esp
f012f164:	68 3a a7 13 f0       	push   $0xf013a73a
f012f169:	e8 bf 1a fd ff       	call   f0100c2d <cprintf>
f012f16e:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012f171:	83 ec 0c             	sub    $0xc,%esp
f012f174:	68 3c be 13 f0       	push   $0xf013be3c
f012f179:	e8 af 1a fd ff       	call   f0100c2d <cprintf>
f012f17e:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f181:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f186:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f189:	5b                   	pop    %ebx
f012f18a:	5f                   	pop    %edi
f012f18b:	5d                   	pop    %ebp
f012f18c:	c3                   	ret    

f012f18d <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012f18d:	55                   	push   %ebp
f012f18e:	89 e5                	mov    %esp,%ebp
f012f190:	83 ec 08             	sub    $0x8,%esp
	if(USE_KHEAP != 1)
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
f012f193:	83 ec 04             	sub    $0x4,%esp
f012f196:	68 7c be 13 f0       	push   $0xf013be7c
f012f19b:	68 32 13 00 00       	push   $0x1332
f012f1a0:	68 56 a5 13 f0       	push   $0xf013a556
f012f1a5:	e8 fc 0f fd ff       	call   f01001a6 <_panic>

f012f1aa <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012f1aa:	55                   	push   %ebp
f012f1ab:	89 e5                	mov    %esp,%ebp
f012f1ad:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f1b0:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f1b4:	77 07                	ja     f012f1bd <nearest_pow2_ceil+0x13>
f012f1b6:	b8 01 00 00 00       	mov    $0x1,%eax
f012f1bb:	eb 20                	jmp    f012f1dd <nearest_pow2_ceil+0x33>
    int power = 2;
f012f1bd:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f1c4:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f1c7:	eb 08                	jmp    f012f1d1 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012f1c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f1cc:	01 c0                	add    %eax,%eax
f012f1ce:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012f1d1:	d1 6d 08             	shrl   0x8(%ebp)
f012f1d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f1d8:	75 ef                	jne    f012f1c9 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012f1da:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f1dd:	c9                   	leave  
f012f1de:	c3                   	ret    

f012f1df <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012f1df:	55                   	push   %ebp
f012f1e0:	89 e5                	mov    %esp,%ebp
f012f1e2:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f1e5:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f1e9:	77 07                	ja     f012f1f2 <log2_ceil+0x13>
f012f1eb:	b8 01 00 00 00       	mov    $0x1,%eax
f012f1f0:	eb 1b                	jmp    f012f20d <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012f1f2:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f1f9:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f1fc:	eb 03                	jmp    f012f201 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012f1fe:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012f201:	d1 6d 08             	shrl   0x8(%ebp)
f012f204:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f208:	75 f4                	jne    f012f1fe <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012f20a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f20d:	c9                   	leave  
f012f20e:	c3                   	ret    

f012f20f <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012f20f:	55                   	push   %ebp
f012f210:	89 e5                	mov    %esp,%ebp
f012f212:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012f215:	8b 45 08             	mov    0x8(%ebp),%eax
f012f218:	8b 00                	mov    (%eax),%eax
f012f21a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012f21d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f220:	8b 00                	mov    (%eax),%eax
f012f222:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012f225:	eb 52                	jmp    f012f279 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012f227:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f22a:	8b 00                	mov    (%eax),%eax
f012f22c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012f22f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f232:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f235:	75 12                	jne    f012f249 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012f237:	83 ec 0c             	sub    $0xc,%esp
f012f23a:	68 e8 be 13 f0       	push   $0xf013bee8
f012f23f:	e8 e9 19 fd ff       	call   f0100c2d <cprintf>
f012f244:	83 c4 10             	add    $0x10,%esp
			break;
f012f247:	eb 3f                	jmp    f012f288 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012f249:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f24d:	74 38                	je     f012f287 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012f24f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f252:	8b 00                	mov    (%eax),%eax
f012f254:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012f257:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f25a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f25d:	75 12                	jne    f012f271 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012f25f:	83 ec 0c             	sub    $0xc,%esp
f012f262:	68 04 bf 13 f0       	push   $0xf013bf04
f012f267:	e8 c1 19 fd ff       	call   f0100c2d <cprintf>
f012f26c:	83 c4 10             	add    $0x10,%esp
			break;
f012f26f:	eb 17                	jmp    f012f288 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012f271:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f274:	8b 00                	mov    (%eax),%eax
f012f276:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012f279:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f27d:	74 09                	je     f012f288 <detect_loop_in_FrameInfo_list+0x79>
f012f27f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f283:	75 a2                	jne    f012f227 <detect_loop_in_FrameInfo_list+0x18>
f012f285:	eb 01                	jmp    f012f288 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012f287:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012f288:	83 ec 0c             	sub    $0xc,%esp
f012f28b:	68 1b bf 13 f0       	push   $0xf013bf1b
f012f290:	e8 98 19 fd ff       	call   f0100c2d <cprintf>
f012f295:	83 c4 10             	add    $0x10,%esp
}
f012f298:	90                   	nop
f012f299:	c9                   	leave  
f012f29a:	c3                   	ret    

f012f29b <scarce_memory>:

void scarce_memory()
{
f012f29b:	55                   	push   %ebp
f012f29c:	89 e5                	mov    %esp,%ebp
f012f29e:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012f2a1:	a1 60 60 6e f0       	mov    0xf06e6060,%eax
f012f2a6:	ba 64 00 00 00       	mov    $0x64,%edx
f012f2ab:	29 c2                	sub    %eax,%edx
f012f2ad:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f012f2b2:	0f af c2             	imul   %edx,%eax
f012f2b5:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f2ba:	f7 e2                	mul    %edx
f012f2bc:	89 d0                	mov    %edx,%eax
f012f2be:	c1 e8 05             	shr    $0x5,%eax
f012f2c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012f2c4:	a1 60 60 6e f0       	mov    0xf06e6060,%eax
f012f2c9:	ba 64 00 00 00       	mov    $0x64,%edx
f012f2ce:	29 c2                	sub    %eax,%edx
f012f2d0:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f012f2d5:	89 d1                	mov    %edx,%ecx
f012f2d7:	0f af c8             	imul   %eax,%ecx
f012f2da:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f2df:	f7 e1                	mul    %ecx
f012f2e1:	c1 ea 05             	shr    $0x5,%edx
f012f2e4:	89 d0                	mov    %edx,%eax
f012f2e6:	c1 e0 02             	shl    $0x2,%eax
f012f2e9:	01 d0                	add    %edx,%eax
f012f2eb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f2f2:	01 d0                	add    %edx,%eax
f012f2f4:	c1 e0 02             	shl    $0x2,%eax
f012f2f7:	29 c1                	sub    %eax,%ecx
f012f2f9:	89 ca                	mov    %ecx,%edx
f012f2fb:	85 d2                	test   %edx,%edx
f012f2fd:	74 03                	je     f012f302 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012f2ff:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012f302:	8b 15 70 84 6e f0    	mov    0xf06e8470,%edx
f012f308:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f012f30d:	29 c2                	sub    %eax,%edx
f012f30f:	89 d0                	mov    %edx,%eax
f012f311:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012f314:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f317:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012f31a:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012f31d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012f324:	eb 12                	jmp    f012f338 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012f326:	83 ec 0c             	sub    $0xc,%esp
f012f329:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012f32c:	50                   	push   %eax
f012f32d:	e8 78 74 fd ff       	call   f01067aa <allocate_frame>
f012f332:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012f335:	ff 45 f0             	incl   -0x10(%ebp)
f012f338:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f33b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f33e:	76 e6                	jbe    f012f326 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012f340:	90                   	nop
f012f341:	c9                   	leave  
f012f342:	c3                   	ret    

f012f343 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012f343:	55                   	push   %ebp
f012f344:	89 e5                	mov    %esp,%ebp
f012f346:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012f349:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012f350:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012f357:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012f35e:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f362:	0f 85 d3 01 00 00    	jne    f012f53b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f368:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012f36f:	e9 e1 00 00 00       	jmp    f012f455 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012f374:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f37b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f37e:	c1 e0 04             	shl    $0x4,%eax
f012f381:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f386:	8b 00                	mov    (%eax),%eax
f012f388:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f38b:	e9 82 00 00 00       	jmp    f012f412 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012f390:	83 ec 0c             	sub    $0xc,%esp
f012f393:	ff 75 e4             	pushl  -0x1c(%ebp)
f012f396:	e8 1d 84 fd ff       	call   f01077b8 <env_page_ws_get_size>
f012f39b:	83 c4 10             	add    $0x10,%esp
f012f39e:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f3a1:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f3a6:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f3ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f3af:	0f af c2             	imul   %edx,%eax
f012f3b2:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f3b7:	f7 e2                	mul    %edx
f012f3b9:	89 d0                	mov    %edx,%eax
f012f3bb:	c1 e8 05             	shr    $0x5,%eax
f012f3be:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f3c1:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f3c6:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f3cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f3cf:	89 d1                	mov    %edx,%ecx
f012f3d1:	0f af c8             	imul   %eax,%ecx
f012f3d4:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f3d9:	f7 e1                	mul    %ecx
f012f3db:	c1 ea 05             	shr    $0x5,%edx
f012f3de:	89 d0                	mov    %edx,%eax
f012f3e0:	c1 e0 02             	shl    $0x2,%eax
f012f3e3:	01 d0                	add    %edx,%eax
f012f3e5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f3ec:	01 d0                	add    %edx,%eax
f012f3ee:	c1 e0 02             	shl    $0x2,%eax
f012f3f1:	29 c1                	sub    %eax,%ecx
f012f3f3:	89 ca                	mov    %ecx,%edx
f012f3f5:	85 d2                	test   %edx,%edx
f012f3f7:	74 03                	je     f012f3fc <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012f3f9:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012f3fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f3ff:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f402:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f405:	c1 e0 04             	shl    $0x4,%eax
f012f408:	05 14 01 68 f0       	add    $0xf0680114,%eax
f012f40d:	8b 00                	mov    (%eax),%eax
f012f40f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f412:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f416:	74 08                	je     f012f420 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012f418:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f41b:	8b 40 44             	mov    0x44(%eax),%eax
f012f41e:	eb 05                	jmp    f012f425 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012f420:	b8 00 00 00 00       	mov    $0x0,%eax
f012f425:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f428:	c1 e2 04             	shl    $0x4,%edx
f012f42b:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f012f431:	89 02                	mov    %eax,(%edx)
f012f433:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f436:	c1 e0 04             	shl    $0x4,%eax
f012f439:	05 14 01 68 f0       	add    $0xf0680114,%eax
f012f43e:	8b 00                	mov    (%eax),%eax
f012f440:	85 c0                	test   %eax,%eax
f012f442:	0f 85 48 ff ff ff    	jne    f012f390 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012f448:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f44c:	0f 85 3e ff ff ff    	jne    f012f390 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f452:	ff 45 e8             	incl   -0x18(%ebp)
f012f455:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012f45a:	0f b6 c0             	movzbl %al,%eax
f012f45d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f460:	0f 8f 0e ff ff ff    	jg     f012f374 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012f466:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f46d:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f012f472:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f475:	eb 19                	jmp    f012f490 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012f477:	83 ec 0c             	sub    $0xc,%esp
f012f47a:	ff 75 dc             	pushl  -0x24(%ebp)
f012f47d:	e8 36 83 fd ff       	call   f01077b8 <env_page_ws_get_size>
f012f482:	83 c4 10             	add    $0x10,%esp
f012f485:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f488:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f012f48d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f490:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f494:	74 08                	je     f012f49e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012f496:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f499:	8b 40 44             	mov    0x44(%eax),%eax
f012f49c:	eb 05                	jmp    f012f4a3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012f49e:	b8 00 00 00 00       	mov    $0x0,%eax
f012f4a3:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f012f4a8:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f012f4ad:	85 c0                	test   %eax,%eax
f012f4af:	75 c6                	jne    f012f477 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012f4b1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f4b5:	75 c0                	jne    f012f477 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012f4b7:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f4bc:	85 c0                	test   %eax,%eax
f012f4be:	0f 84 ec 00 00 00    	je     f012f5b0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f4c4:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f4c9:	83 ec 0c             	sub    $0xc,%esp
f012f4cc:	50                   	push   %eax
f012f4cd:	e8 e6 82 fd ff       	call   f01077b8 <env_page_ws_get_size>
f012f4d2:	83 c4 10             	add    $0x10,%esp
f012f4d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f4d8:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f4dd:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f4e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f4e6:	0f af c2             	imul   %edx,%eax
f012f4e9:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f4ee:	f7 e2                	mul    %edx
f012f4f0:	89 d0                	mov    %edx,%eax
f012f4f2:	c1 e8 05             	shr    $0x5,%eax
f012f4f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f4f8:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f4fd:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f503:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f506:	89 d1                	mov    %edx,%ecx
f012f508:	0f af c8             	imul   %eax,%ecx
f012f50b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f510:	f7 e1                	mul    %ecx
f012f512:	c1 ea 05             	shr    $0x5,%edx
f012f515:	89 d0                	mov    %edx,%eax
f012f517:	c1 e0 02             	shl    $0x2,%eax
f012f51a:	01 d0                	add    %edx,%eax
f012f51c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f523:	01 d0                	add    %edx,%eax
f012f525:	c1 e0 02             	shl    $0x2,%eax
f012f528:	29 c1                	sub    %eax,%ecx
f012f52a:	89 ca                	mov    %ecx,%edx
f012f52c:	85 d2                	test   %edx,%edx
f012f52e:	74 03                	je     f012f533 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012f530:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f533:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f536:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012f539:	eb 75                	jmp    f012f5b0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f53b:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f540:	83 ec 0c             	sub    $0xc,%esp
f012f543:	50                   	push   %eax
f012f544:	e8 6f 82 fd ff       	call   f01077b8 <env_page_ws_get_size>
f012f549:	83 c4 10             	add    $0x10,%esp
f012f54c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f54f:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f554:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f55a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f55d:	0f af c2             	imul   %edx,%eax
f012f560:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f565:	f7 e2                	mul    %edx
f012f567:	89 d0                	mov    %edx,%eax
f012f569:	c1 e8 05             	shr    $0x5,%eax
f012f56c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f56f:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f574:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f57a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f57d:	89 d1                	mov    %edx,%ecx
f012f57f:	0f af c8             	imul   %eax,%ecx
f012f582:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f587:	f7 e1                	mul    %ecx
f012f589:	c1 ea 05             	shr    $0x5,%edx
f012f58c:	89 d0                	mov    %edx,%eax
f012f58e:	c1 e0 02             	shl    $0x2,%eax
f012f591:	01 d0                	add    %edx,%eax
f012f593:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f59a:	01 d0                	add    %edx,%eax
f012f59c:	c1 e0 02             	shl    $0x2,%eax
f012f59f:	29 c1                	sub    %eax,%ecx
f012f5a1:	89 ca                	mov    %ecx,%edx
f012f5a3:	85 d2                	test   %edx,%edx
f012f5a5:	74 03                	je     f012f5aa <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012f5a7:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f5aa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012f5ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012f5b0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f5b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f5b6:	01 c2                	add    %eax,%edx
f012f5b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f5bb:	01 d0                	add    %edx,%eax
}
f012f5bd:	c9                   	leave  
f012f5be:	c3                   	ret    

f012f5bf <schenv>:


void schenv()
{
f012f5bf:	55                   	push   %ebp
f012f5c0:	89 e5                	mov    %esp,%ebp
f012f5c2:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012f5c5:	c6 05 04 85 6e f0 00 	movb   $0x0,0xf06e8504
	__ne = NULL;
f012f5cc:	c7 05 94 84 6e f0 00 	movl   $0x0,0xf06e8494
f012f5d3:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f5d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f5dd:	eb 3a                	jmp    f012f619 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012f5df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f5e2:	c1 e0 04             	shl    $0x4,%eax
f012f5e5:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f5ea:	83 ec 0c             	sub    $0xc,%esp
f012f5ed:	50                   	push   %eax
f012f5ee:	e8 ac 4d fd ff       	call   f010439f <queue_size>
f012f5f3:	83 c4 10             	add    $0x10,%esp
f012f5f6:	85 c0                	test   %eax,%eax
f012f5f8:	74 1c                	je     f012f616 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012f5fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f5fd:	c1 e0 04             	shl    $0x4,%eax
f012f600:	05 10 01 68 f0       	add    $0xf0680110,%eax
f012f605:	8b 00                	mov    (%eax),%eax
f012f607:	a3 94 84 6e f0       	mov    %eax,0xf06e8494
			__nl = i;
f012f60c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f60f:	a2 04 85 6e f0       	mov    %al,0xf06e8504
			break;
f012f614:	eb 10                	jmp    f012f626 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f616:	ff 45 f4             	incl   -0xc(%ebp)
f012f619:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012f61e:	0f b6 c0             	movzbl %al,%eax
f012f621:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f624:	7f b9                	jg     f012f5df <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012f626:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f62b:	85 c0                	test   %eax,%eax
f012f62d:	0f 84 86 00 00 00    	je     f012f6b9 <schenv+0xfa>
	{
		if (__ne != NULL)
f012f633:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f638:	85 c0                	test   %eax,%eax
f012f63a:	74 4b                	je     f012f687 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012f63c:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f641:	0f b6 c0             	movzbl %al,%eax
f012f644:	8d 50 01             	lea    0x1(%eax),%edx
f012f647:	a0 04 85 6e f0       	mov    0xf06e8504,%al
f012f64c:	0f b6 c0             	movzbl %al,%eax
f012f64f:	39 c2                	cmp    %eax,%edx
f012f651:	7d 66                	jge    f012f6b9 <schenv+0xfa>
			{
				__ne = curenv;
f012f653:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f658:	a3 94 84 6e f0       	mov    %eax,0xf06e8494
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f65d:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f662:	0f b6 c0             	movzbl %al,%eax
f012f665:	8a 15 dc 84 6e f0    	mov    0xf06e84dc,%dl
f012f66b:	0f b6 d2             	movzbl %dl,%edx
f012f66e:	4a                   	dec    %edx
f012f66f:	39 d0                	cmp    %edx,%eax
f012f671:	7d 08                	jge    f012f67b <schenv+0xbc>
f012f673:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f678:	40                   	inc    %eax
f012f679:	eb 05                	jmp    f012f680 <schenv+0xc1>
f012f67b:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f680:	a2 04 85 6e f0       	mov    %al,0xf06e8504
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012f685:	eb 32                	jmp    f012f6b9 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012f687:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f68c:	a3 94 84 6e f0       	mov    %eax,0xf06e8494
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f691:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f696:	0f b6 c0             	movzbl %al,%eax
f012f699:	8a 15 dc 84 6e f0    	mov    0xf06e84dc,%dl
f012f69f:	0f b6 d2             	movzbl %dl,%edx
f012f6a2:	4a                   	dec    %edx
f012f6a3:	39 d0                	cmp    %edx,%eax
f012f6a5:	7d 08                	jge    f012f6af <schenv+0xf0>
f012f6a7:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f6ac:	40                   	inc    %eax
f012f6ad:	eb 05                	jmp    f012f6b4 <schenv+0xf5>
f012f6af:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f6b4:	a2 04 85 6e f0       	mov    %al,0xf06e8504
		}
	}
}
f012f6b9:	90                   	nop
f012f6ba:	c9                   	leave  
f012f6bb:	c3                   	ret    

f012f6bc <chksch>:

void chksch(uint8 onoff)
{
f012f6bc:	55                   	push   %ebp
f012f6bd:	89 e5                	mov    %esp,%ebp
f012f6bf:	83 ec 04             	sub    $0x4,%esp
f012f6c2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6c5:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012f6c8:	c7 05 f0 84 6e f0 00 	movl   $0x0,0xf06e84f0
f012f6cf:	00 00 00 
	__ne = NULL;
f012f6d2:	c7 05 94 84 6e f0 00 	movl   $0x0,0xf06e8494
f012f6d9:	00 00 00 
	__pl = 0 ;
f012f6dc:	c6 05 04 01 68 f0 00 	movb   $0x0,0xf0680104
	__nl = 0 ;
f012f6e3:	c6 05 04 85 6e f0 00 	movb   $0x0,0xf06e8504
	__chkstatus = onoff;
f012f6ea:	8a 45 fc             	mov    -0x4(%ebp),%al
f012f6ed:	a2 90 84 6e f0       	mov    %al,0xf06e8490
}
f012f6f2:	90                   	nop
f012f6f3:	c9                   	leave  
f012f6f4:	c3                   	ret    

f012f6f5 <chk1>:
void chk1()
{
f012f6f5:	55                   	push   %ebp
f012f6f6:	89 e5                	mov    %esp,%ebp
f012f6f8:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012f6fb:	a0 90 84 6e f0       	mov    0xf06e8490,%al
f012f700:	84 c0                	test   %al,%al
f012f702:	74 2b                	je     f012f72f <chk1+0x3a>
		return ;
	__pe = curenv;
f012f704:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f709:	a3 f0 84 6e f0       	mov    %eax,0xf06e84f0
	__pl = __nl ;
f012f70e:	a0 04 85 6e f0       	mov    0xf06e8504,%al
f012f713:	a2 04 01 68 f0       	mov    %al,0xf0680104
	if (__pe == NULL)
f012f718:	a1 f0 84 6e f0       	mov    0xf06e84f0,%eax
f012f71d:	85 c0                	test   %eax,%eax
f012f71f:	75 07                	jne    f012f728 <chk1+0x33>
	{
		__pl = 0;
f012f721:	c6 05 04 01 68 f0 00 	movb   $0x0,0xf0680104
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012f728:	e8 92 fe ff ff       	call   f012f5bf <schenv>
f012f72d:	eb 01                	jmp    f012f730 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012f72f:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012f730:	c9                   	leave  
f012f731:	c3                   	ret    

f012f732 <chk2>:
void chk2(struct Env* __se)
{
f012f732:	55                   	push   %ebp
f012f733:	89 e5                	mov    %esp,%ebp
f012f735:	53                   	push   %ebx
f012f736:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012f739:	a0 90 84 6e f0       	mov    0xf06e8490,%al
f012f73e:	84 c0                	test   %al,%al
f012f740:	0f 84 35 02 00 00    	je     f012f97b <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012f746:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f74b:	39 45 08             	cmp    %eax,0x8(%ebp)
f012f74e:	74 19                	je     f012f769 <chk2+0x37>
f012f750:	68 35 bf 13 f0       	push   $0xf013bf35
f012f755:	68 42 bf 13 f0       	push   $0xf013bf42
f012f75a:	68 c0 00 00 00       	push   $0xc0
f012f75f:	68 57 bf 13 f0       	push   $0xf013bf57
f012f764:	e8 ac 0a fd ff       	call   f0100215 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012f769:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f76e:	85 c0                	test   %eax,%eax
f012f770:	0f 84 1b 01 00 00    	je     f012f891 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012f776:	a0 04 85 6e f0       	mov    0xf06e8504,%al
f012f77b:	0f b6 c0             	movzbl %al,%eax
f012f77e:	8a 80 88 84 6e f0    	mov    -0xf917b78(%eax),%al
f012f784:	0f b6 d8             	movzbl %al,%ebx
f012f787:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012f78c:	99                   	cltd   
f012f78d:	f7 fb                	idiv   %ebx
f012f78f:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012f795:	a0 04 85 6e f0       	mov    0xf06e8504,%al
f012f79a:	0f b6 c0             	movzbl %al,%eax
f012f79d:	8a 80 88 84 6e f0    	mov    -0xf917b78(%eax),%al
f012f7a3:	0f b6 d8             	movzbl %al,%ebx
f012f7a6:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012f7ab:	99                   	cltd   
f012f7ac:	f7 fb                	idiv   %ebx
f012f7ae:	89 c3                	mov    %eax,%ebx
f012f7b0:	89 c8                	mov    %ecx,%eax
f012f7b2:	99                   	cltd   
f012f7b3:	f7 fb                	idiv   %ebx
f012f7b5:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012f7b9:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f7bd:	83 e0 01             	and    $0x1,%eax
f012f7c0:	66 85 c0             	test   %ax,%ax
f012f7c3:	74 07                	je     f012f7cc <chk2+0x9a>
f012f7c5:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f7c9:	40                   	inc    %eax
f012f7ca:	eb 04                	jmp    f012f7d0 <chk2+0x9e>
f012f7cc:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f7d0:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012f7d4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012f7d8:	89 d0                	mov    %edx,%eax
f012f7da:	c1 e0 02             	shl    $0x2,%eax
f012f7dd:	01 d0                	add    %edx,%eax
f012f7df:	01 c0                	add    %eax,%eax
f012f7e1:	01 d0                	add    %edx,%eax
f012f7e3:	c1 e0 02             	shl    $0x2,%eax
f012f7e6:	01 d0                	add    %edx,%eax
f012f7e8:	01 c0                	add    %eax,%eax
f012f7ea:	89 c1                	mov    %eax,%ecx
f012f7ec:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f7f1:	f7 e9                	imul   %ecx
f012f7f3:	c1 fa 05             	sar    $0x5,%edx
f012f7f6:	89 c8                	mov    %ecx,%eax
f012f7f8:	c1 f8 1f             	sar    $0x1f,%eax
f012f7fb:	29 c2                	sub    %eax,%edx
f012f7fd:	89 d0                	mov    %edx,%eax
f012f7ff:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012f803:	e8 68 4a fd ff       	call   f0104270 <kclock_read_cnt0>
f012f808:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012f80c:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012f810:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012f814:	76 0a                	jbe    f012f820 <chk2+0xee>
f012f816:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012f81a:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012f81e:	76 19                	jbe    f012f839 <chk2+0x107>
f012f820:	68 70 bf 13 f0       	push   $0xf013bf70
f012f825:	68 42 bf 13 f0       	push   $0xf013bf42
f012f82a:	68 ca 00 00 00       	push   $0xca
f012f82f:	68 57 bf 13 f0       	push   $0xf013bf57
f012f834:	e8 dc 09 fd ff       	call   f0100215 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012f839:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f840:	eb 42                	jmp    f012f884 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012f842:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f847:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f84a:	89 c2                	mov    %eax,%edx
f012f84c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f84f:	c1 e0 04             	shl    $0x4,%eax
f012f852:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f857:	83 ec 08             	sub    $0x8,%esp
f012f85a:	52                   	push   %edx
f012f85b:	50                   	push   %eax
f012f85c:	e8 10 4d fd ff       	call   f0104571 <find_env_in_queue>
f012f861:	83 c4 10             	add    $0x10,%esp
f012f864:	85 c0                	test   %eax,%eax
f012f866:	74 19                	je     f012f881 <chk2+0x14f>
f012f868:	68 94 bf 13 f0       	push   $0xf013bf94
f012f86d:	68 42 bf 13 f0       	push   $0xf013bf42
f012f872:	68 ce 00 00 00       	push   $0xce
f012f877:	68 57 bf 13 f0       	push   $0xf013bf57
f012f87c:	e8 94 09 fd ff       	call   f0100215 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012f881:	ff 45 f4             	incl   -0xc(%ebp)
f012f884:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012f889:	0f b6 c0             	movzbl %al,%eax
f012f88c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f88f:	7f b1                	jg     f012f842 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012f891:	a1 f0 84 6e f0       	mov    0xf06e84f0,%eax
f012f896:	85 c0                	test   %eax,%eax
f012f898:	0f 84 de 00 00 00    	je     f012f97c <chk2+0x24a>
f012f89e:	8b 15 f0 84 6e f0    	mov    0xf06e84f0,%edx
f012f8a4:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f8a9:	39 c2                	cmp    %eax,%edx
f012f8ab:	0f 84 cb 00 00 00    	je     f012f97c <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012f8b1:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f8b6:	0f b6 c0             	movzbl %al,%eax
f012f8b9:	8a 15 dc 84 6e f0    	mov    0xf06e84dc,%dl
f012f8bf:	0f b6 d2             	movzbl %dl,%edx
f012f8c2:	4a                   	dec    %edx
f012f8c3:	39 d0                	cmp    %edx,%eax
f012f8c5:	74 08                	je     f012f8cf <chk2+0x19d>
f012f8c7:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f8cc:	40                   	inc    %eax
f012f8cd:	eb 05                	jmp    f012f8d4 <chk2+0x1a2>
f012f8cf:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f8d4:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012f8d7:	a1 f0 84 6e f0       	mov    0xf06e84f0,%eax
f012f8dc:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f8df:	89 c2                	mov    %eax,%edx
f012f8e1:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012f8e5:	c1 e0 04             	shl    $0x4,%eax
f012f8e8:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f8ed:	83 ec 08             	sub    $0x8,%esp
f012f8f0:	52                   	push   %edx
f012f8f1:	50                   	push   %eax
f012f8f2:	e8 7a 4c fd ff       	call   f0104571 <find_env_in_queue>
f012f8f7:	83 c4 10             	add    $0x10,%esp
f012f8fa:	85 c0                	test   %eax,%eax
f012f8fc:	75 19                	jne    f012f917 <chk2+0x1e5>
f012f8fe:	68 d4 bf 13 f0       	push   $0xf013bfd4
f012f903:	68 42 bf 13 f0       	push   $0xf013bf42
f012f908:	68 d4 00 00 00       	push   $0xd4
f012f90d:	68 57 bf 13 f0       	push   $0xf013bf57
f012f912:	e8 fe 08 fd ff       	call   f0100215 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012f917:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012f91e:	eb 4c                	jmp    f012f96c <chk2+0x23a>
		{
			if (i == __tl) continue;
f012f920:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012f924:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f927:	74 3f                	je     f012f968 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012f929:	a1 f0 84 6e f0       	mov    0xf06e84f0,%eax
f012f92e:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f931:	89 c2                	mov    %eax,%edx
f012f933:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f936:	c1 e0 04             	shl    $0x4,%eax
f012f939:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f93e:	83 ec 08             	sub    $0x8,%esp
f012f941:	52                   	push   %edx
f012f942:	50                   	push   %eax
f012f943:	e8 29 4c fd ff       	call   f0104571 <find_env_in_queue>
f012f948:	83 c4 10             	add    $0x10,%esp
f012f94b:	85 c0                	test   %eax,%eax
f012f94d:	74 1a                	je     f012f969 <chk2+0x237>
f012f94f:	68 18 c0 13 f0       	push   $0xf013c018
f012f954:	68 42 bf 13 f0       	push   $0xf013bf42
f012f959:	68 d8 00 00 00       	push   $0xd8
f012f95e:	68 57 bf 13 f0       	push   $0xf013bf57
f012f963:	e8 ad 08 fd ff       	call   f0100215 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012f968:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012f969:	ff 45 f0             	incl   -0x10(%ebp)
f012f96c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012f971:	0f b6 c0             	movzbl %al,%eax
f012f974:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f977:	7f a7                	jg     f012f920 <chk2+0x1ee>
f012f979:	eb 01                	jmp    f012f97c <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012f97b:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012f97c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012f97f:	c9                   	leave  
f012f980:	c3                   	ret    

f012f981 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012f981:	55                   	push   %ebp
f012f982:	89 e5                	mov    %esp,%ebp
f012f984:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012f987:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f98e:	eb 40                	jmp    f012f9d0 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012f990:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f993:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012f999:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012f99e:	83 ec 08             	sub    $0x8,%esp
f012f9a1:	52                   	push   %edx
f012f9a2:	50                   	push   %eax
f012f9a3:	e8 92 01 00 00       	call   f012fb3a <check_va2pa>
f012f9a8:	83 c4 10             	add    $0x10,%esp
f012f9ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f9ae:	74 19                	je     f012f9c9 <check_boot_pgdir+0x48>
f012f9b0:	68 58 c0 13 f0       	push   $0xf013c058
f012f9b5:	68 42 bf 13 f0       	push   $0xf013bf42
f012f9ba:	68 ff 00 00 00       	push   $0xff
f012f9bf:	68 57 bf 13 f0       	push   $0xf013bf57
f012f9c4:	e8 dd 07 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012f9c9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012f9d0:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012f9d7:	75 b7                	jne    f012f990 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012f9d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f9e0:	eb 74                	jmp    f012fa56 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012f9e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f9e5:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012f9eb:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012f9f0:	83 ec 08             	sub    $0x8,%esp
f012f9f3:	52                   	push   %edx
f012f9f4:	50                   	push   %eax
f012f9f5:	e8 40 01 00 00       	call   f012fb3a <check_va2pa>
f012f9fa:	83 c4 10             	add    $0x10,%esp
f012f9fd:	c7 45 f0 00 80 18 f0 	movl   $0xf0188000,-0x10(%ebp)
f012fa04:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012fa0b:	77 17                	ja     f012fa24 <check_boot_pgdir+0xa3>
f012fa0d:	ff 75 f0             	pushl  -0x10(%ebp)
f012fa10:	68 90 c0 13 f0       	push   $0xf013c090
f012fa15:	68 04 01 00 00       	push   $0x104
f012fa1a:	68 57 bf 13 f0       	push   $0xf013bf57
f012fa1f:	e8 82 07 fd ff       	call   f01001a6 <_panic>
f012fa24:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fa27:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012fa2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fa30:	01 ca                	add    %ecx,%edx
f012fa32:	39 d0                	cmp    %edx,%eax
f012fa34:	74 19                	je     f012fa4f <check_boot_pgdir+0xce>
f012fa36:	68 c4 c0 13 f0       	push   $0xf013c0c4
f012fa3b:	68 42 bf 13 f0       	push   $0xf013bf42
f012fa40:	68 04 01 00 00       	push   $0x104
f012fa45:	68 57 bf 13 f0       	push   $0xf013bf57
f012fa4a:	e8 57 07 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012fa4f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012fa56:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012fa5d:	76 83                	jbe    f012f9e2 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012fa5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fa66:	e9 af 00 00 00       	jmp    f012fb1a <check_boot_pgdir+0x199>
		switch (i) {
f012fa6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa6e:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012fa73:	74 11                	je     f012fa86 <check_boot_pgdir+0x105>
f012fa75:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012fa7a:	72 36                	jb     f012fab2 <check_boot_pgdir+0x131>
f012fa7c:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012fa81:	83 f8 02             	cmp    $0x2,%eax
f012fa84:	77 2c                	ja     f012fab2 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012fa86:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012fa8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fa8e:	c1 e2 02             	shl    $0x2,%edx
f012fa91:	01 d0                	add    %edx,%eax
f012fa93:	8b 00                	mov    (%eax),%eax
f012fa95:	85 c0                	test   %eax,%eax
f012fa97:	75 7a                	jne    f012fb13 <check_boot_pgdir+0x192>
f012fa99:	68 46 c1 13 f0       	push   $0xf013c146
f012fa9e:	68 42 bf 13 f0       	push   $0xf013bf42
f012faa3:	68 0f 01 00 00       	push   $0x10f
f012faa8:	68 57 bf 13 f0       	push   $0xf013bf57
f012faad:	e8 f4 06 fd ff       	call   f01001a6 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012fab2:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012fab9:	76 2c                	jbe    f012fae7 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012fabb:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012fac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fac3:	c1 e2 02             	shl    $0x2,%edx
f012fac6:	01 d0                	add    %edx,%eax
f012fac8:	8b 00                	mov    (%eax),%eax
f012faca:	85 c0                	test   %eax,%eax
f012facc:	75 48                	jne    f012fb16 <check_boot_pgdir+0x195>
f012face:	68 46 c1 13 f0       	push   $0xf013c146
f012fad3:	68 42 bf 13 f0       	push   $0xf013bf42
f012fad8:	68 13 01 00 00       	push   $0x113
f012fadd:	68 57 bf 13 f0       	push   $0xf013bf57
f012fae2:	e8 bf 06 fd ff       	call   f01001a6 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012fae7:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012faec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012faef:	c1 e2 02             	shl    $0x2,%edx
f012faf2:	01 d0                	add    %edx,%eax
f012faf4:	8b 00                	mov    (%eax),%eax
f012faf6:	85 c0                	test   %eax,%eax
f012faf8:	74 1c                	je     f012fb16 <check_boot_pgdir+0x195>
f012fafa:	68 5c c1 13 f0       	push   $0xf013c15c
f012faff:	68 42 bf 13 f0       	push   $0xf013bf42
f012fb04:	68 15 01 00 00       	push   $0x115
f012fb09:	68 57 bf 13 f0       	push   $0xf013bf57
f012fb0e:	e8 93 06 fd ff       	call   f01001a6 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012fb13:	90                   	nop
f012fb14:	eb 01                	jmp    f012fb17 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012fb16:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012fb17:	ff 45 f4             	incl   -0xc(%ebp)
f012fb1a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012fb21:	0f 86 44 ff ff ff    	jbe    f012fa6b <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012fb27:	83 ec 0c             	sub    $0xc,%esp
f012fb2a:	68 78 c1 13 f0       	push   $0xf013c178
f012fb2f:	e8 f9 10 fd ff       	call   f0100c2d <cprintf>
f012fb34:	83 c4 10             	add    $0x10,%esp
}
f012fb37:	90                   	nop
f012fb38:	c9                   	leave  
f012fb39:	c3                   	ret    

f012fb3a <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012fb3a:	55                   	push   %ebp
f012fb3b:	89 e5                	mov    %esp,%ebp
f012fb3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012fb40:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fb43:	c1 e8 16             	shr    $0x16,%eax
f012fb46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fb4d:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb50:	01 d0                	add    %edx,%eax
f012fb52:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012fb55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb58:	8b 00                	mov    (%eax),%eax
f012fb5a:	83 e0 01             	and    $0x1,%eax
f012fb5d:	85 c0                	test   %eax,%eax
f012fb5f:	75 0a                	jne    f012fb6b <check_va2pa+0x31>
		return ~0;
f012fb61:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012fb66:	e9 87 00 00 00       	jmp    f012fbf2 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012fb6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb6e:	8b 00                	mov    (%eax),%eax
f012fb70:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012fb75:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fb78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fb7b:	c1 e8 0c             	shr    $0xc,%eax
f012fb7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012fb81:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f012fb86:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012fb89:	72 17                	jb     f012fba2 <check_va2pa+0x68>
f012fb8b:	ff 75 f0             	pushl  -0x10(%ebp)
f012fb8e:	68 98 c1 13 f0       	push   $0xf013c198
f012fb93:	68 2b 01 00 00       	push   $0x12b
f012fb98:	68 57 bf 13 f0       	push   $0xf013bf57
f012fb9d:	e8 04 06 fd ff       	call   f01001a6 <_panic>
f012fba2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fba5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012fbaa:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012fbad:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fbb0:	c1 e8 0c             	shr    $0xc,%eax
f012fbb3:	25 ff 03 00 00       	and    $0x3ff,%eax
f012fbb8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fbbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fbc2:	01 d0                	add    %edx,%eax
f012fbc4:	8b 00                	mov    (%eax),%eax
f012fbc6:	83 e0 01             	and    $0x1,%eax
f012fbc9:	85 c0                	test   %eax,%eax
f012fbcb:	75 07                	jne    f012fbd4 <check_va2pa+0x9a>
		return ~0;
f012fbcd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012fbd2:	eb 1e                	jmp    f012fbf2 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012fbd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fbd7:	c1 e8 0c             	shr    $0xc,%eax
f012fbda:	25 ff 03 00 00       	and    $0x3ff,%eax
f012fbdf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fbe6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fbe9:	01 d0                	add    %edx,%eax
f012fbeb:	8b 00                	mov    (%eax),%eax
f012fbed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012fbf2:	c9                   	leave  
f012fbf3:	c3                   	ret    

f012fbf4 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012fbf4:	55                   	push   %ebp
f012fbf5:	89 e5                	mov    %esp,%ebp
f012fbf7:	53                   	push   %ebx
f012fbf8:	83 ec 14             	sub    $0x14,%esp
f012fbfb:	8b 45 10             	mov    0x10(%ebp),%eax
f012fbfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fc01:	8b 45 14             	mov    0x14(%ebp),%eax
f012fc04:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012fc07:	8b 45 18             	mov    0x18(%ebp),%eax
f012fc0a:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc0f:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012fc12:	77 55                	ja     f012fc69 <printnum+0x75>
f012fc14:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012fc17:	72 05                	jb     f012fc1e <printnum+0x2a>
f012fc19:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fc1c:	77 4b                	ja     f012fc69 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012fc1e:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012fc21:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012fc24:	8b 45 18             	mov    0x18(%ebp),%eax
f012fc27:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc2c:	52                   	push   %edx
f012fc2d:	50                   	push   %eax
f012fc2e:	ff 75 f4             	pushl  -0xc(%ebp)
f012fc31:	ff 75 f0             	pushl  -0x10(%ebp)
f012fc34:	e8 e3 27 00 00       	call   f013241c <__udivdi3>
f012fc39:	83 c4 10             	add    $0x10,%esp
f012fc3c:	83 ec 04             	sub    $0x4,%esp
f012fc3f:	ff 75 20             	pushl  0x20(%ebp)
f012fc42:	53                   	push   %ebx
f012fc43:	ff 75 18             	pushl  0x18(%ebp)
f012fc46:	52                   	push   %edx
f012fc47:	50                   	push   %eax
f012fc48:	ff 75 0c             	pushl  0xc(%ebp)
f012fc4b:	ff 75 08             	pushl  0x8(%ebp)
f012fc4e:	e8 a1 ff ff ff       	call   f012fbf4 <printnum>
f012fc53:	83 c4 20             	add    $0x20,%esp
f012fc56:	eb 1a                	jmp    f012fc72 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012fc58:	83 ec 08             	sub    $0x8,%esp
f012fc5b:	ff 75 0c             	pushl  0xc(%ebp)
f012fc5e:	ff 75 20             	pushl  0x20(%ebp)
f012fc61:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc64:	ff d0                	call   *%eax
f012fc66:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012fc69:	ff 4d 1c             	decl   0x1c(%ebp)
f012fc6c:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012fc70:	7f e6                	jg     f012fc58 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012fc72:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012fc75:	bb 00 00 00 00       	mov    $0x0,%ebx
f012fc7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fc7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fc80:	53                   	push   %ebx
f012fc81:	51                   	push   %ecx
f012fc82:	52                   	push   %edx
f012fc83:	50                   	push   %eax
f012fc84:	e8 a3 28 00 00       	call   f013252c <__umoddi3>
f012fc89:	83 c4 10             	add    $0x10,%esp
f012fc8c:	05 f4 c3 13 f0       	add    $0xf013c3f4,%eax
f012fc91:	8a 00                	mov    (%eax),%al
f012fc93:	0f be c0             	movsbl %al,%eax
f012fc96:	83 ec 08             	sub    $0x8,%esp
f012fc99:	ff 75 0c             	pushl  0xc(%ebp)
f012fc9c:	50                   	push   %eax
f012fc9d:	8b 45 08             	mov    0x8(%ebp),%eax
f012fca0:	ff d0                	call   *%eax
f012fca2:	83 c4 10             	add    $0x10,%esp
}
f012fca5:	90                   	nop
f012fca6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012fca9:	c9                   	leave  
f012fcaa:	c3                   	ret    

f012fcab <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012fcab:	55                   	push   %ebp
f012fcac:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012fcae:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012fcb2:	7e 1c                	jle    f012fcd0 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012fcb4:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcb7:	8b 00                	mov    (%eax),%eax
f012fcb9:	8d 50 08             	lea    0x8(%eax),%edx
f012fcbc:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcbf:	89 10                	mov    %edx,(%eax)
f012fcc1:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcc4:	8b 00                	mov    (%eax),%eax
f012fcc6:	83 e8 08             	sub    $0x8,%eax
f012fcc9:	8b 50 04             	mov    0x4(%eax),%edx
f012fccc:	8b 00                	mov    (%eax),%eax
f012fcce:	eb 40                	jmp    f012fd10 <getuint+0x65>
	else if (lflag)
f012fcd0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fcd4:	74 1e                	je     f012fcf4 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012fcd6:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcd9:	8b 00                	mov    (%eax),%eax
f012fcdb:	8d 50 04             	lea    0x4(%eax),%edx
f012fcde:	8b 45 08             	mov    0x8(%ebp),%eax
f012fce1:	89 10                	mov    %edx,(%eax)
f012fce3:	8b 45 08             	mov    0x8(%ebp),%eax
f012fce6:	8b 00                	mov    (%eax),%eax
f012fce8:	83 e8 04             	sub    $0x4,%eax
f012fceb:	8b 00                	mov    (%eax),%eax
f012fced:	ba 00 00 00 00       	mov    $0x0,%edx
f012fcf2:	eb 1c                	jmp    f012fd10 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012fcf4:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcf7:	8b 00                	mov    (%eax),%eax
f012fcf9:	8d 50 04             	lea    0x4(%eax),%edx
f012fcfc:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcff:	89 10                	mov    %edx,(%eax)
f012fd01:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd04:	8b 00                	mov    (%eax),%eax
f012fd06:	83 e8 04             	sub    $0x4,%eax
f012fd09:	8b 00                	mov    (%eax),%eax
f012fd0b:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012fd10:	5d                   	pop    %ebp
f012fd11:	c3                   	ret    

f012fd12 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012fd12:	55                   	push   %ebp
f012fd13:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012fd15:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012fd19:	7e 1c                	jle    f012fd37 <getint+0x25>
		return va_arg(*ap, long long);
f012fd1b:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd1e:	8b 00                	mov    (%eax),%eax
f012fd20:	8d 50 08             	lea    0x8(%eax),%edx
f012fd23:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd26:	89 10                	mov    %edx,(%eax)
f012fd28:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd2b:	8b 00                	mov    (%eax),%eax
f012fd2d:	83 e8 08             	sub    $0x8,%eax
f012fd30:	8b 50 04             	mov    0x4(%eax),%edx
f012fd33:	8b 00                	mov    (%eax),%eax
f012fd35:	eb 38                	jmp    f012fd6f <getint+0x5d>
	else if (lflag)
f012fd37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fd3b:	74 1a                	je     f012fd57 <getint+0x45>
		return va_arg(*ap, long);
f012fd3d:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd40:	8b 00                	mov    (%eax),%eax
f012fd42:	8d 50 04             	lea    0x4(%eax),%edx
f012fd45:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd48:	89 10                	mov    %edx,(%eax)
f012fd4a:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd4d:	8b 00                	mov    (%eax),%eax
f012fd4f:	83 e8 04             	sub    $0x4,%eax
f012fd52:	8b 00                	mov    (%eax),%eax
f012fd54:	99                   	cltd   
f012fd55:	eb 18                	jmp    f012fd6f <getint+0x5d>
	else
		return va_arg(*ap, int);
f012fd57:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd5a:	8b 00                	mov    (%eax),%eax
f012fd5c:	8d 50 04             	lea    0x4(%eax),%edx
f012fd5f:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd62:	89 10                	mov    %edx,(%eax)
f012fd64:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd67:	8b 00                	mov    (%eax),%eax
f012fd69:	83 e8 04             	sub    $0x4,%eax
f012fd6c:	8b 00                	mov    (%eax),%eax
f012fd6e:	99                   	cltd   
}
f012fd6f:	5d                   	pop    %ebp
f012fd70:	c3                   	ret    

f012fd71 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012fd71:	55                   	push   %ebp
f012fd72:	89 e5                	mov    %esp,%ebp
f012fd74:	56                   	push   %esi
f012fd75:	53                   	push   %ebx
f012fd76:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012fd79:	eb 17                	jmp    f012fd92 <vprintfmt+0x21>
			if (ch == '\0')
f012fd7b:	85 db                	test   %ebx,%ebx
f012fd7d:	0f 84 af 03 00 00    	je     f0130132 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012fd83:	83 ec 08             	sub    $0x8,%esp
f012fd86:	ff 75 0c             	pushl  0xc(%ebp)
f012fd89:	53                   	push   %ebx
f012fd8a:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd8d:	ff d0                	call   *%eax
f012fd8f:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012fd92:	8b 45 10             	mov    0x10(%ebp),%eax
f012fd95:	8d 50 01             	lea    0x1(%eax),%edx
f012fd98:	89 55 10             	mov    %edx,0x10(%ebp)
f012fd9b:	8a 00                	mov    (%eax),%al
f012fd9d:	0f b6 d8             	movzbl %al,%ebx
f012fda0:	83 fb 25             	cmp    $0x25,%ebx
f012fda3:	75 d6                	jne    f012fd7b <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012fda5:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012fda9:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012fdb0:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012fdb7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012fdbe:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012fdc5:	8b 45 10             	mov    0x10(%ebp),%eax
f012fdc8:	8d 50 01             	lea    0x1(%eax),%edx
f012fdcb:	89 55 10             	mov    %edx,0x10(%ebp)
f012fdce:	8a 00                	mov    (%eax),%al
f012fdd0:	0f b6 d8             	movzbl %al,%ebx
f012fdd3:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012fdd6:	83 f8 55             	cmp    $0x55,%eax
f012fdd9:	0f 87 2b 03 00 00    	ja     f013010a <vprintfmt+0x399>
f012fddf:	8b 04 85 18 c4 13 f0 	mov    -0xfec3be8(,%eax,4),%eax
f012fde6:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012fde8:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012fdec:	eb d7                	jmp    f012fdc5 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012fdee:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012fdf2:	eb d1                	jmp    f012fdc5 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012fdf4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012fdfb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012fdfe:	89 d0                	mov    %edx,%eax
f012fe00:	c1 e0 02             	shl    $0x2,%eax
f012fe03:	01 d0                	add    %edx,%eax
f012fe05:	01 c0                	add    %eax,%eax
f012fe07:	01 d8                	add    %ebx,%eax
f012fe09:	83 e8 30             	sub    $0x30,%eax
f012fe0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012fe0f:	8b 45 10             	mov    0x10(%ebp),%eax
f012fe12:	8a 00                	mov    (%eax),%al
f012fe14:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012fe17:	83 fb 2f             	cmp    $0x2f,%ebx
f012fe1a:	7e 3e                	jle    f012fe5a <vprintfmt+0xe9>
f012fe1c:	83 fb 39             	cmp    $0x39,%ebx
f012fe1f:	7f 39                	jg     f012fe5a <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012fe21:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012fe24:	eb d5                	jmp    f012fdfb <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012fe26:	8b 45 14             	mov    0x14(%ebp),%eax
f012fe29:	83 c0 04             	add    $0x4,%eax
f012fe2c:	89 45 14             	mov    %eax,0x14(%ebp)
f012fe2f:	8b 45 14             	mov    0x14(%ebp),%eax
f012fe32:	83 e8 04             	sub    $0x4,%eax
f012fe35:	8b 00                	mov    (%eax),%eax
f012fe37:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012fe3a:	eb 1f                	jmp    f012fe5b <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012fe3c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fe40:	79 83                	jns    f012fdc5 <vprintfmt+0x54>
				width = 0;
f012fe42:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012fe49:	e9 77 ff ff ff       	jmp    f012fdc5 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012fe4e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012fe55:	e9 6b ff ff ff       	jmp    f012fdc5 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012fe5a:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012fe5b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fe5f:	0f 89 60 ff ff ff    	jns    f012fdc5 <vprintfmt+0x54>
				width = precision, precision = -1;
f012fe65:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fe68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fe6b:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012fe72:	e9 4e ff ff ff       	jmp    f012fdc5 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012fe77:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012fe7a:	e9 46 ff ff ff       	jmp    f012fdc5 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012fe7f:	8b 45 14             	mov    0x14(%ebp),%eax
f012fe82:	83 c0 04             	add    $0x4,%eax
f012fe85:	89 45 14             	mov    %eax,0x14(%ebp)
f012fe88:	8b 45 14             	mov    0x14(%ebp),%eax
f012fe8b:	83 e8 04             	sub    $0x4,%eax
f012fe8e:	8b 00                	mov    (%eax),%eax
f012fe90:	83 ec 08             	sub    $0x8,%esp
f012fe93:	ff 75 0c             	pushl  0xc(%ebp)
f012fe96:	50                   	push   %eax
f012fe97:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe9a:	ff d0                	call   *%eax
f012fe9c:	83 c4 10             	add    $0x10,%esp
			break;
f012fe9f:	e9 89 02 00 00       	jmp    f013012d <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012fea4:	8b 45 14             	mov    0x14(%ebp),%eax
f012fea7:	83 c0 04             	add    $0x4,%eax
f012feaa:	89 45 14             	mov    %eax,0x14(%ebp)
f012fead:	8b 45 14             	mov    0x14(%ebp),%eax
f012feb0:	83 e8 04             	sub    $0x4,%eax
f012feb3:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012feb5:	85 db                	test   %ebx,%ebx
f012feb7:	79 02                	jns    f012febb <vprintfmt+0x14a>
				err = -err;
f012feb9:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012febb:	83 fb 64             	cmp    $0x64,%ebx
f012febe:	7f 0b                	jg     f012fecb <vprintfmt+0x15a>
f012fec0:	8b 34 9d 60 c2 13 f0 	mov    -0xfec3da0(,%ebx,4),%esi
f012fec7:	85 f6                	test   %esi,%esi
f012fec9:	75 19                	jne    f012fee4 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012fecb:	53                   	push   %ebx
f012fecc:	68 05 c4 13 f0       	push   $0xf013c405
f012fed1:	ff 75 0c             	pushl  0xc(%ebp)
f012fed4:	ff 75 08             	pushl  0x8(%ebp)
f012fed7:	e8 5e 02 00 00       	call   f013013a <printfmt>
f012fedc:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012fedf:	e9 49 02 00 00       	jmp    f013012d <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012fee4:	56                   	push   %esi
f012fee5:	68 0e c4 13 f0       	push   $0xf013c40e
f012feea:	ff 75 0c             	pushl  0xc(%ebp)
f012feed:	ff 75 08             	pushl  0x8(%ebp)
f012fef0:	e8 45 02 00 00       	call   f013013a <printfmt>
f012fef5:	83 c4 10             	add    $0x10,%esp
			break;
f012fef8:	e9 30 02 00 00       	jmp    f013012d <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012fefd:	8b 45 14             	mov    0x14(%ebp),%eax
f012ff00:	83 c0 04             	add    $0x4,%eax
f012ff03:	89 45 14             	mov    %eax,0x14(%ebp)
f012ff06:	8b 45 14             	mov    0x14(%ebp),%eax
f012ff09:	83 e8 04             	sub    $0x4,%eax
f012ff0c:	8b 30                	mov    (%eax),%esi
f012ff0e:	85 f6                	test   %esi,%esi
f012ff10:	75 05                	jne    f012ff17 <vprintfmt+0x1a6>
				p = "(null)";
f012ff12:	be 11 c4 13 f0       	mov    $0xf013c411,%esi
			if (width > 0 && padc != '-')
f012ff17:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ff1b:	7e 6d                	jle    f012ff8a <vprintfmt+0x219>
f012ff1d:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012ff21:	74 67                	je     f012ff8a <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012ff23:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ff26:	83 ec 08             	sub    $0x8,%esp
f012ff29:	50                   	push   %eax
f012ff2a:	56                   	push   %esi
f012ff2b:	e8 12 05 00 00       	call   f0130442 <strnlen>
f012ff30:	83 c4 10             	add    $0x10,%esp
f012ff33:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012ff36:	eb 16                	jmp    f012ff4e <vprintfmt+0x1dd>
					putch(padc, putdat);
f012ff38:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012ff3c:	83 ec 08             	sub    $0x8,%esp
f012ff3f:	ff 75 0c             	pushl  0xc(%ebp)
f012ff42:	50                   	push   %eax
f012ff43:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff46:	ff d0                	call   *%eax
f012ff48:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012ff4b:	ff 4d e4             	decl   -0x1c(%ebp)
f012ff4e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ff52:	7f e4                	jg     f012ff38 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012ff54:	eb 34                	jmp    f012ff8a <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012ff56:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012ff5a:	74 1c                	je     f012ff78 <vprintfmt+0x207>
f012ff5c:	83 fb 1f             	cmp    $0x1f,%ebx
f012ff5f:	7e 05                	jle    f012ff66 <vprintfmt+0x1f5>
f012ff61:	83 fb 7e             	cmp    $0x7e,%ebx
f012ff64:	7e 12                	jle    f012ff78 <vprintfmt+0x207>
					putch('?', putdat);
f012ff66:	83 ec 08             	sub    $0x8,%esp
f012ff69:	ff 75 0c             	pushl  0xc(%ebp)
f012ff6c:	6a 3f                	push   $0x3f
f012ff6e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff71:	ff d0                	call   *%eax
f012ff73:	83 c4 10             	add    $0x10,%esp
f012ff76:	eb 0f                	jmp    f012ff87 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012ff78:	83 ec 08             	sub    $0x8,%esp
f012ff7b:	ff 75 0c             	pushl  0xc(%ebp)
f012ff7e:	53                   	push   %ebx
f012ff7f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff82:	ff d0                	call   *%eax
f012ff84:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012ff87:	ff 4d e4             	decl   -0x1c(%ebp)
f012ff8a:	89 f0                	mov    %esi,%eax
f012ff8c:	8d 70 01             	lea    0x1(%eax),%esi
f012ff8f:	8a 00                	mov    (%eax),%al
f012ff91:	0f be d8             	movsbl %al,%ebx
f012ff94:	85 db                	test   %ebx,%ebx
f012ff96:	74 24                	je     f012ffbc <vprintfmt+0x24b>
f012ff98:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012ff9c:	78 b8                	js     f012ff56 <vprintfmt+0x1e5>
f012ff9e:	ff 4d e0             	decl   -0x20(%ebp)
f012ffa1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012ffa5:	79 af                	jns    f012ff56 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012ffa7:	eb 13                	jmp    f012ffbc <vprintfmt+0x24b>
				putch(' ', putdat);
f012ffa9:	83 ec 08             	sub    $0x8,%esp
f012ffac:	ff 75 0c             	pushl  0xc(%ebp)
f012ffaf:	6a 20                	push   $0x20
f012ffb1:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffb4:	ff d0                	call   *%eax
f012ffb6:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012ffb9:	ff 4d e4             	decl   -0x1c(%ebp)
f012ffbc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ffc0:	7f e7                	jg     f012ffa9 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012ffc2:	e9 66 01 00 00       	jmp    f013012d <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012ffc7:	83 ec 08             	sub    $0x8,%esp
f012ffca:	ff 75 e8             	pushl  -0x18(%ebp)
f012ffcd:	8d 45 14             	lea    0x14(%ebp),%eax
f012ffd0:	50                   	push   %eax
f012ffd1:	e8 3c fd ff ff       	call   f012fd12 <getint>
f012ffd6:	83 c4 10             	add    $0x10,%esp
f012ffd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ffdc:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012ffdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ffe5:	85 d2                	test   %edx,%edx
f012ffe7:	79 23                	jns    f013000c <vprintfmt+0x29b>
				putch('-', putdat);
f012ffe9:	83 ec 08             	sub    $0x8,%esp
f012ffec:	ff 75 0c             	pushl  0xc(%ebp)
f012ffef:	6a 2d                	push   $0x2d
f012fff1:	8b 45 08             	mov    0x8(%ebp),%eax
f012fff4:	ff d0                	call   *%eax
f012fff6:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012fff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fffc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ffff:	f7 d8                	neg    %eax
f0130001:	83 d2 00             	adc    $0x0,%edx
f0130004:	f7 da                	neg    %edx
f0130006:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130009:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f013000c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130013:	e9 bc 00 00 00       	jmp    f01300d4 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0130018:	83 ec 08             	sub    $0x8,%esp
f013001b:	ff 75 e8             	pushl  -0x18(%ebp)
f013001e:	8d 45 14             	lea    0x14(%ebp),%eax
f0130021:	50                   	push   %eax
f0130022:	e8 84 fc ff ff       	call   f012fcab <getuint>
f0130027:	83 c4 10             	add    $0x10,%esp
f013002a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013002d:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0130030:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130037:	e9 98 00 00 00       	jmp    f01300d4 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f013003c:	83 ec 08             	sub    $0x8,%esp
f013003f:	ff 75 0c             	pushl  0xc(%ebp)
f0130042:	6a 58                	push   $0x58
f0130044:	8b 45 08             	mov    0x8(%ebp),%eax
f0130047:	ff d0                	call   *%eax
f0130049:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f013004c:	83 ec 08             	sub    $0x8,%esp
f013004f:	ff 75 0c             	pushl  0xc(%ebp)
f0130052:	6a 58                	push   $0x58
f0130054:	8b 45 08             	mov    0x8(%ebp),%eax
f0130057:	ff d0                	call   *%eax
f0130059:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f013005c:	83 ec 08             	sub    $0x8,%esp
f013005f:	ff 75 0c             	pushl  0xc(%ebp)
f0130062:	6a 58                	push   $0x58
f0130064:	8b 45 08             	mov    0x8(%ebp),%eax
f0130067:	ff d0                	call   *%eax
f0130069:	83 c4 10             	add    $0x10,%esp
			break;
f013006c:	e9 bc 00 00 00       	jmp    f013012d <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0130071:	83 ec 08             	sub    $0x8,%esp
f0130074:	ff 75 0c             	pushl  0xc(%ebp)
f0130077:	6a 30                	push   $0x30
f0130079:	8b 45 08             	mov    0x8(%ebp),%eax
f013007c:	ff d0                	call   *%eax
f013007e:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0130081:	83 ec 08             	sub    $0x8,%esp
f0130084:	ff 75 0c             	pushl  0xc(%ebp)
f0130087:	6a 78                	push   $0x78
f0130089:	8b 45 08             	mov    0x8(%ebp),%eax
f013008c:	ff d0                	call   *%eax
f013008e:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0130091:	8b 45 14             	mov    0x14(%ebp),%eax
f0130094:	83 c0 04             	add    $0x4,%eax
f0130097:	89 45 14             	mov    %eax,0x14(%ebp)
f013009a:	8b 45 14             	mov    0x14(%ebp),%eax
f013009d:	83 e8 04             	sub    $0x4,%eax
f01300a0:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f01300a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01300a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f01300ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f01300b3:	eb 1f                	jmp    f01300d4 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f01300b5:	83 ec 08             	sub    $0x8,%esp
f01300b8:	ff 75 e8             	pushl  -0x18(%ebp)
f01300bb:	8d 45 14             	lea    0x14(%ebp),%eax
f01300be:	50                   	push   %eax
f01300bf:	e8 e7 fb ff ff       	call   f012fcab <getuint>
f01300c4:	83 c4 10             	add    $0x10,%esp
f01300c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01300ca:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01300cd:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01300d4:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01300d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01300db:	83 ec 04             	sub    $0x4,%esp
f01300de:	52                   	push   %edx
f01300df:	ff 75 e4             	pushl  -0x1c(%ebp)
f01300e2:	50                   	push   %eax
f01300e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01300e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01300e9:	ff 75 0c             	pushl  0xc(%ebp)
f01300ec:	ff 75 08             	pushl  0x8(%ebp)
f01300ef:	e8 00 fb ff ff       	call   f012fbf4 <printnum>
f01300f4:	83 c4 20             	add    $0x20,%esp
			break;
f01300f7:	eb 34                	jmp    f013012d <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01300f9:	83 ec 08             	sub    $0x8,%esp
f01300fc:	ff 75 0c             	pushl  0xc(%ebp)
f01300ff:	53                   	push   %ebx
f0130100:	8b 45 08             	mov    0x8(%ebp),%eax
f0130103:	ff d0                	call   *%eax
f0130105:	83 c4 10             	add    $0x10,%esp
			break;
f0130108:	eb 23                	jmp    f013012d <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f013010a:	83 ec 08             	sub    $0x8,%esp
f013010d:	ff 75 0c             	pushl  0xc(%ebp)
f0130110:	6a 25                	push   $0x25
f0130112:	8b 45 08             	mov    0x8(%ebp),%eax
f0130115:	ff d0                	call   *%eax
f0130117:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f013011a:	ff 4d 10             	decl   0x10(%ebp)
f013011d:	eb 03                	jmp    f0130122 <vprintfmt+0x3b1>
f013011f:	ff 4d 10             	decl   0x10(%ebp)
f0130122:	8b 45 10             	mov    0x10(%ebp),%eax
f0130125:	48                   	dec    %eax
f0130126:	8a 00                	mov    (%eax),%al
f0130128:	3c 25                	cmp    $0x25,%al
f013012a:	75 f3                	jne    f013011f <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f013012c:	90                   	nop
		}
	}
f013012d:	e9 47 fc ff ff       	jmp    f012fd79 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0130132:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0130133:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130136:	5b                   	pop    %ebx
f0130137:	5e                   	pop    %esi
f0130138:	5d                   	pop    %ebp
f0130139:	c3                   	ret    

f013013a <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f013013a:	55                   	push   %ebp
f013013b:	89 e5                	mov    %esp,%ebp
f013013d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0130140:	8d 45 10             	lea    0x10(%ebp),%eax
f0130143:	83 c0 04             	add    $0x4,%eax
f0130146:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130149:	8b 45 10             	mov    0x10(%ebp),%eax
f013014c:	ff 75 f4             	pushl  -0xc(%ebp)
f013014f:	50                   	push   %eax
f0130150:	ff 75 0c             	pushl  0xc(%ebp)
f0130153:	ff 75 08             	pushl  0x8(%ebp)
f0130156:	e8 16 fc ff ff       	call   f012fd71 <vprintfmt>
f013015b:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f013015e:	90                   	nop
f013015f:	c9                   	leave  
f0130160:	c3                   	ret    

f0130161 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0130161:	55                   	push   %ebp
f0130162:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0130164:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130167:	8b 40 08             	mov    0x8(%eax),%eax
f013016a:	8d 50 01             	lea    0x1(%eax),%edx
f013016d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130170:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0130173:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130176:	8b 10                	mov    (%eax),%edx
f0130178:	8b 45 0c             	mov    0xc(%ebp),%eax
f013017b:	8b 40 04             	mov    0x4(%eax),%eax
f013017e:	39 c2                	cmp    %eax,%edx
f0130180:	73 12                	jae    f0130194 <sprintputch+0x33>
		*b->buf++ = ch;
f0130182:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130185:	8b 00                	mov    (%eax),%eax
f0130187:	8d 48 01             	lea    0x1(%eax),%ecx
f013018a:	8b 55 0c             	mov    0xc(%ebp),%edx
f013018d:	89 0a                	mov    %ecx,(%edx)
f013018f:	8b 55 08             	mov    0x8(%ebp),%edx
f0130192:	88 10                	mov    %dl,(%eax)
}
f0130194:	90                   	nop
f0130195:	5d                   	pop    %ebp
f0130196:	c3                   	ret    

f0130197 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0130197:	55                   	push   %ebp
f0130198:	89 e5                	mov    %esp,%ebp
f013019a:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f013019d:	8b 45 08             	mov    0x8(%ebp),%eax
f01301a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01301a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01301a6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01301a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01301ac:	01 d0                	add    %edx,%eax
f01301ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01301b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01301b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01301bc:	74 06                	je     f01301c4 <vsnprintf+0x2d>
f01301be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01301c2:	7f 07                	jg     f01301cb <vsnprintf+0x34>
		return -E_INVAL;
f01301c4:	b8 03 00 00 00       	mov    $0x3,%eax
f01301c9:	eb 20                	jmp    f01301eb <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01301cb:	ff 75 14             	pushl  0x14(%ebp)
f01301ce:	ff 75 10             	pushl  0x10(%ebp)
f01301d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01301d4:	50                   	push   %eax
f01301d5:	68 61 01 13 f0       	push   $0xf0130161
f01301da:	e8 92 fb ff ff       	call   f012fd71 <vprintfmt>
f01301df:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01301e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01301e5:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01301e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01301eb:	c9                   	leave  
f01301ec:	c3                   	ret    

f01301ed <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01301ed:	55                   	push   %ebp
f01301ee:	89 e5                	mov    %esp,%ebp
f01301f0:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01301f3:	8d 45 10             	lea    0x10(%ebp),%eax
f01301f6:	83 c0 04             	add    $0x4,%eax
f01301f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01301fc:	8b 45 10             	mov    0x10(%ebp),%eax
f01301ff:	ff 75 f4             	pushl  -0xc(%ebp)
f0130202:	50                   	push   %eax
f0130203:	ff 75 0c             	pushl  0xc(%ebp)
f0130206:	ff 75 08             	pushl  0x8(%ebp)
f0130209:	e8 89 ff ff ff       	call   f0130197 <vsnprintf>
f013020e:	83 c4 10             	add    $0x10,%esp
f0130211:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0130214:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0130217:	c9                   	leave  
f0130218:	c3                   	ret    

f0130219 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0130219:	55                   	push   %ebp
f013021a:	89 e5                	mov    %esp,%ebp
f013021c:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f013021f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130223:	74 13                	je     f0130238 <readline+0x1f>
		cprintf("%s", prompt);
f0130225:	83 ec 08             	sub    $0x8,%esp
f0130228:	ff 75 08             	pushl  0x8(%ebp)
f013022b:	68 70 c5 13 f0       	push   $0xf013c570
f0130230:	e8 f8 09 fd ff       	call   f0100c2d <cprintf>
f0130235:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130238:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f013023f:	83 ec 0c             	sub    $0xc,%esp
f0130242:	6a 00                	push   $0x0
f0130244:	e8 91 09 fd ff       	call   f0100bda <iscons>
f0130249:	83 c4 10             	add    $0x10,%esp
f013024c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f013024f:	e8 6d 09 fd ff       	call   f0100bc1 <getchar>
f0130254:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130257:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013025b:	79 22                	jns    f013027f <readline+0x66>
			if (c != -E_EOF)
f013025d:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130261:	0f 84 ad 00 00 00    	je     f0130314 <readline+0xfb>
				cprintf("read error: %e\n", c);
f0130267:	83 ec 08             	sub    $0x8,%esp
f013026a:	ff 75 ec             	pushl  -0x14(%ebp)
f013026d:	68 73 c5 13 f0       	push   $0xf013c573
f0130272:	e8 b6 09 fd ff       	call   f0100c2d <cprintf>
f0130277:	83 c4 10             	add    $0x10,%esp
			return;
f013027a:	e9 95 00 00 00       	jmp    f0130314 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f013027f:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130283:	7e 34                	jle    f01302b9 <readline+0xa0>
f0130285:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f013028c:	7f 2b                	jg     f01302b9 <readline+0xa0>
			if (echoing)
f013028e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130292:	74 0e                	je     f01302a2 <readline+0x89>
				cputchar(c);
f0130294:	83 ec 0c             	sub    $0xc,%esp
f0130297:	ff 75 ec             	pushl  -0x14(%ebp)
f013029a:	e8 0b 09 fd ff       	call   f0100baa <cputchar>
f013029f:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01302a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302a5:	8d 50 01             	lea    0x1(%eax),%edx
f01302a8:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01302ab:	89 c2                	mov    %eax,%edx
f01302ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01302b0:	01 d0                	add    %edx,%eax
f01302b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01302b5:	88 10                	mov    %dl,(%eax)
f01302b7:	eb 56                	jmp    f013030f <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f01302b9:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01302bd:	75 1f                	jne    f01302de <readline+0xc5>
f01302bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01302c3:	7e 19                	jle    f01302de <readline+0xc5>
			if (echoing)
f01302c5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01302c9:	74 0e                	je     f01302d9 <readline+0xc0>
				cputchar(c);
f01302cb:	83 ec 0c             	sub    $0xc,%esp
f01302ce:	ff 75 ec             	pushl  -0x14(%ebp)
f01302d1:	e8 d4 08 fd ff       	call   f0100baa <cputchar>
f01302d6:	83 c4 10             	add    $0x10,%esp

			i--;
f01302d9:	ff 4d f4             	decl   -0xc(%ebp)
f01302dc:	eb 31                	jmp    f013030f <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01302de:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01302e2:	74 0a                	je     f01302ee <readline+0xd5>
f01302e4:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01302e8:	0f 85 61 ff ff ff    	jne    f013024f <readline+0x36>
			if (echoing)
f01302ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01302f2:	74 0e                	je     f0130302 <readline+0xe9>
				cputchar(c);
f01302f4:	83 ec 0c             	sub    $0xc,%esp
f01302f7:	ff 75 ec             	pushl  -0x14(%ebp)
f01302fa:	e8 ab 08 fd ff       	call   f0100baa <cputchar>
f01302ff:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0130302:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130305:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130308:	01 d0                	add    %edx,%eax
f013030a:	c6 00 00             	movb   $0x0,(%eax)
			return;
f013030d:	eb 06                	jmp    f0130315 <readline+0xfc>
		}
	}
f013030f:	e9 3b ff ff ff       	jmp    f013024f <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0130314:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0130315:	c9                   	leave  
f0130316:	c3                   	ret    

f0130317 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0130317:	55                   	push   %ebp
f0130318:	89 e5                	mov    %esp,%ebp
f013031a:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f013031d:	e8 11 bf fd ff       	call   f010c233 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0130322:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130326:	74 13                	je     f013033b <atomic_readline+0x24>
		cprintf("%s", prompt);
f0130328:	83 ec 08             	sub    $0x8,%esp
f013032b:	ff 75 08             	pushl  0x8(%ebp)
f013032e:	68 70 c5 13 f0       	push   $0xf013c570
f0130333:	e8 f5 08 fd ff       	call   f0100c2d <cprintf>
f0130338:	83 c4 10             	add    $0x10,%esp

	i = 0;
f013033b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130342:	83 ec 0c             	sub    $0xc,%esp
f0130345:	6a 00                	push   $0x0
f0130347:	e8 8e 08 fd ff       	call   f0100bda <iscons>
f013034c:	83 c4 10             	add    $0x10,%esp
f013034f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130352:	e8 6a 08 fd ff       	call   f0100bc1 <getchar>
f0130357:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013035a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013035e:	79 23                	jns    f0130383 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0130360:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130364:	74 13                	je     f0130379 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0130366:	83 ec 08             	sub    $0x8,%esp
f0130369:	ff 75 ec             	pushl  -0x14(%ebp)
f013036c:	68 73 c5 13 f0       	push   $0xf013c573
f0130371:	e8 b7 08 fd ff       	call   f0100c2d <cprintf>
f0130376:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0130379:	e8 cf be fd ff       	call   f010c24d <sys_enable_interrupt>
			return;
f013037e:	e9 9a 00 00 00       	jmp    f013041d <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130383:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130387:	7e 34                	jle    f01303bd <atomic_readline+0xa6>
f0130389:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130390:	7f 2b                	jg     f01303bd <atomic_readline+0xa6>
			if (echoing)
f0130392:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130396:	74 0e                	je     f01303a6 <atomic_readline+0x8f>
				cputchar(c);
f0130398:	83 ec 0c             	sub    $0xc,%esp
f013039b:	ff 75 ec             	pushl  -0x14(%ebp)
f013039e:	e8 07 08 fd ff       	call   f0100baa <cputchar>
f01303a3:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01303a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01303a9:	8d 50 01             	lea    0x1(%eax),%edx
f01303ac:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01303af:	89 c2                	mov    %eax,%edx
f01303b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01303b4:	01 d0                	add    %edx,%eax
f01303b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01303b9:	88 10                	mov    %dl,(%eax)
f01303bb:	eb 5b                	jmp    f0130418 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f01303bd:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01303c1:	75 1f                	jne    f01303e2 <atomic_readline+0xcb>
f01303c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01303c7:	7e 19                	jle    f01303e2 <atomic_readline+0xcb>
			if (echoing)
f01303c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01303cd:	74 0e                	je     f01303dd <atomic_readline+0xc6>
				cputchar(c);
f01303cf:	83 ec 0c             	sub    $0xc,%esp
f01303d2:	ff 75 ec             	pushl  -0x14(%ebp)
f01303d5:	e8 d0 07 fd ff       	call   f0100baa <cputchar>
f01303da:	83 c4 10             	add    $0x10,%esp
			i--;
f01303dd:	ff 4d f4             	decl   -0xc(%ebp)
f01303e0:	eb 36                	jmp    f0130418 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01303e2:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01303e6:	74 0a                	je     f01303f2 <atomic_readline+0xdb>
f01303e8:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01303ec:	0f 85 60 ff ff ff    	jne    f0130352 <atomic_readline+0x3b>
			if (echoing)
f01303f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01303f6:	74 0e                	je     f0130406 <atomic_readline+0xef>
				cputchar(c);
f01303f8:	83 ec 0c             	sub    $0xc,%esp
f01303fb:	ff 75 ec             	pushl  -0x14(%ebp)
f01303fe:	e8 a7 07 fd ff       	call   f0100baa <cputchar>
f0130403:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0130406:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130409:	8b 45 0c             	mov    0xc(%ebp),%eax
f013040c:	01 d0                	add    %edx,%eax
f013040e:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0130411:	e8 37 be fd ff       	call   f010c24d <sys_enable_interrupt>
			return;
f0130416:	eb 05                	jmp    f013041d <atomic_readline+0x106>
		}
	}
f0130418:	e9 35 ff ff ff       	jmp    f0130352 <atomic_readline+0x3b>
}
f013041d:	c9                   	leave  
f013041e:	c3                   	ret    

f013041f <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f013041f:	55                   	push   %ebp
f0130420:	89 e5                	mov    %esp,%ebp
f0130422:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0130425:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013042c:	eb 06                	jmp    f0130434 <strlen+0x15>
		n++;
f013042e:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0130431:	ff 45 08             	incl   0x8(%ebp)
f0130434:	8b 45 08             	mov    0x8(%ebp),%eax
f0130437:	8a 00                	mov    (%eax),%al
f0130439:	84 c0                	test   %al,%al
f013043b:	75 f1                	jne    f013042e <strlen+0xf>
		n++;
	return n;
f013043d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130440:	c9                   	leave  
f0130441:	c3                   	ret    

f0130442 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0130442:	55                   	push   %ebp
f0130443:	89 e5                	mov    %esp,%ebp
f0130445:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130448:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013044f:	eb 09                	jmp    f013045a <strnlen+0x18>
		n++;
f0130451:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130454:	ff 45 08             	incl   0x8(%ebp)
f0130457:	ff 4d 0c             	decl   0xc(%ebp)
f013045a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013045e:	74 09                	je     f0130469 <strnlen+0x27>
f0130460:	8b 45 08             	mov    0x8(%ebp),%eax
f0130463:	8a 00                	mov    (%eax),%al
f0130465:	84 c0                	test   %al,%al
f0130467:	75 e8                	jne    f0130451 <strnlen+0xf>
		n++;
	return n;
f0130469:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013046c:	c9                   	leave  
f013046d:	c3                   	ret    

f013046e <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f013046e:	55                   	push   %ebp
f013046f:	89 e5                	mov    %esp,%ebp
f0130471:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0130474:	8b 45 08             	mov    0x8(%ebp),%eax
f0130477:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f013047a:	90                   	nop
f013047b:	8b 45 08             	mov    0x8(%ebp),%eax
f013047e:	8d 50 01             	lea    0x1(%eax),%edx
f0130481:	89 55 08             	mov    %edx,0x8(%ebp)
f0130484:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130487:	8d 4a 01             	lea    0x1(%edx),%ecx
f013048a:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f013048d:	8a 12                	mov    (%edx),%dl
f013048f:	88 10                	mov    %dl,(%eax)
f0130491:	8a 00                	mov    (%eax),%al
f0130493:	84 c0                	test   %al,%al
f0130495:	75 e4                	jne    f013047b <strcpy+0xd>
		/* do nothing */;
	return ret;
f0130497:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013049a:	c9                   	leave  
f013049b:	c3                   	ret    

f013049c <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f013049c:	55                   	push   %ebp
f013049d:	89 e5                	mov    %esp,%ebp
f013049f:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f01304a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01304a5:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f01304a8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01304af:	eb 1f                	jmp    f01304d0 <strncpy+0x34>
		*dst++ = *src;
f01304b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01304b4:	8d 50 01             	lea    0x1(%eax),%edx
f01304b7:	89 55 08             	mov    %edx,0x8(%ebp)
f01304ba:	8b 55 0c             	mov    0xc(%ebp),%edx
f01304bd:	8a 12                	mov    (%edx),%dl
f01304bf:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01304c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01304c4:	8a 00                	mov    (%eax),%al
f01304c6:	84 c0                	test   %al,%al
f01304c8:	74 03                	je     f01304cd <strncpy+0x31>
			src++;
f01304ca:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01304cd:	ff 45 fc             	incl   -0x4(%ebp)
f01304d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01304d3:	3b 45 10             	cmp    0x10(%ebp),%eax
f01304d6:	72 d9                	jb     f01304b1 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01304d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01304db:	c9                   	leave  
f01304dc:	c3                   	ret    

f01304dd <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01304dd:	55                   	push   %ebp
f01304de:	89 e5                	mov    %esp,%ebp
f01304e0:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f01304e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01304e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f01304e9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01304ed:	74 30                	je     f013051f <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f01304ef:	eb 16                	jmp    f0130507 <strlcpy+0x2a>
			*dst++ = *src++;
f01304f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01304f4:	8d 50 01             	lea    0x1(%eax),%edx
f01304f7:	89 55 08             	mov    %edx,0x8(%ebp)
f01304fa:	8b 55 0c             	mov    0xc(%ebp),%edx
f01304fd:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130500:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130503:	8a 12                	mov    (%edx),%dl
f0130505:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0130507:	ff 4d 10             	decl   0x10(%ebp)
f013050a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013050e:	74 09                	je     f0130519 <strlcpy+0x3c>
f0130510:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130513:	8a 00                	mov    (%eax),%al
f0130515:	84 c0                	test   %al,%al
f0130517:	75 d8                	jne    f01304f1 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0130519:	8b 45 08             	mov    0x8(%ebp),%eax
f013051c:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f013051f:	8b 55 08             	mov    0x8(%ebp),%edx
f0130522:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130525:	29 c2                	sub    %eax,%edx
f0130527:	89 d0                	mov    %edx,%eax
}
f0130529:	c9                   	leave  
f013052a:	c3                   	ret    

f013052b <strcmp>:

int
strcmp(const char *p, const char *q)
{
f013052b:	55                   	push   %ebp
f013052c:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f013052e:	eb 06                	jmp    f0130536 <strcmp+0xb>
		p++, q++;
f0130530:	ff 45 08             	incl   0x8(%ebp)
f0130533:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0130536:	8b 45 08             	mov    0x8(%ebp),%eax
f0130539:	8a 00                	mov    (%eax),%al
f013053b:	84 c0                	test   %al,%al
f013053d:	74 0e                	je     f013054d <strcmp+0x22>
f013053f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130542:	8a 10                	mov    (%eax),%dl
f0130544:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130547:	8a 00                	mov    (%eax),%al
f0130549:	38 c2                	cmp    %al,%dl
f013054b:	74 e3                	je     f0130530 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f013054d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130550:	8a 00                	mov    (%eax),%al
f0130552:	0f b6 d0             	movzbl %al,%edx
f0130555:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130558:	8a 00                	mov    (%eax),%al
f013055a:	0f b6 c0             	movzbl %al,%eax
f013055d:	29 c2                	sub    %eax,%edx
f013055f:	89 d0                	mov    %edx,%eax
}
f0130561:	5d                   	pop    %ebp
f0130562:	c3                   	ret    

f0130563 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0130563:	55                   	push   %ebp
f0130564:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0130566:	eb 09                	jmp    f0130571 <strncmp+0xe>
		n--, p++, q++;
f0130568:	ff 4d 10             	decl   0x10(%ebp)
f013056b:	ff 45 08             	incl   0x8(%ebp)
f013056e:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0130571:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130575:	74 17                	je     f013058e <strncmp+0x2b>
f0130577:	8b 45 08             	mov    0x8(%ebp),%eax
f013057a:	8a 00                	mov    (%eax),%al
f013057c:	84 c0                	test   %al,%al
f013057e:	74 0e                	je     f013058e <strncmp+0x2b>
f0130580:	8b 45 08             	mov    0x8(%ebp),%eax
f0130583:	8a 10                	mov    (%eax),%dl
f0130585:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130588:	8a 00                	mov    (%eax),%al
f013058a:	38 c2                	cmp    %al,%dl
f013058c:	74 da                	je     f0130568 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f013058e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130592:	75 07                	jne    f013059b <strncmp+0x38>
		return 0;
f0130594:	b8 00 00 00 00       	mov    $0x0,%eax
f0130599:	eb 14                	jmp    f01305af <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f013059b:	8b 45 08             	mov    0x8(%ebp),%eax
f013059e:	8a 00                	mov    (%eax),%al
f01305a0:	0f b6 d0             	movzbl %al,%edx
f01305a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305a6:	8a 00                	mov    (%eax),%al
f01305a8:	0f b6 c0             	movzbl %al,%eax
f01305ab:	29 c2                	sub    %eax,%edx
f01305ad:	89 d0                	mov    %edx,%eax
}
f01305af:	5d                   	pop    %ebp
f01305b0:	c3                   	ret    

f01305b1 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f01305b1:	55                   	push   %ebp
f01305b2:	89 e5                	mov    %esp,%ebp
f01305b4:	83 ec 04             	sub    $0x4,%esp
f01305b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305ba:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01305bd:	eb 12                	jmp    f01305d1 <strchr+0x20>
		if (*s == c)
f01305bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01305c2:	8a 00                	mov    (%eax),%al
f01305c4:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01305c7:	75 05                	jne    f01305ce <strchr+0x1d>
			return (char *) s;
f01305c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01305cc:	eb 11                	jmp    f01305df <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01305ce:	ff 45 08             	incl   0x8(%ebp)
f01305d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01305d4:	8a 00                	mov    (%eax),%al
f01305d6:	84 c0                	test   %al,%al
f01305d8:	75 e5                	jne    f01305bf <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01305da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01305df:	c9                   	leave  
f01305e0:	c3                   	ret    

f01305e1 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f01305e1:	55                   	push   %ebp
f01305e2:	89 e5                	mov    %esp,%ebp
f01305e4:	83 ec 04             	sub    $0x4,%esp
f01305e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305ea:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01305ed:	eb 0d                	jmp    f01305fc <strfind+0x1b>
		if (*s == c)
f01305ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01305f2:	8a 00                	mov    (%eax),%al
f01305f4:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01305f7:	74 0e                	je     f0130607 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f01305f9:	ff 45 08             	incl   0x8(%ebp)
f01305fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01305ff:	8a 00                	mov    (%eax),%al
f0130601:	84 c0                	test   %al,%al
f0130603:	75 ea                	jne    f01305ef <strfind+0xe>
f0130605:	eb 01                	jmp    f0130608 <strfind+0x27>
		if (*s == c)
			break;
f0130607:	90                   	nop
	return (char *) s;
f0130608:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013060b:	c9                   	leave  
f013060c:	c3                   	ret    

f013060d <memset>:


void *
memset(void *v, int c, uint32 n)
{
f013060d:	55                   	push   %ebp
f013060e:	89 e5                	mov    %esp,%ebp
f0130610:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0130613:	8b 45 08             	mov    0x8(%ebp),%eax
f0130616:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0130619:	8b 45 10             	mov    0x10(%ebp),%eax
f013061c:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f013061f:	eb 0e                	jmp    f013062f <memset+0x22>
		*p++ = c;
f0130621:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130624:	8d 50 01             	lea    0x1(%eax),%edx
f0130627:	89 55 fc             	mov    %edx,-0x4(%ebp)
f013062a:	8b 55 0c             	mov    0xc(%ebp),%edx
f013062d:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f013062f:	ff 4d f8             	decl   -0x8(%ebp)
f0130632:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0130636:	79 e9                	jns    f0130621 <memset+0x14>
		*p++ = c;

	return v;
f0130638:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013063b:	c9                   	leave  
f013063c:	c3                   	ret    

f013063d <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f013063d:	55                   	push   %ebp
f013063e:	89 e5                	mov    %esp,%ebp
f0130640:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130643:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130646:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130649:	8b 45 08             	mov    0x8(%ebp),%eax
f013064c:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f013064f:	eb 16                	jmp    f0130667 <memcpy+0x2a>
		*d++ = *s++;
f0130651:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130654:	8d 50 01             	lea    0x1(%eax),%edx
f0130657:	89 55 f8             	mov    %edx,-0x8(%ebp)
f013065a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013065d:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130660:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130663:	8a 12                	mov    (%edx),%dl
f0130665:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0130667:	8b 45 10             	mov    0x10(%ebp),%eax
f013066a:	8d 50 ff             	lea    -0x1(%eax),%edx
f013066d:	89 55 10             	mov    %edx,0x10(%ebp)
f0130670:	85 c0                	test   %eax,%eax
f0130672:	75 dd                	jne    f0130651 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0130674:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130677:	c9                   	leave  
f0130678:	c3                   	ret    

f0130679 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0130679:	55                   	push   %ebp
f013067a:	89 e5                	mov    %esp,%ebp
f013067c:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013067f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130682:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130685:	8b 45 08             	mov    0x8(%ebp),%eax
f0130688:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f013068b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013068e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130691:	73 50                	jae    f01306e3 <memmove+0x6a>
f0130693:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130696:	8b 45 10             	mov    0x10(%ebp),%eax
f0130699:	01 d0                	add    %edx,%eax
f013069b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013069e:	76 43                	jbe    f01306e3 <memmove+0x6a>
		s += n;
f01306a0:	8b 45 10             	mov    0x10(%ebp),%eax
f01306a3:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f01306a6:	8b 45 10             	mov    0x10(%ebp),%eax
f01306a9:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f01306ac:	eb 10                	jmp    f01306be <memmove+0x45>
			*--d = *--s;
f01306ae:	ff 4d f8             	decl   -0x8(%ebp)
f01306b1:	ff 4d fc             	decl   -0x4(%ebp)
f01306b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01306b7:	8a 10                	mov    (%eax),%dl
f01306b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01306bc:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f01306be:	8b 45 10             	mov    0x10(%ebp),%eax
f01306c1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01306c4:	89 55 10             	mov    %edx,0x10(%ebp)
f01306c7:	85 c0                	test   %eax,%eax
f01306c9:	75 e3                	jne    f01306ae <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f01306cb:	eb 23                	jmp    f01306f0 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01306cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01306d0:	8d 50 01             	lea    0x1(%eax),%edx
f01306d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01306d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01306d9:	8d 4a 01             	lea    0x1(%edx),%ecx
f01306dc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01306df:	8a 12                	mov    (%edx),%dl
f01306e1:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f01306e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01306e6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01306e9:	89 55 10             	mov    %edx,0x10(%ebp)
f01306ec:	85 c0                	test   %eax,%eax
f01306ee:	75 dd                	jne    f01306cd <memmove+0x54>
			*d++ = *s++;

	return dst;
f01306f0:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01306f3:	c9                   	leave  
f01306f4:	c3                   	ret    

f01306f5 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f01306f5:	55                   	push   %ebp
f01306f6:	89 e5                	mov    %esp,%ebp
f01306f8:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f01306fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01306fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0130701:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130704:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0130707:	eb 2a                	jmp    f0130733 <memcmp+0x3e>
		if (*s1 != *s2)
f0130709:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013070c:	8a 10                	mov    (%eax),%dl
f013070e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130711:	8a 00                	mov    (%eax),%al
f0130713:	38 c2                	cmp    %al,%dl
f0130715:	74 16                	je     f013072d <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0130717:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013071a:	8a 00                	mov    (%eax),%al
f013071c:	0f b6 d0             	movzbl %al,%edx
f013071f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130722:	8a 00                	mov    (%eax),%al
f0130724:	0f b6 c0             	movzbl %al,%eax
f0130727:	29 c2                	sub    %eax,%edx
f0130729:	89 d0                	mov    %edx,%eax
f013072b:	eb 18                	jmp    f0130745 <memcmp+0x50>
		s1++, s2++;
f013072d:	ff 45 fc             	incl   -0x4(%ebp)
f0130730:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0130733:	8b 45 10             	mov    0x10(%ebp),%eax
f0130736:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130739:	89 55 10             	mov    %edx,0x10(%ebp)
f013073c:	85 c0                	test   %eax,%eax
f013073e:	75 c9                	jne    f0130709 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0130740:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130745:	c9                   	leave  
f0130746:	c3                   	ret    

f0130747 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0130747:	55                   	push   %ebp
f0130748:	89 e5                	mov    %esp,%ebp
f013074a:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f013074d:	8b 55 08             	mov    0x8(%ebp),%edx
f0130750:	8b 45 10             	mov    0x10(%ebp),%eax
f0130753:	01 d0                	add    %edx,%eax
f0130755:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0130758:	eb 15                	jmp    f013076f <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f013075a:	8b 45 08             	mov    0x8(%ebp),%eax
f013075d:	8a 00                	mov    (%eax),%al
f013075f:	0f b6 d0             	movzbl %al,%edx
f0130762:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130765:	0f b6 c0             	movzbl %al,%eax
f0130768:	39 c2                	cmp    %eax,%edx
f013076a:	74 0d                	je     f0130779 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f013076c:	ff 45 08             	incl   0x8(%ebp)
f013076f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130772:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0130775:	72 e3                	jb     f013075a <memfind+0x13>
f0130777:	eb 01                	jmp    f013077a <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0130779:	90                   	nop
	return (void *) s;
f013077a:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013077d:	c9                   	leave  
f013077e:	c3                   	ret    

f013077f <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f013077f:	55                   	push   %ebp
f0130780:	89 e5                	mov    %esp,%ebp
f0130782:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0130785:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f013078c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130793:	eb 03                	jmp    f0130798 <strtol+0x19>
		s++;
f0130795:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130798:	8b 45 08             	mov    0x8(%ebp),%eax
f013079b:	8a 00                	mov    (%eax),%al
f013079d:	3c 20                	cmp    $0x20,%al
f013079f:	74 f4                	je     f0130795 <strtol+0x16>
f01307a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01307a4:	8a 00                	mov    (%eax),%al
f01307a6:	3c 09                	cmp    $0x9,%al
f01307a8:	74 eb                	je     f0130795 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f01307aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01307ad:	8a 00                	mov    (%eax),%al
f01307af:	3c 2b                	cmp    $0x2b,%al
f01307b1:	75 05                	jne    f01307b8 <strtol+0x39>
		s++;
f01307b3:	ff 45 08             	incl   0x8(%ebp)
f01307b6:	eb 13                	jmp    f01307cb <strtol+0x4c>
	else if (*s == '-')
f01307b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01307bb:	8a 00                	mov    (%eax),%al
f01307bd:	3c 2d                	cmp    $0x2d,%al
f01307bf:	75 0a                	jne    f01307cb <strtol+0x4c>
		s++, neg = 1;
f01307c1:	ff 45 08             	incl   0x8(%ebp)
f01307c4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f01307cb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01307cf:	74 06                	je     f01307d7 <strtol+0x58>
f01307d1:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f01307d5:	75 20                	jne    f01307f7 <strtol+0x78>
f01307d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01307da:	8a 00                	mov    (%eax),%al
f01307dc:	3c 30                	cmp    $0x30,%al
f01307de:	75 17                	jne    f01307f7 <strtol+0x78>
f01307e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01307e3:	40                   	inc    %eax
f01307e4:	8a 00                	mov    (%eax),%al
f01307e6:	3c 78                	cmp    $0x78,%al
f01307e8:	75 0d                	jne    f01307f7 <strtol+0x78>
		s += 2, base = 16;
f01307ea:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f01307ee:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f01307f5:	eb 28                	jmp    f013081f <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f01307f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01307fb:	75 15                	jne    f0130812 <strtol+0x93>
f01307fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130800:	8a 00                	mov    (%eax),%al
f0130802:	3c 30                	cmp    $0x30,%al
f0130804:	75 0c                	jne    f0130812 <strtol+0x93>
		s++, base = 8;
f0130806:	ff 45 08             	incl   0x8(%ebp)
f0130809:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0130810:	eb 0d                	jmp    f013081f <strtol+0xa0>
	else if (base == 0)
f0130812:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130816:	75 07                	jne    f013081f <strtol+0xa0>
		base = 10;
f0130818:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f013081f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130822:	8a 00                	mov    (%eax),%al
f0130824:	3c 2f                	cmp    $0x2f,%al
f0130826:	7e 19                	jle    f0130841 <strtol+0xc2>
f0130828:	8b 45 08             	mov    0x8(%ebp),%eax
f013082b:	8a 00                	mov    (%eax),%al
f013082d:	3c 39                	cmp    $0x39,%al
f013082f:	7f 10                	jg     f0130841 <strtol+0xc2>
			dig = *s - '0';
f0130831:	8b 45 08             	mov    0x8(%ebp),%eax
f0130834:	8a 00                	mov    (%eax),%al
f0130836:	0f be c0             	movsbl %al,%eax
f0130839:	83 e8 30             	sub    $0x30,%eax
f013083c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013083f:	eb 42                	jmp    f0130883 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0130841:	8b 45 08             	mov    0x8(%ebp),%eax
f0130844:	8a 00                	mov    (%eax),%al
f0130846:	3c 60                	cmp    $0x60,%al
f0130848:	7e 19                	jle    f0130863 <strtol+0xe4>
f013084a:	8b 45 08             	mov    0x8(%ebp),%eax
f013084d:	8a 00                	mov    (%eax),%al
f013084f:	3c 7a                	cmp    $0x7a,%al
f0130851:	7f 10                	jg     f0130863 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0130853:	8b 45 08             	mov    0x8(%ebp),%eax
f0130856:	8a 00                	mov    (%eax),%al
f0130858:	0f be c0             	movsbl %al,%eax
f013085b:	83 e8 57             	sub    $0x57,%eax
f013085e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130861:	eb 20                	jmp    f0130883 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0130863:	8b 45 08             	mov    0x8(%ebp),%eax
f0130866:	8a 00                	mov    (%eax),%al
f0130868:	3c 40                	cmp    $0x40,%al
f013086a:	7e 39                	jle    f01308a5 <strtol+0x126>
f013086c:	8b 45 08             	mov    0x8(%ebp),%eax
f013086f:	8a 00                	mov    (%eax),%al
f0130871:	3c 5a                	cmp    $0x5a,%al
f0130873:	7f 30                	jg     f01308a5 <strtol+0x126>
			dig = *s - 'A' + 10;
f0130875:	8b 45 08             	mov    0x8(%ebp),%eax
f0130878:	8a 00                	mov    (%eax),%al
f013087a:	0f be c0             	movsbl %al,%eax
f013087d:	83 e8 37             	sub    $0x37,%eax
f0130880:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0130883:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130886:	3b 45 10             	cmp    0x10(%ebp),%eax
f0130889:	7d 19                	jge    f01308a4 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f013088b:	ff 45 08             	incl   0x8(%ebp)
f013088e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130891:	0f af 45 10          	imul   0x10(%ebp),%eax
f0130895:	89 c2                	mov    %eax,%edx
f0130897:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013089a:	01 d0                	add    %edx,%eax
f013089c:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f013089f:	e9 7b ff ff ff       	jmp    f013081f <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f01308a4:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f01308a5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01308a9:	74 08                	je     f01308b3 <strtol+0x134>
		*endptr = (char *) s;
f01308ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308ae:	8b 55 08             	mov    0x8(%ebp),%edx
f01308b1:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f01308b3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01308b7:	74 07                	je     f01308c0 <strtol+0x141>
f01308b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01308bc:	f7 d8                	neg    %eax
f01308be:	eb 03                	jmp    f01308c3 <strtol+0x144>
f01308c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01308c3:	c9                   	leave  
f01308c4:	c3                   	ret    

f01308c5 <ltostr>:

void
ltostr(long value, char *str)
{
f01308c5:	55                   	push   %ebp
f01308c6:	89 e5                	mov    %esp,%ebp
f01308c8:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f01308cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f01308d2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f01308d9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01308dd:	79 13                	jns    f01308f2 <ltostr+0x2d>
	{
		neg = 1;
f01308df:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f01308e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308e9:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f01308ec:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f01308ef:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f01308f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01308f5:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01308fa:	99                   	cltd   
f01308fb:	f7 f9                	idiv   %ecx
f01308fd:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0130900:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130903:	8d 50 01             	lea    0x1(%eax),%edx
f0130906:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130909:	89 c2                	mov    %eax,%edx
f013090b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013090e:	01 d0                	add    %edx,%eax
f0130910:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130913:	83 c2 30             	add    $0x30,%edx
f0130916:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0130918:	8b 4d 08             	mov    0x8(%ebp),%ecx
f013091b:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0130920:	f7 e9                	imul   %ecx
f0130922:	c1 fa 02             	sar    $0x2,%edx
f0130925:	89 c8                	mov    %ecx,%eax
f0130927:	c1 f8 1f             	sar    $0x1f,%eax
f013092a:	29 c2                	sub    %eax,%edx
f013092c:	89 d0                	mov    %edx,%eax
f013092e:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0130931:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0130934:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0130939:	f7 e9                	imul   %ecx
f013093b:	c1 fa 02             	sar    $0x2,%edx
f013093e:	89 c8                	mov    %ecx,%eax
f0130940:	c1 f8 1f             	sar    $0x1f,%eax
f0130943:	29 c2                	sub    %eax,%edx
f0130945:	89 d0                	mov    %edx,%eax
f0130947:	c1 e0 02             	shl    $0x2,%eax
f013094a:	01 d0                	add    %edx,%eax
f013094c:	01 c0                	add    %eax,%eax
f013094e:	29 c1                	sub    %eax,%ecx
f0130950:	89 ca                	mov    %ecx,%edx
f0130952:	85 d2                	test   %edx,%edx
f0130954:	75 9c                	jne    f01308f2 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0130956:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f013095d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130960:	48                   	dec    %eax
f0130961:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0130964:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130968:	74 3d                	je     f01309a7 <ltostr+0xe2>
		start = 1 ;
f013096a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0130971:	eb 34                	jmp    f01309a7 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0130973:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130976:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130979:	01 d0                	add    %edx,%eax
f013097b:	8a 00                	mov    (%eax),%al
f013097d:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0130980:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130983:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130986:	01 c2                	add    %eax,%edx
f0130988:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f013098b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013098e:	01 c8                	add    %ecx,%eax
f0130990:	8a 00                	mov    (%eax),%al
f0130992:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0130994:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130997:	8b 45 0c             	mov    0xc(%ebp),%eax
f013099a:	01 c2                	add    %eax,%edx
f013099c:	8a 45 eb             	mov    -0x15(%ebp),%al
f013099f:	88 02                	mov    %al,(%edx)
		start++ ;
f01309a1:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f01309a4:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f01309a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01309aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01309ad:	7c c4                	jl     f0130973 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f01309af:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01309b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309b5:	01 d0                	add    %edx,%eax
f01309b7:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f01309ba:	90                   	nop
f01309bb:	c9                   	leave  
f01309bc:	c3                   	ret    

f01309bd <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f01309bd:	55                   	push   %ebp
f01309be:	89 e5                	mov    %esp,%ebp
f01309c0:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f01309c3:	ff 75 08             	pushl  0x8(%ebp)
f01309c6:	e8 54 fa ff ff       	call   f013041f <strlen>
f01309cb:	83 c4 04             	add    $0x4,%esp
f01309ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f01309d1:	ff 75 0c             	pushl  0xc(%ebp)
f01309d4:	e8 46 fa ff ff       	call   f013041f <strlen>
f01309d9:	83 c4 04             	add    $0x4,%esp
f01309dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f01309df:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f01309e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01309ed:	eb 17                	jmp    f0130a06 <strcconcat+0x49>
		final[s] = str1[s] ;
f01309ef:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01309f2:	8b 45 10             	mov    0x10(%ebp),%eax
f01309f5:	01 c2                	add    %eax,%edx
f01309f7:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01309fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01309fd:	01 c8                	add    %ecx,%eax
f01309ff:	8a 00                	mov    (%eax),%al
f0130a01:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0130a03:	ff 45 fc             	incl   -0x4(%ebp)
f0130a06:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130a09:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130a0c:	7c e1                	jl     f01309ef <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0130a0e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0130a15:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0130a1c:	eb 1f                	jmp    f0130a3d <strcconcat+0x80>
		final[s++] = str2[i] ;
f0130a1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130a21:	8d 50 01             	lea    0x1(%eax),%edx
f0130a24:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130a27:	89 c2                	mov    %eax,%edx
f0130a29:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a2c:	01 c2                	add    %eax,%edx
f0130a2e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0130a31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a34:	01 c8                	add    %ecx,%eax
f0130a36:	8a 00                	mov    (%eax),%al
f0130a38:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0130a3a:	ff 45 f8             	incl   -0x8(%ebp)
f0130a3d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130a40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130a43:	7c d9                	jl     f0130a1e <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0130a45:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130a48:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a4b:	01 d0                	add    %edx,%eax
f0130a4d:	c6 00 00             	movb   $0x0,(%eax)
}
f0130a50:	90                   	nop
f0130a51:	c9                   	leave  
f0130a52:	c3                   	ret    

f0130a53 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0130a53:	55                   	push   %ebp
f0130a54:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0130a56:	8b 45 14             	mov    0x14(%ebp),%eax
f0130a59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0130a5f:	8b 45 14             	mov    0x14(%ebp),%eax
f0130a62:	8b 00                	mov    (%eax),%eax
f0130a64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130a6b:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a6e:	01 d0                	add    %edx,%eax
f0130a70:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0130a76:	eb 0c                	jmp    f0130a84 <strsplit+0x31>
			*string++ = 0;
f0130a78:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a7b:	8d 50 01             	lea    0x1(%eax),%edx
f0130a7e:	89 55 08             	mov    %edx,0x8(%ebp)
f0130a81:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0130a84:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a87:	8a 00                	mov    (%eax),%al
f0130a89:	84 c0                	test   %al,%al
f0130a8b:	74 18                	je     f0130aa5 <strsplit+0x52>
f0130a8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a90:	8a 00                	mov    (%eax),%al
f0130a92:	0f be c0             	movsbl %al,%eax
f0130a95:	50                   	push   %eax
f0130a96:	ff 75 0c             	pushl  0xc(%ebp)
f0130a99:	e8 13 fb ff ff       	call   f01305b1 <strchr>
f0130a9e:	83 c4 08             	add    $0x8,%esp
f0130aa1:	85 c0                	test   %eax,%eax
f0130aa3:	75 d3                	jne    f0130a78 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0130aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130aa8:	8a 00                	mov    (%eax),%al
f0130aaa:	84 c0                	test   %al,%al
f0130aac:	74 5a                	je     f0130b08 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0130aae:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ab1:	8b 00                	mov    (%eax),%eax
f0130ab3:	83 f8 0f             	cmp    $0xf,%eax
f0130ab6:	75 07                	jne    f0130abf <strsplit+0x6c>
		{
			return 0;
f0130ab8:	b8 00 00 00 00       	mov    $0x0,%eax
f0130abd:	eb 66                	jmp    f0130b25 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0130abf:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ac2:	8b 00                	mov    (%eax),%eax
f0130ac4:	8d 48 01             	lea    0x1(%eax),%ecx
f0130ac7:	8b 55 14             	mov    0x14(%ebp),%edx
f0130aca:	89 0a                	mov    %ecx,(%edx)
f0130acc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130ad3:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ad6:	01 c2                	add    %eax,%edx
f0130ad8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130adb:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130add:	eb 03                	jmp    f0130ae2 <strsplit+0x8f>
			string++;
f0130adf:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ae5:	8a 00                	mov    (%eax),%al
f0130ae7:	84 c0                	test   %al,%al
f0130ae9:	74 8b                	je     f0130a76 <strsplit+0x23>
f0130aeb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130aee:	8a 00                	mov    (%eax),%al
f0130af0:	0f be c0             	movsbl %al,%eax
f0130af3:	50                   	push   %eax
f0130af4:	ff 75 0c             	pushl  0xc(%ebp)
f0130af7:	e8 b5 fa ff ff       	call   f01305b1 <strchr>
f0130afc:	83 c4 08             	add    $0x8,%esp
f0130aff:	85 c0                	test   %eax,%eax
f0130b01:	74 dc                	je     f0130adf <strsplit+0x8c>
			string++;
	}
f0130b03:	e9 6e ff ff ff       	jmp    f0130a76 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0130b08:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0130b09:	8b 45 14             	mov    0x14(%ebp),%eax
f0130b0c:	8b 00                	mov    (%eax),%eax
f0130b0e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130b15:	8b 45 10             	mov    0x10(%ebp),%eax
f0130b18:	01 d0                	add    %edx,%eax
f0130b1a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0130b20:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0130b25:	c9                   	leave  
f0130b26:	c3                   	ret    

f0130b27 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0130b27:	55                   	push   %ebp
f0130b28:	89 e5                	mov    %esp,%ebp
f0130b2a:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0130b2d:	90                   	nop
f0130b2e:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0130b35:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130b38:	89 c2                	mov    %eax,%edx
f0130b3a:	ec                   	in     (%dx),%al
f0130b3b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0130b3e:	8a 45 f7             	mov    -0x9(%ebp),%al
f0130b41:	0f b6 c0             	movzbl %al,%eax
f0130b44:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0130b47:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130b4a:	25 c0 00 00 00       	and    $0xc0,%eax
f0130b4f:	83 f8 40             	cmp    $0x40,%eax
f0130b52:	75 da                	jne    f0130b2e <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0130b54:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130b58:	74 11                	je     f0130b6b <ide_wait_ready+0x44>
f0130b5a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130b5d:	83 e0 21             	and    $0x21,%eax
f0130b60:	85 c0                	test   %eax,%eax
f0130b62:	74 07                	je     f0130b6b <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0130b64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130b69:	eb 05                	jmp    f0130b70 <ide_wait_ready+0x49>
	}
	return 0;
f0130b6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130b70:	c9                   	leave  
f0130b71:	c3                   	ret    

f0130b72 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0130b72:	55                   	push   %ebp
f0130b73:	89 e5                	mov    %esp,%ebp
f0130b75:	57                   	push   %edi
f0130b76:	53                   	push   %ebx
f0130b77:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0130b7a:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0130b81:	76 16                	jbe    f0130b99 <ide_read+0x27>
f0130b83:	68 83 c5 13 f0       	push   $0xf013c583
f0130b88:	68 90 c5 13 f0       	push   $0xf013c590
f0130b8d:	6a 25                	push   $0x25
f0130b8f:	68 a5 c5 13 f0       	push   $0xf013c5a5
f0130b94:	e8 0d f6 fc ff       	call   f01001a6 <_panic>

	ide_wait_ready(0);
f0130b99:	83 ec 0c             	sub    $0xc,%esp
f0130b9c:	6a 00                	push   $0x0
f0130b9e:	e8 84 ff ff ff       	call   f0130b27 <ide_wait_ready>
f0130ba3:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0130ba6:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ba9:	0f b6 c0             	movzbl %al,%eax
f0130bac:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0130bb3:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0130bb6:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0130bb9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130bbc:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130bbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bc0:	0f b6 c0             	movzbl %al,%eax
f0130bc3:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0130bca:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0130bcd:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0130bd0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130bd3:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0130bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bd7:	c1 e8 08             	shr    $0x8,%eax
f0130bda:	0f b6 c0             	movzbl %al,%eax
f0130bdd:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0130be4:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0130be7:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0130bea:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130bed:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0130bee:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bf1:	c1 e8 10             	shr    $0x10,%eax
f0130bf4:	0f b6 c0             	movzbl %al,%eax
f0130bf7:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0130bfe:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0130c01:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0130c04:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130c07:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0130c08:	a1 cc 8f 65 f0       	mov    0xf0658fcc,%eax
f0130c0d:	83 e0 01             	and    $0x1,%eax
f0130c10:	c1 e0 04             	shl    $0x4,%eax
f0130c13:	88 c2                	mov    %al,%dl
f0130c15:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c18:	c1 e8 18             	shr    $0x18,%eax
f0130c1b:	83 e0 0f             	and    $0xf,%eax
f0130c1e:	09 d0                	or     %edx,%eax
f0130c20:	83 c8 e0             	or     $0xffffffe0,%eax
f0130c23:	0f b6 c0             	movzbl %al,%eax
f0130c26:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0130c2d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0130c30:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0130c33:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130c36:	ee                   	out    %al,(%dx)
f0130c37:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0130c3e:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0130c42:	8a 45 d7             	mov    -0x29(%ebp),%al
f0130c45:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0130c48:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0130c49:	eb 55                	jmp    f0130ca0 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0130c4b:	83 ec 0c             	sub    $0xc,%esp
f0130c4e:	6a 01                	push   $0x1
f0130c50:	e8 d2 fe ff ff       	call   f0130b27 <ide_wait_ready>
f0130c55:	83 c4 10             	add    $0x10,%esp
f0130c58:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130c5b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130c5f:	79 05                	jns    f0130c66 <ide_read+0xf4>
			return r;
f0130c61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130c64:	eb 45                	jmp    f0130cab <ide_read+0x139>
f0130c66:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0130c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c70:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0130c73:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0130c7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c7d:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0130c80:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130c83:	89 cb                	mov    %ecx,%ebx
f0130c85:	89 df                	mov    %ebx,%edi
f0130c87:	89 c1                	mov    %eax,%ecx
f0130c89:	fc                   	cld    
f0130c8a:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0130c8c:	89 c8                	mov    %ecx,%eax
f0130c8e:	89 fb                	mov    %edi,%ebx
f0130c90:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0130c93:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0130c96:	ff 4d 10             	decl   0x10(%ebp)
f0130c99:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0130ca0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130ca4:	75 a5                	jne    f0130c4b <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0130ca6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130cab:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130cae:	5b                   	pop    %ebx
f0130caf:	5f                   	pop    %edi
f0130cb0:	5d                   	pop    %ebp
f0130cb1:	c3                   	ret    

f0130cb2 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0130cb2:	55                   	push   %ebp
f0130cb3:	89 e5                	mov    %esp,%ebp
f0130cb5:	56                   	push   %esi
f0130cb6:	53                   	push   %ebx
f0130cb7:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0130cba:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0130cc1:	76 16                	jbe    f0130cd9 <ide_write+0x27>
f0130cc3:	68 83 c5 13 f0       	push   $0xf013c583
f0130cc8:	68 90 c5 13 f0       	push   $0xf013c590
f0130ccd:	6a 3e                	push   $0x3e
f0130ccf:	68 a5 c5 13 f0       	push   $0xf013c5a5
f0130cd4:	e8 cd f4 fc ff       	call   f01001a6 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0130cd9:	83 ec 0c             	sub    $0xc,%esp
f0130cdc:	6a 00                	push   $0x0
f0130cde:	e8 44 fe ff ff       	call   f0130b27 <ide_wait_ready>
f0130ce3:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0130ce6:	8b 45 10             	mov    0x10(%ebp),%eax
f0130ce9:	0f b6 c0             	movzbl %al,%eax
f0130cec:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0130cf3:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0130cf6:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0130cf9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130cfc:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130cfd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d00:	0f b6 c0             	movzbl %al,%eax
f0130d03:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0130d0a:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0130d0d:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0130d10:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130d13:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0130d14:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d17:	c1 e8 08             	shr    $0x8,%eax
f0130d1a:	0f b6 c0             	movzbl %al,%eax
f0130d1d:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0130d24:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0130d27:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0130d2a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130d2d:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0130d2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d31:	c1 e8 10             	shr    $0x10,%eax
f0130d34:	0f b6 c0             	movzbl %al,%eax
f0130d37:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0130d3e:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0130d41:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0130d44:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130d47:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0130d48:	a1 cc 8f 65 f0       	mov    0xf0658fcc,%eax
f0130d4d:	83 e0 01             	and    $0x1,%eax
f0130d50:	c1 e0 04             	shl    $0x4,%eax
f0130d53:	88 c2                	mov    %al,%dl
f0130d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d58:	c1 e8 18             	shr    $0x18,%eax
f0130d5b:	83 e0 0f             	and    $0xf,%eax
f0130d5e:	09 d0                	or     %edx,%eax
f0130d60:	83 c8 e0             	or     $0xffffffe0,%eax
f0130d63:	0f b6 c0             	movzbl %al,%eax
f0130d66:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0130d6d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0130d70:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0130d73:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130d76:	ee                   	out    %al,(%dx)
f0130d77:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0130d7e:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0130d82:	8a 45 d7             	mov    -0x29(%ebp),%al
f0130d85:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0130d88:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0130d89:	eb 55                	jmp    f0130de0 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0130d8b:	83 ec 0c             	sub    $0xc,%esp
f0130d8e:	6a 01                	push   $0x1
f0130d90:	e8 92 fd ff ff       	call   f0130b27 <ide_wait_ready>
f0130d95:	83 c4 10             	add    $0x10,%esp
f0130d98:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130d9b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130d9f:	79 05                	jns    f0130da6 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0130da1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130da4:	eb 45                	jmp    f0130deb <ide_write+0x139>
f0130da6:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0130dad:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130db0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0130db3:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0130dba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130dbd:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0130dc0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130dc3:	89 cb                	mov    %ecx,%ebx
f0130dc5:	89 de                	mov    %ebx,%esi
f0130dc7:	89 c1                	mov    %eax,%ecx
f0130dc9:	fc                   	cld    
f0130dca:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0130dcc:	89 c8                	mov    %ecx,%eax
f0130dce:	89 f3                	mov    %esi,%ebx
f0130dd0:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0130dd3:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0130dd6:	ff 4d 10             	decl   0x10(%ebp)
f0130dd9:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0130de0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130de4:	75 a5                	jne    f0130d8b <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0130de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130deb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130dee:	5b                   	pop    %ebx
f0130def:	5e                   	pop    %esi
f0130df0:	5d                   	pop    %ebp
f0130df1:	c3                   	ret    

f0130df2 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0130df2:	55                   	push   %ebp
f0130df3:	89 e5                	mov    %esp,%ebp
f0130df5:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0130df8:	83 ec 0c             	sub    $0xc,%esp
f0130dfb:	68 b0 c5 13 f0       	push   $0xf013c5b0
f0130e00:	e8 28 fe fc ff       	call   f0100c2d <cprintf>
f0130e05:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0130e08:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0130e0f:	83 ec 0c             	sub    $0xc,%esp
f0130e12:	68 dc c5 13 f0       	push   $0xf013c5dc
f0130e17:	e8 11 fe fc ff       	call   f0100c2d <cprintf>
f0130e1c:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0130e1f:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0130e23:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0130e28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130e2b:	eb 56                	jmp    f0130e83 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0130e2d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130e31:	74 1c                	je     f0130e4f <print_mem_block_lists+0x5d>
f0130e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e36:	8b 50 08             	mov    0x8(%eax),%edx
f0130e39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e3c:	8b 48 08             	mov    0x8(%eax),%ecx
f0130e3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e42:	8b 40 0c             	mov    0xc(%eax),%eax
f0130e45:	01 c8                	add    %ecx,%eax
f0130e47:	39 c2                	cmp    %eax,%edx
f0130e49:	73 04                	jae    f0130e4f <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0130e4b:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0130e4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e52:	8b 50 08             	mov    0x8(%eax),%edx
f0130e55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e58:	8b 40 0c             	mov    0xc(%eax),%eax
f0130e5b:	01 c2                	add    %eax,%edx
f0130e5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e60:	8b 40 08             	mov    0x8(%eax),%eax
f0130e63:	83 ec 04             	sub    $0x4,%esp
f0130e66:	52                   	push   %edx
f0130e67:	50                   	push   %eax
f0130e68:	68 f1 c5 13 f0       	push   $0xf013c5f1
f0130e6d:	e8 bb fd fc ff       	call   f0100c2d <cprintf>
f0130e72:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0130e75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e78:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0130e7b:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0130e80:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130e83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130e87:	74 07                	je     f0130e90 <print_mem_block_lists+0x9e>
f0130e89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e8c:	8b 00                	mov    (%eax),%eax
f0130e8e:	eb 05                	jmp    f0130e95 <print_mem_block_lists+0xa3>
f0130e90:	b8 00 00 00 00       	mov    $0x0,%eax
f0130e95:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0130e9a:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0130e9f:	85 c0                	test   %eax,%eax
f0130ea1:	75 8a                	jne    f0130e2d <print_mem_block_lists+0x3b>
f0130ea3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130ea7:	75 84                	jne    f0130e2d <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0130ea9:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0130ead:	75 10                	jne    f0130ebf <print_mem_block_lists+0xcd>
f0130eaf:	83 ec 0c             	sub    $0xc,%esp
f0130eb2:	68 00 c6 13 f0       	push   $0xf013c600
f0130eb7:	e8 71 fd fc ff       	call   f0100c2d <cprintf>
f0130ebc:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0130ebf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0130ec6:	83 ec 0c             	sub    $0xc,%esp
f0130ec9:	68 24 c6 13 f0       	push   $0xf013c624
f0130ece:	e8 5a fd fc ff       	call   f0100c2d <cprintf>
f0130ed3:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0130ed6:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0130eda:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f0130edf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130ee2:	eb 56                	jmp    f0130f3a <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0130ee4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130ee8:	74 1c                	je     f0130f06 <print_mem_block_lists+0x114>
f0130eea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130eed:	8b 50 08             	mov    0x8(%eax),%edx
f0130ef0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130ef3:	8b 48 08             	mov    0x8(%eax),%ecx
f0130ef6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130ef9:	8b 40 0c             	mov    0xc(%eax),%eax
f0130efc:	01 c8                	add    %ecx,%eax
f0130efe:	39 c2                	cmp    %eax,%edx
f0130f00:	73 04                	jae    f0130f06 <print_mem_block_lists+0x114>
			sorted = 0 ;
f0130f02:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0130f06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f09:	8b 50 08             	mov    0x8(%eax),%edx
f0130f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f0f:	8b 40 0c             	mov    0xc(%eax),%eax
f0130f12:	01 c2                	add    %eax,%edx
f0130f14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f17:	8b 40 08             	mov    0x8(%eax),%eax
f0130f1a:	83 ec 04             	sub    $0x4,%esp
f0130f1d:	52                   	push   %edx
f0130f1e:	50                   	push   %eax
f0130f1f:	68 f1 c5 13 f0       	push   $0xf013c5f1
f0130f24:	e8 04 fd fc ff       	call   f0100c2d <cprintf>
f0130f29:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0130f2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0130f32:	a1 f8 8f 65 f0       	mov    0xf0658ff8,%eax
f0130f37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130f3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130f3e:	74 07                	je     f0130f47 <print_mem_block_lists+0x155>
f0130f40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f43:	8b 00                	mov    (%eax),%eax
f0130f45:	eb 05                	jmp    f0130f4c <print_mem_block_lists+0x15a>
f0130f47:	b8 00 00 00 00       	mov    $0x0,%eax
f0130f4c:	a3 f8 8f 65 f0       	mov    %eax,0xf0658ff8
f0130f51:	a1 f8 8f 65 f0       	mov    0xf0658ff8,%eax
f0130f56:	85 c0                	test   %eax,%eax
f0130f58:	75 8a                	jne    f0130ee4 <print_mem_block_lists+0xf2>
f0130f5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130f5e:	75 84                	jne    f0130ee4 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0130f60:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0130f64:	75 10                	jne    f0130f76 <print_mem_block_lists+0x184>
f0130f66:	83 ec 0c             	sub    $0xc,%esp
f0130f69:	68 3c c6 13 f0       	push   $0xf013c63c
f0130f6e:	e8 ba fc fc ff       	call   f0100c2d <cprintf>
f0130f73:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0130f76:	83 ec 0c             	sub    $0xc,%esp
f0130f79:	68 b0 c5 13 f0       	push   $0xf013c5b0
f0130f7e:	e8 aa fc fc ff       	call   f0100c2d <cprintf>
f0130f83:	83 c4 10             	add    $0x10,%esp

}
f0130f86:	90                   	nop
f0130f87:	c9                   	leave  
f0130f88:	c3                   	ret    

f0130f89 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0130f89:	55                   	push   %ebp
f0130f8a:	89 e5                	mov    %esp,%ebp
f0130f8c:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0130f8f:	c7 05 f4 84 6e f0 00 	movl   $0x0,0xf06e84f4
f0130f96:	00 00 00 
f0130f99:	c7 05 f8 84 6e f0 00 	movl   $0x0,0xf06e84f8
f0130fa0:	00 00 00 
f0130fa3:	c7 05 00 85 6e f0 00 	movl   $0x0,0xf06e8500
f0130faa:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0130fad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130fb4:	eb 79                	jmp    f013102f <initialize_MemBlocksList+0xa6>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0130fb6:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0130fbb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130fbe:	c1 e2 04             	shl    $0x4,%edx
f0130fc1:	81 c2 00 90 65 f0    	add    $0xf0659000,%edx
f0130fc7:	89 02                	mov    %eax,(%edx)
f0130fc9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130fcc:	c1 e0 04             	shl    $0x4,%eax
f0130fcf:	05 00 90 65 f0       	add    $0xf0659000,%eax
f0130fd4:	8b 00                	mov    (%eax),%eax
f0130fd6:	85 c0                	test   %eax,%eax
f0130fd8:	74 16                	je     f0130ff0 <initialize_MemBlocksList+0x67>
f0130fda:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0130fdf:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130fe2:	c1 e2 04             	shl    $0x4,%edx
f0130fe5:	81 c2 00 90 65 f0    	add    $0xf0659000,%edx
f0130feb:	89 50 04             	mov    %edx,0x4(%eax)
f0130fee:	eb 10                	jmp    f0131000 <initialize_MemBlocksList+0x77>
f0130ff0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ff3:	c1 e0 04             	shl    $0x4,%eax
f0130ff6:	05 00 90 65 f0       	add    $0xf0659000,%eax
f0130ffb:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131000:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131003:	c1 e0 04             	shl    $0x4,%eax
f0131006:	05 00 90 65 f0       	add    $0xf0659000,%eax
f013100b:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131010:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131013:	c1 e0 04             	shl    $0x4,%eax
f0131016:	05 04 90 65 f0       	add    $0xf0659004,%eax
f013101b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131021:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131026:	40                   	inc    %eax
f0131027:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f013102c:	ff 45 fc             	incl   -0x4(%ebp)
f013102f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131032:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131035:	0f 82 7b ff ff ff    	jb     f0130fb6 <initialize_MemBlocksList+0x2d>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f013103b:	90                   	nop
f013103c:	c9                   	leave  
f013103d:	c3                   	ret    

f013103e <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f013103e:	55                   	push   %ebp
f013103f:	89 e5                	mov    %esp,%ebp
f0131041:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131044:	8b 45 08             	mov    0x8(%ebp),%eax
f0131047:	8b 00                	mov    (%eax),%eax
f0131049:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013104c:	eb 19                	jmp    f0131067 <find_block+0x29>
	{
		if(va==point->sva)
f013104e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131051:	8b 40 08             	mov    0x8(%eax),%eax
f0131054:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0131057:	75 05                	jne    f013105e <find_block+0x20>
		   return point;
f0131059:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013105c:	eb 36                	jmp    f0131094 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f013105e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131061:	8b 40 08             	mov    0x8(%eax),%eax
f0131064:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131067:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013106b:	74 07                	je     f0131074 <find_block+0x36>
f013106d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131070:	8b 00                	mov    (%eax),%eax
f0131072:	eb 05                	jmp    f0131079 <find_block+0x3b>
f0131074:	b8 00 00 00 00       	mov    $0x0,%eax
f0131079:	8b 55 08             	mov    0x8(%ebp),%edx
f013107c:	89 42 08             	mov    %eax,0x8(%edx)
f013107f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131082:	8b 40 08             	mov    0x8(%eax),%eax
f0131085:	85 c0                	test   %eax,%eax
f0131087:	75 c5                	jne    f013104e <find_block+0x10>
f0131089:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013108d:	75 bf                	jne    f013104e <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f013108f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131094:	c9                   	leave  
f0131095:	c3                   	ret    

f0131096 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0131096:	55                   	push   %ebp
f0131097:	89 e5                	mov    %esp,%ebp
f0131099:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f013109c:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f01310a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f01310a4:	a1 f4 8f 65 f0       	mov    0xf0658ff4,%eax
f01310a9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f01310ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310af:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01310b2:	74 24                	je     f01310d8 <insert_sorted_allocList+0x42>
f01310b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01310b7:	8b 50 08             	mov    0x8(%eax),%edx
f01310ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310bd:	8b 40 08             	mov    0x8(%eax),%eax
f01310c0:	39 c2                	cmp    %eax,%edx
f01310c2:	76 14                	jbe    f01310d8 <insert_sorted_allocList+0x42>
f01310c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01310c7:	8b 50 08             	mov    0x8(%eax),%edx
f01310ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01310cd:	8b 40 08             	mov    0x8(%eax),%eax
f01310d0:	39 c2                	cmp    %eax,%edx
f01310d2:	0f 82 60 01 00 00    	jb     f0131238 <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f01310d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01310dc:	75 65                	jne    f0131143 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f01310de:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01310e2:	75 14                	jne    f01310f8 <insert_sorted_allocList+0x62>
f01310e4:	83 ec 04             	sub    $0x4,%esp
f01310e7:	68 64 c6 13 f0       	push   $0xf013c664
f01310ec:	6a 6b                	push   $0x6b
f01310ee:	68 87 c6 13 f0       	push   $0xf013c687
f01310f3:	e8 ae f0 fc ff       	call   f01001a6 <_panic>
f01310f8:	8b 15 f0 8f 65 f0    	mov    0xf0658ff0,%edx
f01310fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0131101:	89 10                	mov    %edx,(%eax)
f0131103:	8b 45 08             	mov    0x8(%ebp),%eax
f0131106:	8b 00                	mov    (%eax),%eax
f0131108:	85 c0                	test   %eax,%eax
f013110a:	74 0d                	je     f0131119 <insert_sorted_allocList+0x83>
f013110c:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f0131111:	8b 55 08             	mov    0x8(%ebp),%edx
f0131114:	89 50 04             	mov    %edx,0x4(%eax)
f0131117:	eb 08                	jmp    f0131121 <insert_sorted_allocList+0x8b>
f0131119:	8b 45 08             	mov    0x8(%ebp),%eax
f013111c:	a3 f4 8f 65 f0       	mov    %eax,0xf0658ff4
f0131121:	8b 45 08             	mov    0x8(%ebp),%eax
f0131124:	a3 f0 8f 65 f0       	mov    %eax,0xf0658ff0
f0131129:	8b 45 08             	mov    0x8(%ebp),%eax
f013112c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131133:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f0131138:	40                   	inc    %eax
f0131139:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013113e:	e9 dc 01 00 00       	jmp    f013131f <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0131143:	8b 45 08             	mov    0x8(%ebp),%eax
f0131146:	8b 50 08             	mov    0x8(%eax),%edx
f0131149:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013114c:	8b 40 08             	mov    0x8(%eax),%eax
f013114f:	39 c2                	cmp    %eax,%edx
f0131151:	77 6c                	ja     f01311bf <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0131153:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131157:	74 06                	je     f013115f <insert_sorted_allocList+0xc9>
f0131159:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013115d:	75 14                	jne    f0131173 <insert_sorted_allocList+0xdd>
f013115f:	83 ec 04             	sub    $0x4,%esp
f0131162:	68 a0 c6 13 f0       	push   $0xf013c6a0
f0131167:	6a 6f                	push   $0x6f
f0131169:	68 87 c6 13 f0       	push   $0xf013c687
f013116e:	e8 33 f0 fc ff       	call   f01001a6 <_panic>
f0131173:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131176:	8b 50 04             	mov    0x4(%eax),%edx
f0131179:	8b 45 08             	mov    0x8(%ebp),%eax
f013117c:	89 50 04             	mov    %edx,0x4(%eax)
f013117f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131182:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131185:	89 10                	mov    %edx,(%eax)
f0131187:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013118a:	8b 40 04             	mov    0x4(%eax),%eax
f013118d:	85 c0                	test   %eax,%eax
f013118f:	74 0d                	je     f013119e <insert_sorted_allocList+0x108>
f0131191:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131194:	8b 40 04             	mov    0x4(%eax),%eax
f0131197:	8b 55 08             	mov    0x8(%ebp),%edx
f013119a:	89 10                	mov    %edx,(%eax)
f013119c:	eb 08                	jmp    f01311a6 <insert_sorted_allocList+0x110>
f013119e:	8b 45 08             	mov    0x8(%ebp),%eax
f01311a1:	a3 f0 8f 65 f0       	mov    %eax,0xf0658ff0
f01311a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01311a9:	8b 55 08             	mov    0x8(%ebp),%edx
f01311ac:	89 50 04             	mov    %edx,0x4(%eax)
f01311af:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f01311b4:	40                   	inc    %eax
f01311b5:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01311ba:	e9 60 01 00 00       	jmp    f013131f <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f01311bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01311c2:	8b 50 08             	mov    0x8(%eax),%edx
f01311c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01311c8:	8b 40 08             	mov    0x8(%eax),%eax
f01311cb:	39 c2                	cmp    %eax,%edx
f01311cd:	0f 82 4c 01 00 00    	jb     f013131f <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f01311d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01311d7:	75 14                	jne    f01311ed <insert_sorted_allocList+0x157>
f01311d9:	83 ec 04             	sub    $0x4,%esp
f01311dc:	68 d8 c6 13 f0       	push   $0xf013c6d8
f01311e1:	6a 73                	push   $0x73
f01311e3:	68 87 c6 13 f0       	push   $0xf013c687
f01311e8:	e8 b9 ef fc ff       	call   f01001a6 <_panic>
f01311ed:	8b 15 f4 8f 65 f0    	mov    0xf0658ff4,%edx
f01311f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01311f6:	89 50 04             	mov    %edx,0x4(%eax)
f01311f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01311fc:	8b 40 04             	mov    0x4(%eax),%eax
f01311ff:	85 c0                	test   %eax,%eax
f0131201:	74 0c                	je     f013120f <insert_sorted_allocList+0x179>
f0131203:	a1 f4 8f 65 f0       	mov    0xf0658ff4,%eax
f0131208:	8b 55 08             	mov    0x8(%ebp),%edx
f013120b:	89 10                	mov    %edx,(%eax)
f013120d:	eb 08                	jmp    f0131217 <insert_sorted_allocList+0x181>
f013120f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131212:	a3 f0 8f 65 f0       	mov    %eax,0xf0658ff0
f0131217:	8b 45 08             	mov    0x8(%ebp),%eax
f013121a:	a3 f4 8f 65 f0       	mov    %eax,0xf0658ff4
f013121f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131222:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131228:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f013122d:	40                   	inc    %eax
f013122e:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131233:	e9 e7 00 00 00       	jmp    f013131f <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0131238:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013123b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f013123e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131245:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f013124a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013124d:	e9 9d 00 00 00       	jmp    f01312ef <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0131252:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131255:	8b 00                	mov    (%eax),%eax
f0131257:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f013125a:	8b 45 08             	mov    0x8(%ebp),%eax
f013125d:	8b 50 08             	mov    0x8(%eax),%edx
f0131260:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131263:	8b 40 08             	mov    0x8(%eax),%eax
f0131266:	39 c2                	cmp    %eax,%edx
f0131268:	76 7d                	jbe    f01312e7 <insert_sorted_allocList+0x251>
f013126a:	8b 45 08             	mov    0x8(%ebp),%eax
f013126d:	8b 50 08             	mov    0x8(%eax),%edx
f0131270:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131273:	8b 40 08             	mov    0x8(%eax),%eax
f0131276:	39 c2                	cmp    %eax,%edx
f0131278:	73 6d                	jae    f01312e7 <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f013127a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013127e:	74 06                	je     f0131286 <insert_sorted_allocList+0x1f0>
f0131280:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131284:	75 14                	jne    f013129a <insert_sorted_allocList+0x204>
f0131286:	83 ec 04             	sub    $0x4,%esp
f0131289:	68 fc c6 13 f0       	push   $0xf013c6fc
f013128e:	6a 7f                	push   $0x7f
f0131290:	68 87 c6 13 f0       	push   $0xf013c687
f0131295:	e8 0c ef fc ff       	call   f01001a6 <_panic>
f013129a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013129d:	8b 10                	mov    (%eax),%edx
f013129f:	8b 45 08             	mov    0x8(%ebp),%eax
f01312a2:	89 10                	mov    %edx,(%eax)
f01312a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01312a7:	8b 00                	mov    (%eax),%eax
f01312a9:	85 c0                	test   %eax,%eax
f01312ab:	74 0b                	je     f01312b8 <insert_sorted_allocList+0x222>
f01312ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312b0:	8b 00                	mov    (%eax),%eax
f01312b2:	8b 55 08             	mov    0x8(%ebp),%edx
f01312b5:	89 50 04             	mov    %edx,0x4(%eax)
f01312b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312bb:	8b 55 08             	mov    0x8(%ebp),%edx
f01312be:	89 10                	mov    %edx,(%eax)
f01312c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01312c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01312c6:	89 50 04             	mov    %edx,0x4(%eax)
f01312c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01312cc:	8b 00                	mov    (%eax),%eax
f01312ce:	85 c0                	test   %eax,%eax
f01312d0:	75 08                	jne    f01312da <insert_sorted_allocList+0x244>
f01312d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01312d5:	a3 f4 8f 65 f0       	mov    %eax,0xf0658ff4
f01312da:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f01312df:	40                   	inc    %eax
f01312e0:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
				break;
f01312e5:	eb 39                	jmp    f0131320 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f01312e7:	a1 f8 8f 65 f0       	mov    0xf0658ff8,%eax
f01312ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01312ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01312f3:	74 07                	je     f01312fc <insert_sorted_allocList+0x266>
f01312f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312f8:	8b 00                	mov    (%eax),%eax
f01312fa:	eb 05                	jmp    f0131301 <insert_sorted_allocList+0x26b>
f01312fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0131301:	a3 f8 8f 65 f0       	mov    %eax,0xf0658ff8
f0131306:	a1 f8 8f 65 f0       	mov    0xf0658ff8,%eax
f013130b:	85 c0                	test   %eax,%eax
f013130d:	0f 85 3f ff ff ff    	jne    f0131252 <insert_sorted_allocList+0x1bc>
f0131313:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131317:	0f 85 35 ff ff ff    	jne    f0131252 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f013131d:	eb 01                	jmp    f0131320 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f013131f:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131320:	90                   	nop
f0131321:	c9                   	leave  
f0131322:	c3                   	ret    

f0131323 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0131323:	55                   	push   %ebp
f0131324:	89 e5                	mov    %esp,%ebp
f0131326:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131329:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f013132e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131331:	e9 85 01 00 00       	jmp    f01314bb <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0131336:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131339:	8b 40 0c             	mov    0xc(%eax),%eax
f013133c:	3b 45 08             	cmp    0x8(%ebp),%eax
f013133f:	0f 82 6e 01 00 00    	jb     f01314b3 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0131345:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131348:	8b 40 0c             	mov    0xc(%eax),%eax
f013134b:	3b 45 08             	cmp    0x8(%ebp),%eax
f013134e:	0f 85 8a 00 00 00    	jne    f01313de <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0131354:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131358:	75 17                	jne    f0131371 <alloc_block_FF+0x4e>
f013135a:	83 ec 04             	sub    $0x4,%esp
f013135d:	68 30 c7 13 f0       	push   $0xf013c730
f0131362:	68 93 00 00 00       	push   $0x93
f0131367:	68 87 c6 13 f0       	push   $0xf013c687
f013136c:	e8 35 ee fc ff       	call   f01001a6 <_panic>
f0131371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131374:	8b 00                	mov    (%eax),%eax
f0131376:	85 c0                	test   %eax,%eax
f0131378:	74 10                	je     f013138a <alloc_block_FF+0x67>
f013137a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013137d:	8b 00                	mov    (%eax),%eax
f013137f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131382:	8b 52 04             	mov    0x4(%edx),%edx
f0131385:	89 50 04             	mov    %edx,0x4(%eax)
f0131388:	eb 0b                	jmp    f0131395 <alloc_block_FF+0x72>
f013138a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013138d:	8b 40 04             	mov    0x4(%eax),%eax
f0131390:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131398:	8b 40 04             	mov    0x4(%eax),%eax
f013139b:	85 c0                	test   %eax,%eax
f013139d:	74 0f                	je     f01313ae <alloc_block_FF+0x8b>
f013139f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313a2:	8b 40 04             	mov    0x4(%eax),%eax
f01313a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01313a8:	8b 12                	mov    (%edx),%edx
f01313aa:	89 10                	mov    %edx,(%eax)
f01313ac:	eb 0a                	jmp    f01313b8 <alloc_block_FF+0x95>
f01313ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313b1:	8b 00                	mov    (%eax),%eax
f01313b3:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f01313b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01313c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313c4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01313cb:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f01313d0:	48                   	dec    %eax
f01313d1:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
			   return  point;
f01313d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313d9:	e9 10 01 00 00       	jmp    f01314ee <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f01313de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313e1:	8b 40 0c             	mov    0xc(%eax),%eax
f01313e4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01313e7:	0f 86 c6 00 00 00    	jbe    f01314b3 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01313ed:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f01313f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f01313f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313f8:	8b 50 08             	mov    0x8(%eax),%edx
f01313fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01313fe:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0131401:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131404:	8b 55 08             	mov    0x8(%ebp),%edx
f0131407:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f013140a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013140e:	75 17                	jne    f0131427 <alloc_block_FF+0x104>
f0131410:	83 ec 04             	sub    $0x4,%esp
f0131413:	68 30 c7 13 f0       	push   $0xf013c730
f0131418:	68 9b 00 00 00       	push   $0x9b
f013141d:	68 87 c6 13 f0       	push   $0xf013c687
f0131422:	e8 7f ed fc ff       	call   f01001a6 <_panic>
f0131427:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013142a:	8b 00                	mov    (%eax),%eax
f013142c:	85 c0                	test   %eax,%eax
f013142e:	74 10                	je     f0131440 <alloc_block_FF+0x11d>
f0131430:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131433:	8b 00                	mov    (%eax),%eax
f0131435:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131438:	8b 52 04             	mov    0x4(%edx),%edx
f013143b:	89 50 04             	mov    %edx,0x4(%eax)
f013143e:	eb 0b                	jmp    f013144b <alloc_block_FF+0x128>
f0131440:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131443:	8b 40 04             	mov    0x4(%eax),%eax
f0131446:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f013144b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013144e:	8b 40 04             	mov    0x4(%eax),%eax
f0131451:	85 c0                	test   %eax,%eax
f0131453:	74 0f                	je     f0131464 <alloc_block_FF+0x141>
f0131455:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131458:	8b 40 04             	mov    0x4(%eax),%eax
f013145b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013145e:	8b 12                	mov    (%edx),%edx
f0131460:	89 10                	mov    %edx,(%eax)
f0131462:	eb 0a                	jmp    f013146e <alloc_block_FF+0x14b>
f0131464:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131467:	8b 00                	mov    (%eax),%eax
f0131469:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f013146e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131471:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131477:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013147a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131481:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131486:	48                   	dec    %eax
f0131487:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
			   point->sva += size;
f013148c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013148f:	8b 50 08             	mov    0x8(%eax),%edx
f0131492:	8b 45 08             	mov    0x8(%ebp),%eax
f0131495:	01 c2                	add    %eax,%edx
f0131497:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013149a:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f013149d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314a0:	8b 40 0c             	mov    0xc(%eax),%eax
f01314a3:	2b 45 08             	sub    0x8(%ebp),%eax
f01314a6:	89 c2                	mov    %eax,%edx
f01314a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314ab:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f01314ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314b1:	eb 3b                	jmp    f01314ee <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01314b3:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f01314b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01314bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01314bf:	74 07                	je     f01314c8 <alloc_block_FF+0x1a5>
f01314c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314c4:	8b 00                	mov    (%eax),%eax
f01314c6:	eb 05                	jmp    f01314cd <alloc_block_FF+0x1aa>
f01314c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01314cd:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f01314d2:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f01314d7:	85 c0                	test   %eax,%eax
f01314d9:	0f 85 57 fe ff ff    	jne    f0131336 <alloc_block_FF+0x13>
f01314df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01314e3:	0f 85 4d fe ff ff    	jne    f0131336 <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f01314e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01314ee:	c9                   	leave  
f01314ef:	c3                   	ret    

f01314f0 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f01314f0:	55                   	push   %ebp
f01314f1:	89 e5                	mov    %esp,%ebp
f01314f3:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f01314f6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f01314fd:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131502:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131505:	e9 df 00 00 00       	jmp    f01315e9 <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f013150a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013150d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131510:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131513:	0f 82 c8 00 00 00    	jb     f01315e1 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0131519:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013151c:	8b 40 0c             	mov    0xc(%eax),%eax
f013151f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131522:	0f 85 8a 00 00 00    	jne    f01315b2 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f0131528:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013152c:	75 17                	jne    f0131545 <alloc_block_BF+0x55>
f013152e:	83 ec 04             	sub    $0x4,%esp
f0131531:	68 30 c7 13 f0       	push   $0xf013c730
f0131536:	68 b7 00 00 00       	push   $0xb7
f013153b:	68 87 c6 13 f0       	push   $0xf013c687
f0131540:	e8 61 ec fc ff       	call   f01001a6 <_panic>
f0131545:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131548:	8b 00                	mov    (%eax),%eax
f013154a:	85 c0                	test   %eax,%eax
f013154c:	74 10                	je     f013155e <alloc_block_BF+0x6e>
f013154e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131551:	8b 00                	mov    (%eax),%eax
f0131553:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131556:	8b 52 04             	mov    0x4(%edx),%edx
f0131559:	89 50 04             	mov    %edx,0x4(%eax)
f013155c:	eb 0b                	jmp    f0131569 <alloc_block_BF+0x79>
f013155e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131561:	8b 40 04             	mov    0x4(%eax),%eax
f0131564:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131569:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013156c:	8b 40 04             	mov    0x4(%eax),%eax
f013156f:	85 c0                	test   %eax,%eax
f0131571:	74 0f                	je     f0131582 <alloc_block_BF+0x92>
f0131573:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131576:	8b 40 04             	mov    0x4(%eax),%eax
f0131579:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013157c:	8b 12                	mov    (%edx),%edx
f013157e:	89 10                	mov    %edx,(%eax)
f0131580:	eb 0a                	jmp    f013158c <alloc_block_BF+0x9c>
f0131582:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131585:	8b 00                	mov    (%eax),%eax
f0131587:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f013158c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013158f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131595:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131598:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013159f:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f01315a4:	48                   	dec    %eax
f01315a5:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
			   return currentMemBlock;
f01315aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315ad:	e9 4d 01 00 00       	jmp    f01316ff <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f01315b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315b5:	8b 40 0c             	mov    0xc(%eax),%eax
f01315b8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01315bb:	76 24                	jbe    f01315e1 <alloc_block_BF+0xf1>
f01315bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315c0:	8b 40 0c             	mov    0xc(%eax),%eax
f01315c3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01315c6:	73 19                	jae    f01315e1 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f01315c8:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f01315cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315d2:	8b 40 0c             	mov    0xc(%eax),%eax
f01315d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f01315d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315db:	8b 40 08             	mov    0x8(%eax),%eax
f01315de:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f01315e1:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f01315e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01315e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01315ed:	74 07                	je     f01315f6 <alloc_block_BF+0x106>
f01315ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315f2:	8b 00                	mov    (%eax),%eax
f01315f4:	eb 05                	jmp    f01315fb <alloc_block_BF+0x10b>
f01315f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01315fb:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0131600:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131605:	85 c0                	test   %eax,%eax
f0131607:	0f 85 fd fe ff ff    	jne    f013150a <alloc_block_BF+0x1a>
f013160d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131611:	0f 85 f3 fe ff ff    	jne    f013150a <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f0131617:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013161b:	0f 84 d9 00 00 00    	je     f01316fa <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131621:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0131626:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f0131629:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013162c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013162f:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0131632:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131635:	8b 55 08             	mov    0x8(%ebp),%edx
f0131638:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f013163b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013163f:	75 17                	jne    f0131658 <alloc_block_BF+0x168>
f0131641:	83 ec 04             	sub    $0x4,%esp
f0131644:	68 30 c7 13 f0       	push   $0xf013c730
f0131649:	68 c7 00 00 00       	push   $0xc7
f013164e:	68 87 c6 13 f0       	push   $0xf013c687
f0131653:	e8 4e eb fc ff       	call   f01001a6 <_panic>
f0131658:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013165b:	8b 00                	mov    (%eax),%eax
f013165d:	85 c0                	test   %eax,%eax
f013165f:	74 10                	je     f0131671 <alloc_block_BF+0x181>
f0131661:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131664:	8b 00                	mov    (%eax),%eax
f0131666:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131669:	8b 52 04             	mov    0x4(%edx),%edx
f013166c:	89 50 04             	mov    %edx,0x4(%eax)
f013166f:	eb 0b                	jmp    f013167c <alloc_block_BF+0x18c>
f0131671:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131674:	8b 40 04             	mov    0x4(%eax),%eax
f0131677:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f013167c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013167f:	8b 40 04             	mov    0x4(%eax),%eax
f0131682:	85 c0                	test   %eax,%eax
f0131684:	74 0f                	je     f0131695 <alloc_block_BF+0x1a5>
f0131686:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131689:	8b 40 04             	mov    0x4(%eax),%eax
f013168c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013168f:	8b 12                	mov    (%edx),%edx
f0131691:	89 10                	mov    %edx,(%eax)
f0131693:	eb 0a                	jmp    f013169f <alloc_block_BF+0x1af>
f0131695:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131698:	8b 00                	mov    (%eax),%eax
f013169a:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f013169f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01316a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01316a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01316ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01316b2:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f01316b7:	48                   	dec    %eax
f01316b8:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f01316bd:	83 ec 08             	sub    $0x8,%esp
f01316c0:	ff 75 ec             	pushl  -0x14(%ebp)
f01316c3:	68 c0 84 6e f0       	push   $0xf06e84c0
f01316c8:	e8 71 f9 ff ff       	call   f013103e <find_block>
f01316cd:	83 c4 10             	add    $0x10,%esp
f01316d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f01316d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01316d6:	8b 50 08             	mov    0x8(%eax),%edx
f01316d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01316dc:	01 c2                	add    %eax,%edx
f01316de:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01316e1:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f01316e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01316e7:	8b 40 0c             	mov    0xc(%eax),%eax
f01316ea:	2b 45 08             	sub    0x8(%ebp),%eax
f01316ed:	89 c2                	mov    %eax,%edx
f01316ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01316f2:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f01316f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01316f8:	eb 05                	jmp    f01316ff <alloc_block_BF+0x20f>
	}
	return NULL;
f01316fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01316ff:	c9                   	leave  
f0131700:	c3                   	ret    

f0131701 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0131701:	55                   	push   %ebp
f0131702:	89 e5                	mov    %esp,%ebp
f0131704:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f0131707:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f013170c:	85 c0                	test   %eax,%eax
f013170e:	0f 85 de 01 00 00    	jne    f01318f2 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0131714:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131719:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013171c:	e9 9e 01 00 00       	jmp    f01318bf <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0131721:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131724:	8b 40 0c             	mov    0xc(%eax),%eax
f0131727:	3b 45 08             	cmp    0x8(%ebp),%eax
f013172a:	0f 82 87 01 00 00    	jb     f01318b7 <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0131730:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131733:	8b 40 0c             	mov    0xc(%eax),%eax
f0131736:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131739:	0f 85 95 00 00 00    	jne    f01317d4 <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f013173f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131743:	75 17                	jne    f013175c <alloc_block_NF+0x5b>
f0131745:	83 ec 04             	sub    $0x4,%esp
f0131748:	68 30 c7 13 f0       	push   $0xf013c730
f013174d:	68 e0 00 00 00       	push   $0xe0
f0131752:	68 87 c6 13 f0       	push   $0xf013c687
f0131757:	e8 4a ea fc ff       	call   f01001a6 <_panic>
f013175c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013175f:	8b 00                	mov    (%eax),%eax
f0131761:	85 c0                	test   %eax,%eax
f0131763:	74 10                	je     f0131775 <alloc_block_NF+0x74>
f0131765:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131768:	8b 00                	mov    (%eax),%eax
f013176a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013176d:	8b 52 04             	mov    0x4(%edx),%edx
f0131770:	89 50 04             	mov    %edx,0x4(%eax)
f0131773:	eb 0b                	jmp    f0131780 <alloc_block_NF+0x7f>
f0131775:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131778:	8b 40 04             	mov    0x4(%eax),%eax
f013177b:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131780:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131783:	8b 40 04             	mov    0x4(%eax),%eax
f0131786:	85 c0                	test   %eax,%eax
f0131788:	74 0f                	je     f0131799 <alloc_block_NF+0x98>
f013178a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013178d:	8b 40 04             	mov    0x4(%eax),%eax
f0131790:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131793:	8b 12                	mov    (%edx),%edx
f0131795:	89 10                	mov    %edx,(%eax)
f0131797:	eb 0a                	jmp    f01317a3 <alloc_block_NF+0xa2>
f0131799:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013179c:	8b 00                	mov    (%eax),%eax
f013179e:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f01317a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01317ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317af:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01317b6:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f01317bb:	48                   	dec    %eax
f01317bc:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
				   svaOfNF = point->sva;
f01317c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317c4:	8b 40 08             	mov    0x8(%eax),%eax
f01317c7:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0
				   return  point;
f01317cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317cf:	e9 f8 04 00 00       	jmp    f0131ccc <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f01317d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317d7:	8b 40 0c             	mov    0xc(%eax),%eax
f01317da:	3b 45 08             	cmp    0x8(%ebp),%eax
f01317dd:	0f 86 d4 00 00 00    	jbe    f01318b7 <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01317e3:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f01317e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f01317eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317ee:	8b 50 08             	mov    0x8(%eax),%edx
f01317f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317f4:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f01317f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317fa:	8b 55 08             	mov    0x8(%ebp),%edx
f01317fd:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131800:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131804:	75 17                	jne    f013181d <alloc_block_NF+0x11c>
f0131806:	83 ec 04             	sub    $0x4,%esp
f0131809:	68 30 c7 13 f0       	push   $0xf013c730
f013180e:	68 e9 00 00 00       	push   $0xe9
f0131813:	68 87 c6 13 f0       	push   $0xf013c687
f0131818:	e8 89 e9 fc ff       	call   f01001a6 <_panic>
f013181d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131820:	8b 00                	mov    (%eax),%eax
f0131822:	85 c0                	test   %eax,%eax
f0131824:	74 10                	je     f0131836 <alloc_block_NF+0x135>
f0131826:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131829:	8b 00                	mov    (%eax),%eax
f013182b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013182e:	8b 52 04             	mov    0x4(%edx),%edx
f0131831:	89 50 04             	mov    %edx,0x4(%eax)
f0131834:	eb 0b                	jmp    f0131841 <alloc_block_NF+0x140>
f0131836:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131839:	8b 40 04             	mov    0x4(%eax),%eax
f013183c:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131841:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131844:	8b 40 04             	mov    0x4(%eax),%eax
f0131847:	85 c0                	test   %eax,%eax
f0131849:	74 0f                	je     f013185a <alloc_block_NF+0x159>
f013184b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013184e:	8b 40 04             	mov    0x4(%eax),%eax
f0131851:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131854:	8b 12                	mov    (%edx),%edx
f0131856:	89 10                	mov    %edx,(%eax)
f0131858:	eb 0a                	jmp    f0131864 <alloc_block_NF+0x163>
f013185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013185d:	8b 00                	mov    (%eax),%eax
f013185f:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131864:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131867:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013186d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131870:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131877:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f013187c:	48                   	dec    %eax
f013187d:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
				   svaOfNF = ReturnedBlock->sva;
f0131882:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131885:	8b 40 08             	mov    0x8(%eax),%eax
f0131888:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0
				   point->sva += size;
f013188d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131890:	8b 50 08             	mov    0x8(%eax),%edx
f0131893:	8b 45 08             	mov    0x8(%ebp),%eax
f0131896:	01 c2                	add    %eax,%edx
f0131898:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013189b:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f013189e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318a1:	8b 40 0c             	mov    0xc(%eax),%eax
f01318a4:	2b 45 08             	sub    0x8(%ebp),%eax
f01318a7:	89 c2                	mov    %eax,%edx
f01318a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318ac:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f01318af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318b2:	e9 15 04 00 00       	jmp    f0131ccc <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01318b7:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f01318bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01318bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01318c3:	74 07                	je     f01318cc <alloc_block_NF+0x1cb>
f01318c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318c8:	8b 00                	mov    (%eax),%eax
f01318ca:	eb 05                	jmp    f01318d1 <alloc_block_NF+0x1d0>
f01318cc:	b8 00 00 00 00       	mov    $0x0,%eax
f01318d1:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f01318d6:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f01318db:	85 c0                	test   %eax,%eax
f01318dd:	0f 85 3e fe ff ff    	jne    f0131721 <alloc_block_NF+0x20>
f01318e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01318e7:	0f 85 34 fe ff ff    	jne    f0131721 <alloc_block_NF+0x20>
f01318ed:	e9 d5 03 00 00       	jmp    f0131cc7 <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f01318f2:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f01318f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01318fa:	e9 b1 01 00 00       	jmp    f0131ab0 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f01318ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131902:	8b 50 08             	mov    0x8(%eax),%edx
f0131905:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f013190a:	39 c2                	cmp    %eax,%edx
f013190c:	0f 82 96 01 00 00    	jb     f0131aa8 <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0131912:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131915:	8b 40 0c             	mov    0xc(%eax),%eax
f0131918:	3b 45 08             	cmp    0x8(%ebp),%eax
f013191b:	0f 82 87 01 00 00    	jb     f0131aa8 <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0131921:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131924:	8b 40 0c             	mov    0xc(%eax),%eax
f0131927:	3b 45 08             	cmp    0x8(%ebp),%eax
f013192a:	0f 85 95 00 00 00    	jne    f01319c5 <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0131930:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131934:	75 17                	jne    f013194d <alloc_block_NF+0x24c>
f0131936:	83 ec 04             	sub    $0x4,%esp
f0131939:	68 30 c7 13 f0       	push   $0xf013c730
f013193e:	68 fc 00 00 00       	push   $0xfc
f0131943:	68 87 c6 13 f0       	push   $0xf013c687
f0131948:	e8 59 e8 fc ff       	call   f01001a6 <_panic>
f013194d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131950:	8b 00                	mov    (%eax),%eax
f0131952:	85 c0                	test   %eax,%eax
f0131954:	74 10                	je     f0131966 <alloc_block_NF+0x265>
f0131956:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131959:	8b 00                	mov    (%eax),%eax
f013195b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013195e:	8b 52 04             	mov    0x4(%edx),%edx
f0131961:	89 50 04             	mov    %edx,0x4(%eax)
f0131964:	eb 0b                	jmp    f0131971 <alloc_block_NF+0x270>
f0131966:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131969:	8b 40 04             	mov    0x4(%eax),%eax
f013196c:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131971:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131974:	8b 40 04             	mov    0x4(%eax),%eax
f0131977:	85 c0                	test   %eax,%eax
f0131979:	74 0f                	je     f013198a <alloc_block_NF+0x289>
f013197b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013197e:	8b 40 04             	mov    0x4(%eax),%eax
f0131981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131984:	8b 12                	mov    (%edx),%edx
f0131986:	89 10                	mov    %edx,(%eax)
f0131988:	eb 0a                	jmp    f0131994 <alloc_block_NF+0x293>
f013198a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013198d:	8b 00                	mov    (%eax),%eax
f013198f:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131994:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131997:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013199d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319a0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01319a7:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f01319ac:	48                   	dec    %eax
f01319ad:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
					   svaOfNF = point->sva;
f01319b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319b5:	8b 40 08             	mov    0x8(%eax),%eax
f01319b8:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0
					   return  point;
f01319bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319c0:	e9 07 03 00 00       	jmp    f0131ccc <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01319c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319c8:	8b 40 0c             	mov    0xc(%eax),%eax
f01319cb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01319ce:	0f 86 d4 00 00 00    	jbe    f0131aa8 <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01319d4:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f01319d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f01319dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319df:	8b 50 08             	mov    0x8(%eax),%edx
f01319e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01319e5:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01319e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01319eb:	8b 55 08             	mov    0x8(%ebp),%edx
f01319ee:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01319f1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01319f5:	75 17                	jne    f0131a0e <alloc_block_NF+0x30d>
f01319f7:	83 ec 04             	sub    $0x4,%esp
f01319fa:	68 30 c7 13 f0       	push   $0xf013c730
f01319ff:	68 04 01 00 00       	push   $0x104
f0131a04:	68 87 c6 13 f0       	push   $0xf013c687
f0131a09:	e8 98 e7 fc ff       	call   f01001a6 <_panic>
f0131a0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a11:	8b 00                	mov    (%eax),%eax
f0131a13:	85 c0                	test   %eax,%eax
f0131a15:	74 10                	je     f0131a27 <alloc_block_NF+0x326>
f0131a17:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a1a:	8b 00                	mov    (%eax),%eax
f0131a1c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131a1f:	8b 52 04             	mov    0x4(%edx),%edx
f0131a22:	89 50 04             	mov    %edx,0x4(%eax)
f0131a25:	eb 0b                	jmp    f0131a32 <alloc_block_NF+0x331>
f0131a27:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a2a:	8b 40 04             	mov    0x4(%eax),%eax
f0131a2d:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131a32:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a35:	8b 40 04             	mov    0x4(%eax),%eax
f0131a38:	85 c0                	test   %eax,%eax
f0131a3a:	74 0f                	je     f0131a4b <alloc_block_NF+0x34a>
f0131a3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a3f:	8b 40 04             	mov    0x4(%eax),%eax
f0131a42:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131a45:	8b 12                	mov    (%edx),%edx
f0131a47:	89 10                	mov    %edx,(%eax)
f0131a49:	eb 0a                	jmp    f0131a55 <alloc_block_NF+0x354>
f0131a4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a4e:	8b 00                	mov    (%eax),%eax
f0131a50:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131a55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a58:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131a5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a61:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131a68:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131a6d:	48                   	dec    %eax
f0131a6e:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
					   svaOfNF = ReturnedBlock->sva;
f0131a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a76:	8b 40 08             	mov    0x8(%eax),%eax
f0131a79:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0
					   point->sva += size;
f0131a7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a81:	8b 50 08             	mov    0x8(%eax),%edx
f0131a84:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a87:	01 c2                	add    %eax,%edx
f0131a89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a8c:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0131a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a92:	8b 40 0c             	mov    0xc(%eax),%eax
f0131a95:	2b 45 08             	sub    0x8(%ebp),%eax
f0131a98:	89 c2                	mov    %eax,%edx
f0131a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a9d:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0131aa0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131aa3:	e9 24 02 00 00       	jmp    f0131ccc <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131aa8:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131aad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131ab0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ab4:	74 07                	je     f0131abd <alloc_block_NF+0x3bc>
f0131ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ab9:	8b 00                	mov    (%eax),%eax
f0131abb:	eb 05                	jmp    f0131ac2 <alloc_block_NF+0x3c1>
f0131abd:	b8 00 00 00 00       	mov    $0x0,%eax
f0131ac2:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0131ac7:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131acc:	85 c0                	test   %eax,%eax
f0131ace:	0f 85 2b fe ff ff    	jne    f01318ff <alloc_block_NF+0x1fe>
f0131ad4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ad8:	0f 85 21 fe ff ff    	jne    f01318ff <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131ade:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131ae3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131ae6:	e9 ae 01 00 00       	jmp    f0131c99 <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0131aeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131aee:	8b 50 08             	mov    0x8(%eax),%edx
f0131af1:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131af6:	39 c2                	cmp    %eax,%edx
f0131af8:	0f 83 93 01 00 00    	jae    f0131c91 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0131afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b01:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b04:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b07:	0f 82 84 01 00 00    	jb     f0131c91 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0131b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b10:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b13:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b16:	0f 85 95 00 00 00    	jne    f0131bb1 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0131b1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131b20:	75 17                	jne    f0131b39 <alloc_block_NF+0x438>
f0131b22:	83 ec 04             	sub    $0x4,%esp
f0131b25:	68 30 c7 13 f0       	push   $0xf013c730
f0131b2a:	68 14 01 00 00       	push   $0x114
f0131b2f:	68 87 c6 13 f0       	push   $0xf013c687
f0131b34:	e8 6d e6 fc ff       	call   f01001a6 <_panic>
f0131b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b3c:	8b 00                	mov    (%eax),%eax
f0131b3e:	85 c0                	test   %eax,%eax
f0131b40:	74 10                	je     f0131b52 <alloc_block_NF+0x451>
f0131b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b45:	8b 00                	mov    (%eax),%eax
f0131b47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b4a:	8b 52 04             	mov    0x4(%edx),%edx
f0131b4d:	89 50 04             	mov    %edx,0x4(%eax)
f0131b50:	eb 0b                	jmp    f0131b5d <alloc_block_NF+0x45c>
f0131b52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b55:	8b 40 04             	mov    0x4(%eax),%eax
f0131b58:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131b5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b60:	8b 40 04             	mov    0x4(%eax),%eax
f0131b63:	85 c0                	test   %eax,%eax
f0131b65:	74 0f                	je     f0131b76 <alloc_block_NF+0x475>
f0131b67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b6a:	8b 40 04             	mov    0x4(%eax),%eax
f0131b6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b70:	8b 12                	mov    (%edx),%edx
f0131b72:	89 10                	mov    %edx,(%eax)
f0131b74:	eb 0a                	jmp    f0131b80 <alloc_block_NF+0x47f>
f0131b76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b79:	8b 00                	mov    (%eax),%eax
f0131b7b:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131b80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b83:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131b89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b8c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131b93:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131b98:	48                   	dec    %eax
f0131b99:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
					   svaOfNF = point->sva;
f0131b9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ba1:	8b 40 08             	mov    0x8(%eax),%eax
f0131ba4:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0
					   return  point;
f0131ba9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bac:	e9 1b 01 00 00       	jmp    f0131ccc <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0131bb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bb4:	8b 40 0c             	mov    0xc(%eax),%eax
f0131bb7:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131bba:	0f 86 d1 00 00 00    	jbe    f0131c91 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131bc0:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0131bc5:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0131bc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bcb:	8b 50 08             	mov    0x8(%eax),%edx
f0131bce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131bd1:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0131bd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131bd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0131bda:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131bdd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131be1:	75 17                	jne    f0131bfa <alloc_block_NF+0x4f9>
f0131be3:	83 ec 04             	sub    $0x4,%esp
f0131be6:	68 30 c7 13 f0       	push   $0xf013c730
f0131beb:	68 1c 01 00 00       	push   $0x11c
f0131bf0:	68 87 c6 13 f0       	push   $0xf013c687
f0131bf5:	e8 ac e5 fc ff       	call   f01001a6 <_panic>
f0131bfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131bfd:	8b 00                	mov    (%eax),%eax
f0131bff:	85 c0                	test   %eax,%eax
f0131c01:	74 10                	je     f0131c13 <alloc_block_NF+0x512>
f0131c03:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c06:	8b 00                	mov    (%eax),%eax
f0131c08:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131c0b:	8b 52 04             	mov    0x4(%edx),%edx
f0131c0e:	89 50 04             	mov    %edx,0x4(%eax)
f0131c11:	eb 0b                	jmp    f0131c1e <alloc_block_NF+0x51d>
f0131c13:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c16:	8b 40 04             	mov    0x4(%eax),%eax
f0131c19:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131c1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c21:	8b 40 04             	mov    0x4(%eax),%eax
f0131c24:	85 c0                	test   %eax,%eax
f0131c26:	74 0f                	je     f0131c37 <alloc_block_NF+0x536>
f0131c28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c2b:	8b 40 04             	mov    0x4(%eax),%eax
f0131c2e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131c31:	8b 12                	mov    (%edx),%edx
f0131c33:	89 10                	mov    %edx,(%eax)
f0131c35:	eb 0a                	jmp    f0131c41 <alloc_block_NF+0x540>
f0131c37:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c3a:	8b 00                	mov    (%eax),%eax
f0131c3c:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131c41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131c4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c4d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131c54:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131c59:	48                   	dec    %eax
f0131c5a:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
					   svaOfNF = ReturnedBlock->sva;
f0131c5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c62:	8b 40 08             	mov    0x8(%eax),%eax
f0131c65:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0
					   point->sva += size;
f0131c6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c6d:	8b 50 08             	mov    0x8(%eax),%edx
f0131c70:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c73:	01 c2                	add    %eax,%edx
f0131c75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c78:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0131c7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c7e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c81:	2b 45 08             	sub    0x8(%ebp),%eax
f0131c84:	89 c2                	mov    %eax,%edx
f0131c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c89:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0131c8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131c8f:	eb 3b                	jmp    f0131ccc <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131c91:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131c96:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131c99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c9d:	74 07                	je     f0131ca6 <alloc_block_NF+0x5a5>
f0131c9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ca2:	8b 00                	mov    (%eax),%eax
f0131ca4:	eb 05                	jmp    f0131cab <alloc_block_NF+0x5aa>
f0131ca6:	b8 00 00 00 00       	mov    $0x0,%eax
f0131cab:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0131cb0:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131cb5:	85 c0                	test   %eax,%eax
f0131cb7:	0f 85 2e fe ff ff    	jne    f0131aeb <alloc_block_NF+0x3ea>
f0131cbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131cc1:	0f 85 24 fe ff ff    	jne    f0131aeb <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0131cc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131ccc:	c9                   	leave  
f0131ccd:	c3                   	ret    

f0131cce <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0131cce:	55                   	push   %ebp
f0131ccf:	89 e5                	mov    %esp,%ebp
f0131cd1:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0131cd4:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131cd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0131cdc:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f0131ce1:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0131ce4:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131ce9:	85 c0                	test   %eax,%eax
f0131ceb:	74 14                	je     f0131d01 <insert_sorted_with_merge_freeList+0x33>
f0131ced:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cf0:	8b 50 08             	mov    0x8(%eax),%edx
f0131cf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131cf6:	8b 40 08             	mov    0x8(%eax),%eax
f0131cf9:	39 c2                	cmp    %eax,%edx
f0131cfb:	0f 87 9b 01 00 00    	ja     f0131e9c <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0131d01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131d05:	75 17                	jne    f0131d1e <insert_sorted_with_merge_freeList+0x50>
f0131d07:	83 ec 04             	sub    $0x4,%esp
f0131d0a:	68 64 c6 13 f0       	push   $0xf013c664
f0131d0f:	68 38 01 00 00       	push   $0x138
f0131d14:	68 87 c6 13 f0       	push   $0xf013c687
f0131d19:	e8 88 e4 fc ff       	call   f01001a6 <_panic>
f0131d1e:	8b 15 c0 84 6e f0    	mov    0xf06e84c0,%edx
f0131d24:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d27:	89 10                	mov    %edx,(%eax)
f0131d29:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d2c:	8b 00                	mov    (%eax),%eax
f0131d2e:	85 c0                	test   %eax,%eax
f0131d30:	74 0d                	je     f0131d3f <insert_sorted_with_merge_freeList+0x71>
f0131d32:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131d37:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d3a:	89 50 04             	mov    %edx,0x4(%eax)
f0131d3d:	eb 08                	jmp    f0131d47 <insert_sorted_with_merge_freeList+0x79>
f0131d3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d42:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131d47:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d4a:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131d4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d52:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d59:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131d5e:	40                   	inc    %eax
f0131d5f:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0131d64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131d68:	0f 84 a8 06 00 00    	je     f0132416 <insert_sorted_with_merge_freeList+0x748>
f0131d6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d71:	8b 50 08             	mov    0x8(%eax),%edx
f0131d74:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d77:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d7a:	01 c2                	add    %eax,%edx
f0131d7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d7f:	8b 40 08             	mov    0x8(%eax),%eax
f0131d82:	39 c2                	cmp    %eax,%edx
f0131d84:	0f 85 8c 06 00 00    	jne    f0132416 <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0131d8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d8d:	8b 50 0c             	mov    0xc(%eax),%edx
f0131d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131d93:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d96:	01 c2                	add    %eax,%edx
f0131d98:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d9b:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0131d9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131da2:	75 17                	jne    f0131dbb <insert_sorted_with_merge_freeList+0xed>
f0131da4:	83 ec 04             	sub    $0x4,%esp
f0131da7:	68 30 c7 13 f0       	push   $0xf013c730
f0131dac:	68 3c 01 00 00       	push   $0x13c
f0131db1:	68 87 c6 13 f0       	push   $0xf013c687
f0131db6:	e8 eb e3 fc ff       	call   f01001a6 <_panic>
f0131dbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dbe:	8b 00                	mov    (%eax),%eax
f0131dc0:	85 c0                	test   %eax,%eax
f0131dc2:	74 10                	je     f0131dd4 <insert_sorted_with_merge_freeList+0x106>
f0131dc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dc7:	8b 00                	mov    (%eax),%eax
f0131dc9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131dcc:	8b 52 04             	mov    0x4(%edx),%edx
f0131dcf:	89 50 04             	mov    %edx,0x4(%eax)
f0131dd2:	eb 0b                	jmp    f0131ddf <insert_sorted_with_merge_freeList+0x111>
f0131dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dd7:	8b 40 04             	mov    0x4(%eax),%eax
f0131dda:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131de2:	8b 40 04             	mov    0x4(%eax),%eax
f0131de5:	85 c0                	test   %eax,%eax
f0131de7:	74 0f                	je     f0131df8 <insert_sorted_with_merge_freeList+0x12a>
f0131de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dec:	8b 40 04             	mov    0x4(%eax),%eax
f0131def:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131df2:	8b 12                	mov    (%edx),%edx
f0131df4:	89 10                	mov    %edx,(%eax)
f0131df6:	eb 0a                	jmp    f0131e02 <insert_sorted_with_merge_freeList+0x134>
f0131df8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131dfb:	8b 00                	mov    (%eax),%eax
f0131dfd:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e0e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e15:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131e1a:	48                   	dec    %eax
f0131e1b:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
			head->size = 0;
f0131e20:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e23:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0131e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e2d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0131e34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131e38:	75 17                	jne    f0131e51 <insert_sorted_with_merge_freeList+0x183>
f0131e3a:	83 ec 04             	sub    $0x4,%esp
f0131e3d:	68 64 c6 13 f0       	push   $0xf013c664
f0131e42:	68 3f 01 00 00       	push   $0x13f
f0131e47:	68 87 c6 13 f0       	push   $0xf013c687
f0131e4c:	e8 55 e3 fc ff       	call   f01001a6 <_panic>
f0131e51:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0131e57:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e5a:	89 10                	mov    %edx,(%eax)
f0131e5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e5f:	8b 00                	mov    (%eax),%eax
f0131e61:	85 c0                	test   %eax,%eax
f0131e63:	74 0d                	je     f0131e72 <insert_sorted_with_merge_freeList+0x1a4>
f0131e65:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0131e6a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131e6d:	89 50 04             	mov    %edx,0x4(%eax)
f0131e70:	eb 08                	jmp    f0131e7a <insert_sorted_with_merge_freeList+0x1ac>
f0131e72:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e75:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131e7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e7d:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131e85:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e8c:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131e91:	40                   	inc    %eax
f0131e92:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0131e97:	e9 7a 05 00 00       	jmp    f0132416 <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0131e9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e9f:	8b 50 08             	mov    0x8(%eax),%edx
f0131ea2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131ea5:	8b 40 08             	mov    0x8(%eax),%eax
f0131ea8:	39 c2                	cmp    %eax,%edx
f0131eaa:	0f 82 14 01 00 00    	jb     f0131fc4 <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0131eb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131eb3:	8b 50 08             	mov    0x8(%eax),%edx
f0131eb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131eb9:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ebc:	01 c2                	add    %eax,%edx
f0131ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ec1:	8b 40 08             	mov    0x8(%eax),%eax
f0131ec4:	39 c2                	cmp    %eax,%edx
f0131ec6:	0f 85 90 00 00 00    	jne    f0131f5c <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0131ecc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131ecf:	8b 50 0c             	mov    0xc(%eax),%edx
f0131ed2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ed5:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ed8:	01 c2                	add    %eax,%edx
f0131eda:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131edd:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0131ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ee3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0131eea:	8b 45 08             	mov    0x8(%ebp),%eax
f0131eed:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0131ef4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131ef8:	75 17                	jne    f0131f11 <insert_sorted_with_merge_freeList+0x243>
f0131efa:	83 ec 04             	sub    $0x4,%esp
f0131efd:	68 64 c6 13 f0       	push   $0xf013c664
f0131f02:	68 49 01 00 00       	push   $0x149
f0131f07:	68 87 c6 13 f0       	push   $0xf013c687
f0131f0c:	e8 95 e2 fc ff       	call   f01001a6 <_panic>
f0131f11:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0131f17:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f1a:	89 10                	mov    %edx,(%eax)
f0131f1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f1f:	8b 00                	mov    (%eax),%eax
f0131f21:	85 c0                	test   %eax,%eax
f0131f23:	74 0d                	je     f0131f32 <insert_sorted_with_merge_freeList+0x264>
f0131f25:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0131f2a:	8b 55 08             	mov    0x8(%ebp),%edx
f0131f2d:	89 50 04             	mov    %edx,0x4(%eax)
f0131f30:	eb 08                	jmp    f0131f3a <insert_sorted_with_merge_freeList+0x26c>
f0131f32:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f35:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131f3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f3d:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131f42:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f45:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131f4c:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131f51:	40                   	inc    %eax
f0131f52:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0131f57:	e9 bb 04 00 00       	jmp    f0132417 <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0131f5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131f60:	75 17                	jne    f0131f79 <insert_sorted_with_merge_freeList+0x2ab>
f0131f62:	83 ec 04             	sub    $0x4,%esp
f0131f65:	68 d8 c6 13 f0       	push   $0xf013c6d8
f0131f6a:	68 4c 01 00 00       	push   $0x14c
f0131f6f:	68 87 c6 13 f0       	push   $0xf013c687
f0131f74:	e8 2d e2 fc ff       	call   f01001a6 <_panic>
f0131f79:	8b 15 c4 84 6e f0    	mov    0xf06e84c4,%edx
f0131f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f82:	89 50 04             	mov    %edx,0x4(%eax)
f0131f85:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f88:	8b 40 04             	mov    0x4(%eax),%eax
f0131f8b:	85 c0                	test   %eax,%eax
f0131f8d:	74 0c                	je     f0131f9b <insert_sorted_with_merge_freeList+0x2cd>
f0131f8f:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f0131f94:	8b 55 08             	mov    0x8(%ebp),%edx
f0131f97:	89 10                	mov    %edx,(%eax)
f0131f99:	eb 08                	jmp    f0131fa3 <insert_sorted_with_merge_freeList+0x2d5>
f0131f9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f9e:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131fa3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fa6:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131fab:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131fb4:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131fb9:	40                   	inc    %eax
f0131fba:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0131fbf:	e9 53 04 00 00       	jmp    f0132417 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0131fc4:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131fc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131fcc:	e9 15 04 00 00       	jmp    f01323e6 <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0131fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fd4:	8b 00                	mov    (%eax),%eax
f0131fd6:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0131fd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fdc:	8b 50 08             	mov    0x8(%eax),%edx
f0131fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fe2:	8b 40 08             	mov    0x8(%eax),%eax
f0131fe5:	39 c2                	cmp    %eax,%edx
f0131fe7:	0f 86 f1 03 00 00    	jbe    f01323de <insert_sorted_with_merge_freeList+0x710>
f0131fed:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ff0:	8b 50 08             	mov    0x8(%eax),%edx
f0131ff3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ff6:	8b 40 08             	mov    0x8(%eax),%eax
f0131ff9:	39 c2                	cmp    %eax,%edx
f0131ffb:	0f 83 dd 03 00 00    	jae    f01323de <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0132001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132004:	8b 50 08             	mov    0x8(%eax),%edx
f0132007:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013200a:	8b 40 0c             	mov    0xc(%eax),%eax
f013200d:	01 c2                	add    %eax,%edx
f013200f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132012:	8b 40 08             	mov    0x8(%eax),%eax
f0132015:	39 c2                	cmp    %eax,%edx
f0132017:	0f 85 b9 01 00 00    	jne    f01321d6 <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f013201d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132020:	8b 50 08             	mov    0x8(%eax),%edx
f0132023:	8b 45 08             	mov    0x8(%ebp),%eax
f0132026:	8b 40 0c             	mov    0xc(%eax),%eax
f0132029:	01 c2                	add    %eax,%edx
f013202b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013202e:	8b 40 08             	mov    0x8(%eax),%eax
f0132031:	39 c2                	cmp    %eax,%edx
f0132033:	0f 85 0d 01 00 00    	jne    f0132146 <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0132039:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013203c:	8b 50 0c             	mov    0xc(%eax),%edx
f013203f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132042:	8b 40 0c             	mov    0xc(%eax),%eax
f0132045:	01 c2                	add    %eax,%edx
f0132047:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013204a:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f013204d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132051:	75 17                	jne    f013206a <insert_sorted_with_merge_freeList+0x39c>
f0132053:	83 ec 04             	sub    $0x4,%esp
f0132056:	68 30 c7 13 f0       	push   $0xf013c730
f013205b:	68 5c 01 00 00       	push   $0x15c
f0132060:	68 87 c6 13 f0       	push   $0xf013c687
f0132065:	e8 3c e1 fc ff       	call   f01001a6 <_panic>
f013206a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013206d:	8b 00                	mov    (%eax),%eax
f013206f:	85 c0                	test   %eax,%eax
f0132071:	74 10                	je     f0132083 <insert_sorted_with_merge_freeList+0x3b5>
f0132073:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132076:	8b 00                	mov    (%eax),%eax
f0132078:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013207b:	8b 52 04             	mov    0x4(%edx),%edx
f013207e:	89 50 04             	mov    %edx,0x4(%eax)
f0132081:	eb 0b                	jmp    f013208e <insert_sorted_with_merge_freeList+0x3c0>
f0132083:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132086:	8b 40 04             	mov    0x4(%eax),%eax
f0132089:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f013208e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132091:	8b 40 04             	mov    0x4(%eax),%eax
f0132094:	85 c0                	test   %eax,%eax
f0132096:	74 0f                	je     f01320a7 <insert_sorted_with_merge_freeList+0x3d9>
f0132098:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013209b:	8b 40 04             	mov    0x4(%eax),%eax
f013209e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01320a1:	8b 12                	mov    (%edx),%edx
f01320a3:	89 10                	mov    %edx,(%eax)
f01320a5:	eb 0a                	jmp    f01320b1 <insert_sorted_with_merge_freeList+0x3e3>
f01320a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01320aa:	8b 00                	mov    (%eax),%eax
f01320ac:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f01320b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01320b4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01320ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01320bd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01320c4:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f01320c9:	48                   	dec    %eax
f01320ca:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
						nextBlock->sva = 0;
f01320cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01320d2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f01320d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01320dc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f01320e3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01320e7:	75 17                	jne    f0132100 <insert_sorted_with_merge_freeList+0x432>
f01320e9:	83 ec 04             	sub    $0x4,%esp
f01320ec:	68 64 c6 13 f0       	push   $0xf013c664
f01320f1:	68 5f 01 00 00       	push   $0x15f
f01320f6:	68 87 c6 13 f0       	push   $0xf013c687
f01320fb:	e8 a6 e0 fc ff       	call   f01001a6 <_panic>
f0132100:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0132106:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132109:	89 10                	mov    %edx,(%eax)
f013210b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013210e:	8b 00                	mov    (%eax),%eax
f0132110:	85 c0                	test   %eax,%eax
f0132112:	74 0d                	je     f0132121 <insert_sorted_with_merge_freeList+0x453>
f0132114:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0132119:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013211c:	89 50 04             	mov    %edx,0x4(%eax)
f013211f:	eb 08                	jmp    f0132129 <insert_sorted_with_merge_freeList+0x45b>
f0132121:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132124:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0132129:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013212c:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0132131:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132134:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013213b:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0132140:	40                   	inc    %eax
f0132141:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
					}
					currentBlock->size += blockToInsert->size;
f0132146:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132149:	8b 50 0c             	mov    0xc(%eax),%edx
f013214c:	8b 45 08             	mov    0x8(%ebp),%eax
f013214f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132152:	01 c2                	add    %eax,%edx
f0132154:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132157:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f013215a:	8b 45 08             	mov    0x8(%ebp),%eax
f013215d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0132164:	8b 45 08             	mov    0x8(%ebp),%eax
f0132167:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f013216e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132172:	75 17                	jne    f013218b <insert_sorted_with_merge_freeList+0x4bd>
f0132174:	83 ec 04             	sub    $0x4,%esp
f0132177:	68 64 c6 13 f0       	push   $0xf013c664
f013217c:	68 64 01 00 00       	push   $0x164
f0132181:	68 87 c6 13 f0       	push   $0xf013c687
f0132186:	e8 1b e0 fc ff       	call   f01001a6 <_panic>
f013218b:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0132191:	8b 45 08             	mov    0x8(%ebp),%eax
f0132194:	89 10                	mov    %edx,(%eax)
f0132196:	8b 45 08             	mov    0x8(%ebp),%eax
f0132199:	8b 00                	mov    (%eax),%eax
f013219b:	85 c0                	test   %eax,%eax
f013219d:	74 0d                	je     f01321ac <insert_sorted_with_merge_freeList+0x4de>
f013219f:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f01321a4:	8b 55 08             	mov    0x8(%ebp),%edx
f01321a7:	89 50 04             	mov    %edx,0x4(%eax)
f01321aa:	eb 08                	jmp    f01321b4 <insert_sorted_with_merge_freeList+0x4e6>
f01321ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01321af:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f01321b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01321b7:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f01321bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01321bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01321c6:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f01321cb:	40                   	inc    %eax
f01321cc:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
					break;
f01321d1:	e9 41 02 00 00       	jmp    f0132417 <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01321d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01321d9:	8b 50 08             	mov    0x8(%eax),%edx
f01321dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01321df:	8b 40 0c             	mov    0xc(%eax),%eax
f01321e2:	01 c2                	add    %eax,%edx
f01321e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01321e7:	8b 40 08             	mov    0x8(%eax),%eax
f01321ea:	39 c2                	cmp    %eax,%edx
f01321ec:	0f 85 7c 01 00 00    	jne    f013236e <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f01321f2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01321f6:	74 06                	je     f01321fe <insert_sorted_with_merge_freeList+0x530>
f01321f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01321fc:	75 17                	jne    f0132215 <insert_sorted_with_merge_freeList+0x547>
f01321fe:	83 ec 04             	sub    $0x4,%esp
f0132201:	68 a0 c6 13 f0       	push   $0xf013c6a0
f0132206:	68 69 01 00 00       	push   $0x169
f013220b:	68 87 c6 13 f0       	push   $0xf013c687
f0132210:	e8 91 df fc ff       	call   f01001a6 <_panic>
f0132215:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132218:	8b 50 04             	mov    0x4(%eax),%edx
f013221b:	8b 45 08             	mov    0x8(%ebp),%eax
f013221e:	89 50 04             	mov    %edx,0x4(%eax)
f0132221:	8b 45 08             	mov    0x8(%ebp),%eax
f0132224:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132227:	89 10                	mov    %edx,(%eax)
f0132229:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013222c:	8b 40 04             	mov    0x4(%eax),%eax
f013222f:	85 c0                	test   %eax,%eax
f0132231:	74 0d                	je     f0132240 <insert_sorted_with_merge_freeList+0x572>
f0132233:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132236:	8b 40 04             	mov    0x4(%eax),%eax
f0132239:	8b 55 08             	mov    0x8(%ebp),%edx
f013223c:	89 10                	mov    %edx,(%eax)
f013223e:	eb 08                	jmp    f0132248 <insert_sorted_with_merge_freeList+0x57a>
f0132240:	8b 45 08             	mov    0x8(%ebp),%eax
f0132243:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0132248:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013224b:	8b 55 08             	mov    0x8(%ebp),%edx
f013224e:	89 50 04             	mov    %edx,0x4(%eax)
f0132251:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0132256:	40                   	inc    %eax
f0132257:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
					blockToInsert->size += nextBlock->size;
f013225c:	8b 45 08             	mov    0x8(%ebp),%eax
f013225f:	8b 50 0c             	mov    0xc(%eax),%edx
f0132262:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132265:	8b 40 0c             	mov    0xc(%eax),%eax
f0132268:	01 c2                	add    %eax,%edx
f013226a:	8b 45 08             	mov    0x8(%ebp),%eax
f013226d:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132270:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132274:	75 17                	jne    f013228d <insert_sorted_with_merge_freeList+0x5bf>
f0132276:	83 ec 04             	sub    $0x4,%esp
f0132279:	68 30 c7 13 f0       	push   $0xf013c730
f013227e:	68 6b 01 00 00       	push   $0x16b
f0132283:	68 87 c6 13 f0       	push   $0xf013c687
f0132288:	e8 19 df fc ff       	call   f01001a6 <_panic>
f013228d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132290:	8b 00                	mov    (%eax),%eax
f0132292:	85 c0                	test   %eax,%eax
f0132294:	74 10                	je     f01322a6 <insert_sorted_with_merge_freeList+0x5d8>
f0132296:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132299:	8b 00                	mov    (%eax),%eax
f013229b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013229e:	8b 52 04             	mov    0x4(%edx),%edx
f01322a1:	89 50 04             	mov    %edx,0x4(%eax)
f01322a4:	eb 0b                	jmp    f01322b1 <insert_sorted_with_merge_freeList+0x5e3>
f01322a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322a9:	8b 40 04             	mov    0x4(%eax),%eax
f01322ac:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f01322b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322b4:	8b 40 04             	mov    0x4(%eax),%eax
f01322b7:	85 c0                	test   %eax,%eax
f01322b9:	74 0f                	je     f01322ca <insert_sorted_with_merge_freeList+0x5fc>
f01322bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322be:	8b 40 04             	mov    0x4(%eax),%eax
f01322c1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01322c4:	8b 12                	mov    (%edx),%edx
f01322c6:	89 10                	mov    %edx,(%eax)
f01322c8:	eb 0a                	jmp    f01322d4 <insert_sorted_with_merge_freeList+0x606>
f01322ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322cd:	8b 00                	mov    (%eax),%eax
f01322cf:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f01322d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01322dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322e0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01322e7:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f01322ec:	48                   	dec    %eax
f01322ed:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
					nextBlock->sva = 0;
f01322f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322f5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f01322fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01322ff:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132306:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013230a:	75 17                	jne    f0132323 <insert_sorted_with_merge_freeList+0x655>
f013230c:	83 ec 04             	sub    $0x4,%esp
f013230f:	68 64 c6 13 f0       	push   $0xf013c664
f0132314:	68 6e 01 00 00       	push   $0x16e
f0132319:	68 87 c6 13 f0       	push   $0xf013c687
f013231e:	e8 83 de fc ff       	call   f01001a6 <_panic>
f0132323:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0132329:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013232c:	89 10                	mov    %edx,(%eax)
f013232e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132331:	8b 00                	mov    (%eax),%eax
f0132333:	85 c0                	test   %eax,%eax
f0132335:	74 0d                	je     f0132344 <insert_sorted_with_merge_freeList+0x676>
f0132337:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f013233c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013233f:	89 50 04             	mov    %edx,0x4(%eax)
f0132342:	eb 08                	jmp    f013234c <insert_sorted_with_merge_freeList+0x67e>
f0132344:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132347:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f013234c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013234f:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0132354:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132357:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013235e:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0132363:	40                   	inc    %eax
f0132364:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
					break;
f0132369:	e9 a9 00 00 00       	jmp    f0132417 <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f013236e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132372:	74 06                	je     f013237a <insert_sorted_with_merge_freeList+0x6ac>
f0132374:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132378:	75 17                	jne    f0132391 <insert_sorted_with_merge_freeList+0x6c3>
f013237a:	83 ec 04             	sub    $0x4,%esp
f013237d:	68 fc c6 13 f0       	push   $0xf013c6fc
f0132382:	68 73 01 00 00       	push   $0x173
f0132387:	68 87 c6 13 f0       	push   $0xf013c687
f013238c:	e8 15 de fc ff       	call   f01001a6 <_panic>
f0132391:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132394:	8b 10                	mov    (%eax),%edx
f0132396:	8b 45 08             	mov    0x8(%ebp),%eax
f0132399:	89 10                	mov    %edx,(%eax)
f013239b:	8b 45 08             	mov    0x8(%ebp),%eax
f013239e:	8b 00                	mov    (%eax),%eax
f01323a0:	85 c0                	test   %eax,%eax
f01323a2:	74 0b                	je     f01323af <insert_sorted_with_merge_freeList+0x6e1>
f01323a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323a7:	8b 00                	mov    (%eax),%eax
f01323a9:	8b 55 08             	mov    0x8(%ebp),%edx
f01323ac:	89 50 04             	mov    %edx,0x4(%eax)
f01323af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323b2:	8b 55 08             	mov    0x8(%ebp),%edx
f01323b5:	89 10                	mov    %edx,(%eax)
f01323b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01323ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01323bd:	89 50 04             	mov    %edx,0x4(%eax)
f01323c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01323c3:	8b 00                	mov    (%eax),%eax
f01323c5:	85 c0                	test   %eax,%eax
f01323c7:	75 08                	jne    f01323d1 <insert_sorted_with_merge_freeList+0x703>
f01323c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01323cc:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f01323d1:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f01323d6:	40                   	inc    %eax
f01323d7:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
					break;
f01323dc:	eb 39                	jmp    f0132417 <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f01323de:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f01323e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01323ea:	74 07                	je     f01323f3 <insert_sorted_with_merge_freeList+0x725>
f01323ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323ef:	8b 00                	mov    (%eax),%eax
f01323f1:	eb 05                	jmp    f01323f8 <insert_sorted_with_merge_freeList+0x72a>
f01323f3:	b8 00 00 00 00       	mov    $0x0,%eax
f01323f8:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f01323fd:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0132402:	85 c0                	test   %eax,%eax
f0132404:	0f 85 c7 fb ff ff    	jne    f0131fd1 <insert_sorted_with_merge_freeList+0x303>
f013240a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013240e:	0f 85 bd fb ff ff    	jne    f0131fd1 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132414:	eb 01                	jmp    f0132417 <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132416:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132417:	90                   	nop
f0132418:	c9                   	leave  
f0132419:	c3                   	ret    
f013241a:	66 90                	xchg   %ax,%ax

f013241c <__udivdi3>:
f013241c:	55                   	push   %ebp
f013241d:	57                   	push   %edi
f013241e:	56                   	push   %esi
f013241f:	53                   	push   %ebx
f0132420:	83 ec 1c             	sub    $0x1c,%esp
f0132423:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0132427:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f013242b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013242f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0132433:	89 ca                	mov    %ecx,%edx
f0132435:	89 f8                	mov    %edi,%eax
f0132437:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f013243b:	85 f6                	test   %esi,%esi
f013243d:	75 2d                	jne    f013246c <__udivdi3+0x50>
f013243f:	39 cf                	cmp    %ecx,%edi
f0132441:	77 65                	ja     f01324a8 <__udivdi3+0x8c>
f0132443:	89 fd                	mov    %edi,%ebp
f0132445:	85 ff                	test   %edi,%edi
f0132447:	75 0b                	jne    f0132454 <__udivdi3+0x38>
f0132449:	b8 01 00 00 00       	mov    $0x1,%eax
f013244e:	31 d2                	xor    %edx,%edx
f0132450:	f7 f7                	div    %edi
f0132452:	89 c5                	mov    %eax,%ebp
f0132454:	31 d2                	xor    %edx,%edx
f0132456:	89 c8                	mov    %ecx,%eax
f0132458:	f7 f5                	div    %ebp
f013245a:	89 c1                	mov    %eax,%ecx
f013245c:	89 d8                	mov    %ebx,%eax
f013245e:	f7 f5                	div    %ebp
f0132460:	89 cf                	mov    %ecx,%edi
f0132462:	89 fa                	mov    %edi,%edx
f0132464:	83 c4 1c             	add    $0x1c,%esp
f0132467:	5b                   	pop    %ebx
f0132468:	5e                   	pop    %esi
f0132469:	5f                   	pop    %edi
f013246a:	5d                   	pop    %ebp
f013246b:	c3                   	ret    
f013246c:	39 ce                	cmp    %ecx,%esi
f013246e:	77 28                	ja     f0132498 <__udivdi3+0x7c>
f0132470:	0f bd fe             	bsr    %esi,%edi
f0132473:	83 f7 1f             	xor    $0x1f,%edi
f0132476:	75 40                	jne    f01324b8 <__udivdi3+0x9c>
f0132478:	39 ce                	cmp    %ecx,%esi
f013247a:	72 0a                	jb     f0132486 <__udivdi3+0x6a>
f013247c:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0132480:	0f 87 9e 00 00 00    	ja     f0132524 <__udivdi3+0x108>
f0132486:	b8 01 00 00 00       	mov    $0x1,%eax
f013248b:	89 fa                	mov    %edi,%edx
f013248d:	83 c4 1c             	add    $0x1c,%esp
f0132490:	5b                   	pop    %ebx
f0132491:	5e                   	pop    %esi
f0132492:	5f                   	pop    %edi
f0132493:	5d                   	pop    %ebp
f0132494:	c3                   	ret    
f0132495:	8d 76 00             	lea    0x0(%esi),%esi
f0132498:	31 ff                	xor    %edi,%edi
f013249a:	31 c0                	xor    %eax,%eax
f013249c:	89 fa                	mov    %edi,%edx
f013249e:	83 c4 1c             	add    $0x1c,%esp
f01324a1:	5b                   	pop    %ebx
f01324a2:	5e                   	pop    %esi
f01324a3:	5f                   	pop    %edi
f01324a4:	5d                   	pop    %ebp
f01324a5:	c3                   	ret    
f01324a6:	66 90                	xchg   %ax,%ax
f01324a8:	89 d8                	mov    %ebx,%eax
f01324aa:	f7 f7                	div    %edi
f01324ac:	31 ff                	xor    %edi,%edi
f01324ae:	89 fa                	mov    %edi,%edx
f01324b0:	83 c4 1c             	add    $0x1c,%esp
f01324b3:	5b                   	pop    %ebx
f01324b4:	5e                   	pop    %esi
f01324b5:	5f                   	pop    %edi
f01324b6:	5d                   	pop    %ebp
f01324b7:	c3                   	ret    
f01324b8:	bd 20 00 00 00       	mov    $0x20,%ebp
f01324bd:	89 eb                	mov    %ebp,%ebx
f01324bf:	29 fb                	sub    %edi,%ebx
f01324c1:	89 f9                	mov    %edi,%ecx
f01324c3:	d3 e6                	shl    %cl,%esi
f01324c5:	89 c5                	mov    %eax,%ebp
f01324c7:	88 d9                	mov    %bl,%cl
f01324c9:	d3 ed                	shr    %cl,%ebp
f01324cb:	89 e9                	mov    %ebp,%ecx
f01324cd:	09 f1                	or     %esi,%ecx
f01324cf:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f01324d3:	89 f9                	mov    %edi,%ecx
f01324d5:	d3 e0                	shl    %cl,%eax
f01324d7:	89 c5                	mov    %eax,%ebp
f01324d9:	89 d6                	mov    %edx,%esi
f01324db:	88 d9                	mov    %bl,%cl
f01324dd:	d3 ee                	shr    %cl,%esi
f01324df:	89 f9                	mov    %edi,%ecx
f01324e1:	d3 e2                	shl    %cl,%edx
f01324e3:	8b 44 24 08          	mov    0x8(%esp),%eax
f01324e7:	88 d9                	mov    %bl,%cl
f01324e9:	d3 e8                	shr    %cl,%eax
f01324eb:	09 c2                	or     %eax,%edx
f01324ed:	89 d0                	mov    %edx,%eax
f01324ef:	89 f2                	mov    %esi,%edx
f01324f1:	f7 74 24 0c          	divl   0xc(%esp)
f01324f5:	89 d6                	mov    %edx,%esi
f01324f7:	89 c3                	mov    %eax,%ebx
f01324f9:	f7 e5                	mul    %ebp
f01324fb:	39 d6                	cmp    %edx,%esi
f01324fd:	72 19                	jb     f0132518 <__udivdi3+0xfc>
f01324ff:	74 0b                	je     f013250c <__udivdi3+0xf0>
f0132501:	89 d8                	mov    %ebx,%eax
f0132503:	31 ff                	xor    %edi,%edi
f0132505:	e9 58 ff ff ff       	jmp    f0132462 <__udivdi3+0x46>
f013250a:	66 90                	xchg   %ax,%ax
f013250c:	8b 54 24 08          	mov    0x8(%esp),%edx
f0132510:	89 f9                	mov    %edi,%ecx
f0132512:	d3 e2                	shl    %cl,%edx
f0132514:	39 c2                	cmp    %eax,%edx
f0132516:	73 e9                	jae    f0132501 <__udivdi3+0xe5>
f0132518:	8d 43 ff             	lea    -0x1(%ebx),%eax
f013251b:	31 ff                	xor    %edi,%edi
f013251d:	e9 40 ff ff ff       	jmp    f0132462 <__udivdi3+0x46>
f0132522:	66 90                	xchg   %ax,%ax
f0132524:	31 c0                	xor    %eax,%eax
f0132526:	e9 37 ff ff ff       	jmp    f0132462 <__udivdi3+0x46>
f013252b:	90                   	nop

f013252c <__umoddi3>:
f013252c:	55                   	push   %ebp
f013252d:	57                   	push   %edi
f013252e:	56                   	push   %esi
f013252f:	53                   	push   %ebx
f0132530:	83 ec 1c             	sub    $0x1c,%esp
f0132533:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0132537:	8b 74 24 34          	mov    0x34(%esp),%esi
f013253b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013253f:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0132543:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0132547:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f013254b:	89 f3                	mov    %esi,%ebx
f013254d:	89 fa                	mov    %edi,%edx
f013254f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132553:	89 34 24             	mov    %esi,(%esp)
f0132556:	85 c0                	test   %eax,%eax
f0132558:	75 1a                	jne    f0132574 <__umoddi3+0x48>
f013255a:	39 f7                	cmp    %esi,%edi
f013255c:	0f 86 a2 00 00 00    	jbe    f0132604 <__umoddi3+0xd8>
f0132562:	89 c8                	mov    %ecx,%eax
f0132564:	89 f2                	mov    %esi,%edx
f0132566:	f7 f7                	div    %edi
f0132568:	89 d0                	mov    %edx,%eax
f013256a:	31 d2                	xor    %edx,%edx
f013256c:	83 c4 1c             	add    $0x1c,%esp
f013256f:	5b                   	pop    %ebx
f0132570:	5e                   	pop    %esi
f0132571:	5f                   	pop    %edi
f0132572:	5d                   	pop    %ebp
f0132573:	c3                   	ret    
f0132574:	39 f0                	cmp    %esi,%eax
f0132576:	0f 87 ac 00 00 00    	ja     f0132628 <__umoddi3+0xfc>
f013257c:	0f bd e8             	bsr    %eax,%ebp
f013257f:	83 f5 1f             	xor    $0x1f,%ebp
f0132582:	0f 84 ac 00 00 00    	je     f0132634 <__umoddi3+0x108>
f0132588:	bf 20 00 00 00       	mov    $0x20,%edi
f013258d:	29 ef                	sub    %ebp,%edi
f013258f:	89 fe                	mov    %edi,%esi
f0132591:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0132595:	89 e9                	mov    %ebp,%ecx
f0132597:	d3 e0                	shl    %cl,%eax
f0132599:	89 d7                	mov    %edx,%edi
f013259b:	89 f1                	mov    %esi,%ecx
f013259d:	d3 ef                	shr    %cl,%edi
f013259f:	09 c7                	or     %eax,%edi
f01325a1:	89 e9                	mov    %ebp,%ecx
f01325a3:	d3 e2                	shl    %cl,%edx
f01325a5:	89 14 24             	mov    %edx,(%esp)
f01325a8:	89 d8                	mov    %ebx,%eax
f01325aa:	d3 e0                	shl    %cl,%eax
f01325ac:	89 c2                	mov    %eax,%edx
f01325ae:	8b 44 24 08          	mov    0x8(%esp),%eax
f01325b2:	d3 e0                	shl    %cl,%eax
f01325b4:	89 44 24 04          	mov    %eax,0x4(%esp)
f01325b8:	8b 44 24 08          	mov    0x8(%esp),%eax
f01325bc:	89 f1                	mov    %esi,%ecx
f01325be:	d3 e8                	shr    %cl,%eax
f01325c0:	09 d0                	or     %edx,%eax
f01325c2:	d3 eb                	shr    %cl,%ebx
f01325c4:	89 da                	mov    %ebx,%edx
f01325c6:	f7 f7                	div    %edi
f01325c8:	89 d3                	mov    %edx,%ebx
f01325ca:	f7 24 24             	mull   (%esp)
f01325cd:	89 c6                	mov    %eax,%esi
f01325cf:	89 d1                	mov    %edx,%ecx
f01325d1:	39 d3                	cmp    %edx,%ebx
f01325d3:	0f 82 87 00 00 00    	jb     f0132660 <__umoddi3+0x134>
f01325d9:	0f 84 91 00 00 00    	je     f0132670 <__umoddi3+0x144>
f01325df:	8b 54 24 04          	mov    0x4(%esp),%edx
f01325e3:	29 f2                	sub    %esi,%edx
f01325e5:	19 cb                	sbb    %ecx,%ebx
f01325e7:	89 d8                	mov    %ebx,%eax
f01325e9:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01325ed:	d3 e0                	shl    %cl,%eax
f01325ef:	89 e9                	mov    %ebp,%ecx
f01325f1:	d3 ea                	shr    %cl,%edx
f01325f3:	09 d0                	or     %edx,%eax
f01325f5:	89 e9                	mov    %ebp,%ecx
f01325f7:	d3 eb                	shr    %cl,%ebx
f01325f9:	89 da                	mov    %ebx,%edx
f01325fb:	83 c4 1c             	add    $0x1c,%esp
f01325fe:	5b                   	pop    %ebx
f01325ff:	5e                   	pop    %esi
f0132600:	5f                   	pop    %edi
f0132601:	5d                   	pop    %ebp
f0132602:	c3                   	ret    
f0132603:	90                   	nop
f0132604:	89 fd                	mov    %edi,%ebp
f0132606:	85 ff                	test   %edi,%edi
f0132608:	75 0b                	jne    f0132615 <__umoddi3+0xe9>
f013260a:	b8 01 00 00 00       	mov    $0x1,%eax
f013260f:	31 d2                	xor    %edx,%edx
f0132611:	f7 f7                	div    %edi
f0132613:	89 c5                	mov    %eax,%ebp
f0132615:	89 f0                	mov    %esi,%eax
f0132617:	31 d2                	xor    %edx,%edx
f0132619:	f7 f5                	div    %ebp
f013261b:	89 c8                	mov    %ecx,%eax
f013261d:	f7 f5                	div    %ebp
f013261f:	89 d0                	mov    %edx,%eax
f0132621:	e9 44 ff ff ff       	jmp    f013256a <__umoddi3+0x3e>
f0132626:	66 90                	xchg   %ax,%ax
f0132628:	89 c8                	mov    %ecx,%eax
f013262a:	89 f2                	mov    %esi,%edx
f013262c:	83 c4 1c             	add    $0x1c,%esp
f013262f:	5b                   	pop    %ebx
f0132630:	5e                   	pop    %esi
f0132631:	5f                   	pop    %edi
f0132632:	5d                   	pop    %ebp
f0132633:	c3                   	ret    
f0132634:	3b 04 24             	cmp    (%esp),%eax
f0132637:	72 06                	jb     f013263f <__umoddi3+0x113>
f0132639:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f013263d:	77 0f                	ja     f013264e <__umoddi3+0x122>
f013263f:	89 f2                	mov    %esi,%edx
f0132641:	29 f9                	sub    %edi,%ecx
f0132643:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0132647:	89 14 24             	mov    %edx,(%esp)
f013264a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f013264e:	8b 44 24 04          	mov    0x4(%esp),%eax
f0132652:	8b 14 24             	mov    (%esp),%edx
f0132655:	83 c4 1c             	add    $0x1c,%esp
f0132658:	5b                   	pop    %ebx
f0132659:	5e                   	pop    %esi
f013265a:	5f                   	pop    %edi
f013265b:	5d                   	pop    %ebp
f013265c:	c3                   	ret    
f013265d:	8d 76 00             	lea    0x0(%esi),%esi
f0132660:	2b 04 24             	sub    (%esp),%eax
f0132663:	19 fa                	sbb    %edi,%edx
f0132665:	89 d1                	mov    %edx,%ecx
f0132667:	89 c6                	mov    %eax,%esi
f0132669:	e9 71 ff ff ff       	jmp    f01325df <__umoddi3+0xb3>
f013266e:	66 90                	xchg   %ax,%ax
f0132670:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0132674:	72 ea                	jb     f0132660 <__umoddi3+0x134>
f0132676:	89 d9                	mov    %ebx,%ecx
f0132678:	e9 62 ff ff ff       	jmp    f01325df <__umoddi3+0xb3>
