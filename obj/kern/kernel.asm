
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 30 19 00 	lgdtl  0x193018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 2f 19 f0       	mov    $0xf0192fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c 1d 88 f0 01 	movl   $0x1,0xf0881d5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 1d 88 f0 01 	movl   $0x1,0xf0881d30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc 1e 88 f0       	mov    $0xf0881ebc,%edx
f010006a:	b8 9c 11 88 f0       	mov    $0xf088119c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c 11 88 f0       	push   $0xf088119c
f010007e:	e8 f8 15 03 00       	call   f013167b <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 58 1d 88 f0 ff 	movl   $0xffffffff,0xf0881d58
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 6d 61 00 00       	call   f010620c <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 f9 5c 00 00       	call   f0105d9d <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 7a 64 00 00       	call   f0106523 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 3d 9d 00 00       	call   f0109deb <env_init>
	idt_init();
f01000ae:	e8 f5 b2 00 00       	call   f010b3a8 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 27 de 00 00       	call   f010dedf <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 ca cc 00 00       	call   f010cd91 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 f9 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 e7 77 00 00       	call   f01078be <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 b5 cc 00 00       	call   f010cd91 <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 e4 3c 00 00       	call   f0103dc8 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 e6 fe 02 00       	call   f012ffde <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 28 1d 88 f0 61 	movl   $0x61,0xf0881d28
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b4 1c 88 f0 59 	movl   $0x59,0xf0881cb4
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 e0 6f 00 00       	call   f01070fd <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 91 e1 00 00       	call   f010e2bf <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 b1 de 00 00       	call   f010dfec <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 8c de 00 00       	call   f010dfd4 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 ac de 00 00       	call   f010e004 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 b7 5a 00 00       	call   f0105c17 <pic_init>
	sched_init() ;
f0100160:	e8 60 47 00 00       	call   f01048c5 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 20 37 13 f0       	push   $0xf0133720
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 4c 37 13 f0       	push   $0xf013374c
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 71 37 13 f0       	push   $0xf0133771
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 78 37 13 f0       	push   $0xf0133778
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 c0 37 13 f0       	push   $0xf01337c0
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 08 38 13 f0       	push   $0xf0133808
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 c0 37 13 f0       	push   $0xf01337c0
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 78 37 13 f0       	push   $0xf0133778
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 4d 38 13 f0       	push   $0xf013384d
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 11 88 f0       	mov    %eax,0xf08811a0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 52 38 13 f0       	push   $0xf0133852
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 6b 38 13 f0       	push   $0xf013386b
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 71 9a 00 00       	call   f0109ce0 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 6d 38 13 f0       	push   $0xf013386d
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 92 44 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 11 88 f0       	mov    %eax,0xf08811a0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 52 38 13 f0       	push   $0xf0133852
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 6b 38 13 f0       	push   $0xf013386b
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 c2 51 00 00       	call   f01054db <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 6f 4f 00 00       	call   f01052a2 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 eb 43 00 00       	call   f0104726 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 11 88 f0       	mov    %eax,0xf08811a0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 52 38 13 f0       	push   $0xf0133852
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 6b 38 13 f0       	push   $0xf013386b
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 85 47 00 00       	call   f0104b5a <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 58 1d 88 f0 00 	movl   $0x0,0xf0881d58
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 82 38 13 f0       	push   $0xf0133882
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 6b 38 13 f0       	push   $0xf013386b
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 11 88 f0       	mov    0xf08811c0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 11 88 f0       	mov    %eax,0xf08811c0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 11 88 f0 b4 	movl   $0x3b4,0xf08811c4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 11 88 f0 d4 	movl   $0x3d4,0xf08811c4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 11 88 f0       	mov    %eax,0xf08811c8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 11 88 f0    	mov    0xf08811c8,%edx
f0100771:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc 11 88 f0 	mov    0xf08811cc,%cx
f01007a4:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 11 88 f0    	mov    0xf08811c8,%ecx
f010080e:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc 11 88 f0 	mov    %dx,0xf08811cc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 11 88 f0       	mov    0xf08811c8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 11 88 f0       	mov    0xf08811c8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 51 0e 03 00       	call   f01316ab <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 11 88 f0    	mov    0xf08811c8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc 11 88 f0    	mov    %ax,0xf08811cc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 11 88 f0    	mov    0xf08811c4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 11 88 f0       	mov    0xf08811c4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc 11 88 f0    	mov    0xf08811cc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 11 88 f0    	mov    0xf08811c4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 31 19 f0    	mov    -0xfe6cee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 13 88 f0       	mov    %eax,0xf08813e8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 35 19 f0 	mov    -0xfe6cae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 13 88 f0       	mov    0xf08813e8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 9d 38 13 f0       	push   $0xf013389d
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 13 88 f0    	mov    %edx,0xf08813e4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 11 88 f0    	mov    %dl,-0xf77ee20(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 13 88 f0 00 	movl   $0x0,0xf08813e4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 13 88 f0    	mov    0xf08813e0,%edx
f0100b03:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 13 88 f0       	mov    0xf08813e0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 13 88 f0    	mov    %edx,0xf08813e0
f0100b1a:	8a 80 e0 11 88 f0    	mov    -0xf77ee20(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 13 88 f0       	mov    0xf08813e0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 13 88 f0 00 	movl   $0x0,0xf08813e0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 11 88 f0       	mov    0xf08811c0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 13 88 f0    	mov    %edx,0xf08813e4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 11 88 f0    	mov    %dl,-0xf77ee20(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 13 88 f0 00 	movl   $0x0,0xf08813e4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 13 88 f0    	mov    %edx,0xf08813e4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 11 88 f0    	mov    %dl,-0xf77ee20(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 13 88 f0 00 	movl   $0x0,0xf08813e4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 13 88 f0    	mov    0xf08813e0,%edx
f0100bf3:	a1 e4 13 88 f0       	mov    0xf08813e4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 13 88 f0       	mov    0xf08813e0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 13 88 f0    	mov    %edx,0xf08813e0
f0100c0a:	8a 80 e0 11 88 f0    	mov    -0xf77ee20(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 13 88 f0       	mov    0xf08813e0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 13 88 f0 00 	movl   $0x0,0xf08813e0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 11 88 f0       	mov    0xf08811c0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 a9 38 13 f0       	push   $0xf01338a9
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 d9 00 03 00       	call   f0130ddf <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 c6 38 13 f0       	push   $0xf01338c6
f0100d4c:	e8 36 05 03 00       	call   f0131287 <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d79:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100d7c:	50                   	push   %eax
f0100d7d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100d80:	50                   	push   %eax
f0100d81:	68 cc 38 13 f0       	push   $0xf01338cc
f0100d86:	ff 75 08             	pushl  0x8(%ebp)
f0100d89:	e8 33 0d 03 00       	call   f0131ac1 <strsplit>
f0100d8e:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d94:	85 c0                	test   %eax,%eax
f0100d96:	75 0a                	jne    f0100da2 <execute_command+0x32>
		return 0;
f0100d98:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9d:	e9 37 01 00 00       	jmp    f0100ed9 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100da9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100db7:	e9 8c 00 00 00       	jmp    f0100e48 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	89 d0                	mov    %edx,%eax
f0100dc1:	01 c0                	add    %eax,%eax
f0100dc3:	01 d0                	add    %edx,%eax
f0100dc5:	c1 e0 02             	shl    $0x2,%eax
f0100dc8:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100dcd:	8b 10                	mov    (%eax),%edx
f0100dcf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100dd2:	83 ec 08             	sub    $0x8,%esp
f0100dd5:	52                   	push   %edx
f0100dd6:	50                   	push   %eax
f0100dd7:	e8 bd 07 03 00       	call   f0131599 <strcmp>
f0100ddc:	83 c4 10             	add    $0x10,%esp
f0100ddf:	85 c0                	test   %eax,%eax
f0100de1:	75 09                	jne    f0100dec <execute_command+0x7c>
		{
			command_found = 1;
f0100de3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100dea:	eb 6c                	jmp    f0100e58 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100dec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100def:	83 ec 0c             	sub    $0xc,%esp
f0100df2:	50                   	push   %eax
f0100df3:	e8 95 06 03 00       	call   f013148d <strlen>
f0100df8:	83 c4 10             	add    $0x10,%esp
f0100dfb:	89 c1                	mov    %eax,%ecx
f0100dfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e00:	89 d0                	mov    %edx,%eax
f0100e02:	01 c0                	add    %eax,%eax
f0100e04:	01 d0                	add    %edx,%eax
f0100e06:	c1 e0 02             	shl    $0x2,%eax
f0100e09:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e0e:	8b 10                	mov    (%eax),%edx
f0100e10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e13:	83 ec 04             	sub    $0x4,%esp
f0100e16:	51                   	push   %ecx
f0100e17:	52                   	push   %edx
f0100e18:	50                   	push   %eax
f0100e19:	e8 b3 07 03 00       	call   f01315d1 <strncmp>
f0100e1e:	83 c4 10             	add    $0x10,%esp
f0100e21:	85 c0                	test   %eax,%eax
f0100e23:	75 20                	jne    f0100e45 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e36:	8b 10                	mov    (%eax),%edx
f0100e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100e3b:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100e42:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e45:	ff 45 f0             	incl   -0x10(%ebp)
f0100e48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4b:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100e50:	39 c2                	cmp    %eax,%edx
f0100e52:	0f 82 64 ff ff ff    	jb     f0100dbc <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100e58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e5c:	74 2b                	je     f0100e89 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e61:	89 d0                	mov    %edx,%eax
f0100e63:	01 c0                	add    %eax,%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	c1 e0 02             	shl    $0x2,%eax
f0100e6a:	05 48 35 19 f0       	add    $0xf0193548,%eax
f0100e6f:	8b 00                	mov    (%eax),%eax
f0100e71:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100e74:	83 ec 08             	sub    $0x8,%esp
f0100e77:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100e7a:	51                   	push   %ecx
f0100e7b:	52                   	push   %edx
f0100e7c:	ff d0                	call   *%eax
f0100e7e:	83 c4 10             	add    $0x10,%esp
f0100e81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100e87:	eb 50                	jmp    f0100ed9 <execute_command+0x169>
	}
	else if (count == 0)
f0100e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e8d:	75 16                	jne    f0100ea5 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e92:	83 ec 08             	sub    $0x8,%esp
f0100e95:	50                   	push   %eax
f0100e96:	68 d1 38 13 f0       	push   $0xf01338d1
f0100e9b:	e8 6e fe ff ff       	call   f0100d0e <cprintf>
f0100ea0:	83 c4 10             	add    $0x10,%esp
f0100ea3:	eb 2f                	jmp    f0100ed4 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ea5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100eac:	eb 1e                	jmp    f0100ecc <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100eb1:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100eb8:	83 ec 08             	sub    $0x8,%esp
f0100ebb:	50                   	push   %eax
f0100ebc:	68 e7 38 13 f0       	push   $0xf01338e7
f0100ec1:	e8 48 fe ff ff       	call   f0100d0e <cprintf>
f0100ec6:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100ec9:	ff 45 e8             	incl   -0x18(%ebp)
f0100ecc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100ecf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100ed2:	7c da                	jl     f0100eae <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100ed4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ed9:	c9                   	leave  
f0100eda:	c3                   	ret    

f0100edb <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100edb:	55                   	push   %ebp
f0100edc:	89 e5                	mov    %esp,%ebp
f0100ede:	c7 05 5c 1d 88 f0 00 	movl   $0x0,0xf0881d5c
f0100ee5:	00 00 00 
f0100ee8:	90                   	nop
f0100ee9:	5d                   	pop    %ebp
f0100eea:	c3                   	ret    

f0100eeb <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100eeb:	55                   	push   %ebp
f0100eec:	89 e5                	mov    %esp,%ebp
f0100eee:	c7 05 5c 1d 88 f0 01 	movl   $0x1,0xf0881d5c
f0100ef5:	00 00 00 
f0100ef8:	90                   	nop
f0100ef9:	5d                   	pop    %ebp
f0100efa:	c3                   	ret    

f0100efb <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100efb:	55                   	push   %ebp
f0100efc:	89 e5                	mov    %esp,%ebp
f0100efe:	c7 05 5c 1d 88 f0 02 	movl   $0x2,0xf0881d5c
f0100f05:	00 00 00 
f0100f08:	90                   	nop
f0100f09:	5d                   	pop    %ebp
f0100f0a:	c3                   	ret    

f0100f0b <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f0b:	55                   	push   %ebp
f0100f0c:	89 e5                	mov    %esp,%ebp
f0100f0e:	c7 05 5c 1d 88 f0 03 	movl   $0x3,0xf0881d5c
f0100f15:	00 00 00 
f0100f18:	90                   	nop
f0100f19:	5d                   	pop    %ebp
f0100f1a:	c3                   	ret    

f0100f1b <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f1b:	55                   	push   %ebp
f0100f1c:	89 e5                	mov    %esp,%ebp
f0100f1e:	c7 05 5c 1d 88 f0 04 	movl   $0x4,0xf0881d5c
f0100f25:	00 00 00 
f0100f28:	90                   	nop
f0100f29:	5d                   	pop    %ebp
f0100f2a:	c3                   	ret    

f0100f2b <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f2b:	55                   	push   %ebp
f0100f2c:	89 e5                	mov    %esp,%ebp
f0100f2e:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f33:	85 c0                	test   %eax,%eax
f0100f35:	75 04                	jne    f0100f3b <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f37:	b0 01                	mov    $0x1,%al
f0100f39:	eb 02                	jmp    f0100f3d <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f3b:	b0 00                	mov    $0x0,%al
f0100f3d:	5d                   	pop    %ebp
f0100f3e:	c3                   	ret    

f0100f3f <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f3f:	55                   	push   %ebp
f0100f40:	89 e5                	mov    %esp,%ebp
f0100f42:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f47:	83 f8 01             	cmp    $0x1,%eax
f0100f4a:	75 04                	jne    f0100f50 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f4c:	b0 01                	mov    $0x1,%al
f0100f4e:	eb 02                	jmp    f0100f52 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f50:	b0 00                	mov    $0x0,%al
f0100f52:	5d                   	pop    %ebp
f0100f53:	c3                   	ret    

f0100f54 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f54:	55                   	push   %ebp
f0100f55:	89 e5                	mov    %esp,%ebp
f0100f57:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f5c:	83 f8 02             	cmp    $0x2,%eax
f0100f5f:	75 04                	jne    f0100f65 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f61:	b0 01                	mov    $0x1,%al
f0100f63:	eb 02                	jmp    f0100f67 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f65:	b0 00                	mov    $0x0,%al
f0100f67:	5d                   	pop    %ebp
f0100f68:	c3                   	ret    

f0100f69 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f69:	55                   	push   %ebp
f0100f6a:	89 e5                	mov    %esp,%ebp
f0100f6c:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f71:	83 f8 03             	cmp    $0x3,%eax
f0100f74:	75 04                	jne    f0100f7a <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f76:	b0 01                	mov    $0x1,%al
f0100f78:	eb 02                	jmp    f0100f7c <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f7a:	b0 00                	mov    $0x0,%al
f0100f7c:	5d                   	pop    %ebp
f0100f7d:	c3                   	ret    

f0100f7e <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f7e:	55                   	push   %ebp
f0100f7f:	89 e5                	mov    %esp,%ebp
f0100f81:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0100f86:	83 f8 04             	cmp    $0x4,%eax
f0100f89:	75 04                	jne    f0100f8f <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f8b:	b0 01                	mov    $0x1,%al
f0100f8d:	eb 02                	jmp    f0100f91 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f8f:	b0 00                	mov    $0x0,%al
f0100f91:	5d                   	pop    %ebp
f0100f92:	c3                   	ret    

f0100f93 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f93:	55                   	push   %ebp
f0100f94:	89 e5                	mov    %esp,%ebp
f0100f96:	c7 05 30 1d 88 f0 01 	movl   $0x1,0xf0881d30
f0100f9d:	00 00 00 
f0100fa0:	90                   	nop
f0100fa1:	5d                   	pop    %ebp
f0100fa2:	c3                   	ret    

f0100fa3 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fa3:	55                   	push   %ebp
f0100fa4:	89 e5                	mov    %esp,%ebp
f0100fa6:	c7 05 30 1d 88 f0 02 	movl   $0x2,0xf0881d30
f0100fad:	00 00 00 
f0100fb0:	90                   	nop
f0100fb1:	5d                   	pop    %ebp
f0100fb2:	c3                   	ret    

f0100fb3 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fb3:	55                   	push   %ebp
f0100fb4:	89 e5                	mov    %esp,%ebp
f0100fb6:	c7 05 30 1d 88 f0 03 	movl   $0x3,0xf0881d30
f0100fbd:	00 00 00 
f0100fc0:	90                   	nop
f0100fc1:	5d                   	pop    %ebp
f0100fc2:	c3                   	ret    

f0100fc3 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fc3:	55                   	push   %ebp
f0100fc4:	89 e5                	mov    %esp,%ebp
f0100fc6:	c7 05 30 1d 88 f0 04 	movl   $0x4,0xf0881d30
f0100fcd:	00 00 00 
f0100fd0:	90                   	nop
f0100fd1:	5d                   	pop    %ebp
f0100fd2:	c3                   	ret    

f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fd3:	55                   	push   %ebp
f0100fd4:	89 e5                	mov    %esp,%ebp
f0100fd6:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
f0100fdb:	83 f8 01             	cmp    $0x1,%eax
f0100fde:	75 04                	jne    f0100fe4 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fe0:	b0 01                	mov    $0x1,%al
f0100fe2:	eb 02                	jmp    f0100fe6 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fe4:	b0 00                	mov    $0x0,%al
f0100fe6:	5d                   	pop    %ebp
f0100fe7:	c3                   	ret    

f0100fe8 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fe8:	55                   	push   %ebp
f0100fe9:	89 e5                	mov    %esp,%ebp
f0100feb:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
f0100ff0:	83 f8 02             	cmp    $0x2,%eax
f0100ff3:	75 04                	jne    f0100ff9 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100ff5:	b0 01                	mov    $0x1,%al
f0100ff7:	eb 02                	jmp    f0100ffb <isUHeapPlacementStrategyBESTFIT+0x13>
f0100ff9:	b0 00                	mov    $0x0,%al
f0100ffb:	5d                   	pop    %ebp
f0100ffc:	c3                   	ret    

f0100ffd <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100ffd:	55                   	push   %ebp
f0100ffe:	89 e5                	mov    %esp,%ebp
f0101000:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
f0101005:	83 f8 03             	cmp    $0x3,%eax
f0101008:	75 04                	jne    f010100e <isUHeapPlacementStrategyNEXTFIT+0x11>
f010100a:	b0 01                	mov    $0x1,%al
f010100c:	eb 02                	jmp    f0101010 <isUHeapPlacementStrategyNEXTFIT+0x13>
f010100e:	b0 00                	mov    $0x0,%al
f0101010:	5d                   	pop    %ebp
f0101011:	c3                   	ret    

f0101012 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0101012:	55                   	push   %ebp
f0101013:	89 e5                	mov    %esp,%ebp
f0101015:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
f010101a:	83 f8 04             	cmp    $0x4,%eax
f010101d:	75 04                	jne    f0101023 <isUHeapPlacementStrategyWORSTFIT+0x11>
f010101f:	b0 01                	mov    $0x1,%al
f0101021:	eb 02                	jmp    f0101025 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0101023:	b0 00                	mov    $0x0,%al
f0101025:	5d                   	pop    %ebp
f0101026:	c3                   	ret    

f0101027 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101027:	55                   	push   %ebp
f0101028:	89 e5                	mov    %esp,%ebp
f010102a:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010102d:	8b 45 08             	mov    0x8(%ebp),%eax
f0101030:	c1 e8 0c             	shr    $0xc,%eax
f0101033:	89 c2                	mov    %eax,%edx
f0101035:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f010103a:	39 c2                	cmp    %eax,%edx
f010103c:	72 14                	jb     f0101052 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010103e:	83 ec 04             	sub    $0x4,%esp
f0101041:	68 ec 38 13 f0       	push   $0xf01338ec
f0101046:	6a 55                	push   $0x55
f0101048:	68 14 39 13 f0       	push   $0xf0133914
f010104d:	e8 b3 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101052:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f0101058:	8b 45 08             	mov    0x8(%ebp),%eax
f010105b:	c1 e8 0c             	shr    $0xc,%eax
f010105e:	89 c1                	mov    %eax,%ecx
f0101060:	89 c8                	mov    %ecx,%eax
f0101062:	01 c0                	add    %eax,%eax
f0101064:	01 c8                	add    %ecx,%eax
f0101066:	c1 e0 03             	shl    $0x3,%eax
f0101069:	01 d0                	add    %edx,%eax
}
f010106b:	c9                   	leave  
f010106c:	c3                   	ret    

f010106d <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010106d:	55                   	push   %ebp
f010106e:	89 e5                	mov    %esp,%ebp
f0101070:	53                   	push   %ebx
f0101071:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010107b:	eb 3b                	jmp    f01010b8 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010107d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101080:	89 d0                	mov    %edx,%eax
f0101082:	01 c0                	add    %eax,%eax
f0101084:	01 d0                	add    %edx,%eax
f0101086:	c1 e0 02             	shl    $0x2,%eax
f0101089:	05 44 35 19 f0       	add    $0xf0193544,%eax
f010108e:	8b 10                	mov    (%eax),%edx
f0101090:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101093:	89 c8                	mov    %ecx,%eax
f0101095:	01 c0                	add    %eax,%eax
f0101097:	01 c8                	add    %ecx,%eax
f0101099:	c1 e0 02             	shl    $0x2,%eax
f010109c:	05 40 35 19 f0       	add    $0xf0193540,%eax
f01010a1:	8b 00                	mov    (%eax),%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	52                   	push   %edx
f01010a7:	50                   	push   %eax
f01010a8:	68 8e 47 13 f0       	push   $0xf013478e
f01010ad:	e8 5c fc ff ff       	call   f0100d0e <cprintf>
f01010b2:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010b5:	ff 45 f4             	incl   -0xc(%ebp)
f01010b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010bb:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f01010c0:	39 c2                	cmp    %eax,%edx
f01010c2:	72 b9                	jb     f010107d <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010c4:	83 ec 0c             	sub    $0xc,%esp
f01010c7:	68 97 47 13 f0       	push   $0xf0134797
f01010cc:	e8 3d fc ff ff       	call   f0100d0e <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010db:	eb 42                	jmp    f010111f <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010dd:	8b 0d 14 3d 19 f0    	mov    0xf0193d14,%ecx
f01010e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010e6:	89 d0                	mov    %edx,%eax
f01010e8:	01 c0                	add    %eax,%eax
f01010ea:	01 d0                	add    %edx,%eax
f01010ec:	c1 e0 02             	shl    $0x2,%eax
f01010ef:	01 c8                	add    %ecx,%eax
f01010f1:	8b 50 04             	mov    0x4(%eax),%edx
f01010f4:	8b 1d 14 3d 19 f0    	mov    0xf0193d14,%ebx
f01010fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010fd:	89 c8                	mov    %ecx,%eax
f01010ff:	01 c0                	add    %eax,%eax
f0101101:	01 c8                	add    %ecx,%eax
f0101103:	c1 e0 02             	shl    $0x2,%eax
f0101106:	01 d8                	add    %ebx,%eax
f0101108:	8b 00                	mov    (%eax),%eax
f010110a:	83 ec 04             	sub    $0x4,%esp
f010110d:	52                   	push   %edx
f010110e:	50                   	push   %eax
f010110f:	68 ac 47 13 f0       	push   $0xf01347ac
f0101114:	e8 f5 fb ff ff       	call   f0100d0e <cprintf>
f0101119:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010111c:	ff 45 f4             	incl   -0xc(%ebp)
f010111f:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f0101124:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101127:	7c b4                	jl     f01010dd <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101129:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010112e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101131:	c9                   	leave  
f0101132:	c3                   	ret    

f0101133 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101133:	55                   	push   %ebp
f0101134:	89 e5                	mov    %esp,%ebp
f0101136:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101139:	83 ec 0c             	sub    $0xc,%esp
f010113c:	68 c8 47 13 f0       	push   $0xf01347c8
f0101141:	e8 c8 fb ff ff       	call   f0100d0e <cprintf>
f0101146:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101149:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010114e:	83 ec 04             	sub    $0x4,%esp
f0101151:	50                   	push   %eax
f0101152:	68 0c 00 10 f0       	push   $0xf010000c
f0101157:	68 e4 47 13 f0       	push   $0xf01347e4
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101164:	b8 11 37 13 00       	mov    $0x133711,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 11 37 13 f0       	push   $0xf0133711
f0101172:	68 20 48 13 f0       	push   $0xf0134820
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010117f:	b8 9c 11 88 00       	mov    $0x88119c,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 9c 11 88 f0       	push   $0xf088119c
f010118d:	68 5c 48 13 f0       	push   $0xf013485c
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010119a:	b8 bc 1e 88 00       	mov    $0x881ebc,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 bc 1e 88 f0       	push   $0xf0881ebc
f01011a8:	68 a4 48 13 f0       	push   $0xf01348a4
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011b5:	b8 bc 1e 88 f0       	mov    $0xf0881ebc,%eax
f01011ba:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011c0:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011c5:	29 c2                	sub    %eax,%edx
f01011c7:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011c9:	85 c0                	test   %eax,%eax
f01011cb:	79 05                	jns    f01011d2 <command_kernel_info+0x9f>
f01011cd:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011d2:	c1 f8 0a             	sar    $0xa,%eax
f01011d5:	83 ec 08             	sub    $0x8,%esp
f01011d8:	50                   	push   %eax
f01011d9:	68 e0 48 13 f0       	push   $0xf01348e0
f01011de:	e8 2b fb ff ff       	call   f0100d0e <cprintf>
f01011e3:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011eb:	c9                   	leave  
f01011ec:	c3                   	ret    

f01011ed <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011ed:	55                   	push   %ebp
f01011ee:	89 e5                	mov    %esp,%ebp
f01011f0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f3:	83 ec 04             	sub    $0x4,%esp
f01011f6:	68 0c 49 13 f0       	push   $0xf013490c
f01011fb:	68 b0 00 00 00       	push   $0xb0
f0101200:	68 2d 49 13 f0       	push   $0xf013492d
f0101205:	e8 fb ef ff ff       	call   f0100205 <_panic>

f010120a <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010120a:	55                   	push   %ebp
f010120b:	89 e5                	mov    %esp,%ebp
f010120d:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101210:	83 ec 04             	sub    $0x4,%esp
f0101213:	68 0c 49 13 f0       	push   $0xf013490c
f0101218:	68 ba 00 00 00       	push   $0xba
f010121d:	68 2d 49 13 f0       	push   $0xf013492d
f0101222:	e8 de ef ff ff       	call   f0100205 <_panic>

f0101227 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101227:	55                   	push   %ebp
f0101228:	89 e5                	mov    %esp,%ebp
f010122a:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122d:	83 ec 04             	sub    $0x4,%esp
f0101230:	68 0c 49 13 f0       	push   $0xf013490c
f0101235:	68 c3 00 00 00       	push   $0xc3
f010123a:	68 2d 49 13 f0       	push   $0xf013492d
f010123f:	e8 c1 ef ff ff       	call   f0100205 <_panic>

f0101244 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101244:	55                   	push   %ebp
f0101245:	89 e5                	mov    %esp,%ebp
f0101247:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124a:	83 ec 04             	sub    $0x4,%esp
f010124d:	68 0c 49 13 f0       	push   $0xf013490c
f0101252:	68 cf 00 00 00       	push   $0xcf
f0101257:	68 2d 49 13 f0       	push   $0xf013492d
f010125c:	e8 a4 ef ff ff       	call   f0100205 <_panic>

f0101261 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101261:	55                   	push   %ebp
f0101262:	89 e5                	mov    %esp,%ebp
f0101264:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101267:	83 ec 04             	sub    $0x4,%esp
f010126a:	68 0c 49 13 f0       	push   $0xf013490c
f010126f:	68 d8 00 00 00       	push   $0xd8
f0101274:	68 2d 49 13 f0       	push   $0xf013492d
f0101279:	e8 87 ef ff ff       	call   f0100205 <_panic>

f010127e <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010127e:	55                   	push   %ebp
f010127f:	89 e5                	mov    %esp,%ebp
f0101281:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101284:	83 ec 04             	sub    $0x4,%esp
f0101287:	68 0c 49 13 f0       	push   $0xf013490c
f010128c:	68 e1 00 00 00       	push   $0xe1
f0101291:	68 2d 49 13 f0       	push   $0xf013492d
f0101296:	e8 6a ef ff ff       	call   f0100205 <_panic>

f010129b <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010129b:	55                   	push   %ebp
f010129c:	89 e5                	mov    %esp,%ebp
f010129e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012a1:	83 ec 04             	sub    $0x4,%esp
f01012a4:	68 0c 49 13 f0       	push   $0xf013490c
f01012a9:	68 ee 00 00 00       	push   $0xee
f01012ae:	68 2d 49 13 f0       	push   $0xf013492d
f01012b3:	e8 4d ef ff ff       	call   f0100205 <_panic>

f01012b8 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012b8:	55                   	push   %ebp
f01012b9:	89 e5                	mov    %esp,%ebp
f01012bb:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012be:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012c1:	83 c0 04             	add    $0x4,%eax
f01012c4:	8b 00                	mov    (%eax),%eax
f01012c6:	83 ec 04             	sub    $0x4,%esp
f01012c9:	6a 10                	push   $0x10
f01012cb:	6a 00                	push   $0x0
f01012cd:	50                   	push   %eax
f01012ce:	e8 1a 05 03 00       	call   f01317ed <strtol>
f01012d3:	83 c4 10             	add    $0x10,%esp
f01012d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012d9:	83 ec 0c             	sub    $0xc,%esp
f01012dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012df:	50                   	push   %eax
f01012e0:	e8 0d 56 00 00       	call   f01068f2 <allocate_frame>
f01012e5:	83 c4 10             	add    $0x10,%esp
f01012e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012ee:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01012f3:	6a 06                	push   $0x6
f01012f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01012f8:	52                   	push   %edx
f01012f9:	50                   	push   %eax
f01012fa:	e8 42 5a 00 00       	call   f0106d41 <map_frame>
f01012ff:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101307:	c9                   	leave  
f0101308:	c3                   	ret    

f0101309 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101309:	55                   	push   %ebp
f010130a:	89 e5                	mov    %esp,%ebp
f010130c:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010130f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101312:	83 c0 04             	add    $0x4,%eax
f0101315:	8b 00                	mov    (%eax),%eax
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 10                	push   $0x10
f010131c:	6a 00                	push   $0x0
f010131e:	50                   	push   %eax
f010131f:	e8 c9 04 03 00       	call   f01317ed <strtol>
f0101324:	83 c4 10             	add    $0x10,%esp
f0101327:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010132a:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010132f:	83 ec 08             	sub    $0x8,%esp
f0101332:	ff 75 f4             	pushl  -0xc(%ebp)
f0101335:	50                   	push   %eax
f0101336:	e8 3b 5b 00 00       	call   f0106e76 <unmap_frame>
f010133b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101343:	c9                   	leave  
f0101344:	c3                   	ret    

f0101345 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101345:	55                   	push   %ebp
f0101346:	89 e5                	mov    %esp,%ebp
f0101348:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134b:	83 ec 04             	sub    $0x4,%esp
f010134e:	68 0c 49 13 f0       	push   $0xf013490c
f0101353:	68 18 01 00 00       	push   $0x118
f0101358:	68 2d 49 13 f0       	push   $0xf013492d
f010135d:	e8 a3 ee ff ff       	call   f0100205 <_panic>

f0101362 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101362:	55                   	push   %ebp
f0101363:	89 e5                	mov    %esp,%ebp
f0101365:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101368:	83 ec 04             	sub    $0x4,%esp
f010136b:	68 0c 49 13 f0       	push   $0xf013490c
f0101370:	68 23 01 00 00       	push   $0x123
f0101375:	68 2d 49 13 f0       	push   $0xf013492d
f010137a:	e8 86 ee ff ff       	call   f0100205 <_panic>

f010137f <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010137f:	55                   	push   %ebp
f0101380:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101382:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101387:	5d                   	pop    %ebp
f0101388:	c3                   	ret    

f0101389 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101389:	55                   	push   %ebp
f010138a:	89 e5                	mov    %esp,%ebp
f010138c:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010138f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101393:	75 37                	jne    f01013cc <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101395:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101398:	83 c0 04             	add    $0x4,%eax
f010139b:	8b 00                	mov    (%eax),%eax
f010139d:	83 ec 04             	sub    $0x4,%esp
f01013a0:	6a 10                	push   $0x10
f01013a2:	6a 00                	push   $0x0
f01013a4:	50                   	push   %eax
f01013a5:	e8 43 04 03 00       	call   f01317ed <strtol>
f01013aa:	83 c4 10             	add    $0x10,%esp
f01013ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013b3:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b9:	83 c0 08             	add    $0x8,%eax
f01013bc:	8b 00                	mov    (%eax),%eax
f01013be:	8a 00                	mov    (%eax),%al
f01013c0:	88 c2                	mov    %al,%dl
f01013c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013c5:	88 10                	mov    %dl,(%eax)
f01013c7:	e9 b9 00 00 00       	jmp    f0101485 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013cc:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013d0:	0f 85 9f 00 00 00    	jne    f0101475 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d9:	83 c0 04             	add    $0x4,%eax
f01013dc:	8b 00                	mov    (%eax),%eax
f01013de:	83 ec 04             	sub    $0x4,%esp
f01013e1:	6a 0a                	push   $0xa
f01013e3:	6a 00                	push   $0x0
f01013e5:	50                   	push   %eax
f01013e6:	e8 02 04 03 00       	call   f01317ed <strtol>
f01013eb:	83 c4 10             	add    $0x10,%esp
f01013ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013f1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013f8:	83 ec 04             	sub    $0x4,%esp
f01013fb:	6a 00                	push   $0x0
f01013fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101400:	50                   	push   %eax
f0101401:	ff 75 f4             	pushl  -0xc(%ebp)
f0101404:	e8 f6 88 00 00       	call   f0109cff <envid2env>
f0101409:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010140c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010140f:	83 c0 08             	add    $0x8,%eax
f0101412:	8b 00                	mov    (%eax),%eax
f0101414:	83 ec 04             	sub    $0x4,%esp
f0101417:	6a 10                	push   $0x10
f0101419:	6a 00                	push   $0x0
f010141b:	50                   	push   %eax
f010141c:	e8 cc 03 03 00       	call   f01317ed <strtol>
f0101421:	83 c4 10             	add    $0x10,%esp
f0101424:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101427:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142a:	85 c0                	test   %eax,%eax
f010142c:	75 07                	jne    f0101435 <command_writeusermem+0xac>
f010142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101433:	eb 55                	jmp    f010148a <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101435:	0f 20 d8             	mov    %cr3,%eax
f0101438:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010143b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010143e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101441:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101444:	8b 40 60             	mov    0x60(%eax),%eax
f0101447:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010144a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010144d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101453:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101456:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101459:	83 c0 0c             	add    $0xc,%eax
f010145c:	8b 00                	mov    (%eax),%eax
f010145e:	8a 00                	mov    (%eax),%al
f0101460:	88 c2                	mov    %al,%dl
f0101462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101465:	88 10                	mov    %dl,(%eax)
f0101467:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010146a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010146d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101470:	0f 22 d8             	mov    %eax,%cr3
f0101473:	eb 10                	jmp    f0101485 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101475:	83 ec 0c             	sub    $0xc,%esp
f0101478:	68 44 49 13 f0       	push   $0xf0134944
f010147d:	e8 8c f8 ff ff       	call   f0100d0e <cprintf>
f0101482:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101485:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010148a:	c9                   	leave  
f010148b:	c3                   	ret    

f010148c <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f010148c:	55                   	push   %ebp
f010148d:	89 e5                	mov    %esp,%ebp
f010148f:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101492:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101495:	83 c0 04             	add    $0x4,%eax
f0101498:	8b 00                	mov    (%eax),%eax
f010149a:	83 ec 04             	sub    $0x4,%esp
f010149d:	6a 10                	push   $0x10
f010149f:	6a 00                	push   $0x0
f01014a1:	50                   	push   %eax
f01014a2:	e8 46 03 03 00       	call   f01317ed <strtol>
f01014a7:	83 c4 10             	add    $0x10,%esp
f01014aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 08             	add    $0x8,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 26 03 03 00       	call   f01317ed <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d7:	83 c0 0c             	add    $0xc,%eax
f01014da:	8b 00                	mov    (%eax),%eax
f01014dc:	83 ec 0c             	sub    $0xc,%esp
f01014df:	50                   	push   %eax
f01014e0:	e8 a8 ff 02 00       	call   f013148d <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014f2:	eb 30                	jmp    f0101524 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014fb:	eb 1c                	jmp    f0101519 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101500:	83 c0 0c             	add    $0xc,%eax
f0101503:	8b 10                	mov    (%eax),%edx
f0101505:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101508:	01 d0                	add    %edx,%eax
f010150a:	8a 00                	mov    (%eax),%al
f010150c:	88 c2                	mov    %al,%dl
f010150e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101511:	88 10                	mov    %dl,(%eax)
			address++;
f0101513:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101516:	ff 45 ec             	incl   -0x14(%ebp)
f0101519:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010151c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010151f:	7c dc                	jl     f01014fd <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101521:	ff 45 f0             	incl   -0x10(%ebp)
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010152a:	7c c8                	jl     f01014f4 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010152c:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101531:	c9                   	leave  
f0101532:	c3                   	ret    

f0101533 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101533:	55                   	push   %ebp
f0101534:	89 e5                	mov    %esp,%ebp
f0101536:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101539:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010153d:	75 42                	jne    f0101581 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010153f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101542:	83 c0 04             	add    $0x4,%eax
f0101545:	8b 00                	mov    (%eax),%eax
f0101547:	83 ec 04             	sub    $0x4,%esp
f010154a:	6a 10                	push   $0x10
f010154c:	6a 00                	push   $0x0
f010154e:	50                   	push   %eax
f010154f:	e8 99 02 03 00       	call   f01317ed <strtol>
f0101554:	83 c4 10             	add    $0x10,%esp
f0101557:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f010155a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010155d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101563:	8a 00                	mov    (%eax),%al
f0101565:	0f b6 c0             	movzbl %al,%eax
f0101568:	83 ec 04             	sub    $0x4,%esp
f010156b:	50                   	push   %eax
f010156c:	ff 75 d8             	pushl  -0x28(%ebp)
f010156f:	68 6e 49 13 f0       	push   $0xf013496e
f0101574:	e8 95 f7 ff ff       	call   f0100d0e <cprintf>
f0101579:	83 c4 10             	add    $0x10,%esp
f010157c:	e9 c4 00 00 00       	jmp    f0101645 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101581:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101585:	0f 85 aa 00 00 00    	jne    f0101635 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010158b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010158e:	83 c0 04             	add    $0x4,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 04             	sub    $0x4,%esp
f0101596:	6a 0a                	push   $0xa
f0101598:	6a 00                	push   $0x0
f010159a:	50                   	push   %eax
f010159b:	e8 4d 02 03 00       	call   f01317ed <strtol>
f01015a0:	83 c4 10             	add    $0x10,%esp
f01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015a6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015ad:	83 ec 04             	sub    $0x4,%esp
f01015b0:	6a 00                	push   $0x0
f01015b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015b5:	50                   	push   %eax
f01015b6:	ff 75 f4             	pushl  -0xc(%ebp)
f01015b9:	e8 41 87 00 00       	call   f0109cff <envid2env>
f01015be:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c4:	83 c0 08             	add    $0x8,%eax
f01015c7:	8b 00                	mov    (%eax),%eax
f01015c9:	83 ec 04             	sub    $0x4,%esp
f01015cc:	6a 10                	push   $0x10
f01015ce:	6a 00                	push   $0x0
f01015d0:	50                   	push   %eax
f01015d1:	e8 17 02 03 00       	call   f01317ed <strtol>
f01015d6:	83 c4 10             	add    $0x10,%esp
f01015d9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015df:	85 c0                	test   %eax,%eax
f01015e1:	75 07                	jne    f01015ea <command_readusermem+0xb7>
f01015e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01015e8:	eb 60                	jmp    f010164a <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015ea:	0f 20 d8             	mov    %cr3,%eax
f01015ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015f0:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015f9:	8b 40 60             	mov    0x60(%eax),%eax
f01015fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101602:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101605:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101608:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010160b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010160e:	8a 00                	mov    (%eax),%al
f0101610:	0f b6 c0             	movzbl %al,%eax
f0101613:	83 ec 04             	sub    $0x4,%esp
f0101616:	50                   	push   %eax
f0101617:	ff 75 f0             	pushl  -0x10(%ebp)
f010161a:	68 6e 49 13 f0       	push   $0xf013496e
f010161f:	e8 ea f6 ff ff       	call   f0100d0e <cprintf>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010162a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010162d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101630:	0f 22 d8             	mov    %eax,%cr3
f0101633:	eb 10                	jmp    f0101645 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101635:	83 ec 0c             	sub    $0xc,%esp
f0101638:	68 88 49 13 f0       	push   $0xf0134988
f010163d:	e8 cc f6 ff ff       	call   f0100d0e <cprintf>
f0101642:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101645:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010164a:	c9                   	leave  
f010164b:	c3                   	ret    

f010164c <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010164c:	55                   	push   %ebp
f010164d:	89 e5                	mov    %esp,%ebp
f010164f:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101652:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101655:	83 c0 04             	add    $0x4,%eax
f0101658:	8b 00                	mov    (%eax),%eax
f010165a:	83 ec 04             	sub    $0x4,%esp
f010165d:	6a 10                	push   $0x10
f010165f:	6a 00                	push   $0x0
f0101661:	50                   	push   %eax
f0101662:	e8 86 01 03 00       	call   f01317ed <strtol>
f0101667:	83 c4 10             	add    $0x10,%esp
f010166a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010166f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101672:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101675:	83 c0 08             	add    $0x8,%eax
f0101678:	8b 00                	mov    (%eax),%eax
f010167a:	83 ec 04             	sub    $0x4,%esp
f010167d:	6a 0a                	push   $0xa
f010167f:	6a 00                	push   $0x0
f0101681:	50                   	push   %eax
f0101682:	e8 66 01 03 00       	call   f01317ed <strtol>
f0101687:	83 c4 10             	add    $0x10,%esp
f010168a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f010168d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101694:	eb 22                	jmp    f01016b8 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101699:	8d 50 01             	lea    0x1(%eax),%edx
f010169c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f010169f:	8a 00                	mov    (%eax),%al
f01016a1:	0f b6 c0             	movzbl %al,%eax
f01016a4:	83 ec 08             	sub    $0x8,%esp
f01016a7:	50                   	push   %eax
f01016a8:	68 b2 49 13 f0       	push   $0xf01349b2
f01016ad:	e8 5c f6 ff ff       	call   f0100d0e <cprintf>
f01016b2:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016b5:	ff 45 f0             	incl   -0x10(%ebp)
f01016b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016be:	7c d6                	jl     f0101696 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016c0:	83 ec 0c             	sub    $0xc,%esp
f01016c3:	68 b5 49 13 f0       	push   $0xf01349b5
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016d5:	c9                   	leave  
f01016d6:	c3                   	ret    

f01016d7 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016d7:	55                   	push   %ebp
f01016d8:	89 e5                	mov    %esp,%ebp
f01016da:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016e0:	83 c0 04             	add    $0x4,%eax
f01016e3:	8b 00                	mov    (%eax),%eax
f01016e5:	83 ec 04             	sub    $0x4,%esp
f01016e8:	6a 0a                	push   $0xa
f01016ea:	6a 00                	push   $0x0
f01016ec:	50                   	push   %eax
f01016ed:	e8 fb 00 03 00       	call   f01317ed <strtol>
f01016f2:	83 c4 10             	add    $0x10,%esp
f01016f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016f8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016ff:	83 ec 04             	sub    $0x4,%esp
f0101702:	6a 00                	push   $0x0
f0101704:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101707:	50                   	push   %eax
f0101708:	ff 75 ec             	pushl  -0x14(%ebp)
f010170b:	e8 ef 85 00 00       	call   f0109cff <envid2env>
f0101710:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101713:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101716:	83 c0 08             	add    $0x8,%eax
f0101719:	8b 00                	mov    (%eax),%eax
f010171b:	83 ec 04             	sub    $0x4,%esp
f010171e:	6a 10                	push   $0x10
f0101720:	6a 00                	push   $0x0
f0101722:	50                   	push   %eax
f0101723:	e8 c5 00 03 00       	call   f01317ed <strtol>
f0101728:	83 c4 10             	add    $0x10,%esp
f010172b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 0c             	add    $0xc,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 0a                	push   $0xa
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 aa 00 03 00       	call   f01317ed <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101749:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010174c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010174f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101752:	85 c0                	test   %eax,%eax
f0101754:	75 07                	jne    f010175d <command_readuserblock+0x86>
f0101756:	b8 00 00 00 00       	mov    $0x0,%eax
f010175b:	eb 65                	jmp    f01017c2 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010175d:	0f 20 d8             	mov    %cr3,%eax
f0101760:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101763:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101766:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101769:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176c:	8b 40 60             	mov    0x60(%eax),%eax
f010176f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101772:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101775:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101778:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010177f:	eb 28                	jmp    f01017a9 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101781:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101784:	8a 00                	mov    (%eax),%al
f0101786:	0f b6 d0             	movzbl %al,%edx
f0101789:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010178c:	8a 00                	mov    (%eax),%al
f010178e:	0f b6 c0             	movzbl %al,%eax
f0101791:	52                   	push   %edx
f0101792:	50                   	push   %eax
f0101793:	ff 75 f4             	pushl  -0xc(%ebp)
f0101796:	68 b7 49 13 f0       	push   $0xf01349b7
f010179b:	e8 6e f5 ff ff       	call   f0100d0e <cprintf>
f01017a0:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017a3:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017a6:	ff 45 f0             	incl   -0x10(%ebp)
f01017a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017ac:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017af:	7c d0                	jl     f0101781 <command_readuserblock+0xaa>
f01017b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017ba:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017c2:	c9                   	leave  
f01017c3:	c3                   	ret    

f01017c4 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017c4:	55                   	push   %ebp
f01017c5:	89 e5                	mov    %esp,%ebp
f01017c7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017cd:	83 c0 04             	add    $0x4,%eax
f01017d0:	8b 00                	mov    (%eax),%eax
f01017d2:	83 ec 04             	sub    $0x4,%esp
f01017d5:	6a 0a                	push   $0xa
f01017d7:	6a 00                	push   $0x0
f01017d9:	50                   	push   %eax
f01017da:	e8 0e 00 03 00       	call   f01317ed <strtol>
f01017df:	83 c4 10             	add    $0x10,%esp
f01017e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017ec:	83 ec 04             	sub    $0x4,%esp
f01017ef:	6a 00                	push   $0x0
f01017f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017f4:	50                   	push   %eax
f01017f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01017f8:	e8 02 85 00 00       	call   f0109cff <envid2env>
f01017fd:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101800:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101803:	85 c0                	test   %eax,%eax
f0101805:	75 0a                	jne    f0101811 <command_remove_table+0x4d>
f0101807:	b8 00 00 00 00       	mov    $0x0,%eax
f010180c:	e9 c7 00 00 00       	jmp    f01018d8 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101811:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101814:	83 c0 08             	add    $0x8,%eax
f0101817:	8b 00                	mov    (%eax),%eax
f0101819:	83 ec 04             	sub    $0x4,%esp
f010181c:	6a 10                	push   $0x10
f010181e:	6a 00                	push   $0x0
f0101820:	50                   	push   %eax
f0101821:	e8 c7 ff 02 00       	call   f01317ed <strtol>
f0101826:	83 c4 10             	add    $0x10,%esp
f0101829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010182c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010182f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101832:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101835:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101838:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010183b:	c1 ea 16             	shr    $0x16,%edx
f010183e:	c1 e2 02             	shl    $0x2,%edx
f0101841:	01 d0                	add    %edx,%eax
f0101843:	8b 00                	mov    (%eax),%eax
f0101845:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010184a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f010184d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101850:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101855:	77 1c                	ja     f0101873 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101857:	83 ec 0c             	sub    $0xc,%esp
f010185a:	ff 75 e8             	pushl  -0x18(%ebp)
f010185d:	e8 0a 64 00 00       	call   f0107c6c <kheap_virtual_address>
f0101862:	83 c4 10             	add    $0x10,%esp
f0101865:	83 ec 0c             	sub    $0xc,%esp
f0101868:	50                   	push   %eax
f0101869:	e8 d7 62 00 00       	call   f0107b45 <kfree>
f010186e:	83 c4 10             	add    $0x10,%esp
f0101871:	eb 28                	jmp    f010189b <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101873:	83 ec 0c             	sub    $0xc,%esp
f0101876:	ff 75 e8             	pushl  -0x18(%ebp)
f0101879:	e8 a9 f7 ff ff       	call   f0101027 <to_frame_info>
f010187e:	83 c4 10             	add    $0x10,%esp
f0101881:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101887:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010188d:	83 ec 0c             	sub    $0xc,%esp
f0101890:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101893:	e8 6f 51 00 00       	call   f0106a07 <free_frame>
f0101898:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010189b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010189e:	c1 e8 16             	shr    $0x16,%eax
f01018a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018ad:	c1 e2 02             	shl    $0x2,%edx
f01018b0:	01 c2                	add    %eax,%edx
f01018b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018b8:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018bb:	c1 e1 02             	shl    $0x2,%ecx
f01018be:	01 c8                	add    %ecx,%eax
f01018c0:	8b 00                	mov    (%eax),%eax
f01018c2:	83 e0 fe             	and    $0xfffffffe,%eax
f01018c5:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018c7:	0f 20 d8             	mov    %cr3,%eax
f01018ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018d8:	c9                   	leave  
f01018d9:	c3                   	ret    

f01018da <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018da:	55                   	push   %ebp
f01018db:	89 e5                	mov    %esp,%ebp
f01018dd:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018e0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018e4:	7e 06                	jle    f01018ec <command_allocuserpage+0x12>
f01018e6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ea:	7e 1a                	jle    f0101906 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018ec:	83 ec 0c             	sub    $0xc,%esp
f01018ef:	68 c8 49 13 f0       	push   $0xf01349c8
f01018f4:	e8 15 f4 ff ff       	call   f0100d0e <cprintf>
f01018f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0101901:	e9 46 01 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101906:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101909:	83 c0 04             	add    $0x4,%eax
f010190c:	8b 00                	mov    (%eax),%eax
f010190e:	83 ec 04             	sub    $0x4,%esp
f0101911:	6a 0a                	push   $0xa
f0101913:	6a 00                	push   $0x0
f0101915:	50                   	push   %eax
f0101916:	e8 d2 fe 02 00       	call   f01317ed <strtol>
f010191b:	83 c4 10             	add    $0x10,%esp
f010191e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101921:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101928:	83 ec 04             	sub    $0x4,%esp
f010192b:	6a 00                	push   $0x0
f010192d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101930:	50                   	push   %eax
f0101931:	ff 75 f0             	pushl  -0x10(%ebp)
f0101934:	e8 c6 83 00 00       	call   f0109cff <envid2env>
f0101939:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010193c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010193f:	85 c0                	test   %eax,%eax
f0101941:	75 0a                	jne    f010194d <command_allocuserpage+0x73>
f0101943:	b8 00 00 00 00       	mov    $0x0,%eax
f0101948:	e9 ff 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101950:	83 c0 08             	add    $0x8,%eax
f0101953:	8b 00                	mov    (%eax),%eax
f0101955:	83 ec 04             	sub    $0x4,%esp
f0101958:	6a 10                	push   $0x10
f010195a:	6a 00                	push   $0x0
f010195c:	50                   	push   %eax
f010195d:	e8 8b fe 02 00       	call   f01317ed <strtol>
f0101962:	83 c4 10             	add    $0x10,%esp
f0101965:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101968:	83 ec 0c             	sub    $0xc,%esp
f010196b:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010196e:	50                   	push   %eax
f010196f:	e8 7e 4f 00 00       	call   f01068f2 <allocate_frame>
f0101974:	83 c4 10             	add    $0x10,%esp
f0101977:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010197a:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010197e:	75 1a                	jne    f010199a <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101980:	83 ec 0c             	sub    $0xc,%esp
f0101983:	68 f2 49 13 f0       	push   $0xf01349f2
f0101988:	e8 81 f3 ff ff       	call   f0100d0e <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101990:	b8 00 00 00 00       	mov    $0x0,%eax
f0101995:	e9 b2 00 00 00       	jmp    f0101a4c <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010199a:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010199e:	75 1d                	jne    f01019bd <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019a0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019a9:	6a 06                	push   $0x6
f01019ab:	ff 75 ec             	pushl  -0x14(%ebp)
f01019ae:	52                   	push   %edx
f01019af:	50                   	push   %eax
f01019b0:	e8 8c 53 00 00       	call   f0106d41 <map_frame>
f01019b5:	83 c4 10             	add    $0x10,%esp
f01019b8:	e9 8a 00 00 00       	jmp    f0101a47 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019bd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019c1:	0f 85 80 00 00 00    	jne    f0101a47 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ca:	83 c0 0c             	add    $0xc,%eax
f01019cd:	8b 00                	mov    (%eax),%eax
f01019cf:	8a 00                	mov    (%eax),%al
f01019d1:	3c 72                	cmp    $0x72,%al
f01019d3:	74 0e                	je     f01019e3 <command_allocuserpage+0x109>
f01019d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d8:	83 c0 0c             	add    $0xc,%eax
f01019db:	8b 00                	mov    (%eax),%eax
f01019dd:	8a 00                	mov    (%eax),%al
f01019df:	3c 52                	cmp    $0x52,%al
f01019e1:	75 09                	jne    f01019ec <command_allocuserpage+0x112>
			rw = 0 ;
f01019e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019ea:	eb 3c                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019ef:	83 c0 0c             	add    $0xc,%eax
f01019f2:	8b 00                	mov    (%eax),%eax
f01019f4:	8a 00                	mov    (%eax),%al
f01019f6:	3c 77                	cmp    $0x77,%al
f01019f8:	74 0e                	je     f0101a08 <command_allocuserpage+0x12e>
f01019fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019fd:	83 c0 0c             	add    $0xc,%eax
f0101a00:	8b 00                	mov    (%eax),%eax
f0101a02:	8a 00                	mov    (%eax),%al
f0101a04:	3c 57                	cmp    $0x57,%al
f0101a06:	75 09                	jne    f0101a11 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a0f:	eb 17                	jmp    f0101a28 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a11:	83 ec 0c             	sub    $0xc,%esp
f0101a14:	68 0c 4a 13 f0       	push   $0xf0134a0c
f0101a19:	e8 f0 f2 ff ff       	call   f0100d0e <cprintf>
f0101a1e:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a21:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a2b:	83 c8 04             	or     $0x4,%eax
f0101a2e:	89 c1                	mov    %eax,%ecx
f0101a30:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a36:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a39:	51                   	push   %ecx
f0101a3a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a3d:	52                   	push   %edx
f0101a3e:	50                   	push   %eax
f0101a3f:	e8 fd 52 00 00       	call   f0106d41 <map_frame>
f0101a44:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a4c:	c9                   	leave  
f0101a4d:	c3                   	ret    

f0101a4e <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a4e:	55                   	push   %ebp
f0101a4f:	89 e5                	mov    %esp,%ebp
f0101a51:	56                   	push   %esi
f0101a52:	53                   	push   %ebx
f0101a53:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a56:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a59:	83 ec 0c             	sub    $0xc,%esp
f0101a5c:	50                   	push   %eax
f0101a5d:	e8 79 55 00 00       	call   f0106fdb <calculate_available_frames>
f0101a62:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a6e:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a74:	01 de                	add    %ebx,%esi
f0101a76:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a79:	01 f3                	add    %esi,%ebx
f0101a7b:	83 ec 0c             	sub    $0xc,%esp
f0101a7e:	51                   	push   %ecx
f0101a7f:	52                   	push   %edx
f0101a80:	50                   	push   %eax
f0101a81:	53                   	push   %ebx
f0101a82:	68 50 4a 13 f0       	push   $0xf0134a50
f0101a87:	e8 82 f2 ff ff       	call   f0100d0e <cprintf>
f0101a8c:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a8f:	a1 74 1d 88 f0       	mov    0xf0881d74,%eax
f0101a94:	83 ec 08             	sub    $0x8,%esp
f0101a97:	50                   	push   %eax
f0101a98:	68 a8 4a 13 f0       	push   $0xf0134aa8
f0101a9d:	e8 6c f2 ff ff       	call   f0100d0e <cprintf>
f0101aa2:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aaa:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101aad:	5b                   	pop    %ebx
f0101aae:	5e                   	pop    %esi
f0101aaf:	5d                   	pop    %ebp
f0101ab0:	c3                   	ret    

f0101ab1 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101ab1:	55                   	push   %ebp
f0101ab2:	89 e5                	mov    %esp,%ebp
f0101ab4:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ab7:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ac5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0101acf:	83 f8 04             	cmp    $0x4,%eax
f0101ad2:	0f 84 94 00 00 00    	je     f0101b6c <CreateEnv+0xbb>
f0101ad8:	83 f8 05             	cmp    $0x5,%eax
f0101adb:	74 0e                	je     f0101aeb <CreateEnv+0x3a>
f0101add:	83 f8 03             	cmp    $0x3,%eax
f0101ae0:	0f 84 ec 00 00 00    	je     f0101bd2 <CreateEnv+0x121>
f0101ae6:	e9 2f 01 00 00       	jmp    f0101c1a <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101aeb:	83 ec 0c             	sub    $0xc,%esp
f0101aee:	6a 02                	push   $0x2
f0101af0:	e8 42 c4 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f0101af5:	83 c4 10             	add    $0x10,%esp
f0101af8:	85 c0                	test   %eax,%eax
f0101afa:	75 1a                	jne    f0101b16 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101afc:	83 ec 0c             	sub    $0xc,%esp
f0101aff:	68 e4 4a 13 f0       	push   $0xf0134ae4
f0101b04:	e8 05 f2 ff ff       	call   f0100d0e <cprintf>
f0101b09:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b11:	e9 d5 01 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b19:	83 c0 10             	add    $0x10,%eax
f0101b1c:	8b 00                	mov    (%eax),%eax
f0101b1e:	83 ec 04             	sub    $0x4,%esp
f0101b21:	6a 0a                	push   $0xa
f0101b23:	6a 00                	push   $0x0
f0101b25:	50                   	push   %eax
f0101b26:	e8 c2 fc 02 00       	call   f01317ed <strtol>
f0101b2b:	83 c4 10             	add    $0x10,%esp
f0101b2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 0c             	add    $0xc,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 a7 fc 02 00       	call   f01317ed <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 08             	add    $0x8,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 8c fc 02 00       	call   f01317ed <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b67:	e9 c8 00 00 00       	jmp    f0101c34 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b6c:	83 ec 0c             	sub    $0xc,%esp
f0101b6f:	6a 02                	push   $0x2
f0101b71:	e8 c1 c3 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f0101b76:	83 c4 10             	add    $0x10,%esp
f0101b79:	85 c0                	test   %eax,%eax
f0101b7b:	75 1d                	jne    f0101b9a <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b80:	83 c0 0c             	add    $0xc,%eax
f0101b83:	8b 00                	mov    (%eax),%eax
f0101b85:	83 ec 04             	sub    $0x4,%esp
f0101b88:	6a 0a                	push   $0xa
f0101b8a:	6a 00                	push   $0x0
f0101b8c:	50                   	push   %eax
f0101b8d:	e8 5b fc 02 00       	call   f01317ed <strtol>
f0101b92:	83 c4 10             	add    $0x10,%esp
f0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b98:	eb 1b                	jmp    f0101bb5 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 04             	sub    $0x4,%esp
f0101ba5:	6a 0a                	push   $0xa
f0101ba7:	6a 00                	push   $0x0
f0101ba9:	50                   	push   %eax
f0101baa:	e8 3e fc 02 00       	call   f01317ed <strtol>
f0101baf:	83 c4 10             	add    $0x10,%esp
f0101bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 08             	add    $0x8,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 23 fc 02 00       	call   f01317ed <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bd0:	eb 62                	jmp    f0101c34 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd2:	83 ec 0c             	sub    $0xc,%esp
f0101bd5:	6a 02                	push   $0x2
f0101bd7:	e8 5b c3 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	85 c0                	test   %eax,%eax
f0101be1:	74 1a                	je     f0101bfd <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101be3:	83 ec 0c             	sub    $0xc,%esp
f0101be6:	68 a4 4b 13 f0       	push   $0xf0134ba4
f0101beb:	e8 1e f1 ff ff       	call   f0100d0e <cprintf>
f0101bf0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bf8:	e9 ee 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c00:	83 c0 08             	add    $0x8,%eax
f0101c03:	8b 00                	mov    (%eax),%eax
f0101c05:	83 ec 04             	sub    $0x4,%esp
f0101c08:	6a 0a                	push   $0xa
f0101c0a:	6a 00                	push   $0x0
f0101c0c:	50                   	push   %eax
f0101c0d:	e8 db fb 02 00       	call   f01317ed <strtol>
f0101c12:	83 c4 10             	add    $0x10,%esp
f0101c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c18:	eb 1a                	jmp    f0101c34 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c1a:	83 ec 0c             	sub    $0xc,%esp
f0101c1d:	68 34 4c 13 f0       	push   $0xf0134c34
f0101c22:	e8 e7 f0 ff ff       	call   f0100d0e <cprintf>
f0101c27:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c2f:	e9 b7 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c34:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c3b:	76 1f                	jbe    f0101c5c <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c3d:	83 ec 08             	sub    $0x8,%esp
f0101c40:	68 88 13 00 00       	push   $0x1388
f0101c45:	68 cc 4c 13 f0       	push   $0xf0134ccc
f0101c4a:	e8 bf f0 ff ff       	call   f0100d0e <cprintf>
f0101c4f:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c57:	e9 8f 00 00 00       	jmp    f0101ceb <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c5c:	83 ec 0c             	sub    $0xc,%esp
f0101c5f:	6a 02                	push   $0x2
f0101c61:	e8 d1 c2 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	85 c0                	test   %eax,%eax
f0101c6b:	74 20                	je     f0101c8d <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c70:	48                   	dec    %eax
f0101c71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c74:	73 17                	jae    f0101c8d <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c76:	83 ec 0c             	sub    $0xc,%esp
f0101c79:	68 0c 4d 13 f0       	push   $0xf0134d0c
f0101c7e:	e8 8b f0 ff ff       	call   f0100d0e <cprintf>
f0101c83:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c86:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c8b:	eb 5e                	jmp    f0101ceb <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c8d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c91:	76 19                	jbe    f0101cac <CreateEnv+0x1fb>
f0101c93:	68 64 4d 13 f0       	push   $0xf0134d64
f0101c98:	68 a9 4d 13 f0       	push   $0xf0134da9
f0101c9d:	68 5a 02 00 00       	push   $0x25a
f0101ca2:	68 2d 49 13 f0       	push   $0xf013492d
f0101ca7:	e8 59 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cac:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cb0:	76 19                	jbe    f0101ccb <CreateEnv+0x21a>
f0101cb2:	68 64 4d 13 f0       	push   $0xf0134d64
f0101cb7:	68 a9 4d 13 f0       	push   $0xf0134da9
f0101cbc:	68 71 02 00 00       	push   $0x271
f0101cc1:	68 2d 49 13 f0       	push   $0xf013492d
f0101cc6:	e8 3a e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cce:	83 c0 04             	add    $0x4,%eax
f0101cd1:	8b 00                	mov    (%eax),%eax
f0101cd3:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cd6:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cd9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cdc:	50                   	push   %eax
f0101cdd:	e8 76 73 00 00       	call   f0109058 <env_create>
f0101ce2:	83 c4 10             	add    $0x10,%esp
f0101ce5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101ceb:	c9                   	leave  
f0101cec:	c3                   	ret    

f0101ced <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101ced:	55                   	push   %ebp
f0101cee:	89 e5                	mov    %esp,%ebp
f0101cf0:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cf3:	83 ec 08             	sub    $0x8,%esp
f0101cf6:	ff 75 0c             	pushl  0xc(%ebp)
f0101cf9:	ff 75 08             	pushl  0x8(%ebp)
f0101cfc:	e8 b0 fd ff ff       	call   f0101ab1 <CreateEnv>
f0101d01:	83 c4 10             	add    $0x10,%esp
f0101d04:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d0b:	75 07                	jne    f0101d14 <command_run_program+0x27>
f0101d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d12:	eb 46                	jmp    f0101d5a <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d1a:	83 ec 08             	sub    $0x8,%esp
f0101d1d:	50                   	push   %eax
f0101d1e:	68 be 4d 13 f0       	push   $0xf0134dbe
f0101d23:	e8 e6 ef ff ff       	call   f0100d0e <cprintf>
f0101d28:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d2b:	c7 05 74 1d 88 f0 00 	movl   $0x0,0xf0881d74
f0101d32:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d35:	83 ec 0c             	sub    $0xc,%esp
f0101d38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d3b:	e8 c4 34 00 00       	call   f0105204 <sched_new_env>
f0101d40:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d49:	83 ec 0c             	sub    $0xc,%esp
f0101d4c:	50                   	push   %eax
f0101d4d:	e8 cf 34 00 00       	call   f0105221 <sched_run_env>
f0101d52:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d5a:	c9                   	leave  
f0101d5b:	c3                   	ret    

f0101d5c <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d5c:	55                   	push   %ebp
f0101d5d:	89 e5                	mov    %esp,%ebp
f0101d5f:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d65:	83 c0 04             	add    $0x4,%eax
f0101d68:	8b 00                	mov    (%eax),%eax
f0101d6a:	83 ec 04             	sub    $0x4,%esp
f0101d6d:	6a 0a                	push   $0xa
f0101d6f:	6a 00                	push   $0x0
f0101d71:	50                   	push   %eax
f0101d72:	e8 76 fa 02 00       	call   f01317ed <strtol>
f0101d77:	83 c4 10             	add    $0x10,%esp
f0101d7a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d80:	83 ec 0c             	sub    $0xc,%esp
f0101d83:	50                   	push   %eax
f0101d84:	e8 b6 38 00 00       	call   f010563f <sched_kill_env>
f0101d89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d91:	c9                   	leave  
f0101d92:	c3                   	ret    

f0101d93 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d93:	55                   	push   %ebp
f0101d94:	89 e5                	mov    %esp,%ebp
f0101d96:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d99:	83 ec 08             	sub    $0x8,%esp
f0101d9c:	ff 75 0c             	pushl  0xc(%ebp)
f0101d9f:	ff 75 08             	pushl  0x8(%ebp)
f0101da2:	e8 0a fd ff ff       	call   f0101ab1 <CreateEnv>
f0101da7:	83 c4 10             	add    $0x10,%esp
f0101daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101db1:	75 07                	jne    f0101dba <commnad_load_env+0x27>
		return 0 ;
f0101db3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101db8:	eb 2a                	jmp    f0101de4 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dba:	83 ec 0c             	sub    $0xc,%esp
f0101dbd:	ff 75 f4             	pushl  -0xc(%ebp)
f0101dc0:	e8 3f 34 00 00       	call   f0105204 <sched_new_env>
f0101dc5:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101dce:	83 ec 08             	sub    $0x8,%esp
f0101dd1:	50                   	push   %eax
f0101dd2:	68 be 4d 13 f0       	push   $0xf0134dbe
f0101dd7:	e8 32 ef ff ff       	call   f0100d0e <cprintf>
f0101ddc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ddf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de4:	c9                   	leave  
f0101de5:	c3                   	ret    

f0101de6 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101de6:	55                   	push   %ebp
f0101de7:	89 e5                	mov    %esp,%ebp
f0101de9:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dec:	c7 05 74 1d 88 f0 00 	movl   $0x0,0xf0881d74
f0101df3:	00 00 00 
	sched_run_all();
f0101df6:	e8 51 30 00 00       	call   f0104e4c <sched_run_all>

	return 0 ;
f0101dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e00:	c9                   	leave  
f0101e01:	c3                   	ret    

f0101e02 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e02:	55                   	push   %ebp
f0101e03:	89 e5                	mov    %esp,%ebp
f0101e05:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e08:	e8 35 2e 00 00       	call   f0104c42 <sched_print_all>

	return 0 ;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	c9                   	leave  
f0101e13:	c3                   	ret    

f0101e14 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e14:	55                   	push   %ebp
f0101e15:	89 e5                	mov    %esp,%ebp
f0101e17:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e1a:	e8 a0 30 00 00       	call   f0104ebf <sched_kill_all>

	return 0 ;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e30:	7f 1a                	jg     f0101e4c <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e32:	83 ec 0c             	sub    $0xc,%esp
f0101e35:	68 d4 4d 13 f0       	push   $0xf0134dd4
f0101e3a:	e8 cf ee ff ff       	call   f0100d0e <cprintf>
f0101e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e47:	e9 83 00 00 00       	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4f:	83 c0 04             	add    $0x4,%eax
f0101e52:	8b 00                	mov    (%eax),%eax
f0101e54:	83 ec 04             	sub    $0x4,%esp
f0101e57:	6a 0a                	push   $0xa
f0101e59:	6a 00                	push   $0x0
f0101e5b:	50                   	push   %eax
f0101e5c:	e8 8c f9 02 00       	call   f01317ed <strtol>
f0101e61:	83 c4 10             	add    $0x10,%esp
f0101e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e67:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e6b:	75 20                	jne    f0101e8d <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e73:	e8 34 c0 00 00       	call   f010deac <setPageReplacmentAlgorithmLRU>
f0101e78:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e7b:	83 ec 0c             	sub    $0xc,%esp
f0101e7e:	68 34 4e 13 f0       	push   $0xf0134e34
f0101e83:	e8 86 ee ff ff       	call   f0100d0e <cprintf>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	eb 3d                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e91:	75 20                	jne    f0101eb3 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e93:	83 ec 0c             	sub    $0xc,%esp
f0101e96:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e99:	e8 0e c0 00 00       	call   f010deac <setPageReplacmentAlgorithmLRU>
f0101e9e:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ea1:	83 ec 0c             	sub    $0xc,%esp
f0101ea4:	68 78 4e 13 f0       	push   $0xf0134e78
f0101ea9:	e8 60 ee ff ff       	call   f0100d0e <cprintf>
f0101eae:	83 c4 10             	add    $0x10,%esp
f0101eb1:	eb 17                	jmp    f0101eca <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101eb3:	83 ec 0c             	sub    $0xc,%esp
f0101eb6:	68 b8 4e 13 f0       	push   $0xf0134eb8
f0101ebb:	e8 4e ee ff ff       	call   f0100d0e <cprintf>
f0101ec0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ec3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ec8:	eb 05                	jmp    f0101ecf <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecf:	c9                   	leave  
f0101ed0:	c3                   	ret    

f0101ed1 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101ed1:	55                   	push   %ebp
f0101ed2:	89 e5                	mov    %esp,%ebp
f0101ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101eda:	83 c0 04             	add    $0x4,%eax
f0101edd:	8b 00                	mov    (%eax),%eax
f0101edf:	83 ec 04             	sub    $0x4,%esp
f0101ee2:	6a 0a                	push   $0xa
f0101ee4:	6a 00                	push   $0x0
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 01 f9 02 00       	call   f01317ed <strtol>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ef2:	83 ec 0c             	sub    $0xc,%esp
f0101ef5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ef8:	e8 22 c0 00 00       	call   f010df1f <setPageReplacmentAlgorithmNchanceCLOCK>
f0101efd:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f00:	83 ec 0c             	sub    $0xc,%esp
f0101f03:	68 0c 4f 13 f0       	push   $0xf0134f0c
f0101f08:	e8 01 ee ff ff       	call   f0100d0e <cprintf>
f0101f0d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f15:	c9                   	leave  
f0101f16:	c3                   	ret    

f0101f17 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f17:	55                   	push   %ebp
f0101f18:	89 e5                	mov    %esp,%ebp
f0101f1a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f1d:	e8 bd bf 00 00       	call   f010dedf <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f22:	83 ec 0c             	sub    $0xc,%esp
f0101f25:	68 40 4f 13 f0       	push   $0xf0134f40
f0101f2a:	e8 df ed ff ff       	call   f0100d0e <cprintf>
f0101f2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f37:	c9                   	leave  
f0101f38:	c3                   	ret    

f0101f39 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f39:	55                   	push   %ebp
f0101f3a:	89 e5                	mov    %esp,%ebp
f0101f3c:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f3f:	e8 ab bf 00 00       	call   f010deef <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f44:	83 ec 0c             	sub    $0xc,%esp
f0101f47:	68 6c 4f 13 f0       	push   $0xf0134f6c
f0101f4c:	e8 bd ed ff ff       	call   f0100d0e <cprintf>
f0101f51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f59:	c9                   	leave  
f0101f5a:	c3                   	ret    

f0101f5b <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f5b:	55                   	push   %ebp
f0101f5c:	89 e5                	mov    %esp,%ebp
f0101f5e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f61:	e8 99 bf 00 00       	call   f010deff <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f66:	83 ec 0c             	sub    $0xc,%esp
f0101f69:	68 94 4f 13 f0       	push   $0xf0134f94
f0101f6e:	e8 9b ed ff ff       	call   f0100d0e <cprintf>
f0101f73:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f7b:	c9                   	leave  
f0101f7c:	c3                   	ret    

f0101f7d <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f7d:	55                   	push   %ebp
f0101f7e:	89 e5                	mov    %esp,%ebp
f0101f80:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f86:	83 c0 04             	add    $0x4,%eax
f0101f89:	8b 00                	mov    (%eax),%eax
f0101f8b:	83 ec 04             	sub    $0x4,%esp
f0101f8e:	6a 0a                	push   $0xa
f0101f90:	6a 00                	push   $0x0
f0101f92:	50                   	push   %eax
f0101f93:	e8 55 f8 02 00       	call   f01317ed <strtol>
f0101f98:	83 c4 10             	add    $0x10,%esp
f0101f9b:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f9e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fa2:	83 ec 0c             	sub    $0xc,%esp
f0101fa5:	50                   	push   %eax
f0101fa6:	e8 67 28 00 00       	call   f0104812 <sched_init_RR>
f0101fab:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fae:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0101fb3:	8a 00                	mov    (%eax),%al
f0101fb5:	0f b6 c0             	movzbl %al,%eax
f0101fb8:	83 ec 08             	sub    $0x8,%esp
f0101fbb:	50                   	push   %eax
f0101fbc:	68 c8 4f 13 f0       	push   $0xf0134fc8
f0101fc1:	e8 48 ed ff ff       	call   f0100d0e <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fce:	c9                   	leave  
f0101fcf:	c3                   	ret    

f0101fd0 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fd0:	55                   	push   %ebp
f0101fd1:	89 e5                	mov    %esp,%ebp
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fda:	83 c0 04             	add    $0x4,%eax
f0101fdd:	8b 00                	mov    (%eax),%eax
f0101fdf:	83 ec 04             	sub    $0x4,%esp
f0101fe2:	6a 0a                	push   $0xa
f0101fe4:	6a 00                	push   $0x0
f0101fe6:	50                   	push   %eax
f0101fe7:	e8 01 f8 02 00       	call   f01317ed <strtol>
f0101fec:	83 c4 10             	add    $0x10,%esp
f0101fef:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101ff2:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101ff9:	eb 2e                	jmp    f0102029 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ffe:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0102001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102004:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010200b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010200e:	01 d0                	add    %edx,%eax
f0102010:	8b 00                	mov    (%eax),%eax
f0102012:	83 ec 04             	sub    $0x4,%esp
f0102015:	6a 0a                	push   $0xa
f0102017:	6a 00                	push   $0x0
f0102019:	50                   	push   %eax
f010201a:	e8 ce f7 02 00       	call   f01317ed <strtol>
f010201f:	83 c4 10             	add    $0x10,%esp
f0102022:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102026:	ff 45 f4             	incl   -0xc(%ebp)
f0102029:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010202c:	3b 45 08             	cmp    0x8(%ebp),%eax
f010202f:	7c ca                	jl     f0101ffb <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102031:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102035:	83 ec 08             	sub    $0x8,%esp
f0102038:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010203b:	52                   	push   %edx
f010203c:	50                   	push   %eax
f010203d:	e8 5b 28 00 00       	call   f010489d <sched_init_MLFQ>
f0102042:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102045:	83 ec 0c             	sub    $0xc,%esp
f0102048:	68 00 50 13 f0       	push   $0xf0135000
f010204d:	e8 bc ec ff ff       	call   f0100d0e <cprintf>
f0102052:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102055:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010205c:	eb 24                	jmp    f0102082 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f010205e:	8b 15 2c 1d 88 f0    	mov    0xf0881d2c,%edx
f0102064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	8a 00                	mov    (%eax),%al
f010206b:	0f b6 c0             	movzbl %al,%eax
f010206e:	83 ec 08             	sub    $0x8,%esp
f0102071:	50                   	push   %eax
f0102072:	68 2d 50 13 f0       	push   $0xf013502d
f0102077:	e8 92 ec ff ff       	call   f0100d0e <cprintf>
f010207c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010207f:	ff 45 f0             	incl   -0x10(%ebp)
f0102082:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0102087:	0f b6 c0             	movzbl %al,%eax
f010208a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010208d:	7f cf                	jg     f010205e <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010208f:	83 ec 0c             	sub    $0xc,%esp
f0102092:	68 b5 49 13 f0       	push   $0xf01349b5
f0102097:	e8 72 ec ff ff       	call   f0100d0e <cprintf>
f010209c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010209f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020a7:	c9                   	leave  
f01020a8:	c3                   	ret    

f01020a9 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020a9:	55                   	push   %ebp
f01020aa:	89 e5                	mov    %esp,%ebp
f01020ac:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020af:	e8 8d 23 00 00       	call   f0104441 <isSchedMethodMLFQ>
f01020b4:	85 c0                	test   %eax,%eax
f01020b6:	74 5c                	je     f0102114 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020b8:	83 ec 0c             	sub    $0xc,%esp
f01020bb:	68 34 50 13 f0       	push   $0xf0135034
f01020c0:	e8 49 ec ff ff       	call   f0100d0e <cprintf>
f01020c5:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020cf:	eb 24                	jmp    f01020f5 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020d1:	8b 15 2c 1d 88 f0    	mov    0xf0881d2c,%edx
f01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020da:	01 d0                	add    %edx,%eax
f01020dc:	8a 00                	mov    (%eax),%al
f01020de:	0f b6 c0             	movzbl %al,%eax
f01020e1:	83 ec 08             	sub    $0x8,%esp
f01020e4:	50                   	push   %eax
f01020e5:	68 2d 50 13 f0       	push   $0xf013502d
f01020ea:	e8 1f ec ff ff       	call   f0100d0e <cprintf>
f01020ef:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020f2:	ff 45 f4             	incl   -0xc(%ebp)
f01020f5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01020fa:	0f b6 c0             	movzbl %al,%eax
f01020fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102100:	7f cf                	jg     f01020d1 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102102:	83 ec 0c             	sub    $0xc,%esp
f0102105:	68 b5 49 13 f0       	push   $0xf01349b5
f010210a:	e8 ff eb ff ff       	call   f0100d0e <cprintf>
f010210f:	83 c4 10             	add    $0x10,%esp
f0102112:	eb 36                	jmp    f010214a <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102114:	e8 0e 23 00 00       	call   f0104427 <isSchedMethodRR>
f0102119:	85 c0                	test   %eax,%eax
f010211b:	74 1d                	je     f010213a <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f010211d:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0102122:	8a 00                	mov    (%eax),%al
f0102124:	0f b6 c0             	movzbl %al,%eax
f0102127:	83 ec 08             	sub    $0x8,%esp
f010212a:	50                   	push   %eax
f010212b:	68 68 50 13 f0       	push   $0xf0135068
f0102130:	e8 d9 eb ff ff       	call   f0100d0e <cprintf>
f0102135:	83 c4 10             	add    $0x10,%esp
f0102138:	eb 10                	jmp    f010214a <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010213a:	83 ec 0c             	sub    $0xc,%esp
f010213d:	68 a4 50 13 f0       	push   $0xf01350a4
f0102142:	e8 c7 eb ff ff       	call   f0100d0e <cprintf>
f0102147:	83 c4 10             	add    $0x10,%esp

	return 0;
f010214a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214f:	c9                   	leave  
f0102150:	c3                   	ret    

f0102151 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102151:	55                   	push   %ebp
f0102152:	89 e5                	mov    %esp,%ebp
f0102154:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010215a:	83 c0 04             	add    $0x4,%eax
f010215d:	8b 00                	mov    (%eax),%eax
f010215f:	83 ec 04             	sub    $0x4,%esp
f0102162:	6a 0a                	push   $0xa
f0102164:	6a 00                	push   $0x0
f0102166:	50                   	push   %eax
f0102167:	e8 81 f6 02 00       	call   f01317ed <strtol>
f010216c:	83 c4 10             	add    $0x10,%esp
f010216f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102175:	0f b6 c0             	movzbl %al,%eax
f0102178:	83 ec 0c             	sub    $0xc,%esp
f010217b:	50                   	push   %eax
f010217c:	e8 92 e5 02 00       	call   f0130713 <chksch>
f0102181:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102188:	75 12                	jne    f010219c <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010218a:	83 ec 0c             	sub    $0xc,%esp
f010218d:	68 cc 50 13 f0       	push   $0xf01350cc
f0102192:	e8 77 eb ff ff       	call   f0100d0e <cprintf>
f0102197:	83 c4 10             	add    $0x10,%esp
f010219a:	eb 16                	jmp    f01021b2 <command_sch_test+0x61>
	else if (status == 1)
f010219c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021a0:	75 10                	jne    f01021b2 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021a2:	83 ec 0c             	sub    $0xc,%esp
f01021a5:	68 f4 50 13 f0       	push   $0xf01350f4
f01021aa:	e8 5f eb ff ff       	call   f0100d0e <cprintf>
f01021af:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021b7:	c9                   	leave  
f01021b8:	c3                   	ret    

f01021b9 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021b9:	55                   	push   %ebp
f01021ba:	89 e5                	mov    %esp,%ebp
f01021bc:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021bf:	e8 89 bd 00 00       	call   f010df4d <isPageReplacmentAlgorithmCLOCK>
f01021c4:	85 c0                	test   %eax,%eax
f01021c6:	74 15                	je     f01021dd <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021c8:	83 ec 0c             	sub    $0xc,%esp
f01021cb:	68 18 51 13 f0       	push   $0xf0135118
f01021d0:	e8 39 eb ff ff       	call   f0100d0e <cprintf>
f01021d5:	83 c4 10             	add    $0x10,%esp
f01021d8:	e9 8c 00 00 00       	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021dd:	83 ec 0c             	sub    $0xc,%esp
f01021e0:	6a 01                	push   $0x1
f01021e2:	e8 50 bd 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f01021e7:	83 c4 10             	add    $0x10,%esp
f01021ea:	85 c0                	test   %eax,%eax
f01021ec:	74 12                	je     f0102200 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021ee:	83 ec 0c             	sub    $0xc,%esp
f01021f1:	68 40 51 13 f0       	push   $0xf0135140
f01021f6:	e8 13 eb ff ff       	call   f0100d0e <cprintf>
f01021fb:	83 c4 10             	add    $0x10,%esp
f01021fe:	eb 69                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102200:	83 ec 0c             	sub    $0xc,%esp
f0102203:	6a 02                	push   $0x2
f0102205:	e8 2d bd 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f010220a:	83 c4 10             	add    $0x10,%esp
f010220d:	85 c0                	test   %eax,%eax
f010220f:	74 12                	je     f0102223 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 80 51 13 f0       	push   $0xf0135180
f0102219:	e8 f0 ea ff ff       	call   f0100d0e <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
f0102221:	eb 46                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102223:	e8 40 bd 00 00       	call   f010df68 <isPageReplacmentAlgorithmFIFO>
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 bc 51 13 f0       	push   $0xf01351bc
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 2b                	jmp    f0102269 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010223e:	e8 40 bd 00 00       	call   f010df83 <isPageReplacmentAlgorithmModifiedCLOCK>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 e0 51 13 f0       	push   $0xf01351e0
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 10                	jmp    f0102269 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	68 10 52 13 f0       	push   $0xf0135210
f0102261:	e8 a8 ea ff ff       	call   f0100d0e <cprintf>
f0102266:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226e:	c9                   	leave  
f010226f:	c3                   	ret    

f0102270 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102270:	55                   	push   %ebp
f0102271:	89 e5                	mov    %esp,%ebp
f0102273:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102276:	e8 18 ed ff ff       	call   f0100f93 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 3c 52 13 f0       	push   $0xf013523c
f0102283:	e8 86 ea ff ff       	call   f0100d0e <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
	return 0;
f010228b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102290:	c9                   	leave  
f0102291:	c3                   	ret    

f0102292 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102292:	55                   	push   %ebp
f0102293:	89 e5                	mov    %esp,%ebp
f0102295:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102298:	e8 06 ed ff ff       	call   f0100fa3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010229d:	83 ec 0c             	sub    $0xc,%esp
f01022a0:	68 6c 52 13 f0       	push   $0xf013526c
f01022a5:	e8 64 ea ff ff       	call   f0100d0e <cprintf>
f01022aa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022b2:	c9                   	leave  
f01022b3:	c3                   	ret    

f01022b4 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022b4:	55                   	push   %ebp
f01022b5:	89 e5                	mov    %esp,%ebp
f01022b7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022ba:	e8 f4 ec ff ff       	call   f0100fb3 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022bf:	83 ec 0c             	sub    $0xc,%esp
f01022c2:	68 9c 52 13 f0       	push   $0xf013529c
f01022c7:	e8 42 ea ff ff       	call   f0100d0e <cprintf>
f01022cc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022d4:	c9                   	leave  
f01022d5:	c3                   	ret    

f01022d6 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022d6:	55                   	push   %ebp
f01022d7:	89 e5                	mov    %esp,%ebp
f01022d9:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022dc:	e8 e2 ec ff ff       	call   f0100fc3 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	68 cc 52 13 f0       	push   $0xf01352cc
f01022e9:	e8 20 ea ff ff       	call   f0100d0e <cprintf>
f01022ee:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f6:	c9                   	leave  
f01022f7:	c3                   	ret    

f01022f8 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022f8:	55                   	push   %ebp
f01022f9:	89 e5                	mov    %esp,%ebp
f01022fb:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022fe:	e8 d0 ec ff ff       	call   f0100fd3 <isUHeapPlacementStrategyFIRSTFIT>
f0102303:	84 c0                	test   %al,%al
f0102305:	74 12                	je     f0102319 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	68 fc 52 13 f0       	push   $0xf01352fc
f010230f:	e8 fa e9 ff ff       	call   f0100d0e <cprintf>
f0102314:	83 c4 10             	add    $0x10,%esp
f0102317:	eb 61                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102319:	e8 ca ec ff ff       	call   f0100fe8 <isUHeapPlacementStrategyBESTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 28 53 13 f0       	push   $0xf0135328
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 46                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102334:	e8 c4 ec ff ff       	call   f0100ffd <isUHeapPlacementStrategyNEXTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 54 53 13 f0       	push   $0xf0135354
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 2b                	jmp    f010237a <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010234f:	e8 be ec ff ff       	call   f0101012 <isUHeapPlacementStrategyWORSTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 80 53 13 f0       	push   $0xf0135380
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 10                	jmp    f010237a <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f010236a:	83 ec 0c             	sub    $0xc,%esp
f010236d:	68 ac 53 13 f0       	push   $0xf01353ac
f0102372:	e8 97 e9 ff ff       	call   f0100d0e <cprintf>
f0102377:	83 c4 10             	add    $0x10,%esp

	return 0;
f010237a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237f:	c9                   	leave  
f0102380:	c3                   	ret    

f0102381 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102381:	55                   	push   %ebp
f0102382:	89 e5                	mov    %esp,%ebp
f0102384:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102387:	e8 4f eb ff ff       	call   f0100edb <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010238c:	83 ec 0c             	sub    $0xc,%esp
f010238f:	68 d8 53 13 f0       	push   $0xf01353d8
f0102394:	e8 75 e9 ff ff       	call   f0100d0e <cprintf>
f0102399:	83 c4 10             	add    $0x10,%esp
	return 0;
f010239c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023a1:	c9                   	leave  
f01023a2:	c3                   	ret    

f01023a3 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023a3:	55                   	push   %ebp
f01023a4:	89 e5                	mov    %esp,%ebp
f01023a6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023a9:	e8 3d eb ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 d8 53 13 f0       	push   $0xf01353d8
f01023b6:	e8 53 e9 ff ff       	call   f0100d0e <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023c3:	c9                   	leave  
f01023c4:	c3                   	ret    

f01023c5 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023c5:	55                   	push   %ebp
f01023c6:	89 e5                	mov    %esp,%ebp
f01023c8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023cb:	e8 2b eb ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023d0:	83 ec 0c             	sub    $0xc,%esp
f01023d3:	68 0c 54 13 f0       	push   $0xf013540c
f01023d8:	e8 31 e9 ff ff       	call   f0100d0e <cprintf>
f01023dd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023e5:	c9                   	leave  
f01023e6:	c3                   	ret    

f01023e7 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023e7:	55                   	push   %ebp
f01023e8:	89 e5                	mov    %esp,%ebp
f01023ea:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023ed:	e8 19 eb ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023f2:	83 ec 0c             	sub    $0xc,%esp
f01023f5:	68 3c 54 13 f0       	push   $0xf013543c
f01023fa:	e8 0f e9 ff ff       	call   f0100d0e <cprintf>
f01023ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102402:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102407:	c9                   	leave  
f0102408:	c3                   	ret    

f0102409 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102409:	55                   	push   %ebp
f010240a:	89 e5                	mov    %esp,%ebp
f010240c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010240f:	e8 07 eb ff ff       	call   f0100f1b <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 6c 54 13 f0       	push   $0xf013546c
f010241c:	e8 ed e8 ff ff       	call   f0100d0e <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102429:	c9                   	leave  
f010242a:	c3                   	ret    

f010242b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010242b:	55                   	push   %ebp
f010242c:	89 e5                	mov    %esp,%ebp
f010242e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102431:	e8 f5 ea ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f0102436:	84 c0                	test   %al,%al
f0102438:	74 12                	je     f010244c <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010243a:	83 ec 0c             	sub    $0xc,%esp
f010243d:	68 a0 54 13 f0       	push   $0xf01354a0
f0102442:	e8 c7 e8 ff ff       	call   f0100d0e <cprintf>
f0102447:	83 c4 10             	add    $0x10,%esp
f010244a:	eb 7c                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010244c:	e8 ee ea ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 dc 54 13 f0       	push   $0xf01354dc
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 61                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102467:	e8 e8 ea ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 0c 55 13 f0       	push   $0xf013550c
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 46                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102482:	e8 e2 ea ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 38 55 13 f0       	push   $0xf0135538
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 2b                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010249d:	e8 dc ea ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 64 55 13 f0       	push   $0xf0135564
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 10                	jmp    f01024c8 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024b8:	83 ec 0c             	sub    $0xc,%esp
f01024bb:	68 94 55 13 f0       	push   $0xf0135594
f01024c0:	e8 49 e8 ff ff       	call   f0100d0e <cprintf>
f01024c5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cd:	c9                   	leave  
f01024ce:	c3                   	ret    

f01024cf <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024cf:	55                   	push   %ebp
f01024d0:	89 e5                	mov    %esp,%ebp
f01024d2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024d5:	e8 20 bb 00 00       	call   f010dffa <isBufferingEnabled>
f01024da:	84 c0                	test   %al,%al
f01024dc:	75 12                	jne    f01024f0 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024de:	83 ec 0c             	sub    $0xc,%esp
f01024e1:	68 c4 55 13 f0       	push   $0xf01355c4
f01024e6:	e8 23 e8 ff ff       	call   f0100d0e <cprintf>
f01024eb:	83 c4 10             	add    $0x10,%esp
f01024ee:	eb 1d                	jmp    f010250d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024f0:	83 ec 0c             	sub    $0xc,%esp
f01024f3:	6a 00                	push   $0x0
f01024f5:	e8 da ba 00 00       	call   f010dfd4 <enableModifiedBuffer>
f01024fa:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024fd:	83 ec 0c             	sub    $0xc,%esp
f0102500:	68 00 56 13 f0       	push   $0xf0135600
f0102505:	e8 04 e8 ff ff       	call   f0100d0e <cprintf>
f010250a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010250d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102512:	c9                   	leave  
f0102513:	c3                   	ret    

f0102514 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102514:	55                   	push   %ebp
f0102515:	89 e5                	mov    %esp,%ebp
f0102517:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010251a:	e8 db ba 00 00       	call   f010dffa <isBufferingEnabled>
f010251f:	84 c0                	test   %al,%al
f0102521:	75 12                	jne    f0102535 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102523:	83 ec 0c             	sub    $0xc,%esp
f0102526:	68 c4 55 13 f0       	push   $0xf01355c4
f010252b:	e8 de e7 ff ff       	call   f0100d0e <cprintf>
f0102530:	83 c4 10             	add    $0x10,%esp
f0102533:	eb 1d                	jmp    f0102552 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102535:	83 ec 0c             	sub    $0xc,%esp
f0102538:	6a 01                	push   $0x1
f010253a:	e8 95 ba 00 00       	call   f010dfd4 <enableModifiedBuffer>
f010253f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102542:	83 ec 0c             	sub    $0xc,%esp
f0102545:	68 24 56 13 f0       	push   $0xf0135624
f010254a:	e8 bf e7 ff ff       	call   f0100d0e <cprintf>
f010254f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102552:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102557:	c9                   	leave  
f0102558:	c3                   	ret    

f0102559 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102559:	55                   	push   %ebp
f010255a:	89 e5                	mov    %esp,%ebp
f010255c:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010255f:	83 ec 0c             	sub    $0xc,%esp
f0102562:	6a 00                	push   $0x0
f0102564:	e8 83 ba 00 00       	call   f010dfec <enableBuffering>
f0102569:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f010256c:	83 ec 0c             	sub    $0xc,%esp
f010256f:	6a 00                	push   $0x0
f0102571:	e8 5e ba 00 00       	call   f010dfd4 <enableModifiedBuffer>
f0102576:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102579:	83 ec 0c             	sub    $0xc,%esp
f010257c:	68 44 56 13 f0       	push   $0xf0135644
f0102581:	e8 88 e7 ff ff       	call   f0100d0e <cprintf>
f0102586:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102589:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010258e:	c9                   	leave  
f010258f:	c3                   	ret    

f0102590 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102590:	55                   	push   %ebp
f0102591:	89 e5                	mov    %esp,%ebp
f0102593:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102596:	83 ec 0c             	sub    $0xc,%esp
f0102599:	6a 01                	push   $0x1
f010259b:	e8 4c ba 00 00       	call   f010dfec <enableBuffering>
f01025a0:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025a3:	83 ec 0c             	sub    $0xc,%esp
f01025a6:	6a 01                	push   $0x1
f01025a8:	e8 27 ba 00 00       	call   f010dfd4 <enableModifiedBuffer>
f01025ad:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025b0:	e8 5d ba 00 00       	call   f010e012 <getModifiedBufferLength>
f01025b5:	85 c0                	test   %eax,%eax
f01025b7:	75 59                	jne    f0102612 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 60 56 13 f0       	push   $0xf0135660
f01025c1:	e8 48 e7 ff ff       	call   f0100d0e <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025c9:	83 ec 08             	sub    $0x8,%esp
f01025cc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025cf:	50                   	push   %eax
f01025d0:	68 90 56 13 f0       	push   $0xf0135690
f01025d5:	e8 ad ec 02 00       	call   f0131287 <readline>
f01025da:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025dd:	83 ec 04             	sub    $0x4,%esp
f01025e0:	6a 0a                	push   $0xa
f01025e2:	6a 00                	push   $0x0
f01025e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025e7:	50                   	push   %eax
f01025e8:	e8 00 f2 02 00       	call   f01317ed <strtol>
f01025ed:	83 c4 10             	add    $0x10,%esp
f01025f0:	83 ec 0c             	sub    $0xc,%esp
f01025f3:	50                   	push   %eax
f01025f4:	e8 0b ba 00 00       	call   f010e004 <setModifiedBufferLength>
f01025f9:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fc:	e8 11 ba 00 00       	call   f010e012 <getModifiedBufferLength>
f0102601:	83 ec 08             	sub    $0x8,%esp
f0102604:	50                   	push   %eax
f0102605:	68 bc 56 13 f0       	push   $0xf01356bc
f010260a:	e8 ff e6 ff ff       	call   f0100d0e <cprintf>
f010260f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102612:	83 ec 0c             	sub    $0xc,%esp
f0102615:	68 e1 56 13 f0       	push   $0xf01356e1
f010261a:	e8 ef e6 ff ff       	call   f0100d0e <cprintf>
f010261f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102622:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102627:	c9                   	leave  
f0102628:	c3                   	ret    

f0102629 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102629:	55                   	push   %ebp
f010262a:	89 e5                	mov    %esp,%ebp
f010262c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010262f:	e8 c6 b9 00 00       	call   f010dffa <isBufferingEnabled>
f0102634:	84 c0                	test   %al,%al
f0102636:	75 12                	jne    f010264a <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102638:	83 ec 0c             	sub    $0xc,%esp
f010263b:	68 fc 56 13 f0       	push   $0xf01356fc
f0102640:	e8 c9 e6 ff ff       	call   f0100d0e <cprintf>
f0102645:	83 c4 10             	add    $0x10,%esp
f0102648:	eb 19                	jmp    f0102663 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010264a:	e8 93 b9 00 00       	call   f010dfe2 <isModifiedBufferEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 10                	jne    f0102663 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 4c 57 13 f0       	push   $0xf013574c
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102666:	83 c0 04             	add    $0x4,%eax
f0102669:	8b 00                	mov    (%eax),%eax
f010266b:	83 ec 04             	sub    $0x4,%esp
f010266e:	6a 0a                	push   $0xa
f0102670:	6a 00                	push   $0x0
f0102672:	50                   	push   %eax
f0102673:	e8 75 f1 02 00       	call   f01317ed <strtol>
f0102678:	83 c4 10             	add    $0x10,%esp
f010267b:	83 ec 0c             	sub    $0xc,%esp
f010267e:	50                   	push   %eax
f010267f:	e8 80 b9 00 00       	call   f010e004 <setModifiedBufferLength>
f0102684:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102687:	e8 86 b9 00 00       	call   f010e012 <getModifiedBufferLength>
f010268c:	83 ec 08             	sub    $0x8,%esp
f010268f:	50                   	push   %eax
f0102690:	68 bc 56 13 f0       	push   $0xf01356bc
f0102695:	e8 74 e6 ff ff       	call   f0100d0e <cprintf>
f010269a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a2:	c9                   	leave  
f01026a3:	c3                   	ret    

f01026a4 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026a4:	55                   	push   %ebp
f01026a5:	89 e5                	mov    %esp,%ebp
f01026a7:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026aa:	e8 4b b9 00 00       	call   f010dffa <isBufferingEnabled>
f01026af:	84 c0                	test   %al,%al
f01026b1:	75 12                	jne    f01026c5 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 fc 56 13 f0       	push   $0xf01356fc
f01026bb:	e8 4e e6 ff ff       	call   f0100d0e <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	eb 19                	jmp    f01026de <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026c5:	e8 18 b9 00 00       	call   f010dfe2 <isModifiedBufferEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 10                	jne    f01026de <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 4c 57 13 f0       	push   $0xf013574c
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026de:	e8 2f b9 00 00       	call   f010e012 <getModifiedBufferLength>
f01026e3:	83 ec 08             	sub    $0x8,%esp
f01026e6:	50                   	push   %eax
f01026e7:	68 92 57 13 f0       	push   $0xf0135792
f01026ec:	e8 1d e6 ff ff       	call   f0100d0e <cprintf>
f01026f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026f9:	c9                   	leave  
f01026fa:	c3                   	ret    

f01026fb <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026fb:	55                   	push   %ebp
f01026fc:	89 e5                	mov    %esp,%ebp
f01026fe:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102701:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102708:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010270c:	75 1b                	jne    f0102729 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010270e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102711:	83 c0 04             	add    $0x4,%eax
f0102714:	8b 00                	mov    (%eax),%eax
f0102716:	83 ec 04             	sub    $0x4,%esp
f0102719:	6a 0a                	push   $0xa
f010271b:	6a 00                	push   $0x0
f010271d:	50                   	push   %eax
f010271e:	e8 ca f0 02 00       	call   f01317ed <strtol>
f0102723:	83 c4 10             	add    $0x10,%esp
f0102726:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102729:	e8 fd e7 ff ff       	call   f0100f2b <isKHeapPlacementStrategyCONTALLOC>
f010272e:	84 c0                	test   %al,%al
f0102730:	74 0a                	je     f010273c <command_test_kmalloc+0x41>
		test_kmalloc();
f0102732:	e8 45 52 01 00       	call   f011797c <test_kmalloc>
f0102737:	e9 e8 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010273c:	e8 fe e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102741:	84 c0                	test   %al,%al
f0102743:	74 44                	je     f0102789 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102745:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102749:	75 1a                	jne    f0102765 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010274b:	83 ec 0c             	sub    $0xc,%esp
f010274e:	68 b0 57 13 f0       	push   $0xf01357b0
f0102753:	e8 b6 e5 ff ff       	call   f0100d0e <cprintf>
f0102758:	83 c4 10             	add    $0x10,%esp
			return 0;
f010275b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102760:	e9 c4 00 00 00       	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102765:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102769:	75 0a                	jne    f0102775 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f010276b:	e8 95 a0 01 00       	call   f011c805 <test_kmalloc_firstfit1>
f0102770:	e9 af 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102775:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102779:	0f 85 a5 00 00 00    	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010277f:	e8 23 b4 01 00       	call   f011dba7 <test_kmalloc_firstfit2>
f0102784:	e9 9b 00 00 00       	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102789:	e8 c6 e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010278e:	84 c0                	test   %al,%al
f0102790:	74 44                	je     f01027d6 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102792:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102796:	75 17                	jne    f01027af <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102798:	83 ec 0c             	sub    $0xc,%esp
f010279b:	68 00 58 13 f0       	push   $0xf0135800
f01027a0:	e8 69 e5 ff ff       	call   f0100d0e <cprintf>
f01027a5:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01027ad:	eb 7a                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027b3:	75 07                	jne    f01027bc <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027b5:	e8 c2 51 01 00       	call   f011797c <test_kmalloc>
f01027ba:	eb 68                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027c0:	75 07                	jne    f01027c9 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027c2:	e8 08 7b 01 00       	call   f011a2cf <test_kmalloc_bestfit1>
f01027c7:	eb 5b                	jmp    f0102824 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027c9:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027cd:	75 55                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027cf:	e8 51 8d 01 00       	call   f011b525 <test_kmalloc_bestfit2>
f01027d4:	eb 4e                	jmp    f0102824 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027d6:	e8 8e e7 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f01027db:	84 c0                	test   %al,%al
f01027dd:	74 37                	je     f0102816 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027e3:	75 17                	jne    f01027fc <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027e5:	83 ec 0c             	sub    $0xc,%esp
f01027e8:	68 50 58 13 f0       	push   $0xf0135850
f01027ed:	e8 1c e5 ff ff       	call   f0100d0e <cprintf>
f01027f2:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01027fa:	eb 2d                	jmp    f0102829 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102800:	75 07                	jne    f0102809 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102802:	e8 75 51 01 00       	call   f011797c <test_kmalloc>
f0102807:	eb 1b                	jmp    f0102824 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010280d:	75 15                	jne    f0102824 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010280f:	e8 c6 63 01 00       	call   f0118bda <test_kmalloc_nextfit>
f0102814:	eb 0e                	jmp    f0102824 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102816:	e8 63 e7 ff ff       	call   f0100f7e <isKHeapPlacementStrategyWORSTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010281f:	e8 18 c2 01 00       	call   f011ea3c <test_kmalloc_worstfit>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102831:	e8 1e e7 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	75 09                	jne    f0102843 <command_test_kfree+0x18>
f010283a:	e8 00 e7 ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010283f:	84 c0                	test   %al,%al
f0102841:	74 07                	je     f010284a <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f0102843:	e8 96 f9 01 00       	call   f01221de <test_kfree_bestfirstfit>
f0102848:	eb 05                	jmp    f010284f <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f010284a:	e8 3d d8 01 00       	call   f012008c <test_kfree>
	}
	return 0;
f010284f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102854:	c9                   	leave  
f0102855:	c3                   	ret    

f0102856 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102856:	55                   	push   %ebp
f0102857:	89 e5                	mov    %esp,%ebp
f0102859:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f010285c:	e8 79 13 02 00       	call   f0123bda <test_kheap_phys_addr>
	return 0;
f0102861:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102866:	c9                   	leave  
f0102867:	c3                   	ret    

f0102868 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102868:	55                   	push   %ebp
f0102869:	89 e5                	mov    %esp,%ebp
f010286b:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f010286e:	e8 37 28 02 00       	call   f01250aa <test_kheap_virt_addr>
	return 0;
f0102873:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102878:	c9                   	leave  
f0102879:	c3                   	ret    

f010287a <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f010287a:	55                   	push   %ebp
f010287b:	89 e5                	mov    %esp,%ebp
f010287d:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102880:	e8 02 3d 02 00       	call   f0126587 <test_three_creation_functions>
	return 0;
f0102885:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010288a:	c9                   	leave  
f010288b:	c3                   	ret    

f010288c <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f010288c:	55                   	push   %ebp
f010288d:	89 e5                	mov    %esp,%ebp
f010288f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102892:	e8 d2 e6 ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f0102897:	84 c0                	test   %al,%al
f0102899:	74 07                	je     f01028a2 <command_test_krealloc+0x16>
		test_krealloc();
f010289b:	e8 fe 96 02 00       	call   f012bf9e <test_krealloc>
f01028a0:	eb 0e                	jmp    f01028b0 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028a2:	e8 ad e6 ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f01028a7:	84 c0                	test   %al,%al
f01028a9:	74 05                	je     f01028b0 <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028ab:	e8 9e b6 02 00       	call   f012df4e <test_krealloc_BF>
	return 0;
f01028b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b5:	c9                   	leave  
f01028b6:	c3                   	ret    

f01028b7 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028b7:	55                   	push   %ebp
f01028b8:	89 e5                	mov    %esp,%ebp
f01028ba:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028bd:	e8 cf 3c 01 00       	call   f0116591 <test_priority_normal_and_higher>
	return 0;
f01028c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c7:	c9                   	leave  
f01028c8:	c3                   	ret    

f01028c9 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028c9:	55                   	push   %ebp
f01028ca:	89 e5                	mov    %esp,%ebp
f01028cc:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028cf:	e8 a3 46 01 00       	call   f0116f77 <test_priority_normal_and_lower>
	return 0;
f01028d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d9:	c9                   	leave  
f01028da:	c3                   	ret    

f01028db <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028db:	55                   	push   %ebp
f01028dc:	89 e5                	mov    %esp,%ebp
f01028de:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028e1:	e8 db 3e 02 00       	call   f01267c1 <test_kfreeall>
	return 0;
f01028e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028eb:	c9                   	leave  
f01028ec:	c3                   	ret    

f01028ed <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028ed:	55                   	push   %ebp
f01028ee:	89 e5                	mov    %esp,%ebp
f01028f0:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028f3:	e8 b5 55 02 00       	call   f0127ead <test_kexpand>
	return 0;
f01028f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028fd:	c9                   	leave  
f01028fe:	c3                   	ret    

f01028ff <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028ff:	55                   	push   %ebp
f0102900:	89 e5                	mov    %esp,%ebp
f0102902:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102905:	e8 24 63 02 00       	call   f0128c2e <test_kshrink>
	return 0;
f010290a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010290f:	c9                   	leave  
f0102910:	c3                   	ret    

f0102911 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102911:	55                   	push   %ebp
f0102912:	89 e5                	mov    %esp,%ebp
f0102914:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102917:	e8 ff 71 02 00       	call   f0129b1b <test_kfreelast>
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010292c:	83 c0 04             	add    $0x4,%eax
f010292f:	8b 00                	mov    (%eax),%eax
f0102931:	83 ec 04             	sub    $0x4,%esp
f0102934:	6a 0a                	push   $0xa
f0102936:	6a 00                	push   $0x0
f0102938:	50                   	push   %eax
f0102939:	e8 af ee 02 00       	call   f01317ed <strtol>
f010293e:	83 c4 10             	add    $0x10,%esp
f0102941:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010294b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102952:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0102957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010295a:	eb 3d                	jmp    f0102999 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010295c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010295f:	05 5c 05 00 00       	add    $0x55c,%eax
f0102964:	83 ec 08             	sub    $0x8,%esp
f0102967:	68 9e 58 13 f0       	push   $0xf013589e
f010296c:	50                   	push   %eax
f010296d:	e8 27 ec 02 00       	call   f0131599 <strcmp>
f0102972:	83 c4 10             	add    $0x10,%esp
f0102975:	85 c0                	test   %eax,%eax
f0102977:	75 12                	jne    f010298b <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010297d:	74 07                	je     f0102986 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010297f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102986:	ff 45 f4             	incl   -0xc(%ebp)
f0102989:	eb 06                	jmp    f0102991 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f010298b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010298f:	74 31                	je     f01029c2 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102991:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0102996:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102999:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010299d:	74 08                	je     f01029a7 <command_test_sc_MLFQ+0x84>
f010299f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029a2:	8b 40 44             	mov    0x44(%eax),%eax
f01029a5:	eb 05                	jmp    f01029ac <command_test_sc_MLFQ+0x89>
f01029a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ac:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f01029b1:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f01029b6:	85 c0                	test   %eax,%eax
f01029b8:	75 a2                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029be:	75 9c                	jne    f010295c <command_test_sc_MLFQ+0x39>
f01029c0:	eb 01                	jmp    f01029c3 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029c2:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029c6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029c9:	75 12                	jne    f01029dd <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029cb:	83 ec 0c             	sub    $0xc,%esp
f01029ce:	68 a8 58 13 f0       	push   $0xf01358a8
f01029d3:	e8 36 e3 ff ff       	call   f0100d0e <cprintf>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	eb 17                	jmp    f01029f4 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029dd:	83 ec 04             	sub    $0x4,%esp
f01029e0:	68 e1 58 13 f0       	push   $0xf01358e1
f01029e5:	68 8b 04 00 00       	push   $0x48b
f01029ea:	68 2d 49 13 f0       	push   $0xf013492d
f01029ef:	e8 11 d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f9:	c9                   	leave  
f01029fa:	c3                   	ret    

f01029fb <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029fb:	55                   	push   %ebp
f01029fc:	89 e5                	mov    %esp,%ebp
f01029fe:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a01:	e8 87 e8 00 00       	call   f011128d <TestAutoCompleteCommand>
f0102a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a0e:	c9                   	leave  
f0102a0f:	c3                   	ret    

f0102a10 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a10:	55                   	push   %ebp
f0102a11:	89 e5                	mov    %esp,%ebp
f0102a13:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a16:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a1a:	74 1a                	je     f0102a36 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a1c:	83 ec 0c             	sub    $0xc,%esp
f0102a1f:	68 f8 58 13 f0       	push   $0xf01358f8
f0102a24:	e8 e5 e2 ff ff       	call   f0100d0e <cprintf>
f0102a29:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a31:	e9 82 01 00 00       	jmp    f0102bb8 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a39:	83 c0 04             	add    $0x4,%eax
f0102a3c:	8b 00                	mov    (%eax),%eax
f0102a3e:	83 ec 08             	sub    $0x8,%esp
f0102a41:	68 30 59 13 f0       	push   $0xf0135930
f0102a46:	50                   	push   %eax
f0102a47:	e8 4d eb 02 00       	call   f0131599 <strcmp>
f0102a4c:	83 c4 10             	add    $0x10,%esp
f0102a4f:	85 c0                	test   %eax,%eax
f0102a51:	75 0a                	jne    f0102a5d <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a53:	e8 df bd 00 00       	call   f010e837 <test_initialize_MemBlocksList>
f0102a58:	e9 56 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a60:	83 c0 04             	add    $0x4,%eax
f0102a63:	8b 00                	mov    (%eax),%eax
f0102a65:	83 ec 08             	sub    $0x8,%esp
f0102a68:	68 35 59 13 f0       	push   $0xf0135935
f0102a6d:	50                   	push   %eax
f0102a6e:	e8 26 eb 02 00       	call   f0131599 <strcmp>
f0102a73:	83 c4 10             	add    $0x10,%esp
f0102a76:	85 c0                	test   %eax,%eax
f0102a78:	75 0a                	jne    f0102a84 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a7a:	e8 cc be 00 00       	call   f010e94b <test_insert_sorted_allocList>
f0102a7f:	e9 2f 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a87:	83 c0 04             	add    $0x4,%eax
f0102a8a:	8b 00                	mov    (%eax),%eax
f0102a8c:	83 ec 08             	sub    $0x8,%esp
f0102a8f:	68 3b 59 13 f0       	push   $0xf013593b
f0102a94:	50                   	push   %eax
f0102a95:	e8 ff ea 02 00       	call   f0131599 <strcmp>
f0102a9a:	83 c4 10             	add    $0x10,%esp
f0102a9d:	85 c0                	test   %eax,%eax
f0102a9f:	75 0a                	jne    f0102aab <command_test_lists+0x9b>
	{
		test_find_block();
f0102aa1:	e8 63 c3 00 00       	call   f010ee09 <test_find_block>
f0102aa6:	e9 08 01 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 08             	sub    $0x8,%esp
f0102ab6:	68 40 59 13 f0       	push   $0xf0135940
f0102abb:	50                   	push   %eax
f0102abc:	e8 d8 ea 02 00       	call   f0131599 <strcmp>
f0102ac1:	83 c4 10             	add    $0x10,%esp
f0102ac4:	85 c0                	test   %eax,%eax
f0102ac6:	74 1d                	je     f0102ae5 <command_test_lists+0xd5>
f0102ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acb:	83 c0 04             	add    $0x4,%eax
f0102ace:	8b 00                	mov    (%eax),%eax
f0102ad0:	83 ec 08             	sub    $0x8,%esp
f0102ad3:	68 43 59 13 f0       	push   $0xf0135943
f0102ad8:	50                   	push   %eax
f0102ad9:	e8 bb ea 02 00       	call   f0131599 <strcmp>
f0102ade:	83 c4 10             	add    $0x10,%esp
f0102ae1:	85 c0                	test   %eax,%eax
f0102ae3:	75 0a                	jne    f0102aef <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102ae5:	e8 7a c6 00 00       	call   f010f164 <test_alloc_block_FF>
f0102aea:	e9 c4 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102aef:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af2:	83 c0 04             	add    $0x4,%eax
f0102af5:	8b 00                	mov    (%eax),%eax
f0102af7:	83 ec 08             	sub    $0x8,%esp
f0102afa:	68 46 59 13 f0       	push   $0xf0135946
f0102aff:	50                   	push   %eax
f0102b00:	e8 94 ea 02 00       	call   f0131599 <strcmp>
f0102b05:	83 c4 10             	add    $0x10,%esp
f0102b08:	85 c0                	test   %eax,%eax
f0102b0a:	74 1d                	je     f0102b29 <command_test_lists+0x119>
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 49 59 13 f0       	push   $0xf0135949
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 77 ea 02 00       	call   f0131599 <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 0a                	jne    f0102b33 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b29:	e8 b4 ca 00 00       	call   f010f5e2 <test_alloc_block_BF>
f0102b2e:	e9 80 00 00 00       	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b36:	83 c0 04             	add    $0x4,%eax
f0102b39:	8b 00                	mov    (%eax),%eax
f0102b3b:	83 ec 08             	sub    $0x8,%esp
f0102b3e:	68 4c 59 13 f0       	push   $0xf013594c
f0102b43:	50                   	push   %eax
f0102b44:	e8 50 ea 02 00       	call   f0131599 <strcmp>
f0102b49:	83 c4 10             	add    $0x10,%esp
f0102b4c:	85 c0                	test   %eax,%eax
f0102b4e:	74 1d                	je     f0102b6d <command_test_lists+0x15d>
f0102b50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b53:	83 c0 04             	add    $0x4,%eax
f0102b56:	8b 00                	mov    (%eax),%eax
f0102b58:	83 ec 08             	sub    $0x8,%esp
f0102b5b:	68 4f 59 13 f0       	push   $0xf013594f
f0102b60:	50                   	push   %eax
f0102b61:	e8 33 ea 02 00       	call   f0131599 <strcmp>
f0102b66:	83 c4 10             	add    $0x10,%esp
f0102b69:	85 c0                	test   %eax,%eax
f0102b6b:	75 07                	jne    f0102b74 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b6d:	e8 f7 d0 00 00       	call   f010fc69 <test_alloc_block_NF>
f0102b72:	eb 3f                	jmp    f0102bb3 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b77:	83 c0 04             	add    $0x4,%eax
f0102b7a:	8b 00                	mov    (%eax),%eax
f0102b7c:	83 ec 08             	sub    $0x8,%esp
f0102b7f:	68 52 59 13 f0       	push   $0xf0135952
f0102b84:	50                   	push   %eax
f0102b85:	e8 0f ea 02 00       	call   f0131599 <strcmp>
f0102b8a:	83 c4 10             	add    $0x10,%esp
f0102b8d:	85 c0                	test   %eax,%eax
f0102b8f:	74 1d                	je     f0102bae <command_test_lists+0x19e>
f0102b91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b94:	83 c0 04             	add    $0x4,%eax
f0102b97:	8b 00                	mov    (%eax),%eax
f0102b99:	83 ec 08             	sub    $0x8,%esp
f0102b9c:	68 58 59 13 f0       	push   $0xf0135958
f0102ba1:	50                   	push   %eax
f0102ba2:	e8 f2 e9 02 00       	call   f0131599 <strcmp>
f0102ba7:	83 c4 10             	add    $0x10,%esp
f0102baa:	85 c0                	test   %eax,%eax
f0102bac:	75 05                	jne    f0102bb3 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bae:	e8 44 d9 00 00       	call   f01104f7 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bb8:	c9                   	leave  
f0102bb9:	c3                   	ret    

f0102bba <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bba:	55                   	push   %ebp
f0102bbb:	89 e5                	mov    %esp,%ebp
f0102bbd:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bc0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bc4:	74 1a                	je     f0102be0 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bc6:	83 ec 0c             	sub    $0xc,%esp
f0102bc9:	68 60 59 13 f0       	push   $0xf0135960
f0102bce:	e8 3b e1 ff ff       	call   f0100d0e <cprintf>
f0102bd3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bd6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bdb:	e9 e1 00 00 00       	jmp    f0102cc1 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102be0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102be3:	83 c0 04             	add    $0x4,%eax
f0102be6:	8b 00                	mov    (%eax),%eax
f0102be8:	83 ec 08             	sub    $0x8,%esp
f0102beb:	68 99 59 13 f0       	push   $0xf0135999
f0102bf0:	50                   	push   %eax
f0102bf1:	e8 a3 e9 02 00       	call   f0131599 <strcmp>
f0102bf6:	83 c4 10             	add    $0x10,%esp
f0102bf9:	85 c0                	test   %eax,%eax
f0102bfb:	75 0a                	jne    f0102c07 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102bfd:	e8 1f f1 00 00       	call   f0111d21 <test_cut_paste_pages>
f0102c02:	e9 b5 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0a:	83 c0 04             	add    $0x4,%eax
f0102c0d:	8b 00                	mov    (%eax),%eax
f0102c0f:	83 ec 08             	sub    $0x8,%esp
f0102c12:	68 a2 59 13 f0       	push   $0xf01359a2
f0102c17:	50                   	push   %eax
f0102c18:	e8 7c e9 02 00       	call   f0131599 <strcmp>
f0102c1d:	83 c4 10             	add    $0x10,%esp
f0102c20:	85 c0                	test   %eax,%eax
f0102c22:	75 0a                	jne    f0102c2e <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c24:	e8 43 fb 00 00       	call   f011276c <test_copy_paste_chunk>
f0102c29:	e9 8e 00 00 00       	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 ac 59 13 f0       	push   $0xf01359ac
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 55 e9 02 00       	call   f0131599 <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 07                	jne    f0102c52 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c4b:	e8 1a 0c 01 00       	call   f011386a <test_share_chunk>
f0102c50:	eb 6a                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c55:	83 c0 04             	add    $0x4,%eax
f0102c58:	8b 00                	mov    (%eax),%eax
f0102c5a:	83 ec 08             	sub    $0x8,%esp
f0102c5d:	68 b2 59 13 f0       	push   $0xf01359b2
f0102c62:	50                   	push   %eax
f0102c63:	e8 31 e9 02 00       	call   f0131599 <strcmp>
f0102c68:	83 c4 10             	add    $0x10,%esp
f0102c6b:	85 c0                	test   %eax,%eax
f0102c6d:	75 07                	jne    f0102c76 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c6f:	e8 1e 16 01 00       	call   f0114292 <test_allocate_chunk>
f0102c74:	eb 46                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c79:	83 c0 04             	add    $0x4,%eax
f0102c7c:	8b 00                	mov    (%eax),%eax
f0102c7e:	83 ec 08             	sub    $0x8,%esp
f0102c81:	68 bb 59 13 f0       	push   $0xf01359bb
f0102c86:	50                   	push   %eax
f0102c87:	e8 0d e9 02 00       	call   f0131599 <strcmp>
f0102c8c:	83 c4 10             	add    $0x10,%esp
f0102c8f:	85 c0                	test   %eax,%eax
f0102c91:	75 07                	jne    f0102c9a <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c93:	e8 a9 1e 01 00       	call   f0114b41 <test_calculate_required_frames>
f0102c98:	eb 22                	jmp    f0102cbc <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c9d:	83 c0 04             	add    $0x4,%eax
f0102ca0:	8b 00                	mov    (%eax),%eax
f0102ca2:	83 ec 08             	sub    $0x8,%esp
f0102ca5:	68 ca 59 13 f0       	push   $0xf01359ca
f0102caa:	50                   	push   %eax
f0102cab:	e8 e9 e8 02 00       	call   f0131599 <strcmp>
f0102cb0:	83 c4 10             	add    $0x10,%esp
f0102cb3:	85 c0                	test   %eax,%eax
f0102cb5:	75 05                	jne    f0102cbc <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cb7:	e8 f9 26 01 00       	call   f01153b5 <test_calculate_allocated_space>
	}
	return 0;
f0102cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cc1:	c9                   	leave  
f0102cc2:	c3                   	ret    

f0102cc3 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cc3:	55                   	push   %ebp
f0102cc4:	89 e5                	mov    %esp,%ebp
f0102cc6:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cc9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ccd:	74 1a                	je     f0102ce9 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102ccf:	83 ec 0c             	sub    $0xc,%esp
f0102cd2:	68 dc 59 13 f0       	push   $0xf01359dc
f0102cd7:	e8 32 e0 ff ff       	call   f0100d0e <cprintf>
f0102cdc:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ce4:	e9 e1 00 00 00       	jmp    f0102dca <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cec:	83 c0 04             	add    $0x4,%eax
f0102cef:	8b 00                	mov    (%eax),%eax
f0102cf1:	83 ec 08             	sub    $0x8,%esp
f0102cf4:	68 12 5a 13 f0       	push   $0xf0135a12
f0102cf9:	50                   	push   %eax
f0102cfa:	e8 9a e8 02 00       	call   f0131599 <strcmp>
f0102cff:	83 c4 10             	add    $0x10,%esp
f0102d02:	85 c0                	test   %eax,%eax
f0102d04:	75 0a                	jne    f0102d10 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d06:	e8 07 e7 00 00       	call   f0111412 <test_pt_set_page_permissions>
f0102d0b:	e9 b5 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d10:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d13:	83 c0 04             	add    $0x4,%eax
f0102d16:	8b 00                	mov    (%eax),%eax
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	68 1a 5a 13 f0       	push   $0xf0135a1a
f0102d20:	50                   	push   %eax
f0102d21:	e8 73 e8 02 00       	call   f0131599 <strcmp>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	85 c0                	test   %eax,%eax
f0102d2b:	75 0a                	jne    f0102d37 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d2d:	e8 43 e9 00 00       	call   f0111675 <test_pt_set_page_permissions_invalid_va>
f0102d32:	e9 8e 00 00 00       	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d3a:	83 c0 04             	add    $0x4,%eax
f0102d3d:	8b 00                	mov    (%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	68 22 5a 13 f0       	push   $0xf0135a22
f0102d47:	50                   	push   %eax
f0102d48:	e8 4c e8 02 00       	call   f0131599 <strcmp>
f0102d4d:	83 c4 10             	add    $0x10,%esp
f0102d50:	85 c0                	test   %eax,%eax
f0102d52:	75 07                	jne    f0102d5b <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d54:	e8 65 e9 00 00       	call   f01116be <test_pt_get_page_permissions>
f0102d59:	eb 6a                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d5e:	83 c0 04             	add    $0x4,%eax
f0102d61:	8b 00                	mov    (%eax),%eax
f0102d63:	83 ec 08             	sub    $0x8,%esp
f0102d66:	68 2a 5a 13 f0       	push   $0xf0135a2a
f0102d6b:	50                   	push   %eax
f0102d6c:	e8 28 e8 02 00       	call   f0131599 <strcmp>
f0102d71:	83 c4 10             	add    $0x10,%esp
f0102d74:	85 c0                	test   %eax,%eax
f0102d76:	75 07                	jne    f0102d7f <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d78:	e8 85 ea 00 00       	call   f0111802 <test_pt_clear_page_table_entry>
f0102d7d:	eb 46                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d82:	83 c0 04             	add    $0x4,%eax
f0102d85:	8b 00                	mov    (%eax),%eax
f0102d87:	83 ec 08             	sub    $0x8,%esp
f0102d8a:	68 31 5a 13 f0       	push   $0xf0135a31
f0102d8f:	50                   	push   %eax
f0102d90:	e8 04 e8 02 00       	call   f0131599 <strcmp>
f0102d95:	83 c4 10             	add    $0x10,%esp
f0102d98:	85 c0                	test   %eax,%eax
f0102d9a:	75 07                	jne    f0102da3 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d9c:	e8 ba eb 00 00       	call   f011195b <test_pt_clear_page_table_entry_invalid_va>
f0102da1:	eb 22                	jmp    f0102dc5 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102da3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102da6:	83 c0 04             	add    $0x4,%eax
f0102da9:	8b 00                	mov    (%eax),%eax
f0102dab:	83 ec 08             	sub    $0x8,%esp
f0102dae:	68 38 5a 13 f0       	push   $0xf0135a38
f0102db3:	50                   	push   %eax
f0102db4:	e8 e0 e7 02 00       	call   f0131599 <strcmp>
f0102db9:	83 c4 10             	add    $0x10,%esp
f0102dbc:	85 c0                	test   %eax,%eax
f0102dbe:	75 05                	jne    f0102dc5 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102dc0:	e8 ce eb 00 00       	call   f0111993 <test_virtual_to_physical>
	}
	return 0;
f0102dc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dca:	c9                   	leave  
f0102dcb:	c3                   	ret    

f0102dcc <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102dcc:	55                   	push   %ebp
f0102dcd:	89 e5                	mov    %esp,%ebp
f0102dcf:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd5:	83 c0 08             	add    $0x8,%eax
f0102dd8:	8b 00                	mov    (%eax),%eax
f0102dda:	83 ec 08             	sub    $0x8,%esp
f0102ddd:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0102de2:	50                   	push   %eax
f0102de3:	e8 b1 e7 02 00       	call   f0131599 <strcmp>
f0102de8:	83 c4 10             	add    $0x10,%esp
f0102deb:	85 c0                	test   %eax,%eax
f0102ded:	75 20                	jne    f0102e0f <command_test_kheap+0x43>
f0102def:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102df3:	74 1a                	je     f0102e0f <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102df5:	83 ec 0c             	sub    $0xc,%esp
f0102df8:	68 44 5a 13 f0       	push   $0xf0135a44
f0102dfd:	e8 0c df ff ff       	call   f0100d0e <cprintf>
f0102e02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e0a:	e9 33 03 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e12:	83 c0 08             	add    $0x8,%eax
f0102e15:	8b 00                	mov    (%eax),%eax
f0102e17:	83 ec 08             	sub    $0x8,%esp
f0102e1a:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0102e1f:	50                   	push   %eax
f0102e20:	e8 74 e7 02 00       	call   f0131599 <strcmp>
f0102e25:	83 c4 10             	add    $0x10,%esp
f0102e28:	85 c0                	test   %eax,%eax
f0102e2a:	74 20                	je     f0102e4c <command_test_kheap+0x80>
f0102e2c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e30:	74 1a                	je     f0102e4c <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e32:	83 ec 0c             	sub    $0xc,%esp
f0102e35:	68 94 5a 13 f0       	push   $0xf0135a94
f0102e3a:	e8 cf de ff ff       	call   f0100d0e <cprintf>
f0102e3f:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e42:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e47:	e9 f6 02 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4f:	83 c0 04             	add    $0x4,%eax
f0102e52:	8b 00                	mov    (%eax),%eax
f0102e54:	83 ec 08             	sub    $0x8,%esp
f0102e57:	68 40 59 13 f0       	push   $0xf0135940
f0102e5c:	50                   	push   %eax
f0102e5d:	e8 37 e7 02 00       	call   f0131599 <strcmp>
f0102e62:	83 c4 10             	add    $0x10,%esp
f0102e65:	85 c0                	test   %eax,%eax
f0102e67:	74 1d                	je     f0102e86 <command_test_kheap+0xba>
f0102e69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6c:	83 c0 04             	add    $0x4,%eax
f0102e6f:	8b 00                	mov    (%eax),%eax
f0102e71:	83 ec 08             	sub    $0x8,%esp
f0102e74:	68 43 59 13 f0       	push   $0xf0135943
f0102e79:	50                   	push   %eax
f0102e7a:	e8 1a e7 02 00       	call   f0131599 <strcmp>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	85 c0                	test   %eax,%eax
f0102e84:	75 1a                	jne    f0102ea0 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e86:	e8 60 e0 ff ff       	call   f0100eeb <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e8b:	83 ec 0c             	sub    $0xc,%esp
f0102e8e:	68 dc 54 13 f0       	push   $0xf01354dc
f0102e93:	e8 76 de ff ff       	call   f0100d0e <cprintf>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	e9 a0 00 00 00       	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea3:	83 c0 04             	add    $0x4,%eax
f0102ea6:	8b 00                	mov    (%eax),%eax
f0102ea8:	83 ec 08             	sub    $0x8,%esp
f0102eab:	68 46 59 13 f0       	push   $0xf0135946
f0102eb0:	50                   	push   %eax
f0102eb1:	e8 e3 e6 02 00       	call   f0131599 <strcmp>
f0102eb6:	83 c4 10             	add    $0x10,%esp
f0102eb9:	85 c0                	test   %eax,%eax
f0102ebb:	74 1d                	je     f0102eda <command_test_kheap+0x10e>
f0102ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ec0:	83 c0 04             	add    $0x4,%eax
f0102ec3:	8b 00                	mov    (%eax),%eax
f0102ec5:	83 ec 08             	sub    $0x8,%esp
f0102ec8:	68 49 59 13 f0       	push   $0xf0135949
f0102ecd:	50                   	push   %eax
f0102ece:	e8 c6 e6 02 00       	call   f0131599 <strcmp>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	85 c0                	test   %eax,%eax
f0102ed8:	75 17                	jne    f0102ef1 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102eda:	e8 1c e0 ff ff       	call   f0100efb <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102edf:	83 ec 0c             	sub    $0xc,%esp
f0102ee2:	68 0c 55 13 f0       	push   $0xf013550c
f0102ee7:	e8 22 de ff ff       	call   f0100d0e <cprintf>
f0102eec:	83 c4 10             	add    $0x10,%esp
f0102eef:	eb 4f                	jmp    f0102f40 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef4:	83 c0 04             	add    $0x4,%eax
f0102ef7:	8b 00                	mov    (%eax),%eax
f0102ef9:	83 ec 08             	sub    $0x8,%esp
f0102efc:	68 4c 59 13 f0       	push   $0xf013594c
f0102f01:	50                   	push   %eax
f0102f02:	e8 92 e6 02 00       	call   f0131599 <strcmp>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	85 c0                	test   %eax,%eax
f0102f0c:	74 1d                	je     f0102f2b <command_test_kheap+0x15f>
f0102f0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f11:	83 c0 04             	add    $0x4,%eax
f0102f14:	8b 00                	mov    (%eax),%eax
f0102f16:	83 ec 08             	sub    $0x8,%esp
f0102f19:	68 4f 59 13 f0       	push   $0xf013594f
f0102f1e:	50                   	push   %eax
f0102f1f:	e8 75 e6 02 00       	call   f0131599 <strcmp>
f0102f24:	83 c4 10             	add    $0x10,%esp
f0102f27:	85 c0                	test   %eax,%eax
f0102f29:	75 15                	jne    f0102f40 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f2b:	e8 db df ff ff       	call   f0100f0b <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f30:	83 ec 0c             	sub    $0xc,%esp
f0102f33:	68 38 55 13 f0       	push   $0xf0135538
f0102f38:	e8 d1 dd ff ff       	call   f0100d0e <cprintf>
f0102f3d:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f43:	83 c0 08             	add    $0x8,%eax
f0102f46:	8b 00                	mov    (%eax),%eax
f0102f48:	83 ec 08             	sub    $0x8,%esp
f0102f4b:	68 3c 5a 13 f0       	push   $0xf0135a3c
f0102f50:	50                   	push   %eax
f0102f51:	e8 43 e6 02 00       	call   f0131599 <strcmp>
f0102f56:	83 c4 10             	add    $0x10,%esp
f0102f59:	85 c0                	test   %eax,%eax
f0102f5b:	0f 85 13 01 00 00    	jne    f0103074 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f64:	83 c0 0c             	add    $0xc,%eax
f0102f67:	8b 00                	mov    (%eax),%eax
f0102f69:	83 ec 04             	sub    $0x4,%esp
f0102f6c:	6a 0a                	push   $0xa
f0102f6e:	6a 00                	push   $0x0
f0102f70:	50                   	push   %eax
f0102f71:	e8 77 e8 02 00       	call   f01317ed <strtol>
f0102f76:	83 c4 10             	add    $0x10,%esp
f0102f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f7c:	e8 be df ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f0102f81:	84 c0                	test   %al,%al
f0102f83:	74 54                	je     f0102fd9 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f89:	75 1a                	jne    f0102fa5 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 b0 57 13 f0       	push   $0xf01357b0
f0102f93:	e8 76 dd ff ff       	call   f0100d0e <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fa0:	e9 9d 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fa5:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fa9:	75 0a                	jne    f0102fb5 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fab:	e8 cc 49 01 00       	call   f011797c <test_kmalloc>
f0102fb0:	e9 b5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fb5:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fb9:	75 0a                	jne    f0102fc5 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fbb:	e8 45 98 01 00       	call   f011c805 <test_kmalloc_firstfit1>
f0102fc0:	e9 a5 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fc5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fc9:	0f 85 9b 00 00 00    	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fcf:	e8 d3 ab 01 00       	call   f011dba7 <test_kmalloc_firstfit2>
f0102fd4:	e9 91 00 00 00       	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fd9:	e8 76 df ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0102fde:	84 c0                	test   %al,%al
f0102fe0:	74 47                	je     f0103029 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe6:	75 1a                	jne    f0103002 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fe8:	83 ec 0c             	sub    $0xc,%esp
f0102feb:	68 00 58 13 f0       	push   $0xf0135800
f0102ff0:	e8 19 dd ff ff       	call   f0100d0e <cprintf>
f0102ff5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102ff8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ffd:	e9 40 01 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0103002:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103006:	75 07                	jne    f010300f <command_test_kheap+0x243>
				test_kmalloc();
f0103008:	e8 6f 49 01 00       	call   f011797c <test_kmalloc>
f010300d:	eb 5b                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 2)
f010300f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103013:	75 07                	jne    f010301c <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103015:	e8 b5 72 01 00       	call   f011a2cf <test_kmalloc_bestfit1>
f010301a:	eb 4e                	jmp    f010306a <command_test_kheap+0x29e>
			else if (testNum == 3)
f010301c:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103020:	75 48                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103022:	e8 fe 84 01 00       	call   f011b525 <test_kmalloc_bestfit2>
f0103027:	eb 41                	jmp    f010306a <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103029:	e8 3b df ff ff       	call   f0100f69 <isKHeapPlacementStrategyNEXTFIT>
f010302e:	84 c0                	test   %al,%al
f0103030:	74 38                	je     f010306a <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103036:	75 1a                	jne    f0103052 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103038:	83 ec 0c             	sub    $0xc,%esp
f010303b:	68 50 58 13 f0       	push   $0xf0135850
f0103040:	e8 c9 dc ff ff       	call   f0100d0e <cprintf>
f0103045:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103048:	b8 00 00 00 00       	mov    $0x0,%eax
f010304d:	e9 f0 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103052:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103056:	75 07                	jne    f010305f <command_test_kheap+0x293>
				test_kmalloc();
f0103058:	e8 1f 49 01 00       	call   f011797c <test_kmalloc>
f010305d:	eb 0b                	jmp    f010306a <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010305f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0103063:	75 05                	jne    f010306a <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103065:	e8 70 5b 01 00       	call   f0118bda <test_kmalloc_nextfit>
		}
		return 0;
f010306a:	b8 00 00 00 00       	mov    $0x0,%eax
f010306f:	e9 ce 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0103074:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103077:	83 c0 08             	add    $0x8,%eax
f010307a:	8b 00                	mov    (%eax),%eax
f010307c:	83 ec 08             	sub    $0x8,%esp
f010307f:	68 d8 5a 13 f0       	push   $0xf0135ad8
f0103084:	50                   	push   %eax
f0103085:	e8 0f e5 02 00       	call   f0131599 <strcmp>
f010308a:	83 c4 10             	add    $0x10,%esp
f010308d:	85 c0                	test   %eax,%eax
f010308f:	75 28                	jne    f01030b9 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103091:	e8 be de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f0103096:	84 c0                	test   %al,%al
f0103098:	75 09                	jne    f01030a3 <command_test_kheap+0x2d7>
f010309a:	e8 a0 de ff ff       	call   f0100f3f <isKHeapPlacementStrategyFIRSTFIT>
f010309f:	84 c0                	test   %al,%al
f01030a1:	74 07                	je     f01030aa <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030a3:	e8 36 f1 01 00       	call   f01221de <test_kfree_bestfirstfit>
f01030a8:	eb 05                	jmp    f01030af <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030aa:	e8 dd cf 01 00       	call   f012008c <test_kfree>
		}
		return 0;
f01030af:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b4:	e9 89 00 00 00       	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030bc:	83 c0 08             	add    $0x8,%eax
f01030bf:	8b 00                	mov    (%eax),%eax
f01030c1:	83 ec 08             	sub    $0x8,%esp
f01030c4:	68 de 5a 13 f0       	push   $0xf0135ade
f01030c9:	50                   	push   %eax
f01030ca:	e8 ca e4 02 00       	call   f0131599 <strcmp>
f01030cf:	83 c4 10             	add    $0x10,%esp
f01030d2:	85 c0                	test   %eax,%eax
f01030d4:	75 0c                	jne    f01030e2 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030d6:	e8 ff 0a 02 00       	call   f0123bda <test_kheap_phys_addr>
		return 0;
f01030db:	b8 00 00 00 00       	mov    $0x0,%eax
f01030e0:	eb 60                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030e5:	83 c0 08             	add    $0x8,%eax
f01030e8:	8b 00                	mov    (%eax),%eax
f01030ea:	83 ec 08             	sub    $0x8,%esp
f01030ed:	68 e8 5a 13 f0       	push   $0xf0135ae8
f01030f2:	50                   	push   %eax
f01030f3:	e8 a1 e4 02 00       	call   f0131599 <strcmp>
f01030f8:	83 c4 10             	add    $0x10,%esp
f01030fb:	85 c0                	test   %eax,%eax
f01030fd:	75 0c                	jne    f010310b <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030ff:	e8 a6 1f 02 00       	call   f01250aa <test_kheap_virt_addr>
		return 0;
f0103104:	b8 00 00 00 00       	mov    $0x0,%eax
f0103109:	eb 37                	jmp    f0103142 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010310b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010310e:	83 c0 08             	add    $0x8,%eax
f0103111:	8b 00                	mov    (%eax),%eax
f0103113:	83 ec 08             	sub    $0x8,%esp
f0103116:	68 f2 5a 13 f0       	push   $0xf0135af2
f010311b:	50                   	push   %eax
f010311c:	e8 78 e4 02 00       	call   f0131599 <strcmp>
f0103121:	83 c4 10             	add    $0x10,%esp
f0103124:	85 c0                	test   %eax,%eax
f0103126:	75 15                	jne    f010313d <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103128:	e8 27 de ff ff       	call   f0100f54 <isKHeapPlacementStrategyBESTFIT>
f010312d:	84 c0                	test   %al,%al
f010312f:	74 05                	je     f0103136 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103131:	e8 18 ae 02 00       	call   f012df4e <test_krealloc_BF>
		}
		return 0;
f0103136:	b8 00 00 00 00       	mov    $0x0,%eax
f010313b:	eb 05                	jmp    f0103142 <command_test_kheap+0x376>
	}
	return 0;
f010313d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103142:	c9                   	leave  
f0103143:	c3                   	ret    

f0103144 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103144:	55                   	push   %ebp
f0103145:	89 e5                	mov    %esp,%ebp
f0103147:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010314a:	8b 45 08             	mov    0x8(%ebp),%eax
f010314d:	05 00 14 00 00       	add    $0x1400,%eax
f0103152:	c1 e0 03             	shl    $0x3,%eax
f0103155:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103158:	83 ec 04             	sub    $0x4,%esp
f010315b:	6a 08                	push   $0x8
f010315d:	ff 75 0c             	pushl  0xc(%ebp)
f0103160:	ff 75 f4             	pushl  -0xc(%ebp)
f0103163:	e8 78 ea 02 00       	call   f0131be0 <ide_read>
f0103168:	83 c4 10             	add    $0x10,%esp
f010316b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010316e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103171:	c9                   	leave  
f0103172:	c3                   	ret    

f0103173 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103173:	55                   	push   %ebp
f0103174:	89 e5                	mov    %esp,%ebp
f0103176:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103179:	8b 45 08             	mov    0x8(%ebp),%eax
f010317c:	05 00 14 00 00       	add    $0x1400,%eax
f0103181:	c1 e0 03             	shl    $0x3,%eax
f0103184:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103187:	83 ec 04             	sub    $0x4,%esp
f010318a:	6a 08                	push   $0x8
f010318c:	ff 75 0c             	pushl  0xc(%ebp)
f010318f:	ff 75 f4             	pushl  -0xc(%ebp)
f0103192:	e8 89 eb 02 00       	call   f0131d20 <ide_write>
f0103197:	83 c4 10             	add    $0x10,%esp
f010319a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010319d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031a1:	74 14                	je     f01031b7 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031a3:	83 ec 04             	sub    $0x4,%esp
f01031a6:	68 fc 5a 13 f0       	push   $0xf0135afc
f01031ab:	6a 2e                	push   $0x2e
f01031ad:	68 13 5b 13 f0       	push   $0xf0135b13
f01031b2:	e8 4e d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031ba:	c9                   	leave  
f01031bb:	c3                   	ret    

f01031bc <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031bc:	55                   	push   %ebp
f01031bd:	89 e5                	mov    %esp,%ebp
f01031bf:	53                   	push   %ebx
f01031c0:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031c3:	c7 05 b8 1d 88 f0 00 	movl   $0x0,0xf0881db8
f01031ca:	00 00 00 
f01031cd:	c7 05 bc 1d 88 f0 00 	movl   $0x0,0xf0881dbc
f01031d4:	00 00 00 
f01031d7:	c7 05 c4 1d 88 f0 00 	movl   $0x0,0xf0881dc4
f01031de:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031e1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031e8:	e9 e8 00 00 00       	jmp    f01032d5 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031ed:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f01031f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f6:	89 d0                	mov    %edx,%eax
f01031f8:	01 c0                	add    %eax,%eax
f01031fa:	01 d0                	add    %edx,%eax
f01031fc:	c1 e0 03             	shl    $0x3,%eax
f01031ff:	01 c8                	add    %ecx,%eax
f0103201:	83 ec 0c             	sub    $0xc,%esp
f0103204:	50                   	push   %eax
f0103205:	e8 cd 36 00 00       	call   f01068d7 <initialize_frame_info>
f010320a:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010320d:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f0103213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103216:	89 d0                	mov    %edx,%eax
f0103218:	01 c0                	add    %eax,%eax
f010321a:	01 d0                	add    %edx,%eax
f010321c:	c1 e0 03             	shl    $0x3,%eax
f010321f:	01 c8                	add    %ecx,%eax
f0103221:	85 c0                	test   %eax,%eax
f0103223:	75 14                	jne    f0103239 <initialize_disk_page_file+0x7d>
f0103225:	83 ec 04             	sub    $0x4,%esp
f0103228:	68 30 5b 13 f0       	push   $0xf0135b30
f010322d:	6a 59                	push   $0x59
f010322f:	68 13 5b 13 f0       	push   $0xf0135b13
f0103234:	e8 cc cf ff ff       	call   f0100205 <_panic>
f0103239:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f010323f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103242:	89 d0                	mov    %edx,%eax
f0103244:	01 c0                	add    %eax,%eax
f0103246:	01 d0                	add    %edx,%eax
f0103248:	c1 e0 03             	shl    $0x3,%eax
f010324b:	01 c8                	add    %ecx,%eax
f010324d:	8b 15 b8 1d 88 f0    	mov    0xf0881db8,%edx
f0103253:	89 10                	mov    %edx,(%eax)
f0103255:	8b 00                	mov    (%eax),%eax
f0103257:	85 c0                	test   %eax,%eax
f0103259:	74 1f                	je     f010327a <initialize_disk_page_file+0xbe>
f010325b:	8b 15 b8 1d 88 f0    	mov    0xf0881db8,%edx
f0103261:	8b 1d dc 1c 88 f0    	mov    0xf0881cdc,%ebx
f0103267:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010326a:	89 c8                	mov    %ecx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 c8                	add    %ecx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 d8                	add    %ebx,%eax
f0103275:	89 42 04             	mov    %eax,0x4(%edx)
f0103278:	eb 19                	jmp    f0103293 <initialize_disk_page_file+0xd7>
f010327a:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 bc 1d 88 f0       	mov    %eax,0xf0881dbc
f0103293:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	a3 b8 1d 88 f0       	mov    %eax,0xf0881db8
f01032ac:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f01032b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b5:	89 d0                	mov    %edx,%eax
f01032b7:	01 c0                	add    %eax,%eax
f01032b9:	01 d0                	add    %edx,%eax
f01032bb:	c1 e0 03             	shl    $0x3,%eax
f01032be:	01 c8                	add    %ecx,%eax
f01032c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032c7:	a1 c4 1d 88 f0       	mov    0xf0881dc4,%eax
f01032cc:	40                   	inc    %eax
f01032cd:	a3 c4 1d 88 f0       	mov    %eax,0xf0881dc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032d2:	ff 45 f4             	incl   -0xc(%ebp)
f01032d5:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032dc:	0f 8e 0b ff ff ff    	jle    f01031ed <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032e2:	90                   	nop
f01032e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032e6:	c9                   	leave  
f01032e7:	c3                   	ret    

f01032e8 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032e8:	55                   	push   %ebp
f01032e9:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01032ee:	8b 15 dc 1c 88 f0    	mov    0xf0881cdc,%edx
f01032f4:	29 d0                	sub    %edx,%eax
f01032f6:	c1 f8 03             	sar    $0x3,%eax
f01032f9:	89 c2                	mov    %eax,%edx
f01032fb:	89 d0                	mov    %edx,%eax
f01032fd:	c1 e0 02             	shl    $0x2,%eax
f0103300:	01 d0                	add    %edx,%eax
f0103302:	c1 e0 02             	shl    $0x2,%eax
f0103305:	01 d0                	add    %edx,%eax
f0103307:	c1 e0 02             	shl    $0x2,%eax
f010330a:	01 d0                	add    %edx,%eax
f010330c:	89 c1                	mov    %eax,%ecx
f010330e:	c1 e1 08             	shl    $0x8,%ecx
f0103311:	01 c8                	add    %ecx,%eax
f0103313:	89 c1                	mov    %eax,%ecx
f0103315:	c1 e1 10             	shl    $0x10,%ecx
f0103318:	01 c8                	add    %ecx,%eax
f010331a:	01 c0                	add    %eax,%eax
f010331c:	01 d0                	add    %edx,%eax
}
f010331e:	5d                   	pop    %ebp
f010331f:	c3                   	ret    

f0103320 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103320:	55                   	push   %ebp
f0103321:	89 e5                	mov    %esp,%ebp
f0103323:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103326:	a1 b8 1d 88 f0       	mov    0xf0881db8,%eax
f010332b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010332e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103332:	75 0a                	jne    f010333e <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103334:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103339:	e9 a7 00 00 00       	jmp    f01033e5 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010333e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103342:	75 14                	jne    f0103358 <allocate_disk_frame+0x38>
f0103344:	83 ec 04             	sub    $0x4,%esp
f0103347:	68 53 5b 13 f0       	push   $0xf0135b53
f010334c:	6a 78                	push   $0x78
f010334e:	68 13 5b 13 f0       	push   $0xf0135b13
f0103353:	e8 ad ce ff ff       	call   f0100205 <_panic>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 00                	mov    (%eax),%eax
f010335d:	85 c0                	test   %eax,%eax
f010335f:	74 10                	je     f0103371 <allocate_disk_frame+0x51>
f0103361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103364:	8b 00                	mov    (%eax),%eax
f0103366:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103369:	8b 52 04             	mov    0x4(%edx),%edx
f010336c:	89 50 04             	mov    %edx,0x4(%eax)
f010336f:	eb 0b                	jmp    f010337c <allocate_disk_frame+0x5c>
f0103371:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103374:	8b 40 04             	mov    0x4(%eax),%eax
f0103377:	a3 bc 1d 88 f0       	mov    %eax,0xf0881dbc
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 40 04             	mov    0x4(%eax),%eax
f0103382:	85 c0                	test   %eax,%eax
f0103384:	74 0f                	je     f0103395 <allocate_disk_frame+0x75>
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	8b 40 04             	mov    0x4(%eax),%eax
f010338c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010338f:	8b 12                	mov    (%edx),%edx
f0103391:	89 10                	mov    %edx,(%eax)
f0103393:	eb 0a                	jmp    f010339f <allocate_disk_frame+0x7f>
f0103395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103398:	8b 00                	mov    (%eax),%eax
f010339a:	a3 b8 1d 88 f0       	mov    %eax,0xf0881db8
f010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033ab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033b2:	a1 c4 1d 88 f0       	mov    0xf0881dc4,%eax
f01033b7:	48                   	dec    %eax
f01033b8:	a3 c4 1d 88 f0       	mov    %eax,0xf0881dc4
	initialize_frame_info(ptr_frame_info);
f01033bd:	83 ec 0c             	sub    $0xc,%esp
f01033c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01033c3:	e8 0f 35 00 00       	call   f01068d7 <initialize_frame_info>
f01033c8:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033cb:	83 ec 0c             	sub    $0xc,%esp
f01033ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01033d1:	e8 12 ff ff ff       	call   f01032e8 <to_disk_frame_number>
f01033d6:	83 c4 10             	add    $0x10,%esp
f01033d9:	89 c2                	mov    %eax,%edx
f01033db:	8b 45 08             	mov    0x8(%ebp),%eax
f01033de:	89 10                	mov    %edx,(%eax)
	return 0;
f01033e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e5:	c9                   	leave  
f01033e6:	c3                   	ret    

f01033e7 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033e7:	55                   	push   %ebp
f01033e8:	89 e5                	mov    %esp,%ebp
f01033ea:	53                   	push   %ebx
f01033eb:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033f2:	0f 84 ca 00 00 00    	je     f01034c2 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033f8:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f01033fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0103401:	89 d0                	mov    %edx,%eax
f0103403:	01 c0                	add    %eax,%eax
f0103405:	01 d0                	add    %edx,%eax
f0103407:	c1 e0 03             	shl    $0x3,%eax
f010340a:	01 c8                	add    %ecx,%eax
f010340c:	85 c0                	test   %eax,%eax
f010340e:	75 17                	jne    f0103427 <free_disk_frame+0x40>
f0103410:	83 ec 04             	sub    $0x4,%esp
f0103413:	68 30 5b 13 f0       	push   $0xf0135b30
f0103418:	68 85 00 00 00       	push   $0x85
f010341d:	68 13 5b 13 f0       	push   $0xf0135b13
f0103422:	e8 de cd ff ff       	call   f0100205 <_panic>
f0103427:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f010342d:	8b 55 08             	mov    0x8(%ebp),%edx
f0103430:	89 d0                	mov    %edx,%eax
f0103432:	01 c0                	add    %eax,%eax
f0103434:	01 d0                	add    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 c8                	add    %ecx,%eax
f010343b:	8b 15 b8 1d 88 f0    	mov    0xf0881db8,%edx
f0103441:	89 10                	mov    %edx,(%eax)
f0103443:	8b 00                	mov    (%eax),%eax
f0103445:	85 c0                	test   %eax,%eax
f0103447:	74 1f                	je     f0103468 <free_disk_frame+0x81>
f0103449:	8b 15 b8 1d 88 f0    	mov    0xf0881db8,%edx
f010344f:	8b 1d dc 1c 88 f0    	mov    0xf0881cdc,%ebx
f0103455:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103458:	89 c8                	mov    %ecx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 c8                	add    %ecx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 d8                	add    %ebx,%eax
f0103463:	89 42 04             	mov    %eax,0x4(%edx)
f0103466:	eb 19                	jmp    f0103481 <free_disk_frame+0x9a>
f0103468:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 bc 1d 88 f0       	mov    %eax,0xf0881dbc
f0103481:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	a3 b8 1d 88 f0       	mov    %eax,0xf0881db8
f010349a:	8b 0d dc 1c 88 f0    	mov    0xf0881cdc,%ecx
f01034a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a3:	89 d0                	mov    %edx,%eax
f01034a5:	01 c0                	add    %eax,%eax
f01034a7:	01 d0                	add    %edx,%eax
f01034a9:	c1 e0 03             	shl    $0x3,%eax
f01034ac:	01 c8                	add    %ecx,%eax
f01034ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034b5:	a1 c4 1d 88 f0       	mov    0xf0881dc4,%eax
f01034ba:	40                   	inc    %eax
f01034bb:	a3 c4 1d 88 f0       	mov    %eax,0xf0881dc4
f01034c0:	eb 01                	jmp    f01034c3 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034c2:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034c6:	c9                   	leave  
f01034c7:	c3                   	ret    

f01034c8 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034c8:	55                   	push   %ebp
f01034c9:	89 e5                	mov    %esp,%ebp
f01034cb:	53                   	push   %ebx
f01034cc:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034d2:	c1 e8 16             	shr    $0x16,%eax
f01034d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	8b 00                	mov    (%eax),%eax
f01034e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034e6:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034ed:	77 1d                	ja     f010350c <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034f7:	83 ec 0c             	sub    $0xc,%esp
f01034fa:	50                   	push   %eax
f01034fb:	e8 6c 47 00 00       	call   f0107c6c <kheap_virtual_address>
f0103500:	83 c4 10             	add    $0x10,%esp
f0103503:	89 c2                	mov    %eax,%edx
f0103505:	8b 45 14             	mov    0x14(%ebp),%eax
f0103508:	89 10                	mov    %edx,(%eax)
f010350a:	eb 44                	jmp    f0103550 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103514:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103517:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010351a:	c1 e8 0c             	shr    $0xc,%eax
f010351d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103520:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0103525:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103528:	72 17                	jb     f0103541 <get_disk_page_table+0x79>
f010352a:	ff 75 f0             	pushl  -0x10(%ebp)
f010352d:	68 74 5b 13 f0       	push   $0xf0135b74
f0103532:	68 92 00 00 00       	push   $0x92
f0103537:	68 13 5b 13 f0       	push   $0xf0135b13
f010353c:	e8 c4 cc ff ff       	call   f0100205 <_panic>
f0103541:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103544:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103549:	89 c2                	mov    %eax,%edx
f010354b:	8b 45 14             	mov    0x14(%ebp),%eax
f010354e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103554:	0f 85 80 00 00 00    	jne    f01035da <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010355a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010355e:	74 6a                	je     f01035ca <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103560:	83 ec 0c             	sub    $0xc,%esp
f0103563:	68 00 10 00 00       	push   $0x1000
f0103568:	e8 0d 45 00 00       	call   f0107a7a <kmalloc>
f010356d:	83 c4 10             	add    $0x10,%esp
f0103570:	89 c2                	mov    %eax,%edx
f0103572:	8b 45 14             	mov    0x14(%ebp),%eax
f0103575:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103577:	8b 45 14             	mov    0x14(%ebp),%eax
f010357a:	8b 00                	mov    (%eax),%eax
f010357c:	85 c0                	test   %eax,%eax
f010357e:	75 07                	jne    f0103587 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103580:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103585:	eb 58                	jmp    f01035df <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103587:	8b 45 0c             	mov    0xc(%ebp),%eax
f010358a:	c1 e8 16             	shr    $0x16,%eax
f010358d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103594:	8b 45 08             	mov    0x8(%ebp),%eax
f0103597:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010359a:	8b 45 14             	mov    0x14(%ebp),%eax
f010359d:	8b 00                	mov    (%eax),%eax
f010359f:	83 ec 0c             	sub    $0xc,%esp
f01035a2:	50                   	push   %eax
f01035a3:	e8 f0 46 00 00       	call   f0107c98 <kheap_physical_address>
f01035a8:	83 c4 10             	add    $0x10,%esp
f01035ab:	83 c8 01             	or     $0x1,%eax
f01035ae:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035b0:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b3:	8b 00                	mov    (%eax),%eax
f01035b5:	83 ec 04             	sub    $0x4,%esp
f01035b8:	68 00 10 00 00       	push   $0x1000
f01035bd:	6a 00                	push   $0x0
f01035bf:	50                   	push   %eax
f01035c0:	e8 b6 e0 02 00       	call   f013167b <memset>
f01035c5:	83 c4 10             	add    $0x10,%esp
f01035c8:	eb 10                	jmp    f01035da <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035ca:	8b 45 14             	mov    0x14(%ebp),%eax
f01035cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035d3:	b8 00 00 00 00       	mov    $0x0,%eax
f01035d8:	eb 05                	jmp    f01035df <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035e2:	c9                   	leave  
f01035e3:	c3                   	ret    

f01035e4 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035e4:	55                   	push   %ebp
f01035e5:	89 e5                	mov    %esp,%ebp
f01035e7:	83 ec 28             	sub    $0x28,%esp
f01035ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01035ed:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035f0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035f4:	74 75                	je     f010366b <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035f6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103600:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103605:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010360b:	ba 00 00 00 00       	mov    $0x0,%edx
f0103610:	f7 75 f4             	divl   -0xc(%ebp)
f0103613:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103616:	29 d0                	sub    %edx,%eax
f0103618:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361b:	73 32                	jae    f010364f <pf_add_empty_env_page+0x6b>
f010361d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103620:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103626:	b8 00 00 00 00       	mov    $0x0,%eax
f010362b:	29 d0                	sub    %edx,%eax
f010362d:	c1 e0 0c             	shl    $0xc,%eax
f0103630:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103635:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103638:	76 15                	jbe    f010364f <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010363a:	8b 45 08             	mov    0x8(%ebp),%eax
f010363d:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103643:	8d 50 01             	lea    0x1(%eax),%edx
f0103646:	8b 45 08             	mov    0x8(%ebp),%eax
f0103649:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010364f:	a1 60 1d 88 f0       	mov    0xf0881d60,%eax
f0103654:	83 ec 04             	sub    $0x4,%esp
f0103657:	50                   	push   %eax
f0103658:	ff 75 0c             	pushl  0xc(%ebp)
f010365b:	ff 75 08             	pushl  0x8(%ebp)
f010365e:	e8 b2 00 00 00       	call   f0103715 <pf_add_env_page>
f0103663:	83 c4 10             	add    $0x10,%esp
f0103666:	e9 a8 00 00 00       	jmp    f0103713 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010366b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103672:	76 19                	jbe    f010368d <pf_add_empty_env_page+0xa9>
f0103674:	68 a4 5b 13 f0       	push   $0xf0135ba4
f0103679:	68 ca 5b 13 f0       	push   $0xf0135bca
f010367e:	68 d1 00 00 00       	push   $0xd1
f0103683:	68 13 5b 13 f0       	push   $0xf0135b13
f0103688:	e8 78 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010368d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103690:	83 c0 64             	add    $0x64,%eax
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	50                   	push   %eax
f0103697:	ff 75 08             	pushl  0x8(%ebp)
f010369a:	e8 10 06 00 00       	call   f0103caf <get_disk_page_directory>
f010369f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036a5:	8b 40 64             	mov    0x64(%eax),%eax
f01036a8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036ab:	52                   	push   %edx
f01036ac:	6a 01                	push   $0x1
f01036ae:	ff 75 0c             	pushl  0xc(%ebp)
f01036b1:	50                   	push   %eax
f01036b2:	e8 11 fe ff ff       	call   f01034c8 <get_disk_page_table>
f01036b7:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036c0:	c1 ea 0c             	shr    $0xc,%edx
f01036c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036c9:	c1 e2 02             	shl    $0x2,%edx
f01036cc:	01 d0                	add    %edx,%eax
f01036ce:	8b 00                	mov    (%eax),%eax
f01036d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d6:	85 c0                	test   %eax,%eax
f01036d8:	75 34                	jne    f010370e <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036da:	83 ec 0c             	sub    $0xc,%esp
f01036dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036e0:	50                   	push   %eax
f01036e1:	e8 3a fc ff ff       	call   f0103320 <allocate_disk_frame>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036ec:	75 07                	jne    f01036f5 <pf_add_empty_env_page+0x111>
f01036ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036f3:	eb 1e                	jmp    f0103713 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036fb:	c1 ea 0c             	shr    $0xc,%edx
f01036fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103704:	c1 e2 02             	shl    $0x2,%edx
f0103707:	01 c2                	add    %eax,%edx
f0103709:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010370c:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010370e:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103713:	c9                   	leave  
f0103714:	c3                   	ret    

f0103715 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103715:	55                   	push   %ebp
f0103716:	89 e5                	mov    %esp,%ebp
f0103718:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010371b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103722:	76 19                	jbe    f010373d <pf_add_env_page+0x28>
f0103724:	68 a4 5b 13 f0       	push   $0xf0135ba4
f0103729:	68 ca 5b 13 f0       	push   $0xf0135bca
f010372e:	68 e6 00 00 00       	push   $0xe6
f0103733:	68 13 5b 13 f0       	push   $0xf0135b13
f0103738:	e8 c8 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010373d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103740:	83 c0 64             	add    $0x64,%eax
f0103743:	83 ec 08             	sub    $0x8,%esp
f0103746:	50                   	push   %eax
f0103747:	ff 75 08             	pushl  0x8(%ebp)
f010374a:	e8 60 05 00 00       	call   f0103caf <get_disk_page_directory>
f010374f:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103752:	8b 45 08             	mov    0x8(%ebp),%eax
f0103755:	8b 40 64             	mov    0x64(%eax),%eax
f0103758:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010375b:	52                   	push   %edx
f010375c:	6a 01                	push   $0x1
f010375e:	ff 75 0c             	pushl  0xc(%ebp)
f0103761:	50                   	push   %eax
f0103762:	e8 61 fd ff ff       	call   f01034c8 <get_disk_page_table>
f0103767:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010376a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010376d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103770:	c1 ea 0c             	shr    $0xc,%edx
f0103773:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103779:	c1 e2 02             	shl    $0x2,%edx
f010377c:	01 d0                	add    %edx,%eax
f010377e:	8b 00                	mov    (%eax),%eax
f0103780:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103783:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103786:	85 c0                	test   %eax,%eax
f0103788:	75 34                	jne    f01037be <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010378a:	83 ec 0c             	sub    $0xc,%esp
f010378d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103790:	50                   	push   %eax
f0103791:	e8 8a fb ff ff       	call   f0103320 <allocate_disk_frame>
f0103796:	83 c4 10             	add    $0x10,%esp
f0103799:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010379c:	75 07                	jne    f01037a5 <pf_add_env_page+0x90>
f010379e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037a3:	eb 31                	jmp    f01037d6 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037ab:	c1 ea 0c             	shr    $0xc,%edx
f01037ae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b4:	c1 e2 02             	shl    $0x2,%edx
f01037b7:	01 c2                	add    %eax,%edx
f01037b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037bc:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037c1:	83 ec 08             	sub    $0x8,%esp
f01037c4:	ff 75 10             	pushl  0x10(%ebp)
f01037c7:	50                   	push   %eax
f01037c8:	e8 a6 f9 ff ff       	call   f0103173 <write_disk_page>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037d6:	c9                   	leave  
f01037d7:	c3                   	ret    

f01037d8 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037de:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037e5:	76 19                	jbe    f0103800 <pf_update_env_page+0x28>
f01037e7:	68 a4 5b 13 f0       	push   $0xf0135ba4
f01037ec:	68 ca 5b 13 f0       	push   $0xf0135bca
f01037f1:	68 08 01 00 00       	push   $0x108
f01037f6:	68 13 5b 13 f0       	push   $0xf0135b13
f01037fb:	e8 05 ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103800:	8b 45 08             	mov    0x8(%ebp),%eax
f0103803:	83 c0 64             	add    $0x64,%eax
f0103806:	83 ec 08             	sub    $0x8,%esp
f0103809:	50                   	push   %eax
f010380a:	ff 75 08             	pushl  0x8(%ebp)
f010380d:	e8 9d 04 00 00       	call   f0103caf <get_disk_page_directory>
f0103812:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103815:	8b 45 08             	mov    0x8(%ebp),%eax
f0103818:	8b 40 64             	mov    0x64(%eax),%eax
f010381b:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010381e:	52                   	push   %edx
f010381f:	6a 00                	push   $0x0
f0103821:	ff 75 0c             	pushl  0xc(%ebp)
f0103824:	50                   	push   %eax
f0103825:	e8 9e fc ff ff       	call   f01034c8 <get_disk_page_table>
f010382a:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010382d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103830:	85 c0                	test   %eax,%eax
f0103832:	74 29                	je     f010385d <pf_update_env_page+0x85>
f0103834:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103837:	85 c0                	test   %eax,%eax
f0103839:	0f 84 43 01 00 00    	je     f0103982 <pf_update_env_page+0x1aa>
f010383f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103842:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103845:	c1 ea 0c             	shr    $0xc,%edx
f0103848:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010384e:	c1 e2 02             	shl    $0x2,%edx
f0103851:	01 d0                	add    %edx,%eax
f0103853:	8b 00                	mov    (%eax),%eax
f0103855:	85 c0                	test   %eax,%eax
f0103857:	0f 85 25 01 00 00    	jne    f0103982 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010385d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103860:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103866:	85 c0                	test   %eax,%eax
f0103868:	79 09                	jns    f0103873 <pf_update_env_page+0x9b>
f010386a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103871:	76 38                	jbe    f01038ab <pf_update_env_page+0xd3>
f0103873:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010387a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010387d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103882:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103885:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103888:	ba 00 00 00 00       	mov    $0x0,%edx
f010388d:	f7 75 f0             	divl   -0x10(%ebp)
f0103890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103893:	29 d0                	sub    %edx,%eax
f0103895:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103898:	0f 87 cd 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
f010389e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038a5:	0f 87 c0 00 00 00    	ja     f010396b <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038b7:	52                   	push   %edx
f01038b8:	ff 75 0c             	pushl  0xc(%ebp)
f01038bb:	50                   	push   %eax
f01038bc:	e8 45 35 00 00       	call   f0106e06 <get_frame_info>
f01038c1:	83 c4 10             	add    $0x10,%esp
f01038c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ca:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038cd:	75 52                	jne    f0103921 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038d2:	83 ec 04             	sub    $0x4,%esp
f01038d5:	50                   	push   %eax
f01038d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01038d9:	ff 75 08             	pushl  0x8(%ebp)
f01038dc:	e8 34 fe ff ff       	call   f0103715 <pf_add_env_page>
f01038e1:	83 c4 10             	add    $0x10,%esp
f01038e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038e7:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038eb:	75 17                	jne    f0103904 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	68 e0 5b 13 f0       	push   $0xf0135be0
f01038f5:	68 1d 01 00 00       	push   $0x11d
f01038fa:	68 13 5b 13 f0       	push   $0xf0135b13
f01038ff:	e8 01 c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103904:	8b 45 08             	mov    0x8(%ebp),%eax
f0103907:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010390d:	8d 50 01             	lea    0x1(%eax),%edx
f0103910:	8b 45 08             	mov    0x8(%ebp),%eax
f0103913:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103919:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010391c:	e9 17 01 00 00       	jmp    f0103a38 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103921:	83 ec 04             	sub    $0x4,%esp
f0103924:	6a 00                	push   $0x0
f0103926:	ff 75 f4             	pushl  -0xc(%ebp)
f0103929:	ff 75 08             	pushl  0x8(%ebp)
f010392c:	e8 b3 fc ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0103931:	83 c4 10             	add    $0x10,%esp
f0103934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103937:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010393b:	75 17                	jne    f0103954 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010393d:	83 ec 04             	sub    $0x4,%esp
f0103940:	68 0c 5c 13 f0       	push   $0xf0135c0c
f0103945:	68 28 01 00 00       	push   $0x128
f010394a:	68 13 5b 13 f0       	push   $0xf0135b13
f010394f:	e8 b1 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010395d:	8d 50 01             	lea    0x1(%eax),%edx
f0103960:	8b 45 08             	mov    0x8(%ebp),%eax
f0103963:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103969:	eb 17                	jmp    f0103982 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010396b:	83 ec 04             	sub    $0x4,%esp
f010396e:	68 58 5c 13 f0       	push   $0xf0135c58
f0103973:	68 2f 01 00 00       	push   $0x12f
f0103978:	68 13 5b 13 f0       	push   $0xf0135b13
f010397d:	e8 83 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103982:	8b 45 08             	mov    0x8(%ebp),%eax
f0103985:	8b 40 64             	mov    0x64(%eax),%eax
f0103988:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010398b:	52                   	push   %edx
f010398c:	6a 00                	push   $0x0
f010398e:	ff 75 0c             	pushl  0xc(%ebp)
f0103991:	50                   	push   %eax
f0103992:	e8 31 fb ff ff       	call   f01034c8 <get_disk_page_table>
f0103997:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010399a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010399d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039a0:	c1 ea 0c             	shr    $0xc,%edx
f01039a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039a9:	c1 e2 02             	shl    $0x2,%edx
f01039ac:	01 d0                	add    %edx,%eax
f01039ae:	8b 00                	mov    (%eax),%eax
f01039b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01039b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039b9:	6a 00                	push   $0x0
f01039bb:	68 00 00 80 ef       	push   $0xef800000
f01039c0:	ff 75 10             	pushl  0x10(%ebp)
f01039c3:	50                   	push   %eax
f01039c4:	e8 78 33 00 00       	call   f0106d41 <map_frame>
f01039c9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039cc:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039db:	83 ec 08             	sub    $0x8,%esp
f01039de:	50                   	push   %eax
f01039df:	ff 75 e0             	pushl  -0x20(%ebp)
f01039e2:	e8 8c f7 ff ff       	call   f0103173 <write_disk_page>
f01039e7:	83 c4 10             	add    $0x10,%esp
f01039ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039ed:	8b 45 10             	mov    0x10(%ebp),%eax
f01039f0:	8b 40 08             	mov    0x8(%eax),%eax
f01039f3:	40                   	inc    %eax
f01039f4:	8b 55 10             	mov    0x10(%ebp),%edx
f01039f7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01039fe:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a01:	83 ec 08             	sub    $0x8,%esp
f0103a04:	68 00 00 80 ef       	push   $0xef800000
f0103a09:	50                   	push   %eax
f0103a0a:	e8 67 34 00 00       	call   f0106e76 <unmap_frame>
f0103a0f:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a12:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a15:	8b 40 08             	mov    0x8(%eax),%eax
f0103a18:	48                   	dec    %eax
f0103a19:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a1c:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a23:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a29:	8d 50 01             	lea    0x1(%eax),%edx
f0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2f:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a38:	c9                   	leave  
f0103a39:	c3                   	ret    

f0103a3a <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a3a:	55                   	push   %ebp
f0103a3b:	89 e5                	mov    %esp,%ebp
f0103a3d:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a49:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a4e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 40 64             	mov    0x64(%eax),%eax
f0103a57:	85 c0                	test   %eax,%eax
f0103a59:	75 0a                	jne    f0103a65 <pf_read_env_page+0x2b>
f0103a5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a60:	e9 90 00 00 00       	jmp    f0103af5 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a65:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a6e:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a71:	51                   	push   %ecx
f0103a72:	6a 00                	push   $0x0
f0103a74:	52                   	push   %edx
f0103a75:	50                   	push   %eax
f0103a76:	e8 4d fa ff ff       	call   f01034c8 <get_disk_page_table>
f0103a7b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a81:	85 c0                	test   %eax,%eax
f0103a83:	75 07                	jne    f0103a8c <pf_read_env_page+0x52>
f0103a85:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a8a:	eb 69                	jmp    f0103af5 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a8f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a92:	c1 ea 0c             	shr    $0xc,%edx
f0103a95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a9b:	c1 e2 02             	shl    $0x2,%edx
f0103a9e:	01 d0                	add    %edx,%eax
f0103aa0:	8b 00                	mov    (%eax),%eax
f0103aa2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103aa5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103aa9:	75 07                	jne    f0103ab2 <pf_read_env_page+0x78>
f0103aab:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103ab0:	eb 43                	jmp    f0103af5 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103ab2:	83 ec 08             	sub    $0x8,%esp
f0103ab5:	ff 75 0c             	pushl  0xc(%ebp)
f0103ab8:	ff 75 f0             	pushl  -0x10(%ebp)
f0103abb:	e8 84 f6 ff ff       	call   f0103144 <read_disk_page>
f0103ac0:	83 c4 10             	add    $0x10,%esp
f0103ac3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ac6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103acf:	6a 40                	push   $0x40
f0103ad1:	6a 00                	push   $0x0
f0103ad3:	52                   	push   %edx
f0103ad4:	50                   	push   %eax
f0103ad5:	e8 c8 42 00 00       	call   f0107da2 <pt_set_page_permissions>
f0103ada:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103ae6:	8d 50 01             	lea    0x1(%eax),%edx
f0103ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aec:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103af5:	c9                   	leave  
f0103af6:	c3                   	ret    

f0103af7 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103af7:	55                   	push   %ebp
f0103af8:	89 e5                	mov    %esp,%ebp
f0103afa:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b00:	8b 40 64             	mov    0x64(%eax),%eax
f0103b03:	85 c0                	test   %eax,%eax
f0103b05:	74 62                	je     f0103b69 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b0a:	8b 40 64             	mov    0x64(%eax),%eax
f0103b0d:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b10:	52                   	push   %edx
f0103b11:	6a 00                	push   $0x0
f0103b13:	ff 75 0c             	pushl  0xc(%ebp)
f0103b16:	50                   	push   %eax
f0103b17:	e8 ac f9 ff ff       	call   f01034c8 <get_disk_page_table>
f0103b1c:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b22:	85 c0                	test   %eax,%eax
f0103b24:	74 46                	je     f0103b6c <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	8b 00                	mov    (%eax),%eax
f0103b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b45:	c1 ea 0c             	shr    $0xc,%edx
f0103b48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b4e:	c1 e2 02             	shl    $0x2,%edx
f0103b51:	01 d0                	add    %edx,%eax
f0103b53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b59:	83 ec 0c             	sub    $0xc,%esp
f0103b5c:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b5f:	e8 83 f8 ff ff       	call   f01033e7 <free_disk_frame>
f0103b64:	83 c4 10             	add    $0x10,%esp
f0103b67:	eb 04                	jmp    f0103b6d <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b69:	90                   	nop
f0103b6a:	eb 01                	jmp    f0103b6d <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b6c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b6d:	c9                   	leave  
f0103b6e:	c3                   	ret    

f0103b6f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b6f:	55                   	push   %ebp
f0103b70:	89 e5                	mov    %esp,%ebp
f0103b72:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b7c:	e9 b8 00 00 00       	jmp    f0103c39 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b84:	8b 40 64             	mov    0x64(%eax),%eax
f0103b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8a:	c1 e2 02             	shl    $0x2,%edx
f0103b8d:	01 d0                	add    %edx,%eax
f0103b8f:	8b 00                	mov    (%eax),%eax
f0103b91:	83 e0 01             	and    $0x1,%eax
f0103b94:	85 c0                	test   %eax,%eax
f0103b96:	0f 84 99 00 00 00    	je     f0103c35 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bb4:	83 ec 0c             	sub    $0xc,%esp
f0103bb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bba:	e8 ad 40 00 00       	call   f0107c6c <kheap_virtual_address>
f0103bbf:	83 c4 10             	add    $0x10,%esp
f0103bc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bcc:	eb 3a                	jmp    f0103c08 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bdb:	01 d0                	add    %edx,%eax
f0103bdd:	8b 00                	mov    (%eax),%eax
f0103bdf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103be5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bef:	01 d0                	add    %edx,%eax
f0103bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bf7:	83 ec 0c             	sub    $0xc,%esp
f0103bfa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103bfd:	e8 e5 f7 ff ff       	call   f01033e7 <free_disk_frame>
f0103c02:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c05:	ff 45 f0             	incl   -0x10(%ebp)
f0103c08:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c0f:	76 bd                	jbe    f0103bce <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c14:	8b 40 64             	mov    0x64(%eax),%eax
f0103c17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c1a:	c1 e2 02             	shl    $0x2,%edx
f0103c1d:	01 d0                	add    %edx,%eax
f0103c1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c25:	83 ec 0c             	sub    $0xc,%esp
f0103c28:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c2b:	e8 15 3f 00 00       	call   f0107b45 <kfree>
f0103c30:	83 c4 10             	add    $0x10,%esp
f0103c33:	eb 01                	jmp    f0103c36 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c35:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c36:	ff 45 f4             	incl   -0xc(%ebp)
f0103c39:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c40:	0f 86 3b ff ff ff    	jbe    f0103b81 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c49:	8b 40 64             	mov    0x64(%eax),%eax
f0103c4c:	83 ec 0c             	sub    $0xc,%esp
f0103c4f:	50                   	push   %eax
f0103c50:	e8 f0 3e 00 00       	call   f0107b45 <kfree>
f0103c55:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c5b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c65:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c72:	85 c0                	test   %eax,%eax
f0103c74:	74 36                	je     f0103cac <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c76:	83 ec 0c             	sub    $0xc,%esp
f0103c79:	ff 75 08             	pushl  0x8(%ebp)
f0103c7c:	e8 05 03 00 00       	call   f0103f86 <__pf_remove_env_all_tables>
f0103c81:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c87:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8a:	83 ec 0c             	sub    $0xc,%esp
f0103c8d:	50                   	push   %eax
f0103c8e:	e8 b2 3e 00 00       	call   f0107b45 <kfree>
f0103c93:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c99:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca3:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103caa:	eb 01                	jmp    f0103cad <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cac:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cad:	c9                   	leave  
f0103cae:	c3                   	ret    

f0103caf <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103caf:	55                   	push   %ebp
f0103cb0:	89 e5                	mov    %esp,%ebp
f0103cb2:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb8:	8b 50 64             	mov    0x64(%eax),%edx
f0103cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cbe:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc3:	8b 00                	mov    (%eax),%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	75 58                	jne    f0103d21 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cc9:	83 ec 0c             	sub    $0xc,%esp
f0103ccc:	68 00 10 00 00       	push   $0x1000
f0103cd1:	e8 a4 3d 00 00       	call   f0107a7a <kmalloc>
f0103cd6:	83 c4 10             	add    $0x10,%esp
f0103cd9:	89 c2                	mov    %eax,%edx
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce3:	8b 00                	mov    (%eax),%eax
f0103ce5:	85 c0                	test   %eax,%eax
f0103ce7:	75 07                	jne    f0103cf0 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103ce9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cee:	eb 36                	jmp    f0103d26 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 0c             	sub    $0xc,%esp
f0103cf8:	50                   	push   %eax
f0103cf9:	e8 9a 3f 00 00       	call   f0107c98 <kheap_physical_address>
f0103cfe:	83 c4 10             	add    $0x10,%esp
f0103d01:	89 c2                	mov    %eax,%edx
f0103d03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d06:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0c:	8b 00                	mov    (%eax),%eax
f0103d0e:	83 ec 04             	sub    $0x4,%esp
f0103d11:	68 00 10 00 00       	push   $0x1000
f0103d16:	6a 00                	push   $0x0
f0103d18:	50                   	push   %eax
f0103d19:	e8 5d d9 02 00       	call   f013167b <memset>
f0103d1e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d26:	c9                   	leave  
f0103d27:	c3                   	ret    

f0103d28 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d28:	55                   	push   %ebp
f0103d29:	89 e5                	mov    %esp,%ebp
f0103d2b:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d2e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d3c:	eb 78                	jmp    f0103db6 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d41:	8b 40 64             	mov    0x64(%eax),%eax
f0103d44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d47:	c1 e2 02             	shl    $0x2,%edx
f0103d4a:	01 d0                	add    %edx,%eax
f0103d4c:	8b 00                	mov    (%eax),%eax
f0103d4e:	83 e0 01             	and    $0x1,%eax
f0103d51:	85 c0                	test   %eax,%eax
f0103d53:	74 5d                	je     f0103db2 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d58:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d5e:	c1 e2 02             	shl    $0x2,%edx
f0103d61:	01 d0                	add    %edx,%eax
f0103d63:	8b 00                	mov    (%eax),%eax
f0103d65:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d6d:	83 ec 0c             	sub    $0xc,%esp
f0103d70:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d73:	e8 f4 3e 00 00       	call   f0107c6c <kheap_virtual_address>
f0103d78:	83 c4 10             	add    $0x10,%esp
f0103d7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d85:	eb 20                	jmp    f0103da7 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d94:	01 d0                	add    %edx,%eax
f0103d96:	8b 00                	mov    (%eax),%eax
f0103d98:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d9b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d9f:	74 03                	je     f0103da4 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103da1:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103da4:	ff 45 ec             	incl   -0x14(%ebp)
f0103da7:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dae:	76 d7                	jbe    f0103d87 <pf_calculate_allocated_pages+0x5f>
f0103db0:	eb 01                	jmp    f0103db3 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103db2:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103db3:	ff 45 f4             	incl   -0xc(%ebp)
f0103db6:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dbd:	0f 86 7b ff ff ff    	jbe    f0103d3e <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dc6:	c9                   	leave  
f0103dc7:	c3                   	ret    

f0103dc8 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103dc8:	55                   	push   %ebp
f0103dc9:	89 e5                	mov    %esp,%ebp
f0103dcb:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103dce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dd5:	a1 b8 1d 88 f0       	mov    0xf0881db8,%eax
f0103dda:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ddd:	eb 0b                	jmp    f0103dea <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ddf:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103de2:	a1 c0 1d 88 f0       	mov    0xf0881dc0,%eax
f0103de7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dea:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dee:	74 07                	je     f0103df7 <pf_calculate_free_frames+0x2f>
f0103df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103df3:	8b 00                	mov    (%eax),%eax
f0103df5:	eb 05                	jmp    f0103dfc <pf_calculate_free_frames+0x34>
f0103df7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103dfc:	a3 c0 1d 88 f0       	mov    %eax,0xf0881dc0
f0103e01:	a1 c0 1d 88 f0       	mov    0xf0881dc0,%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 d5                	jne    f0103ddf <pf_calculate_free_frames+0x17>
f0103e0a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e0e:	75 cf                	jne    f0103ddf <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e10:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e13:	c9                   	leave  
f0103e14:	c3                   	ret    

f0103e15 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e15:	55                   	push   %ebp
f0103e16:	89 e5                	mov    %esp,%ebp
f0103e18:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e24:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e29:	8b 00                	mov    (%eax),%eax
f0103e2b:	85 c0                	test   %eax,%eax
f0103e2d:	75 58                	jne    f0103e87 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e2f:	83 ec 0c             	sub    $0xc,%esp
f0103e32:	68 00 10 00 00       	push   $0x1000
f0103e37:	e8 3e 3c 00 00       	call   f0107a7a <kmalloc>
f0103e3c:	83 c4 10             	add    $0x10,%esp
f0103e3f:	89 c2                	mov    %eax,%edx
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e49:	8b 00                	mov    (%eax),%eax
f0103e4b:	85 c0                	test   %eax,%eax
f0103e4d:	75 07                	jne    f0103e56 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e4f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e54:	eb 36                	jmp    f0103e8c <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 0c             	sub    $0xc,%esp
f0103e5e:	50                   	push   %eax
f0103e5f:	e8 34 3e 00 00       	call   f0107c98 <kheap_physical_address>
f0103e64:	83 c4 10             	add    $0x10,%esp
f0103e67:	89 c2                	mov    %eax,%edx
f0103e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6c:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e72:	8b 00                	mov    (%eax),%eax
f0103e74:	83 ec 04             	sub    $0x4,%esp
f0103e77:	68 00 10 00 00       	push   $0x1000
f0103e7c:	6a 00                	push   $0x0
f0103e7e:	50                   	push   %eax
f0103e7f:	e8 f7 d7 02 00       	call   f013167b <memset>
f0103e84:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e8c:	c9                   	leave  
f0103e8d:	c3                   	ret    

f0103e8e <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e8e:	55                   	push   %ebp
f0103e8f:	89 e5                	mov    %esp,%ebp
f0103e91:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e94:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e9b:	76 19                	jbe    f0103eb6 <__pf_write_env_table+0x28>
f0103e9d:	68 a4 5b 13 f0       	push   $0xf0135ba4
f0103ea2:	68 ca 5b 13 f0       	push   $0xf0135bca
f0103ea7:	68 5a 02 00 00       	push   $0x25a
f0103eac:	68 13 5b 13 f0       	push   $0xf0135b13
f0103eb1:	e8 4f c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103eb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb9:	83 c0 6c             	add    $0x6c,%eax
f0103ebc:	83 ec 08             	sub    $0x8,%esp
f0103ebf:	50                   	push   %eax
f0103ec0:	ff 75 08             	pushl  0x8(%ebp)
f0103ec3:	e8 4d ff ff ff       	call   f0103e15 <get_disk_table_directory>
f0103ec8:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ece:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ed4:	c1 ea 16             	shr    $0x16,%edx
f0103ed7:	c1 e2 02             	shl    $0x2,%edx
f0103eda:	01 d0                	add    %edx,%eax
f0103edc:	8b 00                	mov    (%eax),%eax
f0103ede:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ee4:	85 c0                	test   %eax,%eax
f0103ee6:	75 31                	jne    f0103f19 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103eee:	50                   	push   %eax
f0103eef:	e8 2c f4 ff ff       	call   f0103320 <allocate_disk_frame>
f0103ef4:	83 c4 10             	add    $0x10,%esp
f0103ef7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103efa:	75 07                	jne    f0103f03 <__pf_write_env_table+0x75>
f0103efc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f01:	eb 2e                	jmp    f0103f31 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f06:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f09:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f0c:	c1 ea 16             	shr    $0x16,%edx
f0103f0f:	c1 e2 02             	shl    $0x2,%edx
f0103f12:	01 c2                	add    %eax,%edx
f0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f17:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	83 ec 08             	sub    $0x8,%esp
f0103f1f:	ff 75 10             	pushl  0x10(%ebp)
f0103f22:	50                   	push   %eax
f0103f23:	e8 4b f2 ff ff       	call   f0103173 <write_disk_page>
f0103f28:	83 c4 10             	add    $0x10,%esp
f0103f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f31:	c9                   	leave  
f0103f32:	c3                   	ret    

f0103f33 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f33:	55                   	push   %ebp
f0103f34:	89 e5                	mov    %esp,%ebp
f0103f36:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f3f:	85 c0                	test   %eax,%eax
f0103f41:	75 07                	jne    f0103f4a <__pf_read_env_table+0x17>
f0103f43:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f48:	eb 3a                	jmp    f0103f84 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f4d:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f53:	c1 ea 16             	shr    $0x16,%edx
f0103f56:	c1 e2 02             	shl    $0x2,%edx
f0103f59:	01 d0                	add    %edx,%eax
f0103f5b:	8b 00                	mov    (%eax),%eax
f0103f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f64:	75 07                	jne    f0103f6d <__pf_read_env_table+0x3a>
f0103f66:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f6b:	eb 17                	jmp    f0103f84 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f6d:	83 ec 08             	sub    $0x8,%esp
f0103f70:	ff 75 10             	pushl  0x10(%ebp)
f0103f73:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f76:	e8 c9 f1 ff ff       	call   f0103144 <read_disk_page>
f0103f7b:	83 c4 10             	add    $0x10,%esp
f0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f81:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f84:	c9                   	leave  
f0103f85:	c3                   	ret    

f0103f86 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f86:	55                   	push   %ebp
f0103f87:	89 e5                	mov    %esp,%ebp
f0103f89:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f8f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f92:	85 c0                	test   %eax,%eax
f0103f94:	74 4c                	je     f0103fe2 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f9d:	eb 38                	jmp    f0103fd7 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fa2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa8:	c1 e2 02             	shl    $0x2,%edx
f0103fab:	01 d0                	add    %edx,%eax
f0103fad:	8b 00                	mov    (%eax),%eax
f0103faf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fbb:	c1 e2 02             	shl    $0x2,%edx
f0103fbe:	01 d0                	add    %edx,%eax
f0103fc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fc6:	83 ec 0c             	sub    $0xc,%esp
f0103fc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fcc:	e8 16 f4 ff ff       	call   f01033e7 <free_disk_frame>
f0103fd1:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0103fd7:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fde:	76 bf                	jbe    f0103f9f <__pf_remove_env_all_tables+0x19>
f0103fe0:	eb 01                	jmp    f0103fe3 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe2:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fe3:	c9                   	leave  
f0103fe4:	c3                   	ret    

f0103fe5 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fe5:	55                   	push   %ebp
f0103fe6:	89 e5                	mov    %esp,%ebp
f0103fe8:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fef:	75 10                	jne    f0104001 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103ff1:	83 ec 0c             	sub    $0xc,%esp
f0103ff4:	68 d4 5c 13 f0       	push   $0xf0135cd4
f0103ff9:	e8 10 cd ff ff       	call   f0100d0e <cprintf>
f0103ffe:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104001:	8b 45 08             	mov    0x8(%ebp),%eax
f0104004:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104007:	85 c0                	test   %eax,%eax
f0104009:	74 3d                	je     f0104048 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010400b:	8b 45 08             	mov    0x8(%ebp),%eax
f010400e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104011:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104014:	c1 ea 16             	shr    $0x16,%edx
f0104017:	c1 e2 02             	shl    $0x2,%edx
f010401a:	01 d0                	add    %edx,%eax
f010401c:	8b 00                	mov    (%eax),%eax
f010401e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104021:	8b 45 08             	mov    0x8(%ebp),%eax
f0104024:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104027:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402a:	c1 ea 16             	shr    $0x16,%edx
f010402d:	c1 e2 02             	shl    $0x2,%edx
f0104030:	01 d0                	add    %edx,%eax
f0104032:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104038:	83 ec 0c             	sub    $0xc,%esp
f010403b:	ff 75 f4             	pushl  -0xc(%ebp)
f010403e:	e8 a4 f3 ff ff       	call   f01033e7 <free_disk_frame>
f0104043:	83 c4 10             	add    $0x10,%esp
f0104046:	eb 01                	jmp    f0104049 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104048:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104049:	c9                   	leave  
f010404a:	c3                   	ret    

f010404b <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010404b:	55                   	push   %ebp
f010404c:	89 e5                	mov    %esp,%ebp
f010404e:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104051:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104058:	eb 1f                	jmp    f0104079 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010405a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010405d:	83 ec 04             	sub    $0x4,%esp
f0104060:	6a 08                	push   $0x8
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	50                   	push   %eax
f0104066:	e8 b5 dc 02 00       	call   f0131d20 <ide_write>
f010406b:	83 c4 10             	add    $0x10,%esp
f010406e:	85 c0                	test   %eax,%eax
f0104070:	75 12                	jne    f0104084 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104072:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104079:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104080:	7e d8                	jle    f010405a <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104082:	eb 01                	jmp    f0104085 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104084:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104085:	90                   	nop
f0104086:	c9                   	leave  
f0104087:	c3                   	ret    

f0104088 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0104088:	55                   	push   %ebp
f0104089:	89 e5                	mov    %esp,%ebp
f010408b:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010408e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104091:	0f b6 c0             	movzbl %al,%eax
f0104094:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010409b:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010409e:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040a4:	ee                   	out    %al,(%dx)
f01040a5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040af:	89 c2                	mov    %eax,%edx
f01040b1:	ec                   	in     (%dx),%al
f01040b2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040b5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040b8:	0f b6 c0             	movzbl %al,%eax
}
f01040bb:	c9                   	leave  
f01040bc:	c3                   	ret    

f01040bd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040bd:	55                   	push   %ebp
f01040be:	89 e5                	mov    %esp,%ebp
f01040c0:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c6:	0f b6 c0             	movzbl %al,%eax
f01040c9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040d0:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040d3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040d9:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040dd:	0f b6 c0             	movzbl %al,%eax
f01040e0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040e7:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040ea:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040f0:	ee                   	out    %al,(%dx)
}
f01040f1:	90                   	nop
f01040f2:	c9                   	leave  
f01040f3:	c3                   	ret    

f01040f4 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040f4:	55                   	push   %ebp
f01040f5:	89 e5                	mov    %esp,%ebp
f01040f7:	53                   	push   %ebx
f01040f8:	83 ec 24             	sub    $0x24,%esp
f01040fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01040fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104101:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104108:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010410c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010410f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104112:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104113:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104117:	77 48                	ja     f0104161 <kclock_start+0x6d>
f0104119:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104120:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104124:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104127:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010412a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010412b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010412f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010413d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104141:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104146:	99                   	cltd   
f0104147:	f7 fb                	idiv   %ebx
f0104149:	89 c3                	mov    %eax,%ebx
f010414b:	89 c8                	mov    %ecx,%eax
f010414d:	99                   	cltd   
f010414e:	f7 fb                	idiv   %ebx
f0104150:	0f b7 c0             	movzwl %ax,%eax
f0104153:	83 ec 0c             	sub    $0xc,%esp
f0104156:	50                   	push   %eax
f0104157:	e8 b8 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010415c:	83 c4 10             	add    $0x10,%esp
f010415f:	eb 13                	jmp    f0104174 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104161:	6a 35                	push   $0x35
f0104163:	68 f8 5c 13 f0       	push   $0xf0135cf8
f0104168:	6a 33                	push   $0x33
f010416a:	68 54 5d 13 f0       	push   $0xf0135d54
f010416f:	e8 91 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104174:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f010417a:	0f b7 c0             	movzwl %ax,%eax
f010417d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104182:	83 ec 0c             	sub    $0xc,%esp
f0104185:	50                   	push   %eax
f0104186:	e8 bc 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f010418b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010418e:	90                   	nop
f010418f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_stop>:

void
kclock_stop(void)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	83 ec 18             	sub    $0x18,%esp
f010419a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041a1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041a5:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041ab:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041ac:	83 ec 0c             	sub    $0xc,%esp
f01041af:	68 ff ff 00 00       	push   $0xffff
f01041b4:	e8 8e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f01041b9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041bc:	90                   	nop
f01041bd:	c9                   	leave  
f01041be:	c3                   	ret    

f01041bf <kclock_resume>:

void
kclock_resume(void)
{
f01041bf:	55                   	push   %ebp
f01041c0:	89 e5                	mov    %esp,%ebp
f01041c2:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041c5:	e8 8c 01 00 00       	call   f0104356 <kclock_read_cnt0>
f01041ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041ce:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041d3:	77 06                	ja     f01041db <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041d5:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041db:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041df:	83 e0 01             	and    $0x1,%eax
f01041e2:	66 85 c0             	test   %ax,%ax
f01041e5:	74 09                	je     f01041f0 <kclock_resume+0x31>
		cnt0++;
f01041e7:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041eb:	40                   	inc    %eax
f01041ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104202:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104206:	83 ec 0c             	sub    $0xc,%esp
f0104209:	50                   	push   %eax
f010420a:	e8 05 01 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010420f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104212:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104218:	0f b7 c0             	movzwl %ax,%eax
f010421b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104220:	83 ec 0c             	sub    $0xc,%esp
f0104223:	50                   	push   %eax
f0104224:	e8 1e 1b 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104229:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010422c:	90                   	nop
f010422d:	c9                   	leave  
f010422e:	c3                   	ret    

f010422f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010422f:	55                   	push   %ebp
f0104230:	89 e5                	mov    %esp,%ebp
f0104232:	83 ec 28             	sub    $0x28,%esp
f0104235:	8b 45 08             	mov    0x8(%ebp),%eax
f0104238:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010423b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104242:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104246:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010424c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010424d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104251:	83 ec 0c             	sub    $0xc,%esp
f0104254:	50                   	push   %eax
f0104255:	e8 ba 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f010425a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010425d:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104263:	0f b7 c0             	movzwl %ax,%eax
f0104266:	25 fe ff 00 00       	and    $0xfffe,%eax
f010426b:	83 ec 0c             	sub    $0xc,%esp
f010426e:	50                   	push   %eax
f010426f:	e8 d3 1a 00 00       	call   f0105d47 <irq_setmask_8259A>
f0104274:	83 c4 10             	add    $0x10,%esp

}
f0104277:	90                   	nop
f0104278:	c9                   	leave  
f0104279:	c3                   	ret    

f010427a <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010427a:	55                   	push   %ebp
f010427b:	89 e5                	mov    %esp,%ebp
f010427d:	53                   	push   %ebx
f010427e:	83 ec 24             	sub    $0x24,%esp
f0104281:	8b 45 08             	mov    0x8(%ebp),%eax
f0104284:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104287:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010428b:	77 6c                	ja     f01042f9 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010428d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104291:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010429f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042a3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042a8:	99                   	cltd   
f01042a9:	f7 fb                	idiv   %ebx
f01042ab:	89 c3                	mov    %eax,%ebx
f01042ad:	89 c8                	mov    %ecx,%eax
f01042af:	99                   	cltd   
f01042b0:	f7 fb                	idiv   %ebx
f01042b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042b8:	25 01 00 00 80       	and    $0x80000001,%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	79 05                	jns    f01042c6 <kclock_set_quantum+0x4c>
f01042c1:	48                   	dec    %eax
f01042c2:	83 c8 fe             	or     $0xfffffffe,%eax
f01042c5:	40                   	inc    %eax
f01042c6:	83 f8 01             	cmp    $0x1,%eax
f01042c9:	75 03                	jne    f01042ce <kclock_set_quantum+0x54>
			cnt++;
f01042cb:	ff 45 f4             	incl   -0xc(%ebp)
f01042ce:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042d5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042d9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042df:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e3:	0f b7 c0             	movzwl %ax,%eax
f01042e6:	83 ec 0c             	sub    $0xc,%esp
f01042e9:	50                   	push   %eax
f01042ea:	e8 25 00 00 00       	call   f0104314 <kclock_write_cnt0_LSB_first>
f01042ef:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042f2:	e8 9d fe ff ff       	call   f0104194 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042f7:	eb 16                	jmp    f010430f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042f9:	6a 35                	push   $0x35
f01042fb:	68 f8 5c 13 f0       	push   $0xf0135cf8
f0104300:	68 c9 00 00 00       	push   $0xc9
f0104305:	68 54 5d 13 f0       	push   $0xf0135d54
f010430a:	e8 f6 be ff ff       	call   f0100205 <_panic>
	}
}
f010430f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 14             	sub    $0x14,%esp
f010431a:	8b 45 08             	mov    0x8(%ebp),%eax
f010431d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104324:	0f b6 c0             	movzbl %al,%eax
f0104327:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010432e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104331:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104334:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104337:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104338:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433b:	66 c1 e8 08          	shr    $0x8,%ax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104349:	88 45 f7             	mov    %al,-0x9(%ebp)
f010434c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010434f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
}
f0104353:	90                   	nop
f0104354:	c9                   	leave  
f0104355:	c3                   	ret    

f0104356 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104356:	55                   	push   %ebp
f0104357:	89 e5                	mov    %esp,%ebp
f0104359:	83 ec 20             	sub    $0x20,%esp
f010435c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104363:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104366:	89 c2                	mov    %eax,%edx
f0104368:	ec                   	in     (%dx),%al
f0104369:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010436c:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010436f:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104372:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104379:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010437c:	89 c2                	mov    %eax,%edx
f010437e:	ec                   	in     (%dx),%al
f010437f:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104382:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104385:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104388:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010438c:	c1 e0 08             	shl    $0x8,%eax
f010438f:	89 c2                	mov    %eax,%edx
f0104391:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104395:	09 d0                	or     %edx,%eax
f0104397:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010439b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010439e:	c9                   	leave  
f010439f:	c3                   	ret    

f01043a0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043a0:	55                   	push   %ebp
f01043a1:	89 e5                	mov    %esp,%ebp
f01043a3:	83 ec 30             	sub    $0x30,%esp
f01043a6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043b0:	89 c2                	mov    %eax,%edx
f01043b2:	ec                   	in     (%dx),%al
f01043b3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043b6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043b9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043c3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043c7:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043cd:	ee                   	out    %al,(%dx)
f01043ce:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d8:	89 c2                	mov    %eax,%edx
f01043da:	ec                   	in     (%dx),%al
f01043db:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043de:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043e1:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043e4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043ee:	89 c2                	mov    %eax,%edx
f01043f0:	ec                   	in     (%dx),%al
f01043f1:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043f4:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043f7:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043fa:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043fe:	c1 e0 08             	shl    $0x8,%eax
f0104401:	89 c2                	mov    %eax,%edx
f0104403:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104407:	09 d0                	or     %edx,%eax
f0104409:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010440d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104411:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104418:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010441b:	8a 45 df             	mov    -0x21(%ebp),%al
f010441e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104421:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104422:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104425:	c9                   	leave  
f0104426:	c3                   	ret    

f0104427 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104427:	55                   	push   %ebp
f0104428:	89 e5                	mov    %esp,%ebp
f010442a:	a1 4c 1d 88 f0       	mov    0xf0881d4c,%eax
f010442f:	85 c0                	test   %eax,%eax
f0104431:	75 07                	jne    f010443a <isSchedMethodRR+0x13>
f0104433:	b8 01 00 00 00       	mov    $0x1,%eax
f0104438:	eb 05                	jmp    f010443f <isSchedMethodRR+0x18>
f010443a:	b8 00 00 00 00       	mov    $0x0,%eax
f010443f:	5d                   	pop    %ebp
f0104440:	c3                   	ret    

f0104441 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104441:	55                   	push   %ebp
f0104442:	89 e5                	mov    %esp,%ebp
f0104444:	a1 4c 1d 88 f0       	mov    0xf0881d4c,%eax
f0104449:	83 f8 01             	cmp    $0x1,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodMLFQ+0x14>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodMLFQ+0x19>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010445f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104463:	74 1d                	je     f0104482 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104465:	8b 45 08             	mov    0x8(%ebp),%eax
f0104468:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010446e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104478:	8b 45 08             	mov    0x8(%ebp),%eax
f010447b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104482:	90                   	nop
f0104483:	5d                   	pop    %ebp
f0104484:	c3                   	ret    

f0104485 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0104485:	55                   	push   %ebp
f0104486:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448c:	74 08                	je     f0104496 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010448e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104491:	8b 40 0c             	mov    0xc(%eax),%eax
f0104494:	eb 05                	jmp    f010449b <queue_size+0x16>
	}
	else
	{
		return 0;
f0104496:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010449b:	5d                   	pop    %ebp
f010449c:	c3                   	ret    

f010449d <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f010449d:	55                   	push   %ebp
f010449e:	89 e5                	mov    %esp,%ebp
f01044a0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	75 16                	jne    f01044bf <enqueue+0x22>
f01044a9:	68 68 5d 13 f0       	push   $0xf0135d68
f01044ae:	68 76 5d 13 f0       	push   $0xf0135d76
f01044b3:	6a 2d                	push   $0x2d
f01044b5:	68 8b 5d 13 f0       	push   $0xf0135d8b
f01044ba:	e8 46 bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c3:	74 66                	je     f010452b <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044c9:	75 14                	jne    f01044df <enqueue+0x42>
f01044cb:	83 ec 04             	sub    $0x4,%esp
f01044ce:	68 9c 5d 13 f0       	push   $0xf0135d9c
f01044d3:	6a 30                	push   $0x30
f01044d5:	68 8b 5d 13 f0       	push   $0xf0135d8b
f01044da:	e8 26 bd ff ff       	call   f0100205 <_panic>
f01044df:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e2:	8b 10                	mov    (%eax),%edx
f01044e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044e7:	89 50 44             	mov    %edx,0x44(%eax)
f01044ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ed:	8b 40 44             	mov    0x44(%eax),%eax
f01044f0:	85 c0                	test   %eax,%eax
f01044f2:	74 0d                	je     f0104501 <enqueue+0x64>
f01044f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f7:	8b 00                	mov    (%eax),%eax
f01044f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044fc:	89 50 48             	mov    %edx,0x48(%eax)
f01044ff:	eb 09                	jmp    f010450a <enqueue+0x6d>
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104507:	89 50 04             	mov    %edx,0x4(%eax)
f010450a:	8b 45 08             	mov    0x8(%ebp),%eax
f010450d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104510:	89 10                	mov    %edx,(%eax)
f0104512:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104515:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 40 0c             	mov    0xc(%eax),%eax
f0104522:	8d 50 01             	lea    0x1(%eax),%edx
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010452b:	90                   	nop
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104534:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104538:	75 0a                	jne    f0104544 <dequeue+0x16>
f010453a:	b8 00 00 00 00       	mov    $0x0,%eax
f010453f:	e9 a0 00 00 00       	jmp    f01045e4 <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104544:	8b 45 08             	mov    0x8(%ebp),%eax
f0104547:	8b 40 04             	mov    0x4(%eax),%eax
f010454a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010454d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104551:	0f 84 8a 00 00 00    	je     f01045e1 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010455b:	75 14                	jne    f0104571 <dequeue+0x43>
f010455d:	83 ec 04             	sub    $0x4,%esp
f0104560:	68 bf 5d 13 f0       	push   $0xf0135dbf
f0104565:	6a 3a                	push   $0x3a
f0104567:	68 8b 5d 13 f0       	push   $0xf0135d8b
f010456c:	e8 94 bc ff ff       	call   f0100205 <_panic>
f0104571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104574:	8b 40 44             	mov    0x44(%eax),%eax
f0104577:	85 c0                	test   %eax,%eax
f0104579:	74 11                	je     f010458c <dequeue+0x5e>
f010457b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010457e:	8b 40 44             	mov    0x44(%eax),%eax
f0104581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104584:	8b 52 48             	mov    0x48(%edx),%edx
f0104587:	89 50 48             	mov    %edx,0x48(%eax)
f010458a:	eb 0c                	jmp    f0104598 <dequeue+0x6a>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 50 48             	mov    0x48(%eax),%edx
f0104592:	8b 45 08             	mov    0x8(%ebp),%eax
f0104595:	89 50 04             	mov    %edx,0x4(%eax)
f0104598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459b:	8b 40 48             	mov    0x48(%eax),%eax
f010459e:	85 c0                	test   %eax,%eax
f01045a0:	74 11                	je     f01045b3 <dequeue+0x85>
f01045a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a5:	8b 40 48             	mov    0x48(%eax),%eax
f01045a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045ab:	8b 52 44             	mov    0x44(%edx),%edx
f01045ae:	89 50 44             	mov    %edx,0x44(%eax)
f01045b1:	eb 0b                	jmp    f01045be <dequeue+0x90>
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 50 44             	mov    0x44(%eax),%edx
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	89 10                	mov    %edx,(%eax)
f01045be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045cb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d5:	8b 40 0c             	mov    0xc(%eax),%eax
f01045d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045db:	8b 45 08             	mov    0x8(%ebp),%eax
f01045de:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045e4:	c9                   	leave  
f01045e5:	c3                   	ret    

f01045e6 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045e6:	55                   	push   %ebp
f01045e7:	89 e5                	mov    %esp,%ebp
f01045e9:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045f0:	75 16                	jne    f0104608 <remove_from_queue+0x22>
f01045f2:	68 68 5d 13 f0       	push   $0xf0135d68
f01045f7:	68 76 5d 13 f0       	push   $0xf0135d76
f01045fc:	6a 41                	push   $0x41
f01045fe:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0104603:	e8 fd bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010460c:	0f 84 8a 00 00 00    	je     f010469c <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104612:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104616:	75 14                	jne    f010462c <remove_from_queue+0x46>
f0104618:	83 ec 04             	sub    $0x4,%esp
f010461b:	68 bf 5d 13 f0       	push   $0xf0135dbf
f0104620:	6a 45                	push   $0x45
f0104622:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0104627:	e8 d9 bb ff ff       	call   f0100205 <_panic>
f010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010462f:	8b 40 44             	mov    0x44(%eax),%eax
f0104632:	85 c0                	test   %eax,%eax
f0104634:	74 11                	je     f0104647 <remove_from_queue+0x61>
f0104636:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104639:	8b 40 44             	mov    0x44(%eax),%eax
f010463c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010463f:	8b 52 48             	mov    0x48(%edx),%edx
f0104642:	89 50 48             	mov    %edx,0x48(%eax)
f0104645:	eb 0c                	jmp    f0104653 <remove_from_queue+0x6d>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 50 48             	mov    0x48(%eax),%edx
f010464d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104650:	89 50 04             	mov    %edx,0x4(%eax)
f0104653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104656:	8b 40 48             	mov    0x48(%eax),%eax
f0104659:	85 c0                	test   %eax,%eax
f010465b:	74 11                	je     f010466e <remove_from_queue+0x88>
f010465d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104660:	8b 40 48             	mov    0x48(%eax),%eax
f0104663:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104666:	8b 52 44             	mov    0x44(%edx),%edx
f0104669:	89 50 44             	mov    %edx,0x44(%eax)
f010466c:	eb 0b                	jmp    f0104679 <remove_from_queue+0x93>
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 50 44             	mov    0x44(%eax),%edx
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	89 10                	mov    %edx,(%eax)
f0104679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104683:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104686:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010468d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104690:	8b 40 0c             	mov    0xc(%eax),%eax
f0104693:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104696:	8b 45 08             	mov    0x8(%ebp),%eax
f0104699:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010469c:	90                   	nop
f010469d:	c9                   	leave  
f010469e:	c3                   	ret    

f010469f <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010469f:	55                   	push   %ebp
f01046a0:	89 e5                	mov    %esp,%ebp
f01046a2:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046a9:	75 07                	jne    f01046b2 <find_env_in_queue+0x13>
f01046ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b0:	eb 58                	jmp    f010470a <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bc:	8b 00                	mov    (%eax),%eax
f01046be:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c1:	eb 19                	jmp    f01046dc <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046cc:	75 05                	jne    f01046d3 <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046d1:	eb 37                	jmp    f010470a <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d6:	8b 40 08             	mov    0x8(%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046e0:	74 08                	je     f01046ea <find_env_in_queue+0x4b>
f01046e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e5:	8b 40 44             	mov    0x44(%eax),%eax
f01046e8:	eb 05                	jmp    f01046ef <find_env_in_queue+0x50>
f01046ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01046ef:	8b 55 08             	mov    0x8(%ebp),%edx
f01046f2:	89 42 08             	mov    %eax,0x8(%edx)
f01046f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f8:	8b 40 08             	mov    0x8(%eax),%eax
f01046fb:	85 c0                	test   %eax,%eax
f01046fd:	75 c4                	jne    f01046c3 <find_env_in_queue+0x24>
f01046ff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104703:	75 be                	jne    f01046c3 <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010470a:	c9                   	leave  
f010470b:	c3                   	ret    

f010470c <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010470c:	55                   	push   %ebp
f010470d:	89 e5                	mov    %esp,%ebp
f010470f:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104712:	83 ec 04             	sub    $0x4,%esp
f0104715:	68 e0 5d 13 f0       	push   $0xf0135de0
f010471a:	6a 5e                	push   $0x5e
f010471c:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0104721:	e8 df ba ff ff       	call   f0100205 <_panic>

f0104726 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104726:	55                   	push   %ebp
f0104727:	89 e5                	mov    %esp,%ebp
f0104729:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010472c:	e8 1b c0 02 00       	call   f013074c <chk1>
	scheduler_status = SCH_STARTED;
f0104731:	c7 05 58 1d 88 f0 01 	movl   $0x1,0xf0881d58
f0104738:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010473b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104742:	a1 4c 1d 88 f0       	mov    0xf0881d4c,%eax
f0104747:	85 c0                	test   %eax,%eax
f0104749:	75 4d                	jne    f0104798 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010474b:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0104750:	85 c0                	test   %eax,%eax
f0104752:	74 18                	je     f010476c <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104754:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010475a:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010475f:	83 ec 08             	sub    $0x8,%esp
f0104762:	52                   	push   %edx
f0104763:	50                   	push   %eax
f0104764:	e8 34 fd ff ff       	call   f010449d <enqueue>
f0104769:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010476c:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 b4 fd ff ff       	call   f010452e <dequeue>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104780:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0104785:	8a 00                	mov    (%eax),%al
f0104787:	0f b6 c0             	movzbl %al,%eax
f010478a:	83 ec 0c             	sub    $0xc,%esp
f010478d:	50                   	push   %eax
f010478e:	e8 e7 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104793:	83 c4 10             	add    $0x10,%esp
f0104796:	eb 12                	jmp    f01047aa <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104798:	a1 4c 1d 88 f0       	mov    0xf0881d4c,%eax
f010479d:	83 f8 01             	cmp    $0x1,%eax
f01047a0:	75 08                	jne    f01047aa <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047a2:	e8 65 ff ff ff       	call   f010470c <fos_scheduler_MLFQ>
f01047a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047aa:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01047af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047b5:	a3 f4 13 88 f0       	mov    %eax,0xf08813f4
	chk2(next_env) ;
f01047ba:	83 ec 0c             	sub    $0xc,%esp
f01047bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c0:	e8 c4 bf 02 00       	call   f0130789 <chk2>
f01047c5:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047cb:	a3 f4 13 88 f0       	mov    %eax,0xf08813f4

	//sched_print_all();

	if(next_env != NULL)
f01047d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047d4:	74 0b                	je     f01047e1 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047d6:	83 ec 0c             	sub    $0xc,%esp
f01047d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01047dc:	e8 80 54 00 00       	call   f0109c61 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047e1:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f01047e8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047eb:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01047f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047f6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047f9:	c7 05 58 1d 88 f0 00 	movl   $0x0,0xf0881d58
f0104800:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104803:	83 ec 0c             	sub    $0xc,%esp
f0104806:	6a 00                	push   $0x0
f0104808:	e8 27 c5 ff ff       	call   f0100d34 <run_command_prompt>
f010480d:	83 c4 10             	add    $0x10,%esp
f0104810:	eb f1                	jmp    f0104803 <fos_scheduler+0xdd>

f0104812 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104812:	55                   	push   %ebp
f0104813:	89 e5                	mov    %esp,%ebp
f0104815:	83 ec 18             	sub    $0x18,%esp
f0104818:	8b 45 08             	mov    0x8(%ebp),%eax
f010481b:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010481e:	c6 05 80 1d 88 f0 01 	movb   $0x1,0xf0881d80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104825:	e8 e5 00 00 00       	call   f010490f <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010482a:	83 ec 0c             	sub    $0xc,%esp
f010482d:	6a 10                	push   $0x10
f010482f:	e8 46 32 00 00       	call   f0107a7a <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 e8 1c 88 f0       	mov    %eax,0xf0881ce8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010483c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0104841:	0f b6 c0             	movzbl %al,%eax
f0104844:	83 ec 0c             	sub    $0xc,%esp
f0104847:	50                   	push   %eax
f0104848:	e8 2d 32 00 00       	call   f0107a7a <kmalloc>
f010484d:	83 c4 10             	add    $0x10,%esp
f0104850:	a3 2c 1d 88 f0       	mov    %eax,0xf0881d2c
#endif
	quantums[0] = quantum;
f0104855:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f010485a:	8a 55 f4             	mov    -0xc(%ebp),%dl
f010485d:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010485f:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0104864:	8a 00                	mov    (%eax),%al
f0104866:	0f b6 c0             	movzbl %al,%eax
f0104869:	83 ec 0c             	sub    $0xc,%esp
f010486c:	50                   	push   %eax
f010486d:	e8 08 fa ff ff       	call   f010427a <kclock_set_quantum>
f0104872:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104875:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010487a:	83 ec 0c             	sub    $0xc,%esp
f010487d:	50                   	push   %eax
f010487e:	e8 d9 fb ff ff       	call   f010445c <init_queue>
f0104883:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0104886:	c7 05 58 1d 88 f0 00 	movl   $0x0,0xf0881d58
f010488d:	00 00 00 
	scheduler_method = SCH_RR;
f0104890:	c7 05 4c 1d 88 f0 00 	movl   $0x0,0xf0881d4c
f0104897:	00 00 00 
	//=========================================
	//=========================================
}
f010489a:	90                   	nop
f010489b:	c9                   	leave  
f010489c:	c3                   	ret    

f010489d <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010489d:	55                   	push   %ebp
f010489e:	89 e5                	mov    %esp,%ebp
f01048a0:	83 ec 18             	sub    $0x18,%esp
f01048a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a6:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048a9:	e8 61 00 00 00       	call   f010490f <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048ae:	83 ec 04             	sub    $0x4,%esp
f01048b1:	68 14 5e 13 f0       	push   $0xf0135e14
f01048b6:	68 d1 00 00 00       	push   $0xd1
f01048bb:	68 8b 5d 13 f0       	push   $0xf0135d8b
f01048c0:	e8 40 b9 ff ff       	call   f0100205 <_panic>

f01048c5 <sched_init>:

}


void sched_init()
{
f01048c5:	55                   	push   %ebp
f01048c6:	89 e5                	mov    %esp,%ebp
f01048c8:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048cb:	c7 05 08 1d 88 f0 00 	movl   $0x0,0xf0881d08
f01048d2:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048d5:	83 ec 0c             	sub    $0xc,%esp
f01048d8:	6a 0a                	push   $0xa
f01048da:	e8 33 ff ff ff       	call   f0104812 <sched_init_RR>
f01048df:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048e2:	83 ec 0c             	sub    $0xc,%esp
f01048e5:	68 3c 1d 88 f0       	push   $0xf0881d3c
f01048ea:	e8 6d fb ff ff       	call   f010445c <init_queue>
f01048ef:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048f2:	83 ec 0c             	sub    $0xc,%esp
f01048f5:	68 f4 1c 88 f0       	push   $0xf0881cf4
f01048fa:	e8 5d fb ff ff       	call   f010445c <init_queue>
f01048ff:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f0104902:	c7 05 58 1d 88 f0 00 	movl   $0x0,0xf0881d58
f0104909:	00 00 00 
}
f010490c:	90                   	nop
f010490d:	c9                   	leave  
f010490e:	c3                   	ret    

f010490f <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010490f:	55                   	push   %ebp
f0104910:	89 e5                	mov    %esp,%ebp
f0104912:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104915:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010491a:	85 c0                	test   %eax,%eax
f010491c:	74 11                	je     f010492f <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f010491e:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104923:	83 ec 0c             	sub    $0xc,%esp
f0104926:	50                   	push   %eax
f0104927:	e8 19 32 00 00       	call   f0107b45 <kfree>
f010492c:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010492f:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f0104934:	85 c0                	test   %eax,%eax
f0104936:	74 11                	je     f0104949 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104938:	a1 2c 1d 88 f0       	mov    0xf0881d2c,%eax
f010493d:	83 ec 0c             	sub    $0xc,%esp
f0104940:	50                   	push   %eax
f0104941:	e8 ff 31 00 00       	call   f0107b45 <kfree>
f0104946:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104949:	90                   	nop
f010494a:	c9                   	leave  
f010494b:	c3                   	ret    

f010494c <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010494c:	55                   	push   %ebp
f010494d:	89 e5                	mov    %esp,%ebp
f010494f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104952:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104956:	74 1e                	je     f0104976 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104958:	8b 45 08             	mov    0x8(%ebp),%eax
f010495b:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104962:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104967:	83 ec 08             	sub    $0x8,%esp
f010496a:	ff 75 08             	pushl  0x8(%ebp)
f010496d:	50                   	push   %eax
f010496e:	e8 2a fb ff ff       	call   f010449d <enqueue>
f0104973:	83 c4 10             	add    $0x10,%esp
	}
}
f0104976:	90                   	nop
f0104977:	c9                   	leave  
f0104978:	c3                   	ret    

f0104979 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104979:	55                   	push   %ebp
f010497a:	89 e5                	mov    %esp,%ebp
f010497c:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010497f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104983:	0f 84 fe 00 00 00    	je     f0104a87 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104989:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104990:	e9 e1 00 00 00       	jmp    f0104a76 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104995:	8b 45 08             	mov    0x8(%ebp),%eax
f0104998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010499b:	89 c2                	mov    %eax,%edx
f010499d:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01049a2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049a5:	c1 e1 04             	shl    $0x4,%ecx
f01049a8:	01 c8                	add    %ecx,%eax
f01049aa:	52                   	push   %edx
f01049ab:	50                   	push   %eax
f01049ac:	e8 ee fc ff ff       	call   f010469f <find_env_in_queue>
f01049b1:	83 c4 08             	add    $0x8,%esp
f01049b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049bb:	0f 84 b2 00 00 00    	je     f0104a73 <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049c5:	75 17                	jne    f01049de <sched_remove_ready+0x65>
f01049c7:	83 ec 04             	sub    $0x4,%esp
f01049ca:	68 bf 5d 13 f0       	push   $0xf0135dbf
f01049cf:	68 0b 01 00 00       	push   $0x10b
f01049d4:	68 8b 5d 13 f0       	push   $0xf0135d8b
f01049d9:	e8 27 b8 ff ff       	call   f0100205 <_panic>
f01049de:	8b 45 08             	mov    0x8(%ebp),%eax
f01049e1:	8b 40 44             	mov    0x44(%eax),%eax
f01049e4:	85 c0                	test   %eax,%eax
f01049e6:	74 11                	je     f01049f9 <sched_remove_ready+0x80>
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	8b 40 44             	mov    0x44(%eax),%eax
f01049ee:	8b 55 08             	mov    0x8(%ebp),%edx
f01049f1:	8b 52 48             	mov    0x48(%edx),%edx
f01049f4:	89 50 48             	mov    %edx,0x48(%eax)
f01049f7:	eb 16                	jmp    f0104a0f <sched_remove_ready+0x96>
f01049f9:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01049fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a01:	c1 e2 04             	shl    $0x4,%edx
f0104a04:	01 c2                	add    %eax,%edx
f0104a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a09:	8b 40 48             	mov    0x48(%eax),%eax
f0104a0c:	89 42 04             	mov    %eax,0x4(%edx)
f0104a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a12:	8b 40 48             	mov    0x48(%eax),%eax
f0104a15:	85 c0                	test   %eax,%eax
f0104a17:	74 11                	je     f0104a2a <sched_remove_ready+0xb1>
f0104a19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104a1f:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a22:	8b 52 44             	mov    0x44(%edx),%edx
f0104a25:	89 50 44             	mov    %edx,0x44(%eax)
f0104a28:	eb 15                	jmp    f0104a3f <sched_remove_ready+0xc6>
f0104a2a:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a32:	c1 e2 04             	shl    $0x4,%edx
f0104a35:	01 c2                	add    %eax,%edx
f0104a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3d:	89 02                	mov    %eax,(%edx)
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a53:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5b:	c1 e2 04             	shl    $0x4,%edx
f0104a5e:	01 d0                	add    %edx,%eax
f0104a60:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a63:	4a                   	dec    %edx
f0104a64:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a71:	eb 14                	jmp    f0104a87 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a73:	ff 45 f4             	incl   -0xc(%ebp)
f0104a76:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0104a7b:	0f b6 c0             	movzbl %al,%eax
f0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a81:	0f 8f 0e ff ff ff    	jg     f0104995 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a87:	c9                   	leave  
f0104a88:	c3                   	ret    

f0104a89 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a89:	55                   	push   %ebp
f0104a8a:	89 e5                	mov    %esp,%ebp
f0104a8c:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a93:	74 1d                	je     f0104ab2 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a98:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a9f:	83 ec 08             	sub    $0x8,%esp
f0104aa2:	ff 75 08             	pushl  0x8(%ebp)
f0104aa5:	68 3c 1d 88 f0       	push   $0xf0881d3c
f0104aaa:	e8 ee f9 ff ff       	call   f010449d <enqueue>
f0104aaf:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104abb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104abf:	0f 84 92 00 00 00    	je     f0104b57 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ac9:	75 17                	jne    f0104ae2 <sched_remove_new+0x2d>
f0104acb:	83 ec 04             	sub    $0x4,%esp
f0104ace:	68 bf 5d 13 f0       	push   $0xf0135dbf
f0104ad3:	68 1f 01 00 00       	push   $0x11f
f0104ad8:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0104add:	e8 23 b7 ff ff       	call   f0100205 <_panic>
f0104ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae5:	8b 40 44             	mov    0x44(%eax),%eax
f0104ae8:	85 c0                	test   %eax,%eax
f0104aea:	74 11                	je     f0104afd <sched_remove_new+0x48>
f0104aec:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aef:	8b 40 44             	mov    0x44(%eax),%eax
f0104af2:	8b 55 08             	mov    0x8(%ebp),%edx
f0104af5:	8b 52 48             	mov    0x48(%edx),%edx
f0104af8:	89 50 48             	mov    %edx,0x48(%eax)
f0104afb:	eb 0b                	jmp    f0104b08 <sched_remove_new+0x53>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 48             	mov    0x48(%eax),%eax
f0104b03:	a3 40 1d 88 f0       	mov    %eax,0xf0881d40
f0104b08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b0e:	85 c0                	test   %eax,%eax
f0104b10:	74 11                	je     f0104b23 <sched_remove_new+0x6e>
f0104b12:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b15:	8b 40 48             	mov    0x48(%eax),%eax
f0104b18:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b1b:	8b 52 44             	mov    0x44(%edx),%edx
f0104b1e:	89 50 44             	mov    %edx,0x44(%eax)
f0104b21:	eb 0b                	jmp    f0104b2e <sched_remove_new+0x79>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 44             	mov    0x44(%eax),%eax
f0104b29:	a3 3c 1d 88 f0       	mov    %eax,0xf0881d3c
f0104b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b31:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b38:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b3b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b42:	a1 48 1d 88 f0       	mov    0xf0881d48,%eax
f0104b47:	48                   	dec    %eax
f0104b48:	a3 48 1d 88 f0       	mov    %eax,0xf0881d48
		env->env_status = ENV_UNKNOWN;
f0104b4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b50:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b57:	90                   	nop
f0104b58:	c9                   	leave  
f0104b59:	c3                   	ret    

f0104b5a <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b64:	74 34                	je     f0104b9a <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b66:	e8 8f 94 00 00       	call   f010dffa <isBufferingEnabled>
f0104b6b:	84 c0                	test   %al,%al
f0104b6d:	74 0e                	je     f0104b7d <sched_insert_exit+0x23>
f0104b6f:	83 ec 0c             	sub    $0xc,%esp
f0104b72:	ff 75 08             	pushl  0x8(%ebp)
f0104b75:	e8 55 65 00 00       	call   f010b0cf <cleanup_buffers>
f0104b7a:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b80:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b87:	83 ec 08             	sub    $0x8,%esp
f0104b8a:	ff 75 08             	pushl  0x8(%ebp)
f0104b8d:	68 f4 1c 88 f0       	push   $0xf0881cf4
f0104b92:	e8 06 f9 ff ff       	call   f010449d <enqueue>
f0104b97:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b9a:	90                   	nop
f0104b9b:	c9                   	leave  
f0104b9c:	c3                   	ret    

f0104b9d <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b9d:	55                   	push   %ebp
f0104b9e:	89 e5                	mov    %esp,%ebp
f0104ba0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ba3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ba7:	0f 84 92 00 00 00    	je     f0104c3f <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bb1:	75 17                	jne    f0104bca <sched_remove_exit+0x2d>
f0104bb3:	83 ec 04             	sub    $0x4,%esp
f0104bb6:	68 bf 5d 13 f0       	push   $0xf0135dbf
f0104bbb:	68 31 01 00 00       	push   $0x131
f0104bc0:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0104bc5:	e8 3b b6 ff ff       	call   f0100205 <_panic>
f0104bca:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcd:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd0:	85 c0                	test   %eax,%eax
f0104bd2:	74 11                	je     f0104be5 <sched_remove_exit+0x48>
f0104bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bd7:	8b 40 44             	mov    0x44(%eax),%eax
f0104bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bdd:	8b 52 48             	mov    0x48(%edx),%edx
f0104be0:	89 50 48             	mov    %edx,0x48(%eax)
f0104be3:	eb 0b                	jmp    f0104bf0 <sched_remove_exit+0x53>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 48             	mov    0x48(%eax),%eax
f0104beb:	a3 f8 1c 88 f0       	mov    %eax,0xf0881cf8
f0104bf0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf3:	8b 40 48             	mov    0x48(%eax),%eax
f0104bf6:	85 c0                	test   %eax,%eax
f0104bf8:	74 11                	je     f0104c0b <sched_remove_exit+0x6e>
f0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bfd:	8b 40 48             	mov    0x48(%eax),%eax
f0104c00:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c03:	8b 52 44             	mov    0x44(%edx),%edx
f0104c06:	89 50 44             	mov    %edx,0x44(%eax)
f0104c09:	eb 0b                	jmp    f0104c16 <sched_remove_exit+0x79>
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104c11:	a3 f4 1c 88 f0       	mov    %eax,0xf0881cf4
f0104c16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c19:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c23:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c2a:	a1 00 1d 88 f0       	mov    0xf0881d00,%eax
f0104c2f:	48                   	dec    %eax
f0104c30:	a3 00 1d 88 f0       	mov    %eax,0xf0881d00
		env->env_status = ENV_UNKNOWN;
f0104c35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c38:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c3f:	90                   	nop
f0104c40:	c9                   	leave  
f0104c41:	c3                   	ret    

f0104c42 <sched_print_all>:

void sched_print_all()
{
f0104c42:	55                   	push   %ebp
f0104c43:	89 e5                	mov    %esp,%ebp
f0104c45:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c48:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104c4d:	85 c0                	test   %eax,%eax
f0104c4f:	74 6c                	je     f0104cbd <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c51:	83 ec 0c             	sub    $0xc,%esp
f0104c54:	68 44 5e 13 f0       	push   $0xf0135e44
f0104c59:	e8 b0 c0 ff ff       	call   f0100d0e <cprintf>
f0104c5e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c61:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c69:	eb 29                	jmp    f0104c94 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c6e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c77:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c7a:	83 ec 04             	sub    $0x4,%esp
f0104c7d:	52                   	push   %edx
f0104c7e:	50                   	push   %eax
f0104c7f:	68 66 5e 13 f0       	push   $0xf0135e66
f0104c84:	e8 85 c0 ff ff       	call   f0100d0e <cprintf>
f0104c89:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c8c:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c98:	74 08                	je     f0104ca2 <sched_print_all+0x60>
f0104c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c9d:	8b 40 44             	mov    0x44(%eax),%eax
f0104ca0:	eb 05                	jmp    f0104ca7 <sched_print_all+0x65>
f0104ca2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ca7:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f0104cac:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104cb1:	85 c0                	test   %eax,%eax
f0104cb3:	75 b6                	jne    f0104c6b <sched_print_all+0x29>
f0104cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb9:	75 b0                	jne    f0104c6b <sched_print_all+0x29>
f0104cbb:	eb 10                	jmp    f0104ccd <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cbd:	83 ec 0c             	sub    $0xc,%esp
f0104cc0:	68 70 5e 13 f0       	push   $0xf0135e70
f0104cc5:	e8 44 c0 ff ff       	call   f0100d0e <cprintf>
f0104cca:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ccd:	83 ec 0c             	sub    $0xc,%esp
f0104cd0:	68 8c 5e 13 f0       	push   $0xf0135e8c
f0104cd5:	e8 34 c0 ff ff       	call   f0100d0e <cprintf>
f0104cda:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ce4:	e9 ca 00 00 00       	jmp    f0104db3 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ce9:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104cee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf1:	c1 e2 04             	shl    $0x4,%edx
f0104cf4:	01 d0                	add    %edx,%eax
f0104cf6:	8b 00                	mov    (%eax),%eax
f0104cf8:	85 c0                	test   %eax,%eax
f0104cfa:	0f 84 8d 00 00 00    	je     f0104d8d <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d00:	83 ec 08             	sub    $0x8,%esp
f0104d03:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d06:	68 c0 5e 13 f0       	push   $0xf0135ec0
f0104d0b:	e8 fe bf ff ff       	call   f0100d0e <cprintf>
f0104d10:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d13:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d1b:	c1 e2 04             	shl    $0x4,%edx
f0104d1e:	01 d0                	add    %edx,%eax
f0104d20:	8b 00                	mov    (%eax),%eax
f0104d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d25:	eb 34                	jmp    f0104d5b <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d33:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d36:	83 ec 04             	sub    $0x4,%esp
f0104d39:	52                   	push   %edx
f0104d3a:	50                   	push   %eax
f0104d3b:	68 66 5e 13 f0       	push   $0xf0135e66
f0104d40:	e8 c9 bf ff ff       	call   f0100d0e <cprintf>
f0104d45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d48:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104d4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d50:	c1 e2 04             	shl    $0x4,%edx
f0104d53:	01 d0                	add    %edx,%eax
f0104d55:	8b 40 08             	mov    0x8(%eax),%eax
f0104d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5b:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104d60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d63:	c1 e2 04             	shl    $0x4,%edx
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d6c:	74 08                	je     f0104d76 <sched_print_all+0x134>
f0104d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d71:	8b 52 44             	mov    0x44(%edx),%edx
f0104d74:	eb 05                	jmp    f0104d7b <sched_print_all+0x139>
f0104d76:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d7b:	89 50 08             	mov    %edx,0x8(%eax)
f0104d7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104d81:	85 c0                	test   %eax,%eax
f0104d83:	75 a2                	jne    f0104d27 <sched_print_all+0xe5>
f0104d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d89:	75 9c                	jne    f0104d27 <sched_print_all+0xe5>
f0104d8b:	eb 13                	jmp    f0104da0 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d8d:	83 ec 08             	sub    $0x8,%esp
f0104d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d93:	68 e8 5e 13 f0       	push   $0xf0135ee8
f0104d98:	e8 71 bf ff ff       	call   f0100d0e <cprintf>
f0104d9d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104da0:	83 ec 0c             	sub    $0xc,%esp
f0104da3:	68 8c 5e 13 f0       	push   $0xf0135e8c
f0104da8:	e8 61 bf ff ff       	call   f0100d0e <cprintf>
f0104dad:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104db0:	ff 45 f0             	incl   -0x10(%ebp)
f0104db3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0104db8:	0f b6 c0             	movzbl %al,%eax
f0104dbb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dbe:	0f 8f 25 ff ff ff    	jg     f0104ce9 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dc4:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0104dc9:	85 c0                	test   %eax,%eax
f0104dcb:	74 6c                	je     f0104e39 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104dcd:	83 ec 0c             	sub    $0xc,%esp
f0104dd0:	68 0c 5f 13 f0       	push   $0xf0135f0c
f0104dd5:	e8 34 bf ff ff       	call   f0100d0e <cprintf>
f0104dda:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104ddd:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0104de2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104de5:	eb 29                	jmp    f0104e10 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dea:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104df3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104df6:	83 ec 04             	sub    $0x4,%esp
f0104df9:	52                   	push   %edx
f0104dfa:	50                   	push   %eax
f0104dfb:	68 66 5e 13 f0       	push   $0xf0135e66
f0104e00:	e8 09 bf ff ff       	call   f0100d0e <cprintf>
f0104e05:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e08:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0104e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e14:	74 08                	je     f0104e1e <sched_print_all+0x1dc>
f0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e19:	8b 40 44             	mov    0x44(%eax),%eax
f0104e1c:	eb 05                	jmp    f0104e23 <sched_print_all+0x1e1>
f0104e1e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e23:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f0104e28:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0104e2d:	85 c0                	test   %eax,%eax
f0104e2f:	75 b6                	jne    f0104de7 <sched_print_all+0x1a5>
f0104e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e35:	75 b0                	jne    f0104de7 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e37:	eb 10                	jmp    f0104e49 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e39:	83 ec 0c             	sub    $0xc,%esp
f0104e3c:	68 2e 5f 13 f0       	push   $0xf0135f2e
f0104e41:	e8 c8 be ff ff       	call   f0100d0e <cprintf>
f0104e46:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e49:	90                   	nop
f0104e4a:	c9                   	leave  
f0104e4b:	c3                   	ret    

f0104e4c <sched_run_all>:

void sched_run_all()
{
f0104e4c:	55                   	push   %ebp
f0104e4d:	89 e5                	mov    %esp,%ebp
f0104e4f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e59:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e61:	eb 24                	jmp    f0104e87 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e63:	83 ec 0c             	sub    $0xc,%esp
f0104e66:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e69:	e8 47 fc ff ff       	call   f0104ab5 <sched_remove_new>
f0104e6e:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e71:	83 ec 0c             	sub    $0xc,%esp
f0104e74:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e77:	e8 d0 fa ff ff       	call   f010494c <sched_insert_ready>
f0104e7c:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e7f:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8b:	74 08                	je     f0104e95 <sched_run_all+0x49>
f0104e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e90:	8b 40 44             	mov    0x44(%eax),%eax
f0104e93:	eb 05                	jmp    f0104e9a <sched_run_all+0x4e>
f0104e95:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e9a:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f0104e9f:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104ea4:	85 c0                	test   %eax,%eax
f0104ea6:	75 bb                	jne    f0104e63 <sched_run_all+0x17>
f0104ea8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104eac:	75 b5                	jne    f0104e63 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104eae:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f0104eb3:	85 c0                	test   %eax,%eax
f0104eb5:	75 05                	jne    f0104ebc <sched_run_all+0x70>
		fos_scheduler();
f0104eb7:	e8 6a f8 ff ff       	call   f0104726 <fos_scheduler>
}
f0104ebc:	90                   	nop
f0104ebd:	c9                   	leave  
f0104ebe:	c3                   	ret    

f0104ebf <sched_kill_all>:

void sched_kill_all()
{
f0104ebf:	55                   	push   %ebp
f0104ec0:	89 e5                	mov    %esp,%ebp
f0104ec2:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ec5:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104eca:	85 c0                	test   %eax,%eax
f0104ecc:	0f 84 98 00 00 00    	je     f0104f6a <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104ed2:	83 ec 0c             	sub    $0xc,%esp
f0104ed5:	68 4c 5f 13 f0       	push   $0xf0135f4c
f0104eda:	e8 2f be ff ff       	call   f0100d0e <cprintf>
f0104edf:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ee2:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0104ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104eea:	eb 55                	jmp    f0104f41 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eef:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef8:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104efb:	83 ec 04             	sub    $0x4,%esp
f0104efe:	52                   	push   %edx
f0104eff:	50                   	push   %eax
f0104f00:	68 78 5f 13 f0       	push   $0xf0135f78
f0104f05:	e8 04 be ff ff       	call   f0100d0e <cprintf>
f0104f0a:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f0d:	83 ec 0c             	sub    $0xc,%esp
f0104f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f13:	e8 9d fb ff ff       	call   f0104ab5 <sched_remove_new>
f0104f18:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f1b:	83 ec 0c             	sub    $0xc,%esp
f0104f1e:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f21:	e8 8f 4d 00 00       	call   f0109cb5 <env_free>
f0104f26:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f29:	83 ec 0c             	sub    $0xc,%esp
f0104f2c:	68 8b 5f 13 f0       	push   $0xf0135f8b
f0104f31:	e8 d8 bd ff ff       	call   f0100d0e <cprintf>
f0104f36:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f39:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f45:	74 08                	je     f0104f4f <sched_kill_all+0x90>
f0104f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4d:	eb 05                	jmp    f0104f54 <sched_kill_all+0x95>
f0104f4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f54:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f0104f59:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0104f5e:	85 c0                	test   %eax,%eax
f0104f60:	75 8a                	jne    f0104eec <sched_kill_all+0x2d>
f0104f62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f66:	75 84                	jne    f0104eec <sched_kill_all+0x2d>
f0104f68:	eb 10                	jmp    f0104f7a <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f6a:	83 ec 0c             	sub    $0xc,%esp
f0104f6d:	68 91 5f 13 f0       	push   $0xf0135f91
f0104f72:	e8 97 bd ff ff       	call   f0100d0e <cprintf>
f0104f77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f7a:	83 ec 0c             	sub    $0xc,%esp
f0104f7d:	68 8c 5e 13 f0       	push   $0xf0135e8c
f0104f82:	e8 87 bd ff ff       	call   f0100d0e <cprintf>
f0104f87:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f91:	e9 99 01 00 00       	jmp    f010512f <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f96:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f9e:	c1 e2 04             	shl    $0x4,%edx
f0104fa1:	01 d0                	add    %edx,%eax
f0104fa3:	8b 00                	mov    (%eax),%eax
f0104fa5:	85 c0                	test   %eax,%eax
f0104fa7:	0f 84 5c 01 00 00    	je     f0105109 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fad:	83 ec 08             	sub    $0x8,%esp
f0104fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fb3:	68 ac 5f 13 f0       	push   $0xf0135fac
f0104fb8:	e8 51 bd ff ff       	call   f0100d0e <cprintf>
f0104fbd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fc0:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0104fc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fc8:	c1 e2 04             	shl    $0x4,%edx
f0104fcb:	01 d0                	add    %edx,%eax
f0104fcd:	8b 00                	mov    (%eax),%eax
f0104fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd2:	e9 f8 00 00 00       	jmp    f01050cf <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fda:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe6:	83 ec 04             	sub    $0x4,%esp
f0104fe9:	52                   	push   %edx
f0104fea:	50                   	push   %eax
f0104feb:	68 78 5f 13 f0       	push   $0xf0135f78
f0104ff0:	e8 19 bd ff ff       	call   f0100d0e <cprintf>
f0104ff5:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104ff8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ffc:	75 17                	jne    f0105015 <sched_kill_all+0x156>
f0104ffe:	83 ec 04             	sub    $0x4,%esp
f0105001:	68 bf 5d 13 f0       	push   $0xf0135dbf
f0105006:	68 8c 01 00 00       	push   $0x18c
f010500b:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0105010:	e8 f0 b1 ff ff       	call   f0100205 <_panic>
f0105015:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105018:	8b 40 44             	mov    0x44(%eax),%eax
f010501b:	85 c0                	test   %eax,%eax
f010501d:	74 11                	je     f0105030 <sched_kill_all+0x171>
f010501f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105022:	8b 40 44             	mov    0x44(%eax),%eax
f0105025:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105028:	8b 52 48             	mov    0x48(%edx),%edx
f010502b:	89 50 48             	mov    %edx,0x48(%eax)
f010502e:	eb 16                	jmp    f0105046 <sched_kill_all+0x187>
f0105030:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105035:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105038:	c1 e2 04             	shl    $0x4,%edx
f010503b:	01 c2                	add    %eax,%edx
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 48             	mov    0x48(%eax),%eax
f0105043:	89 42 04             	mov    %eax,0x4(%edx)
f0105046:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105049:	8b 40 48             	mov    0x48(%eax),%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	74 11                	je     f0105061 <sched_kill_all+0x1a2>
f0105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105053:	8b 40 48             	mov    0x48(%eax),%eax
f0105056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105059:	8b 52 44             	mov    0x44(%edx),%edx
f010505c:	89 50 44             	mov    %edx,0x44(%eax)
f010505f:	eb 15                	jmp    f0105076 <sched_kill_all+0x1b7>
f0105061:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105069:	c1 e2 04             	shl    $0x4,%edx
f010506c:	01 c2                	add    %eax,%edx
f010506e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105071:	8b 40 44             	mov    0x44(%eax),%eax
f0105074:	89 02                	mov    %eax,(%edx)
f0105076:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105079:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105083:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010508a:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010508f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105092:	c1 e2 04             	shl    $0x4,%edx
f0105095:	01 d0                	add    %edx,%eax
f0105097:	8b 50 0c             	mov    0xc(%eax),%edx
f010509a:	4a                   	dec    %edx
f010509b:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f010509e:	83 ec 0c             	sub    $0xc,%esp
f01050a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050a4:	e8 0c 4c 00 00       	call   f0109cb5 <env_free>
f01050a9:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050ac:	83 ec 0c             	sub    $0xc,%esp
f01050af:	68 8b 5f 13 f0       	push   $0xf0135f8b
f01050b4:	e8 55 bc ff ff       	call   f0100d0e <cprintf>
f01050b9:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050bc:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01050c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050c4:	c1 e2 04             	shl    $0x4,%edx
f01050c7:	01 d0                	add    %edx,%eax
f01050c9:	8b 40 08             	mov    0x8(%eax),%eax
f01050cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050cf:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01050d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050d7:	c1 e2 04             	shl    $0x4,%edx
f01050da:	01 d0                	add    %edx,%eax
f01050dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e0:	74 08                	je     f01050ea <sched_kill_all+0x22b>
f01050e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050e5:	8b 52 44             	mov    0x44(%edx),%edx
f01050e8:	eb 05                	jmp    f01050ef <sched_kill_all+0x230>
f01050ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01050ef:	89 50 08             	mov    %edx,0x8(%eax)
f01050f2:	8b 40 08             	mov    0x8(%eax),%eax
f01050f5:	85 c0                	test   %eax,%eax
f01050f7:	0f 85 da fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f01050fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105101:	0f 85 d0 fe ff ff    	jne    f0104fd7 <sched_kill_all+0x118>
f0105107:	eb 13                	jmp    f010511c <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105109:	83 ec 08             	sub    $0x8,%esp
f010510c:	ff 75 f0             	pushl  -0x10(%ebp)
f010510f:	68 e8 5e 13 f0       	push   $0xf0135ee8
f0105114:	e8 f5 bb ff ff       	call   f0100d0e <cprintf>
f0105119:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010511c:	83 ec 0c             	sub    $0xc,%esp
f010511f:	68 8c 5e 13 f0       	push   $0xf0135e8c
f0105124:	e8 e5 bb ff ff       	call   f0100d0e <cprintf>
f0105129:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010512c:	ff 45 f0             	incl   -0x10(%ebp)
f010512f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0105134:	0f b6 c0             	movzbl %al,%eax
f0105137:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010513a:	0f 8f 56 fe ff ff    	jg     f0104f96 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105140:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0105145:	85 c0                	test   %eax,%eax
f0105147:	0f 84 98 00 00 00    	je     f01051e5 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010514d:	83 ec 0c             	sub    $0xc,%esp
f0105150:	68 e0 5f 13 f0       	push   $0xf0135fe0
f0105155:	e8 b4 bb ff ff       	call   f0100d0e <cprintf>
f010515a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010515d:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105165:	eb 55                	jmp    f01051bc <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105173:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105176:	83 ec 04             	sub    $0x4,%esp
f0105179:	52                   	push   %edx
f010517a:	50                   	push   %eax
f010517b:	68 78 5f 13 f0       	push   $0xf0135f78
f0105180:	e8 89 bb ff ff       	call   f0100d0e <cprintf>
f0105185:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105188:	83 ec 0c             	sub    $0xc,%esp
f010518b:	ff 75 f4             	pushl  -0xc(%ebp)
f010518e:	e8 0a fa ff ff       	call   f0104b9d <sched_remove_exit>
f0105193:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105196:	83 ec 0c             	sub    $0xc,%esp
f0105199:	ff 75 f4             	pushl  -0xc(%ebp)
f010519c:	e8 14 4b 00 00       	call   f0109cb5 <env_free>
f01051a1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051a4:	83 ec 0c             	sub    $0xc,%esp
f01051a7:	68 8b 5f 13 f0       	push   $0xf0135f8b
f01051ac:	e8 5d bb ff ff       	call   f0100d0e <cprintf>
f01051b1:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051b4:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f01051b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c0:	74 08                	je     f01051ca <sched_kill_all+0x30b>
f01051c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051c5:	8b 40 44             	mov    0x44(%eax),%eax
f01051c8:	eb 05                	jmp    f01051cf <sched_kill_all+0x310>
f01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01051cf:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f01051d4:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	75 8a                	jne    f0105167 <sched_kill_all+0x2a8>
f01051dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e1:	75 84                	jne    f0105167 <sched_kill_all+0x2a8>
f01051e3:	eb 10                	jmp    f01051f5 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051e5:	83 ec 0c             	sub    $0xc,%esp
f01051e8:	68 2e 5f 13 f0       	push   $0xf0135f2e
f01051ed:	e8 1c bb ff ff       	call   f0100d0e <cprintf>
f01051f2:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051f5:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f01051fc:	00 00 00 
	fos_scheduler();
f01051ff:	e8 22 f5 ff ff       	call   f0104726 <fos_scheduler>

f0105204 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105204:	55                   	push   %ebp
f0105205:	89 e5                	mov    %esp,%ebp
f0105207:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010520a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010520e:	74 0e                	je     f010521e <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105210:	83 ec 0c             	sub    $0xc,%esp
f0105213:	ff 75 08             	pushl  0x8(%ebp)
f0105216:	e8 6e f8 ff ff       	call   f0104a89 <sched_insert_new>
f010521b:	83 c4 10             	add    $0x10,%esp
	}
}
f010521e:	90                   	nop
f010521f:	c9                   	leave  
f0105220:	c3                   	ret    

f0105221 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105221:	55                   	push   %ebp
f0105222:	89 e5                	mov    %esp,%ebp
f0105224:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010522e:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0105233:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105236:	eb 3d                	jmp    f0105275 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010523e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105241:	75 2a                	jne    f010526d <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105243:	83 ec 0c             	sub    $0xc,%esp
f0105246:	ff 75 f4             	pushl  -0xc(%ebp)
f0105249:	e8 67 f8 ff ff       	call   f0104ab5 <sched_remove_new>
f010524e:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105251:	83 ec 0c             	sub    $0xc,%esp
f0105254:	ff 75 f4             	pushl  -0xc(%ebp)
f0105257:	e8 f0 f6 ff ff       	call   f010494c <sched_insert_ready>
f010525c:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010525f:	a1 58 1d 88 f0       	mov    0xf0881d58,%eax
f0105264:	85 c0                	test   %eax,%eax
f0105266:	75 36                	jne    f010529e <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105268:	e8 b9 f4 ff ff       	call   f0104726 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010526d:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0105272:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105275:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105279:	74 08                	je     f0105283 <sched_run_env+0x62>
f010527b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010527e:	8b 40 44             	mov    0x44(%eax),%eax
f0105281:	eb 05                	jmp    f0105288 <sched_run_env+0x67>
f0105283:	b8 00 00 00 00       	mov    $0x0,%eax
f0105288:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f010528d:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f0105292:	85 c0                	test   %eax,%eax
f0105294:	75 a2                	jne    f0105238 <sched_run_env+0x17>
f0105296:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529a:	75 9c                	jne    f0105238 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529c:	eb 01                	jmp    f010529f <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010529e:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010529f:	90                   	nop
f01052a0:	c9                   	leave  
f01052a1:	c3                   	ret    

f01052a2 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052a2:	55                   	push   %ebp
f01052a3:	89 e5                	mov    %esp,%ebp
f01052a5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ba:	75 59                	jne    f0105315 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052bc:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f01052c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052c4:	eb 28                	jmp    f01052ee <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052cf:	75 15                	jne    f01052e6 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052d1:	83 ec 0c             	sub    $0xc,%esp
f01052d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01052d7:	e8 d9 f7 ff ff       	call   f0104ab5 <sched_remove_new>
f01052dc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052e6:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f01052eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052f2:	74 08                	je     f01052fc <sched_exit_env+0x5a>
f01052f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f7:	8b 40 44             	mov    0x44(%eax),%eax
f01052fa:	eb 05                	jmp    f0105301 <sched_exit_env+0x5f>
f01052fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0105301:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f0105306:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f010530b:	85 c0                	test   %eax,%eax
f010530d:	75 b7                	jne    f01052c6 <sched_exit_env+0x24>
f010530f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105313:	75 b1                	jne    f01052c6 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105315:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105319:	0f 85 67 01 00 00    	jne    f0105486 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010531f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105326:	e9 47 01 00 00       	jmp    f0105472 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010532b:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105330:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105333:	c1 e2 04             	shl    $0x4,%edx
f0105336:	01 d0                	add    %edx,%eax
f0105338:	8b 00                	mov    (%eax),%eax
f010533a:	85 c0                	test   %eax,%eax
f010533c:	0f 84 27 01 00 00    	je     f0105469 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105342:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105349:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010534e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105351:	c1 e2 04             	shl    $0x4,%edx
f0105354:	01 d0                	add    %edx,%eax
f0105356:	8b 00                	mov    (%eax),%eax
f0105358:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535b:	e9 d1 00 00 00       	jmp    f0105431 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105363:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105366:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105369:	0f 85 af 00 00 00    	jne    f010541e <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010536f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105373:	75 17                	jne    f010538c <sched_exit_env+0xea>
f0105375:	83 ec 04             	sub    $0x4,%esp
f0105378:	68 bf 5d 13 f0       	push   $0xf0135dbf
f010537d:	68 f7 01 00 00       	push   $0x1f7
f0105382:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0105387:	e8 79 ae ff ff       	call   f0100205 <_panic>
f010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538f:	8b 40 44             	mov    0x44(%eax),%eax
f0105392:	85 c0                	test   %eax,%eax
f0105394:	74 11                	je     f01053a7 <sched_exit_env+0x105>
f0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105399:	8b 40 44             	mov    0x44(%eax),%eax
f010539c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010539f:	8b 52 48             	mov    0x48(%edx),%edx
f01053a2:	89 50 48             	mov    %edx,0x48(%eax)
f01053a5:	eb 16                	jmp    f01053bd <sched_exit_env+0x11b>
f01053a7:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01053ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053af:	c1 e2 04             	shl    $0x4,%edx
f01053b2:	01 c2                	add    %eax,%edx
f01053b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b7:	8b 40 48             	mov    0x48(%eax),%eax
f01053ba:	89 42 04             	mov    %eax,0x4(%edx)
f01053bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c0:	8b 40 48             	mov    0x48(%eax),%eax
f01053c3:	85 c0                	test   %eax,%eax
f01053c5:	74 11                	je     f01053d8 <sched_exit_env+0x136>
f01053c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ca:	8b 40 48             	mov    0x48(%eax),%eax
f01053cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d0:	8b 52 44             	mov    0x44(%edx),%edx
f01053d3:	89 50 44             	mov    %edx,0x44(%eax)
f01053d6:	eb 15                	jmp    f01053ed <sched_exit_env+0x14b>
f01053d8:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01053dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	01 c2                	add    %eax,%edx
f01053e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e8:	8b 40 44             	mov    0x44(%eax),%eax
f01053eb:	89 02                	mov    %eax,(%edx)
f01053ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053fa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105401:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105406:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105409:	c1 e2 04             	shl    $0x4,%edx
f010540c:	01 d0                	add    %edx,%eax
f010540e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105411:	4a                   	dec    %edx
f0105412:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105415:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010541c:	eb 4b                	jmp    f0105469 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010541e:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105423:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105426:	c1 e2 04             	shl    $0x4,%edx
f0105429:	01 d0                	add    %edx,%eax
f010542b:	8b 40 08             	mov    0x8(%eax),%eax
f010542e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105431:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105436:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105439:	c1 e2 04             	shl    $0x4,%edx
f010543c:	01 d0                	add    %edx,%eax
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	74 08                	je     f010544c <sched_exit_env+0x1aa>
f0105444:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105447:	8b 52 44             	mov    0x44(%edx),%edx
f010544a:	eb 05                	jmp    f0105451 <sched_exit_env+0x1af>
f010544c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105451:	89 50 08             	mov    %edx,0x8(%eax)
f0105454:	8b 40 08             	mov    0x8(%eax),%eax
f0105457:	85 c0                	test   %eax,%eax
f0105459:	0f 85 01 ff ff ff    	jne    f0105360 <sched_exit_env+0xbe>
f010545f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105463:	0f 85 f7 fe ff ff    	jne    f0105360 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105469:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010546d:	75 16                	jne    f0105485 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010546f:	ff 45 ec             	incl   -0x14(%ebp)
f0105472:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0105477:	0f b6 c0             	movzbl %al,%eax
f010547a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010547d:	0f 8f a8 fe ff ff    	jg     f010532b <sched_exit_env+0x89>
f0105483:	eb 01                	jmp    f0105486 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f0105485:	90                   	nop
		}
	}
	if (!found)
f0105486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010548a:	75 1c                	jne    f01054a8 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f010548c:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0105491:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105494:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105497:	75 0f                	jne    f01054a8 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105499:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010549e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054a1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054ac:	74 2a                	je     f01054d8 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054ae:	83 ec 0c             	sub    $0xc,%esp
f01054b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01054b4:	e8 a1 f6 ff ff       	call   f0104b5a <sched_insert_exit>
f01054b9:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054bc:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01054c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054c4:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054c7:	75 0f                	jne    f01054d8 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054c9:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f01054d0:	00 00 00 
			fos_scheduler();
f01054d3:	e8 4e f2 ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f01054d8:	90                   	nop
f01054d9:	c9                   	leave  
f01054da:	c3                   	ret    

f01054db <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054db:	55                   	push   %ebp
f01054dc:	89 e5                	mov    %esp,%ebp
f01054de:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054ef:	e9 37 01 00 00       	jmp    f010562b <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054f4:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01054f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054fc:	c1 e2 04             	shl    $0x4,%edx
f01054ff:	01 d0                	add    %edx,%eax
f0105501:	8b 00                	mov    (%eax),%eax
f0105503:	85 c0                	test   %eax,%eax
f0105505:	0f 84 1d 01 00 00    	je     f0105628 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f010550b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105512:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010551a:	c1 e2 04             	shl    $0x4,%edx
f010551d:	01 d0                	add    %edx,%eax
f010551f:	8b 00                	mov    (%eax),%eax
f0105521:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105524:	e9 c7 00 00 00       	jmp    f01055f0 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552d:	75 17                	jne    f0105546 <sched_exit_all_ready_envs+0x6b>
f010552f:	83 ec 04             	sub    $0x4,%esp
f0105532:	68 bf 5d 13 f0       	push   $0xf0135dbf
f0105537:	68 22 02 00 00       	push   $0x222
f010553c:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0105541:	e8 bf ac ff ff       	call   f0100205 <_panic>
f0105546:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105549:	8b 40 44             	mov    0x44(%eax),%eax
f010554c:	85 c0                	test   %eax,%eax
f010554e:	74 11                	je     f0105561 <sched_exit_all_ready_envs+0x86>
f0105550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105553:	8b 40 44             	mov    0x44(%eax),%eax
f0105556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105559:	8b 52 48             	mov    0x48(%edx),%edx
f010555c:	89 50 48             	mov    %edx,0x48(%eax)
f010555f:	eb 16                	jmp    f0105577 <sched_exit_all_ready_envs+0x9c>
f0105561:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105566:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105569:	c1 e2 04             	shl    $0x4,%edx
f010556c:	01 c2                	add    %eax,%edx
f010556e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105571:	8b 40 48             	mov    0x48(%eax),%eax
f0105574:	89 42 04             	mov    %eax,0x4(%edx)
f0105577:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010557a:	8b 40 48             	mov    0x48(%eax),%eax
f010557d:	85 c0                	test   %eax,%eax
f010557f:	74 11                	je     f0105592 <sched_exit_all_ready_envs+0xb7>
f0105581:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105584:	8b 40 48             	mov    0x48(%eax),%eax
f0105587:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010558a:	8b 52 44             	mov    0x44(%edx),%edx
f010558d:	89 50 44             	mov    %edx,0x44(%eax)
f0105590:	eb 15                	jmp    f01055a7 <sched_exit_all_ready_envs+0xcc>
f0105592:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105597:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010559a:	c1 e2 04             	shl    $0x4,%edx
f010559d:	01 c2                	add    %eax,%edx
f010559f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a2:	8b 40 44             	mov    0x44(%eax),%eax
f01055a5:	89 02                	mov    %eax,(%edx)
f01055a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055bb:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01055c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055c3:	c1 e2 04             	shl    $0x4,%edx
f01055c6:	01 d0                	add    %edx,%eax
f01055c8:	8b 50 0c             	mov    0xc(%eax),%edx
f01055cb:	4a                   	dec    %edx
f01055cc:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055cf:	83 ec 0c             	sub    $0xc,%esp
f01055d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d5:	e8 80 f5 ff ff       	call   f0104b5a <sched_insert_exit>
f01055da:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055dd:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01055e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055e5:	c1 e2 04             	shl    $0x4,%edx
f01055e8:	01 d0                	add    %edx,%eax
f01055ea:	8b 40 08             	mov    0x8(%eax),%eax
f01055ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f0:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01055f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055f8:	c1 e2 04             	shl    $0x4,%edx
f01055fb:	01 d0                	add    %edx,%eax
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	74 08                	je     f010560b <sched_exit_all_ready_envs+0x130>
f0105603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105606:	8b 52 44             	mov    0x44(%edx),%edx
f0105609:	eb 05                	jmp    f0105610 <sched_exit_all_ready_envs+0x135>
f010560b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105610:	89 50 08             	mov    %edx,0x8(%eax)
f0105613:	8b 40 08             	mov    0x8(%eax),%eax
f0105616:	85 c0                	test   %eax,%eax
f0105618:	0f 85 0b ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>
f010561e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105622:	0f 85 01 ff ff ff    	jne    f0105529 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105628:	ff 45 f0             	incl   -0x10(%ebp)
f010562b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0105630:	0f b6 c0             	movzbl %al,%eax
f0105633:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105636:	0f 8f b8 fe ff ff    	jg     f01054f4 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010563c:	90                   	nop
f010563d:	c9                   	leave  
f010563e:	c3                   	ret    

f010563f <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010563f:	55                   	push   %ebp
f0105640:	89 e5                	mov    %esp,%ebp
f0105642:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105645:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010564c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105653:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105657:	0f 85 a0 00 00 00    	jne    f01056fd <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010565d:	a1 3c 1d 88 f0       	mov    0xf0881d3c,%eax
f0105662:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105665:	eb 67                	jmp    f01056ce <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105667:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010566a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010566d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105670:	75 54                	jne    f01056c6 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105675:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010567b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105681:	83 ec 04             	sub    $0x4,%esp
f0105684:	52                   	push   %edx
f0105685:	50                   	push   %eax
f0105686:	68 0c 60 13 f0       	push   $0xf013600c
f010568b:	e8 7e b6 ff ff       	call   f0100d0e <cprintf>
f0105690:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105693:	83 ec 0c             	sub    $0xc,%esp
f0105696:	ff 75 f4             	pushl  -0xc(%ebp)
f0105699:	e8 17 f4 ff ff       	call   f0104ab5 <sched_remove_new>
f010569e:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 09 46 00 00       	call   f0109cb5 <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 8b 5f 13 f0       	push   $0xf0135f8b
f01056b7:	e8 52 b6 ff ff       	call   f0100d0e <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056c6:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f01056cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056d2:	74 08                	je     f01056dc <sched_kill_env+0x9d>
f01056d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056d7:	8b 40 44             	mov    0x44(%eax),%eax
f01056da:	eb 05                	jmp    f01056e1 <sched_kill_env+0xa2>
f01056dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01056e1:	a3 44 1d 88 f0       	mov    %eax,0xf0881d44
f01056e6:	a1 44 1d 88 f0       	mov    0xf0881d44,%eax
f01056eb:	85 c0                	test   %eax,%eax
f01056ed:	0f 85 74 ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
f01056f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056f7:	0f 85 6a ff ff ff    	jne    f0105667 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105701:	0f 85 a6 01 00 00    	jne    f01058ad <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105707:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010570e:	e9 86 01 00 00       	jmp    f0105899 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105713:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105718:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010571b:	c1 e2 04             	shl    $0x4,%edx
f010571e:	01 d0                	add    %edx,%eax
f0105720:	8b 00                	mov    (%eax),%eax
f0105722:	85 c0                	test   %eax,%eax
f0105724:	0f 84 66 01 00 00    	je     f0105890 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f010572a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105731:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0105736:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105739:	c1 e2 04             	shl    $0x4,%edx
f010573c:	01 d0                	add    %edx,%eax
f010573e:	8b 00                	mov    (%eax),%eax
f0105740:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105743:	e9 10 01 00 00       	jmp    f0105858 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105751:	0f 85 ee 00 00 00    	jne    f0105845 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105757:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105760:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105763:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105766:	ff 75 ec             	pushl  -0x14(%ebp)
f0105769:	52                   	push   %edx
f010576a:	50                   	push   %eax
f010576b:	68 34 60 13 f0       	push   $0xf0136034
f0105770:	e8 99 b5 ff ff       	call   f0100d0e <cprintf>
f0105775:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105778:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010577c:	75 17                	jne    f0105795 <sched_kill_env+0x156>
f010577e:	83 ec 04             	sub    $0x4,%esp
f0105781:	68 bf 5d 13 f0       	push   $0xf0135dbf
f0105786:	68 49 02 00 00       	push   $0x249
f010578b:	68 8b 5d 13 f0       	push   $0xf0135d8b
f0105790:	e8 70 aa ff ff       	call   f0100205 <_panic>
f0105795:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105798:	8b 40 44             	mov    0x44(%eax),%eax
f010579b:	85 c0                	test   %eax,%eax
f010579d:	74 11                	je     f01057b0 <sched_kill_env+0x171>
f010579f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a2:	8b 40 44             	mov    0x44(%eax),%eax
f01057a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057a8:	8b 52 48             	mov    0x48(%edx),%edx
f01057ab:	89 50 48             	mov    %edx,0x48(%eax)
f01057ae:	eb 16                	jmp    f01057c6 <sched_kill_env+0x187>
f01057b0:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01057b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b8:	c1 e2 04             	shl    $0x4,%edx
f01057bb:	01 c2                	add    %eax,%edx
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 48             	mov    0x48(%eax),%eax
f01057c3:	89 42 04             	mov    %eax,0x4(%edx)
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c9:	8b 40 48             	mov    0x48(%eax),%eax
f01057cc:	85 c0                	test   %eax,%eax
f01057ce:	74 11                	je     f01057e1 <sched_kill_env+0x1a2>
f01057d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d3:	8b 40 48             	mov    0x48(%eax),%eax
f01057d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057d9:	8b 52 44             	mov    0x44(%edx),%edx
f01057dc:	89 50 44             	mov    %edx,0x44(%eax)
f01057df:	eb 15                	jmp    f01057f6 <sched_kill_env+0x1b7>
f01057e1:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01057e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057e9:	c1 e2 04             	shl    $0x4,%edx
f01057ec:	01 c2                	add    %eax,%edx
f01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f1:	8b 40 44             	mov    0x44(%eax),%eax
f01057f4:	89 02                	mov    %eax,(%edx)
f01057f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105803:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010580a:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010580f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105812:	c1 e2 04             	shl    $0x4,%edx
f0105815:	01 d0                	add    %edx,%eax
f0105817:	8b 50 0c             	mov    0xc(%eax),%edx
f010581a:	4a                   	dec    %edx
f010581b:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f010581e:	83 ec 0c             	sub    $0xc,%esp
f0105821:	ff 75 f4             	pushl  -0xc(%ebp)
f0105824:	e8 8c 44 00 00       	call   f0109cb5 <env_free>
f0105829:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010582c:	83 ec 0c             	sub    $0xc,%esp
f010582f:	68 8b 5f 13 f0       	push   $0xf0135f8b
f0105834:	e8 d5 b4 ff ff       	call   f0100d0e <cprintf>
f0105839:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010583c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105843:	eb 4b                	jmp    f0105890 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105845:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010584a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010584d:	c1 e2 04             	shl    $0x4,%edx
f0105850:	01 d0                	add    %edx,%eax
f0105852:	8b 40 08             	mov    0x8(%eax),%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f010585d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105860:	c1 e2 04             	shl    $0x4,%edx
f0105863:	01 d0                	add    %edx,%eax
f0105865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105869:	74 08                	je     f0105873 <sched_kill_env+0x234>
f010586b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010586e:	8b 52 44             	mov    0x44(%edx),%edx
f0105871:	eb 05                	jmp    f0105878 <sched_kill_env+0x239>
f0105873:	ba 00 00 00 00       	mov    $0x0,%edx
f0105878:	89 50 08             	mov    %edx,0x8(%eax)
f010587b:	8b 40 08             	mov    0x8(%eax),%eax
f010587e:	85 c0                	test   %eax,%eax
f0105880:	0f 85 c2 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
f0105886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010588a:	0f 85 b8 fe ff ff    	jne    f0105748 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105894:	75 16                	jne    f01058ac <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105896:	ff 45 ec             	incl   -0x14(%ebp)
f0105899:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f010589e:	0f b6 c0             	movzbl %al,%eax
f01058a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058a4:	0f 8f 69 fe ff ff    	jg     f0105713 <sched_kill_env+0xd4>
f01058aa:	eb 01                	jmp    f01058ad <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058ac:	90                   	nop
		}
	}
	if (!found)
f01058ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058b1:	0f 85 a7 00 00 00    	jne    f010595e <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058be:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058c6:	eb 67                	jmp    f010592f <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058ce:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058d1:	75 54                	jne    f0105927 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058df:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e2:	83 ec 04             	sub    $0x4,%esp
f01058e5:	52                   	push   %edx
f01058e6:	50                   	push   %eax
f01058e7:	68 60 60 13 f0       	push   $0xf0136060
f01058ec:	e8 1d b4 ff ff       	call   f0100d0e <cprintf>
f01058f1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058f4:	83 ec 0c             	sub    $0xc,%esp
f01058f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058fa:	e8 9e f2 ff ff       	call   f0104b9d <sched_remove_exit>
f01058ff:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105902:	83 ec 0c             	sub    $0xc,%esp
f0105905:	ff 75 f4             	pushl  -0xc(%ebp)
f0105908:	e8 a8 43 00 00       	call   f0109cb5 <env_free>
f010590d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105910:	83 ec 0c             	sub    $0xc,%esp
f0105913:	68 8b 5f 13 f0       	push   $0xf0135f8b
f0105918:	e8 f1 b3 ff ff       	call   f0100d0e <cprintf>
f010591d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105920:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105927:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f010592c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010592f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105933:	74 08                	je     f010593d <sched_kill_env+0x2fe>
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	8b 40 44             	mov    0x44(%eax),%eax
f010593b:	eb 05                	jmp    f0105942 <sched_kill_env+0x303>
f010593d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105942:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f0105947:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f010594c:	85 c0                	test   %eax,%eax
f010594e:	0f 85 74 ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
f0105954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105958:	0f 85 6a ff ff ff    	jne    f01058c8 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f010595e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105962:	0f 85 a0 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105968:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010596d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105970:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105973:	0f 85 8f 00 00 00    	jne    f0105a08 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105979:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010597e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105987:	83 f8 02             	cmp    $0x2,%eax
f010598a:	74 19                	je     f01059a5 <sched_kill_env+0x366>
f010598c:	68 88 60 13 f0       	push   $0xf0136088
f0105991:	68 76 5d 13 f0       	push   $0xf0135d76
f0105996:	68 6c 02 00 00       	push   $0x26c
f010599b:	68 8b 5d 13 f0       	push   $0xf0135d8b
f01059a0:	e8 60 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059a8:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059b4:	83 ec 04             	sub    $0x4,%esp
f01059b7:	52                   	push   %edx
f01059b8:	50                   	push   %eax
f01059b9:	68 a8 60 13 f0       	push   $0xf01360a8
f01059be:	e8 4b b3 ff ff       	call   f0100d0e <cprintf>
f01059c3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059c6:	83 ec 0c             	sub    $0xc,%esp
f01059c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01059cc:	e8 e4 42 00 00       	call   f0109cb5 <env_free>
f01059d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059d4:	83 ec 0c             	sub    $0xc,%esp
f01059d7:	68 8b 5f 13 f0       	push   $0xf0135f8b
f01059dc:	e8 2d b3 ff ff       	call   f0100d0e <cprintf>
f01059e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059eb:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01059f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059f6:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059f9:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f0105a00:	00 00 00 
			fos_scheduler();
f0105a03:	e8 1e ed ff ff       	call   f0104726 <fos_scheduler>
		}
	}
}
f0105a08:	90                   	nop
f0105a09:	c9                   	leave  
f0105a0a:	c3                   	ret    

f0105a0b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a0b:	55                   	push   %ebp
f0105a0c:	89 e5                	mov    %esp,%ebp
f0105a0e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a11:	83 ec 0c             	sub    $0xc,%esp
f0105a14:	6a 01                	push   $0x1
f0105a16:	e8 1c 85 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f0105a1b:	83 c4 10             	add    $0x10,%esp
f0105a1e:	85 c0                	test   %eax,%eax
f0105a20:	74 05                	je     f0105a27 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a22:	e8 05 00 00 00       	call   f0105a2c <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a27:	e8 fa ec ff ff       	call   f0104726 <fos_scheduler>

f0105a2c <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a2c:	55                   	push   %ebp
f0105a2d:	89 e5                	mov    %esp,%ebp
f0105a2f:	53                   	push   %ebx
f0105a30:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a33:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0105a38:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a3f:	0f 84 cc 01 00 00    	je     f0105c11 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a4c:	e9 cf 00 00 00       	jmp    f0105b20 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a54:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a5a:	89 d0                	mov    %edx,%eax
f0105a5c:	01 c0                	add    %eax,%eax
f0105a5e:	01 d0                	add    %edx,%eax
f0105a60:	c1 e0 03             	shl    $0x3,%eax
f0105a63:	01 c8                	add    %ecx,%eax
f0105a65:	8a 40 04             	mov    0x4(%eax),%al
f0105a68:	3c 01                	cmp    $0x1,%al
f0105a6a:	0f 84 ad 00 00 00    	je     f0105b1d <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a79:	89 d0                	mov    %edx,%eax
f0105a7b:	01 c0                	add    %eax,%eax
f0105a7d:	01 d0                	add    %edx,%eax
f0105a7f:	c1 e0 03             	shl    $0x3,%eax
f0105a82:	01 c8                	add    %ecx,%eax
f0105a84:	8b 00                	mov    (%eax),%eax
f0105a86:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a8f:	83 ec 08             	sub    $0x8,%esp
f0105a92:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a95:	50                   	push   %eax
f0105a96:	e8 bb 23 00 00       	call   f0107e56 <pt_get_page_permissions>
f0105a9b:	83 c4 10             	add    $0x10,%esp
f0105a9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa4:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105aaa:	89 d0                	mov    %edx,%eax
f0105aac:	01 c0                	add    %eax,%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	c1 e0 03             	shl    $0x3,%eax
f0105ab3:	01 c8                	add    %ecx,%eax
f0105ab5:	8b 40 08             	mov    0x8(%eax),%eax
f0105ab8:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105abb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105abe:	83 e0 20             	and    $0x20,%eax
f0105ac1:	85 c0                	test   %eax,%eax
f0105ac3:	74 3b                	je     f0105b00 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ac8:	8b 48 78             	mov    0x78(%eax),%ecx
f0105acb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ace:	89 d0                	mov    %edx,%eax
f0105ad0:	01 c0                	add    %eax,%eax
f0105ad2:	01 d0                	add    %edx,%eax
f0105ad4:	c1 e0 03             	shl    $0x3,%eax
f0105ad7:	01 c8                	add    %ecx,%eax
f0105ad9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105adc:	c1 ea 02             	shr    $0x2,%edx
f0105adf:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105ae5:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aeb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aee:	6a 20                	push   $0x20
f0105af0:	6a 00                	push   $0x0
f0105af2:	ff 75 e8             	pushl  -0x18(%ebp)
f0105af5:	50                   	push   %eax
f0105af6:	e8 a7 22 00 00       	call   f0107da2 <pt_set_page_permissions>
f0105afb:	83 c4 10             	add    $0x10,%esp
f0105afe:	eb 1d                	jmp    f0105b1d <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b03:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b09:	89 d0                	mov    %edx,%eax
f0105b0b:	01 c0                	add    %eax,%eax
f0105b0d:	01 d0                	add    %edx,%eax
f0105b0f:	c1 e0 03             	shl    $0x3,%eax
f0105b12:	01 c8                	add    %ecx,%eax
f0105b14:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b17:	c1 ea 02             	shr    $0x2,%edx
f0105b1a:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b1d:	ff 45 f4             	incl   -0xc(%ebp)
f0105b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b23:	8b 50 74             	mov    0x74(%eax),%edx
f0105b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b29:	39 c2                	cmp    %eax,%edx
f0105b2b:	0f 87 20 ff ff ff    	ja     f0105a51 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b38:	e9 ca 00 00 00       	jmp    f0105c07 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b3d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b40:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b43:	89 d0                	mov    %edx,%eax
f0105b45:	01 c0                	add    %eax,%eax
f0105b47:	01 d0                	add    %edx,%eax
f0105b49:	c1 e0 03             	shl    $0x3,%eax
f0105b4c:	01 c8                	add    %ecx,%eax
f0105b4e:	83 e8 80             	sub    $0xffffff80,%eax
f0105b51:	8a 00                	mov    (%eax),%al
f0105b53:	3c 01                	cmp    $0x1,%al
f0105b55:	0f 84 a9 00 00 00    	je     f0105c04 <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	83 c0 7c             	add    $0x7c,%eax
f0105b6f:	8b 00                	mov    (%eax),%eax
f0105b71:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b74:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7a:	89 d0                	mov    %edx,%eax
f0105b7c:	01 c0                	add    %eax,%eax
f0105b7e:	01 d0                	add    %edx,%eax
f0105b80:	c1 e0 03             	shl    $0x3,%eax
f0105b83:	01 c8                	add    %ecx,%eax
f0105b85:	05 84 00 00 00       	add    $0x84,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b92:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b95:	83 ec 08             	sub    $0x8,%esp
f0105b98:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b9b:	50                   	push   %eax
f0105b9c:	e8 d4 23 00 00       	call   f0107f75 <pd_is_table_used>
f0105ba1:	83 c4 10             	add    $0x10,%esp
f0105ba4:	85 c0                	test   %eax,%eax
f0105ba6:	74 3c                	je     f0105be4 <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bab:	c1 e8 02             	shr    $0x2,%eax
f0105bae:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bb3:	89 c1                	mov    %eax,%ecx
f0105bb5:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bbb:	89 d0                	mov    %edx,%eax
f0105bbd:	01 c0                	add    %eax,%eax
f0105bbf:	01 d0                	add    %edx,%eax
f0105bc1:	c1 e0 03             	shl    $0x3,%eax
f0105bc4:	01 d8                	add    %ebx,%eax
f0105bc6:	05 84 00 00 00       	add    $0x84,%eax
f0105bcb:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bd0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bd3:	83 ec 08             	sub    $0x8,%esp
f0105bd6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bd9:	50                   	push   %eax
f0105bda:	e8 ba 23 00 00       	call   f0107f99 <pd_set_table_unused>
f0105bdf:	83 c4 10             	add    $0x10,%esp
f0105be2:	eb 20                	jmp    f0105c04 <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105be4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105be7:	c1 e8 02             	shr    $0x2,%eax
f0105bea:	89 c1                	mov    %eax,%ecx
f0105bec:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bf2:	89 d0                	mov    %edx,%eax
f0105bf4:	01 c0                	add    %eax,%eax
f0105bf6:	01 d0                	add    %edx,%eax
f0105bf8:	c1 e0 03             	shl    $0x3,%eax
f0105bfb:	01 d8                	add    %ebx,%eax
f0105bfd:	05 84 00 00 00       	add    $0x84,%eax
f0105c02:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c04:	ff 45 f0             	incl   -0x10(%ebp)
f0105c07:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c0b:	0f 8e 2c ff ff ff    	jle    f0105b3d <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c11:	90                   	nop
f0105c12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c15:	c9                   	leave  
f0105c16:	c3                   	ret    

f0105c17 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c17:	55                   	push   %ebp
f0105c18:	89 e5                	mov    %esp,%ebp
f0105c1a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c1d:	c7 05 ec 13 88 f0 01 	movl   $0x1,0xf08813ec
f0105c24:	00 00 00 
f0105c27:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c2e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c32:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c38:	ee                   	out    %al,(%dx)
f0105c39:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c40:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c44:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c4a:	ee                   	out    %al,(%dx)
f0105c4b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c52:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c56:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c59:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c5c:	ee                   	out    %al,(%dx)
f0105c5d:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c64:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c68:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c6e:	ee                   	out    %al,(%dx)
f0105c6f:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c76:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c7a:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c80:	ee                   	out    %al,(%dx)
f0105c81:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c88:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c8c:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c92:	ee                   	out    %al,(%dx)
f0105c93:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c9a:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c9e:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105ca1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105ca4:	ee                   	out    %al,(%dx)
f0105ca5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cac:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105cb0:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cb6:	ee                   	out    %al,(%dx)
f0105cb7:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cbe:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cc2:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cc5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105cc8:	ee                   	out    %al,(%dx)
f0105cc9:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cd0:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cd4:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cd7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cda:	ee                   	out    %al,(%dx)
f0105cdb:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105ce2:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ce6:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105ce9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cec:	ee                   	out    %al,(%dx)
f0105ced:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cf4:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cf8:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105cfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105cfe:	ee                   	out    %al,(%dx)
f0105cff:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d06:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d0a:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d0d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d10:	ee                   	out    %al,(%dx)
f0105d11:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d18:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d1c:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d1f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d22:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d23:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d29:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d2d:	74 15                	je     f0105d44 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d2f:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d35:	0f b7 c0             	movzwl %ax,%eax
f0105d38:	83 ec 0c             	sub    $0xc,%esp
f0105d3b:	50                   	push   %eax
f0105d3c:	e8 06 00 00 00       	call   f0105d47 <irq_setmask_8259A>
f0105d41:	83 c4 10             	add    $0x10,%esp
}
f0105d44:	90                   	nop
f0105d45:	c9                   	leave  
f0105d46:	c3                   	ret    

f0105d47 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d47:	55                   	push   %ebp
f0105d48:	89 e5                	mov    %esp,%ebp
f0105d4a:	83 ec 14             	sub    $0x14,%esp
f0105d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d50:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d57:	66 a3 b0 38 19 f0    	mov    %ax,0xf01938b0
	if (!didinit)
f0105d5d:	a1 ec 13 88 f0       	mov    0xf08813ec,%eax
f0105d62:	85 c0                	test   %eax,%eax
f0105d64:	74 34                	je     f0105d9a <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d69:	0f b6 c0             	movzbl %al,%eax
f0105d6c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d73:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d76:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d7c:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d80:	66 c1 e8 08          	shr    $0x8,%ax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d8e:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d91:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
f0105d98:	eb 01                	jmp    f0105d9b <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d9a:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d9b:	c9                   	leave  
f0105d9c:	c3                   	ret    

f0105d9d <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d9d:	55                   	push   %ebp
f0105d9e:	89 e5                	mov    %esp,%ebp
f0105da0:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105da3:	83 ec 08             	sub    $0x8,%esp
f0105da6:	68 00 10 00 00       	push   $0x1000
f0105dab:	68 00 10 00 00       	push   $0x1000
f0105db0:	e8 6a 02 00 00       	call   f010601f <boot_allocate_space>
f0105db5:	83 c4 10             	add    $0x10,%esp
f0105db8:	a3 7c 1d 88 f0       	mov    %eax,0xf0881d7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dbd:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105dc2:	83 ec 04             	sub    $0x4,%esp
f0105dc5:	68 00 10 00 00       	push   $0x1000
f0105dca:	6a 00                	push   $0x0
f0105dcc:	50                   	push   %eax
f0105dcd:	e8 a9 b8 02 00       	call   f013167b <memset>
f0105dd2:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dd5:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105dda:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105ddd:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105de4:	77 14                	ja     f0105dfa <initialize_kernel_VM+0x5d>
f0105de6:	ff 75 e8             	pushl  -0x18(%ebp)
f0105de9:	68 d4 60 13 f0       	push   $0xf01360d4
f0105dee:	6a 45                	push   $0x45
f0105df0:	68 08 61 13 f0       	push   $0xf0136108
f0105df5:	e8 0b a4 ff ff       	call   f0100205 <_panic>
f0105dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105dfd:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e02:	a3 ac 1d 88 f0       	mov    %eax,0xf0881dac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e07:	c7 45 e4 00 b0 18 f0 	movl   $0xf018b000,-0x1c(%ebp)
f0105e0e:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e15:	77 14                	ja     f0105e2b <initialize_kernel_VM+0x8e>
f0105e17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e1a:	68 d4 60 13 f0       	push   $0xf01360d4
f0105e1f:	6a 4d                	push   $0x4d
f0105e21:	68 08 61 13 f0       	push   $0xf0136108
f0105e26:	e8 da a3 ff ff       	call   f0100205 <_panic>
f0105e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e2e:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e34:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105e39:	83 ec 0c             	sub    $0xc,%esp
f0105e3c:	6a 02                	push   $0x2
f0105e3e:	52                   	push   %edx
f0105e3f:	68 00 80 00 00       	push   $0x8000
f0105e44:	68 00 80 bf ef       	push   $0xefbf8000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 31 02 00 00       	call   f0106080 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e52:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e67:	eb 25                	jmp    f0105e8e <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e69:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6f:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105e74:	83 ec 04             	sub    $0x4,%esp
f0105e77:	6a 01                	push   $0x1
f0105e79:	52                   	push   %edx
f0105e7a:	50                   	push   %eax
f0105e7b:	e8 74 02 00 00       	call   f01060f4 <boot_get_page_table>
f0105e80:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e83:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e8a:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e92:	72 d5                	jb     f0105e69 <initialize_kernel_VM+0xcc>
f0105e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e98:	77 06                	ja     f0105ea0 <initialize_kernel_VM+0x103>
f0105e9a:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e9e:	76 c9                	jbe    f0105e69 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ea0:	8b 15 10 1d 88 f0    	mov    0xf0881d10,%edx
f0105ea6:	89 d0                	mov    %edx,%eax
f0105ea8:	01 c0                	add    %eax,%eax
f0105eaa:	01 d0                	add    %edx,%eax
f0105eac:	c1 e0 03             	shl    $0x3,%eax
f0105eaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105eb2:	83 ec 08             	sub    $0x8,%esp
f0105eb5:	68 00 10 00 00       	push   $0x1000
f0105eba:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebd:	e8 5d 01 00 00       	call   f010601f <boot_allocate_space>
f0105ec2:	83 c4 10             	add    $0x10,%esp
f0105ec5:	a3 54 1d 88 f0       	mov    %eax,0xf0881d54
	memset(frames_info, 0, array_size);
f0105eca:	a1 54 1d 88 f0       	mov    0xf0881d54,%eax
f0105ecf:	83 ec 04             	sub    $0x4,%esp
f0105ed2:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed5:	6a 00                	push   $0x0
f0105ed7:	50                   	push   %eax
f0105ed8:	e8 9e b7 02 00       	call   f013167b <memset>
f0105edd:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ee0:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ee7:	83 ec 08             	sub    $0x8,%esp
f0105eea:	68 00 10 00 00       	push   $0x1000
f0105eef:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef2:	e8 28 01 00 00       	call   f010601f <boot_allocate_space>
f0105ef7:	83 c4 10             	add    $0x10,%esp
f0105efa:	a3 dc 1c 88 f0       	mov    %eax,0xf0881cdc
	memset(disk_frames_info , 0, disk_array_size);
f0105eff:	a1 dc 1c 88 f0       	mov    0xf0881cdc,%eax
f0105f04:	83 ec 04             	sub    $0x4,%esp
f0105f07:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0a:	6a 00                	push   $0x0
f0105f0c:	50                   	push   %eax
f0105f0d:	e8 69 b7 02 00       	call   f013167b <memset>
f0105f12:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f15:	e8 d5 04 00 00       	call   f01063ef <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f1a:	83 ec 0c             	sub    $0xc,%esp
f0105f1d:	68 b1 02 00 00       	push   $0x2b1
f0105f22:	e8 d8 a2 02 00       	call   f01301ff <nearest_pow2_ceil>
f0105f27:	83 c4 10             	add    $0x10,%esp
f0105f2a:	83 ec 04             	sub    $0x4,%esp
f0105f2d:	50                   	push   %eax
f0105f2e:	68 b1 02 00 00       	push   $0x2b1
f0105f33:	68 28 61 13 f0       	push   $0xf0136128
f0105f38:	e8 d1 ad ff ff       	call   f0100d0e <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f40:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f4a:	83 ec 08             	sub    $0x8,%esp
f0105f4d:	68 00 10 00 00       	push   $0x1000
f0105f52:	50                   	push   %eax
f0105f53:	e8 c7 00 00 00       	call   f010601f <boot_allocate_space>
f0105f58:	83 c4 10             	add    $0x10,%esp
f0105f5b:	a3 f0 13 88 f0       	mov    %eax,0xf08813f0
	memset(envs , 0, envs_size);
f0105f60:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f63:	a1 f0 13 88 f0       	mov    0xf08813f0,%eax
f0105f68:	83 ec 04             	sub    $0x4,%esp
f0105f6b:	52                   	push   %edx
f0105f6c:	6a 00                	push   $0x0
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 07 b7 02 00       	call   f013167b <memset>
f0105f74:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f77:	a1 f0 13 88 f0       	mov    0xf08813f0,%eax
f0105f7c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f7f:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f86:	77 17                	ja     f0105f9f <initialize_kernel_VM+0x202>
f0105f88:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f8b:	68 d4 60 13 f0       	push   $0xf01360d4
f0105f90:	68 96 00 00 00       	push   $0x96
f0105f95:	68 08 61 13 f0       	push   $0xf0136108
f0105f9a:	e8 66 a2 ff ff       	call   f0100205 <_panic>
f0105f9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fa2:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fa8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fab:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105fb0:	83 ec 0c             	sub    $0xc,%esp
f0105fb3:	6a 04                	push   $0x4
f0105fb5:	51                   	push   %ecx
f0105fb6:	52                   	push   %edx
f0105fb7:	68 00 00 c0 ee       	push   $0xeec00000
f0105fbc:	50                   	push   %eax
f0105fbd:	e8 be 00 00 00       	call   f0106080 <boot_map_range>
f0105fc2:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fc5:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105fca:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fcf:	8b 15 7c 1d 88 f0    	mov    0xf0881d7c,%edx
f0105fd5:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fdb:	8b 12                	mov    (%edx),%edx
f0105fdd:	83 ca 05             	or     $0x5,%edx
f0105fe0:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fe2:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f0105fe7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fed:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0105ff2:	83 ec 0c             	sub    $0xc,%esp
f0105ff5:	6a 02                	push   $0x2
f0105ff7:	6a 00                	push   $0x0
f0105ff9:	52                   	push   %edx
f0105ffa:	68 00 00 00 f0       	push   $0xf0000000
f0105fff:	50                   	push   %eax
f0106000:	e8 7b 00 00 00       	call   f0106080 <boot_map_range>
f0106005:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106008:	e8 d9 a9 02 00       	call   f01309e6 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f010600d:	c7 05 f0 1c 88 f0 19 	movl   $0x19,0xf0881cf0
f0106014:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106017:	e8 d3 02 00 00       	call   f01062ef <turn_on_paging>
}
f010601c:	90                   	nop
f010601d:	c9                   	leave  
f010601e:	c3                   	ret    

f010601f <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010601f:	55                   	push   %ebp
f0106020:	89 e5                	mov    %esp,%ebp
f0106022:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106025:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f010602a:	85 c0                	test   %eax,%eax
f010602c:	75 0a                	jne    f0106038 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f010602e:	c7 05 78 1d 88 f0 bc 	movl   $0xf0881ebc,0xf0881d78
f0106035:	1e 88 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010603b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010603e:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f0106043:	89 c2                	mov    %eax,%edx
f0106045:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106048:	01 d0                	add    %edx,%eax
f010604a:	48                   	dec    %eax
f010604b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010604e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106051:	ba 00 00 00 00       	mov    $0x0,%edx
f0106056:	f7 75 fc             	divl   -0x4(%ebp)
f0106059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010605c:	29 d0                	sub    %edx,%eax
f010605e:	a3 78 1d 88 f0       	mov    %eax,0xf0881d78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0106063:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f0106068:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f010606b:	8b 15 78 1d 88 f0    	mov    0xf0881d78,%edx
f0106071:	8b 45 08             	mov    0x8(%ebp),%eax
f0106074:	01 d0                	add    %edx,%eax
f0106076:	a3 78 1d 88 f0       	mov    %eax,0xf0881d78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f010607b:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f010607e:	c9                   	leave  
f010607f:	c3                   	ret    

f0106080 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106080:	55                   	push   %ebp
f0106081:	89 e5                	mov    %esp,%ebp
f0106083:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0106086:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010608d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106094:	eb 53                	jmp    f01060e9 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0106096:	83 ec 04             	sub    $0x4,%esp
f0106099:	6a 01                	push   $0x1
f010609b:	ff 75 0c             	pushl  0xc(%ebp)
f010609e:	ff 75 08             	pushl  0x8(%ebp)
f01060a1:	e8 4e 00 00 00       	call   f01060f4 <boot_get_page_table>
f01060a6:	83 c4 10             	add    $0x10,%esp
f01060a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060af:	c1 e8 0c             	shr    $0xc,%eax
f01060b2:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c7:	01 c2                	add    %eax,%edx
f01060c9:	8b 45 18             	mov    0x18(%ebp),%eax
f01060cc:	0b 45 14             	or     0x14(%ebp),%eax
f01060cf:	83 c8 01             	or     $0x1,%eax
f01060d2:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060d4:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060db:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060e2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060ef:	72 a5                	jb     f0106096 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060f1:	90                   	nop
f01060f2:	c9                   	leave  
f01060f3:	c3                   	ret    

f01060f4 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060f4:	55                   	push   %ebp
f01060f5:	89 e5                	mov    %esp,%ebp
f01060f7:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060fd:	c1 e8 16             	shr    $0x16,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010610d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106110:	01 d0                	add    %edx,%eax
f0106112:	8b 00                	mov    (%eax),%eax
f0106114:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010611f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106125:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106128:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010612b:	c1 e8 0c             	shr    $0xc,%eax
f010612e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106131:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106136:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106139:	72 17                	jb     f0106152 <boot_get_page_table+0x5e>
f010613b:	ff 75 e8             	pushl  -0x18(%ebp)
f010613e:	68 50 61 13 f0       	push   $0xf0136150
f0106143:	68 15 01 00 00       	push   $0x115
f0106148:	68 08 61 13 f0       	push   $0xf0136108
f010614d:	e8 b3 a0 ff ff       	call   f0100205 <_panic>
f0106152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106155:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010615a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f010615d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106161:	75 72                	jne    f01061d5 <boot_get_page_table+0xe1>
	{
		if (create)
f0106163:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106167:	74 65                	je     f01061ce <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106169:	83 ec 08             	sub    $0x8,%esp
f010616c:	68 00 10 00 00       	push   $0x1000
f0106171:	68 00 10 00 00       	push   $0x1000
f0106176:	e8 a4 fe ff ff       	call   f010601f <boot_allocate_space>
f010617b:	83 c4 10             	add    $0x10,%esp
f010617e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106181:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106187:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010618e:	77 17                	ja     f01061a7 <boot_get_page_table+0xb3>
f0106190:	ff 75 dc             	pushl  -0x24(%ebp)
f0106193:	68 d4 60 13 f0       	push   $0xf01360d4
f0106198:	68 1b 01 00 00       	push   $0x11b
f010619d:	68 08 61 13 f0       	push   $0xf0136108
f01061a2:	e8 5e a0 ff ff       	call   f0100205 <_panic>
f01061a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061aa:	05 00 00 00 10       	add    $0x10000000,%eax
f01061af:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061bf:	01 d0                	add    %edx,%eax
f01061c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061c4:	83 ca 03             	or     $0x3,%edx
f01061c7:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061cc:	eb 0a                	jmp    f01061d8 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01061d3:	eb 03                	jmp    f01061d8 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061d8:	c9                   	leave  
f01061d9:	c3                   	ret    

f01061da <nvram_read>:


int nvram_read(int r)
{
f01061da:	55                   	push   %ebp
f01061db:	89 e5                	mov    %esp,%ebp
f01061dd:	53                   	push   %ebx
f01061de:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01061e4:	83 ec 0c             	sub    $0xc,%esp
f01061e7:	50                   	push   %eax
f01061e8:	e8 9b de ff ff       	call   f0104088 <mc146818_read>
f01061ed:	83 c4 10             	add    $0x10,%esp
f01061f0:	89 c3                	mov    %eax,%ebx
f01061f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01061f5:	40                   	inc    %eax
f01061f6:	83 ec 0c             	sub    $0xc,%esp
f01061f9:	50                   	push   %eax
f01061fa:	e8 89 de ff ff       	call   f0104088 <mc146818_read>
f01061ff:	83 c4 10             	add    $0x10,%esp
f0106202:	c1 e0 08             	shl    $0x8,%eax
f0106205:	09 d8                	or     %ebx,%eax
}
f0106207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010620a:	c9                   	leave  
f010620b:	c3                   	ret    

f010620c <detect_memory>:

void detect_memory()
{
f010620c:	55                   	push   %ebp
f010620d:	89 e5                	mov    %esp,%ebp
f010620f:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106212:	83 ec 0c             	sub    $0xc,%esp
f0106215:	6a 15                	push   $0x15
f0106217:	e8 be ff ff ff       	call   f01061da <nvram_read>
f010621c:	83 c4 10             	add    $0x10,%esp
f010621f:	c1 e0 0a             	shl    $0xa,%eax
f0106222:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106225:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106228:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010622d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106230:	83 ec 0c             	sub    $0xc,%esp
f0106233:	6a 17                	push   $0x17
f0106235:	e8 a0 ff ff ff       	call   f01061da <nvram_read>
f010623a:	83 c4 10             	add    $0x10,%esp
f010623d:	c1 e0 0a             	shl    $0xa,%eax
f0106240:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106243:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106246:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010624b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f010624e:	83 ec 0c             	sub    $0xc,%esp
f0106251:	6a 34                	push   $0x34
f0106253:	e8 82 ff ff ff       	call   f01061da <nvram_read>
f0106258:	83 c4 10             	add    $0x10,%esp
f010625b:	c1 e0 10             	shl    $0x10,%eax
f010625e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106264:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106269:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f010626c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106270:	74 18                	je     f010628a <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106275:	05 00 00 00 01       	add    $0x1000000,%eax
f010627a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106280:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106285:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106288:	eb 19                	jmp    f01062a3 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f010628a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010628e:	74 0d                	je     f010629d <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106290:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106293:	05 00 00 10 00       	add    $0x100000,%eax
f0106298:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010629b:	eb 06                	jmp    f01062a3 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010629d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062a3:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ad:	c1 e8 0c             	shr    $0xc,%eax
f01062b0:	a3 10 1d 88 f0       	mov    %eax,0xf0881d10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b8:	c1 e8 0a             	shr    $0xa,%eax
f01062bb:	83 ec 08             	sub    $0x8,%esp
f01062be:	50                   	push   %eax
f01062bf:	68 80 61 13 f0       	push   $0xf0136180
f01062c4:	e8 45 aa ff ff       	call   f0100d0e <cprintf>
f01062c9:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cf:	c1 e8 0a             	shr    $0xa,%eax
f01062d2:	89 c2                	mov    %eax,%edx
f01062d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062d7:	c1 e8 0a             	shr    $0xa,%eax
f01062da:	83 ec 04             	sub    $0x4,%esp
f01062dd:	52                   	push   %edx
f01062de:	50                   	push   %eax
f01062df:	68 a1 61 13 f0       	push   $0xf01361a1
f01062e4:	e8 25 aa ff ff       	call   f0100d0e <cprintf>
f01062e9:	83 c4 10             	add    $0x10,%esp
}
f01062ec:	90                   	nop
f01062ed:	c9                   	leave  
f01062ee:	c3                   	ret    

f01062ef <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062ef:	55                   	push   %ebp
f01062f0:	89 e5                	mov    %esp,%ebp
f01062f2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062f5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106303:	eb 24                	jmp    f0106329 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106305:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010630a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010630d:	c1 e2 02             	shl    $0x2,%edx
f0106310:	01 c2                	add    %eax,%edx
f0106312:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0106317:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f010631a:	c1 e1 02             	shl    $0x2,%ecx
f010631d:	01 c8                	add    %ecx,%eax
f010631f:	8b 00                	mov    (%eax),%eax
f0106321:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106323:	ff 45 fc             	incl   -0x4(%ebp)
f0106326:	ff 45 f8             	incl   -0x8(%ebp)
f0106329:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f010632e:	c1 e8 16             	shr    $0x16,%eax
f0106331:	89 c2                	mov    %eax,%edx
f0106333:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106336:	39 c2                	cmp    %eax,%edx
f0106338:	77 cb                	ja     f0106305 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f010633a:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f010633f:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106342:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106345:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106348:	0f 20 c0             	mov    %cr0,%eax
f010634b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010634e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106354:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010635b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010635f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106362:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106365:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106368:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010636b:	0f 01 15 f0 38 19 f0 	lgdtl  0xf01938f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106372:	b8 23 00 00 00       	mov    $0x23,%eax
f0106377:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106379:	b8 23 00 00 00       	mov    $0x23,%eax
f010637e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106380:	b8 10 00 00 00       	mov    $0x10,%eax
f0106385:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106387:	b8 10 00 00 00       	mov    $0x10,%eax
f010638c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010638e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106393:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106395:	ea 9c 63 10 f0 08 00 	ljmp   $0x8,$0xf010639c
	asm volatile("lldt %%ax" :: "a" (0));
f010639c:	b8 00 00 00 00       	mov    $0x0,%eax
f01063a1:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063a4:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063b2:	eb 19                	jmp    f01063cd <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063b4:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01063b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063bc:	c1 e2 02             	shl    $0x2,%edx
f01063bf:	01 d0                	add    %edx,%eax
f01063c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063c7:	ff 45 f4             	incl   -0xc(%ebp)
f01063ca:	ff 45 f0             	incl   -0x10(%ebp)
f01063cd:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f01063d2:	c1 e8 16             	shr    $0x16,%eax
f01063d5:	89 c2                	mov    %eax,%edx
f01063d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063da:	39 c2                	cmp    %eax,%edx
f01063dc:	77 d6                	ja     f01063b4 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063de:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f01063e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063e9:	0f 22 d8             	mov    %eax,%cr3
}
f01063ec:	90                   	nop
f01063ed:	c9                   	leave  
f01063ee:	c3                   	ret    

f01063ef <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063ef:	55                   	push   %ebp
f01063f0:	89 e5                	mov    %esp,%ebp
f01063f2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063f5:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01063fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063fd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106404:	77 17                	ja     f010641d <setup_listing_to_all_page_tables_entries+0x2e>
f0106406:	ff 75 f4             	pushl  -0xc(%ebp)
f0106409:	68 d4 60 13 f0       	push   $0xf01360d4
f010640e:	68 ab 01 00 00       	push   $0x1ab
f0106413:	68 08 61 13 f0       	push   $0xf0136108
f0106418:	e8 e8 9d ff ff       	call   f0100205 <_panic>
f010641d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106420:	05 00 00 00 10       	add    $0x10000000,%eax
f0106425:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106428:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010642d:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106432:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106435:	83 ca 03             	or     $0x3,%edx
f0106438:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f010643a:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010643f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106445:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010644a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010644d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106454:	77 17                	ja     f010646d <setup_listing_to_all_page_tables_entries+0x7e>
f0106456:	ff 75 ec             	pushl  -0x14(%ebp)
f0106459:	68 d4 60 13 f0       	push   $0xf01360d4
f010645e:	68 b0 01 00 00       	push   $0x1b0
f0106463:	68 08 61 13 f0       	push   $0xf0136108
f0106468:	e8 98 9d ff ff       	call   f0100205 <_panic>
f010646d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106470:	05 00 00 00 10       	add    $0x10000000,%eax
f0106475:	83 c8 05             	or     $0x5,%eax
f0106478:	89 02                	mov    %eax,(%edx)

}
f010647a:	90                   	nop
f010647b:	c9                   	leave  
f010647c:	c3                   	ret    

f010647d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010647d:	55                   	push   %ebp
f010647e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106480:	8b 45 08             	mov    0x8(%ebp),%eax
f0106483:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f0106489:	29 d0                	sub    %edx,%eax
f010648b:	c1 f8 03             	sar    $0x3,%eax
f010648e:	89 c2                	mov    %eax,%edx
f0106490:	89 d0                	mov    %edx,%eax
f0106492:	c1 e0 02             	shl    $0x2,%eax
f0106495:	01 d0                	add    %edx,%eax
f0106497:	c1 e0 02             	shl    $0x2,%eax
f010649a:	01 d0                	add    %edx,%eax
f010649c:	c1 e0 02             	shl    $0x2,%eax
f010649f:	01 d0                	add    %edx,%eax
f01064a1:	89 c1                	mov    %eax,%ecx
f01064a3:	c1 e1 08             	shl    $0x8,%ecx
f01064a6:	01 c8                	add    %ecx,%eax
f01064a8:	89 c1                	mov    %eax,%ecx
f01064aa:	c1 e1 10             	shl    $0x10,%ecx
f01064ad:	01 c8                	add    %ecx,%eax
f01064af:	01 c0                	add    %eax,%eax
f01064b1:	01 d0                	add    %edx,%eax
}
f01064b3:	5d                   	pop    %ebp
f01064b4:	c3                   	ret    

f01064b5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064b5:	55                   	push   %ebp
f01064b6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064b8:	ff 75 08             	pushl  0x8(%ebp)
f01064bb:	e8 bd ff ff ff       	call   f010647d <to_frame_number>
f01064c0:	83 c4 04             	add    $0x4,%esp
f01064c3:	c1 e0 0c             	shl    $0xc,%eax
}
f01064c6:	c9                   	leave  
f01064c7:	c3                   	ret    

f01064c8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064c8:	55                   	push   %ebp
f01064c9:	89 e5                	mov    %esp,%ebp
f01064cb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01064d1:	c1 e8 0c             	shr    $0xc,%eax
f01064d4:	89 c2                	mov    %eax,%edx
f01064d6:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f01064db:	39 c2                	cmp    %eax,%edx
f01064dd:	72 14                	jb     f01064f3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	68 c0 61 13 f0       	push   $0xf01361c0
f01064e7:	6a 55                	push   $0x55
f01064e9:	68 e5 61 13 f0       	push   $0xf01361e5
f01064ee:	e8 12 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064f3:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f01064f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064fc:	c1 e8 0c             	shr    $0xc,%eax
f01064ff:	89 c1                	mov    %eax,%ecx
f0106501:	89 c8                	mov    %ecx,%eax
f0106503:	01 c0                	add    %eax,%eax
f0106505:	01 c8                	add    %ecx,%eax
f0106507:	c1 e0 03             	shl    $0x3,%eax
f010650a:	01 d0                	add    %edx,%eax
}
f010650c:	c9                   	leave  
f010650d:	c3                   	ret    

f010650e <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f010650e:	55                   	push   %ebp
f010650f:	89 e5                	mov    %esp,%ebp
f0106511:	83 ec 10             	sub    $0x10,%esp
f0106514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106517:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010651a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010651d:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106520:	90                   	nop
f0106521:	c9                   	leave  
f0106522:	c3                   	ret    

f0106523 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106523:	55                   	push   %ebp
f0106524:	89 e5                	mov    %esp,%ebp
f0106526:	53                   	push   %ebx
f0106527:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010652a:	c7 05 18 1d 88 f0 00 	movl   $0x0,0xf0881d18
f0106531:	00 00 00 
f0106534:	c7 05 1c 1d 88 f0 00 	movl   $0x0,0xf0881d1c
f010653b:	00 00 00 
f010653e:	c7 05 24 1d 88 f0 00 	movl   $0x0,0xf0881d24
f0106545:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106548:	c7 05 b8 1c 88 f0 00 	movl   $0x0,0xf0881cb8
f010654f:	00 00 00 
f0106552:	c7 05 bc 1c 88 f0 00 	movl   $0x0,0xf0881cbc
f0106559:	00 00 00 
f010655c:	c7 05 c4 1c 88 f0 00 	movl   $0x0,0xf0881cc4
f0106563:	00 00 00 

	frames_info[0].references = 1;
f0106566:	a1 54 1d 88 f0       	mov    0xf0881d54,%eax
f010656b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106571:	a1 54 1d 88 f0       	mov    0xf0881d54,%eax
f0106576:	83 c0 18             	add    $0x18,%eax
f0106579:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010657f:	a1 54 1d 88 f0       	mov    0xf0881d54,%eax
f0106584:	83 c0 30             	add    $0x30,%eax
f0106587:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010658d:	c7 05 60 1d 88 f0 00 	movl   $0xf0001000,0xf0881d60
f0106594:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106597:	c7 05 84 1d 88 f0 00 	movl   $0xf0002000,0xf0881d84
f010659e:	20 00 f0 
	i =0;
f01065a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065a8:	eb 1f                	jmp    f01065c9 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065aa:	8b 15 60 1d 88 f0    	mov    0xf0881d60,%edx
f01065b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b3:	01 d0                	add    %edx,%eax
f01065b5:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065b8:	8b 15 84 1d 88 f0    	mov    0xf0881d84,%edx
f01065be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c1:	01 d0                	add    %edx,%eax
f01065c3:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065c6:	ff 45 f4             	incl   -0xc(%ebp)
f01065c9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065d0:	7e d8                	jle    f01065aa <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065d2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065dc:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01065ec:	f7 75 f0             	divl   -0x10(%ebp)
f01065ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065f2:	29 d0                	sub    %edx,%eax
f01065f4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065f7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065fe:	e9 e8 00 00 00       	jmp    f01066eb <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f0106603:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010660c:	89 d0                	mov    %edx,%eax
f010660e:	01 c0                	add    %eax,%eax
f0106610:	01 d0                	add    %edx,%eax
f0106612:	c1 e0 03             	shl    $0x3,%eax
f0106615:	01 c8                	add    %ecx,%eax
f0106617:	83 ec 0c             	sub    $0xc,%esp
f010661a:	50                   	push   %eax
f010661b:	e8 b7 02 00 00       	call   f01068d7 <initialize_frame_info>
f0106620:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106623:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010662c:	89 d0                	mov    %edx,%eax
f010662e:	01 c0                	add    %eax,%eax
f0106630:	01 d0                	add    %edx,%eax
f0106632:	c1 e0 03             	shl    $0x3,%eax
f0106635:	01 c8                	add    %ecx,%eax
f0106637:	85 c0                	test   %eax,%eax
f0106639:	75 14                	jne    f010664f <initialize_paging+0x12c>
f010663b:	83 ec 04             	sub    $0x4,%esp
f010663e:	68 00 62 13 f0       	push   $0xf0136200
f0106643:	6a 5c                	push   $0x5c
f0106645:	68 23 62 13 f0       	push   $0xf0136223
f010664a:	e8 b6 9b ff ff       	call   f0100205 <_panic>
f010664f:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106655:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106658:	89 d0                	mov    %edx,%eax
f010665a:	01 c0                	add    %eax,%eax
f010665c:	01 d0                	add    %edx,%eax
f010665e:	c1 e0 03             	shl    $0x3,%eax
f0106661:	01 c8                	add    %ecx,%eax
f0106663:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f0106669:	89 10                	mov    %edx,(%eax)
f010666b:	8b 00                	mov    (%eax),%eax
f010666d:	85 c0                	test   %eax,%eax
f010666f:	74 1f                	je     f0106690 <initialize_paging+0x16d>
f0106671:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f0106677:	8b 1d 54 1d 88 f0    	mov    0xf0881d54,%ebx
f010667d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106680:	89 c8                	mov    %ecx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 c8                	add    %ecx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 d8                	add    %ebx,%eax
f010668b:	89 42 04             	mov    %eax,0x4(%edx)
f010668e:	eb 19                	jmp    f01066a9 <initialize_paging+0x186>
f0106690:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 1c 1d 88 f0       	mov    %eax,0xf0881d1c
f01066a9:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	a3 18 1d 88 f0       	mov    %eax,0xf0881d18
f01066c2:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f01066c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cb:	89 d0                	mov    %edx,%eax
f01066cd:	01 c0                	add    %eax,%eax
f01066cf:	01 d0                	add    %edx,%eax
f01066d1:	c1 e0 03             	shl    $0x3,%eax
f01066d4:	01 c8                	add    %ecx,%eax
f01066d6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066dd:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f01066e2:	40                   	inc    %eax
f01066e3:	a3 24 1d 88 f0       	mov    %eax,0xf0881d24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066e8:	ff 45 f4             	incl   -0xc(%ebp)
f01066eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066ee:	85 c0                	test   %eax,%eax
f01066f0:	79 05                	jns    f01066f7 <initialize_paging+0x1d4>
f01066f2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f7:	c1 f8 0c             	sar    $0xc,%eax
f01066fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066fd:	0f 8f 00 ff ff ff    	jg     f0106603 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106703:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010670a:	eb 1d                	jmp    f0106729 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f010670c:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106712:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106715:	89 d0                	mov    %edx,%eax
f0106717:	01 c0                	add    %eax,%eax
f0106719:	01 d0                	add    %edx,%eax
f010671b:	c1 e0 03             	shl    $0x3,%eax
f010671e:	01 c8                	add    %ecx,%eax
f0106720:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106726:	ff 45 f4             	incl   -0xc(%ebp)
f0106729:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106730:	7e da                	jle    f010670c <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106732:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106739:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f010673e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106741:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106748:	77 14                	ja     f010675e <initialize_paging+0x23b>
f010674a:	ff 75 e0             	pushl  -0x20(%ebp)
f010674d:	68 40 62 13 f0       	push   $0xf0136240
f0106752:	6a 64                	push   $0x64
f0106754:	68 23 62 13 f0       	push   $0xf0136223
f0106759:	e8 a7 9a ff ff       	call   f0100205 <_panic>
f010675e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106761:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010676a:	01 d0                	add    %edx,%eax
f010676c:	48                   	dec    %eax
f010676d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106770:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106773:	ba 00 00 00 00       	mov    $0x0,%edx
f0106778:	f7 75 e4             	divl   -0x1c(%ebp)
f010677b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010677e:	29 d0                	sub    %edx,%eax
f0106780:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106783:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010678a:	eb 1d                	jmp    f01067a9 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010678c:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106792:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106795:	89 d0                	mov    %edx,%eax
f0106797:	01 c0                	add    %eax,%eax
f0106799:	01 d0                	add    %edx,%eax
f010679b:	c1 e0 03             	shl    $0x3,%eax
f010679e:	01 c8                	add    %ecx,%eax
f01067a0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067a6:	ff 45 f4             	incl   -0xc(%ebp)
f01067a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067ac:	85 c0                	test   %eax,%eax
f01067ae:	79 05                	jns    f01067b5 <initialize_paging+0x292>
f01067b0:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b5:	c1 f8 0c             	sar    $0xc,%eax
f01067b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067bb:	7f cf                	jg     f010678c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	79 05                	jns    f01067c9 <initialize_paging+0x2a6>
f01067c4:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067c9:	c1 f8 0c             	sar    $0xc,%eax
f01067cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067cf:	e9 e8 00 00 00       	jmp    f01068bc <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067d4:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f01067da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067dd:	89 d0                	mov    %edx,%eax
f01067df:	01 c0                	add    %eax,%eax
f01067e1:	01 d0                	add    %edx,%eax
f01067e3:	c1 e0 03             	shl    $0x3,%eax
f01067e6:	01 c8                	add    %ecx,%eax
f01067e8:	83 ec 0c             	sub    $0xc,%esp
f01067eb:	50                   	push   %eax
f01067ec:	e8 e6 00 00 00       	call   f01068d7 <initialize_frame_info>
f01067f1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067f4:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f01067fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fd:	89 d0                	mov    %edx,%eax
f01067ff:	01 c0                	add    %eax,%eax
f0106801:	01 d0                	add    %edx,%eax
f0106803:	c1 e0 03             	shl    $0x3,%eax
f0106806:	01 c8                	add    %ecx,%eax
f0106808:	85 c0                	test   %eax,%eax
f010680a:	75 14                	jne    f0106820 <initialize_paging+0x2fd>
f010680c:	83 ec 04             	sub    $0x4,%esp
f010680f:	68 00 62 13 f0       	push   $0xf0136200
f0106814:	6a 70                	push   $0x70
f0106816:	68 23 62 13 f0       	push   $0xf0136223
f010681b:	e8 e5 99 ff ff       	call   f0100205 <_panic>
f0106820:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106829:	89 d0                	mov    %edx,%eax
f010682b:	01 c0                	add    %eax,%eax
f010682d:	01 d0                	add    %edx,%eax
f010682f:	c1 e0 03             	shl    $0x3,%eax
f0106832:	01 c8                	add    %ecx,%eax
f0106834:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f010683a:	89 10                	mov    %edx,(%eax)
f010683c:	8b 00                	mov    (%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 1f                	je     f0106861 <initialize_paging+0x33e>
f0106842:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f0106848:	8b 1d 54 1d 88 f0    	mov    0xf0881d54,%ebx
f010684e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106851:	89 c8                	mov    %ecx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 c8                	add    %ecx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 d8                	add    %ebx,%eax
f010685c:	89 42 04             	mov    %eax,0x4(%edx)
f010685f:	eb 19                	jmp    f010687a <initialize_paging+0x357>
f0106861:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 1c 1d 88 f0       	mov    %eax,0xf0881d1c
f010687a:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	a3 18 1d 88 f0       	mov    %eax,0xf0881d18
f0106893:	8b 0d 54 1d 88 f0    	mov    0xf0881d54,%ecx
f0106899:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689c:	89 d0                	mov    %edx,%eax
f010689e:	01 c0                	add    %eax,%eax
f01068a0:	01 d0                	add    %edx,%eax
f01068a2:	c1 e0 03             	shl    $0x3,%eax
f01068a5:	01 c8                	add    %ecx,%eax
f01068a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068ae:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f01068b3:	40                   	inc    %eax
f01068b4:	a3 24 1d 88 f0       	mov    %eax,0xf0881d24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068b9:	ff 45 f4             	incl   -0xc(%ebp)
f01068bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068bf:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f01068c4:	39 c2                	cmp    %eax,%edx
f01068c6:	0f 82 08 ff ff ff    	jb     f01067d4 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068cc:	e8 eb c8 ff ff       	call   f01031bc <initialize_disk_page_file>
}
f01068d1:	90                   	nop
f01068d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068d5:	c9                   	leave  
f01068d6:	c3                   	ret    

f01068d7 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068d7:	55                   	push   %ebp
f01068d8:	89 e5                	mov    %esp,%ebp
f01068da:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068dd:	83 ec 04             	sub    $0x4,%esp
f01068e0:	6a 18                	push   $0x18
f01068e2:	6a 00                	push   $0x0
f01068e4:	ff 75 08             	pushl  0x8(%ebp)
f01068e7:	e8 8f ad 02 00       	call   f013167b <memset>
f01068ec:	83 c4 10             	add    $0x10,%esp
}
f01068ef:	90                   	nop
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068f8:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0106903:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	8b 00                	mov    (%eax),%eax
f010690f:	85 c0                	test   %eax,%eax
f0106911:	75 17                	jne    f010692a <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0106913:	83 ec 04             	sub    $0x4,%esp
f0106916:	68 74 62 13 f0       	push   $0xf0136274
f010691b:	68 99 00 00 00       	push   $0x99
f0106920:	68 23 62 13 f0       	push   $0xf0136223
f0106925:	e8 db 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010692a:	8b 45 08             	mov    0x8(%ebp),%eax
f010692d:	8b 00                	mov    (%eax),%eax
f010692f:	85 c0                	test   %eax,%eax
f0106931:	75 17                	jne    f010694a <allocate_frame+0x58>
f0106933:	83 ec 04             	sub    $0x4,%esp
f0106936:	68 c1 62 13 f0       	push   $0xf01362c1
f010693b:	68 9c 00 00 00       	push   $0x9c
f0106940:	68 23 62 13 f0       	push   $0xf0136223
f0106945:	e8 bb 98 ff ff       	call   f0100205 <_panic>
f010694a:	8b 45 08             	mov    0x8(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	8b 00                	mov    (%eax),%eax
f0106951:	85 c0                	test   %eax,%eax
f0106953:	74 14                	je     f0106969 <allocate_frame+0x77>
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 00                	mov    (%eax),%eax
f010695a:	8b 00                	mov    (%eax),%eax
f010695c:	8b 55 08             	mov    0x8(%ebp),%edx
f010695f:	8b 12                	mov    (%edx),%edx
f0106961:	8b 52 04             	mov    0x4(%edx),%edx
f0106964:	89 50 04             	mov    %edx,0x4(%eax)
f0106967:	eb 0d                	jmp    f0106976 <allocate_frame+0x84>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	a3 1c 1d 88 f0       	mov    %eax,0xf0881d1c
f0106976:	8b 45 08             	mov    0x8(%ebp),%eax
f0106979:	8b 00                	mov    (%eax),%eax
f010697b:	8b 40 04             	mov    0x4(%eax),%eax
f010697e:	85 c0                	test   %eax,%eax
f0106980:	74 13                	je     f0106995 <allocate_frame+0xa3>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	8b 00                	mov    (%eax),%eax
f0106987:	8b 40 04             	mov    0x4(%eax),%eax
f010698a:	8b 55 08             	mov    0x8(%ebp),%edx
f010698d:	8b 12                	mov    (%edx),%edx
f010698f:	8b 12                	mov    (%edx),%edx
f0106991:	89 10                	mov    %edx,(%eax)
f0106993:	eb 0c                	jmp    f01069a1 <allocate_frame+0xaf>
f0106995:	8b 45 08             	mov    0x8(%ebp),%eax
f0106998:	8b 00                	mov    (%eax),%eax
f010699a:	8b 00                	mov    (%eax),%eax
f010699c:	a3 18 1d 88 f0       	mov    %eax,0xf0881d18
f01069a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a4:	8b 00                	mov    (%eax),%eax
f01069a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	8b 00                	mov    (%eax),%eax
f01069b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069b8:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f01069bd:	48                   	dec    %eax
f01069be:	a3 24 1d 88 f0       	mov    %eax,0xf0881d24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c6:	8b 00                	mov    (%eax),%eax
f01069c8:	8a 40 14             	mov    0x14(%eax),%al
f01069cb:	84 c0                	test   %al,%al
f01069cd:	74 20                	je     f01069ef <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d2:	8b 00                	mov    (%eax),%eax
f01069d4:	8b 50 0c             	mov    0xc(%eax),%edx
f01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069da:	8b 00                	mov    (%eax),%eax
f01069dc:	8b 40 10             	mov    0x10(%eax),%eax
f01069df:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069e2:	83 ec 08             	sub    $0x8,%esp
f01069e5:	52                   	push   %edx
f01069e6:	50                   	push   %eax
f01069e7:	e8 c5 14 00 00       	call   f0107eb1 <pt_clear_page_table_entry>
f01069ec:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	50                   	push   %eax
f01069f8:	e8 da fe ff ff       	call   f01068d7 <initialize_frame_info>
f01069fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a05:	c9                   	leave  
f0106a06:	c3                   	ret    

f0106a07 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a07:	55                   	push   %ebp
f0106a08:	89 e5                	mov    %esp,%ebp
f0106a0a:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a0d:	83 ec 0c             	sub    $0xc,%esp
f0106a10:	ff 75 08             	pushl  0x8(%ebp)
f0106a13:	e8 bf fe ff ff       	call   f01068d7 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a1f:	75 17                	jne    f0106a38 <free_frame+0x31>
f0106a21:	83 ec 04             	sub    $0x4,%esp
f0106a24:	68 00 62 13 f0       	push   $0xf0136200
f0106a29:	68 b9 00 00 00       	push   $0xb9
f0106a2e:	68 23 62 13 f0       	push   $0xf0136223
f0106a33:	e8 cd 97 ff ff       	call   f0100205 <_panic>
f0106a38:	8b 15 18 1d 88 f0    	mov    0xf0881d18,%edx
f0106a3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a41:	89 10                	mov    %edx,(%eax)
f0106a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a46:	8b 00                	mov    (%eax),%eax
f0106a48:	85 c0                	test   %eax,%eax
f0106a4a:	74 0d                	je     f0106a59 <free_frame+0x52>
f0106a4c:	a1 18 1d 88 f0       	mov    0xf0881d18,%eax
f0106a51:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a54:	89 50 04             	mov    %edx,0x4(%eax)
f0106a57:	eb 08                	jmp    f0106a61 <free_frame+0x5a>
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	a3 1c 1d 88 f0       	mov    %eax,0xf0881d1c
f0106a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a64:	a3 18 1d 88 f0       	mov    %eax,0xf0881d18
f0106a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a73:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f0106a78:	40                   	inc    %eax
f0106a79:	a3 24 1d 88 f0       	mov    %eax,0xf0881d24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a7e:	90                   	nop
f0106a7f:	c9                   	leave  
f0106a80:	c3                   	ret    

f0106a81 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a81:	55                   	push   %ebp
f0106a82:	89 e5                	mov    %esp,%ebp
f0106a84:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a8a:	8b 40 08             	mov    0x8(%eax),%eax
f0106a8d:	48                   	dec    %eax
f0106a8e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a91:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a98:	8b 40 08             	mov    0x8(%eax),%eax
f0106a9b:	66 85 c0             	test   %ax,%ax
f0106a9e:	75 0e                	jne    f0106aae <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106aa0:	83 ec 0c             	sub    $0xc,%esp
f0106aa3:	ff 75 08             	pushl  0x8(%ebp)
f0106aa6:	e8 5c ff ff ff       	call   f0106a07 <free_frame>
f0106aab:	83 c4 10             	add    $0x10,%esp
}
f0106aae:	90                   	nop
f0106aaf:	c9                   	leave  
f0106ab0:	c3                   	ret    

f0106ab1 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ab1:	55                   	push   %ebp
f0106ab2:	89 e5                	mov    %esp,%ebp
f0106ab4:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aba:	c1 e8 16             	shr    $0x16,%eax
f0106abd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac7:	01 d0                	add    %edx,%eax
f0106ac9:	8b 00                	mov    (%eax),%eax
f0106acb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad1:	83 e0 01             	and    $0x1,%eax
f0106ad4:	85 c0                	test   %eax,%eax
f0106ad6:	74 74                	je     f0106b4c <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ad8:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106adf:	77 1d                	ja     f0106afe <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ae9:	83 ec 0c             	sub    $0xc,%esp
f0106aec:	50                   	push   %eax
f0106aed:	e8 7a 11 00 00       	call   f0107c6c <kheap_virtual_address>
f0106af2:	83 c4 10             	add    $0x10,%esp
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afa:	89 10                	mov    %edx,(%eax)
f0106afc:	eb 44                	jmp    f0106b42 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b01:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b06:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b0c:	c1 e8 0c             	shr    $0xc,%eax
f0106b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b12:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106b17:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b1a:	72 17                	jb     f0106b33 <get_page_table+0x82>
f0106b1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b1f:	68 e0 62 13 f0       	push   $0xf01362e0
f0106b24:	68 e2 00 00 00       	push   $0xe2
f0106b29:	68 23 62 13 f0       	push   $0xf0136223
f0106b2e:	e8 d2 96 ff ff       	call   f0100205 <_panic>
f0106b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b36:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b3b:	89 c2                	mov    %eax,%edx
f0106b3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b40:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b42:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b47:	e9 b9 00 00 00       	jmp    f0106c05 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b50:	0f 84 a1 00 00 00    	je     f0106bf7 <get_page_table+0x146>
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b5f:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b62:	83 ec 0c             	sub    $0xc,%esp
f0106b65:	6a 00                	push   $0x0
f0106b67:	e8 38 5d 00 00       	call   f010c8a4 <fault_handler>
f0106b6c:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b72:	c1 e8 16             	shr    $0x16,%eax
f0106b75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b7f:	01 d0                	add    %edx,%eax
f0106b81:	8b 00                	mov    (%eax),%eax
f0106b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b86:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b8d:	77 1d                	ja     f0106bac <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 cc 10 00 00       	call   f0107c6c <kheap_virtual_address>
f0106ba0:	83 c4 10             	add    $0x10,%esp
f0106ba3:	89 c2                	mov    %eax,%edx
f0106ba5:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ba8:	89 10                	mov    %edx,(%eax)
f0106baa:	eb 44                	jmp    f0106bf0 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bba:	c1 e8 0c             	shr    $0xc,%eax
f0106bbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bc0:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106bc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106bc8:	72 17                	jb     f0106be1 <get_page_table+0x130>
f0106bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bcd:	68 e0 62 13 f0       	push   $0xf01362e0
f0106bd2:	68 fa 00 00 00       	push   $0xfa
f0106bd7:	68 23 62 13 f0       	push   $0xf0136223
f0106bdc:	e8 24 96 ff ff       	call   f0100205 <_panic>
f0106be1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106be4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106be9:	89 c2                	mov    %eax,%edx
f0106beb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bee:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bf0:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bf5:	eb 0e                	jmp    f0106c05 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bf7:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c00:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c05:	c9                   	leave  
f0106c06:	c3                   	ret    

f0106c07 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c07:	55                   	push   %ebp
f0106c08:	89 e5                	mov    %esp,%ebp
f0106c0a:	53                   	push   %ebx
f0106c0b:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c0e:	83 ec 0c             	sub    $0xc,%esp
f0106c11:	68 00 10 00 00       	push   $0x1000
f0106c16:	e8 5f 0e 00 00       	call   f0107a7a <kmalloc>
f0106c1b:	83 c4 10             	add    $0x10,%esp
f0106c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c25:	75 17                	jne    f0106c3e <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c27:	83 ec 04             	sub    $0x4,%esp
f0106c2a:	68 0f 63 13 f0       	push   $0xf013630f
f0106c2f:	68 18 01 00 00       	push   $0x118
f0106c34:	68 23 62 13 f0       	push   $0xf0136223
f0106c39:	e8 c7 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c41:	c1 e8 16             	shr    $0x16,%eax
f0106c44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c54:	83 ec 0c             	sub    $0xc,%esp
f0106c57:	50                   	push   %eax
f0106c58:	e8 3b 10 00 00       	call   f0107c98 <kheap_physical_address>
f0106c5d:	83 c4 10             	add    $0x10,%esp
f0106c60:	83 c8 07             	or     $0x7,%eax
f0106c63:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c65:	83 ec 04             	sub    $0x4,%esp
f0106c68:	68 00 10 00 00       	push   $0x1000
f0106c6d:	6a 00                	push   $0x0
f0106c6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c72:	e8 04 aa 02 00       	call   f013167b <memset>
f0106c77:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c7a:	0f 20 d8             	mov    %cr3,%eax
f0106c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c83:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c8c:	c9                   	leave  
f0106c8d:	c3                   	ret    

f0106c8e <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c8e:	55                   	push   %ebp
f0106c8f:	89 e5                	mov    %esp,%ebp
f0106c91:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c94:	83 ec 0c             	sub    $0xc,%esp
f0106c97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c9a:	50                   	push   %eax
f0106c9b:	e8 52 fc ff ff       	call   f01068f2 <allocate_frame>
f0106ca0:	83 c4 10             	add    $0x10,%esp
f0106ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ca9:	83 ec 0c             	sub    $0xc,%esp
f0106cac:	50                   	push   %eax
f0106cad:	e8 03 f8 ff ff       	call   f01064b5 <to_physical_address>
f0106cb2:	83 c4 10             	add    $0x10,%esp
f0106cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cc1:	c1 e8 0c             	shr    $0xc,%eax
f0106cc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cc7:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106ccc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ccf:	72 17                	jb     f0106ce8 <__static_cpt+0x5a>
f0106cd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cd4:	68 e0 62 13 f0       	push   $0xf01362e0
f0106cd9:	68 30 01 00 00       	push   $0x130
f0106cde:	68 23 62 13 f0       	push   $0xf0136223
f0106ce3:	e8 1d 95 ff ff       	call   f0100205 <_panic>
f0106ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ceb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cf0:	89 c2                	mov    %eax,%edx
f0106cf2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cf5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cfa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d03:	c1 e8 16             	shr    $0x16,%eax
f0106d06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d10:	01 d0                	add    %edx,%eax
f0106d12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d15:	83 ca 07             	or     $0x7,%edx
f0106d18:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d1d:	8b 00                	mov    (%eax),%eax
f0106d1f:	83 ec 04             	sub    $0x4,%esp
f0106d22:	68 00 10 00 00       	push   $0x1000
f0106d27:	6a 00                	push   $0x0
f0106d29:	50                   	push   %eax
f0106d2a:	e8 4c a9 02 00       	call   f013167b <memset>
f0106d2f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d32:	0f 20 d8             	mov    %cr3,%eax
f0106d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d3b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d3e:	90                   	nop
f0106d3f:	c9                   	leave  
f0106d40:	c3                   	ret    

f0106d41 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d41:	55                   	push   %ebp
f0106d42:	89 e5                	mov    %esp,%ebp
f0106d44:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d47:	ff 75 0c             	pushl  0xc(%ebp)
f0106d4a:	e8 66 f7 ff ff       	call   f01064b5 <to_physical_address>
f0106d4f:	83 c4 04             	add    $0x4,%esp
f0106d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d55:	83 ec 04             	sub    $0x4,%esp
f0106d58:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d5b:	50                   	push   %eax
f0106d5c:	ff 75 10             	pushl  0x10(%ebp)
f0106d5f:	ff 75 08             	pushl  0x8(%ebp)
f0106d62:	e8 4a fd ff ff       	call   f0106ab1 <get_page_table>
f0106d67:	83 c4 10             	add    $0x10,%esp
f0106d6a:	83 f8 01             	cmp    $0x1,%eax
f0106d6d:	75 1b                	jne    f0106d8a <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d6f:	83 ec 08             	sub    $0x8,%esp
f0106d72:	ff 75 10             	pushl  0x10(%ebp)
f0106d75:	ff 75 08             	pushl  0x8(%ebp)
f0106d78:	e8 8a fe ff ff       	call   f0106c07 <create_page_table>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d8d:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d90:	c1 ea 0c             	shr    $0xc,%edx
f0106d93:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d99:	c1 e2 02             	shl    $0x2,%edx
f0106d9c:	01 d0                	add    %edx,%eax
f0106d9e:	8b 00                	mov    (%eax),%eax
f0106da0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106da6:	83 e0 01             	and    $0x1,%eax
f0106da9:	85 c0                	test   %eax,%eax
f0106dab:	74 25                	je     f0106dd2 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106db0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106db5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106db8:	75 07                	jne    f0106dc1 <map_frame+0x80>
			return 0;
f0106dba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dbf:	eb 43                	jmp    f0106e04 <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106dc1:	83 ec 08             	sub    $0x8,%esp
f0106dc4:	ff 75 10             	pushl  0x10(%ebp)
f0106dc7:	ff 75 08             	pushl  0x8(%ebp)
f0106dca:	e8 a7 00 00 00       	call   f0106e76 <unmap_frame>
f0106dcf:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dd5:	8b 40 08             	mov    0x8(%eax),%eax
f0106dd8:	40                   	inc    %eax
f0106dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ddc:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106de3:	8b 55 10             	mov    0x10(%ebp),%edx
f0106de6:	c1 ea 0c             	shr    $0xc,%edx
f0106de9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106def:	c1 e2 02             	shl    $0x2,%edx
f0106df2:	01 c2                	add    %eax,%edx
f0106df4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106df7:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dfa:	83 c8 01             	or     $0x1,%eax
f0106dfd:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e04:	c9                   	leave  
f0106e05:	c3                   	ret    

f0106e06 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e06:	55                   	push   %ebp
f0106e07:	89 e5                	mov    %esp,%ebp
f0106e09:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e0c:	83 ec 04             	sub    $0x4,%esp
f0106e0f:	ff 75 10             	pushl  0x10(%ebp)
f0106e12:	ff 75 0c             	pushl  0xc(%ebp)
f0106e15:	ff 75 08             	pushl  0x8(%ebp)
f0106e18:	e8 94 fc ff ff       	call   f0106ab1 <get_page_table>
f0106e1d:	83 c4 10             	add    $0x10,%esp
f0106e20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e26:	8b 00                	mov    (%eax),%eax
f0106e28:	85 c0                	test   %eax,%eax
f0106e2a:	74 43                	je     f0106e6f <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e2f:	c1 e8 0c             	shr    $0xc,%eax
f0106e32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	8b 00                	mov    (%eax),%eax
f0106e3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e42:	c1 e2 02             	shl    $0x2,%edx
f0106e45:	01 d0                	add    %edx,%eax
f0106e47:	8b 00                	mov    (%eax),%eax
f0106e49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e50:	74 16                	je     f0106e68 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	50                   	push   %eax
f0106e5e:	e8 65 f6 ff ff       	call   f01064c8 <to_frame_info>
f0106e63:	83 c4 10             	add    $0x10,%esp
f0106e66:	eb 0c                	jmp    f0106e74 <get_frame_info+0x6e>
		}
		return 0;
f0106e68:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e6d:	eb 05                	jmp    f0106e74 <get_frame_info+0x6e>
	}
	return 0;
f0106e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e74:	c9                   	leave  
f0106e75:	c3                   	ret    

f0106e76 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e76:	55                   	push   %ebp
f0106e77:	89 e5                	mov    %esp,%ebp
f0106e79:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e7c:	83 ec 04             	sub    $0x4,%esp
f0106e7f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e82:	50                   	push   %eax
f0106e83:	ff 75 0c             	pushl  0xc(%ebp)
f0106e86:	ff 75 08             	pushl  0x8(%ebp)
f0106e89:	e8 78 ff ff ff       	call   f0106e06 <get_frame_info>
f0106e8e:	83 c4 10             	add    $0x10,%esp
f0106e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	74 60                	je     f0106efa <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e9d:	8a 40 14             	mov    0x14(%eax),%al
f0106ea0:	84 c0                	test   %al,%al
f0106ea2:	74 1c                	je     f0106ec0 <unmap_frame+0x4a>
f0106ea4:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106eab:	77 13                	ja     f0106ec0 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ead:	83 ec 08             	sub    $0x8,%esp
f0106eb0:	ff 75 0c             	pushl  0xc(%ebp)
f0106eb3:	68 2c 63 13 f0       	push   $0xf013632c
f0106eb8:	e8 51 9e ff ff       	call   f0100d0e <cprintf>
f0106ebd:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ec0:	83 ec 0c             	sub    $0xc,%esp
f0106ec3:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ec6:	e8 b6 fb ff ff       	call   f0106a81 <decrement_references>
f0106ecb:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ece:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ed1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed4:	c1 ea 0c             	shr    $0xc,%edx
f0106ed7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106edd:	c1 e2 02             	shl    $0x2,%edx
f0106ee0:	01 d0                	add    %edx,%eax
f0106ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eeb:	83 ec 08             	sub    $0x8,%esp
f0106eee:	50                   	push   %eax
f0106eef:	ff 75 08             	pushl  0x8(%ebp)
f0106ef2:	e8 17 f6 ff ff       	call   f010650e <tlb_invalidate>
f0106ef7:	83 c4 10             	add    $0x10,%esp
	}
}
f0106efa:	90                   	nop
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f03:	ff 75 0c             	pushl  0xc(%ebp)
f0106f06:	e8 aa f5 ff ff       	call   f01064b5 <to_physical_address>
f0106f0b:	83 c4 04             	add    $0x4,%esp
f0106f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f11:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f14:	c1 e8 16             	shr    $0x16,%eax
f0106f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f21:	01 d0                	add    %edx,%eax
f0106f23:	8b 00                	mov    (%eax),%eax
f0106f25:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f28:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f2f:	77 19                	ja     f0106f4a <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	83 ec 0c             	sub    $0xc,%esp
f0106f3c:	50                   	push   %eax
f0106f3d:	e8 2a 0d 00 00       	call   f0107c6c <kheap_virtual_address>
f0106f42:	83 c4 10             	add    $0x10,%esp
f0106f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f48:	eb 40                	jmp    f0106f8a <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f58:	c1 e8 0c             	shr    $0xc,%eax
f0106f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f5e:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0106f63:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f66:	72 17                	jb     f0106f7f <loadtime_map_frame+0x82>
f0106f68:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f6b:	68 e0 62 13 f0       	push   $0xf01362e0
f0106f70:	68 e6 01 00 00       	push   $0x1e6
f0106f75:	68 23 62 13 f0       	push   $0xf0136223
f0106f7a:	e8 86 92 ff ff       	call   f0100205 <_panic>
f0106f7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f82:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f8e:	75 14                	jne    f0106fa4 <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f90:	83 ec 08             	sub    $0x8,%esp
f0106f93:	ff 75 10             	pushl  0x10(%ebp)
f0106f96:	ff 75 08             	pushl  0x8(%ebp)
f0106f99:	e8 69 fc ff ff       	call   f0106c07 <create_page_table>
f0106f9e:	83 c4 10             	add    $0x10,%esp
f0106fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fa7:	8b 40 08             	mov    0x8(%eax),%eax
f0106faa:	40                   	inc    %eax
f0106fab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fae:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fb5:	c1 e8 0c             	shr    $0xc,%eax
f0106fb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fc7:	01 c2                	add    %eax,%edx
f0106fc9:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fcc:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fcf:	83 c8 01             	or     $0x1,%eax
f0106fd2:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fd9:	c9                   	leave  
f0106fda:	c3                   	ret    

f0106fdb <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
f0106fde:	57                   	push   %edi
f0106fdf:	56                   	push   %esi
f0106fe0:	53                   	push   %ebx
f0106fe1:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106feb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106ff2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106ff9:	a1 18 1d 88 f0       	mov    0xf0881d18,%eax
f0106ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107001:	eb 1a                	jmp    f010701d <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107003:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107006:	8a 40 14             	mov    0x14(%eax),%al
f0107009:	84 c0                	test   %al,%al
f010700b:	74 05                	je     f0107012 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f010700d:	ff 45 e8             	incl   -0x18(%ebp)
f0107010:	eb 03                	jmp    f0107015 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107012:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107015:	a1 20 1d 88 f0       	mov    0xf0881d20,%eax
f010701a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107021:	74 07                	je     f010702a <calculate_available_frames+0x4f>
f0107023:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107026:	8b 00                	mov    (%eax),%eax
f0107028:	eb 05                	jmp    f010702f <calculate_available_frames+0x54>
f010702a:	b8 00 00 00 00       	mov    $0x0,%eax
f010702f:	a3 20 1d 88 f0       	mov    %eax,0xf0881d20
f0107034:	a1 20 1d 88 f0       	mov    0xf0881d20,%eax
f0107039:	85 c0                	test   %eax,%eax
f010703b:	75 c6                	jne    f0107003 <calculate_available_frames+0x28>
f010703d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107041:	75 c0                	jne    f0107003 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107043:	a1 b8 1c 88 f0       	mov    0xf0881cb8,%eax
f0107048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010704b:	eb 0b                	jmp    f0107058 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f010704d:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107050:	a1 c0 1c 88 f0       	mov    0xf0881cc0,%eax
f0107055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	74 07                	je     f0107065 <calculate_available_frames+0x8a>
f010705e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107061:	8b 00                	mov    (%eax),%eax
f0107063:	eb 05                	jmp    f010706a <calculate_available_frames+0x8f>
f0107065:	b8 00 00 00 00       	mov    $0x0,%eax
f010706a:	a3 c0 1c 88 f0       	mov    %eax,0xf0881cc0
f010706f:	a1 c0 1c 88 f0       	mov    0xf0881cc0,%eax
f0107074:	85 c0                	test   %eax,%eax
f0107076:	75 d5                	jne    f010704d <calculate_available_frames+0x72>
f0107078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010707c:	75 cf                	jne    f010704d <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107081:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0107084:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107087:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f010708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010708d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107090:	8b 45 08             	mov    0x8(%ebp),%eax
f0107093:	89 c3                	mov    %eax,%ebx
f0107095:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0107098:	ba 03 00 00 00       	mov    $0x3,%edx
f010709d:	89 df                	mov    %ebx,%edi
f010709f:	89 c6                	mov    %eax,%esi
f01070a1:	89 d1                	mov    %edx,%ecx
f01070a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070a8:	83 c4 20             	add    $0x20,%esp
f01070ab:	5b                   	pop    %ebx
f01070ac:	5e                   	pop    %esi
f01070ad:	5f                   	pop    %edi
f01070ae:	5d                   	pop    %ebp
f01070af:	c2 04 00             	ret    $0x4

f01070b2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070b2:	55                   	push   %ebp
f01070b3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01070b8:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f01070be:	29 d0                	sub    %edx,%eax
f01070c0:	c1 f8 03             	sar    $0x3,%eax
f01070c3:	89 c2                	mov    %eax,%edx
f01070c5:	89 d0                	mov    %edx,%eax
f01070c7:	c1 e0 02             	shl    $0x2,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	c1 e0 02             	shl    $0x2,%eax
f01070cf:	01 d0                	add    %edx,%eax
f01070d1:	c1 e0 02             	shl    $0x2,%eax
f01070d4:	01 d0                	add    %edx,%eax
f01070d6:	89 c1                	mov    %eax,%ecx
f01070d8:	c1 e1 08             	shl    $0x8,%ecx
f01070db:	01 c8                	add    %ecx,%eax
f01070dd:	89 c1                	mov    %eax,%ecx
f01070df:	c1 e1 10             	shl    $0x10,%ecx
f01070e2:	01 c8                	add    %ecx,%eax
f01070e4:	01 c0                	add    %eax,%eax
f01070e6:	01 d0                	add    %edx,%eax
}
f01070e8:	5d                   	pop    %ebp
f01070e9:	c3                   	ret    

f01070ea <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070ea:	55                   	push   %ebp
f01070eb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070ed:	ff 75 08             	pushl  0x8(%ebp)
f01070f0:	e8 bd ff ff ff       	call   f01070b2 <to_frame_number>
f01070f5:	83 c4 04             	add    $0x4,%esp
f01070f8:	c1 e0 0c             	shl    $0xc,%eax
}
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
f0107100:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f0107103:	8b 45 08             	mov    0x8(%ebp),%eax
f0107106:	a3 28 1d 88 f0       	mov    %eax,0xf0881d28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010710b:	8b 55 08             	mov    0x8(%ebp),%edx
f010710e:	89 d0                	mov    %edx,%eax
f0107110:	c1 e0 02             	shl    $0x2,%eax
f0107113:	01 d0                	add    %edx,%eax
f0107115:	c1 e0 02             	shl    $0x2,%eax
f0107118:	01 d0                	add    %edx,%eax
f010711a:	c1 e0 02             	shl    $0x2,%eax
f010711d:	83 ec 0c             	sub    $0xc,%esp
f0107120:	50                   	push   %eax
f0107121:	e8 54 09 00 00       	call   f0107a7a <kmalloc>
f0107126:	83 c4 10             	add    $0x10,%esp
f0107129:	a3 ec 1c 88 f0       	mov    %eax,0xf0881cec
	if (shares == NULL)
f010712e:	a1 ec 1c 88 f0       	mov    0xf0881cec,%eax
f0107133:	85 c0                	test   %eax,%eax
f0107135:	75 14                	jne    f010714b <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107137:	83 ec 04             	sub    $0x4,%esp
f010713a:	68 50 63 13 f0       	push   $0xf0136350
f010713f:	6a 21                	push   $0x21
f0107141:	68 94 63 13 f0       	push   $0xf0136394
f0107146:	e8 ba 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010714b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107152:	eb 4b                	jmp    f010719f <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107154:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f010715a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010715d:	89 d0                	mov    %edx,%eax
f010715f:	c1 e0 02             	shl    $0x2,%eax
f0107162:	01 d0                	add    %edx,%eax
f0107164:	c1 e0 02             	shl    $0x2,%eax
f0107167:	01 d0                	add    %edx,%eax
f0107169:	c1 e0 02             	shl    $0x2,%eax
f010716c:	01 c8                	add    %ecx,%eax
f010716e:	83 ec 04             	sub    $0x4,%esp
f0107171:	6a 54                	push   $0x54
f0107173:	6a 00                	push   $0x0
f0107175:	50                   	push   %eax
f0107176:	e8 00 a5 02 00       	call   f013167b <memset>
f010717b:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010717e:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107184:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107187:	89 d0                	mov    %edx,%eax
f0107189:	c1 e0 02             	shl    $0x2,%eax
f010718c:	01 d0                	add    %edx,%eax
f010718e:	c1 e0 02             	shl    $0x2,%eax
f0107191:	01 d0                	add    %edx,%eax
f0107193:	c1 e0 02             	shl    $0x2,%eax
f0107196:	01 c8                	add    %ecx,%eax
f0107198:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010719c:	ff 45 f4             	incl   -0xc(%ebp)
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f01071a7:	39 c2                	cmp    %eax,%edx
f01071a9:	72 a9                	jb     f0107154 <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071ab:	90                   	nop
f01071ac:	c9                   	leave  
f01071ad:	c3                   	ret    

f01071ae <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071ae:	55                   	push   %ebp
f01071af:	89 e5                	mov    %esp,%ebp
f01071b1:	53                   	push   %ebx
f01071b2:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071b5:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071c3:	eb 2c                	jmp    f01071f1 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071c5:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01071cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ce:	89 d0                	mov    %edx,%eax
f01071d0:	c1 e0 02             	shl    $0x2,%eax
f01071d3:	01 d0                	add    %edx,%eax
f01071d5:	c1 e0 02             	shl    $0x2,%eax
f01071d8:	01 d0                	add    %edx,%eax
f01071da:	c1 e0 02             	shl    $0x2,%eax
f01071dd:	01 c8                	add    %ecx,%eax
f01071df:	8a 40 4d             	mov    0x4d(%eax),%al
f01071e2:	84 c0                	test   %al,%al
f01071e4:	74 08                	je     f01071ee <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071ec:	eb 0f                	jmp    f01071fd <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071ee:	ff 45 f0             	incl   -0x10(%ebp)
f01071f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071f4:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f01071f9:	39 c2                	cmp    %eax,%edx
f01071fb:	72 c8                	jb     f01071c5 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071fd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107201:	75 0a                	jne    f010720d <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f0107203:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107208:	e9 94 00 00 00       	jmp    f01072a1 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010720d:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107216:	89 d0                	mov    %edx,%eax
f0107218:	c1 e0 02             	shl    $0x2,%eax
f010721b:	01 d0                	add    %edx,%eax
f010721d:	c1 e0 02             	shl    $0x2,%eax
f0107220:	01 d0                	add    %edx,%eax
f0107222:	c1 e0 02             	shl    $0x2,%eax
f0107225:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107228:	8b 45 08             	mov    0x8(%ebp),%eax
f010722b:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010722d:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107233:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107236:	89 d0                	mov    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 c8                	add    %ecx,%eax
f0107247:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f010724b:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107251:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107254:	89 d0                	mov    %edx,%eax
f0107256:	c1 e0 02             	shl    $0x2,%eax
f0107259:	01 d0                	add    %edx,%eax
f010725b:	c1 e0 02             	shl    $0x2,%eax
f010725e:	01 d0                	add    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107266:	e8 97 01 00 00       	call   f0107402 <create_frames_storage>
f010726b:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010726e:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	89 d0                	mov    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 d0                	add    %edx,%eax
f010727e:	c1 e0 02             	shl    $0x2,%eax
f0107281:	01 d0                	add    %edx,%eax
f0107283:	c1 e0 02             	shl    $0x2,%eax
f0107286:	01 c8                	add    %ecx,%eax
f0107288:	8b 40 50             	mov    0x50(%eax),%eax
f010728b:	83 ec 04             	sub    $0x4,%esp
f010728e:	68 00 10 00 00       	push   $0x1000
f0107293:	6a 00                	push   $0x0
f0107295:	50                   	push   %eax
f0107296:	e8 e0 a3 02 00       	call   f013167b <memset>
f010729b:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010729e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072a4:	c9                   	leave  
f01072a5:	c3                   	ret    

f01072a6 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072a6:	55                   	push   %ebp
f01072a7:	89 e5                	mov    %esp,%ebp
f01072a9:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072b3:	eb 7b                	jmp    f0107330 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072b5:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01072bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072be:	89 d0                	mov    %edx,%eax
f01072c0:	c1 e0 02             	shl    $0x2,%eax
f01072c3:	01 d0                	add    %edx,%eax
f01072c5:	c1 e0 02             	shl    $0x2,%eax
f01072c8:	01 d0                	add    %edx,%eax
f01072ca:	c1 e0 02             	shl    $0x2,%eax
f01072cd:	01 c8                	add    %ecx,%eax
f01072cf:	8a 40 4d             	mov    0x4d(%eax),%al
f01072d2:	84 c0                	test   %al,%al
f01072d4:	75 56                	jne    f010732c <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072d6:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01072dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072df:	89 d0                	mov    %edx,%eax
f01072e1:	c1 e0 02             	shl    $0x2,%eax
f01072e4:	01 d0                	add    %edx,%eax
f01072e6:	c1 e0 02             	shl    $0x2,%eax
f01072e9:	01 d0                	add    %edx,%eax
f01072eb:	c1 e0 02             	shl    $0x2,%eax
f01072ee:	01 c8                	add    %ecx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072f5:	75 36                	jne    f010732d <get_share_object_ID+0x87>
f01072f7:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01072fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107300:	89 d0                	mov    %edx,%eax
f0107302:	c1 e0 02             	shl    $0x2,%eax
f0107305:	01 d0                	add    %edx,%eax
f0107307:	c1 e0 02             	shl    $0x2,%eax
f010730a:	01 d0                	add    %edx,%eax
f010730c:	c1 e0 02             	shl    $0x2,%eax
f010730f:	01 c8                	add    %ecx,%eax
f0107311:	83 c0 04             	add    $0x4,%eax
f0107314:	83 ec 08             	sub    $0x8,%esp
f0107317:	50                   	push   %eax
f0107318:	ff 75 0c             	pushl  0xc(%ebp)
f010731b:	e8 79 a2 02 00       	call   f0131599 <strcmp>
f0107320:	83 c4 10             	add    $0x10,%esp
f0107323:	85 c0                	test   %eax,%eax
f0107325:	75 06                	jne    f010732d <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107327:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010732a:	eb 19                	jmp    f0107345 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010732c:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010732d:	ff 45 f4             	incl   -0xc(%ebp)
f0107330:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107333:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f0107338:	39 c2                	cmp    %eax,%edx
f010733a:	0f 82 75 ff ff ff    	jb     f01072b5 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107340:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107345:	c9                   	leave  
f0107346:	c3                   	ret    

f0107347 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107347:	55                   	push   %ebp
f0107348:	89 e5                	mov    %esp,%ebp
f010734a:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010734d:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
f0107352:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107355:	72 0a                	jb     f0107361 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107357:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010735c:	e9 9f 00 00 00       	jmp    f0107400 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107361:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107367:	8b 55 08             	mov    0x8(%ebp),%edx
f010736a:	89 d0                	mov    %edx,%eax
f010736c:	c1 e0 02             	shl    $0x2,%eax
f010736f:	01 d0                	add    %edx,%eax
f0107371:	c1 e0 02             	shl    $0x2,%eax
f0107374:	01 d0                	add    %edx,%eax
f0107376:	c1 e0 02             	shl    $0x2,%eax
f0107379:	01 c8                	add    %ecx,%eax
f010737b:	8b 40 50             	mov    0x50(%eax),%eax
f010737e:	83 ec 0c             	sub    $0xc,%esp
f0107381:	50                   	push   %eax
f0107382:	e8 52 01 00 00       	call   f01074d9 <clear_frames_storage>
f0107387:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f010738a:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107390:	8b 55 08             	mov    0x8(%ebp),%edx
f0107393:	89 d0                	mov    %edx,%eax
f0107395:	c1 e0 02             	shl    $0x2,%eax
f0107398:	01 d0                	add    %edx,%eax
f010739a:	c1 e0 02             	shl    $0x2,%eax
f010739d:	01 d0                	add    %edx,%eax
f010739f:	c1 e0 02             	shl    $0x2,%eax
f01073a2:	01 c8                	add    %ecx,%eax
f01073a4:	8b 40 50             	mov    0x50(%eax),%eax
f01073a7:	83 ec 0c             	sub    $0xc,%esp
f01073aa:	50                   	push   %eax
f01073ab:	e8 95 07 00 00       	call   f0107b45 <kfree>
f01073b0:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073b3:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01073b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01073bc:	89 d0                	mov    %edx,%eax
f01073be:	c1 e0 02             	shl    $0x2,%eax
f01073c1:	01 d0                	add    %edx,%eax
f01073c3:	c1 e0 02             	shl    $0x2,%eax
f01073c6:	01 d0                	add    %edx,%eax
f01073c8:	c1 e0 02             	shl    $0x2,%eax
f01073cb:	01 c8                	add    %ecx,%eax
f01073cd:	83 ec 04             	sub    $0x4,%esp
f01073d0:	6a 54                	push   $0x54
f01073d2:	6a 00                	push   $0x0
f01073d4:	50                   	push   %eax
f01073d5:	e8 a1 a2 02 00       	call   f013167b <memset>
f01073da:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073dd:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01073e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01073e6:	89 d0                	mov    %edx,%eax
f01073e8:	c1 e0 02             	shl    $0x2,%eax
f01073eb:	01 d0                	add    %edx,%eax
f01073ed:	c1 e0 02             	shl    $0x2,%eax
f01073f0:	01 d0                	add    %edx,%eax
f01073f2:	c1 e0 02             	shl    $0x2,%eax
f01073f5:	01 c8                	add    %ecx,%eax
f01073f7:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107400:	c9                   	leave  
f0107401:	c3                   	ret    

f0107402 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107402:	55                   	push   %ebp
f0107403:	89 e5                	mov    %esp,%ebp
f0107405:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107408:	83 ec 0c             	sub    $0xc,%esp
f010740b:	68 00 10 00 00       	push   $0x1000
f0107410:	e8 65 06 00 00       	call   f0107a7a <kmalloc>
f0107415:	83 c4 10             	add    $0x10,%esp
f0107418:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010741b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010741f:	75 17                	jne    f0107438 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107421:	83 ec 04             	sub    $0x4,%esp
f0107424:	68 b5 63 13 f0       	push   $0xf01363b5
f0107429:	68 a5 00 00 00       	push   $0xa5
f010742e:	68 94 63 13 f0       	push   $0xf0136394
f0107433:	e8 cd 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	53                   	push   %ebx
f0107441:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107444:	8b 45 10             	mov    0x10(%ebp),%eax
f0107447:	c1 e0 0c             	shl    $0xc,%eax
f010744a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010744d:	83 ec 04             	sub    $0x4,%esp
f0107450:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107453:	50                   	push   %eax
f0107454:	ff 75 f4             	pushl  -0xc(%ebp)
f0107457:	ff 75 08             	pushl  0x8(%ebp)
f010745a:	e8 52 f6 ff ff       	call   f0106ab1 <get_page_table>
f010745f:	83 c4 10             	add    $0x10,%esp
f0107462:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107465:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107469:	75 14                	jne    f010747f <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010746b:	83 ec 08             	sub    $0x8,%esp
f010746e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107471:	ff 75 08             	pushl  0x8(%ebp)
f0107474:	e8 8e f7 ff ff       	call   f0106c07 <create_page_table>
f0107479:	83 c4 10             	add    $0x10,%esp
f010747c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010747f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107485:	c1 ea 0c             	shr    $0xc,%edx
f0107488:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010748e:	c1 e2 02             	shl    $0x2,%edx
f0107491:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107494:	83 ec 0c             	sub    $0xc,%esp
f0107497:	ff 75 0c             	pushl  0xc(%ebp)
f010749a:	e8 4b fc ff ff       	call   f01070ea <to_physical_address>
f010749f:	83 c4 10             	add    $0x10,%esp
f01074a2:	83 c8 01             	or     $0x1,%eax
f01074a5:	89 03                	mov    %eax,(%ebx)
}
f01074a7:	90                   	nop
f01074a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074ab:	c9                   	leave  
f01074ac:	c3                   	ret    

f01074ad <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074ad:	55                   	push   %ebp
f01074ae:	89 e5                	mov    %esp,%ebp
f01074b0:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074b6:	c1 e0 0c             	shl    $0xc,%eax
f01074b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074bc:	83 ec 04             	sub    $0x4,%esp
f01074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074c2:	50                   	push   %eax
f01074c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01074c6:	ff 75 08             	pushl  0x8(%ebp)
f01074c9:	e8 38 f9 ff ff       	call   f0106e06 <get_frame_info>
f01074ce:	83 c4 10             	add    $0x10,%esp
f01074d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074d7:	c9                   	leave  
f01074d8:	c3                   	ret    

f01074d9 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074d9:	55                   	push   %ebp
f01074da:	89 e5                	mov    %esp,%ebp
f01074dc:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074df:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074ed:	eb 5b                	jmp    f010754a <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fc:	01 d0                	add    %edx,%eax
f01074fe:	8b 00                	mov    (%eax),%eax
f0107500:	85 c0                	test   %eax,%eax
f0107502:	74 43                	je     f0107547 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010750e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107511:	01 d0                	add    %edx,%eax
f0107513:	8b 00                	mov    (%eax),%eax
f0107515:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010751a:	83 ec 0c             	sub    $0xc,%esp
f010751d:	50                   	push   %eax
f010751e:	e8 49 07 00 00       	call   f0107c6c <kheap_virtual_address>
f0107523:	83 c4 10             	add    $0x10,%esp
f0107526:	83 ec 0c             	sub    $0xc,%esp
f0107529:	50                   	push   %eax
f010752a:	e8 16 06 00 00       	call   f0107b45 <kfree>
f010752f:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107535:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010753c:	8b 45 08             	mov    0x8(%ebp),%eax
f010753f:	01 d0                	add    %edx,%eax
f0107541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107547:	ff 45 f4             	incl   -0xc(%ebp)
f010754a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107551:	7e 9c                	jle    f01074ef <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107553:	90                   	nop
f0107554:	c9                   	leave  
f0107555:	c3                   	ret    

f0107556 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107556:	55                   	push   %ebp
f0107557:	89 e5                	mov    %esp,%ebp
f0107559:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010755c:	83 ec 08             	sub    $0x8,%esp
f010755f:	ff 75 0c             	pushl  0xc(%ebp)
f0107562:	ff 75 08             	pushl  0x8(%ebp)
f0107565:	e8 3c fd ff ff       	call   f01072a6 <get_share_object_ID>
f010756a:	83 c4 10             	add    $0x10,%esp
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107570:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f0107574:	75 07                	jne    f010757d <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107576:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010757b:	eb 1d                	jmp    f010759a <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010757d:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107583:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107586:	89 d0                	mov    %edx,%eax
f0107588:	c1 e0 02             	shl    $0x2,%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	c1 e0 02             	shl    $0x2,%eax
f0107590:	01 d0                	add    %edx,%eax
f0107592:	c1 e0 02             	shl    $0x2,%eax
f0107595:	01 c8                	add    %ecx,%eax
f0107597:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010759a:	c9                   	leave  
f010759b:	c3                   	ret    

f010759c <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	56                   	push   %esi
f01075a0:	53                   	push   %ebx
f01075a1:	83 ec 50             	sub    $0x50,%esp
f01075a4:	8b 45 14             	mov    0x14(%ebp),%eax
f01075a7:	88 45 b4             	mov    %al,-0x4c(%ebp)
	//7-Store the object's isWritable flag for later use by getSharedObject()
	//8-Add all allocated frames to "frames_storage" of this shared object to keep track of them for later use (use: add_frame_to_storage())
	//9-If succeed: return the ID of the shared object (i.e. its index in the "shares" array)
	//10-Else, return suitable error

	struct Env* myenv = curenv; //The calling environment
f01075aa:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01075af:	89 45 e8             	mov    %eax,-0x18(%ebp)

	int shared_Result = get_share_object_ID(ownerID , shareName);
f01075b2:	83 ec 08             	sub    $0x8,%esp
f01075b5:	ff 75 0c             	pushl  0xc(%ebp)
f01075b8:	ff 75 08             	pushl  0x8(%ebp)
f01075bb:	e8 e6 fc ff ff       	call   f01072a6 <get_share_object_ID>
f01075c0:	83 c4 10             	add    $0x10,%esp
f01075c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (shared_Result != E_SHARED_MEM_NOT_EXISTS)
f01075c6:	83 7d e4 f0          	cmpl   $0xfffffff0,-0x1c(%ebp)
f01075ca:	74 0a                	je     f01075d6 <createSharedObject+0x3a>
		return E_SHARED_MEM_EXISTS;
f01075cc:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
f01075d1:	e9 d7 01 00 00       	jmp    f01077ad <createSharedObject+0x211>

	struct Share * allocatedObject = NULL;
f01075d6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	int sharedObj_index = allocate_share_object(&allocatedObject);
f01075dd:	83 ec 0c             	sub    $0xc,%esp
f01075e0:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01075e3:	50                   	push   %eax
f01075e4:	e8 c5 fb ff ff       	call   f01071ae <allocate_share_object>
f01075e9:	83 c4 10             	add    $0x10,%esp
f01075ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(sharedObj_index == E_NO_SHARE)
f01075ef:	83 7d e0 f2          	cmpl   $0xfffffff2,-0x20(%ebp)
f01075f3:	75 0a                	jne    f01075ff <createSharedObject+0x63>
		return E_NO_SHARE;
f01075f5:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f01075fa:	e9 ae 01 00 00       	jmp    f01077ad <createSharedObject+0x211>

	uint32 va = (uint32) virtual_address;
f01075ff:	8b 45 18             	mov    0x18(%ebp),%eax
f0107602:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
f0107605:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010760c:	8b 55 10             	mov    0x10(%ebp),%edx
f010760f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107612:	01 d0                	add    %edx,%eax
f0107614:	48                   	dec    %eax
f0107615:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0107618:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010761b:	ba 00 00 00 00       	mov    $0x0,%edx
f0107620:	f7 75 dc             	divl   -0x24(%ebp)
f0107623:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107626:	29 d0                	sub    %edx,%eax
f0107628:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	struct FrameInfo *sb_chunck;
	int j = 0;
f010762b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f0107632:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107639:	e9 93 00 00 00       	jmp    f01076d1 <createSharedObject+0x135>
	{
		sb_chunck= NULL;
f010763e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		int result= allocate_frame(&sb_chunck);
f0107645:	83 ec 0c             	sub    $0xc,%esp
f0107648:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010764b:	50                   	push   %eax
f010764c:	e8 a1 f2 ff ff       	call   f01068f2 <allocate_frame>
f0107651:	83 c4 10             	add    $0x10,%esp
f0107654:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(result != E_NO_MEM)
f0107657:	83 7d d0 fc          	cmpl   $0xfffffffc,-0x30(%ebp)
f010765b:	74 63                	je     f01076c0 <createSharedObject+0x124>
		{
			sb_chunck->va = va;
f010765d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0107660:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107663:	89 50 0c             	mov    %edx,0xc(%eax)
			int m_result=map_frame(curenv->env_page_directory ,sb_chunck ,va, PERM_WRITEABLE | PERM_USER);
f0107666:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0107669:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010766e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107671:	6a 06                	push   $0x6
f0107673:	ff 75 f4             	pushl  -0xc(%ebp)
f0107676:	52                   	push   %edx
f0107677:	50                   	push   %eax
f0107678:	e8 c4 f6 ff ff       	call   f0106d41 <map_frame>
f010767d:	83 c4 10             	add    $0x10,%esp
f0107680:	89 45 cc             	mov    %eax,-0x34(%ebp)
			add_frame_to_storage(shares[sharedObj_index].framesStorage , sb_chunck , j);
f0107683:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0107686:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
f0107689:	8b 35 ec 1c 88 f0    	mov    0xf0881cec,%esi
f010768f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107692:	89 d0                	mov    %edx,%eax
f0107694:	c1 e0 02             	shl    $0x2,%eax
f0107697:	01 d0                	add    %edx,%eax
f0107699:	c1 e0 02             	shl    $0x2,%eax
f010769c:	01 d0                	add    %edx,%eax
f010769e:	c1 e0 02             	shl    $0x2,%eax
f01076a1:	01 f0                	add    %esi,%eax
f01076a3:	8b 40 50             	mov    0x50(%eax),%eax
f01076a6:	83 ec 04             	sub    $0x4,%esp
f01076a9:	53                   	push   %ebx
f01076aa:	51                   	push   %ecx
f01076ab:	50                   	push   %eax
f01076ac:	e8 8c fd ff ff       	call   f010743d <add_frame_to_storage>
f01076b1:	83 c4 10             	add    $0x10,%esp
			j++;
f01076b4:	ff 45 f0             	incl   -0x10(%ebp)
			va += PAGE_SIZE;
f01076b7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01076be:	eb 0a                	jmp    f01076ca <createSharedObject+0x12e>
		}
		else
			return -1;
f01076c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01076c5:	e9 e3 00 00 00       	jmp    f01077ad <createSharedObject+0x211>
	uint32 va = (uint32) virtual_address;
	uint32 Rounded_Size = ROUNDUP(size,PAGE_SIZE);
	struct FrameInfo *sb_chunck;
	int j = 0;

	for(uint32 i = 0; i < Rounded_Size; i += PAGE_SIZE)
f01076ca:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01076d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076d4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01076d7:	0f 82 61 ff ff ff    	jb     f010763e <createSharedObject+0xa2>
		}
		else
			return -1;
	}

	shares[sharedObj_index].ownerID = ownerID;
f01076dd:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f01076e3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01076e6:	89 d0                	mov    %edx,%eax
f01076e8:	c1 e0 02             	shl    $0x2,%eax
f01076eb:	01 d0                	add    %edx,%eax
f01076ed:	c1 e0 02             	shl    $0x2,%eax
f01076f0:	01 d0                	add    %edx,%eax
f01076f2:	c1 e0 02             	shl    $0x2,%eax
f01076f5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01076f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01076fb:	89 02                	mov    %eax,(%edx)
	strcpy(shares[sharedObj_index].name,shareName);
f01076fd:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107703:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107706:	89 d0                	mov    %edx,%eax
f0107708:	c1 e0 02             	shl    $0x2,%eax
f010770b:	01 d0                	add    %edx,%eax
f010770d:	c1 e0 02             	shl    $0x2,%eax
f0107710:	01 d0                	add    %edx,%eax
f0107712:	c1 e0 02             	shl    $0x2,%eax
f0107715:	01 c8                	add    %ecx,%eax
f0107717:	83 c0 04             	add    $0x4,%eax
f010771a:	83 ec 08             	sub    $0x8,%esp
f010771d:	ff 75 0c             	pushl  0xc(%ebp)
f0107720:	50                   	push   %eax
f0107721:	e8 b6 9d 02 00       	call   f01314dc <strcpy>
f0107726:	83 c4 10             	add    $0x10,%esp
	shares[sharedObj_index].references = 1;
f0107729:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f010772f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107732:	89 d0                	mov    %edx,%eax
f0107734:	c1 e0 02             	shl    $0x2,%eax
f0107737:	01 d0                	add    %edx,%eax
f0107739:	c1 e0 02             	shl    $0x2,%eax
f010773c:	01 d0                	add    %edx,%eax
f010773e:	c1 e0 02             	shl    $0x2,%eax
f0107741:	01 c8                	add    %ecx,%eax
f0107743:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
	shares[sharedObj_index].size = size;
f010774a:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107750:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107753:	89 d0                	mov    %edx,%eax
f0107755:	c1 e0 02             	shl    $0x2,%eax
f0107758:	01 d0                	add    %edx,%eax
f010775a:	c1 e0 02             	shl    $0x2,%eax
f010775d:	01 d0                	add    %edx,%eax
f010775f:	c1 e0 02             	shl    $0x2,%eax
f0107762:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107765:	8b 45 10             	mov    0x10(%ebp),%eax
f0107768:	89 42 44             	mov    %eax,0x44(%edx)
	shares[sharedObj_index].isWritable = isWritable;
f010776b:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107771:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107774:	89 d0                	mov    %edx,%eax
f0107776:	c1 e0 02             	shl    $0x2,%eax
f0107779:	01 d0                	add    %edx,%eax
f010777b:	c1 e0 02             	shl    $0x2,%eax
f010777e:	01 d0                	add    %edx,%eax
f0107780:	c1 e0 02             	shl    $0x2,%eax
f0107783:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107786:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0107789:	88 42 4c             	mov    %al,0x4c(%edx)
	shares[sharedObj_index].empty = 0;
f010778c:	8b 0d ec 1c 88 f0    	mov    0xf0881cec,%ecx
f0107792:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107795:	89 d0                	mov    %edx,%eax
f0107797:	c1 e0 02             	shl    $0x2,%eax
f010779a:	01 d0                	add    %edx,%eax
f010779c:	c1 e0 02             	shl    $0x2,%eax
f010779f:	01 d0                	add    %edx,%eax
f01077a1:	c1 e0 02             	shl    $0x2,%eax
f01077a4:	01 c8                	add    %ecx,%eax
f01077a6:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

	return sharedObj_index;
f01077aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
	//and return the ShareObjectID
	//RETURN:
	//	a) ShareObjectID (its index in "shares" array) if success
	//	b) E_SHARED_MEM_EXISTS if the shared object already exists
	//	c) E_NO_SHARE if the number of shared objects reaches max "MAX_SHARES"
}
f01077ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01077b0:	5b                   	pop    %ebx
f01077b1:	5e                   	pop    %esi
f01077b2:	5d                   	pop    %ebp
f01077b3:	c3                   	ret    

f01077b4 <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01077b4:	55                   	push   %ebp
f01077b5:	89 e5                	mov    %esp,%ebp
f01077b7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f01077ba:	83 ec 04             	sub    $0x4,%esp
f01077bd:	68 d4 63 13 f0       	push   $0xf01363d4
f01077c2:	68 55 01 00 00       	push   $0x155
f01077c7:	68 94 63 13 f0       	push   $0xf0136394
f01077cc:	e8 34 8a ff ff       	call   f0100205 <_panic>

f01077d1 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01077d1:	55                   	push   %ebp
f01077d2:	89 e5                	mov    %esp,%ebp
f01077d4:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01077d7:	83 ec 04             	sub    $0x4,%esp
f01077da:	68 04 64 13 f0       	push   $0xf0136404
f01077df:	68 77 01 00 00       	push   $0x177
f01077e4:	68 94 63 13 f0       	push   $0xf0136394
f01077e9:	e8 17 8a ff ff       	call   f0100205 <_panic>

f01077ee <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01077ee:	55                   	push   %ebp
f01077ef:	89 e5                	mov    %esp,%ebp
f01077f1:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f01077f6:	83 f8 01             	cmp    $0x1,%eax
f01077f9:	75 04                	jne    f01077ff <isKHeapPlacementStrategyFIRSTFIT+0x11>
f01077fb:	b0 01                	mov    $0x1,%al
f01077fd:	eb 02                	jmp    f0107801 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f01077ff:	b0 00                	mov    $0x0,%al
f0107801:	5d                   	pop    %ebp
f0107802:	c3                   	ret    

f0107803 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0107803:	55                   	push   %ebp
f0107804:	89 e5                	mov    %esp,%ebp
f0107806:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f010780b:	83 f8 02             	cmp    $0x2,%eax
f010780e:	75 04                	jne    f0107814 <isKHeapPlacementStrategyBESTFIT+0x11>
f0107810:	b0 01                	mov    $0x1,%al
f0107812:	eb 02                	jmp    f0107816 <isKHeapPlacementStrategyBESTFIT+0x13>
f0107814:	b0 00                	mov    $0x0,%al
f0107816:	5d                   	pop    %ebp
f0107817:	c3                   	ret    

f0107818 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0107818:	55                   	push   %ebp
f0107819:	89 e5                	mov    %esp,%ebp
f010781b:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f0107820:	83 f8 03             	cmp    $0x3,%eax
f0107823:	75 04                	jne    f0107829 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0107825:	b0 01                	mov    $0x1,%al
f0107827:	eb 02                	jmp    f010782b <isKHeapPlacementStrategyNEXTFIT+0x13>
f0107829:	b0 00                	mov    $0x0,%al
f010782b:	5d                   	pop    %ebp
f010782c:	c3                   	ret    

f010782d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010782d:	55                   	push   %ebp
f010782e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107830:	8b 45 08             	mov    0x8(%ebp),%eax
f0107833:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f0107839:	29 d0                	sub    %edx,%eax
f010783b:	c1 f8 03             	sar    $0x3,%eax
f010783e:	89 c2                	mov    %eax,%edx
f0107840:	89 d0                	mov    %edx,%eax
f0107842:	c1 e0 02             	shl    $0x2,%eax
f0107845:	01 d0                	add    %edx,%eax
f0107847:	c1 e0 02             	shl    $0x2,%eax
f010784a:	01 d0                	add    %edx,%eax
f010784c:	c1 e0 02             	shl    $0x2,%eax
f010784f:	01 d0                	add    %edx,%eax
f0107851:	89 c1                	mov    %eax,%ecx
f0107853:	c1 e1 08             	shl    $0x8,%ecx
f0107856:	01 c8                	add    %ecx,%eax
f0107858:	89 c1                	mov    %eax,%ecx
f010785a:	c1 e1 10             	shl    $0x10,%ecx
f010785d:	01 c8                	add    %ecx,%eax
f010785f:	01 c0                	add    %eax,%eax
f0107861:	01 d0                	add    %edx,%eax
}
f0107863:	5d                   	pop    %ebp
f0107864:	c3                   	ret    

f0107865 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107865:	55                   	push   %ebp
f0107866:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107868:	ff 75 08             	pushl  0x8(%ebp)
f010786b:	e8 bd ff ff ff       	call   f010782d <to_frame_number>
f0107870:	83 c4 04             	add    $0x4,%esp
f0107873:	c1 e0 0c             	shl    $0xc,%eax
}
f0107876:	c9                   	leave  
f0107877:	c3                   	ret    

f0107878 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107878:	55                   	push   %ebp
f0107879:	89 e5                	mov    %esp,%ebp
f010787b:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010787e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107881:	c1 e8 0c             	shr    $0xc,%eax
f0107884:	89 c2                	mov    %eax,%edx
f0107886:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f010788b:	39 c2                	cmp    %eax,%edx
f010788d:	72 14                	jb     f01078a3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010788f:	83 ec 04             	sub    $0x4,%esp
f0107892:	68 34 64 13 f0       	push   $0xf0136434
f0107897:	6a 55                	push   $0x55
f0107899:	68 59 64 13 f0       	push   $0xf0136459
f010789e:	e8 62 89 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01078a3:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f01078a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01078ac:	c1 e8 0c             	shr    $0xc,%eax
f01078af:	89 c1                	mov    %eax,%ecx
f01078b1:	89 c8                	mov    %ecx,%eax
f01078b3:	01 c0                	add    %eax,%eax
f01078b5:	01 c8                	add    %ecx,%eax
f01078b7:	c1 e0 03             	shl    $0x3,%eax
f01078ba:	01 d0                	add    %edx,%eax
}
f01078bc:	c9                   	leave  
f01078bd:	c3                   	ret    

f01078be <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01078be:	55                   	push   %ebp
f01078bf:	89 e5                	mov    %esp,%ebp
f01078c1:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f01078c4:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f01078cb:	00 00 00 
f01078ce:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f01078d5:	00 00 00 
f01078d8:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f01078df:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f01078e2:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f01078e9:	00 00 00 
f01078ec:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f01078f3:	00 00 00 
f01078f6:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f01078fd:	00 00 00 
	uint32 arr_size = 0;
f0107900:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f0107907:	c7 05 04 1d 88 f0 ff 	movl   $0x9fff,0xf0881d04
f010790e:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f0107911:	c7 05 d8 1c 88 f0 00 	movl   $0xf6000000,0xf0881cd8
f0107918:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f010791b:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107922:	a1 04 1d 88 f0       	mov    0xf0881d04,%eax
f0107927:	c1 e0 04             	shl    $0x4,%eax
f010792a:	89 c2                	mov    %eax,%edx
f010792c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010792f:	01 d0                	add    %edx,%eax
f0107931:	48                   	dec    %eax
f0107932:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107935:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107938:	ba 00 00 00 00       	mov    $0x0,%edx
f010793d:	f7 75 f0             	divl   -0x10(%ebp)
f0107940:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107943:	29 d0                	sub    %edx,%eax
f0107945:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f0107948:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010794d:	6a 03                	push   $0x3
f010794f:	ff 75 f4             	pushl  -0xc(%ebp)
f0107952:	68 00 00 00 f6       	push   $0xf6000000
f0107957:	50                   	push   %eax
f0107958:	e8 bd 13 00 00       	call   f0108d1a <allocate_chunk>
f010795d:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f0107960:	a1 04 1d 88 f0       	mov    0xf0881d04,%eax
f0107965:	83 ec 0c             	sub    $0xc,%esp
f0107968:	50                   	push   %eax
f0107969:	e8 89 a6 02 00       	call   f0131ff7 <initialize_MemBlocksList>
f010796e:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f0107971:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0107976:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f0107979:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010797c:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107982:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107985:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f0107988:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f010798d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107990:	89 c2                	mov    %eax,%edx
f0107992:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107995:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f0107998:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010799c:	75 14                	jne    f01079b2 <initialize_dyn_block_system+0xf4>
f010799e:	83 ec 04             	sub    $0x4,%esp
f01079a1:	68 73 64 13 f0       	push   $0xf0136473
f01079a6:	6a 30                	push   $0x30
f01079a8:	68 91 64 13 f0       	push   $0xf0136491
f01079ad:	e8 53 88 ff ff       	call   f0100205 <_panic>
f01079b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079b5:	8b 00                	mov    (%eax),%eax
f01079b7:	85 c0                	test   %eax,%eax
f01079b9:	74 10                	je     f01079cb <initialize_dyn_block_system+0x10d>
f01079bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079be:	8b 00                	mov    (%eax),%eax
f01079c0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01079c3:	8b 52 04             	mov    0x4(%edx),%edx
f01079c6:	89 50 04             	mov    %edx,0x4(%eax)
f01079c9:	eb 0b                	jmp    f01079d6 <initialize_dyn_block_system+0x118>
f01079cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079ce:	8b 40 04             	mov    0x4(%eax),%eax
f01079d1:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01079d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079d9:	8b 40 04             	mov    0x4(%eax),%eax
f01079dc:	85 c0                	test   %eax,%eax
f01079de:	74 0f                	je     f01079ef <initialize_dyn_block_system+0x131>
f01079e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079e3:	8b 40 04             	mov    0x4(%eax),%eax
f01079e6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01079e9:	8b 12                	mov    (%edx),%edx
f01079eb:	89 10                	mov    %edx,(%eax)
f01079ed:	eb 0a                	jmp    f01079f9 <initialize_dyn_block_system+0x13b>
f01079ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079f2:	8b 00                	mov    (%eax),%eax
f01079f4:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f01079f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079fc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107a02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a05:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107a0c:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0107a11:	48                   	dec    %eax
f0107a12:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f0107a17:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107a1b:	75 14                	jne    f0107a31 <initialize_dyn_block_system+0x173>
f0107a1d:	83 ec 04             	sub    $0x4,%esp
f0107a20:	68 a4 64 13 f0       	push   $0xf01364a4
f0107a25:	6a 32                	push   $0x32
f0107a27:	68 91 64 13 f0       	push   $0xf0136491
f0107a2c:	e8 d4 87 ff ff       	call   f0100205 <_panic>
f0107a31:	8b 15 64 1d 88 f0    	mov    0xf0881d64,%edx
f0107a37:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a3a:	89 10                	mov    %edx,(%eax)
f0107a3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a3f:	8b 00                	mov    (%eax),%eax
f0107a41:	85 c0                	test   %eax,%eax
f0107a43:	74 0d                	je     f0107a52 <initialize_dyn_block_system+0x194>
f0107a45:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0107a4a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107a4d:	89 50 04             	mov    %edx,0x4(%eax)
f0107a50:	eb 08                	jmp    f0107a5a <initialize_dyn_block_system+0x19c>
f0107a52:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a55:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0107a5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a5d:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0107a62:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107a65:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107a6c:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0107a71:	40                   	inc    %eax
f0107a72:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70

}
f0107a77:	90                   	nop
f0107a78:	c9                   	leave  
f0107a79:	c3                   	ret    

f0107a7a <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107a7a:	55                   	push   %ebp
f0107a7b:	89 e5                	mov    %esp,%ebp
f0107a7d:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f0107a80:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107a87:	8b 55 08             	mov    0x8(%ebp),%edx
f0107a8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a8d:	01 d0                	add    %edx,%eax
f0107a8f:	48                   	dec    %eax
f0107a90:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a93:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a96:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a9b:	f7 75 f0             	divl   -0x10(%ebp)
f0107a9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107aa1:	29 d0                	sub    %edx,%eax
f0107aa3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f0107aa6:	e8 43 fd ff ff       	call   f01077ee <isKHeapPlacementStrategyFIRSTFIT>
f0107aab:	84 c0                	test   %al,%al
f0107aad:	74 13                	je     f0107ac2 <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f0107aaf:	83 ec 0c             	sub    $0xc,%esp
f0107ab2:	ff 75 e8             	pushl  -0x18(%ebp)
f0107ab5:	e8 ff a8 02 00       	call   f01323b9 <alloc_block_FF>
f0107aba:	83 c4 10             	add    $0x10,%esp
f0107abd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107ac0:	eb 36                	jmp    f0107af8 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyBESTFIT())
f0107ac2:	e8 3c fd ff ff       	call   f0107803 <isKHeapPlacementStrategyBESTFIT>
f0107ac7:	84 c0                	test   %al,%al
f0107ac9:	74 13                	je     f0107ade <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f0107acb:	83 ec 0c             	sub    $0xc,%esp
f0107ace:	ff 75 e8             	pushl  -0x18(%ebp)
f0107ad1:	e8 b0 aa 02 00       	call   f0132586 <alloc_block_BF>
f0107ad6:	83 c4 10             	add    $0x10,%esp
f0107ad9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107adc:	eb 1a                	jmp    f0107af8 <kmalloc+0x7e>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0107ade:	e8 35 fd ff ff       	call   f0107818 <isKHeapPlacementStrategyNEXTFIT>
f0107ae3:	84 c0                	test   %al,%al
f0107ae5:	74 11                	je     f0107af8 <kmalloc+0x7e>
		mem_block = alloc_block_NF(allocate_size);
f0107ae7:	83 ec 0c             	sub    $0xc,%esp
f0107aea:	ff 75 e8             	pushl  -0x18(%ebp)
f0107aed:	e8 a5 ac 02 00       	call   f0132797 <alloc_block_NF>
f0107af2:	83 c4 10             	add    $0x10,%esp
f0107af5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107af8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107afc:	74 40                	je     f0107b3e <kmalloc+0xc4>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b01:	8b 50 08             	mov    0x8(%eax),%edx
f0107b04:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0107b09:	6a 03                	push   $0x3
f0107b0b:	ff 75 e8             	pushl  -0x18(%ebp)
f0107b0e:	52                   	push   %edx
f0107b0f:	50                   	push   %eax
f0107b10:	e8 05 12 00 00       	call   f0108d1a <allocate_chunk>
f0107b15:	83 c4 10             	add    $0x10,%esp
f0107b18:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107b1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107b1f:	75 16                	jne    f0107b37 <kmalloc+0xbd>
		{
			insert_sorted_allocList(mem_block);
f0107b21:	83 ec 0c             	sub    $0xc,%esp
f0107b24:	ff 75 f4             	pushl  -0xc(%ebp)
f0107b27:	e8 00 a6 02 00       	call   f013212c <insert_sorted_allocList>
f0107b2c:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f0107b2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b32:	8b 40 08             	mov    0x8(%eax),%eax
f0107b35:	eb 0c                	jmp    f0107b43 <kmalloc+0xc9>
		}
		else
			return 	NULL;
f0107b37:	b8 00 00 00 00       	mov    $0x0,%eax
f0107b3c:	eb 05                	jmp    f0107b43 <kmalloc+0xc9>
	}
	return NULL;
f0107b3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107b43:	c9                   	leave  
f0107b44:	c3                   	ret    

f0107b45 <kfree>:
void kfree(void* virtual_address)
{
f0107b45:	55                   	push   %ebp
f0107b46:	89 e5                	mov    %esp,%ebp
f0107b48:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f0107b4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b4e:	83 ec 08             	sub    $0x8,%esp
f0107b51:	50                   	push   %eax
f0107b52:	68 c8 1c 88 f0       	push   $0xf0881cc8
f0107b57:	e8 78 a5 02 00       	call   f01320d4 <find_block>
f0107b5c:	83 c4 10             	add    $0x10,%esp
f0107b5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f0107b62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107b66:	0f 84 fd 00 00 00    	je     f0107c69 <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f0107b6c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107b70:	75 14                	jne    f0107b86 <kfree+0x41>
f0107b72:	83 ec 04             	sub    $0x4,%esp
f0107b75:	68 73 64 13 f0       	push   $0xf0136473
f0107b7a:	6a 5a                	push   $0x5a
f0107b7c:	68 91 64 13 f0       	push   $0xf0136491
f0107b81:	e8 7f 86 ff ff       	call   f0100205 <_panic>
f0107b86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b89:	8b 00                	mov    (%eax),%eax
f0107b8b:	85 c0                	test   %eax,%eax
f0107b8d:	74 10                	je     f0107b9f <kfree+0x5a>
f0107b8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b92:	8b 00                	mov    (%eax),%eax
f0107b94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b97:	8b 52 04             	mov    0x4(%edx),%edx
f0107b9a:	89 50 04             	mov    %edx,0x4(%eax)
f0107b9d:	eb 0b                	jmp    f0107baa <kfree+0x65>
f0107b9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ba2:	8b 40 04             	mov    0x4(%eax),%eax
f0107ba5:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f0107baa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bad:	8b 40 04             	mov    0x4(%eax),%eax
f0107bb0:	85 c0                	test   %eax,%eax
f0107bb2:	74 0f                	je     f0107bc3 <kfree+0x7e>
f0107bb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bb7:	8b 40 04             	mov    0x4(%eax),%eax
f0107bba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107bbd:	8b 12                	mov    (%edx),%edx
f0107bbf:	89 10                	mov    %edx,(%eax)
f0107bc1:	eb 0a                	jmp    f0107bcd <kfree+0x88>
f0107bc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bc6:	8b 00                	mov    (%eax),%eax
f0107bc8:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f0107bcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bd0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107bd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bd9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107be0:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0107be5:	48                   	dec    %eax
f0107be6:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f0107beb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bee:	8b 40 08             	mov    0x8(%eax),%eax
f0107bf1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107bf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bf7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107bfc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f0107bff:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c09:	8b 50 08             	mov    0x8(%eax),%edx
f0107c0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c0f:	8b 40 0c             	mov    0xc(%eax),%eax
f0107c12:	01 c2                	add    %eax,%edx
f0107c14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107c17:	01 d0                	add    %edx,%eax
f0107c19:	48                   	dec    %eax
f0107c1a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107c1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107c20:	ba 00 00 00 00       	mov    $0x0,%edx
f0107c25:	f7 75 e4             	divl   -0x1c(%ebp)
f0107c28:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107c2b:	29 d0                	sub    %edx,%eax
f0107c2d:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107c30:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107c33:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107c36:	eb 1b                	jmp    f0107c53 <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f0107c38:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0107c3d:	83 ec 08             	sub    $0x8,%esp
f0107c40:	ff 75 f4             	pushl  -0xc(%ebp)
f0107c43:	50                   	push   %eax
f0107c44:	e8 2d f2 ff ff       	call   f0106e76 <unmap_frame>
f0107c49:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f0107c4c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c56:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0107c59:	72 dd                	jb     f0107c38 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f0107c5b:	83 ec 0c             	sub    $0xc,%esp
f0107c5e:	ff 75 f0             	pushl  -0x10(%ebp)
f0107c61:	e8 fe b0 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f0107c66:	83 c4 10             	add    $0x10,%esp
	}
}
f0107c69:	90                   	nop
f0107c6a:	c9                   	leave  
f0107c6b:	c3                   	ret    

f0107c6c <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107c6c:	55                   	push   %ebp
f0107c6d:	89 e5                	mov    %esp,%ebp
f0107c6f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f0107c72:	83 ec 0c             	sub    $0xc,%esp
f0107c75:	ff 75 08             	pushl  0x8(%ebp)
f0107c78:	e8 fb fb ff ff       	call   f0107878 <to_frame_info>
f0107c7d:	83 c4 10             	add    $0x10,%esp
f0107c80:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(convert_to_va!=NULL)
f0107c83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107c87:	74 08                	je     f0107c91 <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c8c:	8b 40 0c             	mov    0xc(%eax),%eax
f0107c8f:	eb 05                	jmp    f0107c96 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107c91:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107c96:	c9                   	leave  
f0107c97:	c3                   	ret    

f0107c98 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107c98:	55                   	push   %ebp
f0107c99:	89 e5                	mov    %esp,%ebp
f0107c9b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107c9e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107ca5:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0107caa:	83 ec 04             	sub    $0x4,%esp
f0107cad:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107cb0:	52                   	push   %edx
f0107cb1:	ff 75 08             	pushl  0x8(%ebp)
f0107cb4:	50                   	push   %eax
f0107cb5:	e8 4c f1 ff ff       	call   f0106e06 <get_frame_info>
f0107cba:	83 c4 10             	add    $0x10,%esp
f0107cbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107cc0:	83 ec 0c             	sub    $0xc,%esp
f0107cc3:	ff 75 f4             	pushl  -0xc(%ebp)
f0107cc6:	e8 9a fb ff ff       	call   f0107865 <to_physical_address>
f0107ccb:	83 c4 10             	add    $0x10,%esp
f0107cce:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(frame_of_the_va != NULL)
f0107cd1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107cd5:	74 05                	je     f0107cdc <kheap_physical_address+0x44>
		return address_physical;
f0107cd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cda:	eb 05                	jmp    f0107ce1 <kheap_physical_address+0x49>
	return 0;
f0107cdc:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107ce1:	c9                   	leave  
f0107ce2:	c3                   	ret    

f0107ce3 <kfreeall>:


void kfreeall()
{
f0107ce3:	55                   	push   %ebp
f0107ce4:	89 e5                	mov    %esp,%ebp
f0107ce6:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107ce9:	83 ec 04             	sub    $0x4,%esp
f0107cec:	68 c7 64 13 f0       	push   $0xf01364c7
f0107cf1:	68 89 00 00 00       	push   $0x89
f0107cf6:	68 91 64 13 f0       	push   $0xf0136491
f0107cfb:	e8 05 85 ff ff       	call   f0100205 <_panic>

f0107d00 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107d00:	55                   	push   %ebp
f0107d01:	89 e5                	mov    %esp,%ebp
f0107d03:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107d06:	83 ec 04             	sub    $0x4,%esp
f0107d09:	68 c7 64 13 f0       	push   $0xf01364c7
f0107d0e:	68 8f 00 00 00       	push   $0x8f
f0107d13:	68 91 64 13 f0       	push   $0xf0136491
f0107d18:	e8 e8 84 ff ff       	call   f0100205 <_panic>

f0107d1d <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107d1d:	55                   	push   %ebp
f0107d1e:	89 e5                	mov    %esp,%ebp
f0107d20:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107d23:	83 ec 04             	sub    $0x4,%esp
f0107d26:	68 c7 64 13 f0       	push   $0xf01364c7
f0107d2b:	68 94 00 00 00       	push   $0x94
f0107d30:	68 91 64 13 f0       	push   $0xf0136491
f0107d35:	e8 cb 84 ff ff       	call   f0100205 <_panic>

f0107d3a <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107d3a:	55                   	push   %ebp
f0107d3b:	89 e5                	mov    %esp,%ebp
f0107d3d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107d40:	83 ec 04             	sub    $0x4,%esp
f0107d43:	68 d8 64 13 f0       	push   $0xf01364d8
f0107d48:	68 ab 00 00 00       	push   $0xab
f0107d4d:	68 91 64 13 f0       	push   $0xf0136491
f0107d52:	e8 ae 84 ff ff       	call   f0100205 <_panic>

f0107d57 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107d57:	55                   	push   %ebp
f0107d58:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107d5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d5d:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f0107d63:	29 d0                	sub    %edx,%eax
f0107d65:	c1 f8 03             	sar    $0x3,%eax
f0107d68:	89 c2                	mov    %eax,%edx
f0107d6a:	89 d0                	mov    %edx,%eax
f0107d6c:	c1 e0 02             	shl    $0x2,%eax
f0107d6f:	01 d0                	add    %edx,%eax
f0107d71:	c1 e0 02             	shl    $0x2,%eax
f0107d74:	01 d0                	add    %edx,%eax
f0107d76:	c1 e0 02             	shl    $0x2,%eax
f0107d79:	01 d0                	add    %edx,%eax
f0107d7b:	89 c1                	mov    %eax,%ecx
f0107d7d:	c1 e1 08             	shl    $0x8,%ecx
f0107d80:	01 c8                	add    %ecx,%eax
f0107d82:	89 c1                	mov    %eax,%ecx
f0107d84:	c1 e1 10             	shl    $0x10,%ecx
f0107d87:	01 c8                	add    %ecx,%eax
f0107d89:	01 c0                	add    %eax,%eax
f0107d8b:	01 d0                	add    %edx,%eax
}
f0107d8d:	5d                   	pop    %ebp
f0107d8e:	c3                   	ret    

f0107d8f <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107d8f:	55                   	push   %ebp
f0107d90:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107d92:	ff 75 08             	pushl  0x8(%ebp)
f0107d95:	e8 bd ff ff ff       	call   f0107d57 <to_frame_number>
f0107d9a:	83 c4 04             	add    $0x4,%esp
f0107d9d:	c1 e0 0c             	shl    $0xc,%eax
}
f0107da0:	c9                   	leave  
f0107da1:	c3                   	ret    

f0107da2 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107da2:	55                   	push   %ebp
f0107da3:	89 e5                	mov    %esp,%ebp
f0107da5:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107da8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107daf:	83 ec 04             	sub    $0x4,%esp
f0107db2:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107db5:	50                   	push   %eax
f0107db6:	ff 75 0c             	pushl  0xc(%ebp)
f0107db9:	ff 75 08             	pushl  0x8(%ebp)
f0107dbc:	e8 f0 ec ff ff       	call   f0106ab1 <get_page_table>
f0107dc1:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107dc7:	85 c0                	test   %eax,%eax
f0107dc9:	74 75                	je     f0107e40 <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107dcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107dce:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107dd1:	c1 ea 0c             	shr    $0xc,%edx
f0107dd4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107dda:	c1 e2 02             	shl    $0x2,%edx
f0107ddd:	01 d0                	add    %edx,%eax
f0107ddf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107de2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107de5:	c1 e9 0c             	shr    $0xc,%ecx
f0107de8:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107dee:	c1 e1 02             	shl    $0x2,%ecx
f0107df1:	01 ca                	add    %ecx,%edx
f0107df3:	8b 12                	mov    (%edx),%edx
f0107df5:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107df8:	f7 d1                	not    %ecx
f0107dfa:	21 ca                	and    %ecx,%edx
f0107dfc:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e01:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e04:	c1 ea 0c             	shr    $0xc,%edx
f0107e07:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107e0d:	c1 e2 02             	shl    $0x2,%edx
f0107e10:	01 c2                	add    %eax,%edx
f0107e12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e15:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107e18:	c1 e9 0c             	shr    $0xc,%ecx
f0107e1b:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107e21:	c1 e1 02             	shl    $0x2,%ecx
f0107e24:	01 c8                	add    %ecx,%eax
f0107e26:	8b 00                	mov    (%eax),%eax
f0107e28:	0b 45 10             	or     0x10(%ebp),%eax
f0107e2b:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107e2d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e30:	83 ec 08             	sub    $0x8,%esp
f0107e33:	50                   	push   %eax
f0107e34:	6a 00                	push   $0x0
f0107e36:	e8 d3 e6 ff ff       	call   f010650e <tlb_invalidate>
f0107e3b:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107e3e:	eb 14                	jmp    f0107e54 <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107e40:	83 ec 04             	sub    $0x4,%esp
f0107e43:	68 ff 64 13 f0       	push   $0xf01364ff
f0107e48:	6a 19                	push   $0x19
f0107e4a:	68 1c 65 13 f0       	push   $0xf013651c
f0107e4f:	e8 b1 83 ff ff       	call   f0100205 <_panic>
	}
}
f0107e54:	c9                   	leave  
f0107e55:	c3                   	ret    

f0107e56 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107e56:	55                   	push   %ebp
f0107e57:	89 e5                	mov    %esp,%ebp
f0107e59:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107e5c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107e63:	83 ec 04             	sub    $0x4,%esp
f0107e66:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e69:	50                   	push   %eax
f0107e6a:	ff 75 0c             	pushl  0xc(%ebp)
f0107e6d:	ff 75 08             	pushl  0x8(%ebp)
f0107e70:	e8 3c ec ff ff       	call   f0106ab1 <get_page_table>
f0107e75:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107e78:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e7b:	85 c0                	test   %eax,%eax
f0107e7d:	74 2b                	je     f0107eaa <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107e7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e82:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e85:	c1 ea 0c             	shr    $0xc,%edx
f0107e88:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107e8e:	c1 e2 02             	shl    $0x2,%edx
f0107e91:	01 d0                	add    %edx,%eax
f0107e93:	8b 00                	mov    (%eax),%eax
f0107e95:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107e98:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea2:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107ea5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107ea8:	eb 05                	jmp    f0107eaf <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107eaa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107eaf:	c9                   	leave  
f0107eb0:	c3                   	ret    

f0107eb1 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107eb1:	55                   	push   %ebp
f0107eb2:	89 e5                	mov    %esp,%ebp
f0107eb4:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107eb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107ebe:	83 ec 04             	sub    $0x4,%esp
f0107ec1:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107ec4:	50                   	push   %eax
f0107ec5:	ff 75 0c             	pushl  0xc(%ebp)
f0107ec8:	ff 75 08             	pushl  0x8(%ebp)
f0107ecb:	e8 e1 eb ff ff       	call   f0106ab1 <get_page_table>
f0107ed0:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107ed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ed6:	85 c0                	test   %eax,%eax
f0107ed8:	74 2d                	je     f0107f07 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107eda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107edd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ee0:	c1 ea 0c             	shr    $0xc,%edx
f0107ee3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ee9:	c1 e2 02             	shl    $0x2,%edx
f0107eec:	01 d0                	add    %edx,%eax
f0107eee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107ef4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107ef7:	83 ec 08             	sub    $0x8,%esp
f0107efa:	50                   	push   %eax
f0107efb:	6a 00                	push   $0x0
f0107efd:	e8 0c e6 ff ff       	call   f010650e <tlb_invalidate>
f0107f02:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107f05:	eb 14                	jmp    f0107f1b <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107f07:	83 ec 04             	sub    $0x4,%esp
f0107f0a:	68 ff 64 13 f0       	push   $0xf01364ff
f0107f0f:	6a 42                	push   $0x42
f0107f11:	68 1c 65 13 f0       	push   $0xf013651c
f0107f16:	e8 ea 82 ff ff       	call   f0100205 <_panic>
	}
}
f0107f1b:	c9                   	leave  
f0107f1c:	c3                   	ret    

f0107f1d <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107f1d:	55                   	push   %ebp
f0107f1e:	89 e5                	mov    %esp,%ebp
f0107f20:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107f23:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107f2a:	83 ec 04             	sub    $0x4,%esp
f0107f2d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107f30:	50                   	push   %eax
f0107f31:	ff 75 0c             	pushl  0xc(%ebp)
f0107f34:	ff 75 08             	pushl  0x8(%ebp)
f0107f37:	e8 75 eb ff ff       	call   f0106ab1 <get_page_table>
f0107f3c:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107f3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107f42:	85 c0                	test   %eax,%eax
f0107f44:	74 28                	je     f0107f6e <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107f46:	83 ec 04             	sub    $0x4,%esp
f0107f49:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107f4c:	50                   	push   %eax
f0107f4d:	ff 75 0c             	pushl  0xc(%ebp)
f0107f50:	ff 75 08             	pushl  0x8(%ebp)
f0107f53:	e8 ae ee ff ff       	call   f0106e06 <get_frame_info>
f0107f58:	83 c4 10             	add    $0x10,%esp
f0107f5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0107f5e:	83 ec 0c             	sub    $0xc,%esp
f0107f61:	ff 75 f4             	pushl  -0xc(%ebp)
f0107f64:	e8 26 fe ff ff       	call   f0107d8f <to_physical_address>
f0107f69:	83 c4 10             	add    $0x10,%esp
f0107f6c:	eb 05                	jmp    f0107f73 <virtual_to_physical+0x56>
	}
	return -1;
f0107f6e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107f73:	c9                   	leave  
f0107f74:	c3                   	ret    

f0107f75 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107f75:	55                   	push   %ebp
f0107f76:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107f78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f7b:	c1 e8 16             	shr    $0x16,%eax
f0107f7e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107f85:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f88:	01 d0                	add    %edx,%eax
f0107f8a:	8b 00                	mov    (%eax),%eax
f0107f8c:	83 e0 20             	and    $0x20,%eax
f0107f8f:	85 c0                	test   %eax,%eax
f0107f91:	0f 95 c0             	setne  %al
f0107f94:	0f b6 c0             	movzbl %al,%eax
}
f0107f97:	5d                   	pop    %ebp
f0107f98:	c3                   	ret    

f0107f99 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107f99:	55                   	push   %ebp
f0107f9a:	89 e5                	mov    %esp,%ebp
f0107f9c:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107f9f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107fa2:	c1 e8 16             	shr    $0x16,%eax
f0107fa5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107fac:	8b 45 08             	mov    0x8(%ebp),%eax
f0107faf:	01 d0                	add    %edx,%eax
f0107fb1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fb4:	c1 ea 16             	shr    $0x16,%edx
f0107fb7:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107fbe:	8b 55 08             	mov    0x8(%ebp),%edx
f0107fc1:	01 ca                	add    %ecx,%edx
f0107fc3:	8b 12                	mov    (%edx),%edx
f0107fc5:	83 e2 df             	and    $0xffffffdf,%edx
f0107fc8:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107fca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107fcd:	83 ec 08             	sub    $0x8,%esp
f0107fd0:	50                   	push   %eax
f0107fd1:	6a 00                	push   $0x0
f0107fd3:	e8 36 e5 ff ff       	call   f010650e <tlb_invalidate>
f0107fd8:	83 c4 10             	add    $0x10,%esp
}
f0107fdb:	90                   	nop
f0107fdc:	c9                   	leave  
f0107fdd:	c3                   	ret    

f0107fde <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107fde:	55                   	push   %ebp
f0107fdf:	89 e5                	mov    %esp,%ebp
f0107fe1:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107fe7:	c1 e8 16             	shr    $0x16,%eax
f0107fea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107ff1:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ff4:	01 d0                	add    %edx,%eax
f0107ff6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107ffc:	0f 20 d8             	mov    %cr3,%eax
f0107fff:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108002:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108005:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108008:	90                   	nop
f0108009:	c9                   	leave  
f010800a:	c3                   	ret    

f010800b <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f010800b:	55                   	push   %ebp
f010800c:	89 e5                	mov    %esp,%ebp
f010800e:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108011:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108018:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f010801f:	eb 21                	jmp    f0108042 <env_page_ws_get_size+0x37>
f0108021:	8b 45 08             	mov    0x8(%ebp),%eax
f0108024:	8b 48 78             	mov    0x78(%eax),%ecx
f0108027:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010802a:	89 d0                	mov    %edx,%eax
f010802c:	01 c0                	add    %eax,%eax
f010802e:	01 d0                	add    %edx,%eax
f0108030:	c1 e0 03             	shl    $0x3,%eax
f0108033:	01 c8                	add    %ecx,%eax
f0108035:	8a 40 04             	mov    0x4(%eax),%al
f0108038:	84 c0                	test   %al,%al
f010803a:	75 03                	jne    f010803f <env_page_ws_get_size+0x34>
f010803c:	ff 45 f8             	incl   -0x8(%ebp)
f010803f:	ff 45 fc             	incl   -0x4(%ebp)
f0108042:	8b 45 08             	mov    0x8(%ebp),%eax
f0108045:	8b 50 74             	mov    0x74(%eax),%edx
f0108048:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010804b:	39 c2                	cmp    %eax,%edx
f010804d:	77 d2                	ja     f0108021 <env_page_ws_get_size+0x16>
	return counter;
f010804f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108052:	c9                   	leave  
f0108053:	c3                   	ret    

f0108054 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108054:	55                   	push   %ebp
f0108055:	89 e5                	mov    %esp,%ebp
f0108057:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010805a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108061:	eb 4c                	jmp    f01080af <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108063:	8b 45 08             	mov    0x8(%ebp),%eax
f0108066:	8b 48 78             	mov    0x78(%eax),%ecx
f0108069:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010806c:	89 d0                	mov    %edx,%eax
f010806e:	01 c0                	add    %eax,%eax
f0108070:	01 d0                	add    %edx,%eax
f0108072:	c1 e0 03             	shl    $0x3,%eax
f0108075:	01 c8                	add    %ecx,%eax
f0108077:	8b 00                	mov    (%eax),%eax
f0108079:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010807c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010807f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108084:	89 c2                	mov    %eax,%edx
f0108086:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108089:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010808c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010808f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108094:	39 c2                	cmp    %eax,%edx
f0108096:	75 14                	jne    f01080ac <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0108098:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010809b:	83 ec 08             	sub    $0x8,%esp
f010809e:	50                   	push   %eax
f010809f:	ff 75 08             	pushl  0x8(%ebp)
f01080a2:	e8 b9 00 00 00       	call   f0108160 <env_page_ws_clear_entry>
f01080a7:	83 c4 10             	add    $0x10,%esp
			break;
f01080aa:	eb 10                	jmp    f01080bc <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01080ac:	ff 45 f4             	incl   -0xc(%ebp)
f01080af:	8b 45 08             	mov    0x8(%ebp),%eax
f01080b2:	8b 50 74             	mov    0x74(%eax),%edx
f01080b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080b8:	39 c2                	cmp    %eax,%edx
f01080ba:	77 a7                	ja     f0108063 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01080bc:	90                   	nop
f01080bd:	c9                   	leave  
f01080be:	c3                   	ret    

f01080bf <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01080bf:	55                   	push   %ebp
f01080c0:	89 e5                	mov    %esp,%ebp
f01080c2:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01080c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c8:	8b 40 74             	mov    0x74(%eax),%eax
f01080cb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01080ce:	77 16                	ja     f01080e6 <env_page_ws_set_entry+0x27>
f01080d0:	68 38 65 13 f0       	push   $0xf0136538
f01080d5:	68 6e 65 13 f0       	push   $0xf013656e
f01080da:	6a 26                	push   $0x26
f01080dc:	68 84 65 13 f0       	push   $0xf0136584
f01080e1:	e8 1f 81 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01080e6:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01080ed:	76 16                	jbe    f0108105 <env_page_ws_set_entry+0x46>
f01080ef:	68 a4 65 13 f0       	push   $0xf01365a4
f01080f4:	68 6e 65 13 f0       	push   $0xf013656e
f01080f9:	6a 27                	push   $0x27
f01080fb:	68 84 65 13 f0       	push   $0xf0136584
f0108100:	e8 00 81 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0108105:	8b 45 08             	mov    0x8(%ebp),%eax
f0108108:	8b 48 78             	mov    0x78(%eax),%ecx
f010810b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010810e:	89 d0                	mov    %edx,%eax
f0108110:	01 c0                	add    %eax,%eax
f0108112:	01 d0                	add    %edx,%eax
f0108114:	c1 e0 03             	shl    $0x3,%eax
f0108117:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010811a:	8b 45 10             	mov    0x10(%ebp),%eax
f010811d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108120:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108123:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108128:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f010812a:	8b 45 08             	mov    0x8(%ebp),%eax
f010812d:	8b 48 78             	mov    0x78(%eax),%ecx
f0108130:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108133:	89 d0                	mov    %edx,%eax
f0108135:	01 c0                	add    %eax,%eax
f0108137:	01 d0                	add    %edx,%eax
f0108139:	c1 e0 03             	shl    $0x3,%eax
f010813c:	01 c8                	add    %ecx,%eax
f010813e:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108142:	8b 45 08             	mov    0x8(%ebp),%eax
f0108145:	8b 48 78             	mov    0x78(%eax),%ecx
f0108148:	8b 55 0c             	mov    0xc(%ebp),%edx
f010814b:	89 d0                	mov    %edx,%eax
f010814d:	01 c0                	add    %eax,%eax
f010814f:	01 d0                	add    %edx,%eax
f0108151:	c1 e0 03             	shl    $0x3,%eax
f0108154:	01 c8                	add    %ecx,%eax
f0108156:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f010815d:	90                   	nop
}
f010815e:	c9                   	leave  
f010815f:	c3                   	ret    

f0108160 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108160:	55                   	push   %ebp
f0108161:	89 e5                	mov    %esp,%ebp
f0108163:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108166:	8b 45 08             	mov    0x8(%ebp),%eax
f0108169:	8b 40 74             	mov    0x74(%eax),%eax
f010816c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010816f:	77 16                	ja     f0108187 <env_page_ws_clear_entry+0x27>
f0108171:	68 d8 65 13 f0       	push   $0xf01365d8
f0108176:	68 6e 65 13 f0       	push   $0xf013656e
f010817b:	6a 32                	push   $0x32
f010817d:	68 84 65 13 f0       	push   $0xf0136584
f0108182:	e8 7e 80 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108187:	8b 45 08             	mov    0x8(%ebp),%eax
f010818a:	8b 48 78             	mov    0x78(%eax),%ecx
f010818d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108190:	89 d0                	mov    %edx,%eax
f0108192:	01 c0                	add    %eax,%eax
f0108194:	01 d0                	add    %edx,%eax
f0108196:	c1 e0 03             	shl    $0x3,%eax
f0108199:	01 c8                	add    %ecx,%eax
f010819b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01081a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01081a4:	8b 48 78             	mov    0x78(%eax),%ecx
f01081a7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081aa:	89 d0                	mov    %edx,%eax
f01081ac:	01 c0                	add    %eax,%eax
f01081ae:	01 d0                	add    %edx,%eax
f01081b0:	c1 e0 03             	shl    $0x3,%eax
f01081b3:	01 c8                	add    %ecx,%eax
f01081b5:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01081b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01081bc:	8b 48 78             	mov    0x78(%eax),%ecx
f01081bf:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081c2:	89 d0                	mov    %edx,%eax
f01081c4:	01 c0                	add    %eax,%eax
f01081c6:	01 d0                	add    %edx,%eax
f01081c8:	c1 e0 03             	shl    $0x3,%eax
f01081cb:	01 c8                	add    %ecx,%eax
f01081cd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f01081d4:	90                   	nop
f01081d5:	c9                   	leave  
f01081d6:	c3                   	ret    

f01081d7 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01081d7:	55                   	push   %ebp
f01081d8:	89 e5                	mov    %esp,%ebp
f01081da:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01081dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01081e0:	8b 40 74             	mov    0x74(%eax),%eax
f01081e3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01081e6:	77 16                	ja     f01081fe <env_page_ws_get_virtual_address+0x27>
f01081e8:	68 d8 65 13 f0       	push   $0xf01365d8
f01081ed:	68 6e 65 13 f0       	push   $0xf013656e
f01081f2:	6a 3a                	push   $0x3a
f01081f4:	68 84 65 13 f0       	push   $0xf0136584
f01081f9:	e8 07 80 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01081fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0108201:	8b 48 78             	mov    0x78(%eax),%ecx
f0108204:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108207:	89 d0                	mov    %edx,%eax
f0108209:	01 c0                	add    %eax,%eax
f010820b:	01 d0                	add    %edx,%eax
f010820d:	c1 e0 03             	shl    $0x3,%eax
f0108210:	01 c8                	add    %ecx,%eax
f0108212:	8b 00                	mov    (%eax),%eax
f0108214:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108217:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010821a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010821f:	c9                   	leave  
f0108220:	c3                   	ret    

f0108221 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108221:	55                   	push   %ebp
f0108222:	89 e5                	mov    %esp,%ebp
f0108224:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108227:	8b 45 08             	mov    0x8(%ebp),%eax
f010822a:	8b 40 74             	mov    0x74(%eax),%eax
f010822d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108230:	77 16                	ja     f0108248 <env_page_ws_get_time_stamp+0x27>
f0108232:	68 d8 65 13 f0       	push   $0xf01365d8
f0108237:	68 6e 65 13 f0       	push   $0xf013656e
f010823c:	6a 40                	push   $0x40
f010823e:	68 84 65 13 f0       	push   $0xf0136584
f0108243:	e8 bd 7f ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108248:	8b 45 08             	mov    0x8(%ebp),%eax
f010824b:	8b 48 78             	mov    0x78(%eax),%ecx
f010824e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108251:	89 d0                	mov    %edx,%eax
f0108253:	01 c0                	add    %eax,%eax
f0108255:	01 d0                	add    %edx,%eax
f0108257:	c1 e0 03             	shl    $0x3,%eax
f010825a:	01 c8                	add    %ecx,%eax
f010825c:	8b 40 08             	mov    0x8(%eax),%eax
}
f010825f:	c9                   	leave  
f0108260:	c3                   	ret    

f0108261 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108261:	55                   	push   %ebp
f0108262:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108264:	8b 45 08             	mov    0x8(%ebp),%eax
f0108267:	8b 48 78             	mov    0x78(%eax),%ecx
f010826a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010826d:	89 d0                	mov    %edx,%eax
f010826f:	01 c0                	add    %eax,%eax
f0108271:	01 d0                	add    %edx,%eax
f0108273:	c1 e0 03             	shl    $0x3,%eax
f0108276:	01 c8                	add    %ecx,%eax
f0108278:	8a 40 04             	mov    0x4(%eax),%al
f010827b:	0f b6 c0             	movzbl %al,%eax
}
f010827e:	5d                   	pop    %ebp
f010827f:	c3                   	ret    

f0108280 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108280:	55                   	push   %ebp
f0108281:	89 e5                	mov    %esp,%ebp
f0108283:	53                   	push   %ebx
f0108284:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108287:	83 ec 0c             	sub    $0xc,%esp
f010828a:	6a 02                	push   $0x2
f010828c:	e8 a6 5c 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f0108291:	83 c4 10             	add    $0x10,%esp
f0108294:	85 c0                	test   %eax,%eax
f0108296:	0f 84 fe 00 00 00    	je     f010839a <env_page_ws_print+0x11a>
	{
		int i = 0;
f010829c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01082a3:	83 ec 0c             	sub    $0xc,%esp
f01082a6:	68 10 66 13 f0       	push   $0xf0136610
f01082ab:	e8 5e 8a ff ff       	call   f0100d0e <cprintf>
f01082b0:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01082b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01082b6:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f01082bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082bf:	eb 2c                	jmp    f01082ed <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01082c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082c4:	8b 10                	mov    (%eax),%edx
f01082c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082c9:	8d 48 01             	lea    0x1(%eax),%ecx
f01082cc:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01082cf:	83 ec 04             	sub    $0x4,%esp
f01082d2:	52                   	push   %edx
f01082d3:	50                   	push   %eax
f01082d4:	68 2a 66 13 f0       	push   $0xf013662a
f01082d9:	e8 30 8a ff ff       	call   f0100d0e <cprintf>
f01082de:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01082e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01082e4:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01082ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01082f1:	74 08                	je     f01082fb <env_page_ws_print+0x7b>
f01082f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082f6:	8b 40 10             	mov    0x10(%eax),%eax
f01082f9:	eb 05                	jmp    f0108300 <env_page_ws_print+0x80>
f01082fb:	b8 00 00 00 00       	mov    $0x0,%eax
f0108300:	8b 55 08             	mov    0x8(%ebp),%edx
f0108303:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108309:	8b 45 08             	mov    0x8(%ebp),%eax
f010830c:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108312:	85 c0                	test   %eax,%eax
f0108314:	75 ab                	jne    f01082c1 <env_page_ws_print+0x41>
f0108316:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010831a:	75 a5                	jne    f01082c1 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f010831c:	83 ec 0c             	sub    $0xc,%esp
f010831f:	68 32 66 13 f0       	push   $0xf0136632
f0108324:	e8 e5 89 ff ff       	call   f0100d0e <cprintf>
f0108329:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010832c:	8b 45 08             	mov    0x8(%ebp),%eax
f010832f:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0108335:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108338:	eb 2c                	jmp    f0108366 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010833a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010833d:	8b 10                	mov    (%eax),%edx
f010833f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108342:	8d 48 01             	lea    0x1(%eax),%ecx
f0108345:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108348:	83 ec 04             	sub    $0x4,%esp
f010834b:	52                   	push   %edx
f010834c:	50                   	push   %eax
f010834d:	68 2a 66 13 f0       	push   $0xf013662a
f0108352:	e8 b7 89 ff ff       	call   f0100d0e <cprintf>
f0108357:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f010835a:	8b 45 08             	mov    0x8(%ebp),%eax
f010835d:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108363:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108366:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010836a:	74 08                	je     f0108374 <env_page_ws_print+0xf4>
f010836c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010836f:	8b 40 10             	mov    0x10(%eax),%eax
f0108372:	eb 05                	jmp    f0108379 <env_page_ws_print+0xf9>
f0108374:	b8 00 00 00 00       	mov    $0x0,%eax
f0108379:	8b 55 08             	mov    0x8(%ebp),%edx
f010837c:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f0108382:	8b 45 08             	mov    0x8(%ebp),%eax
f0108385:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010838b:	85 c0                	test   %eax,%eax
f010838d:	75 ab                	jne    f010833a <env_page_ws_print+0xba>
f010838f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108393:	75 a5                	jne    f010833a <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108395:	e9 95 01 00 00       	jmp    f010852f <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f010839a:	83 ec 0c             	sub    $0xc,%esp
f010839d:	68 4d 66 13 f0       	push   $0xf013664d
f01083a2:	e8 67 89 ff ff       	call   f0100d0e <cprintf>
f01083a7:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f01083aa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01083b1:	e9 6a 01 00 00       	jmp    f0108520 <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f01083b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01083b9:	8b 48 78             	mov    0x78(%eax),%ecx
f01083bc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01083bf:	89 d0                	mov    %edx,%eax
f01083c1:	01 c0                	add    %eax,%eax
f01083c3:	01 d0                	add    %edx,%eax
f01083c5:	c1 e0 03             	shl    $0x3,%eax
f01083c8:	01 c8                	add    %ecx,%eax
f01083ca:	8a 40 04             	mov    0x4(%eax),%al
f01083cd:	84 c0                	test   %al,%al
f01083cf:	74 43                	je     f0108414 <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f01083d1:	83 ec 0c             	sub    $0xc,%esp
f01083d4:	68 57 66 13 f0       	push   $0xf0136657
f01083d9:	e8 30 89 ff ff       	call   f0100d0e <cprintf>
f01083de:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f01083e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01083e4:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01083ea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01083ed:	75 10                	jne    f01083ff <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f01083ef:	83 ec 0c             	sub    $0xc,%esp
f01083f2:	68 66 66 13 f0       	push   $0xf0136666
f01083f7:	e8 12 89 ff ff       	call   f0100d0e <cprintf>
f01083fc:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f01083ff:	83 ec 0c             	sub    $0xc,%esp
f0108402:	68 6c 66 13 f0       	push   $0xf013666c
f0108407:	e8 02 89 ff ff       	call   f0100d0e <cprintf>
f010840c:	83 c4 10             	add    $0x10,%esp
				continue;
f010840f:	e9 09 01 00 00       	jmp    f010851d <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108414:	8b 45 08             	mov    0x8(%ebp),%eax
f0108417:	8b 48 78             	mov    0x78(%eax),%ecx
f010841a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010841d:	89 d0                	mov    %edx,%eax
f010841f:	01 c0                	add    %eax,%eax
f0108421:	01 d0                	add    %edx,%eax
f0108423:	c1 e0 03             	shl    $0x3,%eax
f0108426:	01 c8                	add    %ecx,%eax
f0108428:	8b 00                	mov    (%eax),%eax
f010842a:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f010842d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108430:	8b 48 78             	mov    0x78(%eax),%ecx
f0108433:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108436:	89 d0                	mov    %edx,%eax
f0108438:	01 c0                	add    %eax,%eax
f010843a:	01 d0                	add    %edx,%eax
f010843c:	c1 e0 03             	shl    $0x3,%eax
f010843f:	01 c8                	add    %ecx,%eax
f0108441:	8b 40 08             	mov    0x8(%eax),%eax
f0108444:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108447:	8b 45 08             	mov    0x8(%ebp),%eax
f010844a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010844d:	83 ec 08             	sub    $0x8,%esp
f0108450:	ff 75 e8             	pushl  -0x18(%ebp)
f0108453:	50                   	push   %eax
f0108454:	e8 fd f9 ff ff       	call   f0107e56 <pt_get_page_permissions>
f0108459:	83 c4 10             	add    $0x10,%esp
f010845c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f010845f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108462:	83 e0 40             	and    $0x40,%eax
f0108465:	85 c0                	test   %eax,%eax
f0108467:	0f 95 c0             	setne  %al
f010846a:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f010846d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108470:	83 e0 20             	and    $0x20,%eax
f0108473:	85 c0                	test   %eax,%eax
f0108475:	0f 95 c0             	setne  %al
f0108478:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010847b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010847e:	25 00 02 00 00       	and    $0x200,%eax
f0108483:	85 c0                	test   %eax,%eax
f0108485:	0f 95 c0             	setne  %al
f0108488:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010848b:	8b 45 08             	mov    0x8(%ebp),%eax
f010848e:	8b 48 78             	mov    0x78(%eax),%ecx
f0108491:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108494:	89 d0                	mov    %edx,%eax
f0108496:	01 c0                	add    %eax,%eax
f0108498:	01 d0                	add    %edx,%eax
f010849a:	c1 e0 03             	shl    $0x3,%eax
f010849d:	01 c8                	add    %ecx,%eax
f010849f:	8b 00                	mov    (%eax),%eax
f01084a1:	83 ec 04             	sub    $0x4,%esp
f01084a4:	50                   	push   %eax
f01084a5:	ff 75 ec             	pushl  -0x14(%ebp)
f01084a8:	68 6e 66 13 f0       	push   $0xf013666e
f01084ad:	e8 5c 88 ff ff       	call   f0100d0e <cprintf>
f01084b2:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f01084b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01084b8:	8b 48 78             	mov    0x78(%eax),%ecx
f01084bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01084be:	89 d0                	mov    %edx,%eax
f01084c0:	01 c0                	add    %eax,%eax
f01084c2:	01 d0                	add    %edx,%eax
f01084c4:	c1 e0 03             	shl    $0x3,%eax
f01084c7:	01 c8                	add    %ecx,%eax
f01084c9:	8b 58 0c             	mov    0xc(%eax),%ebx
f01084cc:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f01084d0:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f01084d4:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f01084d8:	83 ec 08             	sub    $0x8,%esp
f01084db:	53                   	push   %ebx
f01084dc:	ff 75 e4             	pushl  -0x1c(%ebp)
f01084df:	51                   	push   %ecx
f01084e0:	52                   	push   %edx
f01084e1:	50                   	push   %eax
f01084e2:	68 80 66 13 f0       	push   $0xf0136680
f01084e7:	e8 22 88 ff ff       	call   f0100d0e <cprintf>
f01084ec:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01084ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01084f2:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01084f8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01084fb:	75 10                	jne    f010850d <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f01084fd:	83 ec 0c             	sub    $0xc,%esp
f0108500:	68 c7 66 13 f0       	push   $0xf01366c7
f0108505:	e8 04 88 ff ff       	call   f0100d0e <cprintf>
f010850a:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010850d:	83 ec 0c             	sub    $0xc,%esp
f0108510:	68 6c 66 13 f0       	push   $0xf013666c
f0108515:	e8 f4 87 ff ff       	call   f0100d0e <cprintf>
f010851a:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f010851d:	ff 45 ec             	incl   -0x14(%ebp)
f0108520:	8b 45 08             	mov    0x8(%ebp),%eax
f0108523:	8b 40 74             	mov    0x74(%eax),%eax
f0108526:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108529:	0f 87 87 fe ff ff    	ja     f01083b6 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010852f:	90                   	nop
f0108530:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108533:	c9                   	leave  
f0108534:	c3                   	ret    

f0108535 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108535:	55                   	push   %ebp
f0108536:	89 e5                	mov    %esp,%ebp
f0108538:	53                   	push   %ebx
f0108539:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f010853c:	83 ec 0c             	sub    $0xc,%esp
f010853f:	68 cc 66 13 f0       	push   $0xf01366cc
f0108544:	e8 c5 87 ff ff       	call   f0100d0e <cprintf>
f0108549:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f010854c:	83 ec 0c             	sub    $0xc,%esp
f010854f:	68 01 67 13 f0       	push   $0xf0136701
f0108554:	e8 b5 87 ff ff       	call   f0100d0e <cprintf>
f0108559:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010855c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108563:	e9 10 01 00 00       	jmp    f0108678 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108568:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010856b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010856e:	89 d0                	mov    %edx,%eax
f0108570:	01 c0                	add    %eax,%eax
f0108572:	01 d0                	add    %edx,%eax
f0108574:	c1 e0 03             	shl    $0x3,%eax
f0108577:	01 c8                	add    %ecx,%eax
f0108579:	83 e8 80             	sub    $0xffffff80,%eax
f010857c:	8a 00                	mov    (%eax),%al
f010857e:	84 c0                	test   %al,%al
f0108580:	74 43                	je     f01085c5 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f0108582:	83 ec 0c             	sub    $0xc,%esp
f0108585:	68 57 66 13 f0       	push   $0xf0136657
f010858a:	e8 7f 87 ff ff       	call   f0100d0e <cprintf>
f010858f:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0108592:	8b 45 08             	mov    0x8(%ebp),%eax
f0108595:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010859b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010859e:	75 10                	jne    f01085b0 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f01085a0:	83 ec 0c             	sub    $0xc,%esp
f01085a3:	68 66 66 13 f0       	push   $0xf0136666
f01085a8:	e8 61 87 ff ff       	call   f0100d0e <cprintf>
f01085ad:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01085b0:	83 ec 0c             	sub    $0xc,%esp
f01085b3:	68 6c 66 13 f0       	push   $0xf013666c
f01085b8:	e8 51 87 ff ff       	call   f0100d0e <cprintf>
f01085bd:	83 c4 10             	add    $0x10,%esp
			continue;
f01085c0:	e9 b0 00 00 00       	jmp    f0108675 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f01085c5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01085cb:	89 d0                	mov    %edx,%eax
f01085cd:	01 c0                	add    %eax,%eax
f01085cf:	01 d0                	add    %edx,%eax
f01085d1:	c1 e0 03             	shl    $0x3,%eax
f01085d4:	01 c8                	add    %ecx,%eax
f01085d6:	83 c0 7c             	add    $0x7c,%eax
f01085d9:	8b 00                	mov    (%eax),%eax
f01085db:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f01085de:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01085e4:	89 d0                	mov    %edx,%eax
f01085e6:	01 c0                	add    %eax,%eax
f01085e8:	01 d0                	add    %edx,%eax
f01085ea:	c1 e0 03             	shl    $0x3,%eax
f01085ed:	01 c8                	add    %ecx,%eax
f01085ef:	83 c0 7c             	add    $0x7c,%eax
f01085f2:	8b 00                	mov    (%eax),%eax
f01085f4:	83 ec 04             	sub    $0x4,%esp
f01085f7:	50                   	push   %eax
f01085f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01085fb:	68 0c 67 13 f0       	push   $0xf013670c
f0108600:	e8 09 87 ff ff       	call   f0100d0e <cprintf>
f0108605:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108608:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010860b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010860e:	89 d0                	mov    %edx,%eax
f0108610:	01 c0                	add    %eax,%eax
f0108612:	01 d0                	add    %edx,%eax
f0108614:	c1 e0 03             	shl    $0x3,%eax
f0108617:	01 c8                	add    %ecx,%eax
f0108619:	05 84 00 00 00       	add    $0x84,%eax
f010861e:	8b 18                	mov    (%eax),%ebx
f0108620:	8b 45 08             	mov    0x8(%ebp),%eax
f0108623:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108626:	83 ec 08             	sub    $0x8,%esp
f0108629:	ff 75 f0             	pushl  -0x10(%ebp)
f010862c:	50                   	push   %eax
f010862d:	e8 43 f9 ff ff       	call   f0107f75 <pd_is_table_used>
f0108632:	83 c4 10             	add    $0x10,%esp
f0108635:	83 ec 04             	sub    $0x4,%esp
f0108638:	53                   	push   %ebx
f0108639:	50                   	push   %eax
f010863a:	68 24 67 13 f0       	push   $0xf0136724
f010863f:	e8 ca 86 ff ff       	call   f0100d0e <cprintf>
f0108644:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108647:	8b 45 08             	mov    0x8(%ebp),%eax
f010864a:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108650:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108653:	75 10                	jne    f0108665 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f0108655:	83 ec 0c             	sub    $0xc,%esp
f0108658:	68 c7 66 13 f0       	push   $0xf01366c7
f010865d:	e8 ac 86 ff ff       	call   f0100d0e <cprintf>
f0108662:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108665:	83 ec 0c             	sub    $0xc,%esp
f0108668:	68 6c 66 13 f0       	push   $0xf013666c
f010866d:	e8 9c 86 ff ff       	call   f0100d0e <cprintf>
f0108672:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108675:	ff 45 f4             	incl   -0xc(%ebp)
f0108678:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010867c:	0f 86 e6 fe ff ff    	jbe    f0108568 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108682:	90                   	nop
f0108683:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108686:	c9                   	leave  
f0108687:	c3                   	ret    

f0108688 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108688:	55                   	push   %ebp
f0108689:	89 e5                	mov    %esp,%ebp
f010868b:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010868e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108695:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f010869c:	eb 20                	jmp    f01086be <env_table_ws_get_size+0x36>
f010869e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01086a4:	89 d0                	mov    %edx,%eax
f01086a6:	01 c0                	add    %eax,%eax
f01086a8:	01 d0                	add    %edx,%eax
f01086aa:	c1 e0 03             	shl    $0x3,%eax
f01086ad:	01 c8                	add    %ecx,%eax
f01086af:	83 e8 80             	sub    $0xffffff80,%eax
f01086b2:	8a 00                	mov    (%eax),%al
f01086b4:	84 c0                	test   %al,%al
f01086b6:	75 03                	jne    f01086bb <env_table_ws_get_size+0x33>
f01086b8:	ff 45 f8             	incl   -0x8(%ebp)
f01086bb:	ff 45 fc             	incl   -0x4(%ebp)
f01086be:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f01086c2:	7e da                	jle    f010869e <env_table_ws_get_size+0x16>
	return counter;
f01086c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01086c7:	c9                   	leave  
f01086c8:	c3                   	ret    

f01086c9 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01086c9:	55                   	push   %ebp
f01086ca:	89 e5                	mov    %esp,%ebp
f01086cc:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01086cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f01086d6:	eb 4c                	jmp    f0108724 <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f01086d8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086de:	89 d0                	mov    %edx,%eax
f01086e0:	01 c0                	add    %eax,%eax
f01086e2:	01 d0                	add    %edx,%eax
f01086e4:	c1 e0 03             	shl    $0x3,%eax
f01086e7:	01 c8                	add    %ecx,%eax
f01086e9:	83 c0 7c             	add    $0x7c,%eax
f01086ec:	8b 00                	mov    (%eax),%eax
f01086ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01086f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01086f4:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01086f9:	89 c2                	mov    %eax,%edx
f01086fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108701:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108704:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108709:	39 c2                	cmp    %eax,%edx
f010870b:	75 14                	jne    f0108721 <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f010870d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108710:	83 ec 08             	sub    $0x8,%esp
f0108713:	50                   	push   %eax
f0108714:	ff 75 08             	pushl  0x8(%ebp)
f0108717:	e8 b8 00 00 00       	call   f01087d4 <env_table_ws_clear_entry>
f010871c:	83 c4 10             	add    $0x10,%esp
			break;
f010871f:	eb 09                	jmp    f010872a <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0108721:	ff 45 f4             	incl   -0xc(%ebp)
f0108724:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108728:	7e ae                	jle    f01086d8 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f010872a:	90                   	nop
f010872b:	c9                   	leave  
f010872c:	c3                   	ret    

f010872d <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f010872d:	55                   	push   %ebp
f010872e:	89 e5                	mov    %esp,%ebp
f0108730:	53                   	push   %ebx
f0108731:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108734:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108738:	76 19                	jbe    f0108753 <env_table_ws_set_entry+0x26>
f010873a:	68 48 67 13 f0       	push   $0xf0136748
f010873f:	68 6e 65 13 f0       	push   $0xf013656e
f0108744:	68 b6 00 00 00       	push   $0xb6
f0108749:	68 84 65 13 f0       	push   $0xf0136584
f010874e:	e8 b2 7a ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108753:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f010875a:	76 19                	jbe    f0108775 <env_table_ws_set_entry+0x48>
f010875c:	68 a4 65 13 f0       	push   $0xf01365a4
f0108761:	68 6e 65 13 f0       	push   $0xf013656e
f0108766:	68 b7 00 00 00       	push   $0xb7
f010876b:	68 84 65 13 f0       	push   $0xf0136584
f0108770:	e8 90 7a ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108775:	8b 45 10             	mov    0x10(%ebp),%eax
f0108778:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010877b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010877e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108783:	89 c1                	mov    %eax,%ecx
f0108785:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108788:	8b 55 0c             	mov    0xc(%ebp),%edx
f010878b:	89 d0                	mov    %edx,%eax
f010878d:	01 c0                	add    %eax,%eax
f010878f:	01 d0                	add    %edx,%eax
f0108791:	c1 e0 03             	shl    $0x3,%eax
f0108794:	01 d8                	add    %ebx,%eax
f0108796:	83 c0 7c             	add    $0x7c,%eax
f0108799:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f010879b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010879e:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087a1:	89 d0                	mov    %edx,%eax
f01087a3:	01 c0                	add    %eax,%eax
f01087a5:	01 d0                	add    %edx,%eax
f01087a7:	c1 e0 03             	shl    $0x3,%eax
f01087aa:	01 c8                	add    %ecx,%eax
f01087ac:	83 e8 80             	sub    $0xffffff80,%eax
f01087af:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f01087b2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087b8:	89 d0                	mov    %edx,%eax
f01087ba:	01 c0                	add    %eax,%eax
f01087bc:	01 d0                	add    %edx,%eax
f01087be:	c1 e0 03             	shl    $0x3,%eax
f01087c1:	01 c8                	add    %ecx,%eax
f01087c3:	05 84 00 00 00       	add    $0x84,%eax
f01087c8:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f01087ce:	90                   	nop
}
f01087cf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01087d2:	c9                   	leave  
f01087d3:	c3                   	ret    

f01087d4 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01087d4:	55                   	push   %ebp
f01087d5:	89 e5                	mov    %esp,%ebp
f01087d7:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01087da:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01087de:	76 19                	jbe    f01087f9 <env_table_ws_clear_entry+0x25>
f01087e0:	68 48 67 13 f0       	push   $0xf0136748
f01087e5:	68 6e 65 13 f0       	push   $0xf013656e
f01087ea:	68 c2 00 00 00       	push   $0xc2
f01087ef:	68 84 65 13 f0       	push   $0xf0136584
f01087f4:	e8 0c 7a ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f01087f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087fc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087ff:	89 d0                	mov    %edx,%eax
f0108801:	01 c0                	add    %eax,%eax
f0108803:	01 d0                	add    %edx,%eax
f0108805:	c1 e0 03             	shl    $0x3,%eax
f0108808:	01 c8                	add    %ecx,%eax
f010880a:	83 c0 7c             	add    $0x7c,%eax
f010880d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108813:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108816:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108819:	89 d0                	mov    %edx,%eax
f010881b:	01 c0                	add    %eax,%eax
f010881d:	01 d0                	add    %edx,%eax
f010881f:	c1 e0 03             	shl    $0x3,%eax
f0108822:	01 c8                	add    %ecx,%eax
f0108824:	83 e8 80             	sub    $0xffffff80,%eax
f0108827:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f010882a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010882d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108830:	89 d0                	mov    %edx,%eax
f0108832:	01 c0                	add    %eax,%eax
f0108834:	01 d0                	add    %edx,%eax
f0108836:	c1 e0 03             	shl    $0x3,%eax
f0108839:	01 c8                	add    %ecx,%eax
f010883b:	05 84 00 00 00       	add    $0x84,%eax
f0108840:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108846:	90                   	nop
f0108847:	c9                   	leave  
f0108848:	c3                   	ret    

f0108849 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108849:	55                   	push   %ebp
f010884a:	89 e5                	mov    %esp,%ebp
f010884c:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010884f:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108853:	76 19                	jbe    f010886e <env_table_ws_get_virtual_address+0x25>
f0108855:	68 48 67 13 f0       	push   $0xf0136748
f010885a:	68 6e 65 13 f0       	push   $0xf013656e
f010885f:	68 ca 00 00 00       	push   $0xca
f0108864:	68 84 65 13 f0       	push   $0xf0136584
f0108869:	e8 97 79 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f010886e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108871:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108874:	89 d0                	mov    %edx,%eax
f0108876:	01 c0                	add    %eax,%eax
f0108878:	01 d0                	add    %edx,%eax
f010887a:	c1 e0 03             	shl    $0x3,%eax
f010887d:	01 c8                	add    %ecx,%eax
f010887f:	83 c0 7c             	add    $0x7c,%eax
f0108882:	8b 00                	mov    (%eax),%eax
f0108884:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108887:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010888a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010888f:	c9                   	leave  
f0108890:	c3                   	ret    

f0108891 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108891:	55                   	push   %ebp
f0108892:	89 e5                	mov    %esp,%ebp
f0108894:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108897:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010889b:	76 19                	jbe    f01088b6 <env_table_ws_get_time_stamp+0x25>
f010889d:	68 48 67 13 f0       	push   $0xf0136748
f01088a2:	68 6e 65 13 f0       	push   $0xf013656e
f01088a7:	68 d1 00 00 00       	push   $0xd1
f01088ac:	68 84 65 13 f0       	push   $0xf0136584
f01088b1:	e8 4f 79 ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f01088b6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088b9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088bc:	89 d0                	mov    %edx,%eax
f01088be:	01 c0                	add    %eax,%eax
f01088c0:	01 d0                	add    %edx,%eax
f01088c2:	c1 e0 03             	shl    $0x3,%eax
f01088c5:	01 c8                	add    %ecx,%eax
f01088c7:	05 84 00 00 00       	add    $0x84,%eax
f01088cc:	8b 00                	mov    (%eax),%eax
}
f01088ce:	c9                   	leave  
f01088cf:	c3                   	ret    

f01088d0 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01088d0:	55                   	push   %ebp
f01088d1:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f01088d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088d6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088d9:	89 d0                	mov    %edx,%eax
f01088db:	01 c0                	add    %eax,%eax
f01088dd:	01 d0                	add    %edx,%eax
f01088df:	c1 e0 03             	shl    $0x3,%eax
f01088e2:	01 c8                	add    %ecx,%eax
f01088e4:	83 e8 80             	sub    $0xffffff80,%eax
f01088e7:	8a 00                	mov    (%eax),%al
f01088e9:	0f b6 c0             	movzbl %al,%eax
}
f01088ec:	5d                   	pop    %ebp
f01088ed:	c3                   	ret    

f01088ee <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f01088ee:	55                   	push   %ebp
f01088ef:	89 e5                	mov    %esp,%ebp
f01088f1:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f01088f4:	83 ec 04             	sub    $0x4,%esp
f01088f7:	68 7c 67 13 f0       	push   $0xf013677c
f01088fc:	68 e5 00 00 00       	push   $0xe5
f0108901:	68 84 65 13 f0       	push   $0xf0136584
f0108906:	e8 fa 78 ff ff       	call   f0100205 <_panic>

f010890b <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f010890b:	55                   	push   %ebp
f010890c:	89 e5                	mov    %esp,%ebp
f010890e:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0108911:	83 ec 04             	sub    $0x4,%esp
f0108914:	68 a8 67 13 f0       	push   $0xf01367a8
f0108919:	68 ec 00 00 00       	push   $0xec
f010891e:	68 84 65 13 f0       	push   $0xf0136584
f0108923:	e8 dd 78 ff ff       	call   f0100205 <_panic>

f0108928 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108928:	55                   	push   %ebp
f0108929:	89 e5                	mov    %esp,%ebp
f010892b:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f010892e:	83 ec 04             	sub    $0x4,%esp
f0108931:	68 d8 67 13 f0       	push   $0xf01367d8
f0108936:	68 f3 00 00 00       	push   $0xf3
f010893b:	68 84 65 13 f0       	push   $0xf0136584
f0108940:	e8 c0 78 ff ff       	call   f0100205 <_panic>

f0108945 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108945:	55                   	push   %ebp
f0108946:	89 e5                	mov    %esp,%ebp
f0108948:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f010894b:	8b 45 10             	mov    0x10(%ebp),%eax
f010894e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f0108951:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108954:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f0108957:	8b 45 10             	mov    0x10(%ebp),%eax
f010895a:	25 ff 0f 00 00       	and    $0xfff,%eax
f010895f:	85 c0                	test   %eax,%eax
f0108961:	74 11                	je     f0108974 <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f0108963:	8b 45 10             	mov    0x10(%ebp),%eax
f0108966:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108969:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010896c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108971:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f0108974:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108977:	25 ff 0f 00 00       	and    $0xfff,%eax
f010897c:	85 c0                	test   %eax,%eax
f010897e:	74 11                	je     f0108991 <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f0108980:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108983:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108986:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108989:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010898e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f0108991:	8b 45 14             	mov    0x14(%ebp),%eax
f0108994:	c1 e0 0c             	shl    $0xc,%eax
f0108997:	89 c2                	mov    %eax,%edx
f0108999:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010899c:	01 d0                	add    %edx,%eax
f010899e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01089a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01089a7:	eb 4b                	jmp    f01089f4 <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f01089a9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f01089b0:	83 ec 04             	sub    $0x4,%esp
f01089b3:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01089b6:	50                   	push   %eax
f01089b7:	ff 75 ec             	pushl  -0x14(%ebp)
f01089ba:	ff 75 08             	pushl  0x8(%ebp)
f01089bd:	e8 ef e0 ff ff       	call   f0106ab1 <get_page_table>
f01089c2:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01089c5:	83 ec 04             	sub    $0x4,%esp
f01089c8:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01089cb:	50                   	push   %eax
f01089cc:	ff 75 ec             	pushl  -0x14(%ebp)
f01089cf:	ff 75 08             	pushl  0x8(%ebp)
f01089d2:	e8 2f e4 ff ff       	call   f0106e06 <get_frame_info>
f01089d7:	83 c4 10             	add    $0x10,%esp
f01089da:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f01089dd:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01089e1:	74 0a                	je     f01089ed <cut_paste_pages+0xa8>
			return -1;
f01089e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01089e8:	e9 d4 00 00 00       	jmp    f0108ac1 <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01089ed:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01089f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089f7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01089fa:	72 ad                	jb     f01089a9 <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f01089fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108a02:	e9 a9 00 00 00       	jmp    f0108ab0 <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108a07:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108a0e:	83 ec 04             	sub    $0x4,%esp
f0108a11:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108a14:	50                   	push   %eax
f0108a15:	ff 75 e8             	pushl  -0x18(%ebp)
f0108a18:	ff 75 08             	pushl  0x8(%ebp)
f0108a1b:	e8 91 e0 ff ff       	call   f0106ab1 <get_page_table>
f0108a20:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f0108a23:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108a26:	85 c0                	test   %eax,%eax
f0108a28:	75 14                	jne    f0108a3e <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f0108a2a:	83 ec 08             	sub    $0x8,%esp
f0108a2d:	ff 75 e8             	pushl  -0x18(%ebp)
f0108a30:	ff 75 08             	pushl  0x8(%ebp)
f0108a33:	e8 cf e1 ff ff       	call   f0106c07 <create_page_table>
f0108a38:	83 c4 10             	add    $0x10,%esp
f0108a3b:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108a3e:	83 ec 04             	sub    $0x4,%esp
f0108a41:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108a44:	50                   	push   %eax
f0108a45:	ff 75 e8             	pushl  -0x18(%ebp)
f0108a48:	ff 75 08             	pushl  0x8(%ebp)
f0108a4b:	e8 b6 e3 ff ff       	call   f0106e06 <get_frame_info>
f0108a50:	83 c4 10             	add    $0x10,%esp
f0108a53:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f0108a56:	83 ec 08             	sub    $0x8,%esp
f0108a59:	ff 75 f0             	pushl  -0x10(%ebp)
f0108a5c:	ff 75 08             	pushl  0x8(%ebp)
f0108a5f:	e8 f2 f3 ff ff       	call   f0107e56 <pt_get_page_permissions>
f0108a64:	83 c4 10             	add    $0x10,%esp
f0108a67:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f0108a6a:	83 ec 08             	sub    $0x8,%esp
f0108a6d:	ff 75 f0             	pushl  -0x10(%ebp)
f0108a70:	ff 75 08             	pushl  0x8(%ebp)
f0108a73:	e8 fe e3 ff ff       	call   f0106e76 <unmap_frame>
f0108a78:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f0108a7b:	83 ec 0c             	sub    $0xc,%esp
f0108a7e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108a81:	50                   	push   %eax
f0108a82:	e8 6b de ff ff       	call   f01068f2 <allocate_frame>
f0108a87:	83 c4 10             	add    $0x10,%esp
f0108a8a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108a8d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108a90:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108a93:	ff 75 e8             	pushl  -0x18(%ebp)
f0108a96:	50                   	push   %eax
f0108a97:	ff 75 08             	pushl  0x8(%ebp)
f0108a9a:	e8 a2 e2 ff ff       	call   f0106d41 <map_frame>
f0108a9f:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f0108aa2:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108aa9:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f0108ab0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108ab3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108ab6:	0f 82 4b ff ff ff    	jb     f0108a07 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108abc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108ac1:	c9                   	leave  
f0108ac2:	c3                   	ret    

f0108ac3 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108ac3:	55                   	push   %ebp
f0108ac4:	89 e5                	mov    %esp,%ebp
f0108ac6:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f0108ac9:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f0108ad0:	8b 45 10             	mov    0x10(%ebp),%eax
f0108ad3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f0108ad6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108ad9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108adc:	8b 45 10             	mov    0x10(%ebp),%eax
f0108adf:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108ae2:	e9 d1 00 00 00       	jmp    f0108bb8 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f0108ae7:	83 ec 04             	sub    $0x4,%esp
f0108aea:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108aed:	50                   	push   %eax
f0108aee:	ff 75 f0             	pushl  -0x10(%ebp)
f0108af1:	ff 75 08             	pushl  0x8(%ebp)
f0108af4:	e8 b8 df ff ff       	call   f0106ab1 <get_page_table>
f0108af9:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108afc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108aff:	85 c0                	test   %eax,%eax
f0108b01:	75 14                	jne    f0108b17 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f0108b03:	83 ec 08             	sub    $0x8,%esp
f0108b06:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b09:	ff 75 08             	pushl  0x8(%ebp)
f0108b0c:	e8 f6 e0 ff ff       	call   f0106c07 <create_page_table>
f0108b11:	83 c4 10             	add    $0x10,%esp
f0108b14:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108b17:	83 ec 04             	sub    $0x4,%esp
f0108b1a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108b1d:	50                   	push   %eax
f0108b1e:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b21:	ff 75 08             	pushl  0x8(%ebp)
f0108b24:	e8 dd e2 ff ff       	call   f0106e06 <get_frame_info>
f0108b29:	83 c4 10             	add    $0x10,%esp
f0108b2c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f0108b2f:	83 ec 08             	sub    $0x8,%esp
f0108b32:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b35:	ff 75 08             	pushl  0x8(%ebp)
f0108b38:	e8 19 f3 ff ff       	call   f0107e56 <pt_get_page_permissions>
f0108b3d:	83 c4 10             	add    $0x10,%esp
f0108b40:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f0108b43:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b46:	85 c0                	test   %eax,%eax
f0108b48:	74 14                	je     f0108b5e <copy_paste_chunk+0x9b>
f0108b4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108b4d:	83 e0 02             	and    $0x2,%eax
f0108b50:	85 c0                	test   %eax,%eax
f0108b52:	75 0a                	jne    f0108b5e <copy_paste_chunk+0x9b>
			return -1;
f0108b54:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108b59:	e9 a7 00 00 00       	jmp    f0108c05 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f0108b5e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b61:	85 c0                	test   %eax,%eax
f0108b63:	75 45                	jne    f0108baa <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f0108b65:	83 ec 08             	sub    $0x8,%esp
f0108b68:	ff 75 f4             	pushl  -0xc(%ebp)
f0108b6b:	ff 75 08             	pushl  0x8(%ebp)
f0108b6e:	e8 e3 f2 ff ff       	call   f0107e56 <pt_get_page_permissions>
f0108b73:	83 c4 10             	add    $0x10,%esp
f0108b76:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f0108b79:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b7c:	83 e0 04             	and    $0x4,%eax
f0108b7f:	83 c8 02             	or     $0x2,%eax
f0108b82:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108b85:	83 ec 0c             	sub    $0xc,%esp
f0108b88:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108b8b:	50                   	push   %eax
f0108b8c:	e8 61 dd ff ff       	call   f01068f2 <allocate_frame>
f0108b91:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f0108b94:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108b97:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b9a:	52                   	push   %edx
f0108b9b:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b9e:	50                   	push   %eax
f0108b9f:	ff 75 08             	pushl  0x8(%ebp)
f0108ba2:	e8 9a e1 ff ff       	call   f0106d41 <map_frame>
f0108ba7:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f0108baa:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108bb1:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108bb8:	8b 55 10             	mov    0x10(%ebp),%edx
f0108bbb:	8b 45 14             	mov    0x14(%ebp),%eax
f0108bbe:	01 d0                	add    %edx,%eax
f0108bc0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108bc3:	0f 87 1e ff ff ff    	ja     f0108ae7 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f0108bc9:	8b 45 10             	mov    0x10(%ebp),%eax
f0108bcc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f0108bcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bd2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bd8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108bdb:	eb 16                	jmp    f0108bf3 <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108bdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108be0:	8b 10                	mov    (%eax),%edx
f0108be2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108be5:	89 10                	mov    %edx,(%eax)
	    frame++;
f0108be7:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108beb:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108bef:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f0108bf3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108bf6:	8b 45 14             	mov    0x14(%ebp),%eax
f0108bf9:	01 d0                	add    %edx,%eax
f0108bfb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108bfe:	77 dd                	ja     f0108bdd <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f0108c00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108c05:	c9                   	leave  
f0108c06:	c3                   	ret    

f0108c07 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108c07:	55                   	push   %ebp
f0108c08:	89 e5                	mov    %esp,%ebp
f0108c0a:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108c0d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f0108c14:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c17:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108c1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c1d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c22:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f0108c25:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0108c2c:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c2f:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c32:	01 c2                	add    %eax,%edx
f0108c34:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108c37:	01 d0                	add    %edx,%eax
f0108c39:	48                   	dec    %eax
f0108c3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108c3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c40:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c45:	f7 75 e8             	divl   -0x18(%ebp)
f0108c48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c4b:	29 d0                	sub    %edx,%eax
f0108c4d:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108c50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108c53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108c56:	e9 ac 00 00 00       	jmp    f0108d07 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f0108c5b:	83 ec 04             	sub    $0x4,%esp
f0108c5e:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108c61:	50                   	push   %eax
f0108c62:	ff 75 f4             	pushl  -0xc(%ebp)
f0108c65:	ff 75 08             	pushl  0x8(%ebp)
f0108c68:	e8 44 de ff ff       	call   f0106ab1 <get_page_table>
f0108c6d:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f0108c70:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108c73:	85 c0                	test   %eax,%eax
f0108c75:	75 14                	jne    f0108c8b <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f0108c77:	83 ec 08             	sub    $0x8,%esp
f0108c7a:	ff 75 f4             	pushl  -0xc(%ebp)
f0108c7d:	ff 75 08             	pushl  0x8(%ebp)
f0108c80:	e8 82 df ff ff       	call   f0106c07 <create_page_table>
f0108c85:	83 c4 10             	add    $0x10,%esp
f0108c88:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108c8b:	83 ec 04             	sub    $0x4,%esp
f0108c8e:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108c91:	50                   	push   %eax
f0108c92:	ff 75 f4             	pushl  -0xc(%ebp)
f0108c95:	ff 75 08             	pushl  0x8(%ebp)
f0108c98:	e8 69 e1 ff ff       	call   f0106e06 <get_frame_info>
f0108c9d:	83 c4 10             	add    $0x10,%esp
f0108ca0:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108ca3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108ca7:	74 07                	je     f0108cb0 <share_chunk+0xa9>
           return -1;
f0108ca9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108cae:	eb 68                	jmp    f0108d18 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108cb0:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108cb7:	83 ec 04             	sub    $0x4,%esp
f0108cba:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108cbd:	50                   	push   %eax
f0108cbe:	ff 75 0c             	pushl  0xc(%ebp)
f0108cc1:	ff 75 08             	pushl  0x8(%ebp)
f0108cc4:	e8 e8 dd ff ff       	call   f0106ab1 <get_page_table>
f0108cc9:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108ccc:	83 ec 04             	sub    $0x4,%esp
f0108ccf:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108cd2:	50                   	push   %eax
f0108cd3:	ff 75 0c             	pushl  0xc(%ebp)
f0108cd6:	ff 75 08             	pushl  0x8(%ebp)
f0108cd9:	e8 28 e1 ff ff       	call   f0106e06 <get_frame_info>
f0108cde:	83 c4 10             	add    $0x10,%esp
f0108ce1:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108ce4:	8b 45 18             	mov    0x18(%ebp),%eax
f0108ce7:	50                   	push   %eax
f0108ce8:	ff 75 f4             	pushl  -0xc(%ebp)
f0108ceb:	ff 75 d8             	pushl  -0x28(%ebp)
f0108cee:	ff 75 08             	pushl  0x8(%ebp)
f0108cf1:	e8 4b e0 ff ff       	call   f0106d41 <map_frame>
f0108cf6:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108cf9:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108d00:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108d07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d0a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108d0d:	0f 82 48 ff ff ff    	jb     f0108c5b <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108d13:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108d18:	c9                   	leave  
f0108d19:	c3                   	ret    

f0108d1a <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108d1a:	55                   	push   %ebp
f0108d1b:	89 e5                	mov    %esp,%ebp
f0108d1d:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108d20:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108d27:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d2a:	8b 45 10             	mov    0x10(%ebp),%eax
f0108d2d:	01 d0                	add    %edx,%eax
f0108d2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108d32:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108d39:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108d40:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108d47:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108d4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d51:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108d54:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108d57:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108d5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108d5f:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108d66:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108d69:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108d6c:	01 d0                	add    %edx,%eax
f0108d6e:	48                   	dec    %eax
f0108d6f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108d72:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108d75:	ba 00 00 00 00       	mov    $0x0,%edx
f0108d7a:	f7 75 dc             	divl   -0x24(%ebp)
f0108d7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108d80:	29 d0                	sub    %edx,%eax
f0108d82:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108d85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d88:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108d8b:	e9 9d 00 00 00       	jmp    f0108e2d <allocate_chunk+0x113>
	{
		new_virtual_address=count;
f0108d90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d93:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108d96:	83 ec 04             	sub    $0x4,%esp
f0108d99:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108d9c:	50                   	push   %eax
f0108d9d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108da0:	ff 75 08             	pushl  0x8(%ebp)
f0108da3:	e8 09 dd ff ff       	call   f0106ab1 <get_page_table>
f0108da8:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108dab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108dae:	85 c0                	test   %eax,%eax
f0108db0:	75 14                	jne    f0108dc6 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108db2:	83 ec 08             	sub    $0x8,%esp
f0108db5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108db8:	ff 75 08             	pushl  0x8(%ebp)
f0108dbb:	e8 47 de ff ff       	call   f0106c07 <create_page_table>
f0108dc0:	83 c4 10             	add    $0x10,%esp
f0108dc3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108dc6:	83 ec 04             	sub    $0x4,%esp
f0108dc9:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108dcc:	50                   	push   %eax
f0108dcd:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108dd0:	ff 75 08             	pushl  0x8(%ebp)
f0108dd3:	e8 2e e0 ff ff       	call   f0106e06 <get_frame_info>
f0108dd8:	83 c4 10             	add    $0x10,%esp
f0108ddb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108dde:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108de1:	85 c0                	test   %eax,%eax
f0108de3:	74 07                	je     f0108dec <allocate_chunk+0xd2>
		{
			return -1;
f0108de5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108dea:	eb 52                	jmp    f0108e3e <allocate_chunk+0x124>
		}
	    result= allocate_frame(&sb_chunck);
f0108dec:	83 ec 0c             	sub    $0xc,%esp
f0108def:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108df2:	50                   	push   %eax
f0108df3:	e8 fa da ff ff       	call   f01068f2 <allocate_frame>
f0108df8:	83 c4 10             	add    $0x10,%esp
f0108dfb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108dfe:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108e02:	74 22                	je     f0108e26 <allocate_chunk+0x10c>
		{
			sb_chunck->va = new_virtual_address;
f0108e04:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108e07:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108e0a:	89 50 0c             	mov    %edx,0xc(%eax)
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108e0d:	8b 55 14             	mov    0x14(%ebp),%edx
f0108e10:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108e13:	52                   	push   %edx
f0108e14:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108e17:	50                   	push   %eax
f0108e18:	ff 75 08             	pushl  0x8(%ebp)
f0108e1b:	e8 21 df ff ff       	call   f0106d41 <map_frame>
f0108e20:	83 c4 10             	add    $0x10,%esp
f0108e23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108e26:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e30:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108e33:	0f 82 57 ff ff ff    	jb     f0108d90 <allocate_chunk+0x76>
		{
			sb_chunck->va = new_virtual_address;
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108e39:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108e3e:	c9                   	leave  
f0108e3f:	c3                   	ret    

f0108e40 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108e40:	55                   	push   %ebp
f0108e41:	89 e5                	mov    %esp,%ebp
f0108e43:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e49:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108e4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e4f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108e57:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e5a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108e5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108e60:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 end_address = ROUNDUP(eva, PAGE_SIZE);
f0108e68:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108e6f:	8b 55 10             	mov    0x10(%ebp),%edx
f0108e72:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108e75:	01 d0                	add    %edx,%eax
f0108e77:	48                   	dec    %eax
f0108e78:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108e7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108e83:	f7 75 e0             	divl   -0x20(%ebp)
f0108e86:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e89:	29 d0                	sub    %edx,%eax
f0108e8b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 size = end_address - start_address;
f0108e8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e91:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0108e94:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 check = 0;
f0108e97:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	do
		{
			if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ea1:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108ea6:	85 c0                	test   %eax,%eax
f0108ea8:	75 37                	jne    f0108ee1 <calculate_allocated_space+0xa1>
			{
				uint32 *ptr_page_table = NULL;
f0108eaa:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
				get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108eb1:	83 ec 04             	sub    $0x4,%esp
f0108eb4:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108eb7:	50                   	push   %eax
f0108eb8:	ff 75 f4             	pushl  -0xc(%ebp)
f0108ebb:	ff 75 08             	pushl  0x8(%ebp)
f0108ebe:	e8 ee db ff ff       	call   f0106ab1 <get_page_table>
f0108ec3:	83 c4 10             	add    $0x10,%esp
				if(ptr_page_table != NULL)
f0108ec6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108ec9:	85 c0                	test   %eax,%eax
f0108ecb:	74 14                	je     f0108ee1 <calculate_allocated_space+0xa1>
				{
					(*num_tables)++;
f0108ecd:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ed0:	8b 00                	mov    (%eax),%eax
f0108ed2:	8d 50 01             	lea    0x1(%eax),%edx
f0108ed5:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ed8:	89 10                	mov    %edx,(%eax)
					check = 1;
f0108eda:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				}
			}
			if(check == 1)
f0108ee1:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f0108ee5:	75 2d                	jne    f0108f14 <calculate_allocated_space+0xd4>
			{
				uint32 *ptr_page = NULL;
f0108ee7:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				if (get_frame_info(page_directory, start_address, &ptr_page) != 0)
f0108eee:	83 ec 04             	sub    $0x4,%esp
f0108ef1:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108ef4:	50                   	push   %eax
f0108ef5:	ff 75 f0             	pushl  -0x10(%ebp)
f0108ef8:	ff 75 08             	pushl  0x8(%ebp)
f0108efb:	e8 06 df ff ff       	call   f0106e06 <get_frame_info>
f0108f00:	83 c4 10             	add    $0x10,%esp
f0108f03:	85 c0                	test   %eax,%eax
f0108f05:	74 0d                	je     f0108f14 <calculate_allocated_space+0xd4>
					(*num_pages)++;
f0108f07:	8b 45 18             	mov    0x18(%ebp),%eax
f0108f0a:	8b 00                	mov    (%eax),%eax
f0108f0c:	8d 50 01             	lea    0x1(%eax),%edx
f0108f0f:	8b 45 18             	mov    0x18(%ebp),%eax
f0108f12:	89 10                	mov    %edx,(%eax)
			}
			start_address += PAGE_SIZE;
f0108f14:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
			start_address_pt = start_address;
f0108f1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		} while (start_address < sva+size);
f0108f21:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108f27:	01 d0                	add    %edx,%eax
f0108f29:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108f2c:	0f 87 6c ff ff ff    	ja     f0108e9e <calculate_allocated_space+0x5e>
}
f0108f32:	90                   	nop
f0108f33:	c9                   	leave  
f0108f34:	c3                   	ret    

f0108f35 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108f35:	55                   	push   %ebp
f0108f36:	89 e5                	mov    %esp,%ebp
f0108f38:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");
	uint32 number_of_tables = 0;
f0108f3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 number_of_pages = 0;
f0108f42:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 start_address_pt = ROUNDDOWN(sva, PAGE_SIZE*1024);
f0108f49:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f4c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f52:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108f57:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 start_address = ROUNDDOWN(sva, PAGE_SIZE);
f0108f5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f5d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108f60:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108f63:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f68:	89 45 e8             	mov    %eax,-0x18(%ebp)
	do
	{
		if(start_address_pt %(PAGE_SIZE*1024) == 0)
f0108f6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108f6e:	25 ff ff 3f 00       	and    $0x3fffff,%eax
f0108f73:	85 c0                	test   %eax,%eax
f0108f75:	75 26                	jne    f0108f9d <calculate_required_frames+0x68>
		{
			uint32 *ptr_page_table = NULL;
f0108f77:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			get_page_table(page_directory, start_address_pt, &ptr_page_table);
f0108f7e:	83 ec 04             	sub    $0x4,%esp
f0108f81:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108f84:	50                   	push   %eax
f0108f85:	ff 75 ec             	pushl  -0x14(%ebp)
f0108f88:	ff 75 08             	pushl  0x8(%ebp)
f0108f8b:	e8 21 db ff ff       	call   f0106ab1 <get_page_table>
f0108f90:	83 c4 10             	add    $0x10,%esp
			if(ptr_page_table == NULL)
f0108f93:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108f96:	85 c0                	test   %eax,%eax
f0108f98:	75 03                	jne    f0108f9d <calculate_required_frames+0x68>
				number_of_tables++;
f0108f9a:	ff 45 f4             	incl   -0xc(%ebp)
		}
		uint32 *ptr_page = NULL;
f0108f9d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	    if (get_frame_info(page_directory, start_address, &ptr_page) == 0)
f0108fa4:	83 ec 04             	sub    $0x4,%esp
f0108fa7:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0108faa:	50                   	push   %eax
f0108fab:	ff 75 e8             	pushl  -0x18(%ebp)
f0108fae:	ff 75 08             	pushl  0x8(%ebp)
f0108fb1:	e8 50 de ff ff       	call   f0106e06 <get_frame_info>
f0108fb6:	83 c4 10             	add    $0x10,%esp
f0108fb9:	85 c0                	test   %eax,%eax
f0108fbb:	75 03                	jne    f0108fc0 <calculate_required_frames+0x8b>
			number_of_pages++;
f0108fbd:	ff 45 f0             	incl   -0x10(%ebp)

	    start_address += PAGE_SIZE;
f0108fc0:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
	    start_address_pt = start_address;
f0108fc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108fca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	} while (start_address < sva+size);
f0108fcd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108fd0:	8b 45 10             	mov    0x10(%ebp),%eax
f0108fd3:	01 d0                	add    %edx,%eax
f0108fd5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108fd8:	77 91                	ja     f0108f6b <calculate_required_frames+0x36>
	return number_of_tables + number_of_pages;
f0108fda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108fdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108fe0:	01 d0                	add    %edx,%eax
}
f0108fe2:	c9                   	leave  
f0108fe3:	c3                   	ret    

f0108fe4 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108fe4:	55                   	push   %ebp
f0108fe5:	89 e5                	mov    %esp,%ebp
f0108fe7:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108fea:	83 ec 04             	sub    $0x4,%esp
f0108fed:	68 04 68 13 f0       	push   $0xf0136804
f0108ff2:	68 25 01 00 00       	push   $0x125
f0108ff7:	68 34 68 13 f0       	push   $0xf0136834
f0108ffc:	e8 04 72 ff ff       	call   f0100205 <_panic>

f0109001 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109001:	55                   	push   %ebp
f0109002:	89 e5                	mov    %esp,%ebp
f0109004:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0109007:	83 ec 04             	sub    $0x4,%esp
f010900a:	68 50 68 13 f0       	push   $0xf0136850
f010900f:	68 2f 01 00 00       	push   $0x12f
f0109014:	68 34 68 13 f0       	push   $0xf0136834
f0109019:	e8 e7 71 ff ff       	call   f0100205 <_panic>

f010901e <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f010901e:	55                   	push   %ebp
f010901f:	89 e5                	mov    %esp,%ebp
f0109021:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0109024:	83 ec 04             	sub    $0x4,%esp
f0109027:	68 7c 68 13 f0       	push   $0xf013687c
f010902c:	68 3d 01 00 00       	push   $0x13d
f0109031:	68 34 68 13 f0       	push   $0xf0136834
f0109036:	e8 ca 71 ff ff       	call   f0100205 <_panic>

f010903b <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010903b:	55                   	push   %ebp
f010903c:	89 e5                	mov    %esp,%ebp
f010903e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109041:	83 ec 04             	sub    $0x4,%esp
f0109044:	68 bc 68 13 f0       	push   $0xf01368bc
f0109049:	68 4d 01 00 00       	push   $0x14d
f010904e:	68 34 68 13 f0       	push   $0xf0136834
f0109053:	e8 ad 71 ff ff       	call   f0100205 <_panic>

f0109058 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109058:	55                   	push   %ebp
f0109059:	89 e5                	mov    %esp,%ebp
f010905b:	57                   	push   %edi
f010905c:	56                   	push   %esi
f010905d:	53                   	push   %ebx
f010905e:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109064:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f010906b:	83 ec 0c             	sub    $0xc,%esp
f010906e:	ff 75 08             	pushl  0x8(%ebp)
f0109071:	e8 0b 22 00 00       	call   f010b281 <get_user_program_info>
f0109076:	83 c4 10             	add    $0x10,%esp
f0109079:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f010907c:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109080:	75 0a                	jne    f010908c <env_create+0x34>
f0109082:	b8 00 00 00 00       	mov    $0x0,%eax
f0109087:	e9 cd 0b 00 00       	jmp    f0109c59 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f010908c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010908f:	8b 40 08             	mov    0x8(%eax),%eax
f0109092:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0109095:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f010909c:	00 00 00 
	if(allocate_environment(&e) < 0)
f010909f:	83 ec 0c             	sub    $0xc,%esp
f01090a2:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f01090a8:	50                   	push   %eax
f01090a9:	e8 d3 0e 00 00       	call   f0109f81 <allocate_environment>
f01090ae:	83 c4 10             	add    $0x10,%esp
f01090b1:	85 c0                	test   %eax,%eax
f01090b3:	79 0a                	jns    f01090bf <env_create+0x67>
	{
		return 0;
f01090b5:	b8 00 00 00 00       	mov    $0x0,%eax
f01090ba:	e9 9a 0b 00 00       	jmp    f0109c59 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01090bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01090c2:	8b 00                	mov    (%eax),%eax
f01090c4:	83 ec 0c             	sub    $0xc,%esp
f01090c7:	50                   	push   %eax
f01090c8:	e8 c0 83 02 00       	call   f013148d <strlen>
f01090cd:	83 c4 10             	add    $0x10,%esp
f01090d0:	83 f8 3f             	cmp    $0x3f,%eax
f01090d3:	7f 20                	jg     f01090f5 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01090d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01090d8:	8b 00                	mov    (%eax),%eax
f01090da:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01090e0:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01090e6:	83 ec 08             	sub    $0x8,%esp
f01090e9:	50                   	push   %eax
f01090ea:	52                   	push   %edx
f01090eb:	e8 ec 83 02 00       	call   f01314dc <strcpy>
f01090f0:	83 c4 10             	add    $0x10,%esp
f01090f3:	eb 20                	jmp    f0109115 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f01090f5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01090f8:	8b 00                	mov    (%eax),%eax
f01090fa:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109100:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0109106:	83 ec 04             	sub    $0x4,%esp
f0109109:	6a 3f                	push   $0x3f
f010910b:	50                   	push   %eax
f010910c:	52                   	push   %edx
f010910d:	e8 f8 83 02 00       	call   f013150a <strncpy>
f0109112:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0109115:	e8 6d 0f 00 00       	call   f010a087 <create_user_directory>
f010911a:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f010911d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109120:	83 ec 0c             	sub    $0xc,%esp
f0109123:	50                   	push   %eax
f0109124:	e8 6f eb ff ff       	call   f0107c98 <kheap_physical_address>
f0109129:	83 c4 10             	add    $0x10,%esp
f010912c:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f010912f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109135:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109138:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010913b:	83 ec 0c             	sub    $0xc,%esp
f010913e:	6a 02                	push   $0x2
f0109140:	e8 f2 4d 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f0109145:	83 c4 10             	add    $0x10,%esp
f0109148:	85 c0                	test   %eax,%eax
f010914a:	74 21                	je     f010916d <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f010914c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109152:	8b 55 10             	mov    0x10(%ebp),%edx
f0109155:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f010915b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109161:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109164:	2b 55 10             	sub    0x10(%ebp),%edx
f0109167:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f010916d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109171:	75 12                	jne    f0109185 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109173:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109179:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0109180:	00 00 00 
f0109183:	eb 0f                	jmp    f0109194 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0109185:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010918b:	8b 55 14             	mov    0x14(%ebp),%edx
f010918e:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0109194:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010919a:	83 ec 04             	sub    $0x4,%esp
f010919d:	ff 75 ac             	pushl  -0x54(%ebp)
f01091a0:	ff 75 b0             	pushl  -0x50(%ebp)
f01091a3:	50                   	push   %eax
f01091a4:	e8 fa 15 00 00       	call   f010a7a3 <initialize_environment>
f01091a9:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01091ac:	0f 20 d8             	mov    %cr3,%eax
f01091af:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f01091b2:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f01091b5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f01091b8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091be:	8b 40 60             	mov    0x60(%eax),%eax
f01091c1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01091c7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01091cd:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f01091d0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f01091d7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f01091de:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091e4:	8b 40 74             	mov    0x74(%eax),%eax
f01091e7:	48                   	dec    %eax
f01091e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f01091eb:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f01091f2:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01091f5:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f01091fb:	83 ec 08             	sub    $0x8,%esp
f01091fe:	ff 75 b8             	pushl  -0x48(%ebp)
f0109201:	50                   	push   %eax
f0109202:	e8 af 1d 00 00       	call   f010afb6 <PROGRAM_SEGMENT_FIRST>
f0109207:	83 c4 0c             	add    $0xc,%esp
f010920a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109210:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0109216:	b9 05 00 00 00       	mov    $0x5,%ecx
f010921b:	89 c7                	mov    %eax,%edi
f010921d:	89 d6                	mov    %edx,%esi
f010921f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109221:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109227:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010922a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010922d:	8b 40 10             	mov    0x10(%eax),%eax
f0109230:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109233:	75 07                	jne    f010923c <env_create+0x1e4>
f0109235:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010923c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010923f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109242:	e9 15 03 00 00       	jmp    f010955c <env_create+0x504>
	{
		segment_counter++;
f0109247:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f010924a:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0109251:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109254:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010925a:	83 ec 0c             	sub    $0xc,%esp
f010925d:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0109263:	52                   	push   %edx
f0109264:	ff 75 dc             	pushl  -0x24(%ebp)
f0109267:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f010926d:	52                   	push   %edx
f010926e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109271:	50                   	push   %eax
f0109272:	e8 4b 0e 00 00       	call   f010a0c2 <program_segment_alloc_map_copy_workingset>
f0109277:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f010927a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0109280:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109283:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109286:	8b 00                	mov    (%eax),%eax
f0109288:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f010928b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010928e:	8b 40 0c             	mov    0xc(%eax),%eax
f0109291:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0109294:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109297:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010929a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010929d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01092a2:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01092a5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01092ac:	8b 55 98             	mov    -0x68(%ebp),%edx
f01092af:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01092b2:	01 d0                	add    %edx,%eax
f01092b4:	48                   	dec    %eax
f01092b5:	89 45 88             	mov    %eax,-0x78(%ebp)
f01092b8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01092bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01092c0:	f7 75 8c             	divl   -0x74(%ebp)
f01092c3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01092c6:	29 d0                	sub    %edx,%eax
f01092c8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01092cb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01092ce:	2b 45 90             	sub    -0x70(%ebp),%eax
f01092d1:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01092d4:	a1 84 1d 88 f0       	mov    0xf0881d84,%eax
f01092d9:	83 ec 04             	sub    $0x4,%esp
f01092dc:	68 00 10 00 00       	push   $0x1000
f01092e1:	6a 00                	push   $0x0
f01092e3:	50                   	push   %eax
f01092e4:	e8 92 83 02 00       	call   f013167b <memset>
f01092e9:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01092ec:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01092ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f01092f2:	8b 15 84 1d 88 f0    	mov    0xf0881d84,%edx
f01092f8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01092fb:	01 d0                	add    %edx,%eax
f01092fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109300:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109303:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109306:	eb 13                	jmp    f010931b <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0109308:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010930b:	8a 10                	mov    (%eax),%dl
f010930d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109310:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109312:	ff 45 cc             	incl   -0x34(%ebp)
f0109315:	ff 45 d4             	incl   -0x2c(%ebp)
f0109318:	ff 45 d0             	incl   -0x30(%ebp)
f010931b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010931e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0109321:	72 e5                	jb     f0109308 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109323:	8b 15 84 1d 88 f0    	mov    0xf0881d84,%edx
f0109329:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010932f:	83 ec 04             	sub    $0x4,%esp
f0109332:	52                   	push   %edx
f0109333:	ff 75 90             	pushl  -0x70(%ebp)
f0109336:	50                   	push   %eax
f0109337:	e8 d9 a3 ff ff       	call   f0103715 <pf_add_env_page>
f010933c:	83 c4 10             	add    $0x10,%esp
f010933f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109342:	75 17                	jne    f010935b <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109344:	83 ec 04             	sub    $0x4,%esp
f0109347:	68 e8 68 13 f0       	push   $0xf01368e8
f010934c:	68 e1 00 00 00       	push   $0xe1
f0109351:	68 2d 69 13 f0       	push   $0xf013692d
f0109356:	e8 aa 6e ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f010935b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010935e:	8b 50 04             	mov    0x4(%eax),%edx
f0109361:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109364:	01 d0                	add    %edx,%eax
f0109366:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010936c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109372:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109377:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010937d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109380:	8b 50 04             	mov    0x4(%eax),%edx
f0109383:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109386:	01 d0                	add    %edx,%eax
f0109388:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010938e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109391:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109394:	eb 43                	jmp    f01093d9 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109396:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109399:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010939f:	83 ec 04             	sub    $0x4,%esp
f01093a2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01093a5:	52                   	push   %edx
f01093a6:	50                   	push   %eax
f01093a7:	e8 69 a3 ff ff       	call   f0103715 <pf_add_env_page>
f01093ac:	83 c4 10             	add    $0x10,%esp
f01093af:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01093b2:	75 17                	jne    f01093cb <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01093b4:	83 ec 04             	sub    $0x4,%esp
f01093b7:	68 e8 68 13 f0       	push   $0xf01368e8
f01093bc:	68 ee 00 00 00       	push   $0xee
f01093c1:	68 2d 69 13 f0       	push   $0xf013692d
f01093c6:	e8 3a 6e ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01093cb:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01093d2:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01093d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01093dc:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01093e2:	72 b2                	jb     f0109396 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01093e4:	a1 84 1d 88 f0       	mov    0xf0881d84,%eax
f01093e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01093ec:	83 ec 04             	sub    $0x4,%esp
f01093ef:	68 00 10 00 00       	push   $0x1000
f01093f4:	6a 00                	push   $0x0
f01093f6:	ff 75 d0             	pushl  -0x30(%ebp)
f01093f9:	e8 7d 82 02 00       	call   f013167b <memset>
f01093fe:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109401:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109407:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010940a:	eb 13                	jmp    f010941f <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f010940c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010940f:	8a 10                	mov    (%eax),%dl
f0109411:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109414:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109416:	ff 45 cc             	incl   -0x34(%ebp)
f0109419:	ff 45 d4             	incl   -0x2c(%ebp)
f010941c:	ff 45 d0             	incl   -0x30(%ebp)
f010941f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109422:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109428:	72 e2                	jb     f010940c <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010942a:	8b 15 84 1d 88 f0    	mov    0xf0881d84,%edx
f0109430:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109436:	83 ec 04             	sub    $0x4,%esp
f0109439:	52                   	push   %edx
f010943a:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109440:	50                   	push   %eax
f0109441:	e8 cf a2 ff ff       	call   f0103715 <pf_add_env_page>
f0109446:	83 c4 10             	add    $0x10,%esp
f0109449:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010944c:	75 17                	jne    f0109465 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010944e:	83 ec 04             	sub    $0x4,%esp
f0109451:	68 e8 68 13 f0       	push   $0xf01368e8
f0109456:	68 fd 00 00 00       	push   $0xfd
f010945b:	68 2d 69 13 f0       	push   $0xf013692d
f0109460:	e8 a0 6d ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109465:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010946c:	10 00 00 
f010946f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109472:	8b 50 04             	mov    0x4(%eax),%edx
f0109475:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109478:	01 c2                	add    %eax,%edx
f010947a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109480:	01 d0                	add    %edx,%eax
f0109482:	48                   	dec    %eax
f0109483:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109489:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010948f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109494:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010949a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01094a0:	29 d0                	sub    %edx,%eax
f01094a2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01094a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01094a8:	8b 50 08             	mov    0x8(%eax),%edx
f01094ab:	8b 45 98             	mov    -0x68(%ebp),%eax
f01094ae:	01 d0                	add    %edx,%eax
f01094b0:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01094b3:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01094b9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01094c0:	eb 41                	jmp    f0109503 <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01094c2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094c8:	83 ec 04             	sub    $0x4,%esp
f01094cb:	6a 01                	push   $0x1
f01094cd:	ff 75 c8             	pushl  -0x38(%ebp)
f01094d0:	50                   	push   %eax
f01094d1:	e8 0e a1 ff ff       	call   f01035e4 <pf_add_empty_env_page>
f01094d6:	83 c4 10             	add    $0x10,%esp
f01094d9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01094dc:	75 17                	jne    f01094f5 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01094de:	83 ec 04             	sub    $0x4,%esp
f01094e1:	68 e8 68 13 f0       	push   $0xf01368e8
f01094e6:	68 0a 01 00 00       	push   $0x10a
f01094eb:	68 2d 69 13 f0       	push   $0xf013692d
f01094f0:	e8 10 6d ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01094f5:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01094fc:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109503:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010950a:	10 00 00 
f010950d:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f0109513:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109519:	01 d0                	add    %edx,%eax
f010951b:	48                   	dec    %eax
f010951c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0109522:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109528:	ba 00 00 00 00       	mov    $0x0,%edx
f010952d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0109533:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109539:	29 d0                	sub    %edx,%eax
f010953b:	89 c2                	mov    %eax,%edx
f010953d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109540:	39 c2                	cmp    %eax,%edx
f0109542:	0f 87 7a ff ff ff    	ja     f01094c2 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109548:	83 ec 08             	sub    $0x8,%esp
f010954b:	ff 75 b8             	pushl  -0x48(%ebp)
f010954e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109551:	e8 55 19 00 00       	call   f010aeab <PROGRAM_SEGMENT_NEXT>
f0109556:	83 c4 10             	add    $0x10,%esp
f0109559:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010955c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109560:	0f 85 e1 fc ff ff    	jne    f0109247 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109566:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010956d:	e9 9d 00 00 00       	jmp    f010960f <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109572:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109578:	8b 48 78             	mov    0x78(%eax),%ecx
f010957b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010957e:	89 d0                	mov    %edx,%eax
f0109580:	01 c0                	add    %eax,%eax
f0109582:	01 d0                	add    %edx,%eax
f0109584:	c1 e0 03             	shl    $0x3,%eax
f0109587:	01 c8                	add    %ecx,%eax
f0109589:	8a 40 04             	mov    0x4(%eax),%al
f010958c:	84 c0                	test   %al,%al
f010958e:	75 7c                	jne    f010960c <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109590:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109596:	8b 48 78             	mov    0x78(%eax),%ecx
f0109599:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010959c:	89 d0                	mov    %edx,%eax
f010959e:	01 c0                	add    %eax,%eax
f01095a0:	01 d0                	add    %edx,%eax
f01095a2:	c1 e0 03             	shl    $0x3,%eax
f01095a5:	01 c8                	add    %ecx,%eax
f01095a7:	8b 00                	mov    (%eax),%eax
f01095a9:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01095af:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01095b8:	83 ec 04             	sub    $0x4,%esp
f01095bb:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01095c1:	52                   	push   %edx
f01095c2:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01095c8:	50                   	push   %eax
f01095c9:	e8 e3 d4 ff ff       	call   f0106ab1 <get_page_table>
f01095ce:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01095d1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01095d7:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01095dd:	c1 ea 0c             	shr    $0xc,%edx
f01095e0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01095e6:	c1 e2 02             	shl    $0x2,%edx
f01095e9:	01 d0                	add    %edx,%eax
f01095eb:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01095f1:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f01095f7:	c1 e9 0c             	shr    $0xc,%ecx
f01095fa:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109600:	c1 e1 02             	shl    $0x2,%ecx
f0109603:	01 ca                	add    %ecx,%edx
f0109605:	8b 12                	mov    (%edx),%edx
f0109607:	83 e2 bf             	and    $0xffffffbf,%edx
f010960a:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f010960c:	ff 45 c4             	incl   -0x3c(%ebp)
f010960f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109615:	8b 50 74             	mov    0x74(%eax),%edx
f0109618:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010961b:	39 c2                	cmp    %eax,%edx
f010961d:	0f 87 4f ff ff ff    	ja     f0109572 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109623:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109626:	8b 50 08             	mov    0x8(%eax),%edx
f0109629:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010962f:	83 ec 08             	sub    $0x8,%esp
f0109632:	52                   	push   %edx
f0109633:	50                   	push   %eax
f0109634:	e8 bc 16 00 00       	call   f010acf5 <set_environment_entry_point>
f0109639:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010963c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109642:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109649:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010964c:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f0109653:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109656:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010965d:	e9 53 05 00 00       	jmp    f0109bb5 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109662:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109669:	00 00 00 
		allocate_frame(&pp);
f010966c:	83 ec 0c             	sub    $0xc,%esp
f010966f:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109675:	50                   	push   %eax
f0109676:	e8 77 d2 ff ff       	call   f01068f2 <allocate_frame>
f010967b:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010967e:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0109684:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010968a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010968d:	6a 06                	push   $0x6
f010968f:	ff 75 c0             	pushl  -0x40(%ebp)
f0109692:	52                   	push   %edx
f0109693:	50                   	push   %eax
f0109694:	e8 64 d8 ff ff       	call   f0106efd <loadtime_map_frame>
f0109699:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010969c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010969f:	83 ec 04             	sub    $0x4,%esp
f01096a2:	68 00 10 00 00       	push   $0x1000
f01096a7:	6a 00                	push   $0x0
f01096a9:	50                   	push   %eax
f01096aa:	e8 cc 7f 02 00       	call   f013167b <memset>
f01096af:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01096b2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096b8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01096be:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096c4:	83 ec 04             	sub    $0x4,%esp
f01096c7:	ff 75 c0             	pushl  -0x40(%ebp)
f01096ca:	52                   	push   %edx
f01096cb:	50                   	push   %eax
f01096cc:	e8 ee e9 ff ff       	call   f01080bf <env_page_ws_set_entry>
f01096d1:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01096d4:	83 ec 0c             	sub    $0xc,%esp
f01096d7:	6a 02                	push   $0x2
f01096d9:	e8 59 48 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f01096de:	83 c4 10             	add    $0x10,%esp
f01096e1:	85 c0                	test   %eax,%eax
f01096e3:	0f 84 6b 04 00 00    	je     f0109b54 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01096e9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096ef:	8b 48 78             	mov    0x78(%eax),%ecx
f01096f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096f8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01096fe:	89 d0                	mov    %edx,%eax
f0109700:	01 c0                	add    %eax,%eax
f0109702:	01 d0                	add    %edx,%eax
f0109704:	c1 e0 03             	shl    $0x3,%eax
f0109707:	01 c8                	add    %ecx,%eax
f0109709:	85 c0                	test   %eax,%eax
f010970b:	75 17                	jne    f0109724 <env_create+0x6cc>
f010970d:	83 ec 04             	sub    $0x4,%esp
f0109710:	68 4a 69 13 f0       	push   $0xf013694a
f0109715:	68 41 01 00 00       	push   $0x141
f010971a:	68 2d 69 13 f0       	push   $0xf013692d
f010971f:	e8 e1 6a ff ff       	call   f0100205 <_panic>
f0109724:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010972a:	8b 48 78             	mov    0x78(%eax),%ecx
f010972d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109733:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109739:	89 d0                	mov    %edx,%eax
f010973b:	01 c0                	add    %eax,%eax
f010973d:	01 d0                	add    %edx,%eax
f010973f:	c1 e0 03             	shl    $0x3,%eax
f0109742:	01 c8                	add    %ecx,%eax
f0109744:	8b 40 10             	mov    0x10(%eax),%eax
f0109747:	85 c0                	test   %eax,%eax
f0109749:	74 4b                	je     f0109796 <env_create+0x73e>
f010974b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109751:	8b 48 78             	mov    0x78(%eax),%ecx
f0109754:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010975a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109760:	89 d0                	mov    %edx,%eax
f0109762:	01 c0                	add    %eax,%eax
f0109764:	01 d0                	add    %edx,%eax
f0109766:	c1 e0 03             	shl    $0x3,%eax
f0109769:	01 c8                	add    %ecx,%eax
f010976b:	8b 50 10             	mov    0x10(%eax),%edx
f010976e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109774:	8b 58 78             	mov    0x78(%eax),%ebx
f0109777:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010977d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109783:	89 c8                	mov    %ecx,%eax
f0109785:	01 c0                	add    %eax,%eax
f0109787:	01 c8                	add    %ecx,%eax
f0109789:	c1 e0 03             	shl    $0x3,%eax
f010978c:	01 d8                	add    %ebx,%eax
f010978e:	8b 40 14             	mov    0x14(%eax),%eax
f0109791:	89 42 14             	mov    %eax,0x14(%edx)
f0109794:	eb 2f                	jmp    f01097c5 <env_create+0x76d>
f0109796:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010979c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097a2:	8b 58 78             	mov    0x78(%eax),%ebx
f01097a5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097ab:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01097b1:	89 c8                	mov    %ecx,%eax
f01097b3:	01 c0                	add    %eax,%eax
f01097b5:	01 c8                	add    %ecx,%eax
f01097b7:	c1 e0 03             	shl    $0x3,%eax
f01097ba:	01 d8                	add    %ebx,%eax
f01097bc:	8b 40 14             	mov    0x14(%eax),%eax
f01097bf:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01097c5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097cb:	8b 48 78             	mov    0x78(%eax),%ecx
f01097ce:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097d4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01097da:	89 d0                	mov    %edx,%eax
f01097dc:	01 c0                	add    %eax,%eax
f01097de:	01 d0                	add    %edx,%eax
f01097e0:	c1 e0 03             	shl    $0x3,%eax
f01097e3:	01 c8                	add    %ecx,%eax
f01097e5:	8b 40 14             	mov    0x14(%eax),%eax
f01097e8:	85 c0                	test   %eax,%eax
f01097ea:	74 4b                	je     f0109837 <env_create+0x7df>
f01097ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097f2:	8b 48 78             	mov    0x78(%eax),%ecx
f01097f5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097fb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109801:	89 d0                	mov    %edx,%eax
f0109803:	01 c0                	add    %eax,%eax
f0109805:	01 d0                	add    %edx,%eax
f0109807:	c1 e0 03             	shl    $0x3,%eax
f010980a:	01 c8                	add    %ecx,%eax
f010980c:	8b 50 14             	mov    0x14(%eax),%edx
f010980f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109815:	8b 58 78             	mov    0x78(%eax),%ebx
f0109818:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010981e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109824:	89 c8                	mov    %ecx,%eax
f0109826:	01 c0                	add    %eax,%eax
f0109828:	01 c8                	add    %ecx,%eax
f010982a:	c1 e0 03             	shl    $0x3,%eax
f010982d:	01 d8                	add    %ebx,%eax
f010982f:	8b 40 10             	mov    0x10(%eax),%eax
f0109832:	89 42 10             	mov    %eax,0x10(%edx)
f0109835:	eb 2f                	jmp    f0109866 <env_create+0x80e>
f0109837:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010983d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109843:	8b 58 78             	mov    0x78(%eax),%ebx
f0109846:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010984c:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109852:	89 c8                	mov    %ecx,%eax
f0109854:	01 c0                	add    %eax,%eax
f0109856:	01 c8                	add    %ecx,%eax
f0109858:	c1 e0 03             	shl    $0x3,%eax
f010985b:	01 d8                	add    %ebx,%eax
f010985d:	8b 40 10             	mov    0x10(%eax),%eax
f0109860:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109866:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010986c:	8b 48 78             	mov    0x78(%eax),%ecx
f010986f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109875:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010987b:	89 d0                	mov    %edx,%eax
f010987d:	01 c0                	add    %eax,%eax
f010987f:	01 d0                	add    %edx,%eax
f0109881:	c1 e0 03             	shl    $0x3,%eax
f0109884:	01 c8                	add    %ecx,%eax
f0109886:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010988d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109893:	8b 48 78             	mov    0x78(%eax),%ecx
f0109896:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010989c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01098a2:	89 d0                	mov    %edx,%eax
f01098a4:	01 c0                	add    %eax,%eax
f01098a6:	01 d0                	add    %edx,%eax
f01098a8:	c1 e0 03             	shl    $0x3,%eax
f01098ab:	01 c8                	add    %ecx,%eax
f01098ad:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01098b4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098ba:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f01098c0:	4a                   	dec    %edx
f01098c1:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01098c7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098cd:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01098d3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098d9:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f01098df:	39 c2                	cmp    %eax,%edx
f01098e1:	0f 83 39 01 00 00    	jae    f0109a20 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01098e7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098ed:	8b 48 78             	mov    0x78(%eax),%ecx
f01098f0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098f6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01098fc:	89 d0                	mov    %edx,%eax
f01098fe:	01 c0                	add    %eax,%eax
f0109900:	01 d0                	add    %edx,%eax
f0109902:	c1 e0 03             	shl    $0x3,%eax
f0109905:	01 c8                	add    %ecx,%eax
f0109907:	85 c0                	test   %eax,%eax
f0109909:	75 17                	jne    f0109922 <env_create+0x8ca>
f010990b:	83 ec 04             	sub    $0x4,%esp
f010990e:	68 68 69 13 f0       	push   $0xf0136968
f0109913:	68 46 01 00 00       	push   $0x146
f0109918:	68 2d 69 13 f0       	push   $0xf013692d
f010991d:	e8 e3 68 ff ff       	call   f0100205 <_panic>
f0109922:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109928:	8b 48 78             	mov    0x78(%eax),%ecx
f010992b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109931:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109937:	89 d0                	mov    %edx,%eax
f0109939:	01 c0                	add    %eax,%eax
f010993b:	01 d0                	add    %edx,%eax
f010993d:	c1 e0 03             	shl    $0x3,%eax
f0109940:	01 c8                	add    %ecx,%eax
f0109942:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109948:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010994e:	89 50 10             	mov    %edx,0x10(%eax)
f0109951:	8b 40 10             	mov    0x10(%eax),%eax
f0109954:	85 c0                	test   %eax,%eax
f0109956:	74 31                	je     f0109989 <env_create+0x931>
f0109958:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010995e:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109964:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010996a:	8b 58 78             	mov    0x78(%eax),%ebx
f010996d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109973:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109979:	89 c8                	mov    %ecx,%eax
f010997b:	01 c0                	add    %eax,%eax
f010997d:	01 c8                	add    %ecx,%eax
f010997f:	c1 e0 03             	shl    $0x3,%eax
f0109982:	01 d8                	add    %ebx,%eax
f0109984:	89 42 14             	mov    %eax,0x14(%edx)
f0109987:	eb 2c                	jmp    f01099b5 <env_create+0x95d>
f0109989:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010998f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109995:	8b 58 78             	mov    0x78(%eax),%ebx
f0109998:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010999e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01099a4:	89 c8                	mov    %ecx,%eax
f01099a6:	01 c0                	add    %eax,%eax
f01099a8:	01 c8                	add    %ecx,%eax
f01099aa:	c1 e0 03             	shl    $0x3,%eax
f01099ad:	01 d8                	add    %ebx,%eax
f01099af:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f01099b5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01099bb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099c1:	8b 58 78             	mov    0x78(%eax),%ebx
f01099c4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099ca:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01099d0:	89 c8                	mov    %ecx,%eax
f01099d2:	01 c0                	add    %eax,%eax
f01099d4:	01 c8                	add    %ecx,%eax
f01099d6:	c1 e0 03             	shl    $0x3,%eax
f01099d9:	01 d8                	add    %ebx,%eax
f01099db:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f01099e1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099e7:	8b 48 78             	mov    0x78(%eax),%ecx
f01099ea:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099f0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01099f6:	89 d0                	mov    %edx,%eax
f01099f8:	01 c0                	add    %eax,%eax
f01099fa:	01 d0                	add    %edx,%eax
f01099fc:	c1 e0 03             	shl    $0x3,%eax
f01099ff:	01 c8                	add    %ecx,%eax
f0109a01:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109a08:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a0e:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109a14:	42                   	inc    %edx
f0109a15:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109a1b:	e9 34 01 00 00       	jmp    f0109b54 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109a20:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a26:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a29:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a2f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a35:	89 d0                	mov    %edx,%eax
f0109a37:	01 c0                	add    %eax,%eax
f0109a39:	01 d0                	add    %edx,%eax
f0109a3b:	c1 e0 03             	shl    $0x3,%eax
f0109a3e:	01 c8                	add    %ecx,%eax
f0109a40:	85 c0                	test   %eax,%eax
f0109a42:	75 17                	jne    f0109a5b <env_create+0xa03>
f0109a44:	83 ec 04             	sub    $0x4,%esp
f0109a47:	68 68 69 13 f0       	push   $0xf0136968
f0109a4c:	68 4a 01 00 00       	push   $0x14a
f0109a51:	68 2d 69 13 f0       	push   $0xf013692d
f0109a56:	e8 aa 67 ff ff       	call   f0100205 <_panic>
f0109a5b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a61:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a64:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a6a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a70:	89 d0                	mov    %edx,%eax
f0109a72:	01 c0                	add    %eax,%eax
f0109a74:	01 d0                	add    %edx,%eax
f0109a76:	c1 e0 03             	shl    $0x3,%eax
f0109a79:	01 c8                	add    %ecx,%eax
f0109a7b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a81:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109a87:	89 50 10             	mov    %edx,0x10(%eax)
f0109a8a:	8b 40 10             	mov    0x10(%eax),%eax
f0109a8d:	85 c0                	test   %eax,%eax
f0109a8f:	74 31                	je     f0109ac2 <env_create+0xa6a>
f0109a91:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a97:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109a9d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109aa3:	8b 58 78             	mov    0x78(%eax),%ebx
f0109aa6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109aac:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ab2:	89 c8                	mov    %ecx,%eax
f0109ab4:	01 c0                	add    %eax,%eax
f0109ab6:	01 c8                	add    %ecx,%eax
f0109ab8:	c1 e0 03             	shl    $0x3,%eax
f0109abb:	01 d8                	add    %ebx,%eax
f0109abd:	89 42 14             	mov    %eax,0x14(%edx)
f0109ac0:	eb 2c                	jmp    f0109aee <env_create+0xa96>
f0109ac2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ac8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ace:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ad1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ad7:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109add:	89 c8                	mov    %ecx,%eax
f0109adf:	01 c0                	add    %eax,%eax
f0109ae1:	01 c8                	add    %ecx,%eax
f0109ae3:	c1 e0 03             	shl    $0x3,%eax
f0109ae6:	01 d8                	add    %ebx,%eax
f0109ae8:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109aee:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109af4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109afa:	8b 58 78             	mov    0x78(%eax),%ebx
f0109afd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b03:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b09:	89 c8                	mov    %ecx,%eax
f0109b0b:	01 c0                	add    %eax,%eax
f0109b0d:	01 c8                	add    %ecx,%eax
f0109b0f:	c1 e0 03             	shl    $0x3,%eax
f0109b12:	01 d8                	add    %ebx,%eax
f0109b14:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109b1a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b20:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b23:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b29:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b2f:	89 d0                	mov    %edx,%eax
f0109b31:	01 c0                	add    %eax,%eax
f0109b33:	01 d0                	add    %edx,%eax
f0109b35:	c1 e0 03             	shl    $0x3,%eax
f0109b38:	01 c8                	add    %ecx,%eax
f0109b3a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109b41:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b47:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109b4d:	42                   	inc    %edx
f0109b4e:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109b54:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b5a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b60:	42                   	inc    %edx
f0109b61:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109b67:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109b6d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b73:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109b79:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b7f:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109b82:	ba 00 00 00 00       	mov    $0x0,%edx
f0109b87:	f7 f3                	div    %ebx
f0109b89:	89 d0                	mov    %edx,%eax
f0109b8b:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109b91:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b97:	83 ec 04             	sub    $0x4,%esp
f0109b9a:	6a 01                	push   $0x1
f0109b9c:	ff 75 c0             	pushl  -0x40(%ebp)
f0109b9f:	50                   	push   %eax
f0109ba0:	e8 3f 9a ff ff       	call   f01035e4 <pf_add_empty_env_page>
f0109ba5:	83 c4 10             	add    $0x10,%esp
f0109ba8:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109bae:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109bb5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109bb8:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109bbe:	0f 83 9e fa ff ff    	jae    f0109662 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109bc4:	83 ec 0c             	sub    $0xc,%esp
f0109bc7:	6a 02                	push   $0x2
f0109bc9:	e8 69 43 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f0109bce:	83 c4 10             	add    $0x10,%esp
f0109bd1:	85 c0                	test   %eax,%eax
f0109bd3:	74 72                	je     f0109c47 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109bd5:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109bdc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109be2:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109be8:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109beb:	eb 2b                	jmp    f0109c18 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109bed:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109bf0:	8b 10                	mov    (%eax),%edx
f0109bf2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bf8:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109bfb:	6a 01                	push   $0x1
f0109bfd:	6a 00                	push   $0x0
f0109bff:	52                   	push   %edx
f0109c00:	50                   	push   %eax
f0109c01:	e8 9c e1 ff ff       	call   f0107da2 <pt_set_page_permissions>
f0109c06:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109c09:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c0f:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109c15:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109c18:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c1e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109c22:	74 08                	je     f0109c2c <env_create+0xbd4>
f0109c24:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109c27:	8b 52 10             	mov    0x10(%edx),%edx
f0109c2a:	eb 05                	jmp    f0109c31 <env_create+0xbd9>
f0109c2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0109c31:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109c37:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109c3d:	85 c0                	test   %eax,%eax
f0109c3f:	75 ac                	jne    f0109bed <env_create+0xb95>
f0109c41:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109c45:	75 a6                	jne    f0109bed <env_create+0xb95>
f0109c47:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109c4a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109c4d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109c50:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109c53:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109c59:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109c5c:	5b                   	pop    %ebx
f0109c5d:	5e                   	pop    %esi
f0109c5e:	5f                   	pop    %edi
f0109c5f:	5d                   	pop    %ebp
f0109c60:	c3                   	ret    

f0109c61 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109c61:	55                   	push   %ebp
f0109c62:	89 e5                	mov    %esp,%ebp
f0109c64:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109c67:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109c6c:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109c6f:	74 25                	je     f0109c96 <env_run+0x35>
	{
		curenv = e ;
f0109c71:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c74:	a3 f4 13 88 f0       	mov    %eax,0xf08813f4
		curenv->env_runs++ ;
f0109c79:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109c7e:	8b 50 58             	mov    0x58(%eax),%edx
f0109c81:	42                   	inc    %edx
f0109c82:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109c85:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109c8a:	8b 40 60             	mov    0x60(%eax),%eax
f0109c8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c93:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109c96:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109c9b:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109ca2:	e8 18 a5 ff ff       	call   f01041bf <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109ca7:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109cac:	83 ec 0c             	sub    $0xc,%esp
f0109caf:	50                   	push   %eax
f0109cb0:	e8 0f 01 00 00       	call   f0109dc4 <env_pop_tf>

f0109cb5 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109cb5:	55                   	push   %ebp
f0109cb6:	89 e5                	mov    %esp,%ebp
f0109cb8:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109cbb:	83 ec 0c             	sub    $0xc,%esp
f0109cbe:	ff 75 08             	pushl  0x8(%ebp)
f0109cc1:	e8 3e 11 00 00       	call   f010ae04 <unshare_pws_at_user_space>
f0109cc6:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109cc9:	83 ec 04             	sub    $0x4,%esp
f0109ccc:	68 8c 69 13 f0       	push   $0xf013698c
f0109cd1:	68 9d 01 00 00       	push   $0x19d
f0109cd6:	68 2d 69 13 f0       	push   $0xf013692d
f0109cdb:	e8 25 65 ff ff       	call   f0100205 <_panic>

f0109ce0 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109ce0:	55                   	push   %ebp
f0109ce1:	89 e5                	mov    %esp,%ebp
f0109ce3:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109ce6:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109ceb:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109cee:	83 ec 0c             	sub    $0xc,%esp
f0109cf1:	50                   	push   %eax
f0109cf2:	e8 ab b5 ff ff       	call   f01052a2 <sched_exit_env>
f0109cf7:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109cfa:	e8 27 aa ff ff       	call   f0104726 <fos_scheduler>

f0109cff <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109cff:	55                   	push   %ebp
f0109d00:	89 e5                	mov    %esp,%ebp
f0109d02:	53                   	push   %ebx
f0109d03:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109d06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109d0a:	75 15                	jne    f0109d21 <envid2env+0x22>
		*env_store = curenv;
f0109d0c:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f0109d12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d15:	89 10                	mov    %edx,(%eax)
		return 0;
f0109d17:	b8 00 00 00 00       	mov    $0x0,%eax
f0109d1c:	e9 9e 00 00 00       	jmp    f0109dbf <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109d21:	8b 1d f0 13 88 f0    	mov    0xf08813f0,%ebx
f0109d27:	83 ec 0c             	sub    $0xc,%esp
f0109d2a:	68 b1 02 00 00       	push   $0x2b1
f0109d2f:	e8 cb 64 02 00       	call   f01301ff <nearest_pow2_ceil>
f0109d34:	83 c4 10             	add    $0x10,%esp
f0109d37:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109d3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d3d:	21 c2                	and    %eax,%edx
f0109d3f:	89 d0                	mov    %edx,%eax
f0109d41:	c1 e0 03             	shl    $0x3,%eax
f0109d44:	01 d0                	add    %edx,%eax
f0109d46:	01 c0                	add    %eax,%eax
f0109d48:	01 d0                	add    %edx,%eax
f0109d4a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109d51:	01 d0                	add    %edx,%eax
f0109d53:	c1 e0 04             	shl    $0x4,%eax
f0109d56:	01 d8                	add    %ebx,%eax
f0109d58:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d5e:	8b 40 54             	mov    0x54(%eax),%eax
f0109d61:	85 c0                	test   %eax,%eax
f0109d63:	74 0b                	je     f0109d70 <envid2env+0x71>
f0109d65:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d68:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109d6b:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109d6e:	74 10                	je     f0109d80 <envid2env+0x81>
		*env_store = 0;
f0109d70:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d73:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109d79:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109d7e:	eb 3f                	jmp    f0109dbf <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109d80:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109d84:	74 2c                	je     f0109db2 <envid2env+0xb3>
f0109d86:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109d8b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109d8e:	74 22                	je     f0109db2 <envid2env+0xb3>
f0109d90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d93:	8b 50 50             	mov    0x50(%eax),%edx
f0109d96:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0109d9b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109d9e:	39 c2                	cmp    %eax,%edx
f0109da0:	74 10                	je     f0109db2 <envid2env+0xb3>
		*env_store = 0;
f0109da2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109da5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109dab:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109db0:	eb 0d                	jmp    f0109dbf <envid2env+0xc0>
	}

	*env_store = e;
f0109db2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109db5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109db8:	89 10                	mov    %edx,(%eax)
	return 0;
f0109dba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109dbf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109dc2:	c9                   	leave  
f0109dc3:	c3                   	ret    

f0109dc4 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109dc4:	55                   	push   %ebp
f0109dc5:	89 e5                	mov    %esp,%ebp
f0109dc7:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109dca:	8b 65 08             	mov    0x8(%ebp),%esp
f0109dcd:	61                   	popa   
f0109dce:	07                   	pop    %es
f0109dcf:	1f                   	pop    %ds
f0109dd0:	83 c4 08             	add    $0x8,%esp
f0109dd3:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109dd4:	83 ec 04             	sub    $0x4,%esp
f0109dd7:	68 b3 69 13 f0       	push   $0xf01369b3
f0109ddc:	68 fd 01 00 00       	push   $0x1fd
f0109de1:	68 2d 69 13 f0       	push   $0xf013692d
f0109de6:	e8 1a 64 ff ff       	call   f0100205 <_panic>

f0109deb <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109deb:	55                   	push   %ebp
f0109dec:	89 e5                	mov    %esp,%ebp
f0109dee:	53                   	push   %ebx
f0109def:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109df2:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109df9:	e9 73 01 00 00       	jmp    f0109f71 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109dfe:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109e04:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e07:	89 d0                	mov    %edx,%eax
f0109e09:	c1 e0 03             	shl    $0x3,%eax
f0109e0c:	01 d0                	add    %edx,%eax
f0109e0e:	01 c0                	add    %eax,%eax
f0109e10:	01 d0                	add    %edx,%eax
f0109e12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109e19:	01 d0                	add    %edx,%eax
f0109e1b:	c1 e0 04             	shl    $0x4,%eax
f0109e1e:	01 c8                	add    %ecx,%eax
f0109e20:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109e27:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109e2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e30:	89 d0                	mov    %edx,%eax
f0109e32:	c1 e0 03             	shl    $0x3,%eax
f0109e35:	01 d0                	add    %edx,%eax
f0109e37:	01 c0                	add    %eax,%eax
f0109e39:	01 d0                	add    %edx,%eax
f0109e3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109e42:	01 d0                	add    %edx,%eax
f0109e44:	c1 e0 04             	shl    $0x4,%eax
f0109e47:	01 c8                	add    %ecx,%eax
f0109e49:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109e50:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e59:	89 d0                	mov    %edx,%eax
f0109e5b:	c1 e0 03             	shl    $0x3,%eax
f0109e5e:	01 d0                	add    %edx,%eax
f0109e60:	01 c0                	add    %eax,%eax
f0109e62:	01 d0                	add    %edx,%eax
f0109e64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109e6b:	01 d0                	add    %edx,%eax
f0109e6d:	c1 e0 04             	shl    $0x4,%eax
f0109e70:	01 c8                	add    %ecx,%eax
f0109e72:	85 c0                	test   %eax,%eax
f0109e74:	75 17                	jne    f0109e8d <env_init+0xa2>
f0109e76:	83 ec 04             	sub    $0x4,%esp
f0109e79:	68 68 69 13 f0       	push   $0xf0136968
f0109e7e:	68 19 02 00 00       	push   $0x219
f0109e83:	68 2d 69 13 f0       	push   $0xf013692d
f0109e88:	e8 78 63 ff ff       	call   f0100205 <_panic>
f0109e8d:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109e93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e96:	89 d0                	mov    %edx,%eax
f0109e98:	c1 e0 03             	shl    $0x3,%eax
f0109e9b:	01 d0                	add    %edx,%eax
f0109e9d:	01 c0                	add    %eax,%eax
f0109e9f:	01 d0                	add    %edx,%eax
f0109ea1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ea8:	01 d0                	add    %edx,%eax
f0109eaa:	c1 e0 04             	shl    $0x4,%eax
f0109ead:	01 c8                	add    %ecx,%eax
f0109eaf:	8b 15 f8 13 88 f0    	mov    0xf08813f8,%edx
f0109eb5:	89 50 44             	mov    %edx,0x44(%eax)
f0109eb8:	8b 40 44             	mov    0x44(%eax),%eax
f0109ebb:	85 c0                	test   %eax,%eax
f0109ebd:	74 2d                	je     f0109eec <env_init+0x101>
f0109ebf:	8b 0d f8 13 88 f0    	mov    0xf08813f8,%ecx
f0109ec5:	8b 1d f0 13 88 f0    	mov    0xf08813f0,%ebx
f0109ecb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ece:	89 d0                	mov    %edx,%eax
f0109ed0:	c1 e0 03             	shl    $0x3,%eax
f0109ed3:	01 d0                	add    %edx,%eax
f0109ed5:	01 c0                	add    %eax,%eax
f0109ed7:	01 d0                	add    %edx,%eax
f0109ed9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ee0:	01 d0                	add    %edx,%eax
f0109ee2:	c1 e0 04             	shl    $0x4,%eax
f0109ee5:	01 d8                	add    %ebx,%eax
f0109ee7:	89 41 48             	mov    %eax,0x48(%ecx)
f0109eea:	eb 27                	jmp    f0109f13 <env_init+0x128>
f0109eec:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109ef2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ef5:	89 d0                	mov    %edx,%eax
f0109ef7:	c1 e0 03             	shl    $0x3,%eax
f0109efa:	01 d0                	add    %edx,%eax
f0109efc:	01 c0                	add    %eax,%eax
f0109efe:	01 d0                	add    %edx,%eax
f0109f00:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f07:	01 d0                	add    %edx,%eax
f0109f09:	c1 e0 04             	shl    $0x4,%eax
f0109f0c:	01 c8                	add    %ecx,%eax
f0109f0e:	a3 fc 13 88 f0       	mov    %eax,0xf08813fc
f0109f13:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109f19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f1c:	89 d0                	mov    %edx,%eax
f0109f1e:	c1 e0 03             	shl    $0x3,%eax
f0109f21:	01 d0                	add    %edx,%eax
f0109f23:	01 c0                	add    %eax,%eax
f0109f25:	01 d0                	add    %edx,%eax
f0109f27:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f2e:	01 d0                	add    %edx,%eax
f0109f30:	c1 e0 04             	shl    $0x4,%eax
f0109f33:	01 c8                	add    %ecx,%eax
f0109f35:	a3 f8 13 88 f0       	mov    %eax,0xf08813f8
f0109f3a:	8b 0d f0 13 88 f0    	mov    0xf08813f0,%ecx
f0109f40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f43:	89 d0                	mov    %edx,%eax
f0109f45:	c1 e0 03             	shl    $0x3,%eax
f0109f48:	01 d0                	add    %edx,%eax
f0109f4a:	01 c0                	add    %eax,%eax
f0109f4c:	01 d0                	add    %edx,%eax
f0109f4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109f55:	01 d0                	add    %edx,%eax
f0109f57:	c1 e0 04             	shl    $0x4,%eax
f0109f5a:	01 c8                	add    %ecx,%eax
f0109f5c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109f63:	a1 04 14 88 f0       	mov    0xf0881404,%eax
f0109f68:	40                   	inc    %eax
f0109f69:	a3 04 14 88 f0       	mov    %eax,0xf0881404
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109f6e:	ff 4d f4             	decl   -0xc(%ebp)
f0109f71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109f75:	0f 89 83 fe ff ff    	jns    f0109dfe <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109f7b:	90                   	nop
f0109f7c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109f7f:	c9                   	leave  
f0109f80:	c3                   	ret    

f0109f81 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109f81:	55                   	push   %ebp
f0109f82:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109f84:	8b 15 f8 13 88 f0    	mov    0xf08813f8,%edx
f0109f8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f8d:	89 10                	mov    %edx,(%eax)
f0109f8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f92:	8b 00                	mov    (%eax),%eax
f0109f94:	85 c0                	test   %eax,%eax
f0109f96:	75 07                	jne    f0109f9f <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109f98:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109f9d:	eb 11                	jmp    f0109fb0 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa2:	8b 00                	mov    (%eax),%eax
f0109fa4:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109fab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109fb0:	5d                   	pop    %ebp
f0109fb1:	c3                   	ret    

f0109fb2 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109fb2:	55                   	push   %ebp
f0109fb3:	89 e5                	mov    %esp,%ebp
f0109fb5:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109fb8:	83 ec 04             	sub    $0x4,%esp
f0109fbb:	68 f0 05 00 00       	push   $0x5f0
f0109fc0:	6a 00                	push   $0x0
f0109fc2:	ff 75 08             	pushl  0x8(%ebp)
f0109fc5:	e8 b1 76 02 00       	call   f013167b <memset>
f0109fca:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109fcd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fd0:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109fd7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109fdb:	75 17                	jne    f0109ff4 <free_environment+0x42>
f0109fdd:	83 ec 04             	sub    $0x4,%esp
f0109fe0:	68 68 69 13 f0       	push   $0xf0136968
f0109fe5:	68 36 02 00 00       	push   $0x236
f0109fea:	68 2d 69 13 f0       	push   $0xf013692d
f0109fef:	e8 11 62 ff ff       	call   f0100205 <_panic>
f0109ff4:	8b 15 f8 13 88 f0    	mov    0xf08813f8,%edx
f0109ffa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ffd:	89 50 44             	mov    %edx,0x44(%eax)
f010a000:	8b 45 08             	mov    0x8(%ebp),%eax
f010a003:	8b 40 44             	mov    0x44(%eax),%eax
f010a006:	85 c0                	test   %eax,%eax
f010a008:	74 0d                	je     f010a017 <free_environment+0x65>
f010a00a:	a1 f8 13 88 f0       	mov    0xf08813f8,%eax
f010a00f:	8b 55 08             	mov    0x8(%ebp),%edx
f010a012:	89 50 48             	mov    %edx,0x48(%eax)
f010a015:	eb 08                	jmp    f010a01f <free_environment+0x6d>
f010a017:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01a:	a3 fc 13 88 f0       	mov    %eax,0xf08813fc
f010a01f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a022:	a3 f8 13 88 f0       	mov    %eax,0xf08813f8
f010a027:	8b 45 08             	mov    0x8(%ebp),%eax
f010a02a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a031:	a1 04 14 88 f0       	mov    0xf0881404,%eax
f010a036:	40                   	inc    %eax
f010a037:	a3 04 14 88 f0       	mov    %eax,0xf0881404
}
f010a03c:	90                   	nop
f010a03d:	c9                   	leave  
f010a03e:	c3                   	ret    

f010a03f <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a03f:	55                   	push   %ebp
f010a040:	89 e5                	mov    %esp,%ebp
f010a042:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a045:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a048:	89 d0                	mov    %edx,%eax
f010a04a:	01 c0                	add    %eax,%eax
f010a04c:	01 d0                	add    %edx,%eax
f010a04e:	c1 e0 03             	shl    $0x3,%eax
f010a051:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a054:	83 ec 0c             	sub    $0xc,%esp
f010a057:	ff 75 f4             	pushl  -0xc(%ebp)
f010a05a:	e8 1b da ff ff       	call   f0107a7a <kmalloc>
f010a05f:	83 c4 10             	add    $0x10,%esp
f010a062:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f010a065:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a069:	75 17                	jne    f010a082 <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a06b:	83 ec 04             	sub    $0x4,%esp
f010a06e:	68 bf 69 13 f0       	push   $0xf01369bf
f010a073:	68 44 02 00 00       	push   $0x244
f010a078:	68 2d 69 13 f0       	push   $0xf013692d
f010a07d:	e8 83 61 ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a082:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f010a085:	c9                   	leave  
f010a086:	c3                   	ret    

f010a087 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a087:	55                   	push   %ebp
f010a088:	89 e5                	mov    %esp,%ebp
f010a08a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a08d:	83 ec 0c             	sub    $0xc,%esp
f010a090:	68 00 10 00 00       	push   $0x1000
f010a095:	e8 e0 d9 ff ff       	call   f0107a7a <kmalloc>
f010a09a:	83 c4 10             	add    $0x10,%esp
f010a09d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a0a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a0a4:	75 17                	jne    f010a0bd <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a0a6:	83 ec 04             	sub    $0x4,%esp
f010a0a9:	68 bf 69 13 f0       	push   $0xf01369bf
f010a0ae:	68 53 02 00 00       	push   $0x253
f010a0b3:	68 2d 69 13 f0       	push   $0xf013692d
f010a0b8:	e8 48 61 ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a0bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//Use kmalloc() to allocate a new directory
}
f010a0c0:	c9                   	leave  
f010a0c1:	c3                   	ret    

f010a0c2 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a0c2:	55                   	push   %ebp
f010a0c3:	89 e5                	mov    %esp,%ebp
f010a0c5:	53                   	push   %ebx
f010a0c6:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a0c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a0cc:	8b 40 0c             	mov    0xc(%eax),%eax
f010a0cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a0d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a0d5:	8b 40 08             	mov    0x8(%eax),%eax
f010a0d8:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a0db:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a0e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a0e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a0e8:	01 c2                	add    %eax,%edx
f010a0ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a0ed:	01 d0                	add    %edx,%eax
f010a0ef:	48                   	dec    %eax
f010a0f0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a0f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a0f6:	ba 00 00 00 00       	mov    $0x0,%edx
f010a0fb:	f7 75 dc             	divl   -0x24(%ebp)
f010a0fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a101:	29 d0                	sub    %edx,%eax
f010a103:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a106:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a109:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a10c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a10f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a114:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a117:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a11e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a125:	8b 45 10             	mov    0x10(%ebp),%eax
f010a128:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a12e:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a135:	0f 85 c8 05 00 00    	jne    f010a703 <program_segment_alloc_map_copy_workingset+0x641>
f010a13b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13e:	05 5c 05 00 00       	add    $0x55c,%eax
f010a143:	83 ec 08             	sub    $0x8,%esp
f010a146:	68 dc 69 13 f0       	push   $0xf01369dc
f010a14b:	50                   	push   %eax
f010a14c:	e8 48 74 02 00       	call   f0131599 <strcmp>
f010a151:	83 c4 10             	add    $0x10,%esp
f010a154:	85 c0                	test   %eax,%eax
f010a156:	0f 84 a7 05 00 00    	je     f010a703 <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a15c:	8b 45 14             	mov    0x14(%ebp),%eax
f010a15f:	83 f8 06             	cmp    $0x6,%eax
f010a162:	76 05                	jbe    f010a169 <program_segment_alloc_map_copy_workingset+0xa7>
f010a164:	b8 06 00 00 00       	mov    $0x6,%eax
f010a169:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a16c:	e9 92 05 00 00       	jmp    f010a703 <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a171:	83 ec 0c             	sub    $0xc,%esp
f010a174:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a177:	50                   	push   %eax
f010a178:	e8 75 c7 ff ff       	call   f01068f2 <allocate_frame>
f010a17d:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a180:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a183:	8b 45 08             	mov    0x8(%ebp),%eax
f010a186:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a189:	6a 06                	push   $0x6
f010a18b:	ff 75 f4             	pushl  -0xc(%ebp)
f010a18e:	52                   	push   %edx
f010a18f:	50                   	push   %eax
f010a190:	e8 68 cd ff ff       	call   f0106efd <loadtime_map_frame>
f010a195:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a198:	8b 45 08             	mov    0x8(%ebp),%eax
f010a19b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a19e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1a7:	89 d0                	mov    %edx,%eax
f010a1a9:	01 c0                	add    %eax,%eax
f010a1ab:	01 d0                	add    %edx,%eax
f010a1ad:	c1 e0 03             	shl    $0x3,%eax
f010a1b0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a1b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1b6:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bb:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1c7:	89 d0                	mov    %edx,%eax
f010a1c9:	01 c0                	add    %eax,%eax
f010a1cb:	01 d0                	add    %edx,%eax
f010a1cd:	c1 e0 03             	shl    $0x3,%eax
f010a1d0:	01 c8                	add    %ecx,%eax
f010a1d2:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a1d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a1dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1df:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a1e5:	89 d0                	mov    %edx,%eax
f010a1e7:	01 c0                	add    %eax,%eax
f010a1e9:	01 d0                	add    %edx,%eax
f010a1eb:	c1 e0 03             	shl    $0x3,%eax
f010a1ee:	01 c8                	add    %ecx,%eax
f010a1f0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a1f7:	83 ec 0c             	sub    $0xc,%esp
f010a1fa:	6a 02                	push   $0x2
f010a1fc:	e8 36 3d 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f010a201:	83 c4 10             	add    $0x10,%esp
f010a204:	85 c0                	test   %eax,%eax
f010a206:	0f 84 c8 03 00 00    	je     f010a5d4 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a20c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a20f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a212:	8b 45 08             	mov    0x8(%ebp),%eax
f010a215:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a21b:	89 d0                	mov    %edx,%eax
f010a21d:	01 c0                	add    %eax,%eax
f010a21f:	01 d0                	add    %edx,%eax
f010a221:	c1 e0 03             	shl    $0x3,%eax
f010a224:	01 c8                	add    %ecx,%eax
f010a226:	85 c0                	test   %eax,%eax
f010a228:	75 17                	jne    f010a241 <program_segment_alloc_map_copy_workingset+0x17f>
f010a22a:	83 ec 04             	sub    $0x4,%esp
f010a22d:	68 4a 69 13 f0       	push   $0xf013694a
f010a232:	68 85 02 00 00       	push   $0x285
f010a237:	68 2d 69 13 f0       	push   $0xf013692d
f010a23c:	e8 c4 5f ff ff       	call   f0100205 <_panic>
f010a241:	8b 45 08             	mov    0x8(%ebp),%eax
f010a244:	8b 48 78             	mov    0x78(%eax),%ecx
f010a247:	8b 45 08             	mov    0x8(%ebp),%eax
f010a24a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a250:	89 d0                	mov    %edx,%eax
f010a252:	01 c0                	add    %eax,%eax
f010a254:	01 d0                	add    %edx,%eax
f010a256:	c1 e0 03             	shl    $0x3,%eax
f010a259:	01 c8                	add    %ecx,%eax
f010a25b:	8b 40 10             	mov    0x10(%eax),%eax
f010a25e:	85 c0                	test   %eax,%eax
f010a260:	74 3f                	je     f010a2a1 <program_segment_alloc_map_copy_workingset+0x1df>
f010a262:	8b 45 08             	mov    0x8(%ebp),%eax
f010a265:	8b 48 78             	mov    0x78(%eax),%ecx
f010a268:	8b 45 08             	mov    0x8(%ebp),%eax
f010a26b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a271:	89 d0                	mov    %edx,%eax
f010a273:	01 c0                	add    %eax,%eax
f010a275:	01 d0                	add    %edx,%eax
f010a277:	c1 e0 03             	shl    $0x3,%eax
f010a27a:	01 c8                	add    %ecx,%eax
f010a27c:	8b 50 10             	mov    0x10(%eax),%edx
f010a27f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a282:	8b 58 78             	mov    0x78(%eax),%ebx
f010a285:	8b 45 08             	mov    0x8(%ebp),%eax
f010a288:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a28e:	89 c8                	mov    %ecx,%eax
f010a290:	01 c0                	add    %eax,%eax
f010a292:	01 c8                	add    %ecx,%eax
f010a294:	c1 e0 03             	shl    $0x3,%eax
f010a297:	01 d8                	add    %ebx,%eax
f010a299:	8b 40 14             	mov    0x14(%eax),%eax
f010a29c:	89 42 14             	mov    %eax,0x14(%edx)
f010a29f:	eb 26                	jmp    f010a2c7 <program_segment_alloc_map_copy_workingset+0x205>
f010a2a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a4:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2aa:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2b0:	89 d0                	mov    %edx,%eax
f010a2b2:	01 c0                	add    %eax,%eax
f010a2b4:	01 d0                	add    %edx,%eax
f010a2b6:	c1 e0 03             	shl    $0x3,%eax
f010a2b9:	01 c8                	add    %ecx,%eax
f010a2bb:	8b 50 14             	mov    0x14(%eax),%edx
f010a2be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c1:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a2c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2ca:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2d6:	89 d0                	mov    %edx,%eax
f010a2d8:	01 c0                	add    %eax,%eax
f010a2da:	01 d0                	add    %edx,%eax
f010a2dc:	c1 e0 03             	shl    $0x3,%eax
f010a2df:	01 c8                	add    %ecx,%eax
f010a2e1:	8b 40 14             	mov    0x14(%eax),%eax
f010a2e4:	85 c0                	test   %eax,%eax
f010a2e6:	74 3f                	je     f010a327 <program_segment_alloc_map_copy_workingset+0x265>
f010a2e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2eb:	8b 48 78             	mov    0x78(%eax),%ecx
f010a2ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a2f7:	89 d0                	mov    %edx,%eax
f010a2f9:	01 c0                	add    %eax,%eax
f010a2fb:	01 d0                	add    %edx,%eax
f010a2fd:	c1 e0 03             	shl    $0x3,%eax
f010a300:	01 c8                	add    %ecx,%eax
f010a302:	8b 50 14             	mov    0x14(%eax),%edx
f010a305:	8b 45 08             	mov    0x8(%ebp),%eax
f010a308:	8b 58 78             	mov    0x78(%eax),%ebx
f010a30b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a30e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a314:	89 c8                	mov    %ecx,%eax
f010a316:	01 c0                	add    %eax,%eax
f010a318:	01 c8                	add    %ecx,%eax
f010a31a:	c1 e0 03             	shl    $0x3,%eax
f010a31d:	01 d8                	add    %ebx,%eax
f010a31f:	8b 40 10             	mov    0x10(%eax),%eax
f010a322:	89 42 10             	mov    %eax,0x10(%edx)
f010a325:	eb 26                	jmp    f010a34d <program_segment_alloc_map_copy_workingset+0x28b>
f010a327:	8b 45 08             	mov    0x8(%ebp),%eax
f010a32a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a32d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a330:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a336:	89 d0                	mov    %edx,%eax
f010a338:	01 c0                	add    %eax,%eax
f010a33a:	01 d0                	add    %edx,%eax
f010a33c:	c1 e0 03             	shl    $0x3,%eax
f010a33f:	01 c8                	add    %ecx,%eax
f010a341:	8b 50 10             	mov    0x10(%eax),%edx
f010a344:	8b 45 08             	mov    0x8(%ebp),%eax
f010a347:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a34d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a350:	8b 48 78             	mov    0x78(%eax),%ecx
f010a353:	8b 45 08             	mov    0x8(%ebp),%eax
f010a356:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a35c:	89 d0                	mov    %edx,%eax
f010a35e:	01 c0                	add    %eax,%eax
f010a360:	01 d0                	add    %edx,%eax
f010a362:	c1 e0 03             	shl    $0x3,%eax
f010a365:	01 c8                	add    %ecx,%eax
f010a367:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a36e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a371:	8b 48 78             	mov    0x78(%eax),%ecx
f010a374:	8b 45 08             	mov    0x8(%ebp),%eax
f010a377:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a37d:	89 d0                	mov    %edx,%eax
f010a37f:	01 c0                	add    %eax,%eax
f010a381:	01 d0                	add    %edx,%eax
f010a383:	c1 e0 03             	shl    $0x3,%eax
f010a386:	01 c8                	add    %ecx,%eax
f010a388:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a38f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a392:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a398:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a39b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a39e:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a3a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a7:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a3ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b0:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a3b6:	48                   	dec    %eax
f010a3b7:	39 c2                	cmp    %eax,%edx
f010a3b9:	0f 83 0d 01 00 00    	jae    f010a4cc <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a3bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c2:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a3ce:	89 d0                	mov    %edx,%eax
f010a3d0:	01 c0                	add    %eax,%eax
f010a3d2:	01 d0                	add    %edx,%eax
f010a3d4:	c1 e0 03             	shl    $0x3,%eax
f010a3d7:	01 c8                	add    %ecx,%eax
f010a3d9:	85 c0                	test   %eax,%eax
f010a3db:	75 17                	jne    f010a3f4 <program_segment_alloc_map_copy_workingset+0x332>
f010a3dd:	83 ec 04             	sub    $0x4,%esp
f010a3e0:	68 68 69 13 f0       	push   $0xf0136968
f010a3e5:	68 89 02 00 00       	push   $0x289
f010a3ea:	68 2d 69 13 f0       	push   $0xf013692d
f010a3ef:	e8 11 5e ff ff       	call   f0100205 <_panic>
f010a3f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f7:	8b 48 78             	mov    0x78(%eax),%ecx
f010a3fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3fd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a403:	89 d0                	mov    %edx,%eax
f010a405:	01 c0                	add    %eax,%eax
f010a407:	01 d0                	add    %edx,%eax
f010a409:	c1 e0 03             	shl    $0x3,%eax
f010a40c:	01 c8                	add    %ecx,%eax
f010a40e:	8b 55 08             	mov    0x8(%ebp),%edx
f010a411:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a417:	89 50 10             	mov    %edx,0x10(%eax)
f010a41a:	8b 40 10             	mov    0x10(%eax),%eax
f010a41d:	85 c0                	test   %eax,%eax
f010a41f:	74 28                	je     f010a449 <program_segment_alloc_map_copy_workingset+0x387>
f010a421:	8b 45 08             	mov    0x8(%ebp),%eax
f010a424:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a42a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a42d:	8b 58 78             	mov    0x78(%eax),%ebx
f010a430:	8b 45 08             	mov    0x8(%ebp),%eax
f010a433:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a439:	89 c8                	mov    %ecx,%eax
f010a43b:	01 c0                	add    %eax,%eax
f010a43d:	01 c8                	add    %ecx,%eax
f010a43f:	c1 e0 03             	shl    $0x3,%eax
f010a442:	01 d8                	add    %ebx,%eax
f010a444:	89 42 14             	mov    %eax,0x14(%edx)
f010a447:	eb 24                	jmp    f010a46d <program_segment_alloc_map_copy_workingset+0x3ab>
f010a449:	8b 45 08             	mov    0x8(%ebp),%eax
f010a44c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a44f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a452:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a458:	89 d0                	mov    %edx,%eax
f010a45a:	01 c0                	add    %eax,%eax
f010a45c:	01 d0                	add    %edx,%eax
f010a45e:	c1 e0 03             	shl    $0x3,%eax
f010a461:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a464:	8b 45 08             	mov    0x8(%ebp),%eax
f010a467:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a46d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a470:	8b 48 78             	mov    0x78(%eax),%ecx
f010a473:	8b 45 08             	mov    0x8(%ebp),%eax
f010a476:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a47c:	89 d0                	mov    %edx,%eax
f010a47e:	01 c0                	add    %eax,%eax
f010a480:	01 d0                	add    %edx,%eax
f010a482:	c1 e0 03             	shl    $0x3,%eax
f010a485:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a488:	8b 45 08             	mov    0x8(%ebp),%eax
f010a48b:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a491:	8b 45 08             	mov    0x8(%ebp),%eax
f010a494:	8b 48 78             	mov    0x78(%eax),%ecx
f010a497:	8b 45 08             	mov    0x8(%ebp),%eax
f010a49a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4a0:	89 d0                	mov    %edx,%eax
f010a4a2:	01 c0                	add    %eax,%eax
f010a4a4:	01 d0                	add    %edx,%eax
f010a4a6:	c1 e0 03             	shl    $0x3,%eax
f010a4a9:	01 c8                	add    %ecx,%eax
f010a4ab:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a4b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4b5:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a4bb:	8d 50 01             	lea    0x1(%eax),%edx
f010a4be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c1:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a4c7:	e9 08 01 00 00       	jmp    f010a5d4 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a4cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4cf:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4d5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4db:	89 d0                	mov    %edx,%eax
f010a4dd:	01 c0                	add    %eax,%eax
f010a4df:	01 d0                	add    %edx,%eax
f010a4e1:	c1 e0 03             	shl    $0x3,%eax
f010a4e4:	01 c8                	add    %ecx,%eax
f010a4e6:	85 c0                	test   %eax,%eax
f010a4e8:	75 17                	jne    f010a501 <program_segment_alloc_map_copy_workingset+0x43f>
f010a4ea:	83 ec 04             	sub    $0x4,%esp
f010a4ed:	68 68 69 13 f0       	push   $0xf0136968
f010a4f2:	68 8e 02 00 00       	push   $0x28e
f010a4f7:	68 2d 69 13 f0       	push   $0xf013692d
f010a4fc:	e8 04 5d ff ff       	call   f0100205 <_panic>
f010a501:	8b 45 08             	mov    0x8(%ebp),%eax
f010a504:	8b 48 78             	mov    0x78(%eax),%ecx
f010a507:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a510:	89 d0                	mov    %edx,%eax
f010a512:	01 c0                	add    %eax,%eax
f010a514:	01 d0                	add    %edx,%eax
f010a516:	c1 e0 03             	shl    $0x3,%eax
f010a519:	01 c8                	add    %ecx,%eax
f010a51b:	8b 55 08             	mov    0x8(%ebp),%edx
f010a51e:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a524:	89 50 10             	mov    %edx,0x10(%eax)
f010a527:	8b 40 10             	mov    0x10(%eax),%eax
f010a52a:	85 c0                	test   %eax,%eax
f010a52c:	74 28                	je     f010a556 <program_segment_alloc_map_copy_workingset+0x494>
f010a52e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a531:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a537:	8b 45 08             	mov    0x8(%ebp),%eax
f010a53a:	8b 58 78             	mov    0x78(%eax),%ebx
f010a53d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a540:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a546:	89 c8                	mov    %ecx,%eax
f010a548:	01 c0                	add    %eax,%eax
f010a54a:	01 c8                	add    %ecx,%eax
f010a54c:	c1 e0 03             	shl    $0x3,%eax
f010a54f:	01 d8                	add    %ebx,%eax
f010a551:	89 42 14             	mov    %eax,0x14(%edx)
f010a554:	eb 24                	jmp    f010a57a <program_segment_alloc_map_copy_workingset+0x4b8>
f010a556:	8b 45 08             	mov    0x8(%ebp),%eax
f010a559:	8b 48 78             	mov    0x78(%eax),%ecx
f010a55c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a55f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a565:	89 d0                	mov    %edx,%eax
f010a567:	01 c0                	add    %eax,%eax
f010a569:	01 d0                	add    %edx,%eax
f010a56b:	c1 e0 03             	shl    $0x3,%eax
f010a56e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a571:	8b 45 08             	mov    0x8(%ebp),%eax
f010a574:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a57a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a57d:	8b 48 78             	mov    0x78(%eax),%ecx
f010a580:	8b 45 08             	mov    0x8(%ebp),%eax
f010a583:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a589:	89 d0                	mov    %edx,%eax
f010a58b:	01 c0                	add    %eax,%eax
f010a58d:	01 d0                	add    %edx,%eax
f010a58f:	c1 e0 03             	shl    $0x3,%eax
f010a592:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a595:	8b 45 08             	mov    0x8(%ebp),%eax
f010a598:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a59e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5ad:	89 d0                	mov    %edx,%eax
f010a5af:	01 c0                	add    %eax,%eax
f010a5b1:	01 d0                	add    %edx,%eax
f010a5b3:	c1 e0 03             	shl    $0x3,%eax
f010a5b6:	01 c8                	add    %ecx,%eax
f010a5b8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a5bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c2:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a5c8:	8d 50 01             	lea    0x1(%eax),%edx
f010a5cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ce:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a5d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d7:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a5dd:	8d 50 01             	lea    0x1(%eax),%edx
f010a5e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e3:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a5e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ec:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a5f2:	8b 55 08             	mov    0x8(%ebp),%edx
f010a5f5:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a5f8:	ba 00 00 00 00       	mov    $0x0,%edx
f010a5fd:	f7 f1                	div    %ecx
f010a5ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a602:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a608:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a60b:	c1 e8 16             	shr    $0x16,%eax
f010a60e:	89 c2                	mov    %eax,%edx
f010a610:	8b 45 18             	mov    0x18(%ebp),%eax
f010a613:	8b 00                	mov    (%eax),%eax
f010a615:	39 c2                	cmp    %eax,%edx
f010a617:	0f 84 cf 00 00 00    	je     f010a6ec <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a61d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a620:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a626:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a629:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a62c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a62f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a634:	89 c1                	mov    %eax,%ecx
f010a636:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a639:	89 d0                	mov    %edx,%eax
f010a63b:	01 c0                	add    %eax,%eax
f010a63d:	01 d0                	add    %edx,%eax
f010a63f:	c1 e0 03             	shl    $0x3,%eax
f010a642:	01 d8                	add    %ebx,%eax
f010a644:	83 c0 7c             	add    $0x7c,%eax
f010a647:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a649:	8b 45 08             	mov    0x8(%ebp),%eax
f010a64c:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a652:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a655:	89 d0                	mov    %edx,%eax
f010a657:	01 c0                	add    %eax,%eax
f010a659:	01 d0                	add    %edx,%eax
f010a65b:	c1 e0 03             	shl    $0x3,%eax
f010a65e:	01 c8                	add    %ecx,%eax
f010a660:	83 e8 80             	sub    $0xffffff80,%eax
f010a663:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a666:	8b 45 08             	mov    0x8(%ebp),%eax
f010a669:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a66f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a672:	89 d0                	mov    %edx,%eax
f010a674:	01 c0                	add    %eax,%eax
f010a676:	01 d0                	add    %edx,%eax
f010a678:	c1 e0 03             	shl    $0x3,%eax
f010a67b:	01 c8                	add    %ecx,%eax
f010a67d:	05 84 00 00 00       	add    $0x84,%eax
f010a682:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a688:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68b:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a691:	8d 50 01             	lea    0x1(%eax),%edx
f010a694:	8b 45 08             	mov    0x8(%ebp),%eax
f010a697:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a69d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a6a6:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a6ab:	ba 00 00 00 00       	mov    $0x0,%edx
f010a6b0:	f7 f1                	div    %ecx
f010a6b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b5:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a6bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6be:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a6c4:	85 c0                	test   %eax,%eax
f010a6c6:	75 17                	jne    f010a6df <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a6c8:	83 ec 04             	sub    $0x4,%esp
f010a6cb:	68 e0 69 13 f0       	push   $0xf01369e0
f010a6d0:	68 9e 02 00 00       	push   $0x29e
f010a6d5:	68 2d 69 13 f0       	push   $0xf013692d
f010a6da:	e8 26 5b ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a6df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a6e2:	c1 e8 16             	shr    $0x16,%eax
f010a6e5:	89 c2                	mov    %eax,%edx
f010a6e7:	8b 45 18             	mov    0x18(%ebp),%eax
f010a6ea:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a6ec:	8b 45 10             	mov    0x10(%ebp),%eax
f010a6ef:	8b 00                	mov    (%eax),%eax
f010a6f1:	8d 50 01             	lea    0x1(%eax),%edx
f010a6f4:	8b 45 10             	mov    0x10(%ebp),%eax
f010a6f7:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a6f9:	ff 45 f0             	incl   -0x10(%ebp)
f010a6fc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a703:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a706:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a709:	73 0c                	jae    f010a717 <program_segment_alloc_map_copy_workingset+0x655>
f010a70b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a70e:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a711:	0f 82 5a fa ff ff    	jb     f010a171 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a717:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a71a:	8b 00                	mov    (%eax),%eax
f010a71c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a71f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a722:	8b 40 0c             	mov    0xc(%eax),%eax
f010a725:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a728:	eb 10                	jmp    f010a73a <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a72a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a72d:	8a 10                	mov    (%eax),%dl
f010a72f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a732:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a734:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a737:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a73a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a73d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a740:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a743:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a748:	89 c2                	mov    %eax,%edx
f010a74a:	8b 45 10             	mov    0x10(%ebp),%eax
f010a74d:	8b 00                	mov    (%eax),%eax
f010a74f:	c1 e0 0c             	shl    $0xc,%eax
f010a752:	01 c2                	add    %eax,%edx
f010a754:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a757:	39 c2                	cmp    %eax,%edx
f010a759:	76 1d                	jbe    f010a778 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a75b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a75e:	8b 50 04             	mov    0x4(%eax),%edx
f010a761:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a764:	01 c2                	add    %eax,%edx
f010a766:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a769:	39 c2                	cmp    %eax,%edx
f010a76b:	77 bd                	ja     f010a72a <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a76d:	eb 09                	jmp    f010a778 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a76f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a772:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a775:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a778:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a77b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a77e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a781:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a786:	89 c2                	mov    %eax,%edx
f010a788:	8b 45 10             	mov    0x10(%ebp),%eax
f010a78b:	8b 00                	mov    (%eax),%eax
f010a78d:	c1 e0 0c             	shl    $0xc,%eax
f010a790:	01 c2                	add    %eax,%edx
f010a792:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a795:	39 c2                	cmp    %eax,%edx
f010a797:	77 d6                	ja     f010a76f <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a799:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a79e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a7a1:	c9                   	leave  
f010a7a2:	c3                   	ret    

f010a7a3 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a7a3:	55                   	push   %ebp
f010a7a4:	89 e5                	mov    %esp,%ebp
f010a7a6:	53                   	push   %ebx
f010a7a7:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a7aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ad:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a7b0:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a7b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b6:	8b 55 10             	mov    0x10(%ebp),%edx
f010a7b9:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a7bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a7c3:	eb 17                	jmp    f010a7dc <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a7c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a7cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7ce:	c1 e2 02             	shl    $0x2,%edx
f010a7d1:	01 d0                	add    %edx,%eax
f010a7d3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a7d9:	ff 45 f4             	incl   -0xc(%ebp)
f010a7dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7df:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a7e4:	76 df                	jbe    f010a7c5 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a7e6:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a7ed:	eb 22                	jmp    f010a811 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a7ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f2:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a7f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7f8:	c1 e2 02             	shl    $0x2,%edx
f010a7fb:	01 c2                	add    %eax,%edx
f010a7fd:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f010a802:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a805:	c1 e1 02             	shl    $0x2,%ecx
f010a808:	01 c8                	add    %ecx,%eax
f010a80a:	8b 00                	mov    (%eax),%eax
f010a80c:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a80e:	ff 45 f4             	incl   -0xc(%ebp)
f010a811:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a818:	7e d5                	jle    f010a7ef <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a81a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a81d:	8b 40 74             	mov    0x74(%eax),%eax
f010a820:	83 ec 08             	sub    $0x8,%esp
f010a823:	50                   	push   %eax
f010a824:	ff 75 08             	pushl  0x8(%ebp)
f010a827:	e8 13 f8 ff ff       	call   f010a03f <create_user_page_WS>
f010a82c:	83 c4 10             	add    $0x10,%esp
f010a82f:	89 c2                	mov    %eax,%edx
f010a831:	8b 45 08             	mov    0x8(%ebp),%eax
f010a834:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a837:	83 ec 0c             	sub    $0xc,%esp
f010a83a:	ff 75 08             	pushl  0x8(%ebp)
f010a83d:	e8 f3 04 00 00       	call   f010ad35 <share_pws_at_user_space>
f010a842:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a845:	83 ec 0c             	sub    $0xc,%esp
f010a848:	6a 02                	push   $0x2
f010a84a:	e8 e8 36 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f010a84f:	83 c4 10             	add    $0x10,%esp
f010a852:	85 c0                	test   %eax,%eax
f010a854:	0f 84 04 01 00 00    	je     f010a95e <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a85a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a861:	e9 e7 00 00 00       	jmp    f010a94d <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a866:	8b 45 08             	mov    0x8(%ebp),%eax
f010a869:	8b 48 78             	mov    0x78(%eax),%ecx
f010a86c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a86f:	89 d0                	mov    %edx,%eax
f010a871:	01 c0                	add    %eax,%eax
f010a873:	01 d0                	add    %edx,%eax
f010a875:	c1 e0 03             	shl    $0x3,%eax
f010a878:	01 c8                	add    %ecx,%eax
f010a87a:	85 c0                	test   %eax,%eax
f010a87c:	75 17                	jne    f010a895 <initialize_environment+0xf2>
f010a87e:	83 ec 04             	sub    $0x4,%esp
f010a881:	68 68 69 13 f0       	push   $0xf0136968
f010a886:	68 fc 02 00 00       	push   $0x2fc
f010a88b:	68 2d 69 13 f0       	push   $0xf013692d
f010a890:	e8 70 59 ff ff       	call   f0100205 <_panic>
f010a895:	8b 45 08             	mov    0x8(%ebp),%eax
f010a898:	8b 48 78             	mov    0x78(%eax),%ecx
f010a89b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a89e:	89 d0                	mov    %edx,%eax
f010a8a0:	01 c0                	add    %eax,%eax
f010a8a2:	01 d0                	add    %edx,%eax
f010a8a4:	c1 e0 03             	shl    $0x3,%eax
f010a8a7:	01 c8                	add    %ecx,%eax
f010a8a9:	8b 55 08             	mov    0x8(%ebp),%edx
f010a8ac:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a8b2:	89 50 10             	mov    %edx,0x10(%eax)
f010a8b5:	8b 40 10             	mov    0x10(%eax),%eax
f010a8b8:	85 c0                	test   %eax,%eax
f010a8ba:	74 22                	je     f010a8de <initialize_environment+0x13b>
f010a8bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8bf:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a8c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c8:	8b 58 78             	mov    0x78(%eax),%ebx
f010a8cb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a8ce:	89 c8                	mov    %ecx,%eax
f010a8d0:	01 c0                	add    %eax,%eax
f010a8d2:	01 c8                	add    %ecx,%eax
f010a8d4:	c1 e0 03             	shl    $0x3,%eax
f010a8d7:	01 d8                	add    %ebx,%eax
f010a8d9:	89 42 14             	mov    %eax,0x14(%edx)
f010a8dc:	eb 1e                	jmp    f010a8fc <initialize_environment+0x159>
f010a8de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a8e4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a8e7:	89 d0                	mov    %edx,%eax
f010a8e9:	01 c0                	add    %eax,%eax
f010a8eb:	01 d0                	add    %edx,%eax
f010a8ed:	c1 e0 03             	shl    $0x3,%eax
f010a8f0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a8f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f6:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a8fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ff:	8b 48 78             	mov    0x78(%eax),%ecx
f010a902:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a905:	89 d0                	mov    %edx,%eax
f010a907:	01 c0                	add    %eax,%eax
f010a909:	01 d0                	add    %edx,%eax
f010a90b:	c1 e0 03             	shl    $0x3,%eax
f010a90e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a911:	8b 45 08             	mov    0x8(%ebp),%eax
f010a914:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a91a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a91d:	8b 48 78             	mov    0x78(%eax),%ecx
f010a920:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a923:	89 d0                	mov    %edx,%eax
f010a925:	01 c0                	add    %eax,%eax
f010a927:	01 d0                	add    %edx,%eax
f010a929:	c1 e0 03             	shl    $0x3,%eax
f010a92c:	01 c8                	add    %ecx,%eax
f010a92e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a935:	8b 45 08             	mov    0x8(%ebp),%eax
f010a938:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a93e:	8d 50 01             	lea    0x1(%eax),%edx
f010a941:	8b 45 08             	mov    0x8(%ebp),%eax
f010a944:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a94a:	ff 45 f0             	incl   -0x10(%ebp)
f010a94d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a950:	8b 50 74             	mov    0x74(%eax),%edx
f010a953:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a956:	39 c2                	cmp    %eax,%edx
f010a958:	0f 87 08 ff ff ff    	ja     f010a866 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a95e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a965:	eb 50                	jmp    f010a9b7 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a967:	8b 45 08             	mov    0x8(%ebp),%eax
f010a96a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a96d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a970:	89 d0                	mov    %edx,%eax
f010a972:	01 c0                	add    %eax,%eax
f010a974:	01 d0                	add    %edx,%eax
f010a976:	c1 e0 03             	shl    $0x3,%eax
f010a979:	01 c8                	add    %ecx,%eax
f010a97b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a981:	8b 45 08             	mov    0x8(%ebp),%eax
f010a984:	8b 48 78             	mov    0x78(%eax),%ecx
f010a987:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a98a:	89 d0                	mov    %edx,%eax
f010a98c:	01 c0                	add    %eax,%eax
f010a98e:	01 d0                	add    %edx,%eax
f010a990:	c1 e0 03             	shl    $0x3,%eax
f010a993:	01 c8                	add    %ecx,%eax
f010a995:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a999:	8b 45 08             	mov    0x8(%ebp),%eax
f010a99c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a99f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9a2:	89 d0                	mov    %edx,%eax
f010a9a4:	01 c0                	add    %eax,%eax
f010a9a6:	01 d0                	add    %edx,%eax
f010a9a8:	c1 e0 03             	shl    $0x3,%eax
f010a9ab:	01 c8                	add    %ecx,%eax
f010a9ad:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a9b4:	ff 45 f4             	incl   -0xc(%ebp)
f010a9b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ba:	8b 50 74             	mov    0x74(%eax),%edx
f010a9bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9c0:	39 c2                	cmp    %eax,%edx
f010a9c2:	77 a3                	ja     f010a967 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a9c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9c7:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010a9ce:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a9d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a9d8:	eb 50                	jmp    f010aa2a <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a9da:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a9dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9e0:	89 d0                	mov    %edx,%eax
f010a9e2:	01 c0                	add    %eax,%eax
f010a9e4:	01 d0                	add    %edx,%eax
f010a9e6:	c1 e0 03             	shl    $0x3,%eax
f010a9e9:	01 c8                	add    %ecx,%eax
f010a9eb:	83 c0 7c             	add    $0x7c,%eax
f010a9ee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a9f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a9f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9fa:	89 d0                	mov    %edx,%eax
f010a9fc:	01 c0                	add    %eax,%eax
f010a9fe:	01 d0                	add    %edx,%eax
f010aa00:	c1 e0 03             	shl    $0x3,%eax
f010aa03:	01 c8                	add    %ecx,%eax
f010aa05:	83 e8 80             	sub    $0xffffff80,%eax
f010aa08:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010aa0b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa11:	89 d0                	mov    %edx,%eax
f010aa13:	01 c0                	add    %eax,%eax
f010aa15:	01 d0                	add    %edx,%eax
f010aa17:	c1 e0 03             	shl    $0x3,%eax
f010aa1a:	01 c8                	add    %ecx,%eax
f010aa1c:	05 84 00 00 00       	add    $0x84,%eax
f010aa21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010aa27:	ff 45 f4             	incl   -0xc(%ebp)
f010aa2a:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010aa2e:	7e aa                	jle    f010a9da <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010aa30:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa33:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010aa3a:	00 00 00 

	e->pageFaultsCounter=0;
f010aa3d:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa40:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010aa47:	00 00 00 
	e->tableFaultsCounter=0;
f010aa4a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa4d:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010aa54:	00 00 00 

	e->freeingFullWSCounter = 0;
f010aa57:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa5a:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010aa61:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010aa64:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa67:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010aa6e:	00 00 00 

	e->nModifiedPages=0;
f010aa71:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa74:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010aa7b:	00 00 00 
	e->nNotModifiedPages=0;
f010aa7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa81:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010aa88:	00 00 00 
	e->nClocks = 0;
f010aa8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa8e:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010aa95:	00 00 00 

	//2020
	e->nPageIn = 0;
f010aa98:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9b:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010aaa2:	00 00 00 
	e->nPageOut = 0;
f010aaa5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaa8:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010aaaf:	00 00 00 
	e->nNewPageAdded = 0;
f010aab2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab5:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010aabc:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010aabf:	83 ec 0c             	sub    $0xc,%esp
f010aac2:	ff 75 08             	pushl  0x8(%ebp)
f010aac5:	e8 09 00 00 00       	call   f010aad3 <complete_environment_initialization>
f010aaca:	83 c4 10             	add    $0x10,%esp
}
f010aacd:	90                   	nop
f010aace:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aad1:	c9                   	leave  
f010aad2:	c3                   	ret    

f010aad3 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010aad3:	55                   	push   %ebp
f010aad4:	89 e5                	mov    %esp,%ebp
f010aad6:	53                   	push   %ebx
f010aad7:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010aada:	8b 45 08             	mov    0x8(%ebp),%eax
f010aadd:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aae0:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010aae6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae9:	8b 40 60             	mov    0x60(%eax),%eax
f010aaec:	83 c8 03             	or     $0x3,%eax
f010aaef:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010aaf1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaf4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aaf7:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010aafd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab00:	8b 40 60             	mov    0x60(%eax),%eax
f010ab03:	83 c8 05             	or     $0x5,%eax
f010ab06:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010ab08:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab0b:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010ab12:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab15:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010ab1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab1f:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010ab26:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab29:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010ab30:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab33:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010ab36:	83 ec 0c             	sub    $0xc,%esp
f010ab39:	68 b1 02 00 00       	push   $0x2b1
f010ab3e:	e8 f1 56 02 00       	call   f0130234 <log2_ceil>
f010ab43:	83 c4 10             	add    $0x10,%esp
f010ab46:	ba 01 00 00 00       	mov    $0x1,%edx
f010ab4b:	88 c1                	mov    %al,%cl
f010ab4d:	d3 e2                	shl    %cl,%edx
f010ab4f:	89 d0                	mov    %edx,%eax
f010ab51:	01 d8                	add    %ebx,%eax
f010ab53:	89 c3                	mov    %eax,%ebx
f010ab55:	83 ec 0c             	sub    $0xc,%esp
f010ab58:	68 b1 02 00 00       	push   $0x2b1
f010ab5d:	e8 9d 56 02 00       	call   f01301ff <nearest_pow2_ceil>
f010ab62:	83 c4 10             	add    $0x10,%esp
f010ab65:	f7 d8                	neg    %eax
f010ab67:	21 d8                	and    %ebx,%eax
f010ab69:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010ab6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ab70:	7f 1e                	jg     f010ab90 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010ab72:	83 ec 0c             	sub    $0xc,%esp
f010ab75:	68 b1 02 00 00       	push   $0x2b1
f010ab7a:	e8 b5 56 02 00       	call   f0130234 <log2_ceil>
f010ab7f:	83 c4 10             	add    $0x10,%esp
f010ab82:	ba 01 00 00 00       	mov    $0x1,%edx
f010ab87:	88 c1                	mov    %al,%cl
f010ab89:	d3 e2                	shl    %cl,%edx
f010ab8b:	89 d0                	mov    %edx,%eax
f010ab8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010ab90:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab93:	8b 15 f0 13 88 f0    	mov    0xf08813f0,%edx
f010ab99:	29 d0                	sub    %edx,%eax
f010ab9b:	c1 f8 04             	sar    $0x4,%eax
f010ab9e:	89 c2                	mov    %eax,%edx
f010aba0:	89 d0                	mov    %edx,%eax
f010aba2:	c1 e0 03             	shl    $0x3,%eax
f010aba5:	01 d0                	add    %edx,%eax
f010aba7:	01 c0                	add    %eax,%eax
f010aba9:	01 d0                	add    %edx,%eax
f010abab:	c1 e0 03             	shl    $0x3,%eax
f010abae:	01 d0                	add    %edx,%eax
f010abb0:	89 c1                	mov    %eax,%ecx
f010abb2:	c1 e1 08             	shl    $0x8,%ecx
f010abb5:	01 c8                	add    %ecx,%eax
f010abb7:	01 c0                	add    %eax,%eax
f010abb9:	01 d0                	add    %edx,%eax
f010abbb:	01 c0                	add    %eax,%eax
f010abbd:	01 d0                	add    %edx,%eax
f010abbf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010abc6:	01 d0                	add    %edx,%eax
f010abc8:	89 c2                	mov    %eax,%edx
f010abca:	c1 e2 09             	shl    $0x9,%edx
f010abcd:	29 c2                	sub    %eax,%edx
f010abcf:	89 d0                	mov    %edx,%eax
f010abd1:	f7 d8                	neg    %eax
f010abd3:	0b 45 f4             	or     -0xc(%ebp),%eax
f010abd6:	89 c2                	mov    %eax,%edx
f010abd8:	8b 45 08             	mov    0x8(%ebp),%eax
f010abdb:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010abde:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010abe3:	85 c0                	test   %eax,%eax
f010abe5:	75 0c                	jne    f010abf3 <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010abe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010abea:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010abf1:	eb 0e                	jmp    f010ac01 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010abf3:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010abf8:	8b 50 4c             	mov    0x4c(%eax),%edx
f010abfb:	8b 45 08             	mov    0x8(%ebp),%eax
f010abfe:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010ac01:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac04:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010ac0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0e:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010ac15:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac18:	83 ec 04             	sub    $0x4,%esp
f010ac1b:	6a 44                	push   $0x44
f010ac1d:	6a 00                	push   $0x0
f010ac1f:	50                   	push   %eax
f010ac20:	e8 56 6a 02 00       	call   f013167b <memset>
f010ac25:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010ac28:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac2b:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010ac31:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac34:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010ac3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac3d:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010ac43:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac46:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010ac4d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac50:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010ac56:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac59:	8b 40 38             	mov    0x38(%eax),%eax
f010ac5c:	80 cc 02             	or     $0x2,%ah
f010ac5f:	89 c2                	mov    %eax,%edx
f010ac61:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac64:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010ac67:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ac6b:	75 17                	jne    f010ac84 <complete_environment_initialization+0x1b1>
f010ac6d:	83 ec 04             	sub    $0x4,%esp
f010ac70:	68 4a 69 13 f0       	push   $0xf013694a
f010ac75:	68 60 03 00 00       	push   $0x360
f010ac7a:	68 2d 69 13 f0       	push   $0xf013692d
f010ac7f:	e8 81 55 ff ff       	call   f0100205 <_panic>
f010ac84:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac87:	8b 40 44             	mov    0x44(%eax),%eax
f010ac8a:	85 c0                	test   %eax,%eax
f010ac8c:	74 11                	je     f010ac9f <complete_environment_initialization+0x1cc>
f010ac8e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac91:	8b 40 44             	mov    0x44(%eax),%eax
f010ac94:	8b 55 08             	mov    0x8(%ebp),%edx
f010ac97:	8b 52 48             	mov    0x48(%edx),%edx
f010ac9a:	89 50 48             	mov    %edx,0x48(%eax)
f010ac9d:	eb 0b                	jmp    f010acaa <complete_environment_initialization+0x1d7>
f010ac9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aca2:	8b 40 48             	mov    0x48(%eax),%eax
f010aca5:	a3 fc 13 88 f0       	mov    %eax,0xf08813fc
f010acaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010acad:	8b 40 48             	mov    0x48(%eax),%eax
f010acb0:	85 c0                	test   %eax,%eax
f010acb2:	74 11                	je     f010acc5 <complete_environment_initialization+0x1f2>
f010acb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010acb7:	8b 40 48             	mov    0x48(%eax),%eax
f010acba:	8b 55 08             	mov    0x8(%ebp),%edx
f010acbd:	8b 52 44             	mov    0x44(%edx),%edx
f010acc0:	89 50 44             	mov    %edx,0x44(%eax)
f010acc3:	eb 0b                	jmp    f010acd0 <complete_environment_initialization+0x1fd>
f010acc5:	8b 45 08             	mov    0x8(%ebp),%eax
f010acc8:	8b 40 44             	mov    0x44(%eax),%eax
f010accb:	a3 f8 13 88 f0       	mov    %eax,0xf08813f8
f010acd0:	8b 45 08             	mov    0x8(%ebp),%eax
f010acd3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010acda:	8b 45 08             	mov    0x8(%ebp),%eax
f010acdd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ace4:	a1 04 14 88 f0       	mov    0xf0881404,%eax
f010ace9:	48                   	dec    %eax
f010acea:	a3 04 14 88 f0       	mov    %eax,0xf0881404
	return ;
f010acef:	90                   	nop
}
f010acf0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010acf3:	c9                   	leave  
f010acf4:	c3                   	ret    

f010acf5 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010acf5:	55                   	push   %ebp
f010acf6:	89 e5                	mov    %esp,%ebp
f010acf8:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010acfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ad01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad04:	8b 00                	mov    (%eax),%eax
f010ad06:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ad0b:	74 17                	je     f010ad24 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ad0d:	83 ec 04             	sub    $0x4,%esp
f010ad10:	68 83 6a 13 f0       	push   $0xf0136a83
f010ad15:	68 6c 03 00 00       	push   $0x36c
f010ad1a:	68 2d 69 13 f0       	push   $0xf013692d
f010ad1f:	e8 e1 54 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ad24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad27:	8b 40 18             	mov    0x18(%eax),%eax
f010ad2a:	89 c2                	mov    %eax,%edx
f010ad2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad2f:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ad32:	90                   	nop
f010ad33:	c9                   	leave  
f010ad34:	c3                   	ret    

f010ad35 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010ad35:	55                   	push   %ebp
f010ad36:	89 e5                	mov    %esp,%ebp
f010ad38:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010ad3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad3e:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010ad45:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010ad48:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad4b:	8b 40 78             	mov    0x78(%eax),%eax
f010ad4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ad51:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad54:	8b 50 74             	mov    0x74(%eax),%edx
f010ad57:	89 d0                	mov    %edx,%eax
f010ad59:	01 c0                	add    %eax,%eax
f010ad5b:	01 d0                	add    %edx,%eax
f010ad5d:	c1 e0 03             	shl    $0x3,%eax
f010ad60:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010ad63:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad66:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ad6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010ad6f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad72:	8b 40 78             	mov    0x78(%eax),%eax
f010ad75:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ad78:	eb 71                	jmp    f010adeb <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010ad7a:	83 ec 0c             	sub    $0xc,%esp
f010ad7d:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad80:	e8 13 cf ff ff       	call   f0107c98 <kheap_physical_address>
f010ad85:	83 c4 10             	add    $0x10,%esp
f010ad88:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010ad8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad8e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ad91:	83 ec 04             	sub    $0x4,%esp
f010ad94:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010ad97:	52                   	push   %edx
f010ad98:	ff 75 f0             	pushl  -0x10(%ebp)
f010ad9b:	50                   	push   %eax
f010ad9c:	e8 10 bd ff ff       	call   f0106ab1 <get_page_table>
f010ada1:	83 c4 10             	add    $0x10,%esp
f010ada4:	83 f8 01             	cmp    $0x1,%eax
f010ada7:	75 18                	jne    f010adc1 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010ada9:	8b 45 08             	mov    0x8(%ebp),%eax
f010adac:	8b 40 5c             	mov    0x5c(%eax),%eax
f010adaf:	83 ec 08             	sub    $0x8,%esp
f010adb2:	ff 75 f0             	pushl  -0x10(%ebp)
f010adb5:	50                   	push   %eax
f010adb6:	e8 4c be ff ff       	call   f0106c07 <create_page_table>
f010adbb:	83 c4 10             	add    $0x10,%esp
f010adbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010adc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010adc4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010adc7:	c1 ea 0c             	shr    $0xc,%edx
f010adca:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010add0:	c1 e2 02             	shl    $0x2,%edx
f010add3:	01 d0                	add    %edx,%eax
f010add5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010add8:	83 ca 05             	or     $0x5,%edx
f010addb:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010addd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010ade4:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010adeb:	8b 45 08             	mov    0x8(%ebp),%eax
f010adee:	8b 40 78             	mov    0x78(%eax),%eax
f010adf1:	89 c2                	mov    %eax,%edx
f010adf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010adf6:	01 d0                	add    %edx,%eax
f010adf8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010adfb:	0f 87 79 ff ff ff    	ja     f010ad7a <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010ae01:	90                   	nop
f010ae02:	c9                   	leave  
f010ae03:	c3                   	ret    

f010ae04 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010ae04:	55                   	push   %ebp
f010ae05:	89 e5                	mov    %esp,%ebp
f010ae07:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010ae0a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae0d:	8b 50 74             	mov    0x74(%eax),%edx
f010ae10:	89 d0                	mov    %edx,%eax
f010ae12:	01 c0                	add    %eax,%eax
f010ae14:	01 d0                	add    %edx,%eax
f010ae16:	c1 e0 03             	shl    $0x3,%eax
f010ae19:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010ae1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae1f:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ae25:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010ae28:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae2b:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ae31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ae34:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ae37:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010ae3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ae3f:	eb 46                	jmp    f010ae87 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010ae41:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae44:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ae47:	83 ec 04             	sub    $0x4,%esp
f010ae4a:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010ae4d:	52                   	push   %edx
f010ae4e:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae51:	50                   	push   %eax
f010ae52:	e8 5a bc ff ff       	call   f0106ab1 <get_page_table>
f010ae57:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010ae5a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ae5d:	83 ec 0c             	sub    $0xc,%esp
f010ae60:	50                   	push   %eax
f010ae61:	e8 df cc ff ff       	call   f0107b45 <kfree>
f010ae66:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010ae69:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae6c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ae6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae72:	c1 ea 16             	shr    $0x16,%edx
f010ae75:	c1 e2 02             	shl    $0x2,%edx
f010ae78:	01 d0                	add    %edx,%eax
f010ae7a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010ae80:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010ae87:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae8a:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010ae90:	89 c2                	mov    %eax,%edx
f010ae92:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ae95:	01 d0                	add    %edx,%eax
f010ae97:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ae9a:	77 a5                	ja     f010ae41 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ae9c:	0f 20 d8             	mov    %cr3,%eax
f010ae9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010aea2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aea5:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010aea8:	90                   	nop
f010aea9:	c9                   	leave  
f010aeaa:	c3                   	ret    

f010aeab <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010aeab:	55                   	push   %ebp
f010aeac:	89 e5                	mov    %esp,%ebp
f010aeae:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010aeb1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb4:	8b 40 10             	mov    0x10(%eax),%eax
f010aeb7:	8d 48 01             	lea    0x1(%eax),%ecx
f010aeba:	8b 55 08             	mov    0x8(%ebp),%edx
f010aebd:	89 4a 10             	mov    %ecx,0x10(%edx)
f010aec0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010aec3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aec6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010aec9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aecc:	8b 00                	mov    (%eax),%eax
f010aece:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010aed3:	74 17                	je     f010aeec <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010aed5:	83 ec 04             	sub    $0x4,%esp
f010aed8:	68 83 6a 13 f0       	push   $0xf0136a83
f010aedd:	68 b6 03 00 00       	push   $0x3b6
f010aee2:	68 2d 69 13 f0       	push   $0xf013692d
f010aee7:	e8 19 53 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010aeec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aeef:	8b 50 1c             	mov    0x1c(%eax),%edx
f010aef2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aef5:	01 d0                	add    %edx,%eax
f010aef7:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010aefa:	eb 0f                	jmp    f010af0b <PROGRAM_SEGMENT_NEXT+0x60>
f010aefc:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeff:	8b 40 10             	mov    0x10(%eax),%eax
f010af02:	8d 50 01             	lea    0x1(%eax),%edx
f010af05:	8b 45 08             	mov    0x8(%ebp),%eax
f010af08:	89 50 10             	mov    %edx,0x10(%eax)
f010af0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af0e:	8b 40 10             	mov    0x10(%eax),%eax
f010af11:	c1 e0 05             	shl    $0x5,%eax
f010af14:	89 c2                	mov    %eax,%edx
f010af16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010af19:	01 d0                	add    %edx,%eax
f010af1b:	8b 00                	mov    (%eax),%eax
f010af1d:	83 f8 01             	cmp    $0x1,%eax
f010af20:	74 13                	je     f010af35 <PROGRAM_SEGMENT_NEXT+0x8a>
f010af22:	8b 45 08             	mov    0x8(%ebp),%eax
f010af25:	8b 50 10             	mov    0x10(%eax),%edx
f010af28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010af2b:	8b 40 2c             	mov    0x2c(%eax),%eax
f010af2e:	0f b7 c0             	movzwl %ax,%eax
f010af31:	39 c2                	cmp    %eax,%edx
f010af33:	72 c7                	jb     f010aefc <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010af35:	8b 45 08             	mov    0x8(%ebp),%eax
f010af38:	8b 40 10             	mov    0x10(%eax),%eax
f010af3b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010af3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010af41:	8b 40 2c             	mov    0x2c(%eax),%eax
f010af44:	0f b7 c0             	movzwl %ax,%eax
f010af47:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010af4a:	7e 63                	jle    f010afaf <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010af4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af4f:	c1 e0 05             	shl    $0x5,%eax
f010af52:	89 c2                	mov    %eax,%edx
f010af54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010af57:	01 d0                	add    %edx,%eax
f010af59:	8b 50 04             	mov    0x4(%eax),%edx
f010af5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af5f:	01 c2                	add    %eax,%edx
f010af61:	8b 45 08             	mov    0x8(%ebp),%eax
f010af64:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010af66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af69:	c1 e0 05             	shl    $0x5,%eax
f010af6c:	89 c2                	mov    %eax,%edx
f010af6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010af71:	01 d0                	add    %edx,%eax
f010af73:	8b 50 14             	mov    0x14(%eax),%edx
f010af76:	8b 45 08             	mov    0x8(%ebp),%eax
f010af79:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010af7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af7f:	c1 e0 05             	shl    $0x5,%eax
f010af82:	89 c2                	mov    %eax,%edx
f010af84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010af87:	01 d0                	add    %edx,%eax
f010af89:	8b 50 10             	mov    0x10(%eax),%edx
f010af8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af8f:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010af92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af95:	c1 e0 05             	shl    $0x5,%eax
f010af98:	89 c2                	mov    %eax,%edx
f010af9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010af9d:	01 d0                	add    %edx,%eax
f010af9f:	8b 40 08             	mov    0x8(%eax),%eax
f010afa2:	89 c2                	mov    %eax,%edx
f010afa4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afa7:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010afaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010afad:	eb 05                	jmp    f010afb4 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010afaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010afb4:	c9                   	leave  
f010afb5:	c3                   	ret    

f010afb6 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010afb6:	55                   	push   %ebp
f010afb7:	89 e5                	mov    %esp,%ebp
f010afb9:	57                   	push   %edi
f010afba:	56                   	push   %esi
f010afbb:	53                   	push   %ebx
f010afbc:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010afbf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010afc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010afcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010afcf:	8b 00                	mov    (%eax),%eax
f010afd1:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010afd6:	74 17                	je     f010afef <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010afd8:	83 ec 04             	sub    $0x4,%esp
f010afdb:	68 83 6a 13 f0       	push   $0xf0136a83
f010afe0:	68 d2 03 00 00       	push   $0x3d2
f010afe5:	68 2d 69 13 f0       	push   $0xf013692d
f010afea:	e8 16 52 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010afef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aff2:	8b 50 1c             	mov    0x1c(%eax),%edx
f010aff5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aff8:	01 d0                	add    %edx,%eax
f010affa:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010affd:	eb 07                	jmp    f010b006 <PROGRAM_SEGMENT_FIRST+0x50>
f010afff:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b002:	40                   	inc    %eax
f010b003:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b006:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b009:	c1 e0 05             	shl    $0x5,%eax
f010b00c:	89 c2                	mov    %eax,%edx
f010b00e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b011:	01 d0                	add    %edx,%eax
f010b013:	8b 00                	mov    (%eax),%eax
f010b015:	83 f8 01             	cmp    $0x1,%eax
f010b018:	74 10                	je     f010b02a <PROGRAM_SEGMENT_FIRST+0x74>
f010b01a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b01d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b020:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b023:	0f b7 c0             	movzwl %ax,%eax
f010b026:	39 c2                	cmp    %eax,%edx
f010b028:	72 d5                	jb     f010afff <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b02a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b02d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b030:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b033:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b036:	0f b7 c0             	movzwl %ax,%eax
f010b039:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b03c:	7e 68                	jle    f010b0a6 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b03e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b041:	c1 e0 05             	shl    $0x5,%eax
f010b044:	89 c2                	mov    %eax,%edx
f010b046:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b049:	01 d0                	add    %edx,%eax
f010b04b:	8b 50 04             	mov    0x4(%eax),%edx
f010b04e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b051:	01 d0                	add    %edx,%eax
f010b053:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b056:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b059:	c1 e0 05             	shl    $0x5,%eax
f010b05c:	89 c2                	mov    %eax,%edx
f010b05e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b061:	01 d0                	add    %edx,%eax
f010b063:	8b 40 14             	mov    0x14(%eax),%eax
f010b066:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b069:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b06c:	c1 e0 05             	shl    $0x5,%eax
f010b06f:	89 c2                	mov    %eax,%edx
f010b071:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b074:	01 d0                	add    %edx,%eax
f010b076:	8b 40 10             	mov    0x10(%eax),%eax
f010b079:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b07c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b07f:	c1 e0 05             	shl    $0x5,%eax
f010b082:	89 c2                	mov    %eax,%edx
f010b084:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b087:	01 d0                	add    %edx,%eax
f010b089:	8b 40 08             	mov    0x8(%eax),%eax
f010b08c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b08f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b092:	89 c3                	mov    %eax,%ebx
f010b094:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b097:	ba 05 00 00 00       	mov    $0x5,%edx
f010b09c:	89 df                	mov    %ebx,%edi
f010b09e:	89 c6                	mov    %eax,%esi
f010b0a0:	89 d1                	mov    %edx,%ecx
f010b0a2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b0a4:	eb 1c                	jmp    f010b0c2 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b0a6:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b0ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b0:	89 c3                	mov    %eax,%ebx
f010b0b2:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b0b5:	ba 05 00 00 00       	mov    $0x5,%edx
f010b0ba:	89 df                	mov    %ebx,%edi
f010b0bc:	89 c6                	mov    %eax,%esi
f010b0be:	89 d1                	mov    %edx,%ecx
f010b0c0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b0c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b0c8:	5b                   	pop    %ebx
f010b0c9:	5e                   	pop    %esi
f010b0ca:	5f                   	pop    %edi
f010b0cb:	5d                   	pop    %ebp
f010b0cc:	c2 04 00             	ret    $0x4

f010b0cf <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b0cf:	55                   	push   %ebp
f010b0d0:	89 e5                	mov    %esp,%ebp
f010b0d2:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b0d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b0dc:	a1 b8 1c 88 f0       	mov    0xf0881cb8,%eax
f010b0e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b0e4:	e9 c3 00 00 00       	jmp    f010b1ac <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b0e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0ec:	8b 40 10             	mov    0x10(%eax),%eax
f010b0ef:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b0f2:	0f 85 ac 00 00 00    	jne    f010b1a4 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b0f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0fb:	8b 50 0c             	mov    0xc(%eax),%edx
f010b0fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b101:	8b 40 10             	mov    0x10(%eax),%eax
f010b104:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b107:	83 ec 08             	sub    $0x8,%esp
f010b10a:	52                   	push   %edx
f010b10b:	50                   	push   %eax
f010b10c:	e8 a0 cd ff ff       	call   f0107eb1 <pt_clear_page_table_entry>
f010b111:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b114:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b118:	75 17                	jne    f010b131 <cleanup_buffers+0x62>
f010b11a:	83 ec 04             	sub    $0x4,%esp
f010b11d:	68 4a 69 13 f0       	push   $0xf013694a
f010b122:	68 f9 03 00 00       	push   $0x3f9
f010b127:	68 2d 69 13 f0       	push   $0xf013692d
f010b12c:	e8 d4 50 ff ff       	call   f0100205 <_panic>
f010b131:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b134:	8b 00                	mov    (%eax),%eax
f010b136:	85 c0                	test   %eax,%eax
f010b138:	74 10                	je     f010b14a <cleanup_buffers+0x7b>
f010b13a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b13d:	8b 00                	mov    (%eax),%eax
f010b13f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b142:	8b 52 04             	mov    0x4(%edx),%edx
f010b145:	89 50 04             	mov    %edx,0x4(%eax)
f010b148:	eb 0b                	jmp    f010b155 <cleanup_buffers+0x86>
f010b14a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b14d:	8b 40 04             	mov    0x4(%eax),%eax
f010b150:	a3 bc 1c 88 f0       	mov    %eax,0xf0881cbc
f010b155:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b158:	8b 40 04             	mov    0x4(%eax),%eax
f010b15b:	85 c0                	test   %eax,%eax
f010b15d:	74 0f                	je     f010b16e <cleanup_buffers+0x9f>
f010b15f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b162:	8b 40 04             	mov    0x4(%eax),%eax
f010b165:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b168:	8b 12                	mov    (%edx),%edx
f010b16a:	89 10                	mov    %edx,(%eax)
f010b16c:	eb 0a                	jmp    f010b178 <cleanup_buffers+0xa9>
f010b16e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b171:	8b 00                	mov    (%eax),%eax
f010b173:	a3 b8 1c 88 f0       	mov    %eax,0xf0881cb8
f010b178:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b17b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b181:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b184:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b18b:	a1 c4 1c 88 f0       	mov    0xf0881cc4,%eax
f010b190:	48                   	dec    %eax
f010b191:	a3 c4 1c 88 f0       	mov    %eax,0xf0881cc4

			free_frame(ptr_fi);
f010b196:	83 ec 0c             	sub    $0xc,%esp
f010b199:	ff 75 f4             	pushl  -0xc(%ebp)
f010b19c:	e8 66 b8 ff ff       	call   f0106a07 <free_frame>
f010b1a1:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b1a4:	a1 c0 1c 88 f0       	mov    0xf0881cc0,%eax
f010b1a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b1ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b1b0:	74 07                	je     f010b1b9 <cleanup_buffers+0xea>
f010b1b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b1b5:	8b 00                	mov    (%eax),%eax
f010b1b7:	eb 05                	jmp    f010b1be <cleanup_buffers+0xef>
f010b1b9:	b8 00 00 00 00       	mov    $0x0,%eax
f010b1be:	a3 c0 1c 88 f0       	mov    %eax,0xf0881cc0
f010b1c3:	a1 c0 1c 88 f0       	mov    0xf0881cc0,%eax
f010b1c8:	85 c0                	test   %eax,%eax
f010b1ca:	0f 85 19 ff ff ff    	jne    f010b0e9 <cleanup_buffers+0x1a>
f010b1d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b1d4:	0f 85 0f ff ff ff    	jne    f010b0e9 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b1da:	90                   	nop
f010b1db:	c9                   	leave  
f010b1dc:	c3                   	ret    

f010b1dd <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b1dd:	55                   	push   %ebp
f010b1de:	89 e5                	mov    %esp,%ebp
f010b1e0:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b1e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b1e7:	7e 06                	jle    f010b1ef <set_program_priority+0x12>
f010b1e9:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b1ed:	7e 14                	jle    f010b203 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b1ef:	83 ec 04             	sub    $0x4,%esp
f010b1f2:	68 9c 6a 13 f0       	push   $0xf0136a9c
f010b1f7:	6a 10                	push   $0x10
f010b1f9:	68 c0 6a 13 f0       	push   $0xf0136ac0
f010b1fe:	e8 02 50 ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b203:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b207:	74 75                	je     f010b27e <set_program_priority+0xa1>
		return;
	switch(priority)
f010b209:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b20d:	77 56                	ja     f010b265 <set_program_priority+0x88>
f010b20f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b212:	c1 e0 02             	shl    $0x2,%eax
f010b215:	05 fc 6a 13 f0       	add    $0xf0136afc,%eax
f010b21a:	8b 00                	mov    (%eax),%eax
f010b21c:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b21e:	83 ec 08             	sub    $0x8,%esp
f010b221:	6a 01                	push   $0x1
f010b223:	ff 75 08             	pushl  0x8(%ebp)
f010b226:	e8 fd d6 ff ff       	call   f0108928 <half_WS_Size>
f010b22b:	83 c4 10             	add    $0x10,%esp
			break;
f010b22e:	eb 35                	jmp    f010b265 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b230:	83 ec 08             	sub    $0x8,%esp
f010b233:	6a 00                	push   $0x0
f010b235:	ff 75 08             	pushl  0x8(%ebp)
f010b238:	e8 eb d6 ff ff       	call   f0108928 <half_WS_Size>
f010b23d:	83 c4 10             	add    $0x10,%esp
			break;
f010b240:	eb 23                	jmp    f010b265 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b242:	83 ec 08             	sub    $0x8,%esp
f010b245:	6a 01                	push   $0x1
f010b247:	ff 75 08             	pushl  0x8(%ebp)
f010b24a:	e8 bc d6 ff ff       	call   f010890b <double_WS_Size>
f010b24f:	83 c4 10             	add    $0x10,%esp
			break;
f010b252:	eb 11                	jmp    f010b265 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b254:	83 ec 08             	sub    $0x8,%esp
f010b257:	6a 00                	push   $0x0
f010b259:	ff 75 08             	pushl  0x8(%ebp)
f010b25c:	e8 aa d6 ff ff       	call   f010890b <double_WS_Size>
f010b261:	83 c4 10             	add    $0x10,%esp
			break;
f010b264:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b265:	8b 45 08             	mov    0x8(%ebp),%eax
f010b268:	8b 40 74             	mov    0x74(%eax),%eax
f010b26b:	83 ec 08             	sub    $0x8,%esp
f010b26e:	50                   	push   %eax
f010b26f:	68 dd 6a 13 f0       	push   $0xf0136add
f010b274:	e8 95 5a ff ff       	call   f0100d0e <cprintf>
f010b279:	83 c4 10             	add    $0x10,%esp
f010b27c:	eb 01                	jmp    f010b27f <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b27e:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b27f:	c9                   	leave  
f010b280:	c3                   	ret    

f010b281 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b281:	55                   	push   %ebp
f010b282:	89 e5                	mov    %esp,%ebp
f010b284:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b287:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b28e:	eb 29                	jmp    f010b2b9 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b290:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b293:	89 d0                	mov    %edx,%eax
f010b295:	01 c0                	add    %eax,%eax
f010b297:	01 d0                	add    %edx,%eax
f010b299:	c1 e0 02             	shl    $0x2,%eax
f010b29c:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b2a1:	8b 00                	mov    (%eax),%eax
f010b2a3:	83 ec 08             	sub    $0x8,%esp
f010b2a6:	50                   	push   %eax
f010b2a7:	ff 75 08             	pushl  0x8(%ebp)
f010b2aa:	e8 ea 62 02 00       	call   f0131599 <strcmp>
f010b2af:	83 c4 10             	add    $0x10,%esp
f010b2b2:	85 c0                	test   %eax,%eax
f010b2b4:	74 0f                	je     f010b2c5 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b2b6:	ff 45 f4             	incl   -0xc(%ebp)
f010b2b9:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b2be:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b2c1:	7c cd                	jl     f010b290 <get_user_program_info+0xf>
f010b2c3:	eb 01                	jmp    f010b2c6 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b2c5:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b2c6:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b2cb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b2ce:	75 1a                	jne    f010b2ea <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b2d0:	83 ec 08             	sub    $0x8,%esp
f010b2d3:	ff 75 08             	pushl  0x8(%ebp)
f010b2d6:	68 91 76 13 f0       	push   $0xf0137691
f010b2db:	e8 2e 5a ff ff       	call   f0100d0e <cprintf>
f010b2e0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b2e3:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2e8:	eb 11                	jmp    f010b2fb <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b2ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b2ed:	89 d0                	mov    %edx,%eax
f010b2ef:	01 c0                	add    %eax,%eax
f010b2f1:	01 d0                	add    %edx,%eax
f010b2f3:	c1 e0 02             	shl    $0x2,%eax
f010b2f6:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b2fb:	c9                   	leave  
f010b2fc:	c3                   	ret    

f010b2fd <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b2fd:	55                   	push   %ebp
f010b2fe:	89 e5                	mov    %esp,%ebp
f010b300:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b303:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b30a:	eb 30                	jmp    f010b33c <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b30c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b30f:	89 d0                	mov    %edx,%eax
f010b311:	01 c0                	add    %eax,%eax
f010b313:	01 d0                	add    %edx,%eax
f010b315:	c1 e0 02             	shl    $0x2,%eax
f010b318:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b31d:	8b 00                	mov    (%eax),%eax
f010b31f:	8b 55 08             	mov    0x8(%ebp),%edx
f010b322:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b328:	83 ec 08             	sub    $0x8,%esp
f010b32b:	50                   	push   %eax
f010b32c:	52                   	push   %edx
f010b32d:	e8 67 62 02 00       	call   f0131599 <strcmp>
f010b332:	83 c4 10             	add    $0x10,%esp
f010b335:	85 c0                	test   %eax,%eax
f010b337:	74 0f                	je     f010b348 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b339:	ff 45 f4             	incl   -0xc(%ebp)
f010b33c:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b341:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b344:	7c c6                	jl     f010b30c <get_user_program_info_by_env+0xf>
f010b346:	eb 01                	jmp    f010b349 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b348:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b349:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b34e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b351:	75 17                	jne    f010b36a <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b353:	83 ec 0c             	sub    $0xc,%esp
f010b356:	68 ac 76 13 f0       	push   $0xf01376ac
f010b35b:	e8 ae 59 ff ff       	call   f0100d0e <cprintf>
f010b360:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b363:	b8 00 00 00 00       	mov    $0x0,%eax
f010b368:	eb 11                	jmp    f010b37b <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b36a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b36d:	89 d0                	mov    %edx,%eax
f010b36f:	01 c0                	add    %eax,%eax
f010b371:	01 d0                	add    %edx,%eax
f010b373:	c1 e0 02             	shl    $0x2,%eax
f010b376:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b37b:	c9                   	leave  
f010b37c:	c3                   	ret    

f010b37d <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b37d:	55                   	push   %ebp
f010b37e:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b380:	8b 45 08             	mov    0x8(%ebp),%eax
f010b383:	83 f8 13             	cmp    $0x13,%eax
f010b386:	77 0c                	ja     f010b394 <trapname+0x17>
		return excnames[trapno];
f010b388:	8b 45 08             	mov    0x8(%ebp),%eax
f010b38b:	8b 04 85 00 7b 13 f0 	mov    -0xfec8500(,%eax,4),%eax
f010b392:	eb 12                	jmp    f010b3a6 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b394:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b398:	75 07                	jne    f010b3a1 <trapname+0x24>
		return "System call";
f010b39a:	b8 e0 76 13 f0       	mov    $0xf01376e0,%eax
f010b39f:	eb 05                	jmp    f010b3a6 <trapname+0x29>
	return "(unknown trap)";
f010b3a1:	b8 ec 76 13 f0       	mov    $0xf01376ec,%eax
}
f010b3a6:	5d                   	pop    %ebp
f010b3a7:	c3                   	ret    

f010b3a8 <idt_init>:


void
idt_init(void)
{
f010b3a8:	55                   	push   %ebp
f010b3a9:	89 e5                	mov    %esp,%ebp
f010b3ab:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b3ae:	b8 3c ca 10 f0       	mov    $0xf010ca3c,%eax
f010b3b3:	66 a3 90 14 88 f0    	mov    %ax,0xf0881490
f010b3b9:	66 c7 05 92 14 88 f0 	movw   $0x8,0xf0881492
f010b3c0:	08 00 
f010b3c2:	a0 94 14 88 f0       	mov    0xf0881494,%al
f010b3c7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3ca:	a2 94 14 88 f0       	mov    %al,0xf0881494
f010b3cf:	a0 94 14 88 f0       	mov    0xf0881494,%al
f010b3d4:	83 e0 1f             	and    $0x1f,%eax
f010b3d7:	a2 94 14 88 f0       	mov    %al,0xf0881494
f010b3dc:	a0 95 14 88 f0       	mov    0xf0881495,%al
f010b3e1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3e4:	83 c8 0e             	or     $0xe,%eax
f010b3e7:	a2 95 14 88 f0       	mov    %al,0xf0881495
f010b3ec:	a0 95 14 88 f0       	mov    0xf0881495,%al
f010b3f1:	83 e0 ef             	and    $0xffffffef,%eax
f010b3f4:	a2 95 14 88 f0       	mov    %al,0xf0881495
f010b3f9:	a0 95 14 88 f0       	mov    0xf0881495,%al
f010b3fe:	83 e0 9f             	and    $0xffffff9f,%eax
f010b401:	a2 95 14 88 f0       	mov    %al,0xf0881495
f010b406:	a0 95 14 88 f0       	mov    0xf0881495,%al
f010b40b:	83 c8 80             	or     $0xffffff80,%eax
f010b40e:	a2 95 14 88 f0       	mov    %al,0xf0881495
f010b413:	b8 3c ca 10 f0       	mov    $0xf010ca3c,%eax
f010b418:	c1 e8 10             	shr    $0x10,%eax
f010b41b:	66 a3 96 14 88 f0    	mov    %ax,0xf0881496
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b421:	b8 44 ca 10 f0       	mov    $0xf010ca44,%eax
f010b426:	66 a3 a0 15 88 f0    	mov    %ax,0xf08815a0
f010b42c:	66 c7 05 a2 15 88 f0 	movw   $0x8,0xf08815a2
f010b433:	08 00 
f010b435:	a0 a4 15 88 f0       	mov    0xf08815a4,%al
f010b43a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b43d:	a2 a4 15 88 f0       	mov    %al,0xf08815a4
f010b442:	a0 a4 15 88 f0       	mov    0xf08815a4,%al
f010b447:	83 e0 1f             	and    $0x1f,%eax
f010b44a:	a2 a4 15 88 f0       	mov    %al,0xf08815a4
f010b44f:	a0 a5 15 88 f0       	mov    0xf08815a5,%al
f010b454:	83 e0 f0             	and    $0xfffffff0,%eax
f010b457:	83 c8 0e             	or     $0xe,%eax
f010b45a:	a2 a5 15 88 f0       	mov    %al,0xf08815a5
f010b45f:	a0 a5 15 88 f0       	mov    0xf08815a5,%al
f010b464:	83 e0 ef             	and    $0xffffffef,%eax
f010b467:	a2 a5 15 88 f0       	mov    %al,0xf08815a5
f010b46c:	a0 a5 15 88 f0       	mov    0xf08815a5,%al
f010b471:	83 c8 60             	or     $0x60,%eax
f010b474:	a2 a5 15 88 f0       	mov    %al,0xf08815a5
f010b479:	a0 a5 15 88 f0       	mov    0xf08815a5,%al
f010b47e:	83 c8 80             	or     $0xffffff80,%eax
f010b481:	a2 a5 15 88 f0       	mov    %al,0xf08815a5
f010b486:	b8 44 ca 10 f0       	mov    $0xf010ca44,%eax
f010b48b:	c1 e8 10             	shr    $0x10,%eax
f010b48e:	66 a3 a6 15 88 f0    	mov    %ax,0xf08815a6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b494:	b8 4e ca 10 f0       	mov    $0xf010ca4e,%eax
f010b499:	66 a3 60 14 88 f0    	mov    %ax,0xf0881460
f010b49f:	66 c7 05 62 14 88 f0 	movw   $0x8,0xf0881462
f010b4a6:	08 00 
f010b4a8:	a0 64 14 88 f0       	mov    0xf0881464,%al
f010b4ad:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4b0:	a2 64 14 88 f0       	mov    %al,0xf0881464
f010b4b5:	a0 64 14 88 f0       	mov    0xf0881464,%al
f010b4ba:	83 e0 1f             	and    $0x1f,%eax
f010b4bd:	a2 64 14 88 f0       	mov    %al,0xf0881464
f010b4c2:	a0 65 14 88 f0       	mov    0xf0881465,%al
f010b4c7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4ca:	83 c8 0e             	or     $0xe,%eax
f010b4cd:	a2 65 14 88 f0       	mov    %al,0xf0881465
f010b4d2:	a0 65 14 88 f0       	mov    0xf0881465,%al
f010b4d7:	83 e0 ef             	and    $0xffffffef,%eax
f010b4da:	a2 65 14 88 f0       	mov    %al,0xf0881465
f010b4df:	a0 65 14 88 f0       	mov    0xf0881465,%al
f010b4e4:	83 e0 9f             	and    $0xffffff9f,%eax
f010b4e7:	a2 65 14 88 f0       	mov    %al,0xf0881465
f010b4ec:	a0 65 14 88 f0       	mov    0xf0881465,%al
f010b4f1:	83 c8 80             	or     $0xffffff80,%eax
f010b4f4:	a2 65 14 88 f0       	mov    %al,0xf0881465
f010b4f9:	b8 4e ca 10 f0       	mov    $0xf010ca4e,%eax
f010b4fe:	c1 e8 10             	shr    $0x10,%eax
f010b501:	66 a3 66 14 88 f0    	mov    %ax,0xf0881466


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b507:	b8 56 ca 10 f0       	mov    $0xf010ca56,%eax
f010b50c:	66 a3 20 14 88 f0    	mov    %ax,0xf0881420
f010b512:	66 c7 05 22 14 88 f0 	movw   $0x8,0xf0881422
f010b519:	08 00 
f010b51b:	a0 24 14 88 f0       	mov    0xf0881424,%al
f010b520:	83 e0 e0             	and    $0xffffffe0,%eax
f010b523:	a2 24 14 88 f0       	mov    %al,0xf0881424
f010b528:	a0 24 14 88 f0       	mov    0xf0881424,%al
f010b52d:	83 e0 1f             	and    $0x1f,%eax
f010b530:	a2 24 14 88 f0       	mov    %al,0xf0881424
f010b535:	a0 25 14 88 f0       	mov    0xf0881425,%al
f010b53a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b53d:	83 c8 0e             	or     $0xe,%eax
f010b540:	a2 25 14 88 f0       	mov    %al,0xf0881425
f010b545:	a0 25 14 88 f0       	mov    0xf0881425,%al
f010b54a:	83 e0 ef             	and    $0xffffffef,%eax
f010b54d:	a2 25 14 88 f0       	mov    %al,0xf0881425
f010b552:	a0 25 14 88 f0       	mov    0xf0881425,%al
f010b557:	83 c8 60             	or     $0x60,%eax
f010b55a:	a2 25 14 88 f0       	mov    %al,0xf0881425
f010b55f:	a0 25 14 88 f0       	mov    0xf0881425,%al
f010b564:	83 c8 80             	or     $0xffffff80,%eax
f010b567:	a2 25 14 88 f0       	mov    %al,0xf0881425
f010b56c:	b8 56 ca 10 f0       	mov    $0xf010ca56,%eax
f010b571:	c1 e8 10             	shr    $0x10,%eax
f010b574:	66 a3 26 14 88 f0    	mov    %ax,0xf0881426
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b57a:	b8 60 ca 10 f0       	mov    $0xf010ca60,%eax
f010b57f:	66 a3 28 14 88 f0    	mov    %ax,0xf0881428
f010b585:	66 c7 05 2a 14 88 f0 	movw   $0x8,0xf088142a
f010b58c:	08 00 
f010b58e:	a0 2c 14 88 f0       	mov    0xf088142c,%al
f010b593:	83 e0 e0             	and    $0xffffffe0,%eax
f010b596:	a2 2c 14 88 f0       	mov    %al,0xf088142c
f010b59b:	a0 2c 14 88 f0       	mov    0xf088142c,%al
f010b5a0:	83 e0 1f             	and    $0x1f,%eax
f010b5a3:	a2 2c 14 88 f0       	mov    %al,0xf088142c
f010b5a8:	a0 2d 14 88 f0       	mov    0xf088142d,%al
f010b5ad:	83 c8 0f             	or     $0xf,%eax
f010b5b0:	a2 2d 14 88 f0       	mov    %al,0xf088142d
f010b5b5:	a0 2d 14 88 f0       	mov    0xf088142d,%al
f010b5ba:	83 e0 ef             	and    $0xffffffef,%eax
f010b5bd:	a2 2d 14 88 f0       	mov    %al,0xf088142d
f010b5c2:	a0 2d 14 88 f0       	mov    0xf088142d,%al
f010b5c7:	83 c8 60             	or     $0x60,%eax
f010b5ca:	a2 2d 14 88 f0       	mov    %al,0xf088142d
f010b5cf:	a0 2d 14 88 f0       	mov    0xf088142d,%al
f010b5d4:	83 c8 80             	or     $0xffffff80,%eax
f010b5d7:	a2 2d 14 88 f0       	mov    %al,0xf088142d
f010b5dc:	b8 60 ca 10 f0       	mov    $0xf010ca60,%eax
f010b5e1:	c1 e8 10             	shr    $0x10,%eax
f010b5e4:	66 a3 2e 14 88 f0    	mov    %ax,0xf088142e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b5ea:	b8 6a ca 10 f0       	mov    $0xf010ca6a,%eax
f010b5ef:	66 a3 30 14 88 f0    	mov    %ax,0xf0881430
f010b5f5:	66 c7 05 32 14 88 f0 	movw   $0x8,0xf0881432
f010b5fc:	08 00 
f010b5fe:	a0 34 14 88 f0       	mov    0xf0881434,%al
f010b603:	83 e0 e0             	and    $0xffffffe0,%eax
f010b606:	a2 34 14 88 f0       	mov    %al,0xf0881434
f010b60b:	a0 34 14 88 f0       	mov    0xf0881434,%al
f010b610:	83 e0 1f             	and    $0x1f,%eax
f010b613:	a2 34 14 88 f0       	mov    %al,0xf0881434
f010b618:	a0 35 14 88 f0       	mov    0xf0881435,%al
f010b61d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b620:	83 c8 0e             	or     $0xe,%eax
f010b623:	a2 35 14 88 f0       	mov    %al,0xf0881435
f010b628:	a0 35 14 88 f0       	mov    0xf0881435,%al
f010b62d:	83 e0 ef             	and    $0xffffffef,%eax
f010b630:	a2 35 14 88 f0       	mov    %al,0xf0881435
f010b635:	a0 35 14 88 f0       	mov    0xf0881435,%al
f010b63a:	83 c8 60             	or     $0x60,%eax
f010b63d:	a2 35 14 88 f0       	mov    %al,0xf0881435
f010b642:	a0 35 14 88 f0       	mov    0xf0881435,%al
f010b647:	83 c8 80             	or     $0xffffff80,%eax
f010b64a:	a2 35 14 88 f0       	mov    %al,0xf0881435
f010b64f:	b8 6a ca 10 f0       	mov    $0xf010ca6a,%eax
f010b654:	c1 e8 10             	shr    $0x10,%eax
f010b657:	66 a3 36 14 88 f0    	mov    %ax,0xf0881436
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b65d:	b8 74 ca 10 f0       	mov    $0xf010ca74,%eax
f010b662:	66 a3 38 14 88 f0    	mov    %ax,0xf0881438
f010b668:	66 c7 05 3a 14 88 f0 	movw   $0x8,0xf088143a
f010b66f:	08 00 
f010b671:	a0 3c 14 88 f0       	mov    0xf088143c,%al
f010b676:	83 e0 e0             	and    $0xffffffe0,%eax
f010b679:	a2 3c 14 88 f0       	mov    %al,0xf088143c
f010b67e:	a0 3c 14 88 f0       	mov    0xf088143c,%al
f010b683:	83 e0 1f             	and    $0x1f,%eax
f010b686:	a2 3c 14 88 f0       	mov    %al,0xf088143c
f010b68b:	a0 3d 14 88 f0       	mov    0xf088143d,%al
f010b690:	83 c8 0f             	or     $0xf,%eax
f010b693:	a2 3d 14 88 f0       	mov    %al,0xf088143d
f010b698:	a0 3d 14 88 f0       	mov    0xf088143d,%al
f010b69d:	83 e0 ef             	and    $0xffffffef,%eax
f010b6a0:	a2 3d 14 88 f0       	mov    %al,0xf088143d
f010b6a5:	a0 3d 14 88 f0       	mov    0xf088143d,%al
f010b6aa:	83 c8 60             	or     $0x60,%eax
f010b6ad:	a2 3d 14 88 f0       	mov    %al,0xf088143d
f010b6b2:	a0 3d 14 88 f0       	mov    0xf088143d,%al
f010b6b7:	83 c8 80             	or     $0xffffff80,%eax
f010b6ba:	a2 3d 14 88 f0       	mov    %al,0xf088143d
f010b6bf:	b8 74 ca 10 f0       	mov    $0xf010ca74,%eax
f010b6c4:	c1 e8 10             	shr    $0x10,%eax
f010b6c7:	66 a3 3e 14 88 f0    	mov    %ax,0xf088143e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b6cd:	b8 7e ca 10 f0       	mov    $0xf010ca7e,%eax
f010b6d2:	66 a3 40 14 88 f0    	mov    %ax,0xf0881440
f010b6d8:	66 c7 05 42 14 88 f0 	movw   $0x8,0xf0881442
f010b6df:	08 00 
f010b6e1:	a0 44 14 88 f0       	mov    0xf0881444,%al
f010b6e6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6e9:	a2 44 14 88 f0       	mov    %al,0xf0881444
f010b6ee:	a0 44 14 88 f0       	mov    0xf0881444,%al
f010b6f3:	83 e0 1f             	and    $0x1f,%eax
f010b6f6:	a2 44 14 88 f0       	mov    %al,0xf0881444
f010b6fb:	a0 45 14 88 f0       	mov    0xf0881445,%al
f010b700:	83 c8 0f             	or     $0xf,%eax
f010b703:	a2 45 14 88 f0       	mov    %al,0xf0881445
f010b708:	a0 45 14 88 f0       	mov    0xf0881445,%al
f010b70d:	83 e0 ef             	and    $0xffffffef,%eax
f010b710:	a2 45 14 88 f0       	mov    %al,0xf0881445
f010b715:	a0 45 14 88 f0       	mov    0xf0881445,%al
f010b71a:	83 c8 60             	or     $0x60,%eax
f010b71d:	a2 45 14 88 f0       	mov    %al,0xf0881445
f010b722:	a0 45 14 88 f0       	mov    0xf0881445,%al
f010b727:	83 c8 80             	or     $0xffffff80,%eax
f010b72a:	a2 45 14 88 f0       	mov    %al,0xf0881445
f010b72f:	b8 7e ca 10 f0       	mov    $0xf010ca7e,%eax
f010b734:	c1 e8 10             	shr    $0x10,%eax
f010b737:	66 a3 46 14 88 f0    	mov    %ax,0xf0881446
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b73d:	b8 88 ca 10 f0       	mov    $0xf010ca88,%eax
f010b742:	66 a3 48 14 88 f0    	mov    %ax,0xf0881448
f010b748:	66 c7 05 4a 14 88 f0 	movw   $0x8,0xf088144a
f010b74f:	08 00 
f010b751:	a0 4c 14 88 f0       	mov    0xf088144c,%al
f010b756:	83 e0 e0             	and    $0xffffffe0,%eax
f010b759:	a2 4c 14 88 f0       	mov    %al,0xf088144c
f010b75e:	a0 4c 14 88 f0       	mov    0xf088144c,%al
f010b763:	83 e0 1f             	and    $0x1f,%eax
f010b766:	a2 4c 14 88 f0       	mov    %al,0xf088144c
f010b76b:	a0 4d 14 88 f0       	mov    0xf088144d,%al
f010b770:	83 e0 f0             	and    $0xfffffff0,%eax
f010b773:	83 c8 0e             	or     $0xe,%eax
f010b776:	a2 4d 14 88 f0       	mov    %al,0xf088144d
f010b77b:	a0 4d 14 88 f0       	mov    0xf088144d,%al
f010b780:	83 e0 ef             	and    $0xffffffef,%eax
f010b783:	a2 4d 14 88 f0       	mov    %al,0xf088144d
f010b788:	a0 4d 14 88 f0       	mov    0xf088144d,%al
f010b78d:	83 c8 60             	or     $0x60,%eax
f010b790:	a2 4d 14 88 f0       	mov    %al,0xf088144d
f010b795:	a0 4d 14 88 f0       	mov    0xf088144d,%al
f010b79a:	83 c8 80             	or     $0xffffff80,%eax
f010b79d:	a2 4d 14 88 f0       	mov    %al,0xf088144d
f010b7a2:	b8 88 ca 10 f0       	mov    $0xf010ca88,%eax
f010b7a7:	c1 e8 10             	shr    $0x10,%eax
f010b7aa:	66 a3 4e 14 88 f0    	mov    %ax,0xf088144e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b7b0:	b8 92 ca 10 f0       	mov    $0xf010ca92,%eax
f010b7b5:	66 a3 50 14 88 f0    	mov    %ax,0xf0881450
f010b7bb:	66 c7 05 52 14 88 f0 	movw   $0x8,0xf0881452
f010b7c2:	08 00 
f010b7c4:	a0 54 14 88 f0       	mov    0xf0881454,%al
f010b7c9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7cc:	a2 54 14 88 f0       	mov    %al,0xf0881454
f010b7d1:	a0 54 14 88 f0       	mov    0xf0881454,%al
f010b7d6:	83 e0 1f             	and    $0x1f,%eax
f010b7d9:	a2 54 14 88 f0       	mov    %al,0xf0881454
f010b7de:	a0 55 14 88 f0       	mov    0xf0881455,%al
f010b7e3:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7e6:	83 c8 0e             	or     $0xe,%eax
f010b7e9:	a2 55 14 88 f0       	mov    %al,0xf0881455
f010b7ee:	a0 55 14 88 f0       	mov    0xf0881455,%al
f010b7f3:	83 e0 ef             	and    $0xffffffef,%eax
f010b7f6:	a2 55 14 88 f0       	mov    %al,0xf0881455
f010b7fb:	a0 55 14 88 f0       	mov    0xf0881455,%al
f010b800:	83 c8 60             	or     $0x60,%eax
f010b803:	a2 55 14 88 f0       	mov    %al,0xf0881455
f010b808:	a0 55 14 88 f0       	mov    0xf0881455,%al
f010b80d:	83 c8 80             	or     $0xffffff80,%eax
f010b810:	a2 55 14 88 f0       	mov    %al,0xf0881455
f010b815:	b8 92 ca 10 f0       	mov    $0xf010ca92,%eax
f010b81a:	c1 e8 10             	shr    $0x10,%eax
f010b81d:	66 a3 56 14 88 f0    	mov    %ax,0xf0881456
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b823:	b8 9c ca 10 f0       	mov    $0xf010ca9c,%eax
f010b828:	66 a3 58 14 88 f0    	mov    %ax,0xf0881458
f010b82e:	66 c7 05 5a 14 88 f0 	movw   $0x8,0xf088145a
f010b835:	08 00 
f010b837:	a0 5c 14 88 f0       	mov    0xf088145c,%al
f010b83c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b83f:	a2 5c 14 88 f0       	mov    %al,0xf088145c
f010b844:	a0 5c 14 88 f0       	mov    0xf088145c,%al
f010b849:	83 e0 1f             	and    $0x1f,%eax
f010b84c:	a2 5c 14 88 f0       	mov    %al,0xf088145c
f010b851:	a0 5d 14 88 f0       	mov    0xf088145d,%al
f010b856:	83 e0 f0             	and    $0xfffffff0,%eax
f010b859:	83 c8 0e             	or     $0xe,%eax
f010b85c:	a2 5d 14 88 f0       	mov    %al,0xf088145d
f010b861:	a0 5d 14 88 f0       	mov    0xf088145d,%al
f010b866:	83 e0 ef             	and    $0xffffffef,%eax
f010b869:	a2 5d 14 88 f0       	mov    %al,0xf088145d
f010b86e:	a0 5d 14 88 f0       	mov    0xf088145d,%al
f010b873:	83 c8 60             	or     $0x60,%eax
f010b876:	a2 5d 14 88 f0       	mov    %al,0xf088145d
f010b87b:	a0 5d 14 88 f0       	mov    0xf088145d,%al
f010b880:	83 c8 80             	or     $0xffffff80,%eax
f010b883:	a2 5d 14 88 f0       	mov    %al,0xf088145d
f010b888:	b8 9c ca 10 f0       	mov    $0xf010ca9c,%eax
f010b88d:	c1 e8 10             	shr    $0x10,%eax
f010b890:	66 a3 5e 14 88 f0    	mov    %ax,0xf088145e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b896:	b8 a6 ca 10 f0       	mov    $0xf010caa6,%eax
f010b89b:	66 a3 70 14 88 f0    	mov    %ax,0xf0881470
f010b8a1:	66 c7 05 72 14 88 f0 	movw   $0x8,0xf0881472
f010b8a8:	08 00 
f010b8aa:	a0 74 14 88 f0       	mov    0xf0881474,%al
f010b8af:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8b2:	a2 74 14 88 f0       	mov    %al,0xf0881474
f010b8b7:	a0 74 14 88 f0       	mov    0xf0881474,%al
f010b8bc:	83 e0 1f             	and    $0x1f,%eax
f010b8bf:	a2 74 14 88 f0       	mov    %al,0xf0881474
f010b8c4:	a0 75 14 88 f0       	mov    0xf0881475,%al
f010b8c9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8cc:	83 c8 0e             	or     $0xe,%eax
f010b8cf:	a2 75 14 88 f0       	mov    %al,0xf0881475
f010b8d4:	a0 75 14 88 f0       	mov    0xf0881475,%al
f010b8d9:	83 e0 ef             	and    $0xffffffef,%eax
f010b8dc:	a2 75 14 88 f0       	mov    %al,0xf0881475
f010b8e1:	a0 75 14 88 f0       	mov    0xf0881475,%al
f010b8e6:	83 c8 60             	or     $0x60,%eax
f010b8e9:	a2 75 14 88 f0       	mov    %al,0xf0881475
f010b8ee:	a0 75 14 88 f0       	mov    0xf0881475,%al
f010b8f3:	83 c8 80             	or     $0xffffff80,%eax
f010b8f6:	a2 75 14 88 f0       	mov    %al,0xf0881475
f010b8fb:	b8 a6 ca 10 f0       	mov    $0xf010caa6,%eax
f010b900:	c1 e8 10             	shr    $0x10,%eax
f010b903:	66 a3 76 14 88 f0    	mov    %ax,0xf0881476
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b909:	b8 ae ca 10 f0       	mov    $0xf010caae,%eax
f010b90e:	66 a3 78 14 88 f0    	mov    %ax,0xf0881478
f010b914:	66 c7 05 7a 14 88 f0 	movw   $0x8,0xf088147a
f010b91b:	08 00 
f010b91d:	a0 7c 14 88 f0       	mov    0xf088147c,%al
f010b922:	83 e0 e0             	and    $0xffffffe0,%eax
f010b925:	a2 7c 14 88 f0       	mov    %al,0xf088147c
f010b92a:	a0 7c 14 88 f0       	mov    0xf088147c,%al
f010b92f:	83 e0 1f             	and    $0x1f,%eax
f010b932:	a2 7c 14 88 f0       	mov    %al,0xf088147c
f010b937:	a0 7d 14 88 f0       	mov    0xf088147d,%al
f010b93c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b93f:	83 c8 0e             	or     $0xe,%eax
f010b942:	a2 7d 14 88 f0       	mov    %al,0xf088147d
f010b947:	a0 7d 14 88 f0       	mov    0xf088147d,%al
f010b94c:	83 e0 ef             	and    $0xffffffef,%eax
f010b94f:	a2 7d 14 88 f0       	mov    %al,0xf088147d
f010b954:	a0 7d 14 88 f0       	mov    0xf088147d,%al
f010b959:	83 c8 60             	or     $0x60,%eax
f010b95c:	a2 7d 14 88 f0       	mov    %al,0xf088147d
f010b961:	a0 7d 14 88 f0       	mov    0xf088147d,%al
f010b966:	83 c8 80             	or     $0xffffff80,%eax
f010b969:	a2 7d 14 88 f0       	mov    %al,0xf088147d
f010b96e:	b8 ae ca 10 f0       	mov    $0xf010caae,%eax
f010b973:	c1 e8 10             	shr    $0x10,%eax
f010b976:	66 a3 7e 14 88 f0    	mov    %ax,0xf088147e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b97c:	b8 b2 ca 10 f0       	mov    $0xf010cab2,%eax
f010b981:	66 a3 80 14 88 f0    	mov    %ax,0xf0881480
f010b987:	66 c7 05 82 14 88 f0 	movw   $0x8,0xf0881482
f010b98e:	08 00 
f010b990:	a0 84 14 88 f0       	mov    0xf0881484,%al
f010b995:	83 e0 e0             	and    $0xffffffe0,%eax
f010b998:	a2 84 14 88 f0       	mov    %al,0xf0881484
f010b99d:	a0 84 14 88 f0       	mov    0xf0881484,%al
f010b9a2:	83 e0 1f             	and    $0x1f,%eax
f010b9a5:	a2 84 14 88 f0       	mov    %al,0xf0881484
f010b9aa:	a0 85 14 88 f0       	mov    0xf0881485,%al
f010b9af:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9b2:	83 c8 0e             	or     $0xe,%eax
f010b9b5:	a2 85 14 88 f0       	mov    %al,0xf0881485
f010b9ba:	a0 85 14 88 f0       	mov    0xf0881485,%al
f010b9bf:	83 e0 ef             	and    $0xffffffef,%eax
f010b9c2:	a2 85 14 88 f0       	mov    %al,0xf0881485
f010b9c7:	a0 85 14 88 f0       	mov    0xf0881485,%al
f010b9cc:	83 c8 60             	or     $0x60,%eax
f010b9cf:	a2 85 14 88 f0       	mov    %al,0xf0881485
f010b9d4:	a0 85 14 88 f0       	mov    0xf0881485,%al
f010b9d9:	83 c8 80             	or     $0xffffff80,%eax
f010b9dc:	a2 85 14 88 f0       	mov    %al,0xf0881485
f010b9e1:	b8 b2 ca 10 f0       	mov    $0xf010cab2,%eax
f010b9e6:	c1 e8 10             	shr    $0x10,%eax
f010b9e9:	66 a3 86 14 88 f0    	mov    %ax,0xf0881486
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b9ef:	b8 b6 ca 10 f0       	mov    $0xf010cab6,%eax
f010b9f4:	66 a3 88 14 88 f0    	mov    %ax,0xf0881488
f010b9fa:	66 c7 05 8a 14 88 f0 	movw   $0x8,0xf088148a
f010ba01:	08 00 
f010ba03:	a0 8c 14 88 f0       	mov    0xf088148c,%al
f010ba08:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba0b:	a2 8c 14 88 f0       	mov    %al,0xf088148c
f010ba10:	a0 8c 14 88 f0       	mov    0xf088148c,%al
f010ba15:	83 e0 1f             	and    $0x1f,%eax
f010ba18:	a2 8c 14 88 f0       	mov    %al,0xf088148c
f010ba1d:	a0 8d 14 88 f0       	mov    0xf088148d,%al
f010ba22:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba25:	83 c8 0e             	or     $0xe,%eax
f010ba28:	a2 8d 14 88 f0       	mov    %al,0xf088148d
f010ba2d:	a0 8d 14 88 f0       	mov    0xf088148d,%al
f010ba32:	83 e0 ef             	and    $0xffffffef,%eax
f010ba35:	a2 8d 14 88 f0       	mov    %al,0xf088148d
f010ba3a:	a0 8d 14 88 f0       	mov    0xf088148d,%al
f010ba3f:	83 c8 60             	or     $0x60,%eax
f010ba42:	a2 8d 14 88 f0       	mov    %al,0xf088148d
f010ba47:	a0 8d 14 88 f0       	mov    0xf088148d,%al
f010ba4c:	83 c8 80             	or     $0xffffff80,%eax
f010ba4f:	a2 8d 14 88 f0       	mov    %al,0xf088148d
f010ba54:	b8 b6 ca 10 f0       	mov    $0xf010cab6,%eax
f010ba59:	c1 e8 10             	shr    $0x10,%eax
f010ba5c:	66 a3 8e 14 88 f0    	mov    %ax,0xf088148e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010ba62:	b8 ba ca 10 f0       	mov    $0xf010caba,%eax
f010ba67:	66 a3 a0 14 88 f0    	mov    %ax,0xf08814a0
f010ba6d:	66 c7 05 a2 14 88 f0 	movw   $0x8,0xf08814a2
f010ba74:	08 00 
f010ba76:	a0 a4 14 88 f0       	mov    0xf08814a4,%al
f010ba7b:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba7e:	a2 a4 14 88 f0       	mov    %al,0xf08814a4
f010ba83:	a0 a4 14 88 f0       	mov    0xf08814a4,%al
f010ba88:	83 e0 1f             	and    $0x1f,%eax
f010ba8b:	a2 a4 14 88 f0       	mov    %al,0xf08814a4
f010ba90:	a0 a5 14 88 f0       	mov    0xf08814a5,%al
f010ba95:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba98:	83 c8 0e             	or     $0xe,%eax
f010ba9b:	a2 a5 14 88 f0       	mov    %al,0xf08814a5
f010baa0:	a0 a5 14 88 f0       	mov    0xf08814a5,%al
f010baa5:	83 e0 ef             	and    $0xffffffef,%eax
f010baa8:	a2 a5 14 88 f0       	mov    %al,0xf08814a5
f010baad:	a0 a5 14 88 f0       	mov    0xf08814a5,%al
f010bab2:	83 c8 60             	or     $0x60,%eax
f010bab5:	a2 a5 14 88 f0       	mov    %al,0xf08814a5
f010baba:	a0 a5 14 88 f0       	mov    0xf08814a5,%al
f010babf:	83 c8 80             	or     $0xffffff80,%eax
f010bac2:	a2 a5 14 88 f0       	mov    %al,0xf08814a5
f010bac7:	b8 ba ca 10 f0       	mov    $0xf010caba,%eax
f010bacc:	c1 e8 10             	shr    $0x10,%eax
f010bacf:	66 a3 a6 14 88 f0    	mov    %ax,0xf08814a6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bad5:	b8 c0 ca 10 f0       	mov    $0xf010cac0,%eax
f010bada:	66 a3 a8 14 88 f0    	mov    %ax,0xf08814a8
f010bae0:	66 c7 05 aa 14 88 f0 	movw   $0x8,0xf08814aa
f010bae7:	08 00 
f010bae9:	a0 ac 14 88 f0       	mov    0xf08814ac,%al
f010baee:	83 e0 e0             	and    $0xffffffe0,%eax
f010baf1:	a2 ac 14 88 f0       	mov    %al,0xf08814ac
f010baf6:	a0 ac 14 88 f0       	mov    0xf08814ac,%al
f010bafb:	83 e0 1f             	and    $0x1f,%eax
f010bafe:	a2 ac 14 88 f0       	mov    %al,0xf08814ac
f010bb03:	a0 ad 14 88 f0       	mov    0xf08814ad,%al
f010bb08:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb0b:	83 c8 0e             	or     $0xe,%eax
f010bb0e:	a2 ad 14 88 f0       	mov    %al,0xf08814ad
f010bb13:	a0 ad 14 88 f0       	mov    0xf08814ad,%al
f010bb18:	83 e0 ef             	and    $0xffffffef,%eax
f010bb1b:	a2 ad 14 88 f0       	mov    %al,0xf08814ad
f010bb20:	a0 ad 14 88 f0       	mov    0xf08814ad,%al
f010bb25:	83 c8 60             	or     $0x60,%eax
f010bb28:	a2 ad 14 88 f0       	mov    %al,0xf08814ad
f010bb2d:	a0 ad 14 88 f0       	mov    0xf08814ad,%al
f010bb32:	83 c8 80             	or     $0xffffff80,%eax
f010bb35:	a2 ad 14 88 f0       	mov    %al,0xf08814ad
f010bb3a:	b8 c0 ca 10 f0       	mov    $0xf010cac0,%eax
f010bb3f:	c1 e8 10             	shr    $0x10,%eax
f010bb42:	66 a3 ae 14 88 f0    	mov    %ax,0xf08814ae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bb48:	b8 c4 ca 10 f0       	mov    $0xf010cac4,%eax
f010bb4d:	66 a3 b0 14 88 f0    	mov    %ax,0xf08814b0
f010bb53:	66 c7 05 b2 14 88 f0 	movw   $0x8,0xf08814b2
f010bb5a:	08 00 
f010bb5c:	a0 b4 14 88 f0       	mov    0xf08814b4,%al
f010bb61:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb64:	a2 b4 14 88 f0       	mov    %al,0xf08814b4
f010bb69:	a0 b4 14 88 f0       	mov    0xf08814b4,%al
f010bb6e:	83 e0 1f             	and    $0x1f,%eax
f010bb71:	a2 b4 14 88 f0       	mov    %al,0xf08814b4
f010bb76:	a0 b5 14 88 f0       	mov    0xf08814b5,%al
f010bb7b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb7e:	83 c8 0e             	or     $0xe,%eax
f010bb81:	a2 b5 14 88 f0       	mov    %al,0xf08814b5
f010bb86:	a0 b5 14 88 f0       	mov    0xf08814b5,%al
f010bb8b:	83 e0 ef             	and    $0xffffffef,%eax
f010bb8e:	a2 b5 14 88 f0       	mov    %al,0xf08814b5
f010bb93:	a0 b5 14 88 f0       	mov    0xf08814b5,%al
f010bb98:	83 c8 60             	or     $0x60,%eax
f010bb9b:	a2 b5 14 88 f0       	mov    %al,0xf08814b5
f010bba0:	a0 b5 14 88 f0       	mov    0xf08814b5,%al
f010bba5:	83 c8 80             	or     $0xffffff80,%eax
f010bba8:	a2 b5 14 88 f0       	mov    %al,0xf08814b5
f010bbad:	b8 c4 ca 10 f0       	mov    $0xf010cac4,%eax
f010bbb2:	c1 e8 10             	shr    $0x10,%eax
f010bbb5:	66 a3 b6 14 88 f0    	mov    %ax,0xf08814b6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bbbb:	b8 ca ca 10 f0       	mov    $0xf010caca,%eax
f010bbc0:	66 a3 b8 14 88 f0    	mov    %ax,0xf08814b8
f010bbc6:	66 c7 05 ba 14 88 f0 	movw   $0x8,0xf08814ba
f010bbcd:	08 00 
f010bbcf:	a0 bc 14 88 f0       	mov    0xf08814bc,%al
f010bbd4:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbd7:	a2 bc 14 88 f0       	mov    %al,0xf08814bc
f010bbdc:	a0 bc 14 88 f0       	mov    0xf08814bc,%al
f010bbe1:	83 e0 1f             	and    $0x1f,%eax
f010bbe4:	a2 bc 14 88 f0       	mov    %al,0xf08814bc
f010bbe9:	a0 bd 14 88 f0       	mov    0xf08814bd,%al
f010bbee:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbf1:	83 c8 0e             	or     $0xe,%eax
f010bbf4:	a2 bd 14 88 f0       	mov    %al,0xf08814bd
f010bbf9:	a0 bd 14 88 f0       	mov    0xf08814bd,%al
f010bbfe:	83 e0 ef             	and    $0xffffffef,%eax
f010bc01:	a2 bd 14 88 f0       	mov    %al,0xf08814bd
f010bc06:	a0 bd 14 88 f0       	mov    0xf08814bd,%al
f010bc0b:	83 c8 60             	or     $0x60,%eax
f010bc0e:	a2 bd 14 88 f0       	mov    %al,0xf08814bd
f010bc13:	a0 bd 14 88 f0       	mov    0xf08814bd,%al
f010bc18:	83 c8 80             	or     $0xffffff80,%eax
f010bc1b:	a2 bd 14 88 f0       	mov    %al,0xf08814bd
f010bc20:	b8 ca ca 10 f0       	mov    $0xf010caca,%eax
f010bc25:	c1 e8 10             	shr    $0x10,%eax
f010bc28:	66 a3 be 14 88 f0    	mov    %ax,0xf08814be


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010bc2e:	b8 d0 ca 10 f0       	mov    $0xf010cad0,%eax
f010bc33:	66 a3 20 15 88 f0    	mov    %ax,0xf0881520
f010bc39:	66 c7 05 22 15 88 f0 	movw   $0x8,0xf0881522
f010bc40:	08 00 
f010bc42:	a0 24 15 88 f0       	mov    0xf0881524,%al
f010bc47:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc4a:	a2 24 15 88 f0       	mov    %al,0xf0881524
f010bc4f:	a0 24 15 88 f0       	mov    0xf0881524,%al
f010bc54:	83 e0 1f             	and    $0x1f,%eax
f010bc57:	a2 24 15 88 f0       	mov    %al,0xf0881524
f010bc5c:	a0 25 15 88 f0       	mov    0xf0881525,%al
f010bc61:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc64:	83 c8 0e             	or     $0xe,%eax
f010bc67:	a2 25 15 88 f0       	mov    %al,0xf0881525
f010bc6c:	a0 25 15 88 f0       	mov    0xf0881525,%al
f010bc71:	83 e0 ef             	and    $0xffffffef,%eax
f010bc74:	a2 25 15 88 f0       	mov    %al,0xf0881525
f010bc79:	a0 25 15 88 f0       	mov    0xf0881525,%al
f010bc7e:	83 c8 60             	or     $0x60,%eax
f010bc81:	a2 25 15 88 f0       	mov    %al,0xf0881525
f010bc86:	a0 25 15 88 f0       	mov    0xf0881525,%al
f010bc8b:	83 c8 80             	or     $0xffffff80,%eax
f010bc8e:	a2 25 15 88 f0       	mov    %al,0xf0881525
f010bc93:	b8 d0 ca 10 f0       	mov    $0xf010cad0,%eax
f010bc98:	c1 e8 10             	shr    $0x10,%eax
f010bc9b:	66 a3 26 15 88 f0    	mov    %ax,0xf0881526
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010bca1:	b8 d6 ca 10 f0       	mov    $0xf010cad6,%eax
f010bca6:	66 a3 28 15 88 f0    	mov    %ax,0xf0881528
f010bcac:	66 c7 05 2a 15 88 f0 	movw   $0x8,0xf088152a
f010bcb3:	08 00 
f010bcb5:	a0 2c 15 88 f0       	mov    0xf088152c,%al
f010bcba:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcbd:	a2 2c 15 88 f0       	mov    %al,0xf088152c
f010bcc2:	a0 2c 15 88 f0       	mov    0xf088152c,%al
f010bcc7:	83 e0 1f             	and    $0x1f,%eax
f010bcca:	a2 2c 15 88 f0       	mov    %al,0xf088152c
f010bccf:	a0 2d 15 88 f0       	mov    0xf088152d,%al
f010bcd4:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcd7:	83 c8 0e             	or     $0xe,%eax
f010bcda:	a2 2d 15 88 f0       	mov    %al,0xf088152d
f010bcdf:	a0 2d 15 88 f0       	mov    0xf088152d,%al
f010bce4:	83 e0 ef             	and    $0xffffffef,%eax
f010bce7:	a2 2d 15 88 f0       	mov    %al,0xf088152d
f010bcec:	a0 2d 15 88 f0       	mov    0xf088152d,%al
f010bcf1:	83 c8 60             	or     $0x60,%eax
f010bcf4:	a2 2d 15 88 f0       	mov    %al,0xf088152d
f010bcf9:	a0 2d 15 88 f0       	mov    0xf088152d,%al
f010bcfe:	83 c8 80             	or     $0xffffff80,%eax
f010bd01:	a2 2d 15 88 f0       	mov    %al,0xf088152d
f010bd06:	b8 d6 ca 10 f0       	mov    $0xf010cad6,%eax
f010bd0b:	c1 e8 10             	shr    $0x10,%eax
f010bd0e:	66 a3 2e 15 88 f0    	mov    %ax,0xf088152e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bd14:	b8 dc ca 10 f0       	mov    $0xf010cadc,%eax
f010bd19:	66 a3 30 15 88 f0    	mov    %ax,0xf0881530
f010bd1f:	66 c7 05 32 15 88 f0 	movw   $0x8,0xf0881532
f010bd26:	08 00 
f010bd28:	a0 34 15 88 f0       	mov    0xf0881534,%al
f010bd2d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd30:	a2 34 15 88 f0       	mov    %al,0xf0881534
f010bd35:	a0 34 15 88 f0       	mov    0xf0881534,%al
f010bd3a:	83 e0 1f             	and    $0x1f,%eax
f010bd3d:	a2 34 15 88 f0       	mov    %al,0xf0881534
f010bd42:	a0 35 15 88 f0       	mov    0xf0881535,%al
f010bd47:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd4a:	83 c8 0e             	or     $0xe,%eax
f010bd4d:	a2 35 15 88 f0       	mov    %al,0xf0881535
f010bd52:	a0 35 15 88 f0       	mov    0xf0881535,%al
f010bd57:	83 e0 ef             	and    $0xffffffef,%eax
f010bd5a:	a2 35 15 88 f0       	mov    %al,0xf0881535
f010bd5f:	a0 35 15 88 f0       	mov    0xf0881535,%al
f010bd64:	83 c8 60             	or     $0x60,%eax
f010bd67:	a2 35 15 88 f0       	mov    %al,0xf0881535
f010bd6c:	a0 35 15 88 f0       	mov    0xf0881535,%al
f010bd71:	83 c8 80             	or     $0xffffff80,%eax
f010bd74:	a2 35 15 88 f0       	mov    %al,0xf0881535
f010bd79:	b8 dc ca 10 f0       	mov    $0xf010cadc,%eax
f010bd7e:	c1 e8 10             	shr    $0x10,%eax
f010bd81:	66 a3 36 15 88 f0    	mov    %ax,0xf0881536
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010bd87:	b8 e2 ca 10 f0       	mov    $0xf010cae2,%eax
f010bd8c:	66 a3 38 15 88 f0    	mov    %ax,0xf0881538
f010bd92:	66 c7 05 3a 15 88 f0 	movw   $0x8,0xf088153a
f010bd99:	08 00 
f010bd9b:	a0 3c 15 88 f0       	mov    0xf088153c,%al
f010bda0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bda3:	a2 3c 15 88 f0       	mov    %al,0xf088153c
f010bda8:	a0 3c 15 88 f0       	mov    0xf088153c,%al
f010bdad:	83 e0 1f             	and    $0x1f,%eax
f010bdb0:	a2 3c 15 88 f0       	mov    %al,0xf088153c
f010bdb5:	a0 3d 15 88 f0       	mov    0xf088153d,%al
f010bdba:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdbd:	83 c8 0e             	or     $0xe,%eax
f010bdc0:	a2 3d 15 88 f0       	mov    %al,0xf088153d
f010bdc5:	a0 3d 15 88 f0       	mov    0xf088153d,%al
f010bdca:	83 e0 ef             	and    $0xffffffef,%eax
f010bdcd:	a2 3d 15 88 f0       	mov    %al,0xf088153d
f010bdd2:	a0 3d 15 88 f0       	mov    0xf088153d,%al
f010bdd7:	83 c8 60             	or     $0x60,%eax
f010bdda:	a2 3d 15 88 f0       	mov    %al,0xf088153d
f010bddf:	a0 3d 15 88 f0       	mov    0xf088153d,%al
f010bde4:	83 c8 80             	or     $0xffffff80,%eax
f010bde7:	a2 3d 15 88 f0       	mov    %al,0xf088153d
f010bdec:	b8 e2 ca 10 f0       	mov    $0xf010cae2,%eax
f010bdf1:	c1 e8 10             	shr    $0x10,%eax
f010bdf4:	66 a3 3e 15 88 f0    	mov    %ax,0xf088153e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010bdfa:	b8 e8 ca 10 f0       	mov    $0xf010cae8,%eax
f010bdff:	66 a3 40 15 88 f0    	mov    %ax,0xf0881540
f010be05:	66 c7 05 42 15 88 f0 	movw   $0x8,0xf0881542
f010be0c:	08 00 
f010be0e:	a0 44 15 88 f0       	mov    0xf0881544,%al
f010be13:	83 e0 e0             	and    $0xffffffe0,%eax
f010be16:	a2 44 15 88 f0       	mov    %al,0xf0881544
f010be1b:	a0 44 15 88 f0       	mov    0xf0881544,%al
f010be20:	83 e0 1f             	and    $0x1f,%eax
f010be23:	a2 44 15 88 f0       	mov    %al,0xf0881544
f010be28:	a0 45 15 88 f0       	mov    0xf0881545,%al
f010be2d:	83 e0 f0             	and    $0xfffffff0,%eax
f010be30:	83 c8 0e             	or     $0xe,%eax
f010be33:	a2 45 15 88 f0       	mov    %al,0xf0881545
f010be38:	a0 45 15 88 f0       	mov    0xf0881545,%al
f010be3d:	83 e0 ef             	and    $0xffffffef,%eax
f010be40:	a2 45 15 88 f0       	mov    %al,0xf0881545
f010be45:	a0 45 15 88 f0       	mov    0xf0881545,%al
f010be4a:	83 c8 60             	or     $0x60,%eax
f010be4d:	a2 45 15 88 f0       	mov    %al,0xf0881545
f010be52:	a0 45 15 88 f0       	mov    0xf0881545,%al
f010be57:	83 c8 80             	or     $0xffffff80,%eax
f010be5a:	a2 45 15 88 f0       	mov    %al,0xf0881545
f010be5f:	b8 e8 ca 10 f0       	mov    $0xf010cae8,%eax
f010be64:	c1 e8 10             	shr    $0x10,%eax
f010be67:	66 a3 46 15 88 f0    	mov    %ax,0xf0881546
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010be6d:	b8 ee ca 10 f0       	mov    $0xf010caee,%eax
f010be72:	66 a3 48 15 88 f0    	mov    %ax,0xf0881548
f010be78:	66 c7 05 4a 15 88 f0 	movw   $0x8,0xf088154a
f010be7f:	08 00 
f010be81:	a0 4c 15 88 f0       	mov    0xf088154c,%al
f010be86:	83 e0 e0             	and    $0xffffffe0,%eax
f010be89:	a2 4c 15 88 f0       	mov    %al,0xf088154c
f010be8e:	a0 4c 15 88 f0       	mov    0xf088154c,%al
f010be93:	83 e0 1f             	and    $0x1f,%eax
f010be96:	a2 4c 15 88 f0       	mov    %al,0xf088154c
f010be9b:	a0 4d 15 88 f0       	mov    0xf088154d,%al
f010bea0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bea3:	83 c8 0e             	or     $0xe,%eax
f010bea6:	a2 4d 15 88 f0       	mov    %al,0xf088154d
f010beab:	a0 4d 15 88 f0       	mov    0xf088154d,%al
f010beb0:	83 e0 ef             	and    $0xffffffef,%eax
f010beb3:	a2 4d 15 88 f0       	mov    %al,0xf088154d
f010beb8:	a0 4d 15 88 f0       	mov    0xf088154d,%al
f010bebd:	83 c8 60             	or     $0x60,%eax
f010bec0:	a2 4d 15 88 f0       	mov    %al,0xf088154d
f010bec5:	a0 4d 15 88 f0       	mov    0xf088154d,%al
f010beca:	83 c8 80             	or     $0xffffff80,%eax
f010becd:	a2 4d 15 88 f0       	mov    %al,0xf088154d
f010bed2:	b8 ee ca 10 f0       	mov    $0xf010caee,%eax
f010bed7:	c1 e8 10             	shr    $0x10,%eax
f010beda:	66 a3 4e 15 88 f0    	mov    %ax,0xf088154e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bee0:	b8 f4 ca 10 f0       	mov    $0xf010caf4,%eax
f010bee5:	66 a3 50 15 88 f0    	mov    %ax,0xf0881550
f010beeb:	66 c7 05 52 15 88 f0 	movw   $0x8,0xf0881552
f010bef2:	08 00 
f010bef4:	a0 54 15 88 f0       	mov    0xf0881554,%al
f010bef9:	83 e0 e0             	and    $0xffffffe0,%eax
f010befc:	a2 54 15 88 f0       	mov    %al,0xf0881554
f010bf01:	a0 54 15 88 f0       	mov    0xf0881554,%al
f010bf06:	83 e0 1f             	and    $0x1f,%eax
f010bf09:	a2 54 15 88 f0       	mov    %al,0xf0881554
f010bf0e:	a0 55 15 88 f0       	mov    0xf0881555,%al
f010bf13:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf16:	83 c8 0e             	or     $0xe,%eax
f010bf19:	a2 55 15 88 f0       	mov    %al,0xf0881555
f010bf1e:	a0 55 15 88 f0       	mov    0xf0881555,%al
f010bf23:	83 e0 ef             	and    $0xffffffef,%eax
f010bf26:	a2 55 15 88 f0       	mov    %al,0xf0881555
f010bf2b:	a0 55 15 88 f0       	mov    0xf0881555,%al
f010bf30:	83 c8 60             	or     $0x60,%eax
f010bf33:	a2 55 15 88 f0       	mov    %al,0xf0881555
f010bf38:	a0 55 15 88 f0       	mov    0xf0881555,%al
f010bf3d:	83 c8 80             	or     $0xffffff80,%eax
f010bf40:	a2 55 15 88 f0       	mov    %al,0xf0881555
f010bf45:	b8 f4 ca 10 f0       	mov    $0xf010caf4,%eax
f010bf4a:	c1 e8 10             	shr    $0x10,%eax
f010bf4d:	66 a3 56 15 88 f0    	mov    %ax,0xf0881556
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bf53:	b8 fa ca 10 f0       	mov    $0xf010cafa,%eax
f010bf58:	66 a3 58 15 88 f0    	mov    %ax,0xf0881558
f010bf5e:	66 c7 05 5a 15 88 f0 	movw   $0x8,0xf088155a
f010bf65:	08 00 
f010bf67:	a0 5c 15 88 f0       	mov    0xf088155c,%al
f010bf6c:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf6f:	a2 5c 15 88 f0       	mov    %al,0xf088155c
f010bf74:	a0 5c 15 88 f0       	mov    0xf088155c,%al
f010bf79:	83 e0 1f             	and    $0x1f,%eax
f010bf7c:	a2 5c 15 88 f0       	mov    %al,0xf088155c
f010bf81:	a0 5d 15 88 f0       	mov    0xf088155d,%al
f010bf86:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf89:	83 c8 0e             	or     $0xe,%eax
f010bf8c:	a2 5d 15 88 f0       	mov    %al,0xf088155d
f010bf91:	a0 5d 15 88 f0       	mov    0xf088155d,%al
f010bf96:	83 e0 ef             	and    $0xffffffef,%eax
f010bf99:	a2 5d 15 88 f0       	mov    %al,0xf088155d
f010bf9e:	a0 5d 15 88 f0       	mov    0xf088155d,%al
f010bfa3:	83 c8 60             	or     $0x60,%eax
f010bfa6:	a2 5d 15 88 f0       	mov    %al,0xf088155d
f010bfab:	a0 5d 15 88 f0       	mov    0xf088155d,%al
f010bfb0:	83 c8 80             	or     $0xffffff80,%eax
f010bfb3:	a2 5d 15 88 f0       	mov    %al,0xf088155d
f010bfb8:	b8 fa ca 10 f0       	mov    $0xf010cafa,%eax
f010bfbd:	c1 e8 10             	shr    $0x10,%eax
f010bfc0:	66 a3 5e 15 88 f0    	mov    %ax,0xf088155e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bfc6:	b8 00 cb 10 f0       	mov    $0xf010cb00,%eax
f010bfcb:	66 a3 60 15 88 f0    	mov    %ax,0xf0881560
f010bfd1:	66 c7 05 62 15 88 f0 	movw   $0x8,0xf0881562
f010bfd8:	08 00 
f010bfda:	a0 64 15 88 f0       	mov    0xf0881564,%al
f010bfdf:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfe2:	a2 64 15 88 f0       	mov    %al,0xf0881564
f010bfe7:	a0 64 15 88 f0       	mov    0xf0881564,%al
f010bfec:	83 e0 1f             	and    $0x1f,%eax
f010bfef:	a2 64 15 88 f0       	mov    %al,0xf0881564
f010bff4:	a0 65 15 88 f0       	mov    0xf0881565,%al
f010bff9:	83 e0 f0             	and    $0xfffffff0,%eax
f010bffc:	83 c8 0e             	or     $0xe,%eax
f010bfff:	a2 65 15 88 f0       	mov    %al,0xf0881565
f010c004:	a0 65 15 88 f0       	mov    0xf0881565,%al
f010c009:	83 e0 ef             	and    $0xffffffef,%eax
f010c00c:	a2 65 15 88 f0       	mov    %al,0xf0881565
f010c011:	a0 65 15 88 f0       	mov    0xf0881565,%al
f010c016:	83 c8 60             	or     $0x60,%eax
f010c019:	a2 65 15 88 f0       	mov    %al,0xf0881565
f010c01e:	a0 65 15 88 f0       	mov    0xf0881565,%al
f010c023:	83 c8 80             	or     $0xffffff80,%eax
f010c026:	a2 65 15 88 f0       	mov    %al,0xf0881565
f010c02b:	b8 00 cb 10 f0       	mov    $0xf010cb00,%eax
f010c030:	c1 e8 10             	shr    $0x10,%eax
f010c033:	66 a3 66 15 88 f0    	mov    %ax,0xf0881566
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c039:	b8 06 cb 10 f0       	mov    $0xf010cb06,%eax
f010c03e:	66 a3 68 15 88 f0    	mov    %ax,0xf0881568
f010c044:	66 c7 05 6a 15 88 f0 	movw   $0x8,0xf088156a
f010c04b:	08 00 
f010c04d:	a0 6c 15 88 f0       	mov    0xf088156c,%al
f010c052:	83 e0 e0             	and    $0xffffffe0,%eax
f010c055:	a2 6c 15 88 f0       	mov    %al,0xf088156c
f010c05a:	a0 6c 15 88 f0       	mov    0xf088156c,%al
f010c05f:	83 e0 1f             	and    $0x1f,%eax
f010c062:	a2 6c 15 88 f0       	mov    %al,0xf088156c
f010c067:	a0 6d 15 88 f0       	mov    0xf088156d,%al
f010c06c:	83 e0 f0             	and    $0xfffffff0,%eax
f010c06f:	83 c8 0e             	or     $0xe,%eax
f010c072:	a2 6d 15 88 f0       	mov    %al,0xf088156d
f010c077:	a0 6d 15 88 f0       	mov    0xf088156d,%al
f010c07c:	83 e0 ef             	and    $0xffffffef,%eax
f010c07f:	a2 6d 15 88 f0       	mov    %al,0xf088156d
f010c084:	a0 6d 15 88 f0       	mov    0xf088156d,%al
f010c089:	83 c8 60             	or     $0x60,%eax
f010c08c:	a2 6d 15 88 f0       	mov    %al,0xf088156d
f010c091:	a0 6d 15 88 f0       	mov    0xf088156d,%al
f010c096:	83 c8 80             	or     $0xffffff80,%eax
f010c099:	a2 6d 15 88 f0       	mov    %al,0xf088156d
f010c09e:	b8 06 cb 10 f0       	mov    $0xf010cb06,%eax
f010c0a3:	c1 e8 10             	shr    $0x10,%eax
f010c0a6:	66 a3 6e 15 88 f0    	mov    %ax,0xf088156e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c0ac:	b8 0c cb 10 f0       	mov    $0xf010cb0c,%eax
f010c0b1:	66 a3 70 15 88 f0    	mov    %ax,0xf0881570
f010c0b7:	66 c7 05 72 15 88 f0 	movw   $0x8,0xf0881572
f010c0be:	08 00 
f010c0c0:	a0 74 15 88 f0       	mov    0xf0881574,%al
f010c0c5:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0c8:	a2 74 15 88 f0       	mov    %al,0xf0881574
f010c0cd:	a0 74 15 88 f0       	mov    0xf0881574,%al
f010c0d2:	83 e0 1f             	and    $0x1f,%eax
f010c0d5:	a2 74 15 88 f0       	mov    %al,0xf0881574
f010c0da:	a0 75 15 88 f0       	mov    0xf0881575,%al
f010c0df:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0e2:	83 c8 0e             	or     $0xe,%eax
f010c0e5:	a2 75 15 88 f0       	mov    %al,0xf0881575
f010c0ea:	a0 75 15 88 f0       	mov    0xf0881575,%al
f010c0ef:	83 e0 ef             	and    $0xffffffef,%eax
f010c0f2:	a2 75 15 88 f0       	mov    %al,0xf0881575
f010c0f7:	a0 75 15 88 f0       	mov    0xf0881575,%al
f010c0fc:	83 c8 60             	or     $0x60,%eax
f010c0ff:	a2 75 15 88 f0       	mov    %al,0xf0881575
f010c104:	a0 75 15 88 f0       	mov    0xf0881575,%al
f010c109:	83 c8 80             	or     $0xffffff80,%eax
f010c10c:	a2 75 15 88 f0       	mov    %al,0xf0881575
f010c111:	b8 0c cb 10 f0       	mov    $0xf010cb0c,%eax
f010c116:	c1 e8 10             	shr    $0x10,%eax
f010c119:	66 a3 76 15 88 f0    	mov    %ax,0xf0881576
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c11f:	b8 12 cb 10 f0       	mov    $0xf010cb12,%eax
f010c124:	66 a3 78 15 88 f0    	mov    %ax,0xf0881578
f010c12a:	66 c7 05 7a 15 88 f0 	movw   $0x8,0xf088157a
f010c131:	08 00 
f010c133:	a0 7c 15 88 f0       	mov    0xf088157c,%al
f010c138:	83 e0 e0             	and    $0xffffffe0,%eax
f010c13b:	a2 7c 15 88 f0       	mov    %al,0xf088157c
f010c140:	a0 7c 15 88 f0       	mov    0xf088157c,%al
f010c145:	83 e0 1f             	and    $0x1f,%eax
f010c148:	a2 7c 15 88 f0       	mov    %al,0xf088157c
f010c14d:	a0 7d 15 88 f0       	mov    0xf088157d,%al
f010c152:	83 e0 f0             	and    $0xfffffff0,%eax
f010c155:	83 c8 0e             	or     $0xe,%eax
f010c158:	a2 7d 15 88 f0       	mov    %al,0xf088157d
f010c15d:	a0 7d 15 88 f0       	mov    0xf088157d,%al
f010c162:	83 e0 ef             	and    $0xffffffef,%eax
f010c165:	a2 7d 15 88 f0       	mov    %al,0xf088157d
f010c16a:	a0 7d 15 88 f0       	mov    0xf088157d,%al
f010c16f:	83 c8 60             	or     $0x60,%eax
f010c172:	a2 7d 15 88 f0       	mov    %al,0xf088157d
f010c177:	a0 7d 15 88 f0       	mov    0xf088157d,%al
f010c17c:	83 c8 80             	or     $0xffffff80,%eax
f010c17f:	a2 7d 15 88 f0       	mov    %al,0xf088157d
f010c184:	b8 12 cb 10 f0       	mov    $0xf010cb12,%eax
f010c189:	c1 e8 10             	shr    $0x10,%eax
f010c18c:	66 a3 7e 15 88 f0    	mov    %ax,0xf088157e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c192:	b8 18 cb 10 f0       	mov    $0xf010cb18,%eax
f010c197:	66 a3 80 15 88 f0    	mov    %ax,0xf0881580
f010c19d:	66 c7 05 82 15 88 f0 	movw   $0x8,0xf0881582
f010c1a4:	08 00 
f010c1a6:	a0 84 15 88 f0       	mov    0xf0881584,%al
f010c1ab:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1ae:	a2 84 15 88 f0       	mov    %al,0xf0881584
f010c1b3:	a0 84 15 88 f0       	mov    0xf0881584,%al
f010c1b8:	83 e0 1f             	and    $0x1f,%eax
f010c1bb:	a2 84 15 88 f0       	mov    %al,0xf0881584
f010c1c0:	a0 85 15 88 f0       	mov    0xf0881585,%al
f010c1c5:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1c8:	83 c8 0e             	or     $0xe,%eax
f010c1cb:	a2 85 15 88 f0       	mov    %al,0xf0881585
f010c1d0:	a0 85 15 88 f0       	mov    0xf0881585,%al
f010c1d5:	83 e0 ef             	and    $0xffffffef,%eax
f010c1d8:	a2 85 15 88 f0       	mov    %al,0xf0881585
f010c1dd:	a0 85 15 88 f0       	mov    0xf0881585,%al
f010c1e2:	83 c8 60             	or     $0x60,%eax
f010c1e5:	a2 85 15 88 f0       	mov    %al,0xf0881585
f010c1ea:	a0 85 15 88 f0       	mov    0xf0881585,%al
f010c1ef:	83 c8 80             	or     $0xffffff80,%eax
f010c1f2:	a2 85 15 88 f0       	mov    %al,0xf0881585
f010c1f7:	b8 18 cb 10 f0       	mov    $0xf010cb18,%eax
f010c1fc:	c1 e8 10             	shr    $0x10,%eax
f010c1ff:	66 a3 86 15 88 f0    	mov    %ax,0xf0881586
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c205:	b8 1e cb 10 f0       	mov    $0xf010cb1e,%eax
f010c20a:	66 a3 88 15 88 f0    	mov    %ax,0xf0881588
f010c210:	66 c7 05 8a 15 88 f0 	movw   $0x8,0xf088158a
f010c217:	08 00 
f010c219:	a0 8c 15 88 f0       	mov    0xf088158c,%al
f010c21e:	83 e0 e0             	and    $0xffffffe0,%eax
f010c221:	a2 8c 15 88 f0       	mov    %al,0xf088158c
f010c226:	a0 8c 15 88 f0       	mov    0xf088158c,%al
f010c22b:	83 e0 1f             	and    $0x1f,%eax
f010c22e:	a2 8c 15 88 f0       	mov    %al,0xf088158c
f010c233:	a0 8d 15 88 f0       	mov    0xf088158d,%al
f010c238:	83 e0 f0             	and    $0xfffffff0,%eax
f010c23b:	83 c8 0e             	or     $0xe,%eax
f010c23e:	a2 8d 15 88 f0       	mov    %al,0xf088158d
f010c243:	a0 8d 15 88 f0       	mov    0xf088158d,%al
f010c248:	83 e0 ef             	and    $0xffffffef,%eax
f010c24b:	a2 8d 15 88 f0       	mov    %al,0xf088158d
f010c250:	a0 8d 15 88 f0       	mov    0xf088158d,%al
f010c255:	83 c8 60             	or     $0x60,%eax
f010c258:	a2 8d 15 88 f0       	mov    %al,0xf088158d
f010c25d:	a0 8d 15 88 f0       	mov    0xf088158d,%al
f010c262:	83 c8 80             	or     $0xffffff80,%eax
f010c265:	a2 8d 15 88 f0       	mov    %al,0xf088158d
f010c26a:	b8 1e cb 10 f0       	mov    $0xf010cb1e,%eax
f010c26f:	c1 e8 10             	shr    $0x10,%eax
f010c272:	66 a3 8e 15 88 f0    	mov    %ax,0xf088158e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c278:	b8 24 cb 10 f0       	mov    $0xf010cb24,%eax
f010c27d:	66 a3 90 15 88 f0    	mov    %ax,0xf0881590
f010c283:	66 c7 05 92 15 88 f0 	movw   $0x8,0xf0881592
f010c28a:	08 00 
f010c28c:	a0 94 15 88 f0       	mov    0xf0881594,%al
f010c291:	83 e0 e0             	and    $0xffffffe0,%eax
f010c294:	a2 94 15 88 f0       	mov    %al,0xf0881594
f010c299:	a0 94 15 88 f0       	mov    0xf0881594,%al
f010c29e:	83 e0 1f             	and    $0x1f,%eax
f010c2a1:	a2 94 15 88 f0       	mov    %al,0xf0881594
f010c2a6:	a0 95 15 88 f0       	mov    0xf0881595,%al
f010c2ab:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2ae:	83 c8 0e             	or     $0xe,%eax
f010c2b1:	a2 95 15 88 f0       	mov    %al,0xf0881595
f010c2b6:	a0 95 15 88 f0       	mov    0xf0881595,%al
f010c2bb:	83 e0 ef             	and    $0xffffffef,%eax
f010c2be:	a2 95 15 88 f0       	mov    %al,0xf0881595
f010c2c3:	a0 95 15 88 f0       	mov    0xf0881595,%al
f010c2c8:	83 c8 60             	or     $0x60,%eax
f010c2cb:	a2 95 15 88 f0       	mov    %al,0xf0881595
f010c2d0:	a0 95 15 88 f0       	mov    0xf0881595,%al
f010c2d5:	83 c8 80             	or     $0xffffff80,%eax
f010c2d8:	a2 95 15 88 f0       	mov    %al,0xf0881595
f010c2dd:	b8 24 cb 10 f0       	mov    $0xf010cb24,%eax
f010c2e2:	c1 e8 10             	shr    $0x10,%eax
f010c2e5:	66 a3 96 15 88 f0    	mov    %ax,0xf0881596
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c2eb:	b8 2a cb 10 f0       	mov    $0xf010cb2a,%eax
f010c2f0:	66 a3 98 15 88 f0    	mov    %ax,0xf0881598
f010c2f6:	66 c7 05 9a 15 88 f0 	movw   $0x8,0xf088159a
f010c2fd:	08 00 
f010c2ff:	a0 9c 15 88 f0       	mov    0xf088159c,%al
f010c304:	83 e0 e0             	and    $0xffffffe0,%eax
f010c307:	a2 9c 15 88 f0       	mov    %al,0xf088159c
f010c30c:	a0 9c 15 88 f0       	mov    0xf088159c,%al
f010c311:	83 e0 1f             	and    $0x1f,%eax
f010c314:	a2 9c 15 88 f0       	mov    %al,0xf088159c
f010c319:	a0 9d 15 88 f0       	mov    0xf088159d,%al
f010c31e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c321:	83 c8 0e             	or     $0xe,%eax
f010c324:	a2 9d 15 88 f0       	mov    %al,0xf088159d
f010c329:	a0 9d 15 88 f0       	mov    0xf088159d,%al
f010c32e:	83 e0 ef             	and    $0xffffffef,%eax
f010c331:	a2 9d 15 88 f0       	mov    %al,0xf088159d
f010c336:	a0 9d 15 88 f0       	mov    0xf088159d,%al
f010c33b:	83 c8 60             	or     $0x60,%eax
f010c33e:	a2 9d 15 88 f0       	mov    %al,0xf088159d
f010c343:	a0 9d 15 88 f0       	mov    0xf088159d,%al
f010c348:	83 c8 80             	or     $0xffffff80,%eax
f010c34b:	a2 9d 15 88 f0       	mov    %al,0xf088159d
f010c350:	b8 2a cb 10 f0       	mov    $0xf010cb2a,%eax
f010c355:	c1 e8 10             	shr    $0x10,%eax
f010c358:	66 a3 9e 15 88 f0    	mov    %ax,0xf088159e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c35e:	c7 05 44 1c 88 f0 00 	movl   $0xefc00000,0xf0881c44
f010c365:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c368:	66 c7 05 48 1c 88 f0 	movw   $0x10,0xf0881c48
f010c36f:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c371:	66 c7 05 e8 38 19 f0 	movw   $0x68,0xf01938e8
f010c378:	68 00 
f010c37a:	b8 40 1c 88 f0       	mov    $0xf0881c40,%eax
f010c37f:	66 a3 ea 38 19 f0    	mov    %ax,0xf01938ea
f010c385:	b8 40 1c 88 f0       	mov    $0xf0881c40,%eax
f010c38a:	c1 e8 10             	shr    $0x10,%eax
f010c38d:	a2 ec 38 19 f0       	mov    %al,0xf01938ec
f010c392:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c397:	83 e0 f0             	and    $0xfffffff0,%eax
f010c39a:	83 c8 09             	or     $0x9,%eax
f010c39d:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c3a2:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c3a7:	83 c8 10             	or     $0x10,%eax
f010c3aa:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c3af:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c3b4:	83 e0 9f             	and    $0xffffff9f,%eax
f010c3b7:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c3bc:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c3c1:	83 c8 80             	or     $0xffffff80,%eax
f010c3c4:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c3c9:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c3ce:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3d1:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c3d6:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c3db:	83 e0 ef             	and    $0xffffffef,%eax
f010c3de:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c3e3:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c3e8:	83 e0 df             	and    $0xffffffdf,%eax
f010c3eb:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c3f0:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c3f5:	83 c8 40             	or     $0x40,%eax
f010c3f8:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c3fd:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c402:	83 e0 7f             	and    $0x7f,%eax
f010c405:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c40a:	b8 40 1c 88 f0       	mov    $0xf0881c40,%eax
f010c40f:	c1 e8 18             	shr    $0x18,%eax
f010c412:	a2 ef 38 19 f0       	mov    %al,0xf01938ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c417:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c41c:	83 e0 ef             	and    $0xffffffef,%eax
f010c41f:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c424:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c42a:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c42e:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c431:	0f 01 1d 1c 3d 19 f0 	lidtl  0xf0193d1c
}
f010c438:	90                   	nop
f010c439:	c9                   	leave  
f010c43a:	c3                   	ret    

f010c43b <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c43b:	55                   	push   %ebp
f010c43c:	89 e5                	mov    %esp,%ebp
f010c43e:	53                   	push   %ebx
f010c43f:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c442:	83 ec 08             	sub    $0x8,%esp
f010c445:	ff 75 08             	pushl  0x8(%ebp)
f010c448:	68 fb 76 13 f0       	push   $0xf01376fb
f010c44d:	e8 bc 48 ff ff       	call   f0100d0e <cprintf>
f010c452:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c455:	8b 45 08             	mov    0x8(%ebp),%eax
f010c458:	83 ec 0c             	sub    $0xc,%esp
f010c45b:	50                   	push   %eax
f010c45c:	e8 fd 00 00 00       	call   f010c55e <print_regs>
f010c461:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c464:	8b 45 08             	mov    0x8(%ebp),%eax
f010c467:	8b 40 20             	mov    0x20(%eax),%eax
f010c46a:	0f b7 c0             	movzwl %ax,%eax
f010c46d:	83 ec 08             	sub    $0x8,%esp
f010c470:	50                   	push   %eax
f010c471:	68 0d 77 13 f0       	push   $0xf013770d
f010c476:	e8 93 48 ff ff       	call   f0100d0e <cprintf>
f010c47b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c47e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c481:	8b 40 24             	mov    0x24(%eax),%eax
f010c484:	0f b7 c0             	movzwl %ax,%eax
f010c487:	83 ec 08             	sub    $0x8,%esp
f010c48a:	50                   	push   %eax
f010c48b:	68 20 77 13 f0       	push   $0xf0137720
f010c490:	e8 79 48 ff ff       	call   f0100d0e <cprintf>
f010c495:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c498:	8b 45 08             	mov    0x8(%ebp),%eax
f010c49b:	8b 58 28             	mov    0x28(%eax),%ebx
f010c49e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4a1:	8b 40 28             	mov    0x28(%eax),%eax
f010c4a4:	83 ec 0c             	sub    $0xc,%esp
f010c4a7:	50                   	push   %eax
f010c4a8:	e8 d0 ee ff ff       	call   f010b37d <trapname>
f010c4ad:	83 c4 10             	add    $0x10,%esp
f010c4b0:	89 c2                	mov    %eax,%edx
f010c4b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4b5:	8b 40 28             	mov    0x28(%eax),%eax
f010c4b8:	53                   	push   %ebx
f010c4b9:	52                   	push   %edx
f010c4ba:	50                   	push   %eax
f010c4bb:	68 33 77 13 f0       	push   $0xf0137733
f010c4c0:	e8 49 48 ff ff       	call   f0100d0e <cprintf>
f010c4c5:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c4c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4cb:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c4ce:	83 ec 08             	sub    $0x8,%esp
f010c4d1:	50                   	push   %eax
f010c4d2:	68 4a 77 13 f0       	push   $0xf013774a
f010c4d7:	e8 32 48 ff ff       	call   f0100d0e <cprintf>
f010c4dc:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c4df:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4e2:	8b 40 30             	mov    0x30(%eax),%eax
f010c4e5:	83 ec 08             	sub    $0x8,%esp
f010c4e8:	50                   	push   %eax
f010c4e9:	68 59 77 13 f0       	push   $0xf0137759
f010c4ee:	e8 1b 48 ff ff       	call   f0100d0e <cprintf>
f010c4f3:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c4f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4f9:	8b 40 34             	mov    0x34(%eax),%eax
f010c4fc:	0f b7 c0             	movzwl %ax,%eax
f010c4ff:	83 ec 08             	sub    $0x8,%esp
f010c502:	50                   	push   %eax
f010c503:	68 68 77 13 f0       	push   $0xf0137768
f010c508:	e8 01 48 ff ff       	call   f0100d0e <cprintf>
f010c50d:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c510:	8b 45 08             	mov    0x8(%ebp),%eax
f010c513:	8b 40 38             	mov    0x38(%eax),%eax
f010c516:	83 ec 08             	sub    $0x8,%esp
f010c519:	50                   	push   %eax
f010c51a:	68 7b 77 13 f0       	push   $0xf013777b
f010c51f:	e8 ea 47 ff ff       	call   f0100d0e <cprintf>
f010c524:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c527:	8b 45 08             	mov    0x8(%ebp),%eax
f010c52a:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c52d:	83 ec 08             	sub    $0x8,%esp
f010c530:	50                   	push   %eax
f010c531:	68 8a 77 13 f0       	push   $0xf013778a
f010c536:	e8 d3 47 ff ff       	call   f0100d0e <cprintf>
f010c53b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c53e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c541:	8b 40 40             	mov    0x40(%eax),%eax
f010c544:	0f b7 c0             	movzwl %ax,%eax
f010c547:	83 ec 08             	sub    $0x8,%esp
f010c54a:	50                   	push   %eax
f010c54b:	68 99 77 13 f0       	push   $0xf0137799
f010c550:	e8 b9 47 ff ff       	call   f0100d0e <cprintf>
f010c555:	83 c4 10             	add    $0x10,%esp
}
f010c558:	90                   	nop
f010c559:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c55c:	c9                   	leave  
f010c55d:	c3                   	ret    

f010c55e <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c55e:	55                   	push   %ebp
f010c55f:	89 e5                	mov    %esp,%ebp
f010c561:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c564:	8b 45 08             	mov    0x8(%ebp),%eax
f010c567:	8b 00                	mov    (%eax),%eax
f010c569:	83 ec 08             	sub    $0x8,%esp
f010c56c:	50                   	push   %eax
f010c56d:	68 ac 77 13 f0       	push   $0xf01377ac
f010c572:	e8 97 47 ff ff       	call   f0100d0e <cprintf>
f010c577:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c57a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c57d:	8b 40 04             	mov    0x4(%eax),%eax
f010c580:	83 ec 08             	sub    $0x8,%esp
f010c583:	50                   	push   %eax
f010c584:	68 bb 77 13 f0       	push   $0xf01377bb
f010c589:	e8 80 47 ff ff       	call   f0100d0e <cprintf>
f010c58e:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c591:	8b 45 08             	mov    0x8(%ebp),%eax
f010c594:	8b 40 08             	mov    0x8(%eax),%eax
f010c597:	83 ec 08             	sub    $0x8,%esp
f010c59a:	50                   	push   %eax
f010c59b:	68 ca 77 13 f0       	push   $0xf01377ca
f010c5a0:	e8 69 47 ff ff       	call   f0100d0e <cprintf>
f010c5a5:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c5a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5ab:	8b 40 0c             	mov    0xc(%eax),%eax
f010c5ae:	83 ec 08             	sub    $0x8,%esp
f010c5b1:	50                   	push   %eax
f010c5b2:	68 d9 77 13 f0       	push   $0xf01377d9
f010c5b7:	e8 52 47 ff ff       	call   f0100d0e <cprintf>
f010c5bc:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c5bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5c2:	8b 40 10             	mov    0x10(%eax),%eax
f010c5c5:	83 ec 08             	sub    $0x8,%esp
f010c5c8:	50                   	push   %eax
f010c5c9:	68 e8 77 13 f0       	push   $0xf01377e8
f010c5ce:	e8 3b 47 ff ff       	call   f0100d0e <cprintf>
f010c5d3:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c5d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5d9:	8b 40 14             	mov    0x14(%eax),%eax
f010c5dc:	83 ec 08             	sub    $0x8,%esp
f010c5df:	50                   	push   %eax
f010c5e0:	68 f7 77 13 f0       	push   $0xf01377f7
f010c5e5:	e8 24 47 ff ff       	call   f0100d0e <cprintf>
f010c5ea:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c5ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5f0:	8b 40 18             	mov    0x18(%eax),%eax
f010c5f3:	83 ec 08             	sub    $0x8,%esp
f010c5f6:	50                   	push   %eax
f010c5f7:	68 06 78 13 f0       	push   $0xf0137806
f010c5fc:	e8 0d 47 ff ff       	call   f0100d0e <cprintf>
f010c601:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c604:	8b 45 08             	mov    0x8(%ebp),%eax
f010c607:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c60a:	83 ec 08             	sub    $0x8,%esp
f010c60d:	50                   	push   %eax
f010c60e:	68 15 78 13 f0       	push   $0xf0137815
f010c613:	e8 f6 46 ff ff       	call   f0100d0e <cprintf>
f010c618:	83 c4 10             	add    $0x10,%esp
}
f010c61b:	90                   	nop
f010c61c:	c9                   	leave  
f010c61d:	c3                   	ret    

f010c61e <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c61e:	55                   	push   %ebp
f010c61f:	89 e5                	mov    %esp,%ebp
f010c621:	57                   	push   %edi
f010c622:	56                   	push   %esi
f010c623:	53                   	push   %ebx
f010c624:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c627:	8b 45 08             	mov    0x8(%ebp),%eax
f010c62a:	8b 40 28             	mov    0x28(%eax),%eax
f010c62d:	83 f8 0e             	cmp    $0xe,%eax
f010c630:	75 29                	jne    f010c65b <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c632:	83 ec 0c             	sub    $0xc,%esp
f010c635:	6a 01                	push   $0x1
f010c637:	e8 fb 18 00 00       	call   f010df37 <isPageReplacmentAlgorithmLRU>
f010c63c:	83 c4 10             	add    $0x10,%esp
f010c63f:	85 c0                	test   %eax,%eax
f010c641:	74 05                	je     f010c648 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c643:	e8 e4 93 ff ff       	call   f0105a2c <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c648:	83 ec 0c             	sub    $0xc,%esp
f010c64b:	ff 75 08             	pushl  0x8(%ebp)
f010c64e:	e8 51 02 00 00       	call   f010c8a4 <fault_handler>
f010c653:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c656:	e9 bb 00 00 00       	jmp    f010c716 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c65b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c65e:	8b 40 28             	mov    0x28(%eax),%eax
f010c661:	83 f8 30             	cmp    $0x30,%eax
f010c664:	75 42                	jne    f010c6a8 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c666:	8b 45 08             	mov    0x8(%ebp),%eax
f010c669:	8b 78 04             	mov    0x4(%eax),%edi
f010c66c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c66f:	8b 30                	mov    (%eax),%esi
f010c671:	8b 45 08             	mov    0x8(%ebp),%eax
f010c674:	8b 58 10             	mov    0x10(%eax),%ebx
f010c677:	8b 45 08             	mov    0x8(%ebp),%eax
f010c67a:	8b 48 18             	mov    0x18(%eax),%ecx
f010c67d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c680:	8b 50 14             	mov    0x14(%eax),%edx
f010c683:	8b 45 08             	mov    0x8(%ebp),%eax
f010c686:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c689:	83 ec 08             	sub    $0x8,%esp
f010c68c:	57                   	push   %edi
f010c68d:	56                   	push   %esi
f010c68e:	53                   	push   %ebx
f010c68f:	51                   	push   %ecx
f010c690:	52                   	push   %edx
f010c691:	50                   	push   %eax
f010c692:	e8 eb 0f 00 00       	call   f010d682 <syscall>
f010c697:	83 c4 20             	add    $0x20,%esp
f010c69a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c69d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c6a3:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c6a6:	eb 6e                	jmp    f010c716 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c6a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6ab:	8b 40 28             	mov    0x28(%eax),%eax
f010c6ae:	83 f8 08             	cmp    $0x8,%eax
f010c6b1:	75 17                	jne    f010c6ca <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c6b3:	83 ec 04             	sub    $0x4,%esp
f010c6b6:	68 24 78 13 f0       	push   $0xf0137824
f010c6bb:	68 e7 00 00 00       	push   $0xe7
f010c6c0:	68 33 78 13 f0       	push   $0xf0137833
f010c6c5:	e8 3b 3b ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c6ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6cd:	8b 40 28             	mov    0x28(%eax),%eax
f010c6d0:	83 f8 20             	cmp    $0x20,%eax
f010c6d3:	75 07                	jne    f010c6dc <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c6d5:	e8 31 93 ff ff       	call   f0105a0b <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c6da:	eb 3a                	jmp    f010c716 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c6dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6df:	8b 40 34             	mov    0x34(%eax),%eax
f010c6e2:	66 83 f8 08          	cmp    $0x8,%ax
f010c6e6:	75 17                	jne    f010c6ff <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c6e8:	83 ec 04             	sub    $0x4,%esp
f010c6eb:	68 44 78 13 f0       	push   $0xf0137844
f010c6f0:	68 f4 00 00 00       	push   $0xf4
f010c6f5:	68 33 78 13 f0       	push   $0xf0137833
f010c6fa:	e8 06 3b ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c6ff:	83 ec 04             	sub    $0x4,%esp
f010c702:	68 60 78 13 f0       	push   $0xf0137860
f010c707:	68 f8 00 00 00       	push   $0xf8
f010c70c:	68 33 78 13 f0       	push   $0xf0137833
f010c711:	e8 ef 3a ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c716:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c719:	5b                   	pop    %ebx
f010c71a:	5e                   	pop    %esi
f010c71b:	5f                   	pop    %edi
f010c71c:	5d                   	pop    %ebp
f010c71d:	c3                   	ret    

f010c71e <trap>:

void trap(struct Trapframe *tf)
{
f010c71e:	55                   	push   %ebp
f010c71f:	89 e5                	mov    %esp,%ebp
f010c721:	57                   	push   %edi
f010c722:	56                   	push   %esi
f010c723:	53                   	push   %ebx
f010c724:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c727:	e8 68 7a ff ff       	call   f0104194 <kclock_stop>

	int userTrap = 0;
f010c72c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c733:	8b 45 08             	mov    0x8(%ebp),%eax
f010c736:	8b 40 34             	mov    0x34(%eax),%eax
f010c739:	0f b7 c0             	movzwl %ax,%eax
f010c73c:	83 e0 03             	and    $0x3,%eax
f010c73f:	83 f8 03             	cmp    $0x3,%eax
f010c742:	75 49                	jne    f010c78d <trap+0x6f>
		assert(curenv);
f010c744:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c749:	85 c0                	test   %eax,%eax
f010c74b:	75 19                	jne    f010c766 <trap+0x48>
f010c74d:	68 7f 78 13 f0       	push   $0xf013787f
f010c752:	68 86 78 13 f0       	push   $0xf0137886
f010c757:	68 06 01 00 00       	push   $0x106
f010c75c:	68 33 78 13 f0       	push   $0xf0137833
f010c761:	e8 9f 3a ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010c766:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010c76c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c76f:	89 c3                	mov    %eax,%ebx
f010c771:	b8 11 00 00 00       	mov    $0x11,%eax
f010c776:	89 d7                	mov    %edx,%edi
f010c778:	89 de                	mov    %ebx,%esi
f010c77a:	89 c1                	mov    %eax,%ecx
f010c77c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c77e:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c783:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c786:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c78d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c790:	8b 40 28             	mov    0x28(%eax),%eax
f010c793:	83 f8 20             	cmp    $0x20,%eax
f010c796:	75 40                	jne    f010c7d8 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c798:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c79c:	0f 84 a6 00 00 00    	je     f010c848 <trap+0x12a>
		{
			assert(curenv);
f010c7a2:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c7a7:	85 c0                	test   %eax,%eax
f010c7a9:	75 19                	jne    f010c7c4 <trap+0xa6>
f010c7ab:	68 7f 78 13 f0       	push   $0xf013787f
f010c7b0:	68 86 78 13 f0       	push   $0xf0137886
f010c7b5:	68 12 01 00 00       	push   $0x112
f010c7ba:	68 33 78 13 f0       	push   $0xf0137833
f010c7bf:	e8 41 3a ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010c7c4:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c7c9:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c7cf:	42                   	inc    %edx
f010c7d0:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c7d6:	eb 70                	jmp    f010c848 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c7d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7db:	8b 40 28             	mov    0x28(%eax),%eax
f010c7de:	83 f8 0e             	cmp    $0xe,%eax
f010c7e1:	75 65                	jne    f010c848 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c7e3:	a0 a8 1c 88 f0       	mov    0xf0881ca8,%al
f010c7e8:	84 c0                	test   %al,%al
f010c7ea:	74 5c                	je     f010c848 <trap+0x12a>
			if (userTrap){
f010c7ec:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c7f0:	74 2c                	je     f010c81e <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c7f2:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c7f7:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010c7fd:	8b 52 30             	mov    0x30(%edx),%edx
f010c800:	89 d1                	mov    %edx,%ecx
f010c802:	8a 15 a8 1c 88 f0    	mov    0xf0881ca8,%dl
f010c808:	0f b6 d2             	movzbl %dl,%edx
f010c80b:	01 ca                	add    %ecx,%edx
f010c80d:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c810:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c815:	83 ec 0c             	sub    $0xc,%esp
f010c818:	50                   	push   %eax
f010c819:	e8 43 d4 ff ff       	call   f0109c61 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c81e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c821:	8b 40 30             	mov    0x30(%eax),%eax
f010c824:	89 c2                	mov    %eax,%edx
f010c826:	a0 a8 1c 88 f0       	mov    0xf0881ca8,%al
f010c82b:	0f b6 c0             	movzbl %al,%eax
f010c82e:	01 d0                	add    %edx,%eax
f010c830:	89 c2                	mov    %eax,%edx
f010c832:	8b 45 08             	mov    0x8(%ebp),%eax
f010c835:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c838:	e8 82 79 ff ff       	call   f01041bf <kclock_resume>
				env_pop_tf(tf);
f010c83d:	83 ec 0c             	sub    $0xc,%esp
f010c840:	ff 75 08             	pushl  0x8(%ebp)
f010c843:	e8 7c d5 ff ff       	call   f0109dc4 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c848:	83 ec 0c             	sub    $0xc,%esp
f010c84b:	ff 75 08             	pushl  0x8(%ebp)
f010c84e:	e8 cb fd ff ff       	call   f010c61e <trap_dispatch>
f010c853:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c856:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c85a:	74 3d                	je     f010c899 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c85c:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c861:	85 c0                	test   %eax,%eax
f010c863:	74 0d                	je     f010c872 <trap+0x154>
f010c865:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c86a:	8b 40 54             	mov    0x54(%eax),%eax
f010c86d:	83 f8 02             	cmp    $0x2,%eax
f010c870:	74 19                	je     f010c88b <trap+0x16d>
f010c872:	68 9c 78 13 f0       	push   $0xf013789c
f010c877:	68 86 78 13 f0       	push   $0xf0137886
f010c87c:	68 27 01 00 00       	push   $0x127
f010c881:	68 33 78 13 f0       	push   $0xf0137833
f010c886:	e8 7a 39 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010c88b:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c890:	83 ec 0c             	sub    $0xc,%esp
f010c893:	50                   	push   %eax
f010c894:	e8 c8 d3 ff ff       	call   f0109c61 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c899:	83 ec 0c             	sub    $0xc,%esp
f010c89c:	ff 75 08             	pushl  0x8(%ebp)
f010c89f:	e8 20 d5 ff ff       	call   f0109dc4 <env_pop_tf>

f010c8a4 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c8a4:	55                   	push   %ebp
f010c8a5:	89 e5                	mov    %esp,%ebp
f010c8a7:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c8aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c8b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8b4:	8b 40 34             	mov    0x34(%eax),%eax
f010c8b7:	0f b7 c0             	movzwl %ax,%eax
f010c8ba:	83 e0 03             	and    $0x3,%eax
f010c8bd:	83 f8 03             	cmp    $0x3,%eax
f010c8c0:	75 07                	jne    f010c8c9 <fault_handler+0x25>
		userTrap = 1;
f010c8c2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c8c9:	0f 20 d0             	mov    %cr2,%eax
f010c8cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c8cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c8d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c8d5:	a1 20 1c 88 f0       	mov    0xf0881c20,%eax
f010c8da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c8dd:	75 2b                	jne    f010c90a <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c8df:	a0 24 1c 88 f0       	mov    0xf0881c24,%al
f010c8e4:	40                   	inc    %eax
f010c8e5:	a2 24 1c 88 f0       	mov    %al,0xf0881c24
		if (num_repeated_fault == 3)
f010c8ea:	a0 24 1c 88 f0       	mov    0xf0881c24,%al
f010c8ef:	3c 03                	cmp    $0x3,%al
f010c8f1:	75 1e                	jne    f010c911 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c8f3:	ff 75 ec             	pushl  -0x14(%ebp)
f010c8f6:	68 cc 78 13 f0       	push   $0xf01378cc
f010c8fb:	68 47 01 00 00       	push   $0x147
f010c900:	68 33 78 13 f0       	push   $0xf0137833
f010c905:	e8 fb 38 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c90a:	c6 05 24 1c 88 f0 00 	movb   $0x0,0xf0881c24
	}
	last_fault_va = fault_va ;
f010c911:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c914:	a3 20 1c 88 f0       	mov    %eax,0xf0881c20
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c919:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c91d:	75 29                	jne    f010c948 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c91f:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c926:	77 40                	ja     f010c968 <fault_handler+0xc4>
f010c928:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c92f:	76 37                	jbe    f010c968 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c931:	83 ec 04             	sub    $0x4,%esp
f010c934:	68 18 79 13 f0       	push   $0xf0137918
f010c939:	68 53 01 00 00       	push   $0x153
f010c93e:	68 33 78 13 f0       	push   $0xf0137833
f010c943:	e8 bd 38 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c948:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c94f:	76 17                	jbe    f010c968 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c951:	83 ec 04             	sub    $0x4,%esp
f010c954:	68 3c 79 13 f0       	push   $0xf013793c
f010c959:	68 59 01 00 00       	push   $0x159
f010c95e:	68 33 78 13 f0       	push   $0xf0137833
f010c963:	e8 9d 38 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c968:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010c96d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c970:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c973:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c976:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c979:	c1 ea 16             	shr    $0x16,%edx
f010c97c:	c1 e2 02             	shl    $0x2,%edx
f010c97f:	01 d0                	add    %edx,%eax
f010c981:	8b 00                	mov    (%eax),%eax
f010c983:	83 e0 01             	and    $0x1,%eax
f010c986:	85 c0                	test   %eax,%eax
f010c988:	75 28                	jne    f010c9b2 <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c98a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c98d:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c993:	8d 50 01             	lea    0x1(%eax),%edx
f010c996:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c999:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c99f:	83 ec 08             	sub    $0x8,%esp
f010c9a2:	ff 75 ec             	pushl  -0x14(%ebp)
f010c9a5:	ff 75 e8             	pushl  -0x18(%ebp)
f010c9a8:	e8 6f 16 00 00       	call   f010e01c <table_fault_handler>
f010c9ad:	83 c4 10             	add    $0x10,%esp
f010c9b0:	eb 7b                	jmp    f010ca2d <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c9b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c9b8:	83 ec 08             	sub    $0x8,%esp
f010c9bb:	ff 75 ec             	pushl  -0x14(%ebp)
f010c9be:	50                   	push   %eax
f010c9bf:	e8 92 b4 ff ff       	call   f0107e56 <pt_get_page_permissions>
f010c9c4:	83 c4 10             	add    $0x10,%esp
f010c9c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c9ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c9cd:	83 e0 01             	and    $0x1,%eax
f010c9d0:	85 c0                	test   %eax,%eax
f010c9d2:	74 17                	je     f010c9eb <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c9d4:	ff 75 ec             	pushl  -0x14(%ebp)
f010c9d7:	68 60 79 13 f0       	push   $0xf0137960
f010c9dc:	68 6e 01 00 00       	push   $0x16e
f010c9e1:	68 33 78 13 f0       	push   $0xf0137833
f010c9e6:	e8 1a 38 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c9eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9ee:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010c9f4:	8d 50 01             	lea    0x1(%eax),%edx
f010c9f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9fa:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ca00:	e8 f5 15 00 00       	call   f010dffa <isBufferingEnabled>
f010ca05:	84 c0                	test   %al,%al
f010ca07:	74 13                	je     f010ca1c <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ca09:	83 ec 08             	sub    $0x8,%esp
f010ca0c:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca0f:	ff 75 e8             	pushl  -0x18(%ebp)
f010ca12:	e8 8b 18 00 00       	call   f010e2a2 <__page_fault_handler_with_buffering>
f010ca17:	83 c4 10             	add    $0x10,%esp
f010ca1a:	eb 11                	jmp    f010ca2d <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ca1c:	83 ec 08             	sub    $0x8,%esp
f010ca1f:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca22:	ff 75 e8             	pushl  -0x18(%ebp)
f010ca25:	e8 13 16 00 00       	call   f010e03d <page_fault_handler>
f010ca2a:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ca2d:	0f 20 d8             	mov    %cr3,%eax
f010ca30:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ca33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca36:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010ca39:	90                   	nop
f010ca3a:	c9                   	leave  
f010ca3b:	c3                   	ret    

f010ca3c <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010ca3c:	6a 0e                	push   $0xe
f010ca3e:	e9 ed 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca43:	90                   	nop

f010ca44 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010ca44:	6a 00                	push   $0x0
f010ca46:	6a 30                	push   $0x30
f010ca48:	e9 e3 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca4d:	90                   	nop

f010ca4e <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010ca4e:	6a 08                	push   $0x8
f010ca50:	e9 db 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca55:	90                   	nop

f010ca56 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010ca56:	6a 00                	push   $0x0
f010ca58:	6a 00                	push   $0x0
f010ca5a:	e9 d1 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca5f:	90                   	nop

f010ca60 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010ca60:	6a 00                	push   $0x0
f010ca62:	6a 01                	push   $0x1
f010ca64:	e9 c7 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca69:	90                   	nop

f010ca6a <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010ca6a:	6a 00                	push   $0x0
f010ca6c:	6a 02                	push   $0x2
f010ca6e:	e9 bd 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca73:	90                   	nop

f010ca74 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010ca74:	6a 00                	push   $0x0
f010ca76:	6a 03                	push   $0x3
f010ca78:	e9 b3 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca7d:	90                   	nop

f010ca7e <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010ca7e:	6a 00                	push   $0x0
f010ca80:	6a 04                	push   $0x4
f010ca82:	e9 a9 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca87:	90                   	nop

f010ca88 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010ca88:	6a 00                	push   $0x0
f010ca8a:	6a 05                	push   $0x5
f010ca8c:	e9 9f 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca91:	90                   	nop

f010ca92 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010ca92:	6a 00                	push   $0x0
f010ca94:	6a 06                	push   $0x6
f010ca96:	e9 95 00 00 00       	jmp    f010cb30 <_alltraps>
f010ca9b:	90                   	nop

f010ca9c <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010ca9c:	6a 00                	push   $0x0
f010ca9e:	6a 07                	push   $0x7
f010caa0:	e9 8b 00 00 00       	jmp    f010cb30 <_alltraps>
f010caa5:	90                   	nop

f010caa6 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010caa6:	6a 0a                	push   $0xa
f010caa8:	e9 83 00 00 00       	jmp    f010cb30 <_alltraps>
f010caad:	90                   	nop

f010caae <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010caae:	6a 0b                	push   $0xb
f010cab0:	eb 7e                	jmp    f010cb30 <_alltraps>

f010cab2 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010cab2:	6a 0c                	push   $0xc
f010cab4:	eb 7a                	jmp    f010cb30 <_alltraps>

f010cab6 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010cab6:	6a 0d                	push   $0xd
f010cab8:	eb 76                	jmp    f010cb30 <_alltraps>

f010caba <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010caba:	6a 00                	push   $0x0
f010cabc:	6a 10                	push   $0x10
f010cabe:	eb 70                	jmp    f010cb30 <_alltraps>

f010cac0 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cac0:	6a 11                	push   $0x11
f010cac2:	eb 6c                	jmp    f010cb30 <_alltraps>

f010cac4 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cac4:	6a 00                	push   $0x0
f010cac6:	6a 12                	push   $0x12
f010cac8:	eb 66                	jmp    f010cb30 <_alltraps>

f010caca <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010caca:	6a 00                	push   $0x0
f010cacc:	6a 13                	push   $0x13
f010cace:	eb 60                	jmp    f010cb30 <_alltraps>

f010cad0 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010cad0:	6a 00                	push   $0x0
f010cad2:	6a 20                	push   $0x20
f010cad4:	eb 5a                	jmp    f010cb30 <_alltraps>

f010cad6 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cad6:	6a 00                	push   $0x0
f010cad8:	6a 21                	push   $0x21
f010cada:	eb 54                	jmp    f010cb30 <_alltraps>

f010cadc <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cadc:	6a 00                	push   $0x0
f010cade:	6a 22                	push   $0x22
f010cae0:	eb 4e                	jmp    f010cb30 <_alltraps>

f010cae2 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cae2:	6a 00                	push   $0x0
f010cae4:	6a 23                	push   $0x23
f010cae6:	eb 48                	jmp    f010cb30 <_alltraps>

f010cae8 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cae8:	6a 00                	push   $0x0
f010caea:	6a 24                	push   $0x24
f010caec:	eb 42                	jmp    f010cb30 <_alltraps>

f010caee <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010caee:	6a 00                	push   $0x0
f010caf0:	6a 25                	push   $0x25
f010caf2:	eb 3c                	jmp    f010cb30 <_alltraps>

f010caf4 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010caf4:	6a 00                	push   $0x0
f010caf6:	6a 26                	push   $0x26
f010caf8:	eb 36                	jmp    f010cb30 <_alltraps>

f010cafa <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cafa:	6a 00                	push   $0x0
f010cafc:	6a 27                	push   $0x27
f010cafe:	eb 30                	jmp    f010cb30 <_alltraps>

f010cb00 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cb00:	6a 00                	push   $0x0
f010cb02:	6a 28                	push   $0x28
f010cb04:	eb 2a                	jmp    f010cb30 <_alltraps>

f010cb06 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cb06:	6a 00                	push   $0x0
f010cb08:	6a 29                	push   $0x29
f010cb0a:	eb 24                	jmp    f010cb30 <_alltraps>

f010cb0c <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cb0c:	6a 00                	push   $0x0
f010cb0e:	6a 2a                	push   $0x2a
f010cb10:	eb 1e                	jmp    f010cb30 <_alltraps>

f010cb12 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cb12:	6a 00                	push   $0x0
f010cb14:	6a 2b                	push   $0x2b
f010cb16:	eb 18                	jmp    f010cb30 <_alltraps>

f010cb18 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cb18:	6a 00                	push   $0x0
f010cb1a:	6a 2c                	push   $0x2c
f010cb1c:	eb 12                	jmp    f010cb30 <_alltraps>

f010cb1e <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cb1e:	6a 00                	push   $0x0
f010cb20:	6a 2d                	push   $0x2d
f010cb22:	eb 0c                	jmp    f010cb30 <_alltraps>

f010cb24 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cb24:	6a 00                	push   $0x0
f010cb26:	6a 2e                	push   $0x2e
f010cb28:	eb 06                	jmp    f010cb30 <_alltraps>

f010cb2a <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cb2a:	6a 00                	push   $0x0
f010cb2c:	6a 2f                	push   $0x2f
f010cb2e:	eb 00                	jmp    f010cb30 <_alltraps>

f010cb30 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cb30:	1e                   	push   %ds
push %es
f010cb31:	06                   	push   %es
pushal
f010cb32:	60                   	pusha  

mov $(GD_KD), %ax
f010cb33:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cb37:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010cb39:	8e c0                	mov    %eax,%es

push %esp
f010cb3b:	54                   	push   %esp

call trap
f010cb3c:	e8 dd fb ff ff       	call   f010c71e <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010cb41:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010cb42:	61                   	popa   
pop %es
f010cb43:	07                   	pop    %es
pop %ds
f010cb44:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010cb45:	83 c4 08             	add    $0x8,%esp

iret
f010cb48:	cf                   	iret   

f010cb49 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010cb49:	55                   	push   %ebp
f010cb4a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cb4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb4f:	8b 15 54 1d 88 f0    	mov    0xf0881d54,%edx
f010cb55:	29 d0                	sub    %edx,%eax
f010cb57:	c1 f8 03             	sar    $0x3,%eax
f010cb5a:	89 c2                	mov    %eax,%edx
f010cb5c:	89 d0                	mov    %edx,%eax
f010cb5e:	c1 e0 02             	shl    $0x2,%eax
f010cb61:	01 d0                	add    %edx,%eax
f010cb63:	c1 e0 02             	shl    $0x2,%eax
f010cb66:	01 d0                	add    %edx,%eax
f010cb68:	c1 e0 02             	shl    $0x2,%eax
f010cb6b:	01 d0                	add    %edx,%eax
f010cb6d:	89 c1                	mov    %eax,%ecx
f010cb6f:	c1 e1 08             	shl    $0x8,%ecx
f010cb72:	01 c8                	add    %ecx,%eax
f010cb74:	89 c1                	mov    %eax,%ecx
f010cb76:	c1 e1 10             	shl    $0x10,%ecx
f010cb79:	01 c8                	add    %ecx,%eax
f010cb7b:	01 c0                	add    %eax,%eax
f010cb7d:	01 d0                	add    %edx,%eax
}
f010cb7f:	5d                   	pop    %ebp
f010cb80:	c3                   	ret    

f010cb81 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010cb81:	55                   	push   %ebp
f010cb82:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cb84:	ff 75 08             	pushl  0x8(%ebp)
f010cb87:	e8 bd ff ff ff       	call   f010cb49 <to_frame_number>
f010cb8c:	83 c4 04             	add    $0x4,%esp
f010cb8f:	c1 e0 0c             	shl    $0xc,%eax
}
f010cb92:	c9                   	leave  
f010cb93:	c3                   	ret    

f010cb94 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010cb94:	55                   	push   %ebp
f010cb95:	89 e5                	mov    %esp,%ebp
f010cb97:	83 ec 18             	sub    $0x18,%esp
f010cb9a:	8b 45 10             	mov    0x10(%ebp),%eax
f010cb9d:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010cba0:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010cba4:	74 26                	je     f010cbcc <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010cba6:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cbab:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cbae:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010cbb4:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010cbba:	83 ec 04             	sub    $0x4,%esp
f010cbbd:	50                   	push   %eax
f010cbbe:	52                   	push   %edx
f010cbbf:	68 50 7b 13 f0       	push   $0xf0137b50
f010cbc4:	e8 45 41 ff ff       	call   f0100d0e <cprintf>
f010cbc9:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010cbcc:	83 ec 04             	sub    $0x4,%esp
f010cbcf:	ff 75 08             	pushl  0x8(%ebp)
f010cbd2:	ff 75 0c             	pushl  0xc(%ebp)
f010cbd5:	68 59 7b 13 f0       	push   $0xf0137b59
f010cbda:	e8 2f 41 ff ff       	call   f0100d0e <cprintf>
f010cbdf:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010cbe2:	90                   	nop
f010cbe3:	c9                   	leave  
f010cbe4:	c3                   	ret    

f010cbe5 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010cbe5:	55                   	push   %ebp
f010cbe6:	89 e5                	mov    %esp,%ebp
f010cbe8:	83 ec 18             	sub    $0x18,%esp
f010cbeb:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbee:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010cbf1:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010cbf5:	83 ec 08             	sub    $0x8,%esp
f010cbf8:	50                   	push   %eax
f010cbf9:	68 5e 7b 13 f0       	push   $0xf0137b5e
f010cbfe:	e8 0b 41 ff ff       	call   f0100d0e <cprintf>
f010cc03:	83 c4 10             	add    $0x10,%esp
}
f010cc06:	90                   	nop
f010cc07:	c9                   	leave  
f010cc08:	c3                   	ret    

f010cc09 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010cc09:	55                   	push   %ebp
f010cc0a:	89 e5                	mov    %esp,%ebp
f010cc0c:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010cc0f:	e8 34 3f ff ff       	call   f0100b48 <cons_getc2>
f010cc14:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010cc17:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cc1a:	c9                   	leave  
f010cc1b:	c3                   	ret    

f010cc1c <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010cc1c:	55                   	push   %ebp
f010cc1d:	89 e5                	mov    %esp,%ebp
f010cc1f:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010cc22:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cc27:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010cc2a:	83 ec 0c             	sub    $0xc,%esp
f010cc2d:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cc30:	50                   	push   %eax
f010cc31:	e8 bc 9c ff ff       	call   f01068f2 <allocate_frame>
f010cc36:	83 c4 10             	add    $0x10,%esp
f010cc39:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cc3c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cc40:	75 08                	jne    f010cc4a <__sys_allocate_page+0x2e>
		return r ;
f010cc42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cc45:	e9 e9 00 00 00       	jmp    f010cd33 <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010cc4a:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc4d:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010cc52:	77 0c                	ja     f010cc60 <__sys_allocate_page+0x44>
f010cc54:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc57:	25 ff 0f 00 00       	and    $0xfff,%eax
f010cc5c:	85 c0                	test   %eax,%eax
f010cc5e:	74 0a                	je     f010cc6a <__sys_allocate_page+0x4e>
		return E_INVAL;
f010cc60:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cc65:	e9 c9 00 00 00       	jmp    f010cd33 <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010cc6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc6d:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010cc72:	83 f8 04             	cmp    $0x4,%eax
f010cc75:	74 0a                	je     f010cc81 <__sys_allocate_page+0x65>
		return E_INVAL;
f010cc77:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cc7c:	e9 b2 00 00 00       	jmp    f010cd33 <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010cc81:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc84:	83 ec 0c             	sub    $0xc,%esp
f010cc87:	50                   	push   %eax
f010cc88:	e8 f4 fe ff ff       	call   f010cb81 <to_physical_address>
f010cc8d:	83 c4 10             	add    $0x10,%esp
f010cc90:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010cc93:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cc96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc99:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cc9c:	6a 02                	push   $0x2
f010cc9e:	68 00 00 80 ef       	push   $0xef800000
f010cca3:	52                   	push   %edx
f010cca4:	50                   	push   %eax
f010cca5:	e8 97 a0 ff ff       	call   f0106d41 <map_frame>
f010ccaa:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010ccad:	83 ec 04             	sub    $0x4,%esp
f010ccb0:	68 00 10 00 00       	push   $0x1000
f010ccb5:	6a 00                	push   $0x0
f010ccb7:	68 00 00 80 ef       	push   $0xef800000
f010ccbc:	e8 ba 49 02 00       	call   f013167b <memset>
f010ccc1:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010ccc4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ccc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ccca:	8b 40 08             	mov    0x8(%eax),%eax
f010cccd:	40                   	inc    %eax
f010ccce:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010ccd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ccd5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ccd8:	83 ec 08             	sub    $0x8,%esp
f010ccdb:	68 00 00 80 ef       	push   $0xef800000
f010cce0:	50                   	push   %eax
f010cce1:	e8 90 a1 ff ff       	call   f0106e76 <unmap_frame>
f010cce6:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010cce9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ccec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ccef:	8b 40 08             	mov    0x8(%eax),%eax
f010ccf2:	48                   	dec    %eax
f010ccf3:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010ccf7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ccfa:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ccfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd00:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cd03:	ff 75 0c             	pushl  0xc(%ebp)
f010cd06:	51                   	push   %ecx
f010cd07:	52                   	push   %edx
f010cd08:	50                   	push   %eax
f010cd09:	e8 33 a0 ff ff       	call   f0106d41 <map_frame>
f010cd0e:	83 c4 10             	add    $0x10,%esp
f010cd11:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cd14:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cd18:	75 14                	jne    f010cd2e <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010cd1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd1d:	83 ec 0c             	sub    $0xc,%esp
f010cd20:	50                   	push   %eax
f010cd21:	e8 5b 9d ff ff       	call   f0106a81 <decrement_references>
f010cd26:	83 c4 10             	add    $0x10,%esp
		return r;
f010cd29:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd2c:	eb 05                	jmp    f010cd33 <__sys_allocate_page+0x117>
	}
	return 0 ;
f010cd2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cd33:	c9                   	leave  
f010cd34:	c3                   	ret    

f010cd35 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cd35:	55                   	push   %ebp
f010cd36:	89 e5                	mov    %esp,%ebp
f010cd38:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010cd3b:	83 ec 04             	sub    $0x4,%esp
f010cd3e:	68 61 7b 13 f0       	push   $0xf0137b61
f010cd43:	68 b3 00 00 00       	push   $0xb3
f010cd48:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010cd4d:	e8 b3 34 ff ff       	call   f0100205 <_panic>

f010cd52 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010cd52:	55                   	push   %ebp
f010cd53:	89 e5                	mov    %esp,%ebp
f010cd55:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010cd58:	83 ec 04             	sub    $0x4,%esp
f010cd5b:	68 94 7b 13 f0       	push   $0xf0137b94
f010cd60:	68 c3 00 00 00       	push   $0xc3
f010cd65:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010cd6a:	e8 96 34 ff ff       	call   f0100205 <_panic>

f010cd6f <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010cd6f:	55                   	push   %ebp
f010cd70:	89 e5                	mov    %esp,%ebp
f010cd72:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010cd75:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cd7a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cd7d:	83 ec 04             	sub    $0x4,%esp
f010cd80:	ff 75 0c             	pushl  0xc(%ebp)
f010cd83:	ff 75 08             	pushl  0x8(%ebp)
f010cd86:	50                   	push   %eax
f010cd87:	e8 a9 c1 ff ff       	call   f0108f35 <calculate_required_frames>
f010cd8c:	83 c4 10             	add    $0x10,%esp
}
f010cd8f:	c9                   	leave  
f010cd90:	c3                   	ret    

f010cd91 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010cd91:	55                   	push   %ebp
f010cd92:	89 e5                	mov    %esp,%ebp
f010cd94:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cd97:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cd9a:	83 ec 0c             	sub    $0xc,%esp
f010cd9d:	50                   	push   %eax
f010cd9e:	e8 38 a2 ff ff       	call   f0106fdb <calculate_available_frames>
f010cda3:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010cda6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cda9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cdac:	01 d0                	add    %edx,%eax
}
f010cdae:	c9                   	leave  
f010cdaf:	c3                   	ret    

f010cdb0 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010cdb0:	55                   	push   %ebp
f010cdb1:	89 e5                	mov    %esp,%ebp
f010cdb3:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cdb6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cdb9:	83 ec 0c             	sub    $0xc,%esp
f010cdbc:	50                   	push   %eax
f010cdbd:	e8 19 a2 ff ff       	call   f0106fdb <calculate_available_frames>
f010cdc2:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010cdc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cdc8:	c9                   	leave  
f010cdc9:	c3                   	ret    

f010cdca <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010cdca:	55                   	push   %ebp
f010cdcb:	89 e5                	mov    %esp,%ebp
f010cdcd:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010cdd0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010cdd3:	83 ec 0c             	sub    $0xc,%esp
f010cdd6:	50                   	push   %eax
f010cdd7:	e8 ff a1 ff ff       	call   f0106fdb <calculate_available_frames>
f010cddc:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010cddf:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010cde2:	c9                   	leave  
f010cde3:	c3                   	ret    

f010cde4 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010cde4:	55                   	push   %ebp
f010cde5:	89 e5                	mov    %esp,%ebp
f010cde7:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010cdea:	83 ec 0c             	sub    $0xc,%esp
f010cded:	ff 75 08             	pushl  0x8(%ebp)
f010cdf0:	e8 a3 35 02 00       	call   f0130398 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cdf5:	83 c4 10             	add    $0x10,%esp
}
f010cdf8:	c9                   	leave  
f010cdf9:	c3                   	ret    

f010cdfa <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010cdfa:	55                   	push   %ebp
f010cdfb:	89 e5                	mov    %esp,%ebp
f010cdfd:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010ce00:	e8 eb 34 02 00       	call   f01302f0 <scarce_memory>
}
f010ce05:	90                   	nop
f010ce06:	c9                   	leave  
f010ce07:	c3                   	ret    

f010ce08 <sys_clearFFL>:

void sys_clearFFL()
{
f010ce08:	55                   	push   %ebp
f010ce09:	89 e5                	mov    %esp,%ebp
f010ce0b:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010ce0e:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f010ce13:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010ce16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ce1d:	eb 12                	jmp    f010ce31 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010ce1f:	83 ec 0c             	sub    $0xc,%esp
f010ce22:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ce25:	50                   	push   %eax
f010ce26:	e8 c7 9a ff ff       	call   f01068f2 <allocate_frame>
f010ce2b:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ce2e:	ff 45 f4             	incl   -0xc(%ebp)
f010ce31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce34:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ce37:	7c e6                	jl     f010ce1f <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ce39:	90                   	nop
f010ce3a:	c9                   	leave  
f010ce3b:	c3                   	ret    

f010ce3c <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010ce3c:	55                   	push   %ebp
f010ce3d:	89 e5                	mov    %esp,%ebp
f010ce3f:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010ce42:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ce47:	83 ec 0c             	sub    $0xc,%esp
f010ce4a:	50                   	push   %eax
f010ce4b:	e8 d8 6e ff ff       	call   f0103d28 <pf_calculate_allocated_pages>
f010ce50:	83 c4 10             	add    $0x10,%esp
}
f010ce53:	c9                   	leave  
f010ce54:	c3                   	ret    

f010ce55 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010ce55:	55                   	push   %ebp
f010ce56:	89 e5                	mov    %esp,%ebp
f010ce58:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010ce5b:	e8 9a 11 00 00       	call   f010dffa <isBufferingEnabled>
f010ce60:	84 c0                	test   %al,%al
f010ce62:	74 19                	je     f010ce7d <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010ce64:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ce69:	83 ec 04             	sub    $0x4,%esp
f010ce6c:	ff 75 0c             	pushl  0xc(%ebp)
f010ce6f:	ff 75 08             	pushl  0x8(%ebp)
f010ce72:	50                   	push   %eax
f010ce73:	e8 a6 c1 ff ff       	call   f010901e <__free_user_mem_with_buffering>
f010ce78:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010ce7b:	eb 18                	jmp    f010ce95 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010ce7d:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010ce82:	83 ec 04             	sub    $0x4,%esp
f010ce85:	ff 75 0c             	pushl  0xc(%ebp)
f010ce88:	ff 75 08             	pushl  0x8(%ebp)
f010ce8b:	50                   	push   %eax
f010ce8c:	e8 70 c1 ff ff       	call   f0109001 <free_user_mem>
f010ce91:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010ce94:	90                   	nop
}
f010ce95:	c9                   	leave  
f010ce96:	c3                   	ret    

f010ce97 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010ce97:	55                   	push   %ebp
f010ce98:	89 e5                	mov    %esp,%ebp
f010ce9a:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010ce9d:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cea2:	83 ec 04             	sub    $0x4,%esp
f010cea5:	ff 75 0c             	pushl  0xc(%ebp)
f010cea8:	ff 75 08             	pushl  0x8(%ebp)
f010ceab:	50                   	push   %eax
f010ceac:	e8 33 c1 ff ff       	call   f0108fe4 <allocate_user_mem>
f010ceb1:	83 c4 10             	add    $0x10,%esp
	return;
f010ceb4:	90                   	nop
}
f010ceb5:	c9                   	leave  
f010ceb6:	c3                   	ret    

f010ceb7 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010ceb7:	55                   	push   %ebp
f010ceb8:	89 e5                	mov    %esp,%ebp
f010ceba:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010cebd:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cec2:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cec5:	ff 75 10             	pushl  0x10(%ebp)
f010cec8:	ff 75 0c             	pushl  0xc(%ebp)
f010cecb:	ff 75 08             	pushl  0x8(%ebp)
f010cece:	50                   	push   %eax
f010cecf:	e8 46 be ff ff       	call   f0108d1a <allocate_chunk>
f010ced4:	83 c4 10             	add    $0x10,%esp
	return;
f010ced7:	90                   	nop
}
f010ced8:	c9                   	leave  
f010ced9:	c3                   	ret    

f010ceda <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010ceda:	55                   	push   %ebp
f010cedb:	89 e5                	mov    %esp,%ebp
f010cedd:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cee0:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cee5:	ff 75 10             	pushl  0x10(%ebp)
f010cee8:	ff 75 0c             	pushl  0xc(%ebp)
f010ceeb:	ff 75 08             	pushl  0x8(%ebp)
f010ceee:	50                   	push   %eax
f010ceef:	e8 47 c1 ff ff       	call   f010903b <move_user_mem>
f010cef4:	83 c4 10             	add    $0x10,%esp
	return;
f010cef7:	90                   	nop
}
f010cef8:	c9                   	leave  
f010cef9:	c3                   	ret    

f010cefa <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cefa:	55                   	push   %ebp
f010cefb:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cefd:	a1 30 1d 88 f0       	mov    0xf0881d30,%eax
}
f010cf02:	5d                   	pop    %ebp
f010cf03:	c3                   	ret    

f010cf04 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cf04:	55                   	push   %ebp
f010cf05:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cf07:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf0a:	a3 30 1d 88 f0       	mov    %eax,0xf0881d30
}
f010cf0f:	90                   	nop
f010cf10:	5d                   	pop    %ebp
f010cf11:	c3                   	ret    

f010cf12 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cf12:	55                   	push   %ebp
f010cf13:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cf15:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cf1a:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010cf20:	8b 52 38             	mov    0x38(%edx),%edx
f010cf23:	80 e6 fd             	and    $0xfd,%dh
f010cf26:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cf29:	90                   	nop
f010cf2a:	5d                   	pop    %ebp
f010cf2b:	c3                   	ret    

f010cf2c <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cf2c:	55                   	push   %ebp
f010cf2d:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cf2f:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cf34:	8b 15 f4 13 88 f0    	mov    0xf08813f4,%edx
f010cf3a:	8b 52 38             	mov    0x38(%edx),%edx
f010cf3d:	80 ce 02             	or     $0x2,%dh
f010cf40:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cf43:	90                   	nop
f010cf44:	5d                   	pop    %ebp
f010cf45:	c3                   	ret    

f010cf46 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cf46:	55                   	push   %ebp
f010cf47:	89 e5                	mov    %esp,%ebp
f010cf49:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cf4c:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010cf51:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cf54:	83 ec 04             	sub    $0x4,%esp
f010cf57:	ff 75 0c             	pushl  0xc(%ebp)
f010cf5a:	ff 75 08             	pushl  0x8(%ebp)
f010cf5d:	50                   	push   %eax
f010cf5e:	e8 fe 16 00 00       	call   f010e661 <createSemaphore>
f010cf63:	83 c4 10             	add    $0x10,%esp
}
f010cf66:	c9                   	leave  
f010cf67:	c3                   	ret    

f010cf68 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cf68:	55                   	push   %ebp
f010cf69:	89 e5                	mov    %esp,%ebp
f010cf6b:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cf6e:	83 ec 08             	sub    $0x8,%esp
f010cf71:	ff 75 0c             	pushl  0xc(%ebp)
f010cf74:	ff 75 08             	pushl  0x8(%ebp)
f010cf77:	e8 5d 17 00 00       	call   f010e6d9 <waitSemaphore>
f010cf7c:	83 c4 10             	add    $0x10,%esp
}
f010cf7f:	90                   	nop
f010cf80:	c9                   	leave  
f010cf81:	c3                   	ret    

f010cf82 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cf82:	55                   	push   %ebp
f010cf83:	89 e5                	mov    %esp,%ebp
f010cf85:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cf88:	83 ec 08             	sub    $0x8,%esp
f010cf8b:	ff 75 0c             	pushl  0xc(%ebp)
f010cf8e:	ff 75 08             	pushl  0x8(%ebp)
f010cf91:	e8 f5 17 00 00       	call   f010e78b <signalSemaphore>
f010cf96:	83 c4 10             	add    $0x10,%esp
}
f010cf99:	90                   	nop
f010cf9a:	c9                   	leave  
f010cf9b:	c3                   	ret    

f010cf9c <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cf9c:	55                   	push   %ebp
f010cf9d:	89 e5                	mov    %esp,%ebp
f010cf9f:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cfa2:	83 ec 08             	sub    $0x8,%esp
f010cfa5:	ff 75 0c             	pushl  0xc(%ebp)
f010cfa8:	ff 75 08             	pushl  0x8(%ebp)
f010cfab:	e8 29 15 00 00       	call   f010e4d9 <get_semaphore_object_ID>
f010cfb0:	83 c4 10             	add    $0x10,%esp
f010cfb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cfb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cfba:	78 0c                	js     f010cfc8 <sys_getSemaphoreValue+0x2c>
f010cfbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cfbf:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010cfc4:	39 c2                	cmp    %eax,%edx
f010cfc6:	72 19                	jb     f010cfe1 <sys_getSemaphoreValue+0x45>
f010cfc8:	68 b4 7b 13 f0       	push   $0xf0137bb4
f010cfcd:	68 d9 7b 13 f0       	push   $0xf0137bd9
f010cfd2:	68 4a 01 00 00       	push   $0x14a
f010cfd7:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010cfdc:	e8 24 32 ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010cfe1:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010cfe7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cfea:	89 d0                	mov    %edx,%eax
f010cfec:	c1 e0 02             	shl    $0x2,%eax
f010cfef:	01 d0                	add    %edx,%eax
f010cff1:	01 c0                	add    %eax,%eax
f010cff3:	01 d0                	add    %edx,%eax
f010cff5:	01 c0                	add    %eax,%eax
f010cff7:	01 d0                	add    %edx,%eax
f010cff9:	c1 e0 02             	shl    $0x2,%eax
f010cffc:	01 c8                	add    %ecx,%eax
f010cffe:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d001:	c9                   	leave  
f010d002:	c3                   	ret    

f010d003 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d003:	55                   	push   %ebp
f010d004:	89 e5                	mov    %esp,%ebp
f010d006:	83 ec 18             	sub    $0x18,%esp
f010d009:	8b 45 10             	mov    0x10(%ebp),%eax
f010d00c:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d00f:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d013:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d018:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d01b:	83 ec 0c             	sub    $0xc,%esp
f010d01e:	ff 75 14             	pushl  0x14(%ebp)
f010d021:	52                   	push   %edx
f010d022:	ff 75 0c             	pushl  0xc(%ebp)
f010d025:	ff 75 08             	pushl  0x8(%ebp)
f010d028:	50                   	push   %eax
f010d029:	e8 6e a5 ff ff       	call   f010759c <createSharedObject>
f010d02e:	83 c4 20             	add    $0x20,%esp
}
f010d031:	c9                   	leave  
f010d032:	c3                   	ret    

f010d033 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d033:	55                   	push   %ebp
f010d034:	89 e5                	mov    %esp,%ebp
f010d036:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d039:	83 ec 08             	sub    $0x8,%esp
f010d03c:	ff 75 0c             	pushl  0xc(%ebp)
f010d03f:	ff 75 08             	pushl  0x8(%ebp)
f010d042:	e8 0f a5 ff ff       	call   f0107556 <getSizeOfSharedObject>
f010d047:	83 c4 10             	add    $0x10,%esp
}
f010d04a:	c9                   	leave  
f010d04b:	c3                   	ret    

f010d04c <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d04c:	55                   	push   %ebp
f010d04d:	89 e5                	mov    %esp,%ebp
f010d04f:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d052:	83 ec 04             	sub    $0x4,%esp
f010d055:	ff 75 10             	pushl  0x10(%ebp)
f010d058:	ff 75 0c             	pushl  0xc(%ebp)
f010d05b:	ff 75 08             	pushl  0x8(%ebp)
f010d05e:	e8 51 a7 ff ff       	call   f01077b4 <getSharedObject>
f010d063:	83 c4 10             	add    $0x10,%esp
}
f010d066:	c9                   	leave  
f010d067:	c3                   	ret    

f010d068 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d068:	55                   	push   %ebp
f010d069:	89 e5                	mov    %esp,%ebp
f010d06b:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d06e:	83 ec 08             	sub    $0x8,%esp
f010d071:	ff 75 0c             	pushl  0xc(%ebp)
f010d074:	ff 75 08             	pushl  0x8(%ebp)
f010d077:	e8 55 a7 ff ff       	call   f01077d1 <freeSharedObject>
f010d07c:	83 c4 10             	add    $0x10,%esp
}
f010d07f:	c9                   	leave  
f010d080:	c3                   	ret    

f010d081 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d081:	55                   	push   %ebp
f010d082:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d084:	a1 28 1d 88 f0       	mov    0xf0881d28,%eax
}
f010d089:	5d                   	pop    %ebp
f010d08a:	c3                   	ret    

f010d08b <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d08b:	55                   	push   %ebp
f010d08c:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d08e:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d093:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d096:	5d                   	pop    %ebp
f010d097:	c3                   	ret    

f010d098 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d098:	55                   	push   %ebp
f010d099:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d09b:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d0a0:	89 c2                	mov    %eax,%edx
f010d0a2:	a1 f0 13 88 f0       	mov    0xf08813f0,%eax
f010d0a7:	29 c2                	sub    %eax,%edx
f010d0a9:	89 d0                	mov    %edx,%eax
f010d0ab:	c1 f8 04             	sar    $0x4,%eax
f010d0ae:	89 c2                	mov    %eax,%edx
f010d0b0:	89 d0                	mov    %edx,%eax
f010d0b2:	c1 e0 03             	shl    $0x3,%eax
f010d0b5:	01 d0                	add    %edx,%eax
f010d0b7:	01 c0                	add    %eax,%eax
f010d0b9:	01 d0                	add    %edx,%eax
f010d0bb:	c1 e0 03             	shl    $0x3,%eax
f010d0be:	01 d0                	add    %edx,%eax
f010d0c0:	89 c1                	mov    %eax,%ecx
f010d0c2:	c1 e1 08             	shl    $0x8,%ecx
f010d0c5:	01 c8                	add    %ecx,%eax
f010d0c7:	01 c0                	add    %eax,%eax
f010d0c9:	01 d0                	add    %edx,%eax
f010d0cb:	01 c0                	add    %eax,%eax
f010d0cd:	01 d0                	add    %edx,%eax
f010d0cf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d0d6:	01 d0                	add    %edx,%eax
f010d0d8:	89 c2                	mov    %eax,%edx
f010d0da:	c1 e2 09             	shl    $0x9,%edx
f010d0dd:	29 c2                	sub    %eax,%edx
f010d0df:	89 d0                	mov    %edx,%eax
f010d0e1:	f7 d8                	neg    %eax
}
f010d0e3:	5d                   	pop    %ebp
f010d0e4:	c3                   	ret    

f010d0e5 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d0e5:	55                   	push   %ebp
f010d0e6:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d0e8:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d0ed:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d0f0:	5d                   	pop    %ebp
f010d0f1:	c3                   	ret    

f010d0f2 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d0f2:	55                   	push   %ebp
f010d0f3:	89 e5                	mov    %esp,%ebp
f010d0f5:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d0f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d0fc:	75 0a                	jne    f010d108 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d0fe:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d103:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d106:	eb 22                	jmp    f010d12a <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d108:	83 ec 04             	sub    $0x4,%esp
f010d10b:	6a 00                	push   $0x0
f010d10d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d110:	50                   	push   %eax
f010d111:	ff 75 08             	pushl  0x8(%ebp)
f010d114:	e8 e6 cb ff ff       	call   f0109cff <envid2env>
f010d119:	83 c4 10             	add    $0x10,%esp
f010d11c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d11f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d123:	79 05                	jns    f010d12a <sys_destroy_env+0x38>
	{
		return r;
f010d125:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d128:	eb 5e                	jmp    f010d188 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d12a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d12d:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d132:	39 c2                	cmp    %eax,%edx
f010d134:	75 1b                	jne    f010d151 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d136:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d13b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d13e:	83 ec 08             	sub    $0x8,%esp
f010d141:	50                   	push   %eax
f010d142:	68 ee 7b 13 f0       	push   $0xf0137bee
f010d147:	e8 c2 3b ff ff       	call   f0100d0e <cprintf>
f010d14c:	83 c4 10             	add    $0x10,%esp
f010d14f:	eb 20                	jmp    f010d171 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d151:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d154:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d157:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d15c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d15f:	83 ec 04             	sub    $0x4,%esp
f010d162:	52                   	push   %edx
f010d163:	50                   	push   %eax
f010d164:	68 09 7c 13 f0       	push   $0xf0137c09
f010d169:	e8 a0 3b ff ff       	call   f0100d0e <cprintf>
f010d16e:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d171:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d174:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d177:	83 ec 0c             	sub    $0xc,%esp
f010d17a:	50                   	push   %eax
f010d17b:	e8 bf 84 ff ff       	call   f010563f <sched_kill_env>
f010d180:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d183:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d188:	c9                   	leave  
f010d189:	c3                   	ret    

f010d18a <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d18a:	55                   	push   %ebp
f010d18b:	89 e5                	mov    %esp,%ebp
f010d18d:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d190:	e8 4b cb ff ff       	call   f0109ce0 <env_exit>
	//env_run_cmd_prmpt();
}
f010d195:	90                   	nop
f010d196:	c9                   	leave  
f010d197:	c3                   	ret    

f010d198 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d198:	55                   	push   %ebp
f010d199:	89 e5                	mov    %esp,%ebp
f010d19b:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d19e:	ff 75 14             	pushl  0x14(%ebp)
f010d1a1:	ff 75 10             	pushl  0x10(%ebp)
f010d1a4:	ff 75 0c             	pushl  0xc(%ebp)
f010d1a7:	ff 75 08             	pushl  0x8(%ebp)
f010d1aa:	e8 a9 be ff ff       	call   f0109058 <env_create>
f010d1af:	83 c4 10             	add    $0x10,%esp
f010d1b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d1b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d1b9:	75 07                	jne    f010d1c2 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d1bb:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d1c0:	eb 14                	jmp    f010d1d6 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d1c2:	83 ec 0c             	sub    $0xc,%esp
f010d1c5:	ff 75 f4             	pushl  -0xc(%ebp)
f010d1c8:	e8 37 80 ff ff       	call   f0105204 <sched_new_env>
f010d1cd:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d1d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1d3:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d1d6:	c9                   	leave  
f010d1d7:	c3                   	ret    

f010d1d8 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d1d8:	55                   	push   %ebp
f010d1d9:	89 e5                	mov    %esp,%ebp
f010d1db:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d1de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1e1:	83 ec 0c             	sub    $0xc,%esp
f010d1e4:	50                   	push   %eax
f010d1e5:	e8 37 80 ff ff       	call   f0105221 <sched_run_env>
f010d1ea:	83 c4 10             	add    $0x10,%esp
}
f010d1ed:	90                   	nop
f010d1ee:	c9                   	leave  
f010d1ef:	c3                   	ret    

f010d1f0 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d1f0:	55                   	push   %ebp
f010d1f1:	89 e5                	mov    %esp,%ebp
f010d1f3:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d1f6:	0f 31                	rdtsc  
f010d1f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d1fb:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d1fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d201:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d204:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d207:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d20a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d20d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d210:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d213:	89 01                	mov    %eax,(%ecx)
f010d215:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d218:	8b 45 08             	mov    0x8(%ebp),%eax
f010d21b:	c9                   	leave  
f010d21c:	c2 04 00             	ret    $0x4

f010d21f <sys_rcr2>:

uint32 sys_rcr2()
{
f010d21f:	55                   	push   %ebp
f010d220:	89 e5                	mov    %esp,%ebp
f010d222:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d225:	0f 20 d0             	mov    %cr2,%eax
f010d228:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d22b:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d22e:	90                   	nop
}
f010d22f:	c9                   	leave  
f010d230:	c3                   	ret    

f010d231 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d231:	55                   	push   %ebp
f010d232:	89 e5                	mov    %esp,%ebp
f010d234:	83 ec 04             	sub    $0x4,%esp
f010d237:	8b 45 08             	mov    0x8(%ebp),%eax
f010d23a:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d23d:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d240:	a2 a8 1c 88 f0       	mov    %al,0xf0881ca8
}
f010d245:	90                   	nop
f010d246:	c9                   	leave  
f010d247:	c3                   	ret    

f010d248 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d248:	55                   	push   %ebp
f010d249:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d24b:	c7 05 b0 1e 88 f0 00 	movl   $0x0,0xf0881eb0
f010d252:	00 00 00 
}
f010d255:	90                   	nop
f010d256:	5d                   	pop    %ebp
f010d257:	c3                   	ret    

f010d258 <inctst>:
void inctst()
{
f010d258:	55                   	push   %ebp
f010d259:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d25b:	a1 b0 1e 88 f0       	mov    0xf0881eb0,%eax
f010d260:	40                   	inc    %eax
f010d261:	a3 b0 1e 88 f0       	mov    %eax,0xf0881eb0
}
f010d266:	90                   	nop
f010d267:	5d                   	pop    %ebp
f010d268:	c3                   	ret    

f010d269 <gettst>:
uint32 gettst()
{
f010d269:	55                   	push   %ebp
f010d26a:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d26c:	a1 b0 1e 88 f0       	mov    0xf0881eb0,%eax
}
f010d271:	5d                   	pop    %ebp
f010d272:	c3                   	ret    

f010d273 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d273:	55                   	push   %ebp
f010d274:	89 e5                	mov    %esp,%ebp
f010d276:	83 ec 28             	sub    $0x28,%esp
f010d279:	8b 45 14             	mov    0x14(%ebp),%eax
f010d27c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d27f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d286:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d28a:	83 f8 65             	cmp    $0x65,%eax
f010d28d:	74 5d                	je     f010d2ec <tst+0x79>
f010d28f:	83 f8 65             	cmp    $0x65,%eax
f010d292:	7f 0a                	jg     f010d29e <tst+0x2b>
f010d294:	83 f8 62             	cmp    $0x62,%eax
f010d297:	74 73                	je     f010d30c <tst+0x99>
f010d299:	e9 91 00 00 00       	jmp    f010d32f <tst+0xbc>
f010d29e:	83 f8 67             	cmp    $0x67,%eax
f010d2a1:	74 29                	je     f010d2cc <tst+0x59>
f010d2a3:	83 f8 6c             	cmp    $0x6c,%eax
f010d2a6:	0f 85 83 00 00 00    	jne    f010d32f <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d2ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2af:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d2b2:	73 09                	jae    f010d2bd <tst+0x4a>
			chk = 1;
f010d2b4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d2bb:	eb 68                	jmp    f010d325 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d2bd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d2c1:	74 62                	je     f010d325 <tst+0xb2>
			chk = 1;
f010d2c3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d2ca:	eb 59                	jmp    f010d325 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d2cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2cf:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d2d2:	76 09                	jbe    f010d2dd <tst+0x6a>
			chk = 1;
f010d2d4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d2db:	eb 4b                	jmp    f010d328 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d2dd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d2e1:	74 45                	je     f010d328 <tst+0xb5>
			chk = 1;
f010d2e3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d2ea:	eb 3c                	jmp    f010d328 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d2ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2ef:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d2f2:	75 09                	jne    f010d2fd <tst+0x8a>
			chk = 1;
f010d2f4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d2fb:	eb 2e                	jmp    f010d32b <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d2fd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d301:	74 28                	je     f010d32b <tst+0xb8>
			chk = 1;
f010d303:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d30a:	eb 1f                	jmp    f010d32b <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d30c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d30f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d312:	72 1a                	jb     f010d32e <tst+0xbb>
f010d314:	8b 45 08             	mov    0x8(%ebp),%eax
f010d317:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d31a:	77 12                	ja     f010d32e <tst+0xbb>
			chk = 1;
f010d31c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d323:	eb 09                	jmp    f010d32e <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d325:	90                   	nop
f010d326:	eb 07                	jmp    f010d32f <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d328:	90                   	nop
f010d329:	eb 04                	jmp    f010d32f <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d32b:	90                   	nop
f010d32c:	eb 01                	jmp    f010d32f <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d32e:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d32f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d333:	75 17                	jne    f010d34c <tst+0xd9>
f010d335:	83 ec 04             	sub    $0x4,%esp
f010d338:	68 21 7c 13 f0       	push   $0xf0137c21
f010d33d:	68 00 02 00 00       	push   $0x200
f010d342:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010d347:	e8 b9 2e ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d34c:	a1 b0 1e 88 f0       	mov    0xf0881eb0,%eax
f010d351:	40                   	inc    %eax
f010d352:	a3 b0 1e 88 f0       	mov    %eax,0xf0881eb0
	return;
f010d357:	90                   	nop
}
f010d358:	c9                   	leave  
f010d359:	c3                   	ret    

f010d35a <chktst>:

void chktst(uint32 n)
{
f010d35a:	55                   	push   %ebp
f010d35b:	89 e5                	mov    %esp,%ebp
f010d35d:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d360:	a1 b0 1e 88 f0       	mov    0xf0881eb0,%eax
f010d365:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d368:	75 12                	jne    f010d37c <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d36a:	83 ec 0c             	sub    $0xc,%esp
f010d36d:	68 34 7c 13 f0       	push   $0xf0137c34
f010d372:	e8 97 39 ff ff       	call   f0100d0e <cprintf>
f010d377:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d37a:	eb 17                	jmp    f010d393 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d37c:	83 ec 04             	sub    $0x4,%esp
f010d37f:	68 60 7c 13 f0       	push   $0xf0137c60
f010d384:	68 0a 02 00 00       	push   $0x20a
f010d389:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010d38e:	e8 72 2e ff ff       	call   f0100205 <_panic>
}
f010d393:	c9                   	leave  
f010d394:	c3                   	ret    

f010d395 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d395:	55                   	push   %ebp
f010d396:	89 e5                	mov    %esp,%ebp
f010d398:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d39b:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d3a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d3a3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d3aa:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d3b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d3b5:	0f 84 a5 00 00 00    	je     f010d460 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d3bb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d3c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d3c5:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d3cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d3ce:	eb 4a                	jmp    f010d41a <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d3d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3d3:	8b 00                	mov    (%eax),%eax
f010d3d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d3d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d3db:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d3e0:	89 c2                	mov    %eax,%edx
f010d3e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3e5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d3ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3ef:	01 c8                	add    %ecx,%eax
f010d3f1:	8b 00                	mov    (%eax),%eax
f010d3f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d3f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d3f9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d3fe:	39 c2                	cmp    %eax,%edx
f010d400:	74 09                	je     f010d40b <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d402:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d409:	eb 3e                	jmp    f010d449 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d40b:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d40e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d411:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d417:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d41a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d41e:	74 08                	je     f010d428 <sys_check_LRU_lists+0x93>
f010d420:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d423:	8b 40 10             	mov    0x10(%eax),%eax
f010d426:	eb 05                	jmp    f010d42d <sys_check_LRU_lists+0x98>
f010d428:	b8 00 00 00 00       	mov    $0x0,%eax
f010d42d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d430:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d436:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d439:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d43f:	85 c0                	test   %eax,%eax
f010d441:	75 8d                	jne    f010d3d0 <sys_check_LRU_lists+0x3b>
f010d443:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d447:	75 87                	jne    f010d3d0 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d449:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d44c:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d452:	8b 45 10             	mov    0x10(%ebp),%eax
f010d455:	39 c2                	cmp    %eax,%edx
f010d457:	74 07                	je     f010d460 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d459:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d460:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d464:	0f 84 a5 00 00 00    	je     f010d50f <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d46a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d471:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d474:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d47a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d47d:	eb 4a                	jmp    f010d4c9 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d47f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d482:	8b 00                	mov    (%eax),%eax
f010d484:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d487:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d48a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d48f:	89 c2                	mov    %eax,%edx
f010d491:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d494:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d49b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d49e:	01 c8                	add    %ecx,%eax
f010d4a0:	8b 00                	mov    (%eax),%eax
f010d4a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d4a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d4a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d4ad:	39 c2                	cmp    %eax,%edx
f010d4af:	74 09                	je     f010d4ba <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d4b1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d4b8:	eb 3e                	jmp    f010d4f8 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d4ba:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d4bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4c0:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d4c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d4c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d4cd:	74 08                	je     f010d4d7 <sys_check_LRU_lists+0x142>
f010d4cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4d2:	8b 40 10             	mov    0x10(%eax),%eax
f010d4d5:	eb 05                	jmp    f010d4dc <sys_check_LRU_lists+0x147>
f010d4d7:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d4df:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d4e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4e8:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d4ee:	85 c0                	test   %eax,%eax
f010d4f0:	75 8d                	jne    f010d47f <sys_check_LRU_lists+0xea>
f010d4f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d4f6:	75 87                	jne    f010d47f <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d4f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4fb:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d501:	8b 45 14             	mov    0x14(%ebp),%eax
f010d504:	39 c2                	cmp    %eax,%edx
f010d506:	74 07                	je     f010d50f <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d508:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d50f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d512:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d515:	c9                   	leave  
f010d516:	c3                   	ret    

f010d517 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d517:	55                   	push   %ebp
f010d518:	89 e5                	mov    %esp,%ebp
f010d51a:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d51d:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010d522:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d525:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d52c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d52f:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d535:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d538:	eb 65                	jmp    f010d59f <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d53a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d541:	eb 3a                	jmp    f010d57d <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d543:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d546:	8b 00                	mov    (%eax),%eax
f010d548:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d54b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d54e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d553:	89 c2                	mov    %eax,%edx
f010d555:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d558:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d55f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d562:	01 c8                	add    %ecx,%eax
f010d564:	8b 00                	mov    (%eax),%eax
f010d566:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d569:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d56c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d571:	39 c2                	cmp    %eax,%edx
f010d573:	75 05                	jne    f010d57a <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d575:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d578:	eb 0b                	jmp    f010d585 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d57a:	ff 45 f4             	incl   -0xc(%ebp)
f010d57d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d580:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d583:	7c be                	jl     f010d543 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d585:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d589:	7e 08                	jle    f010d593 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d58b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d58e:	e9 ed 00 00 00       	jmp    f010d680 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d593:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d596:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d59c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d59f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d5a3:	74 08                	je     f010d5ad <sys_check_LRU_lists_free+0x96>
f010d5a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d5a8:	8b 40 10             	mov    0x10(%eax),%eax
f010d5ab:	eb 05                	jmp    f010d5b2 <sys_check_LRU_lists_free+0x9b>
f010d5ad:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d5b5:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d5bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d5be:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d5c4:	85 c0                	test   %eax,%eax
f010d5c6:	0f 85 6e ff ff ff    	jne    f010d53a <sys_check_LRU_lists_free+0x23>
f010d5cc:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d5d0:	0f 85 64 ff ff ff    	jne    f010d53a <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d5d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d5d9:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d5df:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d5e2:	eb 62                	jmp    f010d646 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d5e4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d5eb:	eb 3a                	jmp    f010d627 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d5ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d5f0:	8b 00                	mov    (%eax),%eax
f010d5f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d5f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5f8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d5fd:	89 c2                	mov    %eax,%edx
f010d5ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d602:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d609:	8b 45 08             	mov    0x8(%ebp),%eax
f010d60c:	01 c8                	add    %ecx,%eax
f010d60e:	8b 00                	mov    (%eax),%eax
f010d610:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d616:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d61b:	39 c2                	cmp    %eax,%edx
f010d61d:	75 05                	jne    f010d624 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d61f:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d622:	eb 0b                	jmp    f010d62f <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d624:	ff 45 f0             	incl   -0x10(%ebp)
f010d627:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d62a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d62d:	7c be                	jl     f010d5ed <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d62f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d633:	7e 05                	jle    f010d63a <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d635:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d638:	eb 46                	jmp    f010d680 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d63a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d63d:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d643:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d646:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d64a:	74 08                	je     f010d654 <sys_check_LRU_lists_free+0x13d>
f010d64c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d64f:	8b 40 10             	mov    0x10(%eax),%eax
f010d652:	eb 05                	jmp    f010d659 <sys_check_LRU_lists_free+0x142>
f010d654:	b8 00 00 00 00       	mov    $0x0,%eax
f010d659:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d65c:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d662:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d665:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d66b:	85 c0                	test   %eax,%eax
f010d66d:	0f 85 71 ff ff ff    	jne    f010d5e4 <sys_check_LRU_lists_free+0xcd>
f010d673:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d677:	0f 85 67 ff ff ff    	jne    f010d5e4 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d67d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d680:	c9                   	leave  
f010d681:	c3                   	ret    

f010d682 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d682:	55                   	push   %ebp
f010d683:	89 e5                	mov    %esp,%ebp
f010d685:	56                   	push   %esi
f010d686:	53                   	push   %ebx
f010d687:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d68a:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d68e:	0f 87 0e 04 00 00    	ja     f010daa2 <syscall+0x420>
f010d694:	8b 45 08             	mov    0x8(%ebp),%eax
f010d697:	c1 e0 02             	shl    $0x2,%eax
f010d69a:	05 7c 7c 13 f0       	add    $0xf0137c7c,%eax
f010d69f:	8b 00                	mov    (%eax),%eax
f010d6a1:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d6a3:	8b 45 14             	mov    0x14(%ebp),%eax
f010d6a6:	0f b6 d0             	movzbl %al,%edx
f010d6a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6ac:	83 ec 04             	sub    $0x4,%esp
f010d6af:	52                   	push   %edx
f010d6b0:	ff 75 10             	pushl  0x10(%ebp)
f010d6b3:	50                   	push   %eax
f010d6b4:	e8 db f4 ff ff       	call   f010cb94 <sys_cputs>
f010d6b9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d6bc:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6c1:	e9 e1 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d6c6:	e8 3e f5 ff ff       	call   f010cc09 <sys_cgetc>
f010d6cb:	e9 d7 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d6d0:	83 ec 08             	sub    $0x8,%esp
f010d6d3:	ff 75 10             	pushl  0x10(%ebp)
f010d6d6:	ff 75 0c             	pushl  0xc(%ebp)
f010d6d9:	e8 91 f6 ff ff       	call   f010cd6f <sys_calculate_required_frames>
f010d6de:	83 c4 10             	add    $0x10,%esp
f010d6e1:	e9 c1 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d6e6:	e8 a6 f6 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f010d6eb:	e9 b7 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d6f0:	e8 bb f6 ff ff       	call   f010cdb0 <sys_calculate_modified_frames>
f010d6f5:	e9 ad 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d6fa:	e8 cb f6 ff ff       	call   f010cdca <sys_calculate_notmod_frames>
f010d6ff:	e9 a3 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d704:	e8 33 f7 ff ff       	call   f010ce3c <sys_pf_calculate_allocated_pages>
f010d709:	e9 99 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d70e:	83 ec 0c             	sub    $0xc,%esp
f010d711:	ff 75 0c             	pushl  0xc(%ebp)
f010d714:	e8 cb f6 ff ff       	call   f010cde4 <sys_calculate_pages_tobe_removed_ready_exit>
f010d719:	83 c4 10             	add    $0x10,%esp
f010d71c:	e9 86 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d721:	e8 d4 f6 ff ff       	call   f010cdfa <sys_scarce_memory>
		return 0;
f010d726:	b8 00 00 00 00       	mov    $0x0,%eax
f010d72b:	e9 77 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d730:	83 ec 08             	sub    $0x8,%esp
f010d733:	ff 75 10             	pushl  0x10(%ebp)
f010d736:	ff 75 0c             	pushl  0xc(%ebp)
f010d739:	e8 17 f7 ff ff       	call   f010ce55 <sys_free_user_mem>
f010d73e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d741:	b8 00 00 00 00       	mov    $0x0,%eax
f010d746:	e9 5c 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d74b:	8b 55 10             	mov    0x10(%ebp),%edx
f010d74e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d751:	83 ec 08             	sub    $0x8,%esp
f010d754:	52                   	push   %edx
f010d755:	50                   	push   %eax
f010d756:	e8 c1 f4 ff ff       	call   f010cc1c <__sys_allocate_page>
f010d75b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d75e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d763:	e9 3f 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d768:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d76b:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d76e:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d771:	8b 55 10             	mov    0x10(%ebp),%edx
f010d774:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d777:	83 ec 0c             	sub    $0xc,%esp
f010d77a:	56                   	push   %esi
f010d77b:	53                   	push   %ebx
f010d77c:	51                   	push   %ecx
f010d77d:	52                   	push   %edx
f010d77e:	50                   	push   %eax
f010d77f:	e8 b1 f5 ff ff       	call   f010cd35 <__sys_map_frame>
f010d784:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d787:	b8 00 00 00 00       	mov    $0x0,%eax
f010d78c:	e9 16 03 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d791:	8b 55 10             	mov    0x10(%ebp),%edx
f010d794:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d797:	83 ec 08             	sub    $0x8,%esp
f010d79a:	52                   	push   %edx
f010d79b:	50                   	push   %eax
f010d79c:	e8 b1 f5 ff ff       	call   f010cd52 <__sys_unmap_frame>
f010d7a1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7a4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7a9:	e9 f9 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d7ae:	83 ec 04             	sub    $0x4,%esp
f010d7b1:	ff 75 14             	pushl  0x14(%ebp)
f010d7b4:	ff 75 10             	pushl  0x10(%ebp)
f010d7b7:	ff 75 0c             	pushl  0xc(%ebp)
f010d7ba:	e8 f8 f6 ff ff       	call   f010ceb7 <sys_allocate_chunk>
f010d7bf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7c2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7c7:	e9 db 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d7cc:	e8 41 f7 ff ff       	call   f010cf12 <sys_disable_interrupt>
		return 0;
f010d7d1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7d6:	e9 cc 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d7db:	e8 4c f7 ff ff       	call   f010cf2c <sys_enable_interrupt>
		return 0;
f010d7e0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7e5:	e9 bd 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d7ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7ed:	0f be c0             	movsbl %al,%eax
f010d7f0:	83 ec 0c             	sub    $0xc,%esp
f010d7f3:	50                   	push   %eax
f010d7f4:	e8 ec f3 ff ff       	call   f010cbe5 <sys_cputc>
f010d7f9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7fc:	b8 00 00 00 00       	mov    $0x0,%eax
f010d801:	e9 a1 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d806:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d809:	0f be c0             	movsbl %al,%eax
f010d80c:	83 ec 0c             	sub    $0xc,%esp
f010d80f:	50                   	push   %eax
f010d810:	e8 f3 f5 ff ff       	call   f010ce08 <sys_clearFFL>
f010d815:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d818:	b8 00 00 00 00       	mov    $0x0,%eax
f010d81d:	e9 85 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d822:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d825:	83 ec 08             	sub    $0x8,%esp
f010d828:	ff 75 10             	pushl  0x10(%ebp)
f010d82b:	50                   	push   %eax
f010d82c:	e8 15 f7 ff ff       	call   f010cf46 <sys_createSemaphore>
f010d831:	83 c4 10             	add    $0x10,%esp
f010d834:	e9 6e 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d839:	8b 55 10             	mov    0x10(%ebp),%edx
f010d83c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d83f:	83 ec 08             	sub    $0x8,%esp
f010d842:	52                   	push   %edx
f010d843:	50                   	push   %eax
f010d844:	e8 1f f7 ff ff       	call   f010cf68 <sys_waitSemaphore>
f010d849:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d84c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d851:	e9 51 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d856:	8b 55 10             	mov    0x10(%ebp),%edx
f010d859:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d85c:	83 ec 08             	sub    $0x8,%esp
f010d85f:	52                   	push   %edx
f010d860:	50                   	push   %eax
f010d861:	e8 1c f7 ff ff       	call   f010cf82 <sys_signalSemaphore>
f010d866:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d869:	b8 00 00 00 00       	mov    $0x0,%eax
f010d86e:	e9 34 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d873:	8b 55 10             	mov    0x10(%ebp),%edx
f010d876:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d879:	83 ec 08             	sub    $0x8,%esp
f010d87c:	52                   	push   %edx
f010d87d:	50                   	push   %eax
f010d87e:	e8 19 f7 ff ff       	call   f010cf9c <sys_getSemaphoreValue>
f010d883:	83 c4 10             	add    $0x10,%esp
f010d886:	e9 1c 02 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d88b:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d88e:	8b 45 14             	mov    0x14(%ebp),%eax
f010d891:	0f b6 d0             	movzbl %al,%edx
f010d894:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d897:	51                   	push   %ecx
f010d898:	52                   	push   %edx
f010d899:	ff 75 10             	pushl  0x10(%ebp)
f010d89c:	50                   	push   %eax
f010d89d:	e8 61 f7 ff ff       	call   f010d003 <sys_createSharedObject>
f010d8a2:	83 c4 10             	add    $0x10,%esp
f010d8a5:	e9 fd 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d8aa:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d8ad:	8b 55 10             	mov    0x10(%ebp),%edx
f010d8b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8b3:	83 ec 04             	sub    $0x4,%esp
f010d8b6:	51                   	push   %ecx
f010d8b7:	52                   	push   %edx
f010d8b8:	50                   	push   %eax
f010d8b9:	e8 8e f7 ff ff       	call   f010d04c <sys_getSharedObject>
f010d8be:	83 c4 10             	add    $0x10,%esp
f010d8c1:	e9 e1 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d8c6:	8b 55 10             	mov    0x10(%ebp),%edx
f010d8c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8cc:	83 ec 08             	sub    $0x8,%esp
f010d8cf:	52                   	push   %edx
f010d8d0:	50                   	push   %eax
f010d8d1:	e8 92 f7 ff ff       	call   f010d068 <sys_freeSharedObject>
f010d8d6:	83 c4 10             	add    $0x10,%esp
f010d8d9:	e9 c9 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d8de:	8b 55 10             	mov    0x10(%ebp),%edx
f010d8e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8e4:	83 ec 08             	sub    $0x8,%esp
f010d8e7:	52                   	push   %edx
f010d8e8:	50                   	push   %eax
f010d8e9:	e8 45 f7 ff ff       	call   f010d033 <sys_getSizeOfSharedObject>
f010d8ee:	83 c4 10             	add    $0x10,%esp
f010d8f1:	e9 b1 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d8f6:	e8 86 f7 ff ff       	call   f010d081 <sys_getMaxShares>
f010d8fb:	e9 a7 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d900:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d903:	ff 75 18             	pushl  0x18(%ebp)
f010d906:	ff 75 14             	pushl  0x14(%ebp)
f010d909:	ff 75 10             	pushl  0x10(%ebp)
f010d90c:	50                   	push   %eax
f010d90d:	e8 86 f8 ff ff       	call   f010d198 <sys_create_env>
f010d912:	83 c4 10             	add    $0x10,%esp
f010d915:	e9 8d 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d91a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d91d:	83 ec 0c             	sub    $0xc,%esp
f010d920:	50                   	push   %eax
f010d921:	e8 b2 f8 ff ff       	call   f010d1d8 <sys_run_env>
f010d926:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d929:	b8 00 00 00 00       	mov    $0x0,%eax
f010d92e:	e9 74 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d933:	e8 60 f7 ff ff       	call   f010d098 <sys_getenvindex>
f010d938:	e9 6a 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d93d:	e8 49 f7 ff ff       	call   f010d08b <sys_getenvid>
f010d942:	e9 60 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d947:	e8 99 f7 ff ff       	call   f010d0e5 <sys_getparentenvid>
f010d94c:	e9 56 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d951:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d954:	83 ec 0c             	sub    $0xc,%esp
f010d957:	50                   	push   %eax
f010d958:	e8 95 f7 ff ff       	call   f010d0f2 <sys_destroy_env>
f010d95d:	83 c4 10             	add    $0x10,%esp
f010d960:	e9 42 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d965:	e8 20 f8 ff ff       	call   f010d18a <sys_exit_env>
		return 0;
f010d96a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d96f:	e9 33 01 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d974:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d977:	83 ec 0c             	sub    $0xc,%esp
f010d97a:	50                   	push   %eax
f010d97b:	e8 70 f8 ff ff       	call   f010d1f0 <sys_get_virtual_time>
f010d980:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d983:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d986:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d989:	8b 45 10             	mov    0x10(%ebp),%eax
f010d98c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d98f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d995:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d997:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d99a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d99d:	89 10                	mov    %edx,(%eax)
		return 0;
f010d99f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9a4:	e9 fe 00 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d9a9:	83 ec 04             	sub    $0x4,%esp
f010d9ac:	ff 75 14             	pushl  0x14(%ebp)
f010d9af:	ff 75 10             	pushl  0x10(%ebp)
f010d9b2:	ff 75 0c             	pushl  0xc(%ebp)
f010d9b5:	e8 20 f5 ff ff       	call   f010ceda <sys_move_user_mem>
f010d9ba:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d9bd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9c2:	e9 e0 00 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d9c7:	e8 53 f8 ff ff       	call   f010d21f <sys_rcr2>
f010d9cc:	e9 d6 00 00 00       	jmp    f010daa7 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d9d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9d4:	0f b6 c0             	movzbl %al,%eax
f010d9d7:	83 ec 0c             	sub    $0xc,%esp
f010d9da:	50                   	push   %eax
f010d9db:	e8 51 f8 ff ff       	call   f010d231 <sys_bypassPageFault>
f010d9e0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d9e3:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9e8:	e9 ba 00 00 00       	jmp    f010daa7 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d9ed:	e8 56 f8 ff ff       	call   f010d248 <rsttst>
		return 0;
f010d9f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9f7:	e9 ab 00 00 00       	jmp    f010daa7 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d9fc:	e8 57 f8 ff ff       	call   f010d258 <inctst>
		return 0;
f010da01:	b8 00 00 00 00       	mov    $0x0,%eax
f010da06:	e9 9c 00 00 00       	jmp    f010daa7 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010da0b:	83 ec 0c             	sub    $0xc,%esp
f010da0e:	ff 75 0c             	pushl  0xc(%ebp)
f010da11:	e8 44 f9 ff ff       	call   f010d35a <chktst>
f010da16:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da19:	b8 00 00 00 00       	mov    $0x0,%eax
f010da1e:	e9 84 00 00 00       	jmp    f010daa7 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010da23:	e8 41 f8 ff ff       	call   f010d269 <gettst>
f010da28:	eb 7d                	jmp    f010daa7 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010da2a:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010da2d:	8b 45 18             	mov    0x18(%ebp),%eax
f010da30:	0f be c0             	movsbl %al,%eax
f010da33:	83 ec 0c             	sub    $0xc,%esp
f010da36:	52                   	push   %edx
f010da37:	50                   	push   %eax
f010da38:	ff 75 14             	pushl  0x14(%ebp)
f010da3b:	ff 75 10             	pushl  0x10(%ebp)
f010da3e:	ff 75 0c             	pushl  0xc(%ebp)
f010da41:	e8 2d f8 ff ff       	call   f010d273 <tst>
f010da46:	83 c4 20             	add    $0x20,%esp
		return 0;
f010da49:	b8 00 00 00 00       	mov    $0x0,%eax
f010da4e:	eb 57                	jmp    f010daa7 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010da50:	e8 a5 f4 ff ff       	call   f010cefa <sys_get_heap_strategy>
f010da55:	eb 50                	jmp    f010daa7 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010da57:	83 ec 0c             	sub    $0xc,%esp
f010da5a:	ff 75 0c             	pushl  0xc(%ebp)
f010da5d:	e8 a2 f4 ff ff       	call   f010cf04 <sys_set_uheap_strategy>
f010da62:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da65:	b8 00 00 00 00       	mov    $0x0,%eax
f010da6a:	eb 3b                	jmp    f010daa7 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010da6c:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010da6f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010da72:	8b 55 10             	mov    0x10(%ebp),%edx
f010da75:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da78:	53                   	push   %ebx
f010da79:	51                   	push   %ecx
f010da7a:	52                   	push   %edx
f010da7b:	50                   	push   %eax
f010da7c:	e8 14 f9 ff ff       	call   f010d395 <sys_check_LRU_lists>
f010da81:	83 c4 10             	add    $0x10,%esp
f010da84:	eb 21                	jmp    f010daa7 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010da86:	8b 55 10             	mov    0x10(%ebp),%edx
f010da89:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da8c:	83 ec 08             	sub    $0x8,%esp
f010da8f:	52                   	push   %edx
f010da90:	50                   	push   %eax
f010da91:	e8 81 fa ff ff       	call   f010d517 <sys_check_LRU_lists_free>
f010da96:	83 c4 10             	add    $0x10,%esp
f010da99:	eb 0c                	jmp    f010daa7 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010da9b:	b8 03 00 00 00       	mov    $0x3,%eax
f010daa0:	eb 05                	jmp    f010daa7 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010daa2:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010daa7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010daaa:	5b                   	pop    %ebx
f010daab:	5e                   	pop    %esi
f010daac:	5d                   	pop    %ebp
f010daad:	c3                   	ret    

f010daae <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010daae:	55                   	push   %ebp
f010daaf:	89 e5                	mov    %esp,%ebp
f010dab1:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010dab4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dab7:	8b 00                	mov    (%eax),%eax
f010dab9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dabc:	8b 45 10             	mov    0x10(%ebp),%eax
f010dabf:	8b 00                	mov    (%eax),%eax
f010dac1:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dac4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010dacb:	e9 ca 00 00 00       	jmp    f010db9a <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010dad0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dad3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010dad6:	01 d0                	add    %edx,%eax
f010dad8:	89 c2                	mov    %eax,%edx
f010dada:	c1 ea 1f             	shr    $0x1f,%edx
f010dadd:	01 d0                	add    %edx,%eax
f010dadf:	d1 f8                	sar    %eax
f010dae1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dae4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dae7:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010daea:	eb 03                	jmp    f010daef <stab_binsearch+0x41>
			m--;
f010daec:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010daef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010daf2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010daf5:	7c 1e                	jl     f010db15 <stab_binsearch+0x67>
f010daf7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dafa:	89 d0                	mov    %edx,%eax
f010dafc:	01 c0                	add    %eax,%eax
f010dafe:	01 d0                	add    %edx,%eax
f010db00:	c1 e0 02             	shl    $0x2,%eax
f010db03:	89 c2                	mov    %eax,%edx
f010db05:	8b 45 08             	mov    0x8(%ebp),%eax
f010db08:	01 d0                	add    %edx,%eax
f010db0a:	8a 40 04             	mov    0x4(%eax),%al
f010db0d:	0f b6 c0             	movzbl %al,%eax
f010db10:	3b 45 14             	cmp    0x14(%ebp),%eax
f010db13:	75 d7                	jne    f010daec <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010db15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010db18:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010db1b:	7d 09                	jge    f010db26 <stab_binsearch+0x78>
			l = true_m + 1;
f010db1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db20:	40                   	inc    %eax
f010db21:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010db24:	eb 74                	jmp    f010db9a <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010db26:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010db2d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010db30:	89 d0                	mov    %edx,%eax
f010db32:	01 c0                	add    %eax,%eax
f010db34:	01 d0                	add    %edx,%eax
f010db36:	c1 e0 02             	shl    $0x2,%eax
f010db39:	89 c2                	mov    %eax,%edx
f010db3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010db3e:	01 d0                	add    %edx,%eax
f010db40:	8b 40 08             	mov    0x8(%eax),%eax
f010db43:	3b 45 18             	cmp    0x18(%ebp),%eax
f010db46:	73 11                	jae    f010db59 <stab_binsearch+0xab>
			*region_left = m;
f010db48:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010db4e:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010db50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db53:	40                   	inc    %eax
f010db54:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010db57:	eb 41                	jmp    f010db9a <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010db59:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010db5c:	89 d0                	mov    %edx,%eax
f010db5e:	01 c0                	add    %eax,%eax
f010db60:	01 d0                	add    %edx,%eax
f010db62:	c1 e0 02             	shl    $0x2,%eax
f010db65:	89 c2                	mov    %eax,%edx
f010db67:	8b 45 08             	mov    0x8(%ebp),%eax
f010db6a:	01 d0                	add    %edx,%eax
f010db6c:	8b 40 08             	mov    0x8(%eax),%eax
f010db6f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010db72:	76 14                	jbe    f010db88 <stab_binsearch+0xda>
			*region_right = m - 1;
f010db74:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010db77:	8d 50 ff             	lea    -0x1(%eax),%edx
f010db7a:	8b 45 10             	mov    0x10(%ebp),%eax
f010db7d:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010db7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010db82:	48                   	dec    %eax
f010db83:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010db86:	eb 12                	jmp    f010db9a <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010db88:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db8b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010db8e:	89 10                	mov    %edx,(%eax)
			l = m;
f010db90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010db93:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010db96:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010db9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010db9d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010dba0:	0f 8e 2a ff ff ff    	jle    f010dad0 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010dba6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dbaa:	75 0f                	jne    f010dbbb <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010dbac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbaf:	8b 00                	mov    (%eax),%eax
f010dbb1:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dbb4:	8b 45 10             	mov    0x10(%ebp),%eax
f010dbb7:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010dbb9:	eb 3d                	jmp    f010dbf8 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dbbb:	8b 45 10             	mov    0x10(%ebp),%eax
f010dbbe:	8b 00                	mov    (%eax),%eax
f010dbc0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dbc3:	eb 03                	jmp    f010dbc8 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010dbc5:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010dbc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbcb:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dbcd:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dbd0:	7d 1e                	jge    f010dbf0 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010dbd2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dbd5:	89 d0                	mov    %edx,%eax
f010dbd7:	01 c0                	add    %eax,%eax
f010dbd9:	01 d0                	add    %edx,%eax
f010dbdb:	c1 e0 02             	shl    $0x2,%eax
f010dbde:	89 c2                	mov    %eax,%edx
f010dbe0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbe3:	01 d0                	add    %edx,%eax
f010dbe5:	8a 40 04             	mov    0x4(%eax),%al
f010dbe8:	0f b6 c0             	movzbl %al,%eax
f010dbeb:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dbee:	75 d5                	jne    f010dbc5 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010dbf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbf3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dbf6:	89 10                	mov    %edx,(%eax)
	}
}
f010dbf8:	90                   	nop
f010dbf9:	c9                   	leave  
f010dbfa:	c3                   	ret    

f010dbfb <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010dbfb:	55                   	push   %ebp
f010dbfc:	89 e5                	mov    %esp,%ebp
f010dbfe:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010dc01:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc04:	c7 00 40 7d 13 f0    	movl   $0xf0137d40,(%eax)
	info->eip_line = 0;
f010dc0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc0d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010dc14:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc17:	c7 40 08 40 7d 13 f0 	movl   $0xf0137d40,0x8(%eax)
	info->eip_fn_namelen = 9;
f010dc1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc21:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010dc28:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc2b:	8b 55 08             	mov    0x8(%ebp),%edx
f010dc2e:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010dc31:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc34:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010dc3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc3e:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010dc43:	76 1e                	jbe    f010dc63 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010dc45:	c7 45 f4 f0 d8 13 f0 	movl   $0xf013d8f0,-0xc(%ebp)
		stab_end = __STAB_END__;
f010dc4c:	c7 45 f0 c8 d5 17 f0 	movl   $0xf017d5c8,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010dc53:	c7 45 ec c9 d5 17 f0 	movl   $0xf017d5c9,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010dc5a:	c7 45 e8 7a a2 18 f0 	movl   $0xf018a27a,-0x18(%ebp)
f010dc61:	eb 2a                	jmp    f010dc8d <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010dc63:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010dc6a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dc6d:	8b 00                	mov    (%eax),%eax
f010dc6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010dc72:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dc75:	8b 40 04             	mov    0x4(%eax),%eax
f010dc78:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010dc7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dc7e:	8b 40 08             	mov    0x8(%eax),%eax
f010dc81:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010dc84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010dc87:	8b 40 0c             	mov    0xc(%eax),%eax
f010dc8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010dc8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dc90:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dc93:	76 0a                	jbe    f010dc9f <debuginfo_eip+0xa4>
f010dc95:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dc98:	48                   	dec    %eax
f010dc99:	8a 00                	mov    (%eax),%al
f010dc9b:	84 c0                	test   %al,%al
f010dc9d:	74 0a                	je     f010dca9 <debuginfo_eip+0xae>
		return -1;
f010dc9f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dca4:	e9 01 02 00 00       	jmp    f010deaa <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010dca9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010dcb0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dcb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dcb6:	29 c2                	sub    %eax,%edx
f010dcb8:	89 d0                	mov    %edx,%eax
f010dcba:	c1 f8 02             	sar    $0x2,%eax
f010dcbd:	89 c2                	mov    %eax,%edx
f010dcbf:	89 d0                	mov    %edx,%eax
f010dcc1:	c1 e0 02             	shl    $0x2,%eax
f010dcc4:	01 d0                	add    %edx,%eax
f010dcc6:	c1 e0 02             	shl    $0x2,%eax
f010dcc9:	01 d0                	add    %edx,%eax
f010dccb:	c1 e0 02             	shl    $0x2,%eax
f010dcce:	01 d0                	add    %edx,%eax
f010dcd0:	89 c1                	mov    %eax,%ecx
f010dcd2:	c1 e1 08             	shl    $0x8,%ecx
f010dcd5:	01 c8                	add    %ecx,%eax
f010dcd7:	89 c1                	mov    %eax,%ecx
f010dcd9:	c1 e1 10             	shl    $0x10,%ecx
f010dcdc:	01 c8                	add    %ecx,%eax
f010dcde:	01 c0                	add    %eax,%eax
f010dce0:	01 d0                	add    %edx,%eax
f010dce2:	48                   	dec    %eax
f010dce3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010dce6:	ff 75 08             	pushl  0x8(%ebp)
f010dce9:	6a 64                	push   $0x64
f010dceb:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dcee:	50                   	push   %eax
f010dcef:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dcf2:	50                   	push   %eax
f010dcf3:	ff 75 f4             	pushl  -0xc(%ebp)
f010dcf6:	e8 b3 fd ff ff       	call   f010daae <stab_binsearch>
f010dcfb:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010dcfe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dd01:	85 c0                	test   %eax,%eax
f010dd03:	75 0a                	jne    f010dd0f <debuginfo_eip+0x114>
		return -1;
f010dd05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dd0a:	e9 9b 01 00 00       	jmp    f010deaa <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010dd0f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dd12:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010dd15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dd18:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010dd1b:	ff 75 08             	pushl  0x8(%ebp)
f010dd1e:	6a 24                	push   $0x24
f010dd20:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010dd23:	50                   	push   %eax
f010dd24:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010dd27:	50                   	push   %eax
f010dd28:	ff 75 f4             	pushl  -0xc(%ebp)
f010dd2b:	e8 7e fd ff ff       	call   f010daae <stab_binsearch>
f010dd30:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010dd33:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010dd36:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010dd39:	39 c2                	cmp    %eax,%edx
f010dd3b:	0f 8f 86 00 00 00    	jg     f010ddc7 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010dd41:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dd44:	89 c2                	mov    %eax,%edx
f010dd46:	89 d0                	mov    %edx,%eax
f010dd48:	01 c0                	add    %eax,%eax
f010dd4a:	01 d0                	add    %edx,%eax
f010dd4c:	c1 e0 02             	shl    $0x2,%eax
f010dd4f:	89 c2                	mov    %eax,%edx
f010dd51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd54:	01 d0                	add    %edx,%eax
f010dd56:	8b 00                	mov    (%eax),%eax
f010dd58:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010dd5b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dd5e:	29 d1                	sub    %edx,%ecx
f010dd60:	89 ca                	mov    %ecx,%edx
f010dd62:	39 d0                	cmp    %edx,%eax
f010dd64:	73 22                	jae    f010dd88 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010dd66:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dd69:	89 c2                	mov    %eax,%edx
f010dd6b:	89 d0                	mov    %edx,%eax
f010dd6d:	01 c0                	add    %eax,%eax
f010dd6f:	01 d0                	add    %edx,%eax
f010dd71:	c1 e0 02             	shl    $0x2,%eax
f010dd74:	89 c2                	mov    %eax,%edx
f010dd76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd79:	01 d0                	add    %edx,%eax
f010dd7b:	8b 10                	mov    (%eax),%edx
f010dd7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dd80:	01 c2                	add    %eax,%edx
f010dd82:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd85:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010dd88:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dd8b:	89 c2                	mov    %eax,%edx
f010dd8d:	89 d0                	mov    %edx,%eax
f010dd8f:	01 c0                	add    %eax,%eax
f010dd91:	01 d0                	add    %edx,%eax
f010dd93:	c1 e0 02             	shl    $0x2,%eax
f010dd96:	89 c2                	mov    %eax,%edx
f010dd98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd9b:	01 d0                	add    %edx,%eax
f010dd9d:	8b 50 08             	mov    0x8(%eax),%edx
f010dda0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dda3:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010dda6:	8b 55 08             	mov    0x8(%ebp),%edx
f010dda9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddac:	8b 40 10             	mov    0x10(%eax),%eax
f010ddaf:	29 c2                	sub    %eax,%edx
f010ddb1:	89 d0                	mov    %edx,%eax
f010ddb3:	c1 f8 02             	sar    $0x2,%eax
f010ddb6:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010ddb9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ddbc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010ddbf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ddc2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010ddc5:	eb 15                	jmp    f010dddc <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010ddc7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddca:	8b 55 08             	mov    0x8(%ebp),%edx
f010ddcd:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010ddd0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ddd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010ddd6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ddd9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010dddc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dddf:	8b 40 08             	mov    0x8(%eax),%eax
f010dde2:	83 ec 08             	sub    $0x8,%esp
f010dde5:	6a 3a                	push   $0x3a
f010dde7:	50                   	push   %eax
f010dde8:	e8 62 38 02 00       	call   f013164f <strfind>
f010dded:	83 c4 10             	add    $0x10,%esp
f010ddf0:	89 c2                	mov    %eax,%edx
f010ddf2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddf5:	8b 40 08             	mov    0x8(%eax),%eax
f010ddf8:	29 c2                	sub    %eax,%edx
f010ddfa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddfd:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010de00:	eb 03                	jmp    f010de05 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010de02:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010de05:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010de08:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010de0b:	7c 4e                	jl     f010de5b <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010de0d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de10:	89 d0                	mov    %edx,%eax
f010de12:	01 c0                	add    %eax,%eax
f010de14:	01 d0                	add    %edx,%eax
f010de16:	c1 e0 02             	shl    $0x2,%eax
f010de19:	89 c2                	mov    %eax,%edx
f010de1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de1e:	01 d0                	add    %edx,%eax
f010de20:	8a 40 04             	mov    0x4(%eax),%al
f010de23:	3c 84                	cmp    $0x84,%al
f010de25:	74 34                	je     f010de5b <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010de27:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de2a:	89 d0                	mov    %edx,%eax
f010de2c:	01 c0                	add    %eax,%eax
f010de2e:	01 d0                	add    %edx,%eax
f010de30:	c1 e0 02             	shl    $0x2,%eax
f010de33:	89 c2                	mov    %eax,%edx
f010de35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de38:	01 d0                	add    %edx,%eax
f010de3a:	8a 40 04             	mov    0x4(%eax),%al
f010de3d:	3c 64                	cmp    $0x64,%al
f010de3f:	75 c1                	jne    f010de02 <debuginfo_eip+0x207>
f010de41:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de44:	89 d0                	mov    %edx,%eax
f010de46:	01 c0                	add    %eax,%eax
f010de48:	01 d0                	add    %edx,%eax
f010de4a:	c1 e0 02             	shl    $0x2,%eax
f010de4d:	89 c2                	mov    %eax,%edx
f010de4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de52:	01 d0                	add    %edx,%eax
f010de54:	8b 40 08             	mov    0x8(%eax),%eax
f010de57:	85 c0                	test   %eax,%eax
f010de59:	74 a7                	je     f010de02 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010de5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010de5e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010de61:	7c 42                	jl     f010dea5 <debuginfo_eip+0x2aa>
f010de63:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de66:	89 d0                	mov    %edx,%eax
f010de68:	01 c0                	add    %eax,%eax
f010de6a:	01 d0                	add    %edx,%eax
f010de6c:	c1 e0 02             	shl    $0x2,%eax
f010de6f:	89 c2                	mov    %eax,%edx
f010de71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de74:	01 d0                	add    %edx,%eax
f010de76:	8b 00                	mov    (%eax),%eax
f010de78:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010de7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010de7e:	29 d1                	sub    %edx,%ecx
f010de80:	89 ca                	mov    %ecx,%edx
f010de82:	39 d0                	cmp    %edx,%eax
f010de84:	73 1f                	jae    f010dea5 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010de86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de89:	89 d0                	mov    %edx,%eax
f010de8b:	01 c0                	add    %eax,%eax
f010de8d:	01 d0                	add    %edx,%eax
f010de8f:	c1 e0 02             	shl    $0x2,%eax
f010de92:	89 c2                	mov    %eax,%edx
f010de94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de97:	01 d0                	add    %edx,%eax
f010de99:	8b 10                	mov    (%eax),%edx
f010de9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de9e:	01 c2                	add    %eax,%edx
f010dea0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dea3:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010dea5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010deaa:	c9                   	leave  
f010deab:	c3                   	ret    

f010deac <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010deac:	55                   	push   %ebp
f010dead:	89 e5                	mov    %esp,%ebp
f010deaf:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010deb2:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010deb6:	74 1c                	je     f010ded4 <setPageReplacmentAlgorithmLRU+0x28>
f010deb8:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010debc:	74 16                	je     f010ded4 <setPageReplacmentAlgorithmLRU+0x28>
f010debe:	68 4c 7d 13 f0       	push   $0xf0137d4c
f010dec3:	68 96 7d 13 f0       	push   $0xf0137d96
f010dec8:	6a 18                	push   $0x18
f010deca:	68 ab 7d 13 f0       	push   $0xf0137dab
f010decf:	e8 31 23 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010ded4:	8b 45 08             	mov    0x8(%ebp),%eax
f010ded7:	a3 88 1d 88 f0       	mov    %eax,0xf0881d88
}
f010dedc:	90                   	nop
f010dedd:	c9                   	leave  
f010dede:	c3                   	ret    

f010dedf <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010dedf:	55                   	push   %ebp
f010dee0:	89 e5                	mov    %esp,%ebp
f010dee2:	c7 05 88 1d 88 f0 03 	movl   $0x3,0xf0881d88
f010dee9:	00 00 00 
f010deec:	90                   	nop
f010deed:	5d                   	pop    %ebp
f010deee:	c3                   	ret    

f010deef <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010deef:	55                   	push   %ebp
f010def0:	89 e5                	mov    %esp,%ebp
f010def2:	c7 05 88 1d 88 f0 04 	movl   $0x4,0xf0881d88
f010def9:	00 00 00 
f010defc:	90                   	nop
f010defd:	5d                   	pop    %ebp
f010defe:	c3                   	ret    

f010deff <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010deff:	55                   	push   %ebp
f010df00:	89 e5                	mov    %esp,%ebp
f010df02:	c7 05 88 1d 88 f0 05 	movl   $0x5,0xf0881d88
f010df09:	00 00 00 
f010df0c:	90                   	nop
f010df0d:	5d                   	pop    %ebp
f010df0e:	c3                   	ret    

f010df0f <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010df0f:	55                   	push   %ebp
f010df10:	89 e5                	mov    %esp,%ebp
f010df12:	c7 05 88 1d 88 f0 07 	movl   $0x7,0xf0881d88
f010df19:	00 00 00 
f010df1c:	90                   	nop
f010df1d:	5d                   	pop    %ebp
f010df1e:	c3                   	ret    

f010df1f <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010df1f:	55                   	push   %ebp
f010df20:	89 e5                	mov    %esp,%ebp
f010df22:	c7 05 88 1d 88 f0 06 	movl   $0x6,0xf0881d88
f010df29:	00 00 00 
f010df2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010df2f:	a3 e4 1c 88 f0       	mov    %eax,0xf0881ce4
f010df34:	90                   	nop
f010df35:	5d                   	pop    %ebp
f010df36:	c3                   	ret    

f010df37 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010df37:	55                   	push   %ebp
f010df38:	89 e5                	mov    %esp,%ebp
f010df3a:	8b 15 88 1d 88 f0    	mov    0xf0881d88,%edx
f010df40:	8b 45 08             	mov    0x8(%ebp),%eax
f010df43:	39 c2                	cmp    %eax,%edx
f010df45:	0f 94 c0             	sete   %al
f010df48:	0f b6 c0             	movzbl %al,%eax
f010df4b:	5d                   	pop    %ebp
f010df4c:	c3                   	ret    

f010df4d <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010df4d:	55                   	push   %ebp
f010df4e:	89 e5                	mov    %esp,%ebp
f010df50:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010df55:	83 f8 03             	cmp    $0x3,%eax
f010df58:	75 07                	jne    f010df61 <isPageReplacmentAlgorithmCLOCK+0x14>
f010df5a:	b8 01 00 00 00       	mov    $0x1,%eax
f010df5f:	eb 05                	jmp    f010df66 <isPageReplacmentAlgorithmCLOCK+0x19>
f010df61:	b8 00 00 00 00       	mov    $0x0,%eax
f010df66:	5d                   	pop    %ebp
f010df67:	c3                   	ret    

f010df68 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010df68:	55                   	push   %ebp
f010df69:	89 e5                	mov    %esp,%ebp
f010df6b:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010df70:	83 f8 04             	cmp    $0x4,%eax
f010df73:	75 07                	jne    f010df7c <isPageReplacmentAlgorithmFIFO+0x14>
f010df75:	b8 01 00 00 00       	mov    $0x1,%eax
f010df7a:	eb 05                	jmp    f010df81 <isPageReplacmentAlgorithmFIFO+0x19>
f010df7c:	b8 00 00 00 00       	mov    $0x0,%eax
f010df81:	5d                   	pop    %ebp
f010df82:	c3                   	ret    

f010df83 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010df83:	55                   	push   %ebp
f010df84:	89 e5                	mov    %esp,%ebp
f010df86:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010df8b:	83 f8 05             	cmp    $0x5,%eax
f010df8e:	75 07                	jne    f010df97 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010df90:	b8 01 00 00 00       	mov    $0x1,%eax
f010df95:	eb 05                	jmp    f010df9c <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010df97:	b8 00 00 00 00       	mov    $0x0,%eax
f010df9c:	5d                   	pop    %ebp
f010df9d:	c3                   	ret    

f010df9e <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010df9e:	55                   	push   %ebp
f010df9f:	89 e5                	mov    %esp,%ebp
f010dfa1:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010dfa6:	83 f8 07             	cmp    $0x7,%eax
f010dfa9:	75 07                	jne    f010dfb2 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010dfab:	b8 01 00 00 00       	mov    $0x1,%eax
f010dfb0:	eb 05                	jmp    f010dfb7 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010dfb2:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfb7:	5d                   	pop    %ebp
f010dfb8:	c3                   	ret    

f010dfb9 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010dfb9:	55                   	push   %ebp
f010dfba:	89 e5                	mov    %esp,%ebp
f010dfbc:	a1 88 1d 88 f0       	mov    0xf0881d88,%eax
f010dfc1:	83 f8 06             	cmp    $0x6,%eax
f010dfc4:	75 07                	jne    f010dfcd <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010dfc6:	b8 01 00 00 00       	mov    $0x1,%eax
f010dfcb:	eb 05                	jmp    f010dfd2 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010dfcd:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfd2:	5d                   	pop    %ebp
f010dfd3:	c3                   	ret    

f010dfd4 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010dfd4:	55                   	push   %ebp
f010dfd5:	89 e5                	mov    %esp,%ebp
f010dfd7:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfda:	a3 50 1d 88 f0       	mov    %eax,0xf0881d50
f010dfdf:	90                   	nop
f010dfe0:	5d                   	pop    %ebp
f010dfe1:	c3                   	ret    

f010dfe2 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010dfe2:	55                   	push   %ebp
f010dfe3:	89 e5                	mov    %esp,%ebp
f010dfe5:	a1 50 1d 88 f0       	mov    0xf0881d50,%eax
f010dfea:	5d                   	pop    %ebp
f010dfeb:	c3                   	ret    

f010dfec <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010dfec:	55                   	push   %ebp
f010dfed:	89 e5                	mov    %esp,%ebp
f010dfef:	8b 45 08             	mov    0x8(%ebp),%eax
f010dff2:	a3 90 1d 88 f0       	mov    %eax,0xf0881d90
f010dff7:	90                   	nop
f010dff8:	5d                   	pop    %ebp
f010dff9:	c3                   	ret    

f010dffa <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010dffa:	55                   	push   %ebp
f010dffb:	89 e5                	mov    %esp,%ebp
f010dffd:	a1 90 1d 88 f0       	mov    0xf0881d90,%eax
f010e002:	5d                   	pop    %ebp
f010e003:	c3                   	ret    

f010e004 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e004:	55                   	push   %ebp
f010e005:	89 e5                	mov    %esp,%ebp
f010e007:	8b 45 08             	mov    0x8(%ebp),%eax
f010e00a:	a3 b0 1d 88 f0       	mov    %eax,0xf0881db0
f010e00f:	90                   	nop
f010e010:	5d                   	pop    %ebp
f010e011:	c3                   	ret    

f010e012 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e012:	55                   	push   %ebp
f010e013:	89 e5                	mov    %esp,%ebp
f010e015:	a1 b0 1d 88 f0       	mov    0xf0881db0,%eax
f010e01a:	5d                   	pop    %ebp
f010e01b:	c3                   	ret    

f010e01c <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e01c:	55                   	push   %ebp
f010e01d:	89 e5                	mov    %esp,%ebp
f010e01f:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e022:	8b 45 08             	mov    0x8(%ebp),%eax
f010e025:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e028:	83 ec 08             	sub    $0x8,%esp
f010e02b:	ff 75 0c             	pushl  0xc(%ebp)
f010e02e:	50                   	push   %eax
f010e02f:	e8 d3 8b ff ff       	call   f0106c07 <create_page_table>
f010e034:	83 c4 10             	add    $0x10,%esp
f010e037:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e03a:	90                   	nop
f010e03b:	c9                   	leave  
f010e03c:	c3                   	ret    

f010e03d <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e03d:	55                   	push   %ebp
f010e03e:	89 e5                	mov    %esp,%ebp
f010e040:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");
	uint32 current_env_size = env_page_ws_get_size(curenv);
f010e043:	83 ec 0c             	sub    $0xc,%esp
f010e046:	ff 75 08             	pushl  0x8(%ebp)
f010e049:	e8 bd 9f ff ff       	call   f010800b <env_page_ws_get_size>
f010e04e:	83 c4 10             	add    $0x10,%esp
f010e051:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(current_env_size == curenv->page_WS_max_size) //Replacement
f010e054:	8b 45 08             	mov    0x8(%ebp),%eax
f010e057:	8b 40 74             	mov    0x74(%eax),%eax
f010e05a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e05d:	0f 85 56 01 00 00    	jne    f010e1b9 <page_fault_handler+0x17c>
	{
		uint32 virtual_address = 0;
f010e063:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		while(1 == 1)  // Find victim virtual
		{
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
f010e06a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e06d:	8b 48 78             	mov    0x78(%eax),%ecx
f010e070:	8b 45 08             	mov    0x8(%ebp),%eax
f010e073:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e079:	89 d0                	mov    %edx,%eax
f010e07b:	01 c0                	add    %eax,%eax
f010e07d:	01 d0                	add    %edx,%eax
f010e07f:	c1 e0 03             	shl    $0x3,%eax
f010e082:	01 c8                	add    %ecx,%eax
f010e084:	8b 10                	mov    (%eax),%edx
f010e086:	8b 45 08             	mov    0x8(%ebp),%eax
f010e089:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e08c:	83 ec 08             	sub    $0x8,%esp
f010e08f:	52                   	push   %edx
f010e090:	50                   	push   %eax
f010e091:	e8 c0 9d ff ff       	call   f0107e56 <pt_get_page_permissions>
f010e096:	83 c4 10             	add    $0x10,%esp
f010e099:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if((per&PERM_USED)== PERM_USED)
f010e09c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e09f:	83 e0 20             	and    $0x20,%eax
f010e0a2:	85 c0                	test   %eax,%eax
f010e0a4:	74 46                	je     f010e0ec <page_fault_handler+0xaf>
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
f010e0a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0a9:	8b 48 78             	mov    0x78(%eax),%ecx
f010e0ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0af:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e0b5:	89 d0                	mov    %edx,%eax
f010e0b7:	01 c0                	add    %eax,%eax
f010e0b9:	01 d0                	add    %edx,%eax
f010e0bb:	c1 e0 03             	shl    $0x3,%eax
f010e0be:	01 c8                	add    %ecx,%eax
f010e0c0:	8b 10                	mov    (%eax),%edx
f010e0c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0c5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e0c8:	6a 20                	push   $0x20
f010e0ca:	6a 00                	push   $0x0
f010e0cc:	52                   	push   %edx
f010e0cd:	50                   	push   %eax
f010e0ce:	e8 cf 9c ff ff       	call   f0107da2 <pt_set_page_permissions>
f010e0d3:	83 c4 10             	add    $0x10,%esp
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
f010e0d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0d9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0e2:	8b 40 74             	mov    0x74(%eax),%eax
f010e0e5:	48                   	dec    %eax
f010e0e6:	39 c2                	cmp    %eax,%edx
f010e0e8:	75 7b                	jne    f010e165 <page_fault_handler+0x128>
f010e0ea:	eb 67                	jmp    f010e153 <page_fault_handler+0x116>
			uint32 per = pt_get_page_permissions(curenv->env_page_directory, curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address);
			if((per&PERM_USED)== PERM_USED)
				pt_set_page_permissions(curenv->env_page_directory,curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address,0,PERM_USED);
			else
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
f010e0ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0ef:	8b 48 78             	mov    0x78(%eax),%ecx
f010e0f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0f5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e0fb:	89 d0                	mov    %edx,%eax
f010e0fd:	01 c0                	add    %eax,%eax
f010e0ff:	01 d0                	add    %edx,%eax
f010e101:	c1 e0 03             	shl    $0x3,%eax
f010e104:	01 c8                	add    %ecx,%eax
f010e106:	8b 00                	mov    (%eax),%eax
f010e108:	89 45 f0             	mov    %eax,-0x10(%ebp)
				break;
f010e10b:	90                   	nop
				curenv->page_last_WS_index = 0;
			else
				curenv->page_last_WS_index++;
		}

		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
f010e10c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e10f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e112:	83 ec 08             	sub    $0x8,%esp
f010e115:	ff 75 f0             	pushl  -0x10(%ebp)
f010e118:	50                   	push   %eax
f010e119:	e8 38 9d ff ff       	call   f0107e56 <pt_get_page_permissions>
f010e11e:	83 c4 10             	add    $0x10,%esp
f010e121:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 *ptr_page_table = NULL ;
f010e124:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);
f010e12b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e12e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e131:	83 ec 04             	sub    $0x4,%esp
f010e134:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010e137:	52                   	push   %edx
f010e138:	ff 75 f0             	pushl  -0x10(%ebp)
f010e13b:	50                   	push   %eax
f010e13c:	e8 c5 8c ff ff       	call   f0106e06 <get_frame_info>
f010e141:	83 c4 10             	add    $0x10,%esp
f010e144:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
f010e147:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e14a:	83 e0 40             	and    $0x40,%eax
f010e14d:	85 c0                	test   %eax,%eax
f010e14f:	74 42                	je     f010e193 <page_fault_handler+0x156>
f010e151:	eb 2c                	jmp    f010e17f <page_fault_handler+0x142>
			{
				virtual_address = curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address;
				break;
			}
			if( curenv->page_last_WS_index == (curenv->page_WS_max_size - 1))
				curenv->page_last_WS_index = 0;
f010e153:	8b 45 08             	mov    0x8(%ebp),%eax
f010e156:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e15d:	00 00 00 
f010e160:	e9 05 ff ff ff       	jmp    f010e06a <page_fault_handler+0x2d>
			else
				curenv->page_last_WS_index++;
f010e165:	8b 45 08             	mov    0x8(%ebp),%eax
f010e168:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e16e:	8d 50 01             	lea    0x1(%eax),%edx
f010e171:	8b 45 08             	mov    0x8(%ebp),%eax
f010e174:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		}
f010e17a:	e9 eb fe ff ff       	jmp    f010e06a <page_fault_handler+0x2d>
		uint32 perm = pt_get_page_permissions(curenv->env_page_directory, virtual_address);
		uint32 *ptr_page_table = NULL ;
		struct FrameInfo * frame_info = get_frame_info(curenv->env_page_directory, virtual_address,&ptr_page_table);

		if((perm&PERM_MODIFIED)== PERM_MODIFIED)
			pf_update_env_page(curenv,virtual_address,frame_info);
f010e17f:	83 ec 04             	sub    $0x4,%esp
f010e182:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e185:	ff 75 f0             	pushl  -0x10(%ebp)
f010e188:	ff 75 08             	pushl  0x8(%ebp)
f010e18b:	e8 48 56 ff ff       	call   f01037d8 <pf_update_env_page>
f010e190:	83 c4 10             	add    $0x10,%esp

		env_page_ws_invalidate(curenv,virtual_address);
f010e193:	83 ec 08             	sub    $0x8,%esp
f010e196:	ff 75 f0             	pushl  -0x10(%ebp)
f010e199:	ff 75 08             	pushl  0x8(%ebp)
f010e19c:	e8 b3 9e ff ff       	call   f0108054 <env_page_ws_invalidate>
f010e1a1:	83 c4 10             	add    $0x10,%esp
		unmap_frame(curenv->env_page_directory,virtual_address);
f010e1a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e1aa:	83 ec 08             	sub    $0x8,%esp
f010e1ad:	ff 75 f0             	pushl  -0x10(%ebp)
f010e1b0:	50                   	push   %eax
f010e1b1:	e8 c0 8c ff ff       	call   f0106e76 <unmap_frame>
f010e1b6:	83 c4 10             	add    $0x10,%esp
	}
		// Placement
		struct FrameInfo *ptr_frame;
		allocate_frame(&ptr_frame);
f010e1b9:	83 ec 0c             	sub    $0xc,%esp
f010e1bc:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e1bf:	50                   	push   %eax
f010e1c0:	e8 2d 87 ff ff       	call   f01068f2 <allocate_frame>
f010e1c5:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory,ptr_frame,fault_va, PERM_WRITEABLE|PERM_USER);
f010e1c8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010e1cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1ce:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e1d1:	6a 06                	push   $0x6
f010e1d3:	ff 75 0c             	pushl  0xc(%ebp)
f010e1d6:	52                   	push   %edx
f010e1d7:	50                   	push   %eax
f010e1d8:	e8 64 8b ff ff       	call   f0106d41 <map_frame>
f010e1dd:	83 c4 10             	add    $0x10,%esp
		int ret = pf_read_env_page(curenv, (void *)fault_va);
f010e1e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1e3:	83 ec 08             	sub    $0x8,%esp
f010e1e6:	50                   	push   %eax
f010e1e7:	ff 75 08             	pushl  0x8(%ebp)
f010e1ea:	e8 4b 58 ff ff       	call   f0103a3a <pf_read_env_page>
f010e1ef:	83 c4 10             	add    $0x10,%esp
f010e1f2:	89 45 e0             	mov    %eax,-0x20(%ebp)

		if(ret == E_PAGE_NOT_EXIST_IN_PF) // Check if page in Page File
f010e1f5:	83 7d e0 f7          	cmpl   $0xfffffff7,-0x20(%ebp)
f010e1f9:	75 54                	jne    f010e24f <page_fault_handler+0x212>
		{
			if(
f010e1fb:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e202:	77 27                	ja     f010e22b <page_fault_handler+0x1ee>
				!((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || // Check if page in Stack
f010e204:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010e20b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e20e:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e213:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010e216:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e219:	ba 00 00 00 00       	mov    $0x0,%edx
f010e21e:	f7 75 dc             	divl   -0x24(%ebp)
f010e221:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e224:	29 d0                	sub    %edx,%eax
f010e226:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e229:	76 24                	jbe    f010e24f <page_fault_handler+0x212>
f010e22b:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e232:	77 07                	ja     f010e23b <page_fault_handler+0x1fe>
					(fault_va < USER_HEAP_MAX && fault_va >= USER_HEAP_START)) // Check if page in User Heap
f010e234:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e237:	85 c0                	test   %eax,%eax
f010e239:	78 14                	js     f010e24f <page_fault_handler+0x212>
			)
				panic("ILLEGAL MEMORY ACCESS");
f010e23b:	83 ec 04             	sub    $0x4,%esp
f010e23e:	68 c5 7d 13 f0       	push   $0xf0137dc5
f010e243:	6a 7c                	push   $0x7c
f010e245:	68 ab 7d 13 f0       	push   $0xf0137dab
f010e24a:	e8 b6 1f ff ff       	call   f0100205 <_panic>
		}
		env_page_ws_set_entry(curenv,curenv->page_last_WS_index,fault_va);
f010e24f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e252:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e258:	83 ec 04             	sub    $0x4,%esp
f010e25b:	ff 75 0c             	pushl  0xc(%ebp)
f010e25e:	50                   	push   %eax
f010e25f:	ff 75 08             	pushl  0x8(%ebp)
f010e262:	e8 58 9e ff ff       	call   f01080bf <env_page_ws_set_entry>
f010e267:	83 c4 10             	add    $0x10,%esp
		curenv->page_last_WS_index++;
f010e26a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e26d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e273:	8d 50 01             	lea    0x1(%eax),%edx
f010e276:	8b 45 08             	mov    0x8(%ebp),%eax
f010e279:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		if(curenv->page_last_WS_index == curenv->page_WS_max_size)
f010e27f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e282:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e288:	8b 45 08             	mov    0x8(%ebp),%eax
f010e28b:	8b 40 74             	mov    0x74(%eax),%eax
f010e28e:	39 c2                	cmp    %eax,%edx
f010e290:	75 0d                	jne    f010e29f <page_fault_handler+0x262>
			curenv->page_last_WS_index = 0;
f010e292:	8b 45 08             	mov    0x8(%ebp),%eax
f010e295:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e29c:	00 00 00 

	//refer to the project presentation and documentation for details
}
f010e29f:	90                   	nop
f010e2a0:	c9                   	leave  
f010e2a1:	c3                   	ret    

f010e2a2 <__page_fault_handler_with_buffering>:
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e2a2:	55                   	push   %ebp
f010e2a3:	89 e5                	mov    %esp,%ebp
f010e2a5:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e2a8:	83 ec 04             	sub    $0x4,%esp
f010e2ab:	68 dc 7d 13 f0       	push   $0xf0137ddc
f010e2b0:	68 88 00 00 00       	push   $0x88
f010e2b5:	68 ab 7d 13 f0       	push   $0xf0137dab
f010e2ba:	e8 46 1f ff ff       	call   f0100205 <_panic>

f010e2bf <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e2bf:	55                   	push   %ebp
f010e2c0:	89 e5                	mov    %esp,%ebp
f010e2c2:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e2c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2c8:	a3 b4 1c 88 f0       	mov    %eax,0xf0881cb4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e2cd:	8b 55 08             	mov    0x8(%ebp),%edx
f010e2d0:	89 d0                	mov    %edx,%eax
f010e2d2:	c1 e0 02             	shl    $0x2,%eax
f010e2d5:	01 d0                	add    %edx,%eax
f010e2d7:	01 c0                	add    %eax,%eax
f010e2d9:	01 d0                	add    %edx,%eax
f010e2db:	01 c0                	add    %eax,%eax
f010e2dd:	01 d0                	add    %edx,%eax
f010e2df:	c1 e0 02             	shl    $0x2,%eax
f010e2e2:	83 ec 0c             	sub    $0xc,%esp
f010e2e5:	50                   	push   %eax
f010e2e6:	e8 8f 97 ff ff       	call   f0107a7a <kmalloc>
f010e2eb:	83 c4 10             	add    $0x10,%esp
f010e2ee:	a3 0c 1d 88 f0       	mov    %eax,0xf0881d0c
	if (semaphores == NULL)
f010e2f3:	a1 0c 1d 88 f0       	mov    0xf0881d0c,%eax
f010e2f8:	85 c0                	test   %eax,%eax
f010e2fa:	75 14                	jne    f010e310 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e2fc:	83 ec 04             	sub    $0x4,%esp
f010e2ff:	68 20 7e 13 f0       	push   $0xf0137e20
f010e304:	6a 1e                	push   $0x1e
f010e306:	68 60 7e 13 f0       	push   $0xf0137e60
f010e30b:	e8 f5 1e ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e310:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e317:	e9 bd 00 00 00       	jmp    f010e3d9 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e31c:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e322:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e325:	89 d0                	mov    %edx,%eax
f010e327:	c1 e0 02             	shl    $0x2,%eax
f010e32a:	01 d0                	add    %edx,%eax
f010e32c:	01 c0                	add    %eax,%eax
f010e32e:	01 d0                	add    %edx,%eax
f010e330:	01 c0                	add    %eax,%eax
f010e332:	01 d0                	add    %edx,%eax
f010e334:	c1 e0 02             	shl    $0x2,%eax
f010e337:	01 c8                	add    %ecx,%eax
f010e339:	83 ec 04             	sub    $0x4,%esp
f010e33c:	6a 5c                	push   $0x5c
f010e33e:	6a 00                	push   $0x0
f010e340:	50                   	push   %eax
f010e341:	e8 35 33 02 00       	call   f013167b <memset>
f010e346:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e349:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e34f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e352:	89 d0                	mov    %edx,%eax
f010e354:	c1 e0 02             	shl    $0x2,%eax
f010e357:	01 d0                	add    %edx,%eax
f010e359:	01 c0                	add    %eax,%eax
f010e35b:	01 d0                	add    %edx,%eax
f010e35d:	01 c0                	add    %eax,%eax
f010e35f:	01 d0                	add    %edx,%eax
f010e361:	c1 e0 02             	shl    $0x2,%eax
f010e364:	01 c8                	add    %ecx,%eax
f010e366:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e36a:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e370:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e373:	89 d0                	mov    %edx,%eax
f010e375:	c1 e0 02             	shl    $0x2,%eax
f010e378:	01 d0                	add    %edx,%eax
f010e37a:	01 c0                	add    %eax,%eax
f010e37c:	01 d0                	add    %edx,%eax
f010e37e:	01 c0                	add    %eax,%eax
f010e380:	01 d0                	add    %edx,%eax
f010e382:	c1 e0 02             	shl    $0x2,%eax
f010e385:	01 c8                	add    %ecx,%eax
f010e387:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e38e:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e394:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e397:	89 d0                	mov    %edx,%eax
f010e399:	c1 e0 02             	shl    $0x2,%eax
f010e39c:	01 d0                	add    %edx,%eax
f010e39e:	01 c0                	add    %eax,%eax
f010e3a0:	01 d0                	add    %edx,%eax
f010e3a2:	01 c0                	add    %eax,%eax
f010e3a4:	01 d0                	add    %edx,%eax
f010e3a6:	c1 e0 02             	shl    $0x2,%eax
f010e3a9:	01 c8                	add    %ecx,%eax
f010e3ab:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e3b2:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e3b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e3bb:	89 d0                	mov    %edx,%eax
f010e3bd:	c1 e0 02             	shl    $0x2,%eax
f010e3c0:	01 d0                	add    %edx,%eax
f010e3c2:	01 c0                	add    %eax,%eax
f010e3c4:	01 d0                	add    %edx,%eax
f010e3c6:	01 c0                	add    %eax,%eax
f010e3c8:	01 d0                	add    %edx,%eax
f010e3ca:	c1 e0 02             	shl    $0x2,%eax
f010e3cd:	01 c8                	add    %ecx,%eax
f010e3cf:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e3d6:	ff 45 f4             	incl   -0xc(%ebp)
f010e3d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e3dc:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e3e1:	39 c2                	cmp    %eax,%edx
f010e3e3:	0f 82 33 ff ff ff    	jb     f010e31c <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e3e9:	90                   	nop
f010e3ea:	c9                   	leave  
f010e3eb:	c3                   	ret    

f010e3ec <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e3ec:	55                   	push   %ebp
f010e3ed:	89 e5                	mov    %esp,%ebp
f010e3ef:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e3f2:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e3f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e400:	eb 2f                	jmp    f010e431 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e402:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e408:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e40b:	89 d0                	mov    %edx,%eax
f010e40d:	c1 e0 02             	shl    $0x2,%eax
f010e410:	01 d0                	add    %edx,%eax
f010e412:	01 c0                	add    %eax,%eax
f010e414:	01 d0                	add    %edx,%eax
f010e416:	01 c0                	add    %eax,%eax
f010e418:	01 d0                	add    %edx,%eax
f010e41a:	c1 e0 02             	shl    $0x2,%eax
f010e41d:	01 c8                	add    %ecx,%eax
f010e41f:	8a 40 58             	mov    0x58(%eax),%al
f010e422:	84 c0                	test   %al,%al
f010e424:	74 08                	je     f010e42e <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e426:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e429:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e42c:	eb 0f                	jmp    f010e43d <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e42e:	ff 45 f0             	incl   -0x10(%ebp)
f010e431:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e434:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e439:	39 c2                	cmp    %eax,%edx
f010e43b:	72 c5                	jb     f010e402 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e43d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e441:	75 4d                	jne    f010e490 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e443:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e448:	01 c0                	add    %eax,%eax
f010e44a:	89 c2                	mov    %eax,%edx
f010e44c:	a1 0c 1d 88 f0       	mov    0xf0881d0c,%eax
f010e451:	83 ec 08             	sub    $0x8,%esp
f010e454:	52                   	push   %edx
f010e455:	50                   	push   %eax
f010e456:	e8 df 98 ff ff       	call   f0107d3a <krealloc>
f010e45b:	83 c4 10             	add    $0x10,%esp
f010e45e:	a3 0c 1d 88 f0       	mov    %eax,0xf0881d0c
			if (semaphores == NULL)
f010e463:	a1 0c 1d 88 f0       	mov    0xf0881d0c,%eax
f010e468:	85 c0                	test   %eax,%eax
f010e46a:	75 10                	jne    f010e47c <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e46c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e46f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e475:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e47a:	eb 5b                	jmp    f010e4d7 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e47c:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e481:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e484:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e489:	01 c0                	add    %eax,%eax
f010e48b:	a3 b4 1c 88 f0       	mov    %eax,0xf0881cb4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e490:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e496:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e499:	89 d0                	mov    %edx,%eax
f010e49b:	c1 e0 02             	shl    $0x2,%eax
f010e49e:	01 d0                	add    %edx,%eax
f010e4a0:	01 c0                	add    %eax,%eax
f010e4a2:	01 d0                	add    %edx,%eax
f010e4a4:	01 c0                	add    %eax,%eax
f010e4a6:	01 d0                	add    %edx,%eax
f010e4a8:	c1 e0 02             	shl    $0x2,%eax
f010e4ab:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e4ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4b1:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e4b3:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e4b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4bc:	89 d0                	mov    %edx,%eax
f010e4be:	c1 e0 02             	shl    $0x2,%eax
f010e4c1:	01 d0                	add    %edx,%eax
f010e4c3:	01 c0                	add    %eax,%eax
f010e4c5:	01 d0                	add    %edx,%eax
f010e4c7:	01 c0                	add    %eax,%eax
f010e4c9:	01 d0                	add    %edx,%eax
f010e4cb:	c1 e0 02             	shl    $0x2,%eax
f010e4ce:	01 c8                	add    %ecx,%eax
f010e4d0:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e4d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e4d7:	c9                   	leave  
f010e4d8:	c3                   	ret    

f010e4d9 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e4d9:	55                   	push   %ebp
f010e4da:	89 e5                	mov    %esp,%ebp
f010e4dc:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e4df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e4e6:	e9 84 00 00 00       	jmp    f010e56f <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e4eb:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e4f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4f4:	89 d0                	mov    %edx,%eax
f010e4f6:	c1 e0 02             	shl    $0x2,%eax
f010e4f9:	01 d0                	add    %edx,%eax
f010e4fb:	01 c0                	add    %eax,%eax
f010e4fd:	01 d0                	add    %edx,%eax
f010e4ff:	01 c0                	add    %eax,%eax
f010e501:	01 d0                	add    %edx,%eax
f010e503:	c1 e0 02             	shl    $0x2,%eax
f010e506:	01 c8                	add    %ecx,%eax
f010e508:	8a 40 58             	mov    0x58(%eax),%al
f010e50b:	84 c0                	test   %al,%al
f010e50d:	75 5c                	jne    f010e56b <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e50f:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e515:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e518:	89 d0                	mov    %edx,%eax
f010e51a:	c1 e0 02             	shl    $0x2,%eax
f010e51d:	01 d0                	add    %edx,%eax
f010e51f:	01 c0                	add    %eax,%eax
f010e521:	01 d0                	add    %edx,%eax
f010e523:	01 c0                	add    %eax,%eax
f010e525:	01 d0                	add    %edx,%eax
f010e527:	c1 e0 02             	shl    $0x2,%eax
f010e52a:	01 c8                	add    %ecx,%eax
f010e52c:	8b 00                	mov    (%eax),%eax
f010e52e:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e531:	75 39                	jne    f010e56c <get_semaphore_object_ID+0x93>
f010e533:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e539:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e53c:	89 d0                	mov    %edx,%eax
f010e53e:	c1 e0 02             	shl    $0x2,%eax
f010e541:	01 d0                	add    %edx,%eax
f010e543:	01 c0                	add    %eax,%eax
f010e545:	01 d0                	add    %edx,%eax
f010e547:	01 c0                	add    %eax,%eax
f010e549:	01 d0                	add    %edx,%eax
f010e54b:	c1 e0 02             	shl    $0x2,%eax
f010e54e:	01 c8                	add    %ecx,%eax
f010e550:	83 c0 04             	add    $0x4,%eax
f010e553:	83 ec 08             	sub    $0x8,%esp
f010e556:	50                   	push   %eax
f010e557:	ff 75 0c             	pushl  0xc(%ebp)
f010e55a:	e8 3a 30 02 00       	call   f0131599 <strcmp>
f010e55f:	83 c4 10             	add    $0x10,%esp
f010e562:	85 c0                	test   %eax,%eax
f010e564:	75 06                	jne    f010e56c <get_semaphore_object_ID+0x93>
		{
			return i;
f010e566:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e569:	eb 19                	jmp    f010e584 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e56b:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e56c:	ff 45 f4             	incl   -0xc(%ebp)
f010e56f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e572:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e577:	39 c2                	cmp    %eax,%edx
f010e579:	0f 82 6c ff ff ff    	jb     f010e4eb <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e57f:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e584:	c9                   	leave  
f010e585:	c3                   	ret    

f010e586 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e586:	55                   	push   %ebp
f010e587:	89 e5                	mov    %esp,%ebp
f010e589:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e58c:	a1 b4 1c 88 f0       	mov    0xf0881cb4,%eax
f010e591:	39 45 08             	cmp    %eax,0x8(%ebp)
f010e594:	72 0a                	jb     f010e5a0 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010e596:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e59b:	e9 bf 00 00 00       	jmp    f010e65f <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e5a0:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e5a6:	8b 55 08             	mov    0x8(%ebp),%edx
f010e5a9:	89 d0                	mov    %edx,%eax
f010e5ab:	c1 e0 02             	shl    $0x2,%eax
f010e5ae:	01 d0                	add    %edx,%eax
f010e5b0:	01 c0                	add    %eax,%eax
f010e5b2:	01 d0                	add    %edx,%eax
f010e5b4:	01 c0                	add    %eax,%eax
f010e5b6:	01 d0                	add    %edx,%eax
f010e5b8:	c1 e0 02             	shl    $0x2,%eax
f010e5bb:	01 c8                	add    %ecx,%eax
f010e5bd:	83 ec 04             	sub    $0x4,%esp
f010e5c0:	6a 5c                	push   $0x5c
f010e5c2:	6a 00                	push   $0x0
f010e5c4:	50                   	push   %eax
f010e5c5:	e8 b1 30 02 00       	call   f013167b <memset>
f010e5ca:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e5cd:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e5d3:	8b 55 08             	mov    0x8(%ebp),%edx
f010e5d6:	89 d0                	mov    %edx,%eax
f010e5d8:	c1 e0 02             	shl    $0x2,%eax
f010e5db:	01 d0                	add    %edx,%eax
f010e5dd:	01 c0                	add    %eax,%eax
f010e5df:	01 d0                	add    %edx,%eax
f010e5e1:	01 c0                	add    %eax,%eax
f010e5e3:	01 d0                	add    %edx,%eax
f010e5e5:	c1 e0 02             	shl    $0x2,%eax
f010e5e8:	01 c8                	add    %ecx,%eax
f010e5ea:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e5ee:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e5f4:	8b 55 08             	mov    0x8(%ebp),%edx
f010e5f7:	89 d0                	mov    %edx,%eax
f010e5f9:	c1 e0 02             	shl    $0x2,%eax
f010e5fc:	01 d0                	add    %edx,%eax
f010e5fe:	01 c0                	add    %eax,%eax
f010e600:	01 d0                	add    %edx,%eax
f010e602:	01 c0                	add    %eax,%eax
f010e604:	01 d0                	add    %edx,%eax
f010e606:	c1 e0 02             	shl    $0x2,%eax
f010e609:	01 c8                	add    %ecx,%eax
f010e60b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e612:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e618:	8b 55 08             	mov    0x8(%ebp),%edx
f010e61b:	89 d0                	mov    %edx,%eax
f010e61d:	c1 e0 02             	shl    $0x2,%eax
f010e620:	01 d0                	add    %edx,%eax
f010e622:	01 c0                	add    %eax,%eax
f010e624:	01 d0                	add    %edx,%eax
f010e626:	01 c0                	add    %eax,%eax
f010e628:	01 d0                	add    %edx,%eax
f010e62a:	c1 e0 02             	shl    $0x2,%eax
f010e62d:	01 c8                	add    %ecx,%eax
f010e62f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e636:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e63c:	8b 55 08             	mov    0x8(%ebp),%edx
f010e63f:	89 d0                	mov    %edx,%eax
f010e641:	c1 e0 02             	shl    $0x2,%eax
f010e644:	01 d0                	add    %edx,%eax
f010e646:	01 c0                	add    %eax,%eax
f010e648:	01 d0                	add    %edx,%eax
f010e64a:	01 c0                	add    %eax,%eax
f010e64c:	01 d0                	add    %edx,%eax
f010e64e:	c1 e0 02             	shl    $0x2,%eax
f010e651:	01 c8                	add    %ecx,%eax
f010e653:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010e65a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e65f:	c9                   	leave  
f010e660:	c3                   	ret    

f010e661 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e661:	55                   	push   %ebp
f010e662:	89 e5                	mov    %esp,%ebp
f010e664:	83 ec 18             	sub    $0x18,%esp
	//Return:
	//	a) SemaphoreID (its index in the array) if succeed
	//	b) E_SEMAPHORE_EXISTS if the semaphore is already exists
	//	c) E_NO_SEMAPHORE if the the array of semaphores is full
	//change this "return" according to your answer
	struct Semaphore *new_semaphore=NULL;
f010e667:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		int ret_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e66e:	83 ec 08             	sub    $0x8,%esp
f010e671:	ff 75 0c             	pushl  0xc(%ebp)
f010e674:	ff 75 08             	pushl  0x8(%ebp)
f010e677:	e8 5d fe ff ff       	call   f010e4d9 <get_semaphore_object_ID>
f010e67c:	83 c4 10             	add    $0x10,%esp
f010e67f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret_of_get ==E_SEMAPHORE_NOT_EXISTS)
f010e682:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010e686:	75 43                	jne    f010e6cb <createSemaphore+0x6a>
		{
			int result_of_allocation=allocate_semaphore_object(&new_semaphore);
f010e688:	83 ec 0c             	sub    $0xc,%esp
f010e68b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010e68e:	50                   	push   %eax
f010e68f:	e8 58 fd ff ff       	call   f010e3ec <allocate_semaphore_object>
f010e694:	83 c4 10             	add    $0x10,%esp
f010e697:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if(result_of_allocation!=E_NO_SEMAPHORE)
f010e69a:	83 7d f0 f5          	cmpl   $0xfffffff5,-0x10(%ebp)
f010e69e:	74 32                	je     f010e6d2 <createSemaphore+0x71>
			{   //*new_semaphore->name=*semaphoreName;
				strcpy(new_semaphore->name,semaphoreName);
f010e6a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e6a3:	83 c0 04             	add    $0x4,%eax
f010e6a6:	83 ec 08             	sub    $0x8,%esp
f010e6a9:	ff 75 0c             	pushl  0xc(%ebp)
f010e6ac:	50                   	push   %eax
f010e6ad:	e8 2a 2e 02 00       	call   f01314dc <strcpy>
f010e6b2:	83 c4 10             	add    $0x10,%esp
				new_semaphore->ownerID=ownerEnvID;
f010e6b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e6b8:	8b 55 08             	mov    0x8(%ebp),%edx
f010e6bb:	89 10                	mov    %edx,(%eax)
				new_semaphore->value=initialValue;
f010e6bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e6c0:	8b 55 10             	mov    0x10(%ebp),%edx
f010e6c3:	89 50 54             	mov    %edx,0x54(%eax)
				return result_of_allocation;
f010e6c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e6c9:	eb 0c                	jmp    f010e6d7 <createSemaphore+0x76>
			}
		}
		else
		{
			return E_SEMAPHORE_EXISTS;
f010e6cb:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
f010e6d0:	eb 05                	jmp    f010e6d7 <createSemaphore+0x76>
		}
		return E_NO_SEMAPHORE;
f010e6d2:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
f010e6d7:	c9                   	leave  
f010e6d8:	c3                   	ret    

f010e6d9 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e6d9:	55                   	push   %ebp
f010e6da:	89 e5                	mov    %esp,%ebp
f010e6dc:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010e6df:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f010e6e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//		a) adding it to semaphore queue		[refer to helper functions in doc]
	//		b) changing its status to ENV_BLOCKED
	//		c) set curenv with NULL
	//	4) Call "fos_scheduler()" to continue running the remaining envs

	int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e6e7:	83 ec 08             	sub    $0x8,%esp
f010e6ea:	ff 75 0c             	pushl  0xc(%ebp)
f010e6ed:	ff 75 08             	pushl  0x8(%ebp)
f010e6f0:	e8 e4 fd ff ff       	call   f010e4d9 <get_semaphore_object_ID>
f010e6f5:	83 c4 10             	add    $0x10,%esp
f010e6f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	semaphores[return_of_get].value--;
f010e6fb:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e701:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e704:	89 d0                	mov    %edx,%eax
f010e706:	c1 e0 02             	shl    $0x2,%eax
f010e709:	01 d0                	add    %edx,%eax
f010e70b:	01 c0                	add    %eax,%eax
f010e70d:	01 d0                	add    %edx,%eax
f010e70f:	01 c0                	add    %eax,%eax
f010e711:	01 d0                	add    %edx,%eax
f010e713:	c1 e0 02             	shl    $0x2,%eax
f010e716:	01 c8                	add    %ecx,%eax
f010e718:	8b 50 54             	mov    0x54(%eax),%edx
f010e71b:	4a                   	dec    %edx
f010e71c:	89 50 54             	mov    %edx,0x54(%eax)
	if(semaphores[return_of_get].value<0)
f010e71f:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e725:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e728:	89 d0                	mov    %edx,%eax
f010e72a:	c1 e0 02             	shl    $0x2,%eax
f010e72d:	01 d0                	add    %edx,%eax
f010e72f:	01 c0                	add    %eax,%eax
f010e731:	01 d0                	add    %edx,%eax
f010e733:	01 c0                	add    %eax,%eax
f010e735:	01 d0                	add    %edx,%eax
f010e737:	c1 e0 02             	shl    $0x2,%eax
f010e73a:	01 c8                	add    %ecx,%eax
f010e73c:	8b 40 54             	mov    0x54(%eax),%eax
f010e73f:	85 c0                	test   %eax,%eax
f010e741:	79 43                	jns    f010e786 <waitSemaphore+0xad>
	{
		enqueue(&semaphores[return_of_get].env_queue,myenv);
f010e743:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e749:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e74c:	89 d0                	mov    %edx,%eax
f010e74e:	c1 e0 02             	shl    $0x2,%eax
f010e751:	01 d0                	add    %edx,%eax
f010e753:	01 c0                	add    %eax,%eax
f010e755:	01 d0                	add    %edx,%eax
f010e757:	01 c0                	add    %eax,%eax
f010e759:	01 d0                	add    %edx,%eax
f010e75b:	c1 e0 02             	shl    $0x2,%eax
f010e75e:	01 c8                	add    %ecx,%eax
f010e760:	83 c0 44             	add    $0x44,%eax
f010e763:	83 ec 08             	sub    $0x8,%esp
f010e766:	ff 75 f4             	pushl  -0xc(%ebp)
f010e769:	50                   	push   %eax
f010e76a:	e8 2e 5d ff ff       	call   f010449d <enqueue>
f010e76f:	83 c4 10             	add    $0x10,%esp
		myenv->env_status=ENV_BLOCKED;
f010e772:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e775:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
		//curenv->env_status=ENV_BLOCKED;
		curenv=NULL;
f010e77c:	c7 05 f4 13 88 f0 00 	movl   $0x0,0xf08813f4
f010e783:	00 00 00 
	}
	fos_scheduler();
f010e786:	e8 9b 5f ff ff       	call   f0104726 <fos_scheduler>

f010e78b <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e78b:	55                   	push   %ebp
f010e78c:	89 e5                	mov    %esp,%ebp
f010e78e:	83 ec 18             	sub    $0x18,%esp
	//		a) removing it from semaphore queue		[refer to helper functions in doc]
	//		b) adding it to ready queue				[refer to helper functions in doc]
	//		c) changing its status to ENV_READY
	    //uint32 val=0;
	struct Env* env;
	int return_of_get=get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010e791:	83 ec 08             	sub    $0x8,%esp
f010e794:	ff 75 0c             	pushl  0xc(%ebp)
f010e797:	ff 75 08             	pushl  0x8(%ebp)
f010e79a:	e8 3a fd ff ff       	call   f010e4d9 <get_semaphore_object_ID>
f010e79f:	83 c4 10             	add    $0x10,%esp
f010e7a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	semaphores[return_of_get].value++;
f010e7a5:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e7ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7ae:	89 d0                	mov    %edx,%eax
f010e7b0:	c1 e0 02             	shl    $0x2,%eax
f010e7b3:	01 d0                	add    %edx,%eax
f010e7b5:	01 c0                	add    %eax,%eax
f010e7b7:	01 d0                	add    %edx,%eax
f010e7b9:	01 c0                	add    %eax,%eax
f010e7bb:	01 d0                	add    %edx,%eax
f010e7bd:	c1 e0 02             	shl    $0x2,%eax
f010e7c0:	01 c8                	add    %ecx,%eax
f010e7c2:	8b 50 54             	mov    0x54(%eax),%edx
f010e7c5:	42                   	inc    %edx
f010e7c6:	89 50 54             	mov    %edx,0x54(%eax)
	if(semaphores[return_of_get].value<=0)
f010e7c9:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e7cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7d2:	89 d0                	mov    %edx,%eax
f010e7d4:	c1 e0 02             	shl    $0x2,%eax
f010e7d7:	01 d0                	add    %edx,%eax
f010e7d9:	01 c0                	add    %eax,%eax
f010e7db:	01 d0                	add    %edx,%eax
f010e7dd:	01 c0                	add    %eax,%eax
f010e7df:	01 d0                	add    %edx,%eax
f010e7e1:	c1 e0 02             	shl    $0x2,%eax
f010e7e4:	01 c8                	add    %ecx,%eax
f010e7e6:	8b 40 54             	mov    0x54(%eax),%eax
f010e7e9:	85 c0                	test   %eax,%eax
f010e7eb:	7f 47                	jg     f010e834 <signalSemaphore+0xa9>
	{
		env=dequeue(&semaphores[return_of_get].env_queue);
f010e7ed:	8b 0d 0c 1d 88 f0    	mov    0xf0881d0c,%ecx
f010e7f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7f6:	89 d0                	mov    %edx,%eax
f010e7f8:	c1 e0 02             	shl    $0x2,%eax
f010e7fb:	01 d0                	add    %edx,%eax
f010e7fd:	01 c0                	add    %eax,%eax
f010e7ff:	01 d0                	add    %edx,%eax
f010e801:	01 c0                	add    %eax,%eax
f010e803:	01 d0                	add    %edx,%eax
f010e805:	c1 e0 02             	shl    $0x2,%eax
f010e808:	01 c8                	add    %ecx,%eax
f010e80a:	83 c0 44             	add    $0x44,%eax
f010e80d:	83 ec 0c             	sub    $0xc,%esp
f010e810:	50                   	push   %eax
f010e811:	e8 18 5d ff ff       	call   f010452e <dequeue>
f010e816:	83 c4 10             	add    $0x10,%esp
f010e819:	89 45 f0             	mov    %eax,-0x10(%ebp)
		sched_insert_ready(env);
f010e81c:	83 ec 0c             	sub    $0xc,%esp
f010e81f:	ff 75 f0             	pushl  -0x10(%ebp)
f010e822:	e8 25 61 ff ff       	call   f010494c <sched_insert_ready>
f010e827:	83 c4 10             	add    $0x10,%esp
		env->env_status=ENV_READY;
f010e82a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e82d:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
	}
}
f010e834:	90                   	nop
f010e835:	c9                   	leave  
f010e836:	c3                   	ret    

f010e837 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010e837:	55                   	push   %ebp
f010e838:	89 e5                	mov    %esp,%ebp
f010e83a:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010e83d:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e844:	83 ec 0c             	sub    $0xc,%esp
f010e847:	ff 75 ec             	pushl  -0x14(%ebp)
f010e84a:	e8 a8 37 02 00       	call   f0131ff7 <initialize_MemBlocksList>
f010e84f:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010e852:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010e857:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e85a:	74 17                	je     f010e873 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010e85c:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010e861:	50                   	push   %eax
f010e862:	68 80 7e 13 f0       	push   $0xf0137e80
f010e867:	6a 1f                	push   $0x1f
f010e869:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010e86e:	e8 92 19 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e873:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010e878:	85 c0                	test   %eax,%eax
f010e87a:	74 17                	je     f010e893 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010e87c:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010e881:	50                   	push   %eax
f010e882:	68 f8 7e 13 f0       	push   $0xf0137ef8
f010e887:	6a 26                	push   $0x26
f010e889:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010e88e:	e8 72 19 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010e893:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010e898:	85 c0                	test   %eax,%eax
f010e89a:	74 17                	je     f010e8b3 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010e89c:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010e8a1:	50                   	push   %eax
f010e8a2:	68 48 7f 13 f0       	push   $0xf0137f48
f010e8a7:	6a 2c                	push   $0x2c
f010e8a9:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010e8ae:	e8 52 19 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e8b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e8ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e8c1:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f010e8c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e8c9:	eb 29                	jmp    f010e8f4 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e8cb:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e8ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e8d1:	8b 50 0c             	mov    0xc(%eax),%edx
f010e8d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e8d7:	8b 40 08             	mov    0x8(%eax),%eax
f010e8da:	83 ec 04             	sub    $0x4,%esp
f010e8dd:	52                   	push   %edx
f010e8de:	50                   	push   %eax
f010e8df:	68 98 7f 13 f0       	push   $0xf0137f98
f010e8e4:	e8 25 24 ff ff       	call   f0100d0e <cprintf>
f010e8e9:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e8ec:	a1 a0 1d 88 f0       	mov    0xf0881da0,%eax
f010e8f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e8f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e8f8:	74 07                	je     f010e901 <test_initialize_MemBlocksList+0xca>
f010e8fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e8fd:	8b 00                	mov    (%eax),%eax
f010e8ff:	eb 05                	jmp    f010e906 <test_initialize_MemBlocksList+0xcf>
f010e901:	b8 00 00 00 00       	mov    $0x0,%eax
f010e906:	a3 a0 1d 88 f0       	mov    %eax,0xf0881da0
f010e90b:	a1 a0 1d 88 f0       	mov    0xf0881da0,%eax
f010e910:	85 c0                	test   %eax,%eax
f010e912:	75 b7                	jne    f010e8cb <test_initialize_MemBlocksList+0x94>
f010e914:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e918:	75 b1                	jne    f010e8cb <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010e91a:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010e91f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e922:	74 14                	je     f010e938 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010e924:	83 ec 04             	sub    $0x4,%esp
f010e927:	68 b8 7f 13 f0       	push   $0xf0137fb8
f010e92c:	6a 38                	push   $0x38
f010e92e:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010e933:	e8 cd 18 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010e938:	83 ec 0c             	sub    $0xc,%esp
f010e93b:	68 10 80 13 f0       	push   $0xf0138010
f010e940:	e8 c9 23 ff ff       	call   f0100d0e <cprintf>
f010e945:	83 c4 10             	add    $0x10,%esp
}
f010e948:	90                   	nop
f010e949:	c9                   	leave  
f010e94a:	c3                   	ret    

f010e94b <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010e94b:	55                   	push   %ebp
f010e94c:	89 e5                	mov    %esp,%ebp
f010e94e:	57                   	push   %edi
f010e94f:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010e955:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e95c:	83 ec 0c             	sub    $0xc,%esp
f010e95f:	ff 75 f4             	pushl  -0xc(%ebp)
f010e962:	e8 90 36 02 00       	call   f0131ff7 <initialize_MemBlocksList>
f010e967:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e96a:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010e971:	00 00 00 
f010e974:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010e97b:	00 00 00 
f010e97e:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010e985:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e988:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010e98f:	00 00 00 
f010e992:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010e999:	00 00 00 
f010e99c:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010e9a3:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010e9a6:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010e9a9:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e9ae:	b8 00 00 00 00       	mov    $0x0,%eax
f010e9b3:	89 d7                	mov    %edx,%edi
f010e9b5:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010e9b7:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e9ba:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e9bf:	b8 00 00 00 00       	mov    $0x0,%eax
f010e9c4:	89 d7                	mov    %edx,%edi
f010e9c6:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e9c8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010e9cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010e9d6:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010e9dd:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010e9e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9e7:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010e9ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e9ed:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010e9f0:	83 ec 0c             	sub    $0xc,%esp
f010e9f3:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e9f6:	50                   	push   %eax
f010e9f7:	e8 30 37 02 00       	call   f013212c <insert_sorted_allocList>
f010e9fc:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010e9ff:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ea06:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010ea0b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea0e:	74 14                	je     f010ea24 <test_insert_sorted_allocList+0xd9>
f010ea10:	83 ec 04             	sub    $0x4,%esp
f010ea13:	68 5c 80 13 f0       	push   $0xf013805c
f010ea18:	6a 56                	push   $0x56
f010ea1a:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ea1f:	e8 e1 17 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ea24:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010ea29:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ea2c:	74 14                	je     f010ea42 <test_insert_sorted_allocList+0xf7>
f010ea2e:	83 ec 04             	sub    $0x4,%esp
f010ea31:	68 a8 80 13 f0       	push   $0xf01380a8
f010ea36:	6a 59                	push   $0x59
f010ea38:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ea3d:	e8 c3 17 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ea42:	83 ec 0c             	sub    $0xc,%esp
f010ea45:	ff 75 f0             	pushl  -0x10(%ebp)
f010ea48:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ea4b:	50                   	push   %eax
f010ea4c:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ea4f:	50                   	push   %eax
f010ea50:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ea53:	50                   	push   %eax
f010ea54:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010ea59:	e8 7d 26 00 00       	call   f01110db <check_list_data>
f010ea5e:	83 c4 20             	add    $0x20,%esp
f010ea61:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ea64:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ea68:	74 14                	je     f010ea7e <test_insert_sorted_allocList+0x133>
f010ea6a:	83 ec 04             	sub    $0x4,%esp
f010ea6d:	68 f8 80 13 f0       	push   $0xf01380f8
f010ea72:	6a 5d                	push   $0x5d
f010ea74:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ea79:	e8 87 17 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ea7e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ea81:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ea84:	74 14                	je     f010ea9a <test_insert_sorted_allocList+0x14f>
f010ea86:	83 ec 04             	sub    $0x4,%esp
f010ea89:	68 48 81 13 f0       	push   $0xf0138148
f010ea8e:	6a 5e                	push   $0x5e
f010ea90:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ea95:	e8 6b 17 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010ea9a:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010eaa1:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010eaa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010eaab:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010eaae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eab1:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010eab4:	83 ec 0c             	sub    $0xc,%esp
f010eab7:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010eaba:	50                   	push   %eax
f010eabb:	e8 6c 36 02 00       	call   f013212c <insert_sorted_allocList>
f010eac0:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010eac3:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010eaca:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010eacf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ead2:	74 14                	je     f010eae8 <test_insert_sorted_allocList+0x19d>
f010ead4:	83 ec 04             	sub    $0x4,%esp
f010ead7:	68 5c 80 13 f0       	push   $0xf013805c
f010eadc:	6a 6d                	push   $0x6d
f010eade:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010eae3:	e8 1d 17 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010eae8:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010eaed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010eaf0:	74 14                	je     f010eb06 <test_insert_sorted_allocList+0x1bb>
f010eaf2:	83 ec 04             	sub    $0x4,%esp
f010eaf5:	68 a8 80 13 f0       	push   $0xf01380a8
f010eafa:	6a 70                	push   $0x70
f010eafc:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010eb01:	e8 ff 16 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010eb06:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010eb0d:	83 ec 0c             	sub    $0xc,%esp
f010eb10:	ff 75 f0             	pushl  -0x10(%ebp)
f010eb13:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010eb16:	50                   	push   %eax
f010eb17:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eb1a:	50                   	push   %eax
f010eb1b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eb1e:	50                   	push   %eax
f010eb1f:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010eb24:	e8 b2 25 00 00       	call   f01110db <check_list_data>
f010eb29:	83 c4 20             	add    $0x20,%esp
f010eb2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010eb2f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010eb33:	74 14                	je     f010eb49 <test_insert_sorted_allocList+0x1fe>
f010eb35:	83 ec 04             	sub    $0x4,%esp
f010eb38:	68 f8 80 13 f0       	push   $0xf01380f8
f010eb3d:	6a 75                	push   $0x75
f010eb3f:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010eb44:	e8 bc 16 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eb49:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eb4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb4f:	74 14                	je     f010eb65 <test_insert_sorted_allocList+0x21a>
f010eb51:	83 ec 04             	sub    $0x4,%esp
f010eb54:	68 48 81 13 f0       	push   $0xf0138148
f010eb59:	6a 76                	push   $0x76
f010eb5b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010eb60:	e8 a0 16 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010eb65:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010eb6c:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010eb73:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010eb76:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010eb79:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eb7c:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010eb7f:	83 ec 0c             	sub    $0xc,%esp
f010eb82:	8d 45 90             	lea    -0x70(%ebp),%eax
f010eb85:	50                   	push   %eax
f010eb86:	e8 a1 35 02 00       	call   f013212c <insert_sorted_allocList>
f010eb8b:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010eb8e:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010eb95:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010eb9a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb9d:	74 17                	je     f010ebb6 <test_insert_sorted_allocList+0x26b>
f010eb9f:	83 ec 04             	sub    $0x4,%esp
f010eba2:	68 5c 80 13 f0       	push   $0xf013805c
f010eba7:	68 85 00 00 00       	push   $0x85
f010ebac:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ebb1:	e8 4f 16 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010ebb6:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010ebbb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ebbe:	74 17                	je     f010ebd7 <test_insert_sorted_allocList+0x28c>
f010ebc0:	83 ec 04             	sub    $0x4,%esp
f010ebc3:	68 94 81 13 f0       	push   $0xf0138194
f010ebc8:	68 88 00 00 00       	push   $0x88
f010ebcd:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ebd2:	e8 2e 16 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ebd7:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ebde:	83 ec 0c             	sub    $0xc,%esp
f010ebe1:	ff 75 f0             	pushl  -0x10(%ebp)
f010ebe4:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ebe7:	50                   	push   %eax
f010ebe8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ebeb:	50                   	push   %eax
f010ebec:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ebef:	50                   	push   %eax
f010ebf0:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010ebf5:	e8 e1 24 00 00       	call   f01110db <check_list_data>
f010ebfa:	83 c4 20             	add    $0x20,%esp
f010ebfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ec00:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ec04:	74 17                	je     f010ec1d <test_insert_sorted_allocList+0x2d2>
f010ec06:	83 ec 04             	sub    $0x4,%esp
f010ec09:	68 f8 80 13 f0       	push   $0xf01380f8
f010ec0e:	68 8d 00 00 00       	push   $0x8d
f010ec13:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ec18:	e8 e8 15 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ec1d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ec20:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ec23:	74 17                	je     f010ec3c <test_insert_sorted_allocList+0x2f1>
f010ec25:	83 ec 04             	sub    $0x4,%esp
f010ec28:	68 48 81 13 f0       	push   $0xf0138148
f010ec2d:	68 8e 00 00 00       	push   $0x8e
f010ec32:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ec37:	e8 c9 15 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010ec3c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010ec43:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010ec4a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ec4d:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010ec50:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ec53:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010ec56:	83 ec 0c             	sub    $0xc,%esp
f010ec59:	8d 45 80             	lea    -0x80(%ebp),%eax
f010ec5c:	50                   	push   %eax
f010ec5d:	e8 ca 34 02 00       	call   f013212c <insert_sorted_allocList>
f010ec62:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010ec65:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ec6c:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010ec71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ec74:	74 17                	je     f010ec8d <test_insert_sorted_allocList+0x342>
f010ec76:	83 ec 04             	sub    $0x4,%esp
f010ec79:	68 5c 80 13 f0       	push   $0xf013805c
f010ec7e:	68 9c 00 00 00       	push   $0x9c
f010ec83:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ec88:	e8 78 15 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ec8d:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010ec92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec95:	74 17                	je     f010ecae <test_insert_sorted_allocList+0x363>
f010ec97:	83 ec 04             	sub    $0x4,%esp
f010ec9a:	68 a8 80 13 f0       	push   $0xf01380a8
f010ec9f:	68 9f 00 00 00       	push   $0x9f
f010eca4:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010eca9:	e8 57 15 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ecae:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ecb5:	83 ec 0c             	sub    $0xc,%esp
f010ecb8:	ff 75 f0             	pushl  -0x10(%ebp)
f010ecbb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ecbe:	50                   	push   %eax
f010ecbf:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ecc2:	50                   	push   %eax
f010ecc3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010ecc6:	50                   	push   %eax
f010ecc7:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010eccc:	e8 0a 24 00 00       	call   f01110db <check_list_data>
f010ecd1:	83 c4 20             	add    $0x20,%esp
f010ecd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010ecd7:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010ecdb:	74 17                	je     f010ecf4 <test_insert_sorted_allocList+0x3a9>
f010ecdd:	83 ec 04             	sub    $0x4,%esp
f010ece0:	68 f8 80 13 f0       	push   $0xf01380f8
f010ece5:	68 a4 00 00 00       	push   $0xa4
f010ecea:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ecef:	e8 11 15 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010ecf4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ecf7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ecfa:	74 17                	je     f010ed13 <test_insert_sorted_allocList+0x3c8>
f010ecfc:	83 ec 04             	sub    $0x4,%esp
f010ecff:	68 48 81 13 f0       	push   $0xf0138148
f010ed04:	68 a5 00 00 00       	push   $0xa5
f010ed09:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ed0e:	e8 f2 14 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010ed13:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010ed1a:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010ed21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed24:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010ed2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ed2d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010ed33:	83 ec 0c             	sub    $0xc,%esp
f010ed36:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010ed3c:	50                   	push   %eax
f010ed3d:	e8 ea 33 02 00       	call   f013212c <insert_sorted_allocList>
f010ed42:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010ed45:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ed4c:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010ed51:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed54:	74 17                	je     f010ed6d <test_insert_sorted_allocList+0x422>
f010ed56:	83 ec 04             	sub    $0x4,%esp
f010ed59:	68 5c 80 13 f0       	push   $0xf013805c
f010ed5e:	68 b3 00 00 00       	push   $0xb3
f010ed63:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ed68:	e8 98 14 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ed6d:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010ed72:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ed75:	74 17                	je     f010ed8e <test_insert_sorted_allocList+0x443>
f010ed77:	83 ec 04             	sub    $0x4,%esp
f010ed7a:	68 a8 80 13 f0       	push   $0xf01380a8
f010ed7f:	68 b6 00 00 00       	push   $0xb6
f010ed84:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ed89:	e8 77 14 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010ed8e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ed95:	83 ec 0c             	sub    $0xc,%esp
f010ed98:	ff 75 f0             	pushl  -0x10(%ebp)
f010ed9b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ed9e:	50                   	push   %eax
f010ed9f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010eda2:	50                   	push   %eax
f010eda3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010eda6:	50                   	push   %eax
f010eda7:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010edac:	e8 2a 23 00 00       	call   f01110db <check_list_data>
f010edb1:	83 c4 20             	add    $0x20,%esp
f010edb4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010edb7:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010edbb:	74 17                	je     f010edd4 <test_insert_sorted_allocList+0x489>
f010edbd:	83 ec 04             	sub    $0x4,%esp
f010edc0:	68 f8 80 13 f0       	push   $0xf01380f8
f010edc5:	68 bb 00 00 00       	push   $0xbb
f010edca:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010edcf:	e8 31 14 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010edd4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010edd7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010edda:	74 17                	je     f010edf3 <test_insert_sorted_allocList+0x4a8>
f010eddc:	83 ec 04             	sub    $0x4,%esp
f010eddf:	68 48 81 13 f0       	push   $0xf0138148
f010ede4:	68 bc 00 00 00       	push   $0xbc
f010ede9:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010edee:	e8 12 14 ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010edf3:	83 ec 0c             	sub    $0xc,%esp
f010edf6:	68 e4 81 13 f0       	push   $0xf01381e4
f010edfb:	e8 0e 1f ff ff       	call   f0100d0e <cprintf>
f010ee00:	83 c4 10             	add    $0x10,%esp
}
f010ee03:	90                   	nop
f010ee04:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010ee07:	c9                   	leave  
f010ee08:	c3                   	ret    

f010ee09 <test_find_block>:

void test_find_block()
{
f010ee09:	55                   	push   %ebp
f010ee0a:	89 e5                	mov    %esp,%ebp
f010ee0c:	57                   	push   %edi
f010ee0d:	56                   	push   %esi
f010ee0e:	53                   	push   %ebx
f010ee0f:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010ee15:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ee1c:	83 ec 0c             	sub    $0xc,%esp
f010ee1f:	ff 75 e0             	pushl  -0x20(%ebp)
f010ee22:	e8 d0 31 02 00       	call   f0131ff7 <initialize_MemBlocksList>
f010ee27:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010ee2a:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010ee31:	00 00 00 
f010ee34:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010ee3b:	00 00 00 
f010ee3e:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010ee45:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010ee48:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010ee4b:	bb 5c 83 13 f0       	mov    $0xf013835c,%ebx
f010ee50:	ba 06 00 00 00       	mov    $0x6,%edx
f010ee55:	89 c7                	mov    %eax,%edi
f010ee57:	89 de                	mov    %ebx,%esi
f010ee59:	89 d1                	mov    %edx,%ecx
f010ee5b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010ee5d:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010ee60:	bb 74 83 13 f0       	mov    $0xf0138374,%ebx
f010ee65:	ba 06 00 00 00       	mov    $0x6,%edx
f010ee6a:	89 c7                	mov    %eax,%edi
f010ee6c:	89 de                	mov    %ebx,%esi
f010ee6e:	89 d1                	mov    %edx,%ecx
f010ee70:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010ee72:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010ee79:	00 00 00 
f010ee7c:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010ee83:	00 00 00 
f010ee86:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010ee8d:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010ee90:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010ee97:	e9 5f 01 00 00       	jmp    f010effb <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010ee9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee9f:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010eea3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eea6:	c1 e2 04             	shl    $0x4,%edx
f010eea9:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eeac:	01 da                	add    %ebx,%edx
f010eeae:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010eeb4:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010eeb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eeb9:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010eebd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eec0:	c1 e2 04             	shl    $0x4,%edx
f010eec3:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010eec6:	01 f2                	add    %esi,%edx
f010eec8:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010eece:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010eed0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010eed4:	0f 85 92 00 00 00    	jne    f010ef6c <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010eeda:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f010eedf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eee2:	c1 e2 04             	shl    $0x4,%edx
f010eee5:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010eee8:	01 fa                	add    %edi,%edx
f010eeea:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010eef0:	89 02                	mov    %eax,(%edx)
f010eef2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eef5:	c1 e0 04             	shl    $0x4,%eax
f010eef8:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eefb:	01 d8                	add    %ebx,%eax
f010eefd:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010ef02:	8b 00                	mov    (%eax),%eax
f010ef04:	85 c0                	test   %eax,%eax
f010ef06:	74 18                	je     f010ef20 <test_find_block+0x117>
f010ef08:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f010ef0d:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010ef13:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ef16:	c1 e1 04             	shl    $0x4,%ecx
f010ef19:	01 ca                	add    %ecx,%edx
f010ef1b:	89 50 04             	mov    %edx,0x4(%eax)
f010ef1e:	eb 13                	jmp    f010ef33 <test_find_block+0x12a>
f010ef20:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ef26:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef29:	c1 e2 04             	shl    $0x4,%edx
f010ef2c:	01 d0                	add    %edx,%eax
f010ef2e:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f010ef33:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ef39:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef3c:	c1 e2 04             	shl    $0x4,%edx
f010ef3f:	01 d0                	add    %edx,%eax
f010ef41:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f010ef46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef49:	c1 e0 04             	shl    $0x4,%eax
f010ef4c:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ef4f:	01 f0                	add    %esi,%eax
f010ef51:	2d 98 00 00 00       	sub    $0x98,%eax
f010ef56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ef5c:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010ef61:	40                   	inc    %eax
f010ef62:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
f010ef67:	e9 8c 00 00 00       	jmp    f010eff8 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010ef6c:	a1 cc 1c 88 f0       	mov    0xf0881ccc,%eax
f010ef71:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef74:	c1 e2 04             	shl    $0x4,%edx
f010ef77:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ef7a:	01 fa                	add    %edi,%edx
f010ef7c:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010ef82:	89 02                	mov    %eax,(%edx)
f010ef84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef87:	c1 e0 04             	shl    $0x4,%eax
f010ef8a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ef8d:	01 d8                	add    %ebx,%eax
f010ef8f:	2d 98 00 00 00       	sub    $0x98,%eax
f010ef94:	8b 00                	mov    (%eax),%eax
f010ef96:	85 c0                	test   %eax,%eax
f010ef98:	74 17                	je     f010efb1 <test_find_block+0x1a8>
f010ef9a:	a1 cc 1c 88 f0       	mov    0xf0881ccc,%eax
f010ef9f:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010efa5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010efa8:	c1 e1 04             	shl    $0x4,%ecx
f010efab:	01 ca                	add    %ecx,%edx
f010efad:	89 10                	mov    %edx,(%eax)
f010efaf:	eb 13                	jmp    f010efc4 <test_find_block+0x1bb>
f010efb1:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010efb7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efba:	c1 e2 04             	shl    $0x4,%edx
f010efbd:	01 d0                	add    %edx,%eax
f010efbf:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f010efc4:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010efca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010efcd:	c1 e2 04             	shl    $0x4,%edx
f010efd0:	01 d0                	add    %edx,%eax
f010efd2:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f010efd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010efda:	c1 e0 04             	shl    $0x4,%eax
f010efdd:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010efe0:	01 f0                	add    %esi,%eax
f010efe2:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010efe7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010efed:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010eff2:	40                   	inc    %eax
f010eff3:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010eff8:	ff 45 e4             	incl   -0x1c(%ebp)
f010effb:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010efff:	0f 8e 97 fe ff ff    	jle    f010ee9c <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f005:	83 ec 08             	sub    $0x8,%esp
f010f008:	68 00 10 00 00       	push   $0x1000
f010f00d:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010f012:	e8 bd 30 02 00       	call   f01320d4 <find_block>
f010f017:	83 c4 10             	add    $0x10,%esp
f010f01a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f01d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f021:	74 17                	je     f010f03a <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f023:	83 ec 04             	sub    $0x4,%esp
f010f026:	68 24 82 13 f0       	push   $0xf0138224
f010f02b:	68 de 00 00 00       	push   $0xde
f010f030:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f035:	e8 cb 11 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f03a:	83 ec 08             	sub    $0x8,%esp
f010f03d:	6a 00                	push   $0x0
f010f03f:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010f044:	e8 8b 30 02 00       	call   f01320d4 <find_block>
f010f049:	83 c4 10             	add    $0x10,%esp
f010f04c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f04f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f053:	74 17                	je     f010f06c <test_find_block+0x263>
f010f055:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f058:	8b 40 0c             	mov    0xc(%eax),%eax
f010f05b:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f060:	75 0a                	jne    f010f06c <test_find_block+0x263>
f010f062:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f065:	8b 40 08             	mov    0x8(%eax),%eax
f010f068:	85 c0                	test   %eax,%eax
f010f06a:	74 17                	je     f010f083 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f06c:	83 ec 04             	sub    $0x4,%esp
f010f06f:	68 88 82 13 f0       	push   $0xf0138288
f010f074:	68 e3 00 00 00       	push   $0xe3
f010f079:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f07e:	e8 82 11 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f083:	83 ec 08             	sub    $0x8,%esp
f010f086:	68 00 70 00 00       	push   $0x7000
f010f08b:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010f090:	e8 3f 30 02 00       	call   f01320d4 <find_block>
f010f095:	83 c4 10             	add    $0x10,%esp
f010f098:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f09b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f09f:	74 1a                	je     f010f0bb <test_find_block+0x2b2>
f010f0a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f0a4:	8b 40 0c             	mov    0xc(%eax),%eax
f010f0a7:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f0ac:	75 0d                	jne    f010f0bb <test_find_block+0x2b2>
f010f0ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f0b1:	8b 40 08             	mov    0x8(%eax),%eax
f010f0b4:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f0b9:	74 17                	je     f010f0d2 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f0bb:	83 ec 04             	sub    $0x4,%esp
f010f0be:	68 88 82 13 f0       	push   $0xf0138288
f010f0c3:	68 e8 00 00 00       	push   $0xe8
f010f0c8:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f0cd:	e8 33 11 ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f0d2:	83 ec 08             	sub    $0x8,%esp
f010f0d5:	68 00 a4 01 00       	push   $0x1a400
f010f0da:	68 c8 1c 88 f0       	push   $0xf0881cc8
f010f0df:	e8 f0 2f 02 00       	call   f01320d4 <find_block>
f010f0e4:	83 c4 10             	add    $0x10,%esp
f010f0e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f0ea:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f0ee:	74 1a                	je     f010f10a <test_find_block+0x301>
f010f0f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f0f3:	8b 40 0c             	mov    0xc(%eax),%eax
f010f0f6:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f0fb:	75 0d                	jne    f010f10a <test_find_block+0x301>
f010f0fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f100:	8b 40 08             	mov    0x8(%eax),%eax
f010f103:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f108:	74 17                	je     f010f121 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f10a:	83 ec 04             	sub    $0x4,%esp
f010f10d:	68 88 82 13 f0       	push   $0xf0138288
f010f112:	68 ed 00 00 00       	push   $0xed
f010f117:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f11c:	e8 e4 10 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f121:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f126:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f129:	75 09                	jne    f010f134 <test_find_block+0x32b>
f010f12b:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f130:	85 c0                	test   %eax,%eax
f010f132:	74 17                	je     f010f14b <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f134:	83 ec 04             	sub    $0x4,%esp
f010f137:	68 bc 82 13 f0       	push   $0xf01382bc
f010f13c:	68 f2 00 00 00       	push   $0xf2
f010f141:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f146:	e8 ba 10 ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f14b:	83 ec 0c             	sub    $0xc,%esp
f010f14e:	68 20 83 13 f0       	push   $0xf0138320
f010f153:	e8 b6 1b ff ff       	call   f0100d0e <cprintf>
f010f158:	83 c4 10             	add    $0x10,%esp
}
f010f15b:	90                   	nop
f010f15c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f15f:	5b                   	pop    %ebx
f010f160:	5e                   	pop    %esi
f010f161:	5f                   	pop    %edi
f010f162:	5d                   	pop    %ebp
f010f163:	c3                   	ret    

f010f164 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f164:	55                   	push   %ebp
f010f165:	89 e5                	mov    %esp,%ebp
f010f167:	57                   	push   %edi
f010f168:	56                   	push   %esi
f010f169:	53                   	push   %ebx
f010f16a:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f170:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f177:	83 ec 0c             	sub    $0xc,%esp
f010f17a:	ff 75 e0             	pushl  -0x20(%ebp)
f010f17d:	e8 75 2e 02 00       	call   f0131ff7 <initialize_MemBlocksList>
f010f182:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f185:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010f18c:	00 00 00 
f010f18f:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010f196:	00 00 00 
f010f199:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010f1a0:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f1a3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f1a6:	bb 00 86 13 f0       	mov    $0xf0138600,%ebx
f010f1ab:	ba 08 00 00 00       	mov    $0x8,%edx
f010f1b0:	89 c7                	mov    %eax,%edi
f010f1b2:	89 de                	mov    %ebx,%esi
f010f1b4:	89 d1                	mov    %edx,%ecx
f010f1b6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f1b8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f1bb:	bb 20 86 13 f0       	mov    $0xf0138620,%ebx
f010f1c0:	ba 08 00 00 00       	mov    $0x8,%edx
f010f1c5:	89 c7                	mov    %eax,%edi
f010f1c7:	89 de                	mov    %ebx,%esi
f010f1c9:	89 d1                	mov    %edx,%ecx
f010f1cb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f1cd:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010f1d4:	00 00 00 
f010f1d7:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010f1de:	00 00 00 
f010f1e1:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010f1e8:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f1eb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f1f2:	e9 5f 01 00 00       	jmp    f010f356 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f1f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f1fa:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f1fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f201:	c1 e2 04             	shl    $0x4,%edx
f010f204:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f207:	01 da                	add    %ebx,%edx
f010f209:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f20f:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f211:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f214:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f218:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f21b:	c1 e2 04             	shl    $0x4,%edx
f010f21e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f221:	01 f2                	add    %esi,%edx
f010f223:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f229:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f22b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f22f:	0f 85 92 00 00 00    	jne    f010f2c7 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f235:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010f23a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f23d:	c1 e2 04             	shl    $0x4,%edx
f010f240:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f243:	01 fa                	add    %edi,%edx
f010f245:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f24b:	89 02                	mov    %eax,(%edx)
f010f24d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f250:	c1 e0 04             	shl    $0x4,%eax
f010f253:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f256:	01 d8                	add    %ebx,%eax
f010f258:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f25d:	8b 00                	mov    (%eax),%eax
f010f25f:	85 c0                	test   %eax,%eax
f010f261:	74 18                	je     f010f27b <test_alloc_block_FF+0x117>
f010f263:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010f268:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f26e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f271:	c1 e1 04             	shl    $0x4,%ecx
f010f274:	01 ca                	add    %ecx,%edx
f010f276:	89 50 04             	mov    %edx,0x4(%eax)
f010f279:	eb 13                	jmp    f010f28e <test_alloc_block_FF+0x12a>
f010f27b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f281:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f284:	c1 e2 04             	shl    $0x4,%edx
f010f287:	01 d0                	add    %edx,%eax
f010f289:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010f28e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f294:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f297:	c1 e2 04             	shl    $0x4,%edx
f010f29a:	01 d0                	add    %edx,%eax
f010f29c:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010f2a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f2a4:	c1 e0 04             	shl    $0x4,%eax
f010f2a7:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f2aa:	01 f0                	add    %esi,%eax
f010f2ac:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f2b1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f2b7:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f2bc:	40                   	inc    %eax
f010f2bd:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
f010f2c2:	e9 8c 00 00 00       	jmp    f010f353 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f2c7:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010f2cc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f2cf:	c1 e2 04             	shl    $0x4,%edx
f010f2d2:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f2d5:	01 fa                	add    %edi,%edx
f010f2d7:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f2dd:	89 02                	mov    %eax,(%edx)
f010f2df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f2e2:	c1 e0 04             	shl    $0x4,%eax
f010f2e5:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f2e8:	01 d8                	add    %ebx,%eax
f010f2ea:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f2ef:	8b 00                	mov    (%eax),%eax
f010f2f1:	85 c0                	test   %eax,%eax
f010f2f3:	74 17                	je     f010f30c <test_alloc_block_FF+0x1a8>
f010f2f5:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010f2fa:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f300:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f303:	c1 e1 04             	shl    $0x4,%ecx
f010f306:	01 ca                	add    %ecx,%edx
f010f308:	89 10                	mov    %edx,(%eax)
f010f30a:	eb 13                	jmp    f010f31f <test_alloc_block_FF+0x1bb>
f010f30c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f312:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f315:	c1 e2 04             	shl    $0x4,%edx
f010f318:	01 d0                	add    %edx,%eax
f010f31a:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010f31f:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f325:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f328:	c1 e2 04             	shl    $0x4,%edx
f010f32b:	01 d0                	add    %edx,%eax
f010f32d:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010f332:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f335:	c1 e0 04             	shl    $0x4,%eax
f010f338:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f33b:	01 f0                	add    %esi,%eax
f010f33d:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f342:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f348:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f34d:	40                   	inc    %eax
f010f34e:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f353:	ff 45 e4             	incl   -0x1c(%ebp)
f010f356:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f35a:	0f 8e 97 fe ff ff    	jle    f010f1f7 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f360:	83 ec 0c             	sub    $0xc,%esp
f010f363:	68 00 00 30 00       	push   $0x300000
f010f368:	e8 4c 30 02 00       	call   f01323b9 <alloc_block_FF>
f010f36d:	83 c4 10             	add    $0x10,%esp
f010f370:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f373:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f377:	74 17                	je     f010f390 <test_alloc_block_FF+0x22c>
f010f379:	83 ec 04             	sub    $0x4,%esp
f010f37c:	68 8c 83 13 f0       	push   $0xf013838c
f010f381:	68 15 01 00 00       	push   $0x115
f010f386:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f38b:	e8 75 0e ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f390:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f395:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f398:	75 13                	jne    f010f3ad <test_alloc_block_FF+0x249>
f010f39a:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f39f:	83 f8 08             	cmp    $0x8,%eax
f010f3a2:	75 09                	jne    f010f3ad <test_alloc_block_FF+0x249>
f010f3a4:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f3a9:	85 c0                	test   %eax,%eax
f010f3ab:	74 17                	je     f010f3c4 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f3ad:	83 ec 04             	sub    $0x4,%esp
f010f3b0:	68 00 84 13 f0       	push   $0xf0138400
f010f3b5:	68 19 01 00 00       	push   $0x119
f010f3ba:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f3bf:	e8 41 0e ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f3c4:	83 ec 0c             	sub    $0xc,%esp
f010f3c7:	68 00 24 00 00       	push   $0x2400
f010f3cc:	e8 e8 2f 02 00       	call   f01323b9 <alloc_block_FF>
f010f3d1:	83 c4 10             	add    $0x10,%esp
f010f3d4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f3d7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f3db:	74 1a                	je     f010f3f7 <test_alloc_block_FF+0x293>
f010f3dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f3e0:	8b 40 0c             	mov    0xc(%eax),%eax
f010f3e3:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f3e8:	75 0d                	jne    f010f3f7 <test_alloc_block_FF+0x293>
f010f3ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f3ed:	8b 40 08             	mov    0x8(%eax),%eax
f010f3f0:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f3f5:	74 17                	je     f010f40e <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f3f7:	83 ec 04             	sub    $0x4,%esp
f010f3fa:	68 78 84 13 f0       	push   $0xf0138478
f010f3ff:	68 21 01 00 00       	push   $0x121
f010f404:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f409:	e8 f7 0d ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f40e:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f413:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f416:	75 13                	jne    f010f42b <test_alloc_block_FF+0x2c7>
f010f418:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f41d:	83 f8 07             	cmp    $0x7,%eax
f010f420:	75 09                	jne    f010f42b <test_alloc_block_FF+0x2c7>
f010f422:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f427:	85 c0                	test   %eax,%eax
f010f429:	74 17                	je     f010f442 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f42b:	83 ec 04             	sub    $0x4,%esp
f010f42e:	68 bc 84 13 f0       	push   $0xf01384bc
f010f433:	68 25 01 00 00       	push   $0x125
f010f438:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f43d:	e8 c3 0d ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f442:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f449:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f44c:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f453:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f45a:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f461:	83 ec 0c             	sub    $0xc,%esp
f010f464:	ff 75 d8             	pushl  -0x28(%ebp)
f010f467:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f46d:	50                   	push   %eax
f010f46e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f471:	50                   	push   %eax
f010f472:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f475:	50                   	push   %eax
f010f476:	68 64 1d 88 f0       	push   $0xf0881d64
f010f47b:	e8 5b 1c 00 00       	call   f01110db <check_list_data>
f010f480:	83 c4 20             	add    $0x20,%esp
f010f483:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f486:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f48a:	74 17                	je     f010f4a3 <test_alloc_block_FF+0x33f>
f010f48c:	83 ec 04             	sub    $0x4,%esp
f010f48f:	68 20 85 13 f0       	push   $0xf0138520
f010f494:	68 2d 01 00 00       	push   $0x12d
f010f499:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f49e:	e8 62 0d ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f4a3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f4a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f4ac:	74 17                	je     f010f4c5 <test_alloc_block_FF+0x361>
f010f4ae:	83 ec 04             	sub    $0x4,%esp
f010f4b1:	68 6c 85 13 f0       	push   $0xf013856c
f010f4b6:	68 2e 01 00 00       	push   $0x12e
f010f4bb:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f4c0:	e8 40 0d ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010f4c5:	83 ec 0c             	sub    $0xc,%esp
f010f4c8:	68 00 00 10 00       	push   $0x100000
f010f4cd:	e8 e7 2e 02 00       	call   f01323b9 <alloc_block_FF>
f010f4d2:	83 c4 10             	add    $0x10,%esp
f010f4d5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f4d8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f4dc:	74 1a                	je     f010f4f8 <test_alloc_block_FF+0x394>
f010f4de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4e1:	8b 40 0c             	mov    0xc(%eax),%eax
f010f4e4:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f4e9:	75 0d                	jne    f010f4f8 <test_alloc_block_FF+0x394>
f010f4eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f4ee:	8b 40 08             	mov    0x8(%eax),%eax
f010f4f1:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f4f6:	74 17                	je     f010f50f <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f4f8:	83 ec 04             	sub    $0x4,%esp
f010f4fb:	68 78 84 13 f0       	push   $0xf0138478
f010f500:	68 36 01 00 00       	push   $0x136
f010f505:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f50a:	e8 f6 0c ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f50f:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f514:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f517:	4a                   	dec    %edx
f010f518:	39 d0                	cmp    %edx,%eax
f010f51a:	75 13                	jne    f010f52f <test_alloc_block_FF+0x3cb>
f010f51c:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f521:	83 f8 07             	cmp    $0x7,%eax
f010f524:	75 09                	jne    f010f52f <test_alloc_block_FF+0x3cb>
f010f526:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f52b:	85 c0                	test   %eax,%eax
f010f52d:	74 17                	je     f010f546 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f52f:	83 ec 04             	sub    $0x4,%esp
f010f532:	68 bc 84 13 f0       	push   $0xf01384bc
f010f537:	68 3a 01 00 00       	push   $0x13a
f010f53c:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f541:	e8 bf 0c ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f546:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f54d:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010f550:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f557:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f55e:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f565:	83 ec 0c             	sub    $0xc,%esp
f010f568:	ff 75 d8             	pushl  -0x28(%ebp)
f010f56b:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f571:	50                   	push   %eax
f010f572:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f575:	50                   	push   %eax
f010f576:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f579:	50                   	push   %eax
f010f57a:	68 64 1d 88 f0       	push   $0xf0881d64
f010f57f:	e8 57 1b 00 00       	call   f01110db <check_list_data>
f010f584:	83 c4 20             	add    $0x20,%esp
f010f587:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f58a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f58e:	74 17                	je     f010f5a7 <test_alloc_block_FF+0x443>
f010f590:	83 ec 04             	sub    $0x4,%esp
f010f593:	68 20 85 13 f0       	push   $0xf0138520
f010f598:	68 42 01 00 00       	push   $0x142
f010f59d:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f5a2:	e8 5e 0c ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010f5a7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f5ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f5b0:	74 17                	je     f010f5c9 <test_alloc_block_FF+0x465>
f010f5b2:	83 ec 04             	sub    $0x4,%esp
f010f5b5:	68 6c 85 13 f0       	push   $0xf013856c
f010f5ba:	68 43 01 00 00       	push   $0x143
f010f5bf:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f5c4:	e8 3c 0c ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010f5c9:	83 ec 0c             	sub    $0xc,%esp
f010f5cc:	68 b8 85 13 f0       	push   $0xf01385b8
f010f5d1:	e8 38 17 ff ff       	call   f0100d0e <cprintf>
f010f5d6:	83 c4 10             	add    $0x10,%esp
}
f010f5d9:	90                   	nop
f010f5da:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f5dd:	5b                   	pop    %ebx
f010f5de:	5e                   	pop    %esi
f010f5df:	5f                   	pop    %edi
f010f5e0:	5d                   	pop    %ebp
f010f5e1:	c3                   	ret    

f010f5e2 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f5e2:	55                   	push   %ebp
f010f5e3:	89 e5                	mov    %esp,%ebp
f010f5e5:	57                   	push   %edi
f010f5e6:	56                   	push   %esi
f010f5e7:	53                   	push   %ebx
f010f5e8:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010f5ee:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f5f5:	83 ec 0c             	sub    $0xc,%esp
f010f5f8:	ff 75 e0             	pushl  -0x20(%ebp)
f010f5fb:	e8 f7 29 02 00       	call   f0131ff7 <initialize_MemBlocksList>
f010f600:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f603:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010f60a:	00 00 00 
f010f60d:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010f614:	00 00 00 
f010f617:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010f61e:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010f621:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f624:	bb 34 88 13 f0       	mov    $0xf0138834,%ebx
f010f629:	ba 07 00 00 00       	mov    $0x7,%edx
f010f62e:	89 c7                	mov    %eax,%edi
f010f630:	89 de                	mov    %ebx,%esi
f010f632:	89 d1                	mov    %edx,%ecx
f010f634:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010f636:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f639:	bb 50 88 13 f0       	mov    $0xf0138850,%ebx
f010f63e:	ba 07 00 00 00       	mov    $0x7,%edx
f010f643:	89 c7                	mov    %eax,%edi
f010f645:	89 de                	mov    %ebx,%esi
f010f647:	89 d1                	mov    %edx,%ecx
f010f649:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f64b:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010f652:	00 00 00 
f010f655:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010f65c:	00 00 00 
f010f65f:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010f666:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f669:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f670:	e9 5f 01 00 00       	jmp    f010f7d4 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f675:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f678:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010f67c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f67f:	c1 e2 04             	shl    $0x4,%edx
f010f682:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f685:	01 da                	add    %ebx,%edx
f010f687:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010f68d:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f68f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f692:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010f696:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f699:	c1 e2 04             	shl    $0x4,%edx
f010f69c:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f69f:	01 f2                	add    %esi,%edx
f010f6a1:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010f6a7:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f6a9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f6ad:	0f 85 92 00 00 00    	jne    f010f745 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f6b3:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010f6b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f6bb:	c1 e2 04             	shl    $0x4,%edx
f010f6be:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f6c1:	01 fa                	add    %edi,%edx
f010f6c3:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010f6c9:	89 02                	mov    %eax,(%edx)
f010f6cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f6ce:	c1 e0 04             	shl    $0x4,%eax
f010f6d1:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f6d4:	01 d8                	add    %ebx,%eax
f010f6d6:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f6db:	8b 00                	mov    (%eax),%eax
f010f6dd:	85 c0                	test   %eax,%eax
f010f6df:	74 18                	je     f010f6f9 <test_alloc_block_BF+0x117>
f010f6e1:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010f6e6:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f6ec:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f6ef:	c1 e1 04             	shl    $0x4,%ecx
f010f6f2:	01 ca                	add    %ecx,%edx
f010f6f4:	89 50 04             	mov    %edx,0x4(%eax)
f010f6f7:	eb 13                	jmp    f010f70c <test_alloc_block_BF+0x12a>
f010f6f9:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f6ff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f702:	c1 e2 04             	shl    $0x4,%edx
f010f705:	01 d0                	add    %edx,%eax
f010f707:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010f70c:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f712:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f715:	c1 e2 04             	shl    $0x4,%edx
f010f718:	01 d0                	add    %edx,%eax
f010f71a:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010f71f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f722:	c1 e0 04             	shl    $0x4,%eax
f010f725:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f728:	01 f0                	add    %esi,%eax
f010f72a:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f72f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f735:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f73a:	40                   	inc    %eax
f010f73b:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
f010f740:	e9 8c 00 00 00       	jmp    f010f7d1 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f745:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010f74a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f74d:	c1 e2 04             	shl    $0x4,%edx
f010f750:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f753:	01 fa                	add    %edi,%edx
f010f755:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010f75b:	89 02                	mov    %eax,(%edx)
f010f75d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f760:	c1 e0 04             	shl    $0x4,%eax
f010f763:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f766:	01 d8                	add    %ebx,%eax
f010f768:	2d b8 00 00 00       	sub    $0xb8,%eax
f010f76d:	8b 00                	mov    (%eax),%eax
f010f76f:	85 c0                	test   %eax,%eax
f010f771:	74 17                	je     f010f78a <test_alloc_block_BF+0x1a8>
f010f773:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010f778:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010f77e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f781:	c1 e1 04             	shl    $0x4,%ecx
f010f784:	01 ca                	add    %ecx,%edx
f010f786:	89 10                	mov    %edx,(%eax)
f010f788:	eb 13                	jmp    f010f79d <test_alloc_block_BF+0x1bb>
f010f78a:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f790:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f793:	c1 e2 04             	shl    $0x4,%edx
f010f796:	01 d0                	add    %edx,%eax
f010f798:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010f79d:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010f7a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7a6:	c1 e2 04             	shl    $0x4,%edx
f010f7a9:	01 d0                	add    %edx,%eax
f010f7ab:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010f7b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7b3:	c1 e0 04             	shl    $0x4,%eax
f010f7b6:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f7b9:	01 f0                	add    %esi,%eax
f010f7bb:	2d bc 00 00 00       	sub    $0xbc,%eax
f010f7c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f7c6:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f7cb:	40                   	inc    %eax
f010f7cc:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010f7d1:	ff 45 e4             	incl   -0x1c(%ebp)
f010f7d4:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010f7d8:	0f 8e 97 fe ff ff    	jle    f010f675 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010f7de:	83 ec 0c             	sub    $0xc,%esp
f010f7e1:	68 00 00 40 00       	push   $0x400000
f010f7e6:	e8 9b 2d 02 00       	call   f0132586 <alloc_block_BF>
f010f7eb:	83 c4 10             	add    $0x10,%esp
f010f7ee:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010f7f1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f7f5:	74 17                	je     f010f80e <test_alloc_block_BF+0x22c>
f010f7f7:	83 ec 04             	sub    $0x4,%esp
f010f7fa:	68 40 86 13 f0       	push   $0xf0138640
f010f7ff:	68 66 01 00 00       	push   $0x166
f010f804:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f809:	e8 f7 09 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f80e:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f813:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f816:	75 13                	jne    f010f82b <test_alloc_block_BF+0x249>
f010f818:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f81d:	83 f8 07             	cmp    $0x7,%eax
f010f820:	75 09                	jne    f010f82b <test_alloc_block_BF+0x249>
f010f822:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f827:	85 c0                	test   %eax,%eax
f010f829:	74 17                	je     f010f842 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f82b:	83 ec 04             	sub    $0x4,%esp
f010f82e:	68 00 84 13 f0       	push   $0xf0138400
f010f833:	68 6a 01 00 00       	push   $0x16a
f010f838:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f83d:	e8 c3 09 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f842:	83 ec 0c             	sub    $0xc,%esp
f010f845:	68 00 00 10 00       	push   $0x100000
f010f84a:	e8 37 2d 02 00       	call   f0132586 <alloc_block_BF>
f010f84f:	83 c4 10             	add    $0x10,%esp
f010f852:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010f855:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f859:	74 1a                	je     f010f875 <test_alloc_block_BF+0x293>
f010f85b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f85e:	8b 40 0c             	mov    0xc(%eax),%eax
f010f861:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f866:	75 0d                	jne    f010f875 <test_alloc_block_BF+0x293>
f010f868:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f86b:	8b 40 08             	mov    0x8(%eax),%eax
f010f86e:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f873:	74 17                	je     f010f88c <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f875:	83 ec 04             	sub    $0x4,%esp
f010f878:	68 b4 86 13 f0       	push   $0xf01386b4
f010f87d:	68 72 01 00 00       	push   $0x172
f010f882:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f887:	e8 79 09 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f88c:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f891:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f894:	75 13                	jne    f010f8a9 <test_alloc_block_BF+0x2c7>
f010f896:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f89b:	83 f8 06             	cmp    $0x6,%eax
f010f89e:	75 09                	jne    f010f8a9 <test_alloc_block_BF+0x2c7>
f010f8a0:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f8a5:	85 c0                	test   %eax,%eax
f010f8a7:	74 17                	je     f010f8c0 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f8a9:	83 ec 04             	sub    $0x4,%esp
f010f8ac:	68 f8 86 13 f0       	push   $0xf01386f8
f010f8b1:	68 76 01 00 00       	push   $0x176
f010f8b6:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f8bb:	e8 45 09 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f8c0:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f8c7:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f8ca:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f8d1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f8d8:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f8df:	83 ec 0c             	sub    $0xc,%esp
f010f8e2:	ff 75 d8             	pushl  -0x28(%ebp)
f010f8e5:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f8eb:	50                   	push   %eax
f010f8ec:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f8ef:	50                   	push   %eax
f010f8f0:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f8f3:	50                   	push   %eax
f010f8f4:	68 64 1d 88 f0       	push   $0xf0881d64
f010f8f9:	e8 dd 17 00 00       	call   f01110db <check_list_data>
f010f8fe:	83 c4 20             	add    $0x20,%esp
f010f901:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f904:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f908:	74 17                	je     f010f921 <test_alloc_block_BF+0x33f>
f010f90a:	83 ec 04             	sub    $0x4,%esp
f010f90d:	68 5c 87 13 f0       	push   $0xf013875c
f010f912:	68 7e 01 00 00       	push   $0x17e
f010f917:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f91c:	e8 e4 08 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f921:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f927:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f92a:	74 17                	je     f010f943 <test_alloc_block_BF+0x361>
f010f92c:	83 ec 04             	sub    $0x4,%esp
f010f92f:	68 a8 87 13 f0       	push   $0xf01387a8
f010f934:	68 7f 01 00 00       	push   $0x17f
f010f939:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f93e:	e8 c2 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f943:	83 ec 0c             	sub    $0xc,%esp
f010f946:	68 00 00 10 00       	push   $0x100000
f010f94b:	e8 36 2c 02 00       	call   f0132586 <alloc_block_BF>
f010f950:	83 c4 10             	add    $0x10,%esp
f010f953:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f956:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f95a:	74 1a                	je     f010f976 <test_alloc_block_BF+0x394>
f010f95c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f95f:	8b 40 0c             	mov    0xc(%eax),%eax
f010f962:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f967:	75 0d                	jne    f010f976 <test_alloc_block_BF+0x394>
f010f969:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f96c:	8b 40 08             	mov    0x8(%eax),%eax
f010f96f:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f974:	74 17                	je     f010f98d <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f976:	83 ec 04             	sub    $0x4,%esp
f010f979:	68 b4 86 13 f0       	push   $0xf01386b4
f010f97e:	68 87 01 00 00       	push   $0x187
f010f983:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f988:	e8 78 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f98d:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010f992:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f995:	4a                   	dec    %edx
f010f996:	39 d0                	cmp    %edx,%eax
f010f998:	75 13                	jne    f010f9ad <test_alloc_block_BF+0x3cb>
f010f99a:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010f99f:	83 f8 06             	cmp    $0x6,%eax
f010f9a2:	75 09                	jne    f010f9ad <test_alloc_block_BF+0x3cb>
f010f9a4:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010f9a9:	85 c0                	test   %eax,%eax
f010f9ab:	74 17                	je     f010f9c4 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f9ad:	83 ec 04             	sub    $0x4,%esp
f010f9b0:	68 f8 86 13 f0       	push   $0xf01386f8
f010f9b5:	68 8b 01 00 00       	push   $0x18b
f010f9ba:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f9bf:	e8 41 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f9c4:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f9cb:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f9ce:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f9d5:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f9dc:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9e3:	83 ec 0c             	sub    $0xc,%esp
f010f9e6:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9e9:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f9ef:	50                   	push   %eax
f010f9f0:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f9f3:	50                   	push   %eax
f010f9f4:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f9f7:	50                   	push   %eax
f010f9f8:	68 64 1d 88 f0       	push   $0xf0881d64
f010f9fd:	e8 d9 16 00 00       	call   f01110db <check_list_data>
f010fa02:	83 c4 20             	add    $0x20,%esp
f010fa05:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fa08:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa0c:	74 17                	je     f010fa25 <test_alloc_block_BF+0x443>
f010fa0e:	83 ec 04             	sub    $0x4,%esp
f010fa11:	68 5c 87 13 f0       	push   $0xf013875c
f010fa16:	68 93 01 00 00       	push   $0x193
f010fa1b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fa20:	e8 e0 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa25:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fa2b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa2e:	74 17                	je     f010fa47 <test_alloc_block_BF+0x465>
f010fa30:	83 ec 04             	sub    $0x4,%esp
f010fa33:	68 a8 87 13 f0       	push   $0xf01387a8
f010fa38:	68 94 01 00 00       	push   $0x194
f010fa3d:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fa42:	e8 be 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010fa47:	83 ec 0c             	sub    $0xc,%esp
f010fa4a:	68 00 0c 00 00       	push   $0xc00
f010fa4f:	e8 32 2b 02 00       	call   f0132586 <alloc_block_BF>
f010fa54:	83 c4 10             	add    $0x10,%esp
f010fa57:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010fa5a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa5e:	74 1a                	je     f010fa7a <test_alloc_block_BF+0x498>
f010fa60:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa63:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa66:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fa6b:	75 0d                	jne    f010fa7a <test_alloc_block_BF+0x498>
f010fa6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa70:	8b 40 08             	mov    0x8(%eax),%eax
f010fa73:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010fa78:	74 17                	je     f010fa91 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fa7a:	83 ec 04             	sub    $0x4,%esp
f010fa7d:	68 b4 86 13 f0       	push   $0xf01386b4
f010fa82:	68 9c 01 00 00       	push   $0x19c
f010fa87:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fa8c:	e8 74 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa91:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010fa96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fa99:	83 ea 02             	sub    $0x2,%edx
f010fa9c:	39 d0                	cmp    %edx,%eax
f010fa9e:	75 13                	jne    f010fab3 <test_alloc_block_BF+0x4d1>
f010faa0:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010faa5:	83 f8 06             	cmp    $0x6,%eax
f010faa8:	75 09                	jne    f010fab3 <test_alloc_block_BF+0x4d1>
f010faaa:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010faaf:	85 c0                	test   %eax,%eax
f010fab1:	74 17                	je     f010faca <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fab3:	83 ec 04             	sub    $0x4,%esp
f010fab6:	68 f8 86 13 f0       	push   $0xf01386f8
f010fabb:	68 a0 01 00 00       	push   $0x1a0
f010fac0:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fac5:	e8 3b 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010faca:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fad1:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010fad4:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010fadb:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010fae2:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fae9:	83 ec 0c             	sub    $0xc,%esp
f010faec:	ff 75 d8             	pushl  -0x28(%ebp)
f010faef:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010faf5:	50                   	push   %eax
f010faf6:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010faf9:	50                   	push   %eax
f010fafa:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fafd:	50                   	push   %eax
f010fafe:	68 64 1d 88 f0       	push   $0xf0881d64
f010fb03:	e8 d3 15 00 00       	call   f01110db <check_list_data>
f010fb08:	83 c4 20             	add    $0x20,%esp
f010fb0b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb0e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb12:	74 17                	je     f010fb2b <test_alloc_block_BF+0x549>
f010fb14:	83 ec 04             	sub    $0x4,%esp
f010fb17:	68 5c 87 13 f0       	push   $0xf013875c
f010fb1c:	68 a8 01 00 00       	push   $0x1a8
f010fb21:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fb26:	e8 da 06 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fb2b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fb31:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fb34:	74 17                	je     f010fb4d <test_alloc_block_BF+0x56b>
f010fb36:	83 ec 04             	sub    $0x4,%esp
f010fb39:	68 a8 87 13 f0       	push   $0xf01387a8
f010fb3e:	68 a9 01 00 00       	push   $0x1a9
f010fb43:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fb48:	e8 b8 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010fb4d:	83 ec 0c             	sub    $0xc,%esp
f010fb50:	68 00 08 00 00       	push   $0x800
f010fb55:	e8 2c 2a 02 00       	call   f0132586 <alloc_block_BF>
f010fb5a:	83 c4 10             	add    $0x10,%esp
f010fb5d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010fb60:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fb64:	74 17                	je     f010fb7d <test_alloc_block_BF+0x59b>
f010fb66:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb69:	8b 40 0c             	mov    0xc(%eax),%eax
f010fb6c:	3d 00 08 00 00       	cmp    $0x800,%eax
f010fb71:	75 0a                	jne    f010fb7d <test_alloc_block_BF+0x59b>
f010fb73:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb76:	8b 40 08             	mov    0x8(%eax),%eax
f010fb79:	85 c0                	test   %eax,%eax
f010fb7b:	74 17                	je     f010fb94 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fb7d:	83 ec 04             	sub    $0x4,%esp
f010fb80:	68 b4 86 13 f0       	push   $0xf01386b4
f010fb85:	68 b1 01 00 00       	push   $0x1b1
f010fb8a:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fb8f:	e8 71 06 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fb94:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010fb99:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fb9c:	83 ea 02             	sub    $0x2,%edx
f010fb9f:	39 d0                	cmp    %edx,%eax
f010fba1:	75 13                	jne    f010fbb6 <test_alloc_block_BF+0x5d4>
f010fba3:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010fba8:	83 f8 05             	cmp    $0x5,%eax
f010fbab:	75 09                	jne    f010fbb6 <test_alloc_block_BF+0x5d4>
f010fbad:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010fbb2:	85 c0                	test   %eax,%eax
f010fbb4:	74 17                	je     f010fbcd <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fbb6:	83 ec 04             	sub    $0x4,%esp
f010fbb9:	68 f8 86 13 f0       	push   $0xf01386f8
f010fbbe:	68 b5 01 00 00       	push   $0x1b5
f010fbc3:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fbc8:	e8 38 06 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fbcd:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fbd4:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010fbd7:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010fbde:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010fbe5:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fbec:	83 ec 0c             	sub    $0xc,%esp
f010fbef:	ff 75 d8             	pushl  -0x28(%ebp)
f010fbf2:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fbf8:	50                   	push   %eax
f010fbf9:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fbfc:	50                   	push   %eax
f010fbfd:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fc00:	50                   	push   %eax
f010fc01:	68 64 1d 88 f0       	push   $0xf0881d64
f010fc06:	e8 d0 14 00 00       	call   f01110db <check_list_data>
f010fc0b:	83 c4 20             	add    $0x20,%esp
f010fc0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc11:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fc15:	74 17                	je     f010fc2e <test_alloc_block_BF+0x64c>
f010fc17:	83 ec 04             	sub    $0x4,%esp
f010fc1a:	68 5c 87 13 f0       	push   $0xf013875c
f010fc1f:	68 bd 01 00 00       	push   $0x1bd
f010fc24:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fc29:	e8 d7 05 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fc2e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fc34:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fc37:	74 17                	je     f010fc50 <test_alloc_block_BF+0x66e>
f010fc39:	83 ec 04             	sub    $0x4,%esp
f010fc3c:	68 a8 87 13 f0       	push   $0xf01387a8
f010fc41:	68 be 01 00 00       	push   $0x1be
f010fc46:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fc4b:	e8 b5 05 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010fc50:	83 ec 0c             	sub    $0xc,%esp
f010fc53:	68 f4 87 13 f0       	push   $0xf01387f4
f010fc58:	e8 b1 10 ff ff       	call   f0100d0e <cprintf>
f010fc5d:	83 c4 10             	add    $0x10,%esp
}
f010fc60:	90                   	nop
f010fc61:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fc64:	5b                   	pop    %ebx
f010fc65:	5e                   	pop    %esi
f010fc66:	5f                   	pop    %edi
f010fc67:	5d                   	pop    %ebp
f010fc68:	c3                   	ret    

f010fc69 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010fc69:	55                   	push   %ebp
f010fc6a:	89 e5                	mov    %esp,%ebp
f010fc6c:	57                   	push   %edi
f010fc6d:	56                   	push   %esi
f010fc6e:	53                   	push   %ebx
f010fc6f:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010fc75:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fc7c:	83 ec 0c             	sub    $0xc,%esp
f010fc7f:	ff 75 e0             	pushl  -0x20(%ebp)
f010fc82:	e8 70 23 02 00       	call   f0131ff7 <initialize_MemBlocksList>
f010fc87:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fc8a:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f010fc91:	00 00 00 
f010fc94:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f010fc9b:	00 00 00 
f010fc9e:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f010fca5:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010fca8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fcab:	bb 00 86 13 f0       	mov    $0xf0138600,%ebx
f010fcb0:	ba 08 00 00 00       	mov    $0x8,%edx
f010fcb5:	89 c7                	mov    %eax,%edi
f010fcb7:	89 de                	mov    %ebx,%esi
f010fcb9:	89 d1                	mov    %edx,%ecx
f010fcbb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010fcbd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fcc0:	bb 60 8a 13 f0       	mov    $0xf0138a60,%ebx
f010fcc5:	ba 08 00 00 00       	mov    $0x8,%edx
f010fcca:	89 c7                	mov    %eax,%edi
f010fccc:	89 de                	mov    %ebx,%esi
f010fcce:	89 d1                	mov    %edx,%ecx
f010fcd0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fcd2:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f010fcd9:	00 00 00 
f010fcdc:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f010fce3:	00 00 00 
f010fce6:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f010fced:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fcf0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fcf7:	e9 5f 01 00 00       	jmp    f010fe5b <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fcfc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcff:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010fd03:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd06:	c1 e2 04             	shl    $0x4,%edx
f010fd09:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fd0c:	01 da                	add    %ebx,%edx
f010fd0e:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010fd14:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fd16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd19:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010fd1d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd20:	c1 e2 04             	shl    $0x4,%edx
f010fd23:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fd26:	01 f2                	add    %esi,%edx
f010fd28:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010fd2e:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010fd30:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fd34:	0f 85 92 00 00 00    	jne    f010fdcc <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fd3a:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010fd3f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd42:	c1 e2 04             	shl    $0x4,%edx
f010fd45:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fd48:	01 fa                	add    %edi,%edx
f010fd4a:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010fd50:	89 02                	mov    %eax,(%edx)
f010fd52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd55:	c1 e0 04             	shl    $0x4,%eax
f010fd58:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fd5b:	01 d8                	add    %ebx,%eax
f010fd5d:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fd62:	8b 00                	mov    (%eax),%eax
f010fd64:	85 c0                	test   %eax,%eax
f010fd66:	74 18                	je     f010fd80 <test_alloc_block_NF+0x117>
f010fd68:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f010fd6d:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fd73:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fd76:	c1 e1 04             	shl    $0x4,%ecx
f010fd79:	01 ca                	add    %ecx,%edx
f010fd7b:	89 50 04             	mov    %edx,0x4(%eax)
f010fd7e:	eb 13                	jmp    f010fd93 <test_alloc_block_NF+0x12a>
f010fd80:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fd86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd89:	c1 e2 04             	shl    $0x4,%edx
f010fd8c:	01 d0                	add    %edx,%eax
f010fd8e:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010fd93:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fd99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd9c:	c1 e2 04             	shl    $0x4,%edx
f010fd9f:	01 d0                	add    %edx,%eax
f010fda1:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010fda6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fda9:	c1 e0 04             	shl    $0x4,%eax
f010fdac:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fdaf:	01 f0                	add    %esi,%eax
f010fdb1:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fdb6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fdbc:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010fdc1:	40                   	inc    %eax
f010fdc2:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
f010fdc7:	e9 8c 00 00 00       	jmp    f010fe58 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fdcc:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010fdd1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fdd4:	c1 e2 04             	shl    $0x4,%edx
f010fdd7:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fdda:	01 fa                	add    %edi,%edx
f010fddc:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010fde2:	89 02                	mov    %eax,(%edx)
f010fde4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fde7:	c1 e0 04             	shl    $0x4,%eax
f010fdea:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fded:	01 d8                	add    %ebx,%eax
f010fdef:	2d d0 00 00 00       	sub    $0xd0,%eax
f010fdf4:	8b 00                	mov    (%eax),%eax
f010fdf6:	85 c0                	test   %eax,%eax
f010fdf8:	74 17                	je     f010fe11 <test_alloc_block_NF+0x1a8>
f010fdfa:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f010fdff:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010fe05:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fe08:	c1 e1 04             	shl    $0x4,%ecx
f010fe0b:	01 ca                	add    %ecx,%edx
f010fe0d:	89 10                	mov    %edx,(%eax)
f010fe0f:	eb 13                	jmp    f010fe24 <test_alloc_block_NF+0x1bb>
f010fe11:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fe17:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe1a:	c1 e2 04             	shl    $0x4,%edx
f010fe1d:	01 d0                	add    %edx,%eax
f010fe1f:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f010fe24:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fe2a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fe2d:	c1 e2 04             	shl    $0x4,%edx
f010fe30:	01 d0                	add    %edx,%eax
f010fe32:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f010fe37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe3a:	c1 e0 04             	shl    $0x4,%eax
f010fe3d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fe40:	01 f0                	add    %esi,%eax
f010fe42:	2d d4 00 00 00       	sub    $0xd4,%eax
f010fe47:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fe4d:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010fe52:	40                   	inc    %eax
f010fe53:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010fe58:	ff 45 e4             	incl   -0x1c(%ebp)
f010fe5b:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010fe5f:	0f 8e 97 fe ff ff    	jle    f010fcfc <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010fe65:	83 ec 0c             	sub    $0xc,%esp
f010fe68:	68 00 00 a0 00       	push   $0xa00000
f010fe6d:	e8 25 29 02 00       	call   f0132797 <alloc_block_NF>
f010fe72:	83 c4 10             	add    $0x10,%esp
f010fe75:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010fe78:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fe7c:	74 17                	je     f010fe95 <test_alloc_block_NF+0x22c>
f010fe7e:	83 ec 04             	sub    $0x4,%esp
f010fe81:	68 6c 88 13 f0       	push   $0xf013886c
f010fe86:	68 e1 01 00 00       	push   $0x1e1
f010fe8b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fe90:	e8 70 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fe95:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010fe9a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fe9d:	75 13                	jne    f010feb2 <test_alloc_block_NF+0x249>
f010fe9f:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010fea4:	83 f8 08             	cmp    $0x8,%eax
f010fea7:	75 09                	jne    f010feb2 <test_alloc_block_NF+0x249>
f010fea9:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010feae:	85 c0                	test   %eax,%eax
f010feb0:	74 17                	je     f010fec9 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010feb2:	83 ec 04             	sub    $0x4,%esp
f010feb5:	68 00 84 13 f0       	push   $0xf0138400
f010feba:	68 e5 01 00 00       	push   $0x1e5
f010febf:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fec4:	e8 3c 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010fec9:	83 ec 0c             	sub    $0xc,%esp
f010fecc:	68 00 28 00 00       	push   $0x2800
f010fed1:	e8 c1 28 02 00       	call   f0132797 <alloc_block_NF>
f010fed6:	83 c4 10             	add    $0x10,%esp
f010fed9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010fedc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fee0:	74 1a                	je     f010fefc <test_alloc_block_NF+0x293>
f010fee2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fee5:	8b 40 0c             	mov    0xc(%eax),%eax
f010fee8:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010feed:	75 0d                	jne    f010fefc <test_alloc_block_NF+0x293>
f010feef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fef2:	8b 40 08             	mov    0x8(%eax),%eax
f010fef5:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010fefa:	74 17                	je     f010ff13 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fefc:	83 ec 04             	sub    $0x4,%esp
f010feff:	68 e0 88 13 f0       	push   $0xf01388e0
f010ff04:	68 ed 01 00 00       	push   $0x1ed
f010ff09:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ff0e:	e8 f2 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ff13:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f010ff18:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ff1b:	75 13                	jne    f010ff30 <test_alloc_block_NF+0x2c7>
f010ff1d:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f010ff22:	83 f8 07             	cmp    $0x7,%eax
f010ff25:	75 09                	jne    f010ff30 <test_alloc_block_NF+0x2c7>
f010ff27:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f010ff2c:	85 c0                	test   %eax,%eax
f010ff2e:	74 17                	je     f010ff47 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff30:	83 ec 04             	sub    $0x4,%esp
f010ff33:	68 24 89 13 f0       	push   $0xf0138924
f010ff38:	68 f1 01 00 00       	push   $0x1f1
f010ff3d:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ff42:	e8 be 02 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010ff47:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ff4e:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010ff51:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010ff58:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010ff5f:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ff66:	83 ec 0c             	sub    $0xc,%esp
f010ff69:	ff 75 d8             	pushl  -0x28(%ebp)
f010ff6c:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ff72:	50                   	push   %eax
f010ff73:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ff76:	50                   	push   %eax
f010ff77:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ff7a:	50                   	push   %eax
f010ff7b:	68 64 1d 88 f0       	push   $0xf0881d64
f010ff80:	e8 56 11 00 00       	call   f01110db <check_list_data>
f010ff85:	83 c4 20             	add    $0x20,%esp
f010ff88:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ff8b:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ff8f:	74 17                	je     f010ffa8 <test_alloc_block_NF+0x33f>
f010ff91:	83 ec 04             	sub    $0x4,%esp
f010ff94:	68 88 89 13 f0       	push   $0xf0138988
f010ff99:	68 f9 01 00 00       	push   $0x1f9
f010ff9e:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ffa3:	e8 5d 02 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ffa8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ffae:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ffb1:	74 17                	je     f010ffca <test_alloc_block_NF+0x361>
f010ffb3:	83 ec 04             	sub    $0x4,%esp
f010ffb6:	68 d4 89 13 f0       	push   $0xf01389d4
f010ffbb:	68 fa 01 00 00       	push   $0x1fa
f010ffc0:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ffc5:	e8 3b 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010ffca:	83 ec 0c             	sub    $0xc,%esp
f010ffcd:	68 00 00 20 00       	push   $0x200000
f010ffd2:	e8 c0 27 02 00       	call   f0132797 <alloc_block_NF>
f010ffd7:	83 c4 10             	add    $0x10,%esp
f010ffda:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010ffdd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ffe1:	74 1a                	je     f010fffd <test_alloc_block_NF+0x394>
f010ffe3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffe6:	8b 40 0c             	mov    0xc(%eax),%eax
f010ffe9:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010ffee:	75 0d                	jne    f010fffd <test_alloc_block_NF+0x394>
f010fff0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fff3:	8b 40 08             	mov    0x8(%eax),%eax
f010fff6:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fffb:	74 17                	je     f0110014 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fffd:	83 ec 04             	sub    $0x4,%esp
f0110000:	68 e0 88 13 f0       	push   $0xf01388e0
f0110005:	68 03 02 00 00       	push   $0x203
f011000a:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011000f:	e8 f1 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110014:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110019:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011001c:	75 13                	jne    f0110031 <test_alloc_block_NF+0x3c8>
f011001e:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110023:	83 f8 06             	cmp    $0x6,%eax
f0110026:	75 09                	jne    f0110031 <test_alloc_block_NF+0x3c8>
f0110028:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f011002d:	85 c0                	test   %eax,%eax
f011002f:	74 17                	je     f0110048 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110031:	83 ec 04             	sub    $0x4,%esp
f0110034:	68 24 89 13 f0       	push   $0xf0138924
f0110039:	68 07 02 00 00       	push   $0x207
f011003e:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110043:	e8 bd 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110048:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011004f:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110052:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f0110059:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f0110060:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110067:	83 ec 0c             	sub    $0xc,%esp
f011006a:	ff 75 d8             	pushl  -0x28(%ebp)
f011006d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110073:	50                   	push   %eax
f0110074:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110077:	50                   	push   %eax
f0110078:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011007b:	50                   	push   %eax
f011007c:	68 64 1d 88 f0       	push   $0xf0881d64
f0110081:	e8 55 10 00 00       	call   f01110db <check_list_data>
f0110086:	83 c4 20             	add    $0x20,%esp
f0110089:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f011008c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110090:	74 17                	je     f01100a9 <test_alloc_block_NF+0x440>
f0110092:	83 ec 04             	sub    $0x4,%esp
f0110095:	68 88 89 13 f0       	push   $0xf0138988
f011009a:	68 0f 02 00 00       	push   $0x20f
f011009f:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01100a4:	e8 5c 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01100a9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01100af:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01100b2:	74 17                	je     f01100cb <test_alloc_block_NF+0x462>
f01100b4:	83 ec 04             	sub    $0x4,%esp
f01100b7:	68 d4 89 13 f0       	push   $0xf01389d4
f01100bc:	68 10 02 00 00       	push   $0x210
f01100c1:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01100c6:	e8 3a 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f01100cb:	83 ec 0c             	sub    $0xc,%esp
f01100ce:	68 00 00 08 00       	push   $0x80000
f01100d3:	e8 bf 26 02 00       	call   f0132797 <alloc_block_NF>
f01100d8:	83 c4 10             	add    $0x10,%esp
f01100db:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f01100de:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01100e2:	74 1a                	je     f01100fe <test_alloc_block_NF+0x495>
f01100e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100e7:	8b 40 0c             	mov    0xc(%eax),%eax
f01100ea:	3d 00 00 08 00       	cmp    $0x80000,%eax
f01100ef:	75 0d                	jne    f01100fe <test_alloc_block_NF+0x495>
f01100f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100f4:	8b 40 08             	mov    0x8(%eax),%eax
f01100f7:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f01100fc:	74 17                	je     f0110115 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f01100fe:	83 ec 04             	sub    $0x4,%esp
f0110101:	68 e0 88 13 f0       	push   $0xf01388e0
f0110106:	68 19 02 00 00       	push   $0x219
f011010b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110110:	e8 f0 00 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110115:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f011011a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011011d:	4a                   	dec    %edx
f011011e:	39 d0                	cmp    %edx,%eax
f0110120:	75 13                	jne    f0110135 <test_alloc_block_NF+0x4cc>
f0110122:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110127:	83 f8 06             	cmp    $0x6,%eax
f011012a:	75 09                	jne    f0110135 <test_alloc_block_NF+0x4cc>
f011012c:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110131:	85 c0                	test   %eax,%eax
f0110133:	74 17                	je     f011014c <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110135:	83 ec 04             	sub    $0x4,%esp
f0110138:	68 24 89 13 f0       	push   $0xf0138924
f011013d:	68 1d 02 00 00       	push   $0x21d
f0110142:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110147:	e8 b9 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011014c:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110153:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110156:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f011015d:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f0110164:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011016b:	83 ec 0c             	sub    $0xc,%esp
f011016e:	ff 75 d8             	pushl  -0x28(%ebp)
f0110171:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110177:	50                   	push   %eax
f0110178:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011017b:	50                   	push   %eax
f011017c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011017f:	50                   	push   %eax
f0110180:	68 64 1d 88 f0       	push   $0xf0881d64
f0110185:	e8 51 0f 00 00       	call   f01110db <check_list_data>
f011018a:	83 c4 20             	add    $0x20,%esp
f011018d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110190:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110194:	74 17                	je     f01101ad <test_alloc_block_NF+0x544>
f0110196:	83 ec 04             	sub    $0x4,%esp
f0110199:	68 88 89 13 f0       	push   $0xf0138988
f011019e:	68 25 02 00 00       	push   $0x225
f01101a3:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01101a8:	e8 58 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01101ad:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01101b3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01101b6:	74 17                	je     f01101cf <test_alloc_block_NF+0x566>
f01101b8:	83 ec 04             	sub    $0x4,%esp
f01101bb:	68 d4 89 13 f0       	push   $0xf01389d4
f01101c0:	68 26 02 00 00       	push   $0x226
f01101c5:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01101ca:	e8 36 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f01101cf:	83 ec 0c             	sub    $0xc,%esp
f01101d2:	68 00 fc 07 00       	push   $0x7fc00
f01101d7:	e8 bb 25 02 00       	call   f0132797 <alloc_block_NF>
f01101dc:	83 c4 10             	add    $0x10,%esp
f01101df:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f01101e2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01101e6:	74 1a                	je     f0110202 <test_alloc_block_NF+0x599>
f01101e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01101eb:	8b 40 0c             	mov    0xc(%eax),%eax
f01101ee:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f01101f3:	75 0d                	jne    f0110202 <test_alloc_block_NF+0x599>
f01101f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01101f8:	8b 40 08             	mov    0x8(%eax),%eax
f01101fb:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f0110200:	74 17                	je     f0110219 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110202:	83 ec 04             	sub    $0x4,%esp
f0110205:	68 e0 88 13 f0       	push   $0xf01388e0
f011020a:	68 2f 02 00 00       	push   $0x22f
f011020f:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110214:	e8 ec ff fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110219:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f011021e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110221:	83 ea 02             	sub    $0x2,%edx
f0110224:	39 d0                	cmp    %edx,%eax
f0110226:	75 13                	jne    f011023b <test_alloc_block_NF+0x5d2>
f0110228:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f011022d:	83 f8 06             	cmp    $0x6,%eax
f0110230:	75 09                	jne    f011023b <test_alloc_block_NF+0x5d2>
f0110232:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110237:	85 c0                	test   %eax,%eax
f0110239:	74 17                	je     f0110252 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011023b:	83 ec 04             	sub    $0x4,%esp
f011023e:	68 24 89 13 f0       	push   $0xf0138924
f0110243:	68 33 02 00 00       	push   $0x233
f0110248:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011024d:	e8 b3 ff fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110252:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110259:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f011025c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f0110263:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f011026a:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110271:	83 ec 0c             	sub    $0xc,%esp
f0110274:	ff 75 d8             	pushl  -0x28(%ebp)
f0110277:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011027d:	50                   	push   %eax
f011027e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110281:	50                   	push   %eax
f0110282:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110285:	50                   	push   %eax
f0110286:	68 64 1d 88 f0       	push   $0xf0881d64
f011028b:	e8 4b 0e 00 00       	call   f01110db <check_list_data>
f0110290:	83 c4 20             	add    $0x20,%esp
f0110293:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110296:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011029a:	74 17                	je     f01102b3 <test_alloc_block_NF+0x64a>
f011029c:	83 ec 04             	sub    $0x4,%esp
f011029f:	68 88 89 13 f0       	push   $0xf0138988
f01102a4:	68 3b 02 00 00       	push   $0x23b
f01102a9:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01102ae:	e8 52 ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01102b3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01102b9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01102bc:	74 17                	je     f01102d5 <test_alloc_block_NF+0x66c>
f01102be:	83 ec 04             	sub    $0x4,%esp
f01102c1:	68 d4 89 13 f0       	push   $0xf01389d4
f01102c6:	68 3c 02 00 00       	push   $0x23c
f01102cb:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01102d0:	e8 30 ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f01102d5:	83 ec 0c             	sub    $0xc,%esp
f01102d8:	68 00 0c 00 00       	push   $0xc00
f01102dd:	e8 b5 24 02 00       	call   f0132797 <alloc_block_NF>
f01102e2:	83 c4 10             	add    $0x10,%esp
f01102e5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f01102e8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01102ec:	74 17                	je     f0110305 <test_alloc_block_NF+0x69c>
f01102ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01102f1:	8b 40 0c             	mov    0xc(%eax),%eax
f01102f4:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f01102f9:	75 0a                	jne    f0110305 <test_alloc_block_NF+0x69c>
f01102fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01102fe:	8b 40 08             	mov    0x8(%eax),%eax
f0110301:	85 c0                	test   %eax,%eax
f0110303:	74 17                	je     f011031c <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110305:	83 ec 04             	sub    $0x4,%esp
f0110308:	68 e0 88 13 f0       	push   $0xf01388e0
f011030d:	68 45 02 00 00       	push   $0x245
f0110312:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110317:	e8 e9 fe fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011031c:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110321:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110324:	83 ea 02             	sub    $0x2,%edx
f0110327:	39 d0                	cmp    %edx,%eax
f0110329:	75 13                	jne    f011033e <test_alloc_block_NF+0x6d5>
f011032b:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110330:	83 f8 05             	cmp    $0x5,%eax
f0110333:	75 09                	jne    f011033e <test_alloc_block_NF+0x6d5>
f0110335:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f011033a:	85 c0                	test   %eax,%eax
f011033c:	74 17                	je     f0110355 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011033e:	83 ec 04             	sub    $0x4,%esp
f0110341:	68 24 89 13 f0       	push   $0xf0138924
f0110346:	68 49 02 00 00       	push   $0x249
f011034b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110350:	e8 b0 fe fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110355:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011035c:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f011035f:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f0110366:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f011036d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110374:	83 ec 0c             	sub    $0xc,%esp
f0110377:	ff 75 d8             	pushl  -0x28(%ebp)
f011037a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110380:	50                   	push   %eax
f0110381:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110384:	50                   	push   %eax
f0110385:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110388:	50                   	push   %eax
f0110389:	68 64 1d 88 f0       	push   $0xf0881d64
f011038e:	e8 48 0d 00 00       	call   f01110db <check_list_data>
f0110393:	83 c4 20             	add    $0x20,%esp
f0110396:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110399:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011039d:	74 17                	je     f01103b6 <test_alloc_block_NF+0x74d>
f011039f:	83 ec 04             	sub    $0x4,%esp
f01103a2:	68 88 89 13 f0       	push   $0xf0138988
f01103a7:	68 51 02 00 00       	push   $0x251
f01103ac:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01103b1:	e8 4f fe fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01103b6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01103bc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01103bf:	74 17                	je     f01103d8 <test_alloc_block_NF+0x76f>
f01103c1:	83 ec 04             	sub    $0x4,%esp
f01103c4:	68 d4 89 13 f0       	push   $0xf01389d4
f01103c9:	68 52 02 00 00       	push   $0x252
f01103ce:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01103d3:	e8 2d fe fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f01103d8:	83 ec 0c             	sub    $0xc,%esp
f01103db:	68 00 04 00 00       	push   $0x400
f01103e0:	e8 b2 23 02 00       	call   f0132797 <alloc_block_NF>
f01103e5:	83 c4 10             	add    $0x10,%esp
f01103e8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f01103eb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01103ef:	74 1a                	je     f011040b <test_alloc_block_NF+0x7a2>
f01103f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01103f4:	8b 40 0c             	mov    0xc(%eax),%eax
f01103f7:	3d 00 04 00 00       	cmp    $0x400,%eax
f01103fc:	75 0d                	jne    f011040b <test_alloc_block_NF+0x7a2>
f01103fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110401:	8b 40 08             	mov    0x8(%eax),%eax
f0110404:	3d 00 20 00 00       	cmp    $0x2000,%eax
f0110409:	74 17                	je     f0110422 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011040b:	83 ec 04             	sub    $0x4,%esp
f011040e:	68 e0 88 13 f0       	push   $0xf01388e0
f0110413:	68 5b 02 00 00       	push   $0x25b
f0110418:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011041d:	e8 e3 fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110422:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110427:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011042a:	83 ea 03             	sub    $0x3,%edx
f011042d:	39 d0                	cmp    %edx,%eax
f011042f:	75 13                	jne    f0110444 <test_alloc_block_NF+0x7db>
f0110431:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110436:	83 f8 05             	cmp    $0x5,%eax
f0110439:	75 09                	jne    f0110444 <test_alloc_block_NF+0x7db>
f011043b:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110440:	85 c0                	test   %eax,%eax
f0110442:	74 17                	je     f011045b <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110444:	83 ec 04             	sub    $0x4,%esp
f0110447:	68 24 89 13 f0       	push   $0xf0138924
f011044c:	68 5f 02 00 00       	push   $0x25f
f0110451:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110456:	e8 aa fd fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011045b:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110462:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f0110465:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f011046c:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f0110473:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011047a:	83 ec 0c             	sub    $0xc,%esp
f011047d:	ff 75 d8             	pushl  -0x28(%ebp)
f0110480:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110486:	50                   	push   %eax
f0110487:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011048a:	50                   	push   %eax
f011048b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011048e:	50                   	push   %eax
f011048f:	68 64 1d 88 f0       	push   $0xf0881d64
f0110494:	e8 42 0c 00 00       	call   f01110db <check_list_data>
f0110499:	83 c4 20             	add    $0x20,%esp
f011049c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f011049f:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01104a3:	74 17                	je     f01104bc <test_alloc_block_NF+0x853>
f01104a5:	83 ec 04             	sub    $0x4,%esp
f01104a8:	68 88 89 13 f0       	push   $0xf0138988
f01104ad:	68 67 02 00 00       	push   $0x267
f01104b2:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01104b7:	e8 49 fd fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f01104bc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01104c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01104c5:	74 17                	je     f01104de <test_alloc_block_NF+0x875>
f01104c7:	83 ec 04             	sub    $0x4,%esp
f01104ca:	68 d4 89 13 f0       	push   $0xf01389d4
f01104cf:	68 68 02 00 00       	push   $0x268
f01104d4:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01104d9:	e8 27 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f01104de:	83 ec 0c             	sub    $0xc,%esp
f01104e1:	68 20 8a 13 f0       	push   $0xf0138a20
f01104e6:	e8 23 08 ff ff       	call   f0100d0e <cprintf>
f01104eb:	83 c4 10             	add    $0x10,%esp

}
f01104ee:	90                   	nop
f01104ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01104f2:	5b                   	pop    %ebx
f01104f3:	5e                   	pop    %esi
f01104f4:	5f                   	pop    %edi
f01104f5:	5d                   	pop    %ebp
f01104f6:	c3                   	ret    

f01104f7 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f01104f7:	55                   	push   %ebp
f01104f8:	89 e5                	mov    %esp,%ebp
f01104fa:	57                   	push   %edi
f01104fb:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110501:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110508:	83 ec 0c             	sub    $0xc,%esp
f011050b:	ff 75 f4             	pushl  -0xc(%ebp)
f011050e:	e8 e4 1a 02 00       	call   f0131ff7 <initialize_MemBlocksList>
f0110513:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110516:	c7 05 c8 1c 88 f0 00 	movl   $0x0,0xf0881cc8
f011051d:	00 00 00 
f0110520:	c7 05 cc 1c 88 f0 00 	movl   $0x0,0xf0881ccc
f0110527:	00 00 00 
f011052a:	c7 05 d4 1c 88 f0 00 	movl   $0x0,0xf0881cd4
f0110531:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0110534:	c7 05 64 1d 88 f0 00 	movl   $0x0,0xf0881d64
f011053b:	00 00 00 
f011053e:	c7 05 68 1d 88 f0 00 	movl   $0x0,0xf0881d68
f0110545:	00 00 00 
f0110548:	c7 05 70 1d 88 f0 00 	movl   $0x0,0xf0881d70
f011054f:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f0110552:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0110555:	b9 0a 00 00 00       	mov    $0xa,%ecx
f011055a:	b8 00 00 00 00       	mov    $0x0,%eax
f011055f:	89 d7                	mov    %edx,%edi
f0110561:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f0110563:	8d 55 98             	lea    -0x68(%ebp),%edx
f0110566:	b9 0a 00 00 00       	mov    $0xa,%ecx
f011056b:	b8 00 00 00 00       	mov    $0x0,%eax
f0110570:	89 d7                	mov    %edx,%edi
f0110572:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f0110574:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f011057b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f0110582:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f0110589:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011058c:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f0110593:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110594:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110597:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f011059e:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011059f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105a2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01105a6:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f01105a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105ac:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01105b0:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f01105b3:	83 ec 0c             	sub    $0xc,%esp
f01105b6:	8d 45 84             	lea    -0x7c(%ebp),%eax
f01105b9:	50                   	push   %eax
f01105ba:	e8 a5 27 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f01105bf:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f01105c2:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01105c7:	85 c0                	test   %eax,%eax
f01105c9:	75 14                	jne    f01105df <test_insert_sorted_with_merge_freeList+0xe8>
f01105cb:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f01105d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01105d3:	75 0a                	jne    f01105df <test_insert_sorted_with_merge_freeList+0xe8>
f01105d5:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f01105da:	83 f8 01             	cmp    $0x1,%eax
f01105dd:	74 17                	je     f01105f6 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01105df:	83 ec 04             	sub    $0x4,%esp
f01105e2:	68 80 8a 13 f0       	push   $0xf0138a80
f01105e7:	68 88 02 00 00       	push   $0x288
f01105ec:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01105f1:	e8 0f fc fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f01105f6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f01105fd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110604:	83 ec 0c             	sub    $0xc,%esp
f0110607:	ff 75 f0             	pushl  -0x10(%ebp)
f011060a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011060d:	50                   	push   %eax
f011060e:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110611:	50                   	push   %eax
f0110612:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110615:	50                   	push   %eax
f0110616:	68 64 1d 88 f0       	push   $0xf0881d64
f011061b:	e8 bb 0a 00 00       	call   f01110db <check_list_data>
f0110620:	83 c4 20             	add    $0x20,%esp
f0110623:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110626:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011062a:	74 17                	je     f0110643 <test_insert_sorted_with_merge_freeList+0x14c>
f011062c:	83 ec 04             	sub    $0x4,%esp
f011062f:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110634:	68 8e 02 00 00       	push   $0x28e
f0110639:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011063e:	e8 c2 fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110643:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110646:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110649:	74 17                	je     f0110662 <test_insert_sorted_with_merge_freeList+0x16b>
f011064b:	83 ec 04             	sub    $0x4,%esp
f011064e:	68 40 8b 13 f0       	push   $0xf0138b40
f0110653:	68 8f 02 00 00       	push   $0x28f
f0110658:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011065d:	e8 a3 fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f0110662:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f0110669:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011066c:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110673:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110674:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110677:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f011067e:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011067f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110682:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110686:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f011068c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011068f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110693:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f0110696:	83 ec 0c             	sub    $0xc,%esp
f0110699:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f011069f:	50                   	push   %eax
f01106a0:	e8 bf 26 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f01106a5:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f01106a8:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01106ad:	85 c0                	test   %eax,%eax
f01106af:	75 14                	jne    f01106c5 <test_insert_sorted_with_merge_freeList+0x1ce>
f01106b1:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f01106b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01106b9:	75 0a                	jne    f01106c5 <test_insert_sorted_with_merge_freeList+0x1ce>
f01106bb:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f01106c0:	83 f8 02             	cmp    $0x2,%eax
f01106c3:	74 17                	je     f01106dc <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01106c5:	83 ec 04             	sub    $0x4,%esp
f01106c8:	68 80 8a 13 f0       	push   $0xf0138a80
f01106cd:	68 9e 02 00 00       	push   $0x29e
f01106d2:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01106d7:	e8 29 fb fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01106dc:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f01106e3:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01106ea:	83 ec 0c             	sub    $0xc,%esp
f01106ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01106f0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01106f3:	50                   	push   %eax
f01106f4:	8d 45 98             	lea    -0x68(%ebp),%eax
f01106f7:	50                   	push   %eax
f01106f8:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01106fb:	50                   	push   %eax
f01106fc:	68 64 1d 88 f0       	push   $0xf0881d64
f0110701:	e8 d5 09 00 00       	call   f01110db <check_list_data>
f0110706:	83 c4 20             	add    $0x20,%esp
f0110709:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011070c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110710:	74 17                	je     f0110729 <test_insert_sorted_with_merge_freeList+0x232>
f0110712:	83 ec 04             	sub    $0x4,%esp
f0110715:	68 ec 8a 13 f0       	push   $0xf0138aec
f011071a:	68 a4 02 00 00       	push   $0x2a4
f011071f:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110724:	e8 dc fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110729:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011072c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011072f:	74 17                	je     f0110748 <test_insert_sorted_with_merge_freeList+0x251>
f0110731:	83 ec 04             	sub    $0x4,%esp
f0110734:	68 40 8b 13 f0       	push   $0xf0138b40
f0110739:	68 a5 02 00 00       	push   $0x2a5
f011073e:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110743:	e8 bd fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f0110748:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f011074f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110752:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f0110759:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011075a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011075d:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110764:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110765:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110768:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011076c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110772:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110775:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110779:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f011077f:	83 ec 0c             	sub    $0xc,%esp
f0110782:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0110788:	50                   	push   %eax
f0110789:	e8 d6 25 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f011078e:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110791:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110796:	85 c0                	test   %eax,%eax
f0110798:	75 14                	jne    f01107ae <test_insert_sorted_with_merge_freeList+0x2b7>
f011079a:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f011079f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01107a2:	75 0a                	jne    f01107ae <test_insert_sorted_with_merge_freeList+0x2b7>
f01107a4:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f01107a9:	83 f8 03             	cmp    $0x3,%eax
f01107ac:	74 17                	je     f01107c5 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01107ae:	83 ec 04             	sub    $0x4,%esp
f01107b1:	68 80 8a 13 f0       	push   $0xf0138a80
f01107b6:	68 b4 02 00 00       	push   $0x2b4
f01107bb:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01107c0:	e8 40 fa fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01107c5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f01107cc:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01107d3:	83 ec 0c             	sub    $0xc,%esp
f01107d6:	ff 75 f0             	pushl  -0x10(%ebp)
f01107d9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107dc:	50                   	push   %eax
f01107dd:	8d 45 98             	lea    -0x68(%ebp),%eax
f01107e0:	50                   	push   %eax
f01107e1:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01107e4:	50                   	push   %eax
f01107e5:	68 64 1d 88 f0       	push   $0xf0881d64
f01107ea:	e8 ec 08 00 00       	call   f01110db <check_list_data>
f01107ef:	83 c4 20             	add    $0x20,%esp
f01107f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01107f5:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01107f9:	74 17                	je     f0110812 <test_insert_sorted_with_merge_freeList+0x31b>
f01107fb:	83 ec 04             	sub    $0x4,%esp
f01107fe:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110803:	68 ba 02 00 00       	push   $0x2ba
f0110808:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011080d:	e8 f3 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110812:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110815:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110818:	74 17                	je     f0110831 <test_insert_sorted_with_merge_freeList+0x33a>
f011081a:	83 ec 04             	sub    $0x4,%esp
f011081d:	68 40 8b 13 f0       	push   $0xf0138b40
f0110822:	68 bb 02 00 00       	push   $0x2bb
f0110827:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011082c:	e8 d4 f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110831:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110838:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011083b:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110842:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110843:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110846:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f011084d:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011084e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110851:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110855:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f011085b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011085e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110862:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f0110868:	83 ec 0c             	sub    $0xc,%esp
f011086b:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110871:	50                   	push   %eax
f0110872:	e8 ed 24 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f0110877:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011087a:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f011087f:	85 c0                	test   %eax,%eax
f0110881:	75 14                	jne    f0110897 <test_insert_sorted_with_merge_freeList+0x3a0>
f0110883:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110888:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011088b:	75 0a                	jne    f0110897 <test_insert_sorted_with_merge_freeList+0x3a0>
f011088d:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110892:	83 f8 04             	cmp    $0x4,%eax
f0110895:	74 17                	je     f01108ae <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110897:	83 ec 04             	sub    $0x4,%esp
f011089a:	68 80 8a 13 f0       	push   $0xf0138a80
f011089f:	68 ca 02 00 00       	push   $0x2ca
f01108a4:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01108a9:	e8 57 f9 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01108ae:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01108b5:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01108bc:	83 ec 0c             	sub    $0xc,%esp
f01108bf:	ff 75 f0             	pushl  -0x10(%ebp)
f01108c2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01108c5:	50                   	push   %eax
f01108c6:	8d 45 98             	lea    -0x68(%ebp),%eax
f01108c9:	50                   	push   %eax
f01108ca:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01108cd:	50                   	push   %eax
f01108ce:	68 64 1d 88 f0       	push   $0xf0881d64
f01108d3:	e8 03 08 00 00       	call   f01110db <check_list_data>
f01108d8:	83 c4 20             	add    $0x20,%esp
f01108db:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01108de:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01108e2:	74 17                	je     f01108fb <test_insert_sorted_with_merge_freeList+0x404>
f01108e4:	83 ec 04             	sub    $0x4,%esp
f01108e7:	68 ec 8a 13 f0       	push   $0xf0138aec
f01108ec:	68 d0 02 00 00       	push   $0x2d0
f01108f1:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01108f6:	e8 0a f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01108fb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01108fe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110901:	74 17                	je     f011091a <test_insert_sorted_with_merge_freeList+0x423>
f0110903:	83 ec 04             	sub    $0x4,%esp
f0110906:	68 40 8b 13 f0       	push   $0xf0138b40
f011090b:	68 d1 02 00 00       	push   $0x2d1
f0110910:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110915:	e8 eb f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f011091a:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110921:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110924:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f011092b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f011092c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011092f:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110936:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110937:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011093a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011093e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110944:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110947:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011094b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110951:	83 ec 0c             	sub    $0xc,%esp
f0110954:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f011095a:	50                   	push   %eax
f011095b:	e8 04 24 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f0110960:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110963:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110968:	85 c0                	test   %eax,%eax
f011096a:	75 17                	jne    f0110983 <test_insert_sorted_with_merge_freeList+0x48c>
f011096c:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110971:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110974:	42                   	inc    %edx
f0110975:	39 d0                	cmp    %edx,%eax
f0110977:	75 0a                	jne    f0110983 <test_insert_sorted_with_merge_freeList+0x48c>
f0110979:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f011097e:	83 f8 04             	cmp    $0x4,%eax
f0110981:	74 17                	je     f011099a <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110983:	83 ec 04             	sub    $0x4,%esp
f0110986:	68 80 8a 13 f0       	push   $0xf0138a80
f011098b:	68 e3 02 00 00       	push   $0x2e3
f0110990:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110995:	e8 6b f8 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011099a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01109a1:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f01109a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109ab:	8d 50 ff             	lea    -0x1(%eax),%edx
f01109ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109b1:	48                   	dec    %eax
f01109b2:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01109b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109b9:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01109bd:	01 c8                	add    %ecx,%eax
f01109bf:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01109c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109c6:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01109cd:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01109ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01109d1:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01109d8:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01109d9:	83 ec 0c             	sub    $0xc,%esp
f01109dc:	ff 75 f0             	pushl  -0x10(%ebp)
f01109df:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01109e2:	50                   	push   %eax
f01109e3:	8d 45 98             	lea    -0x68(%ebp),%eax
f01109e6:	50                   	push   %eax
f01109e7:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01109ea:	50                   	push   %eax
f01109eb:	68 64 1d 88 f0       	push   $0xf0881d64
f01109f0:	e8 e6 06 00 00       	call   f01110db <check_list_data>
f01109f5:	83 c4 20             	add    $0x20,%esp
f01109f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01109fb:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01109ff:	74 17                	je     f0110a18 <test_insert_sorted_with_merge_freeList+0x521>
f0110a01:	83 ec 04             	sub    $0x4,%esp
f0110a04:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110a09:	68 ec 02 00 00       	push   $0x2ec
f0110a0e:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110a13:	e8 ed f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110a18:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a1b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110a1e:	74 17                	je     f0110a37 <test_insert_sorted_with_merge_freeList+0x540>
f0110a20:	83 ec 04             	sub    $0x4,%esp
f0110a23:	68 40 8b 13 f0       	push   $0xf0138b40
f0110a28:	68 ed 02 00 00       	push   $0x2ed
f0110a2d:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110a32:	e8 ce f7 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110a37:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110a3e:	83 ec 0c             	sub    $0xc,%esp
f0110a41:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110a44:	50                   	push   %eax
f0110a45:	e8 5d 07 00 00       	call   f01111a7 <check_avaliable_list_data>
f0110a4a:	83 c4 10             	add    $0x10,%esp
f0110a4d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110a53:	8d 50 01             	lea    0x1(%eax),%edx
f0110a56:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110a59:	39 c2                	cmp    %eax,%edx
f0110a5b:	74 17                	je     f0110a74 <test_insert_sorted_with_merge_freeList+0x57d>
f0110a5d:	83 ec 04             	sub    $0x4,%esp
f0110a60:	68 94 8b 13 f0       	push   $0xf0138b94
f0110a65:	68 f2 02 00 00       	push   $0x2f2
f0110a6a:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110a6f:	e8 91 f7 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110a74:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110a78:	74 17                	je     f0110a91 <test_insert_sorted_with_merge_freeList+0x59a>
f0110a7a:	83 ec 04             	sub    $0x4,%esp
f0110a7d:	68 ec 8b 13 f0       	push   $0xf0138bec
f0110a82:	68 f3 02 00 00       	push   $0x2f3
f0110a87:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110a8c:	e8 74 f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0110a91:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0110a98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110a9b:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110aa2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110aa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110aa6:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110aad:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110aae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ab1:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ab5:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0110abb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110abe:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ac2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110ac8:	83 ec 0c             	sub    $0xc,%esp
f0110acb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0110ad1:	50                   	push   %eax
f0110ad2:	e8 8d 22 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f0110ad7:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110ada:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110adf:	85 c0                	test   %eax,%eax
f0110ae1:	75 19                	jne    f0110afc <test_insert_sorted_with_merge_freeList+0x605>
f0110ae3:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110ae8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110aeb:	83 c2 02             	add    $0x2,%edx
f0110aee:	39 d0                	cmp    %edx,%eax
f0110af0:	75 0a                	jne    f0110afc <test_insert_sorted_with_merge_freeList+0x605>
f0110af2:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110af7:	83 f8 04             	cmp    $0x4,%eax
f0110afa:	74 17                	je     f0110b13 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110afc:	83 ec 04             	sub    $0x4,%esp
f0110aff:	68 80 8a 13 f0       	push   $0xf0138a80
f0110b04:	68 05 03 00 00       	push   $0x305
f0110b09:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110b0e:	e8 f2 f6 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110b13:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110b1a:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110b21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b24:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110b27:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b2a:	48                   	dec    %eax
f0110b2b:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110b2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b32:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110b36:	01 c8                	add    %ecx,%eax
f0110b38:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110b3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b3f:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110b46:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110b47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b4a:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110b51:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110b52:	83 ec 0c             	sub    $0xc,%esp
f0110b55:	ff 75 f0             	pushl  -0x10(%ebp)
f0110b58:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b5b:	50                   	push   %eax
f0110b5c:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110b5f:	50                   	push   %eax
f0110b60:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110b63:	50                   	push   %eax
f0110b64:	68 64 1d 88 f0       	push   $0xf0881d64
f0110b69:	e8 6d 05 00 00       	call   f01110db <check_list_data>
f0110b6e:	83 c4 20             	add    $0x20,%esp
f0110b71:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b74:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110b78:	74 17                	je     f0110b91 <test_insert_sorted_with_merge_freeList+0x69a>
f0110b7a:	83 ec 04             	sub    $0x4,%esp
f0110b7d:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110b82:	68 0e 03 00 00       	push   $0x30e
f0110b87:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110b8c:	e8 74 f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110b91:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110b94:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110b97:	74 17                	je     f0110bb0 <test_insert_sorted_with_merge_freeList+0x6b9>
f0110b99:	83 ec 04             	sub    $0x4,%esp
f0110b9c:	68 40 8b 13 f0       	push   $0xf0138b40
f0110ba1:	68 0f 03 00 00       	push   $0x30f
f0110ba6:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110bab:	e8 55 f6 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110bb0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110bb7:	83 ec 0c             	sub    $0xc,%esp
f0110bba:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110bbd:	50                   	push   %eax
f0110bbe:	e8 e4 05 00 00       	call   f01111a7 <check_avaliable_list_data>
f0110bc3:	83 c4 10             	add    $0x10,%esp
f0110bc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110bc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110bcc:	8d 50 02             	lea    0x2(%eax),%edx
f0110bcf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110bd2:	39 c2                	cmp    %eax,%edx
f0110bd4:	74 17                	je     f0110bed <test_insert_sorted_with_merge_freeList+0x6f6>
f0110bd6:	83 ec 04             	sub    $0x4,%esp
f0110bd9:	68 94 8b 13 f0       	push   $0xf0138b94
f0110bde:	68 14 03 00 00       	push   $0x314
f0110be3:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110be8:	e8 18 f6 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110bed:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110bf1:	74 17                	je     f0110c0a <test_insert_sorted_with_merge_freeList+0x713>
f0110bf3:	83 ec 04             	sub    $0x4,%esp
f0110bf6:	68 ec 8b 13 f0       	push   $0xf0138bec
f0110bfb:	68 15 03 00 00       	push   $0x315
f0110c00:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110c05:	e8 fb f5 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0110c0a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c14:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110c1b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110c1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c1f:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110c26:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110c27:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c2a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110c2e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110c34:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c37:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110c3b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f0110c41:	83 ec 0c             	sub    $0xc,%esp
f0110c44:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0110c4a:	50                   	push   %eax
f0110c4b:	e8 14 21 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f0110c50:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110c53:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110c58:	85 c0                	test   %eax,%eax
f0110c5a:	75 19                	jne    f0110c75 <test_insert_sorted_with_merge_freeList+0x77e>
f0110c5c:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110c61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110c64:	83 c2 03             	add    $0x3,%edx
f0110c67:	39 d0                	cmp    %edx,%eax
f0110c69:	75 0a                	jne    f0110c75 <test_insert_sorted_with_merge_freeList+0x77e>
f0110c6b:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110c70:	83 f8 04             	cmp    $0x4,%eax
f0110c73:	74 17                	je     f0110c8c <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c75:	83 ec 04             	sub    $0x4,%esp
f0110c78:	68 80 8a 13 f0       	push   $0xf0138a80
f0110c7d:	68 28 03 00 00       	push   $0x328
f0110c82:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110c87:	e8 79 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c8c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110c93:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110c9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c9d:	8d 50 01             	lea    0x1(%eax),%edx
f0110ca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ca3:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ca7:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110cab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cae:	8d 50 01             	lea    0x1(%eax),%edx
f0110cb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cb4:	40                   	inc    %eax
f0110cb5:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110cb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cbc:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110cc0:	01 c8                	add    %ecx,%eax
f0110cc2:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110cc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cc9:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110cd0:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110cd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cd4:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110cdb:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110cdc:	83 ec 0c             	sub    $0xc,%esp
f0110cdf:	ff 75 f0             	pushl  -0x10(%ebp)
f0110ce2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ce5:	50                   	push   %eax
f0110ce6:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110ce9:	50                   	push   %eax
f0110cea:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110ced:	50                   	push   %eax
f0110cee:	68 64 1d 88 f0       	push   $0xf0881d64
f0110cf3:	e8 e3 03 00 00       	call   f01110db <check_list_data>
f0110cf8:	83 c4 20             	add    $0x20,%esp
f0110cfb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110cfe:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d02:	74 17                	je     f0110d1b <test_insert_sorted_with_merge_freeList+0x824>
f0110d04:	83 ec 04             	sub    $0x4,%esp
f0110d07:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110d0c:	68 32 03 00 00       	push   $0x332
f0110d11:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110d16:	e8 ea f4 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110d1b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d1e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110d21:	74 17                	je     f0110d3a <test_insert_sorted_with_merge_freeList+0x843>
f0110d23:	83 ec 04             	sub    $0x4,%esp
f0110d26:	68 40 8b 13 f0       	push   $0xf0138b40
f0110d2b:	68 33 03 00 00       	push   $0x333
f0110d30:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110d35:	e8 cb f4 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110d3a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110d41:	83 ec 0c             	sub    $0xc,%esp
f0110d44:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110d47:	50                   	push   %eax
f0110d48:	e8 5a 04 00 00       	call   f01111a7 <check_avaliable_list_data>
f0110d4d:	83 c4 10             	add    $0x10,%esp
f0110d50:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110d53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110d56:	8d 50 03             	lea    0x3(%eax),%edx
f0110d59:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d5c:	39 c2                	cmp    %eax,%edx
f0110d5e:	74 17                	je     f0110d77 <test_insert_sorted_with_merge_freeList+0x880>
f0110d60:	83 ec 04             	sub    $0x4,%esp
f0110d63:	68 94 8b 13 f0       	push   $0xf0138b94
f0110d68:	68 38 03 00 00       	push   $0x338
f0110d6d:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110d72:	e8 8e f4 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110d77:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d7b:	74 17                	je     f0110d94 <test_insert_sorted_with_merge_freeList+0x89d>
f0110d7d:	83 ec 04             	sub    $0x4,%esp
f0110d80:	68 ec 8b 13 f0       	push   $0xf0138bec
f0110d85:	68 39 03 00 00       	push   $0x339
f0110d8a:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110d8f:	e8 71 f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f0110d94:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0110d9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d9e:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110da5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110da6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110da9:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110db0:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110db1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110db4:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110db8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0110dbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dc1:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110dc5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0110dcb:	83 ec 0c             	sub    $0xc,%esp
f0110dce:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110dd4:	50                   	push   %eax
f0110dd5:	e8 8a 1f 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f0110dda:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110ddd:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110de2:	85 c0                	test   %eax,%eax
f0110de4:	75 19                	jne    f0110dff <test_insert_sorted_with_merge_freeList+0x908>
f0110de6:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110deb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110dee:	83 c2 04             	add    $0x4,%edx
f0110df1:	39 d0                	cmp    %edx,%eax
f0110df3:	75 0a                	jne    f0110dff <test_insert_sorted_with_merge_freeList+0x908>
f0110df5:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110dfa:	83 f8 04             	cmp    $0x4,%eax
f0110dfd:	74 17                	je     f0110e16 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110dff:	83 ec 04             	sub    $0x4,%esp
f0110e02:	68 80 8a 13 f0       	push   $0xf0138a80
f0110e07:	68 4c 03 00 00       	push   $0x34c
f0110e0c:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110e11:	e8 ef f3 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110e16:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110e1d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110e24:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e27:	8d 50 01             	lea    0x1(%eax),%edx
f0110e2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e2d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110e31:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110e35:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e38:	8d 50 01             	lea    0x1(%eax),%edx
f0110e3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e3e:	40                   	inc    %eax
f0110e3f:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110e43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e46:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110e4a:	01 c8                	add    %ecx,%eax
f0110e4c:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110e50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e53:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110e5a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110e5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e5e:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110e65:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110e66:	83 ec 0c             	sub    $0xc,%esp
f0110e69:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e6c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e6f:	50                   	push   %eax
f0110e70:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110e73:	50                   	push   %eax
f0110e74:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110e77:	50                   	push   %eax
f0110e78:	68 64 1d 88 f0       	push   $0xf0881d64
f0110e7d:	e8 59 02 00 00       	call   f01110db <check_list_data>
f0110e82:	83 c4 20             	add    $0x20,%esp
f0110e85:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110e88:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e8c:	74 17                	je     f0110ea5 <test_insert_sorted_with_merge_freeList+0x9ae>
f0110e8e:	83 ec 04             	sub    $0x4,%esp
f0110e91:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110e96:	68 56 03 00 00       	push   $0x356
f0110e9b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110ea0:	e8 60 f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110ea5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ea8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110eab:	74 17                	je     f0110ec4 <test_insert_sorted_with_merge_freeList+0x9cd>
f0110ead:	83 ec 04             	sub    $0x4,%esp
f0110eb0:	68 40 8b 13 f0       	push   $0xf0138b40
f0110eb5:	68 57 03 00 00       	push   $0x357
f0110eba:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110ebf:	e8 41 f3 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110ec4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110ecb:	83 ec 0c             	sub    $0xc,%esp
f0110ece:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ed1:	50                   	push   %eax
f0110ed2:	e8 d0 02 00 00       	call   f01111a7 <check_avaliable_list_data>
f0110ed7:	83 c4 10             	add    $0x10,%esp
f0110eda:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110edd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110ee0:	8d 50 04             	lea    0x4(%eax),%edx
f0110ee3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ee6:	39 c2                	cmp    %eax,%edx
f0110ee8:	74 17                	je     f0110f01 <test_insert_sorted_with_merge_freeList+0xa0a>
f0110eea:	83 ec 04             	sub    $0x4,%esp
f0110eed:	68 94 8b 13 f0       	push   $0xf0138b94
f0110ef2:	68 5c 03 00 00       	push   $0x35c
f0110ef7:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110efc:	e8 04 f3 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110f01:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110f05:	74 17                	je     f0110f1e <test_insert_sorted_with_merge_freeList+0xa27>
f0110f07:	83 ec 04             	sub    $0x4,%esp
f0110f0a:	68 ec 8b 13 f0       	push   $0xf0138bec
f0110f0f:	68 5d 03 00 00       	push   $0x35d
f0110f14:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110f19:	e8 e7 f2 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0110f1e:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0110f25:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f28:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0110f2f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0110f30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f33:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0110f3a:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110f3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f3e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110f42:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0110f48:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f4b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f4f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f0110f55:	83 ec 0c             	sub    $0xc,%esp
f0110f58:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110f5e:	50                   	push   %eax
f0110f5f:	e8 00 1e 02 00       	call   f0132d64 <insert_sorted_with_merge_freeList>
f0110f64:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110f67:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0110f6c:	85 c0                	test   %eax,%eax
f0110f6e:	75 19                	jne    f0110f89 <test_insert_sorted_with_merge_freeList+0xa92>
f0110f70:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0110f75:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110f78:	83 c2 06             	add    $0x6,%edx
f0110f7b:	39 d0                	cmp    %edx,%eax
f0110f7d:	75 0a                	jne    f0110f89 <test_insert_sorted_with_merge_freeList+0xa92>
f0110f7f:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0110f84:	83 f8 03             	cmp    $0x3,%eax
f0110f87:	74 17                	je     f0110fa0 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110f89:	83 ec 04             	sub    $0x4,%esp
f0110f8c:	68 80 8a 13 f0       	push   $0xf0138a80
f0110f91:	68 70 03 00 00       	push   $0x370
f0110f96:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110f9b:	e8 65 f2 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110fa0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110fa7:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0110fae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fb1:	48                   	dec    %eax
f0110fb2:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110fb9:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0110fba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fbd:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110fc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fc3:	48                   	dec    %eax
f0110fc4:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110fc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fcb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110fcf:	01 c1                	add    %eax,%ecx
f0110fd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fd4:	40                   	inc    %eax
f0110fd5:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110fd9:	01 c8                	add    %ecx,%eax
f0110fdb:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110fdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fe2:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110fe9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110fea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fed:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110ff4:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0110ff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ff8:	40                   	inc    %eax
f0110ff9:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111000:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0111001:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111004:	40                   	inc    %eax
f0111005:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011100c:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011100d:	83 ec 0c             	sub    $0xc,%esp
f0111010:	ff 75 f0             	pushl  -0x10(%ebp)
f0111013:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111016:	50                   	push   %eax
f0111017:	8d 45 98             	lea    -0x68(%ebp),%eax
f011101a:	50                   	push   %eax
f011101b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011101e:	50                   	push   %eax
f011101f:	68 64 1d 88 f0       	push   $0xf0881d64
f0111024:	e8 b2 00 00 00       	call   f01110db <check_list_data>
f0111029:	83 c4 20             	add    $0x20,%esp
f011102c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011102f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111033:	74 17                	je     f011104c <test_insert_sorted_with_merge_freeList+0xb55>
f0111035:	83 ec 04             	sub    $0x4,%esp
f0111038:	68 ec 8a 13 f0       	push   $0xf0138aec
f011103d:	68 7c 03 00 00       	push   $0x37c
f0111042:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111047:	e8 b9 f1 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011104c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011104f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111052:	74 17                	je     f011106b <test_insert_sorted_with_merge_freeList+0xb74>
f0111054:	83 ec 04             	sub    $0x4,%esp
f0111057:	68 40 8b 13 f0       	push   $0xf0138b40
f011105c:	68 7d 03 00 00       	push   $0x37d
f0111061:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111066:	e8 9a f1 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011106b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111072:	83 ec 0c             	sub    $0xc,%esp
f0111075:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111078:	50                   	push   %eax
f0111079:	e8 29 01 00 00       	call   f01111a7 <check_avaliable_list_data>
f011107e:	83 c4 10             	add    $0x10,%esp
f0111081:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0111084:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111087:	8d 50 06             	lea    0x6(%eax),%edx
f011108a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011108d:	39 c2                	cmp    %eax,%edx
f011108f:	74 17                	je     f01110a8 <test_insert_sorted_with_merge_freeList+0xbb1>
f0111091:	83 ec 04             	sub    $0x4,%esp
f0111094:	68 94 8b 13 f0       	push   $0xf0138b94
f0111099:	68 82 03 00 00       	push   $0x382
f011109e:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01110a3:	e8 5d f1 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01110a8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01110ac:	74 17                	je     f01110c5 <test_insert_sorted_with_merge_freeList+0xbce>
f01110ae:	83 ec 04             	sub    $0x4,%esp
f01110b1:	68 ec 8b 13 f0       	push   $0xf0138bec
f01110b6:	68 83 03 00 00       	push   $0x383
f01110bb:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01110c0:	e8 40 f1 fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f01110c5:	83 ec 0c             	sub    $0xc,%esp
f01110c8:	68 48 8c 13 f0       	push   $0xf0138c48
f01110cd:	e8 3c fc fe ff       	call   f0100d0e <cprintf>
f01110d2:	83 c4 10             	add    $0x10,%esp

}
f01110d5:	90                   	nop
f01110d6:	8b 7d fc             	mov    -0x4(%ebp),%edi
f01110d9:	c9                   	leave  
f01110da:	c3                   	ret    

f01110db <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f01110db:	55                   	push   %ebp
f01110dc:	89 e5                	mov    %esp,%ebp
f01110de:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01110e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01110e8:	8b 45 14             	mov    0x14(%ebp),%eax
f01110eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f01110f1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f01110f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01110fb:	8b 00                	mov    (%eax),%eax
f01110fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111100:	eb 6e                	jmp    f0111170 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0111102:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0111105:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111108:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011110f:	8b 45 10             	mov    0x10(%ebp),%eax
f0111112:	01 d0                	add    %edx,%eax
f0111114:	8b 00                	mov    (%eax),%eax
f0111116:	85 c0                	test   %eax,%eax
f0111118:	74 e8                	je     f0111102 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f011111a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011111d:	8b 50 08             	mov    0x8(%eax),%edx
f0111120:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111123:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011112a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011112d:	01 c8                	add    %ecx,%eax
f011112f:	8b 00                	mov    (%eax),%eax
f0111131:	39 c2                	cmp    %eax,%edx
f0111133:	75 1b                	jne    f0111150 <check_list_data+0x75>
f0111135:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111138:	8b 50 0c             	mov    0xc(%eax),%edx
f011113b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011113e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111145:	8b 45 10             	mov    0x10(%ebp),%eax
f0111148:	01 c8                	add    %ecx,%eax
f011114a:	8b 00                	mov    (%eax),%eax
f011114c:	39 c2                	cmp    %eax,%edx
f011114e:	74 07                	je     f0111157 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f0111150:	b8 00 00 00 00       	mov    $0x0,%eax
f0111155:	eb 4e                	jmp    f01111a5 <check_list_data+0xca>
		}
		(*size)++;
f0111157:	8b 45 14             	mov    0x14(%ebp),%eax
f011115a:	8b 00                	mov    (%eax),%eax
f011115c:	8d 50 01             	lea    0x1(%eax),%edx
f011115f:	8b 45 14             	mov    0x14(%ebp),%eax
f0111162:	89 10                	mov    %edx,(%eax)
		i++;
f0111164:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0111167:	8b 45 08             	mov    0x8(%ebp),%eax
f011116a:	8b 40 08             	mov    0x8(%eax),%eax
f011116d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111170:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111174:	74 07                	je     f011117d <check_list_data+0xa2>
f0111176:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111179:	8b 00                	mov    (%eax),%eax
f011117b:	eb 05                	jmp    f0111182 <check_list_data+0xa7>
f011117d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111182:	8b 55 08             	mov    0x8(%ebp),%edx
f0111185:	89 42 08             	mov    %eax,0x8(%edx)
f0111188:	8b 45 08             	mov    0x8(%ebp),%eax
f011118b:	8b 40 08             	mov    0x8(%eax),%eax
f011118e:	85 c0                	test   %eax,%eax
f0111190:	0f 85 6f ff ff ff    	jne    f0111105 <check_list_data+0x2a>
f0111196:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011119a:	0f 85 65 ff ff ff    	jne    f0111105 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f01111a0:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01111a5:	c9                   	leave  
f01111a6:	c3                   	ret    

f01111a7 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f01111a7:	55                   	push   %ebp
f01111a8:	89 e5                	mov    %esp,%ebp
f01111aa:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01111ad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01111b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01111b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f01111bd:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f01111c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01111c5:	eb 30                	jmp    f01111f7 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f01111c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01111ca:	8b 40 08             	mov    0x8(%eax),%eax
f01111cd:	85 c0                	test   %eax,%eax
f01111cf:	75 0a                	jne    f01111db <check_avaliable_list_data+0x34>
f01111d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01111d4:	8b 40 0c             	mov    0xc(%eax),%eax
f01111d7:	85 c0                	test   %eax,%eax
f01111d9:	74 07                	je     f01111e2 <check_avaliable_list_data+0x3b>
		{
			return 0;
f01111db:	b8 00 00 00 00       	mov    $0x0,%eax
f01111e0:	eb 40                	jmp    f0111222 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f01111e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01111e5:	8b 00                	mov    (%eax),%eax
f01111e7:	8d 50 01             	lea    0x1(%eax),%edx
f01111ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01111ed:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f01111ef:	a1 a0 1d 88 f0       	mov    0xf0881da0,%eax
f01111f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01111f7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01111fb:	74 07                	je     f0111204 <check_avaliable_list_data+0x5d>
f01111fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111200:	8b 00                	mov    (%eax),%eax
f0111202:	eb 05                	jmp    f0111209 <check_avaliable_list_data+0x62>
f0111204:	b8 00 00 00 00       	mov    $0x0,%eax
f0111209:	a3 a0 1d 88 f0       	mov    %eax,0xf0881da0
f011120e:	a1 a0 1d 88 f0       	mov    0xf0881da0,%eax
f0111213:	85 c0                	test   %eax,%eax
f0111215:	75 b0                	jne    f01111c7 <check_avaliable_list_data+0x20>
f0111217:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011121b:	75 aa                	jne    f01111c7 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f011121d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0111222:	c9                   	leave  
f0111223:	c3                   	ret    

f0111224 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0111224:	55                   	push   %ebp
f0111225:	89 e5                	mov    %esp,%ebp
f0111227:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f011122a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0111231:	8b 45 08             	mov    0x8(%ebp),%eax
f0111234:	8b 00                	mov    (%eax),%eax
f0111236:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111239:	eb 27                	jmp    f0111262 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f011123b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011123e:	8b 50 0c             	mov    0xc(%eax),%edx
f0111241:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111244:	8b 40 08             	mov    0x8(%eax),%eax
f0111247:	83 ec 04             	sub    $0x4,%esp
f011124a:	52                   	push   %edx
f011124b:	50                   	push   %eax
f011124c:	68 98 7f 13 f0       	push   $0xf0137f98
f0111251:	e8 b8 fa fe ff       	call   f0100d0e <cprintf>
f0111256:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0111259:	8b 45 08             	mov    0x8(%ebp),%eax
f011125c:	8b 40 08             	mov    0x8(%eax),%eax
f011125f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111262:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111266:	74 07                	je     f011126f <show_list_content+0x4b>
f0111268:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011126b:	8b 00                	mov    (%eax),%eax
f011126d:	eb 05                	jmp    f0111274 <show_list_content+0x50>
f011126f:	b8 00 00 00 00       	mov    $0x0,%eax
f0111274:	8b 55 08             	mov    0x8(%ebp),%edx
f0111277:	89 42 08             	mov    %eax,0x8(%edx)
f011127a:	8b 45 08             	mov    0x8(%ebp),%eax
f011127d:	8b 40 08             	mov    0x8(%eax),%eax
f0111280:	85 c0                	test   %eax,%eax
f0111282:	75 b7                	jne    f011123b <show_list_content+0x17>
f0111284:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111288:	75 b1                	jne    f011123b <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f011128a:	90                   	nop
f011128b:	c9                   	leave  
f011128c:	c3                   	ret    

f011128d <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f011128d:	55                   	push   %ebp
f011128e:	89 e5                	mov    %esp,%ebp
f0111290:	57                   	push   %edi
f0111291:	56                   	push   %esi
f0111292:	53                   	push   %ebx
f0111293:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111299:	83 ec 0c             	sub    $0xc,%esp
f011129c:	68 9c 8c 13 f0       	push   $0xf0138c9c
f01112a1:	e8 68 fa fe ff       	call   f0100d0e <cprintf>
f01112a6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01112a9:	83 ec 0c             	sub    $0xc,%esp
f01112ac:	68 c0 8c 13 f0       	push   $0xf0138cc0
f01112b1:	e8 58 fa fe ff       	call   f0100d0e <cprintf>
f01112b6:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f01112b9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f01112c0:	83 ec 0c             	sub    $0xc,%esp
f01112c3:	68 dc 8c 13 f0       	push   $0xf0138cdc
f01112c8:	e8 41 fa fe ff       	call   f0100d0e <cprintf>
f01112cd:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f01112d0:	8d 45 80             	lea    -0x80(%ebp),%eax
f01112d3:	bb 96 8d 13 f0       	mov    $0xf0138d96,%ebx
f01112d8:	ba 03 00 00 00       	mov    $0x3,%edx
f01112dd:	89 c7                	mov    %eax,%edi
f01112df:	89 de                	mov    %ebx,%esi
f01112e1:	89 d1                	mov    %edx,%ecx
f01112e3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01112e5:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01112e8:	b9 16 00 00 00       	mov    $0x16,%ecx
f01112ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01112f2:	89 d7                	mov    %edx,%edi
f01112f4:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f01112f6:	83 ec 0c             	sub    $0xc,%esp
f01112f9:	8d 45 80             	lea    -0x80(%ebp),%eax
f01112fc:	50                   	push   %eax
f01112fd:	e8 6e fa fe ff       	call   f0100d70 <execute_command>
f0111302:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111305:	83 ec 0c             	sub    $0xc,%esp
f0111308:	68 0a 8d 13 f0       	push   $0xf0138d0a
f011130d:	e8 fc f9 fe ff       	call   f0100d0e <cprintf>
f0111312:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111315:	83 ec 0c             	sub    $0xc,%esp
f0111318:	68 20 8d 13 f0       	push   $0xf0138d20
f011131d:	e8 ec f9 fe ff       	call   f0100d0e <cprintf>
f0111322:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111325:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f011132c:	65 00 00 
f011132f:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111335:	b9 18 00 00 00       	mov    $0x18,%ecx
f011133a:	b8 00 00 00 00       	mov    $0x0,%eax
f011133f:	89 d7                	mov    %edx,%edi
f0111341:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111343:	83 ec 0c             	sub    $0xc,%esp
f0111346:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f011134c:	50                   	push   %eax
f011134d:	e8 1e fa fe ff       	call   f0100d70 <execute_command>
f0111352:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111355:	83 ec 0c             	sub    $0xc,%esp
f0111358:	68 0a 8d 13 f0       	push   $0xf0138d0a
f011135d:	e8 ac f9 fe ff       	call   f0100d0e <cprintf>
f0111362:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111365:	83 ec 0c             	sub    $0xc,%esp
f0111368:	68 48 8d 13 f0       	push   $0xf0138d48
f011136d:	e8 9c f9 fe ff       	call   f0100d0e <cprintf>
f0111372:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111375:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f011137c:	75 00 00 
f011137f:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111385:	b9 18 00 00 00       	mov    $0x18,%ecx
f011138a:	b8 00 00 00 00       	mov    $0x0,%eax
f011138f:	89 d7                	mov    %edx,%edi
f0111391:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0111393:	83 ec 0c             	sub    $0xc,%esp
f0111396:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f011139c:	50                   	push   %eax
f011139d:	e8 ce f9 fe ff       	call   f0100d70 <execute_command>
f01113a2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01113a5:	83 ec 0c             	sub    $0xc,%esp
f01113a8:	68 0a 8d 13 f0       	push   $0xf0138d0a
f01113ad:	e8 5c f9 fe ff       	call   f0100d0e <cprintf>
f01113b2:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01113b5:	83 ec 0c             	sub    $0xc,%esp
f01113b8:	68 70 8d 13 f0       	push   $0xf0138d70
f01113bd:	e8 4c f9 fe ff       	call   f0100d0e <cprintf>
f01113c2:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f01113c5:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f01113cc:	6d 6d 00 
f01113cf:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01113d5:	b9 18 00 00 00       	mov    $0x18,%ecx
f01113da:	b8 00 00 00 00       	mov    $0x0,%eax
f01113df:	89 d7                	mov    %edx,%edi
f01113e1:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f01113e3:	83 ec 0c             	sub    $0xc,%esp
f01113e6:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f01113ec:	50                   	push   %eax
f01113ed:	e8 7e f9 fe ff       	call   f0100d70 <execute_command>
f01113f2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01113f5:	83 ec 0c             	sub    $0xc,%esp
f01113f8:	68 0a 8d 13 f0       	push   $0xf0138d0a
f01113fd:	e8 0c f9 fe ff       	call   f0100d0e <cprintf>
f0111402:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111405:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011140a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011140d:	5b                   	pop    %ebx
f011140e:	5e                   	pop    %esi
f011140f:	5f                   	pop    %edi
f0111410:	5d                   	pop    %ebp
f0111411:	c3                   	ret    

f0111412 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111412:	55                   	push   %ebp
f0111413:	89 e5                	mov    %esp,%ebp
f0111415:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111418:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011141f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111426:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011142d:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111432:	ff 75 ec             	pushl  -0x14(%ebp)
f0111435:	ff 75 f0             	pushl  -0x10(%ebp)
f0111438:	ff 75 f4             	pushl  -0xc(%ebp)
f011143b:	50                   	push   %eax
f011143c:	e8 61 69 ff ff       	call   f0107da2 <pt_set_page_permissions>
f0111441:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111444:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111449:	ff 75 ec             	pushl  -0x14(%ebp)
f011144c:	ff 75 f0             	pushl  -0x10(%ebp)
f011144f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111452:	50                   	push   %eax
f0111453:	e8 9e 4e 00 00       	call   f01162f6 <CP>
f0111458:	83 c4 10             	add    $0x10,%esp
f011145b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011145e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111462:	74 14                	je     f0111478 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111464:	83 ec 04             	sub    $0x4,%esp
f0111467:	68 fc 8d 13 f0       	push   $0xf0138dfc
f011146c:	6a 5a                	push   $0x5a
f011146e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111473:	e8 8d ed fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111478:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f011147f:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111486:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011148d:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111492:	ff 75 ec             	pushl  -0x14(%ebp)
f0111495:	ff 75 f0             	pushl  -0x10(%ebp)
f0111498:	ff 75 f4             	pushl  -0xc(%ebp)
f011149b:	50                   	push   %eax
f011149c:	e8 01 69 ff ff       	call   f0107da2 <pt_set_page_permissions>
f01114a1:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01114a4:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01114a9:	ff 75 ec             	pushl  -0x14(%ebp)
f01114ac:	ff 75 f0             	pushl  -0x10(%ebp)
f01114af:	ff 75 f4             	pushl  -0xc(%ebp)
f01114b2:	50                   	push   %eax
f01114b3:	e8 3e 4e 00 00       	call   f01162f6 <CP>
f01114b8:	83 c4 10             	add    $0x10,%esp
f01114bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01114be:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01114c2:	74 14                	je     f01114d8 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f01114c4:	83 ec 04             	sub    $0x4,%esp
f01114c7:	68 3c 8e 13 f0       	push   $0xf0138e3c
f01114cc:	6a 66                	push   $0x66
f01114ce:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01114d3:	e8 2d ed fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01114d8:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f01114df:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f01114e6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01114ed:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01114f2:	ff 75 ec             	pushl  -0x14(%ebp)
f01114f5:	ff 75 f0             	pushl  -0x10(%ebp)
f01114f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01114fb:	50                   	push   %eax
f01114fc:	e8 a1 68 ff ff       	call   f0107da2 <pt_set_page_permissions>
f0111501:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111504:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111509:	ff 75 ec             	pushl  -0x14(%ebp)
f011150c:	ff 75 f0             	pushl  -0x10(%ebp)
f011150f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111512:	50                   	push   %eax
f0111513:	e8 de 4d 00 00       	call   f01162f6 <CP>
f0111518:	83 c4 10             	add    $0x10,%esp
f011151b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011151e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111522:	74 14                	je     f0111538 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111524:	83 ec 04             	sub    $0x4,%esp
f0111527:	68 60 8e 13 f0       	push   $0xf0138e60
f011152c:	6a 71                	push   $0x71
f011152e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111533:	e8 cd ec fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111538:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f011153f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111546:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011154d:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111552:	ff 75 ec             	pushl  -0x14(%ebp)
f0111555:	ff 75 f0             	pushl  -0x10(%ebp)
f0111558:	ff 75 f4             	pushl  -0xc(%ebp)
f011155b:	50                   	push   %eax
f011155c:	e8 41 68 ff ff       	call   f0107da2 <pt_set_page_permissions>
f0111561:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111564:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111569:	ff 75 ec             	pushl  -0x14(%ebp)
f011156c:	ff 75 f0             	pushl  -0x10(%ebp)
f011156f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111572:	50                   	push   %eax
f0111573:	e8 7e 4d 00 00       	call   f01162f6 <CP>
f0111578:	83 c4 10             	add    $0x10,%esp
f011157b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011157e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111582:	74 14                	je     f0111598 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111584:	83 ec 04             	sub    $0x4,%esp
f0111587:	68 84 8e 13 f0       	push   $0xf0138e84
f011158c:	6a 7d                	push   $0x7d
f011158e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111593:	e8 6d ec fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111598:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f011159f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f01115a6:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01115ad:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01115b2:	ff 75 ec             	pushl  -0x14(%ebp)
f01115b5:	ff 75 f0             	pushl  -0x10(%ebp)
f01115b8:	ff 75 f4             	pushl  -0xc(%ebp)
f01115bb:	50                   	push   %eax
f01115bc:	e8 e1 67 ff ff       	call   f0107da2 <pt_set_page_permissions>
f01115c1:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01115c4:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01115c9:	ff 75 ec             	pushl  -0x14(%ebp)
f01115cc:	ff 75 f0             	pushl  -0x10(%ebp)
f01115cf:	ff 75 f4             	pushl  -0xc(%ebp)
f01115d2:	50                   	push   %eax
f01115d3:	e8 1e 4d 00 00       	call   f01162f6 <CP>
f01115d8:	83 c4 10             	add    $0x10,%esp
f01115db:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01115de:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01115e2:	74 17                	je     f01115fb <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f01115e4:	83 ec 04             	sub    $0x4,%esp
f01115e7:	68 a8 8e 13 f0       	push   $0xf0138ea8
f01115ec:	68 89 00 00 00       	push   $0x89
f01115f1:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01115f6:	e8 0a ec fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f01115fb:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111602:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111609:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111610:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111615:	ff 75 ec             	pushl  -0x14(%ebp)
f0111618:	ff 75 f0             	pushl  -0x10(%ebp)
f011161b:	ff 75 f4             	pushl  -0xc(%ebp)
f011161e:	50                   	push   %eax
f011161f:	e8 7e 67 ff ff       	call   f0107da2 <pt_set_page_permissions>
f0111624:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111627:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011162c:	ff 75 ec             	pushl  -0x14(%ebp)
f011162f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111632:	ff 75 f4             	pushl  -0xc(%ebp)
f0111635:	50                   	push   %eax
f0111636:	e8 bb 4c 00 00       	call   f01162f6 <CP>
f011163b:	83 c4 10             	add    $0x10,%esp
f011163e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111641:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111645:	74 17                	je     f011165e <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111647:	83 ec 04             	sub    $0x4,%esp
f011164a:	68 cc 8e 13 f0       	push   $0xf0138ecc
f011164f:	68 95 00 00 00       	push   $0x95
f0111654:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111659:	e8 a7 eb fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f011165e:	83 ec 0c             	sub    $0xc,%esp
f0111661:	68 f8 8e 13 f0       	push   $0xf0138ef8
f0111666:	e8 a3 f6 fe ff       	call   f0100d0e <cprintf>
f011166b:	83 c4 10             	add    $0x10,%esp
	return 0;
f011166e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111673:	c9                   	leave  
f0111674:	c3                   	ret    

f0111675 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111675:	55                   	push   %ebp
f0111676:	89 e5                	mov    %esp,%ebp
f0111678:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f011167b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111682:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111689:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111690:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111695:	ff 75 ec             	pushl  -0x14(%ebp)
f0111698:	ff 75 f0             	pushl  -0x10(%ebp)
f011169b:	ff 75 f4             	pushl  -0xc(%ebp)
f011169e:	50                   	push   %eax
f011169f:	e8 fe 66 ff ff       	call   f0107da2 <pt_set_page_permissions>
f01116a4:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f01116a7:	83 ec 04             	sub    $0x4,%esp
f01116aa:	68 48 8f 13 f0       	push   $0xf0138f48
f01116af:	68 a2 00 00 00       	push   $0xa2
f01116b4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01116b9:	e8 47 eb fe ff       	call   f0100205 <_panic>

f01116be <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f01116be:	55                   	push   %ebp
f01116bf:	89 e5                	mov    %esp,%ebp
f01116c1:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f01116c4:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f01116cb:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01116d0:	83 ec 08             	sub    $0x8,%esp
f01116d3:	ff 75 f4             	pushl  -0xc(%ebp)
f01116d6:	50                   	push   %eax
f01116d7:	e8 7a 67 ff ff       	call   f0107e56 <pt_get_page_permissions>
f01116dc:	83 c4 10             	add    $0x10,%esp
f01116df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f01116e2:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f01116e6:	74 17                	je     f01116ff <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f01116e8:	83 ec 04             	sub    $0x4,%esp
f01116eb:	68 e4 8f 13 f0       	push   $0xf0138fe4
f01116f0:	68 b0 00 00 00       	push   $0xb0
f01116f5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01116fa:	e8 06 eb fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f01116ff:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111706:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011170b:	83 ec 08             	sub    $0x8,%esp
f011170e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111711:	50                   	push   %eax
f0111712:	e8 3f 67 ff ff       	call   f0107e56 <pt_get_page_permissions>
f0111717:	83 c4 10             	add    $0x10,%esp
f011171a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f011171d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111721:	74 17                	je     f011173a <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111723:	83 ec 04             	sub    $0x4,%esp
f0111726:	68 08 90 13 f0       	push   $0xf0139008
f011172b:	68 b8 00 00 00       	push   $0xb8
f0111730:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111735:	e8 cb ea fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f011173a:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111741:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111746:	83 ec 08             	sub    $0x8,%esp
f0111749:	ff 75 f4             	pushl  -0xc(%ebp)
f011174c:	50                   	push   %eax
f011174d:	e8 04 67 ff ff       	call   f0107e56 <pt_get_page_permissions>
f0111752:	83 c4 10             	add    $0x10,%esp
f0111755:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111758:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011175c:	74 17                	je     f0111775 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f011175e:	83 ec 04             	sub    $0x4,%esp
f0111761:	68 2c 90 13 f0       	push   $0xf013902c
f0111766:	68 c0 00 00 00       	push   $0xc0
f011176b:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111770:	e8 90 ea fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111775:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011177c:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111781:	83 ec 08             	sub    $0x8,%esp
f0111784:	ff 75 f4             	pushl  -0xc(%ebp)
f0111787:	50                   	push   %eax
f0111788:	e8 c9 66 ff ff       	call   f0107e56 <pt_get_page_permissions>
f011178d:	83 c4 10             	add    $0x10,%esp
f0111790:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111793:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111797:	74 17                	je     f01117b0 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111799:	83 ec 04             	sub    $0x4,%esp
f011179c:	68 50 90 13 f0       	push   $0xf0139050
f01117a1:	68 c7 00 00 00       	push   $0xc7
f01117a6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01117ab:	e8 55 ea fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f01117b0:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01117b7:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01117bc:	83 ec 08             	sub    $0x8,%esp
f01117bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01117c2:	50                   	push   %eax
f01117c3:	e8 8e 66 ff ff       	call   f0107e56 <pt_get_page_permissions>
f01117c8:	83 c4 10             	add    $0x10,%esp
f01117cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f01117ce:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01117d2:	74 17                	je     f01117eb <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f01117d4:	83 ec 04             	sub    $0x4,%esp
f01117d7:	68 74 90 13 f0       	push   $0xf0139074
f01117dc:	68 ce 00 00 00       	push   $0xce
f01117e1:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01117e6:	e8 1a ea fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f01117eb:	83 ec 0c             	sub    $0xc,%esp
f01117ee:	68 98 90 13 f0       	push   $0xf0139098
f01117f3:	e8 16 f5 fe ff       	call   f0100d0e <cprintf>
f01117f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01117fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111800:	c9                   	leave  
f0111801:	c3                   	ret    

f0111802 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111802:	55                   	push   %ebp
f0111803:	89 e5                	mov    %esp,%ebp
f0111805:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111808:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011180f:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111814:	83 ec 08             	sub    $0x8,%esp
f0111817:	ff 75 f4             	pushl  -0xc(%ebp)
f011181a:	50                   	push   %eax
f011181b:	e8 91 66 ff ff       	call   f0107eb1 <pt_clear_page_table_entry>
f0111820:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111823:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111828:	83 ec 08             	sub    $0x8,%esp
f011182b:	ff 75 f4             	pushl  -0xc(%ebp)
f011182e:	50                   	push   %eax
f011182f:	e8 1e 4a 00 00       	call   f0116252 <CE>
f0111834:	83 c4 10             	add    $0x10,%esp
f0111837:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011183a:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011183e:	74 17                	je     f0111857 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111840:	83 ec 04             	sub    $0x4,%esp
f0111843:	68 e0 90 13 f0       	push   $0xf01390e0
f0111848:	68 de 00 00 00       	push   $0xde
f011184d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111852:	e8 ae e9 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111857:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011185e:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111863:	83 ec 08             	sub    $0x8,%esp
f0111866:	ff 75 f4             	pushl  -0xc(%ebp)
f0111869:	50                   	push   %eax
f011186a:	e8 42 66 ff ff       	call   f0107eb1 <pt_clear_page_table_entry>
f011186f:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111872:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111877:	83 ec 08             	sub    $0x8,%esp
f011187a:	ff 75 f4             	pushl  -0xc(%ebp)
f011187d:	50                   	push   %eax
f011187e:	e8 cf 49 00 00       	call   f0116252 <CE>
f0111883:	83 c4 10             	add    $0x10,%esp
f0111886:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111889:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011188d:	74 17                	je     f01118a6 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f011188f:	83 ec 04             	sub    $0x4,%esp
f0111892:	68 0c 91 13 f0       	push   $0xf013910c
f0111897:	68 e6 00 00 00       	push   $0xe6
f011189c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01118a1:	e8 5f e9 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f01118a6:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01118ad:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01118b2:	83 ec 08             	sub    $0x8,%esp
f01118b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01118b8:	50                   	push   %eax
f01118b9:	e8 f3 65 ff ff       	call   f0107eb1 <pt_clear_page_table_entry>
f01118be:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01118c1:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01118c6:	83 ec 08             	sub    $0x8,%esp
f01118c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01118cc:	50                   	push   %eax
f01118cd:	e8 80 49 00 00       	call   f0116252 <CE>
f01118d2:	83 c4 10             	add    $0x10,%esp
f01118d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01118d8:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01118dc:	74 17                	je     f01118f5 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f01118de:	83 ec 04             	sub    $0x4,%esp
f01118e1:	68 38 91 13 f0       	push   $0xf0139138
f01118e6:	68 ee 00 00 00       	push   $0xee
f01118eb:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01118f0:	e8 10 e9 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f01118f5:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01118fc:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111901:	83 ec 08             	sub    $0x8,%esp
f0111904:	ff 75 f4             	pushl  -0xc(%ebp)
f0111907:	50                   	push   %eax
f0111908:	e8 a4 65 ff ff       	call   f0107eb1 <pt_clear_page_table_entry>
f011190d:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111910:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111915:	83 ec 08             	sub    $0x8,%esp
f0111918:	ff 75 f4             	pushl  -0xc(%ebp)
f011191b:	50                   	push   %eax
f011191c:	e8 31 49 00 00       	call   f0116252 <CE>
f0111921:	83 c4 10             	add    $0x10,%esp
f0111924:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111927:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011192b:	74 17                	je     f0111944 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f011192d:	83 ec 04             	sub    $0x4,%esp
f0111930:	68 64 91 13 f0       	push   $0xf0139164
f0111935:	68 f6 00 00 00       	push   $0xf6
f011193a:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011193f:	e8 c1 e8 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111944:	83 ec 0c             	sub    $0xc,%esp
f0111947:	68 90 91 13 f0       	push   $0xf0139190
f011194c:	e8 bd f3 fe ff       	call   f0100d0e <cprintf>
f0111951:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111954:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111959:	c9                   	leave  
f011195a:	c3                   	ret    

f011195b <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f011195b:	55                   	push   %ebp
f011195c:	89 e5                	mov    %esp,%ebp
f011195e:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111961:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111968:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f011196d:	83 ec 08             	sub    $0x8,%esp
f0111970:	ff 75 f4             	pushl  -0xc(%ebp)
f0111973:	50                   	push   %eax
f0111974:	e8 38 65 ff ff       	call   f0107eb1 <pt_clear_page_table_entry>
f0111979:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f011197c:	83 ec 04             	sub    $0x4,%esp
f011197f:	68 dc 91 13 f0       	push   $0xf01391dc
f0111984:	68 01 01 00 00       	push   $0x101
f0111989:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011198e:	e8 72 e8 fe ff       	call   f0100205 <_panic>

f0111993 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111993:	55                   	push   %ebp
f0111994:	89 e5                	mov    %esp,%ebp
f0111996:	57                   	push   %edi
f0111997:	56                   	push   %esi
f0111998:	53                   	push   %ebx
f0111999:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f011199f:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f01119a6:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f01119ad:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01119b2:	83 ec 0c             	sub    $0xc,%esp
f01119b5:	50                   	push   %eax
f01119b6:	e8 79 49 00 00       	call   f0116334 <ClearUserSpace>
f01119bb:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f01119be:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f01119c5:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f01119ca:	83 ec 08             	sub    $0x8,%esp
f01119cd:	ff 75 dc             	pushl  -0x24(%ebp)
f01119d0:	50                   	push   %eax
f01119d1:	e8 47 65 ff ff       	call   f0107f1d <virtual_to_physical>
f01119d6:	83 c4 10             	add    $0x10,%esp
f01119d9:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f01119dc:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f01119e0:	74 17                	je     f01119f9 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f01119e2:	83 ec 04             	sub    $0x4,%esp
f01119e5:	68 74 92 13 f0       	push   $0xf0139274
f01119ea:	68 16 01 00 00       	push   $0x116
f01119ef:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01119f4:	e8 0c e8 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f01119f9:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111a00:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111a05:	83 ec 08             	sub    $0x8,%esp
f0111a08:	ff 75 dc             	pushl  -0x24(%ebp)
f0111a0b:	50                   	push   %eax
f0111a0c:	e8 0c 65 ff ff       	call   f0107f1d <virtual_to_physical>
f0111a11:	83 c4 10             	add    $0x10,%esp
f0111a14:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111a17:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111a1c:	83 ec 08             	sub    $0x8,%esp
f0111a1f:	ff 75 dc             	pushl  -0x24(%ebp)
f0111a22:	50                   	push   %eax
f0111a23:	e8 0b 48 00 00       	call   f0116233 <CA>
f0111a28:	83 c4 10             	add    $0x10,%esp
f0111a2b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111a2e:	74 17                	je     f0111a47 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111a30:	83 ec 04             	sub    $0x4,%esp
f0111a33:	68 ac 92 13 f0       	push   $0xf01392ac
f0111a38:	68 1f 01 00 00       	push   $0x11f
f0111a3d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111a42:	e8 be e7 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111a47:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111a4d:	bb 78 94 13 f0       	mov    $0xf0139478,%ebx
f0111a52:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111a57:	89 c7                	mov    %eax,%edi
f0111a59:	89 de                	mov    %ebx,%esi
f0111a5b:	89 d1                	mov    %edx,%ecx
f0111a5d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111a5f:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111a62:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111a67:	b0 00                	mov    $0x0,%al
f0111a69:	89 d7                	mov    %edx,%edi
f0111a6b:	f3 aa                	rep stos %al,%es:(%edi)
f0111a6d:	83 ec 0c             	sub    $0xc,%esp
f0111a70:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111a76:	50                   	push   %eax
f0111a77:	e8 f4 f2 fe ff       	call   f0100d70 <execute_command>
f0111a7c:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111a7f:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111a86:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111a8b:	83 ec 08             	sub    $0x8,%esp
f0111a8e:	ff 75 dc             	pushl  -0x24(%ebp)
f0111a91:	50                   	push   %eax
f0111a92:	e8 86 64 ff ff       	call   f0107f1d <virtual_to_physical>
f0111a97:	83 c4 10             	add    $0x10,%esp
f0111a9a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111a9d:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111aa2:	83 ec 08             	sub    $0x8,%esp
f0111aa5:	ff 75 dc             	pushl  -0x24(%ebp)
f0111aa8:	50                   	push   %eax
f0111aa9:	e8 85 47 00 00       	call   f0116233 <CA>
f0111aae:	83 c4 10             	add    $0x10,%esp
f0111ab1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111ab4:	74 17                	je     f0111acd <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111ab6:	83 ec 04             	sub    $0x4,%esp
f0111ab9:	68 e4 92 13 f0       	push   $0xf01392e4
f0111abe:	68 28 01 00 00       	push   $0x128
f0111ac3:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111ac8:	e8 38 e7 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0111acd:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111ad3:	bb dc 94 13 f0       	mov    $0xf01394dc,%ebx
f0111ad8:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111add:	89 c7                	mov    %eax,%edi
f0111adf:	89 de                	mov    %ebx,%esi
f0111ae1:	89 d1                	mov    %edx,%ecx
f0111ae3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111ae5:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0111aeb:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111af0:	b0 00                	mov    $0x0,%al
f0111af2:	89 d7                	mov    %edx,%edi
f0111af4:	f3 aa                	rep stos %al,%es:(%edi)
f0111af6:	83 ec 0c             	sub    $0xc,%esp
f0111af9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111aff:	50                   	push   %eax
f0111b00:	e8 6b f2 fe ff       	call   f0100d70 <execute_command>
f0111b05:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111b08:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111b0f:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111b14:	83 ec 08             	sub    $0x8,%esp
f0111b17:	ff 75 dc             	pushl  -0x24(%ebp)
f0111b1a:	50                   	push   %eax
f0111b1b:	e8 fd 63 ff ff       	call   f0107f1d <virtual_to_physical>
f0111b20:	83 c4 10             	add    $0x10,%esp
f0111b23:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111b26:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111b2b:	83 ec 08             	sub    $0x8,%esp
f0111b2e:	ff 75 dc             	pushl  -0x24(%ebp)
f0111b31:	50                   	push   %eax
f0111b32:	e8 fc 46 00 00       	call   f0116233 <CA>
f0111b37:	83 c4 10             	add    $0x10,%esp
f0111b3a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111b3d:	74 17                	je     f0111b56 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0111b3f:	83 ec 04             	sub    $0x4,%esp
f0111b42:	68 1c 93 13 f0       	push   $0xf013931c
f0111b47:	68 31 01 00 00       	push   $0x131
f0111b4c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111b51:	e8 af e6 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0111b56:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111b5c:	bb 40 95 13 f0       	mov    $0xf0139540,%ebx
f0111b61:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111b66:	89 c7                	mov    %eax,%edi
f0111b68:	89 de                	mov    %ebx,%esi
f0111b6a:	89 d1                	mov    %edx,%ecx
f0111b6c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111b6e:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0111b74:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111b79:	b0 00                	mov    $0x0,%al
f0111b7b:	89 d7                	mov    %edx,%edi
f0111b7d:	f3 aa                	rep stos %al,%es:(%edi)
f0111b7f:	83 ec 0c             	sub    $0xc,%esp
f0111b82:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0111b88:	50                   	push   %eax
f0111b89:	e8 e2 f1 fe ff       	call   f0100d70 <execute_command>
f0111b8e:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0111b91:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111b98:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111b9d:	83 ec 08             	sub    $0x8,%esp
f0111ba0:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ba3:	50                   	push   %eax
f0111ba4:	e8 74 63 ff ff       	call   f0107f1d <virtual_to_physical>
f0111ba9:	83 c4 10             	add    $0x10,%esp
f0111bac:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111baf:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111bb4:	83 ec 08             	sub    $0x8,%esp
f0111bb7:	ff 75 dc             	pushl  -0x24(%ebp)
f0111bba:	50                   	push   %eax
f0111bbb:	e8 73 46 00 00       	call   f0116233 <CA>
f0111bc0:	83 c4 10             	add    $0x10,%esp
f0111bc3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111bc6:	74 17                	je     f0111bdf <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0111bc8:	83 ec 04             	sub    $0x4,%esp
f0111bcb:	68 54 93 13 f0       	push   $0xf0139354
f0111bd0:	68 3a 01 00 00       	push   $0x13a
f0111bd5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111bda:	e8 26 e6 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0111bdf:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111be6:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111beb:	83 ec 08             	sub    $0x8,%esp
f0111bee:	ff 75 dc             	pushl  -0x24(%ebp)
f0111bf1:	50                   	push   %eax
f0111bf2:	e8 26 63 ff ff       	call   f0107f1d <virtual_to_physical>
f0111bf7:	83 c4 10             	add    $0x10,%esp
f0111bfa:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111bfd:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111c02:	83 ec 08             	sub    $0x8,%esp
f0111c05:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c08:	50                   	push   %eax
f0111c09:	e8 25 46 00 00       	call   f0116233 <CA>
f0111c0e:	83 c4 10             	add    $0x10,%esp
f0111c11:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111c14:	74 17                	je     f0111c2d <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111c16:	83 ec 04             	sub    $0x4,%esp
f0111c19:	68 8c 93 13 f0       	push   $0xf013938c
f0111c1e:	68 42 01 00 00       	push   $0x142
f0111c23:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111c28:	e8 d8 e5 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0111c2d:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111c34:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111c39:	83 ec 08             	sub    $0x8,%esp
f0111c3c:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c3f:	50                   	push   %eax
f0111c40:	e8 d8 62 ff ff       	call   f0107f1d <virtual_to_physical>
f0111c45:	83 c4 10             	add    $0x10,%esp
f0111c48:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111c4b:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111c50:	83 ec 08             	sub    $0x8,%esp
f0111c53:	ff 75 dc             	pushl  -0x24(%ebp)
f0111c56:	50                   	push   %eax
f0111c57:	e8 d7 45 00 00       	call   f0116233 <CA>
f0111c5c:	83 c4 10             	add    $0x10,%esp
f0111c5f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111c62:	74 17                	je     f0111c7b <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0111c64:	83 ec 04             	sub    $0x4,%esp
f0111c67:	68 c4 93 13 f0       	push   $0xf01393c4
f0111c6c:	68 4a 01 00 00       	push   $0x14a
f0111c71:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111c76:	e8 8a e5 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0111c7b:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111c81:	bb a4 95 13 f0       	mov    $0xf01395a4,%ebx
f0111c86:	ba 0e 00 00 00       	mov    $0xe,%edx
f0111c8b:	89 c7                	mov    %eax,%edi
f0111c8d:	89 de                	mov    %ebx,%esi
f0111c8f:	89 d1                	mov    %edx,%ecx
f0111c91:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c93:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0111c99:	b9 56 00 00 00       	mov    $0x56,%ecx
f0111c9e:	b0 00                	mov    $0x0,%al
f0111ca0:	89 d7                	mov    %edx,%edi
f0111ca2:	f3 aa                	rep stos %al,%es:(%edi)
f0111ca4:	83 ec 0c             	sub    $0xc,%esp
f0111ca7:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0111cad:	50                   	push   %eax
f0111cae:	e8 bd f0 fe ff       	call   f0100d70 <execute_command>
f0111cb3:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111cb6:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111cbd:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111cc2:	83 ec 08             	sub    $0x8,%esp
f0111cc5:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cc8:	50                   	push   %eax
f0111cc9:	e8 4f 62 ff ff       	call   f0107f1d <virtual_to_physical>
f0111cce:	83 c4 10             	add    $0x10,%esp
f0111cd1:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111cd4:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0111cd9:	83 ec 08             	sub    $0x8,%esp
f0111cdc:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cdf:	50                   	push   %eax
f0111ce0:	e8 4e 45 00 00       	call   f0116233 <CA>
f0111ce5:	83 c4 10             	add    $0x10,%esp
f0111ce8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111ceb:	74 17                	je     f0111d04 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0111ced:	83 ec 04             	sub    $0x4,%esp
f0111cf0:	68 fc 93 13 f0       	push   $0xf01393fc
f0111cf5:	68 53 01 00 00       	push   $0x153
f0111cfa:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111cff:	e8 01 e5 fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111d04:	83 ec 0c             	sub    $0xc,%esp
f0111d07:	68 34 94 13 f0       	push   $0xf0139434
f0111d0c:	e8 fd ef fe ff       	call   f0100d0e <cprintf>
f0111d11:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111d14:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111d19:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111d1c:	5b                   	pop    %ebx
f0111d1d:	5e                   	pop    %esi
f0111d1e:	5f                   	pop    %edi
f0111d1f:	5d                   	pop    %ebp
f0111d20:	c3                   	ret    

f0111d21 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111d21:	55                   	push   %ebp
f0111d22:	89 e5                	mov    %esp,%ebp
f0111d24:	57                   	push   %edi
f0111d25:	56                   	push   %esi
f0111d26:	53                   	push   %ebx
f0111d27:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111d2d:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111d33:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f0111d38:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111d3d:	89 c7                	mov    %eax,%edi
f0111d3f:	89 de                	mov    %ebx,%esi
f0111d41:	89 d1                	mov    %edx,%ecx
f0111d43:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111d45:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0111d4b:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111d50:	b0 00                	mov    $0x0,%al
f0111d52:	89 d7                	mov    %edx,%edi
f0111d54:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111d56:	6a 00                	push   $0x0
f0111d58:	6a 0a                	push   $0xa
f0111d5a:	6a 14                	push   $0x14
f0111d5c:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111d62:	50                   	push   %eax
f0111d63:	e8 f0 72 ff ff       	call   f0109058 <env_create>
f0111d68:	83 c4 10             	add    $0x10,%esp
f0111d6b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111d6e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111d71:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111d74:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111d77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111d7a:	8b 40 60             	mov    0x60(%eax),%eax
f0111d7d:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0111d80:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111d83:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111d86:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0111d8d:	75 70 20 
f0111d90:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0111d97:	00 00 00 
f0111d9a:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111da0:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111da5:	b8 00 00 00 00       	mov    $0x0,%eax
f0111daa:	89 d7                	mov    %edx,%edi
f0111dac:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111dae:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111db1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111db4:	83 ec 08             	sub    $0x8,%esp
f0111db7:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111dbd:	52                   	push   %edx
f0111dbe:	50                   	push   %eax
f0111dbf:	e8 6f fb 01 00       	call   f0131933 <ltostr>
f0111dc4:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111dc7:	83 ec 04             	sub    $0x4,%esp
f0111dca:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111dd0:	50                   	push   %eax
f0111dd1:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111dd7:	50                   	push   %eax
f0111dd8:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0111dde:	50                   	push   %eax
f0111ddf:	e8 47 fc 01 00       	call   f0131a2b <strcconcat>
f0111de4:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111de7:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0111dee:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111df5:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0111dfc:	83 ec 0c             	sub    $0xc,%esp
f0111dff:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e02:	e8 2d 45 00 00       	call   f0116334 <ClearUserSpace>
f0111e07:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0111e0a:	83 ec 04             	sub    $0x4,%esp
f0111e0d:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111e13:	50                   	push   %eax
f0111e14:	68 08 96 13 f0       	push   $0xf0139608
f0111e19:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111e1f:	50                   	push   %eax
f0111e20:	e8 06 fc 01 00       	call   f0131a2b <strcconcat>
f0111e25:	83 c4 10             	add    $0x10,%esp
f0111e28:	83 ec 0c             	sub    $0xc,%esp
f0111e2b:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111e31:	50                   	push   %eax
f0111e32:	e8 39 ef fe ff       	call   f0100d70 <execute_command>
f0111e37:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0111e3a:	83 ec 04             	sub    $0x4,%esp
f0111e3d:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111e43:	50                   	push   %eax
f0111e44:	68 13 96 13 f0       	push   $0xf0139613
f0111e49:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111e4f:	50                   	push   %eax
f0111e50:	e8 d6 fb 01 00       	call   f0131a2b <strcconcat>
f0111e55:	83 c4 10             	add    $0x10,%esp
f0111e58:	83 ec 0c             	sub    $0xc,%esp
f0111e5b:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0111e61:	50                   	push   %eax
f0111e62:	e8 09 ef fe ff       	call   f0100d70 <execute_command>
f0111e67:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0111e6a:	83 ec 04             	sub    $0x4,%esp
f0111e6d:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111e73:	50                   	push   %eax
f0111e74:	68 1e 96 13 f0       	push   $0xf013961e
f0111e79:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111e7f:	50                   	push   %eax
f0111e80:	e8 a6 fb 01 00       	call   f0131a2b <strcconcat>
f0111e85:	83 c4 10             	add    $0x10,%esp
f0111e88:	83 ec 0c             	sub    $0xc,%esp
f0111e8b:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0111e91:	50                   	push   %eax
f0111e92:	e8 d9 ee fe ff       	call   f0100d70 <execute_command>
f0111e97:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0111e9a:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0111ea1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ea4:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0111ea7:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0111eae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111eb1:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0111eb4:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0111ebb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ebe:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0111ec1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ec4:	83 ec 08             	sub    $0x8,%esp
f0111ec7:	50                   	push   %eax
f0111ec8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ecb:	e8 45 44 00 00       	call   f0116315 <GP>
f0111ed0:	83 c4 10             	add    $0x10,%esp
f0111ed3:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111ed6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0111edd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0111ee4:	e8 a8 ae ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0111ee9:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0111eec:	83 ec 0c             	sub    $0xc,%esp
f0111eef:	68 2c 96 13 f0       	push   $0xf013962c
f0111ef4:	e8 15 ee fe ff       	call   f0100d0e <cprintf>
f0111ef9:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0111efc:	6a 03                	push   $0x3
f0111efe:	68 00 00 90 02       	push   $0x2900000
f0111f03:	68 00 00 80 02       	push   $0x2800000
f0111f08:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f0b:	e8 35 6a ff ff       	call   f0108945 <cut_paste_pages>
f0111f10:	83 c4 10             	add    $0x10,%esp
f0111f13:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0111f16:	e8 76 ae ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0111f1b:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0111f1e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0111f25:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111f29:	75 08                	jne    f0111f33 <test_cut_paste_pages+0x212>
f0111f2b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111f2e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111f31:	74 2b                	je     f0111f5e <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111f33:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111f36:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111f39:	83 ec 0c             	sub    $0xc,%esp
f0111f3c:	50                   	push   %eax
f0111f3d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111f40:	68 5c 96 13 f0       	push   $0xf013965c
f0111f45:	68 91 01 00 00       	push   $0x191
f0111f4a:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111f4f:	e8 bf e4 fe ff       	call   f0100413 <_warn>
f0111f54:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111f57:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0111f5e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f62:	74 04                	je     f0111f68 <test_cut_paste_pages+0x247>
f0111f64:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111f68:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0111f6f:	83 ec 08             	sub    $0x8,%esp
f0111f72:	6a 00                	push   $0x0
f0111f74:	6a 01                	push   $0x1
f0111f76:	6a 00                	push   $0x0
f0111f78:	68 ff 0f 00 00       	push   $0xfff
f0111f7d:	ff 75 bc             	pushl  -0x44(%ebp)
f0111f80:	6a 01                	push   $0x1
f0111f82:	68 00 30 00 00       	push   $0x3000
f0111f87:	68 00 00 90 02       	push   $0x2900000
f0111f8c:	68 00 00 80 02       	push   $0x2800000
f0111f91:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f94:	e8 cf 43 00 00       	call   f0116368 <CCP>
f0111f99:	83 c4 30             	add    $0x30,%esp
f0111f9c:	83 f8 01             	cmp    $0x1,%eax
f0111f9f:	74 21                	je     f0111fc2 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111fa1:	83 ec 04             	sub    $0x4,%esp
f0111fa4:	68 b0 96 13 f0       	push   $0xf01396b0
f0111fa9:	68 99 01 00 00       	push   $0x199
f0111fae:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111fb3:	e8 5b e4 fe ff       	call   f0100413 <_warn>
f0111fb8:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111fbb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0111fc2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111fc6:	74 04                	je     f0111fcc <test_cut_paste_pages+0x2ab>
f0111fc8:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0111fcc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0111fd3:	83 ec 04             	sub    $0x4,%esp
f0111fd6:	6a 00                	push   $0x0
f0111fd8:	68 00 00 90 02       	push   $0x2900000
f0111fdd:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111fe0:	e8 5f 41 00 00       	call   f0116144 <CB>
f0111fe5:	83 c4 10             	add    $0x10,%esp
f0111fe8:	85 c0                	test   %eax,%eax
f0111fea:	0f 84 f6 00 00 00    	je     f01120e6 <test_cut_paste_pages+0x3c5>
f0111ff0:	83 ec 04             	sub    $0x4,%esp
f0111ff3:	6a 00                	push   $0x0
f0111ff5:	68 00 10 90 02       	push   $0x2901000
f0111ffa:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ffd:	e8 42 41 00 00       	call   f0116144 <CB>
f0112002:	83 c4 10             	add    $0x10,%esp
f0112005:	85 c0                	test   %eax,%eax
f0112007:	0f 84 d9 00 00 00    	je     f01120e6 <test_cut_paste_pages+0x3c5>
f011200d:	83 ec 04             	sub    $0x4,%esp
f0112010:	6a 00                	push   $0x0
f0112012:	68 00 20 90 02       	push   $0x2902000
f0112017:	ff 75 d4             	pushl  -0x2c(%ebp)
f011201a:	e8 25 41 00 00       	call   f0116144 <CB>
f011201f:	83 c4 10             	add    $0x10,%esp
f0112022:	85 c0                	test   %eax,%eax
f0112024:	0f 84 bc 00 00 00    	je     f01120e6 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f011202a:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0112031:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112038:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f011203f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112042:	8a 00                	mov    (%eax),%al
f0112044:	3c 61                	cmp    $0x61,%al
f0112046:	75 12                	jne    f011205a <test_cut_paste_pages+0x339>
f0112048:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011204b:	8a 00                	mov    (%eax),%al
f011204d:	3c 62                	cmp    $0x62,%al
f011204f:	75 09                	jne    f011205a <test_cut_paste_pages+0x339>
f0112051:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112054:	8a 00                	mov    (%eax),%al
f0112056:	3c 63                	cmp    $0x63,%al
f0112058:	74 21                	je     f011207b <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011205a:	83 ec 04             	sub    $0x4,%esp
f011205d:	68 fc 96 13 f0       	push   $0xf01396fc
f0112062:	68 a6 01 00 00       	push   $0x1a6
f0112067:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011206c:	e8 a2 e3 fe ff       	call   f0100413 <_warn>
f0112071:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112074:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011207b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011207f:	74 04                	je     f0112085 <test_cut_paste_pages+0x364>
f0112081:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112085:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f011208c:	83 ec 04             	sub    $0x4,%esp
f011208f:	6a 01                	push   $0x1
f0112091:	68 00 10 90 02       	push   $0x2901000
f0112096:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112099:	e8 a6 40 00 00       	call   f0116144 <CB>
f011209e:	83 c4 10             	add    $0x10,%esp
f01120a1:	85 c0                	test   %eax,%eax
f01120a3:	74 41                	je     f01120e6 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f01120a5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01120a8:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01120ab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01120ae:	8a 00                	mov    (%eax),%al
f01120b0:	3c 79                	cmp    $0x79,%al
f01120b2:	74 21                	je     f01120d5 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01120b4:	83 ec 04             	sub    $0x4,%esp
f01120b7:	68 fc 96 13 f0       	push   $0xf01396fc
f01120bc:	68 b1 01 00 00       	push   $0x1b1
f01120c1:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01120c6:	e8 48 e3 fe ff       	call   f0100413 <_warn>
f01120cb:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01120ce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01120d5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01120d9:	74 04                	je     f01120df <test_cut_paste_pages+0x3be>
f01120db:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01120df:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01120e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01120e9:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01120ec:	6a 02                	push   $0x2
f01120ee:	68 00 f0 bf 02       	push   $0x2bff000
f01120f3:	68 00 10 90 02       	push   $0x2901000
f01120f8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120fb:	e8 45 68 ff ff       	call   f0108945 <cut_paste_pages>
f0112100:	83 c4 10             	add    $0x10,%esp
f0112103:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112106:	e8 86 ac ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011210b:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f011210e:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112112:	75 0b                	jne    f011211f <test_cut_paste_pages+0x3fe>
f0112114:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112117:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011211a:	83 f8 01             	cmp    $0x1,%eax
f011211d:	74 2b                	je     f011214a <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011211f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112122:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112125:	83 ec 0c             	sub    $0xc,%esp
f0112128:	50                   	push   %eax
f0112129:	ff 75 b4             	pushl  -0x4c(%ebp)
f011212c:	68 5c 96 13 f0       	push   $0xf013965c
f0112131:	68 c2 01 00 00       	push   $0x1c2
f0112136:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011213b:	e8 d3 e2 fe ff       	call   f0100413 <_warn>
f0112140:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112143:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011214a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011214e:	74 04                	je     f0112154 <test_cut_paste_pages+0x433>
f0112150:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112154:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011215b:	83 ec 08             	sub    $0x8,%esp
f011215e:	6a 00                	push   $0x0
f0112160:	6a 01                	push   $0x1
f0112162:	6a 00                	push   $0x0
f0112164:	68 ff 0f 00 00       	push   $0xfff
f0112169:	ff 75 bc             	pushl  -0x44(%ebp)
f011216c:	6a 01                	push   $0x1
f011216e:	68 00 20 00 00       	push   $0x2000
f0112173:	68 00 f0 bf 02       	push   $0x2bff000
f0112178:	68 00 10 90 02       	push   $0x2901000
f011217d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112180:	e8 e3 41 00 00       	call   f0116368 <CCP>
f0112185:	83 c4 30             	add    $0x30,%esp
f0112188:	83 f8 01             	cmp    $0x1,%eax
f011218b:	74 21                	je     f01121ae <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011218d:	83 ec 04             	sub    $0x4,%esp
f0112190:	68 b0 96 13 f0       	push   $0xf01396b0
f0112195:	68 ca 01 00 00       	push   $0x1ca
f011219a:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011219f:	e8 6f e2 fe ff       	call   f0100413 <_warn>
f01121a4:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01121a7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01121ae:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121b2:	74 04                	je     f01121b8 <test_cut_paste_pages+0x497>
f01121b4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01121b8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01121bf:	83 ec 04             	sub    $0x4,%esp
f01121c2:	6a 00                	push   $0x0
f01121c4:	68 ff f7 bf 02       	push   $0x2bff7ff
f01121c9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121cc:	e8 73 3f 00 00       	call   f0116144 <CB>
f01121d1:	83 c4 10             	add    $0x10,%esp
f01121d4:	85 c0                	test   %eax,%eax
f01121d6:	74 6b                	je     f0112243 <test_cut_paste_pages+0x522>
f01121d8:	83 ec 04             	sub    $0x4,%esp
f01121db:	6a 00                	push   $0x0
f01121dd:	68 ff 0f c0 02       	push   $0x2c00fff
f01121e2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01121e5:	e8 5a 3f 00 00       	call   f0116144 <CB>
f01121ea:	83 c4 10             	add    $0x10,%esp
f01121ed:	85 c0                	test   %eax,%eax
f01121ef:	74 52                	je     f0112243 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f01121f1:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f01121f8:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f01121ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112202:	8a 00                	mov    (%eax),%al
f0112204:	3c 79                	cmp    $0x79,%al
f0112206:	75 09                	jne    f0112211 <test_cut_paste_pages+0x4f0>
f0112208:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011220b:	8a 00                	mov    (%eax),%al
f011220d:	3c 63                	cmp    $0x63,%al
f011220f:	74 21                	je     f0112232 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112211:	83 ec 04             	sub    $0x4,%esp
f0112214:	68 fc 96 13 f0       	push   $0xf01396fc
f0112219:	68 d6 01 00 00       	push   $0x1d6
f011221e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112223:	e8 eb e1 fe ff       	call   f0100413 <_warn>
f0112228:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011222b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112232:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112236:	74 04                	je     f011223c <test_cut_paste_pages+0x51b>
f0112238:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011223c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0112243:	83 ec 0c             	sub    $0xc,%esp
f0112246:	68 35 97 13 f0       	push   $0xf0139735
f011224b:	e8 be ea fe ff       	call   f0100d0e <cprintf>
f0112250:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0112253:	83 ec 0c             	sub    $0xc,%esp
f0112256:	68 44 97 13 f0       	push   $0xf0139744
f011225b:	e8 ae ea fe ff       	call   f0100d0e <cprintf>
f0112260:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0112263:	83 ec 04             	sub    $0x4,%esp
f0112266:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f011226c:	50                   	push   %eax
f011226d:	68 6d 97 13 f0       	push   $0xf013976d
f0112272:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112278:	50                   	push   %eax
f0112279:	e8 ad f7 01 00       	call   f0131a2b <strcconcat>
f011227e:	83 c4 10             	add    $0x10,%esp
f0112281:	83 ec 0c             	sub    $0xc,%esp
f0112284:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f011228a:	50                   	push   %eax
f011228b:	e8 e0 ea fe ff       	call   f0100d70 <execute_command>
f0112290:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0112293:	83 ec 04             	sub    $0x4,%esp
f0112296:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011229c:	50                   	push   %eax
f011229d:	68 78 97 13 f0       	push   $0xf0139778
f01122a2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01122a8:	50                   	push   %eax
f01122a9:	e8 7d f7 01 00       	call   f0131a2b <strcconcat>
f01122ae:	83 c4 10             	add    $0x10,%esp
f01122b1:	83 ec 0c             	sub    $0xc,%esp
f01122b4:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01122ba:	50                   	push   %eax
f01122bb:	e8 b0 ea fe ff       	call   f0100d70 <execute_command>
f01122c0:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f01122c3:	83 ec 04             	sub    $0x4,%esp
f01122c6:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01122cc:	50                   	push   %eax
f01122cd:	68 83 97 13 f0       	push   $0xf0139783
f01122d2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01122d8:	50                   	push   %eax
f01122d9:	e8 4d f7 01 00       	call   f0131a2b <strcconcat>
f01122de:	83 c4 10             	add    $0x10,%esp
f01122e1:	83 ec 0c             	sub    $0xc,%esp
f01122e4:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01122ea:	50                   	push   %eax
f01122eb:	e8 80 ea fe ff       	call   f0100d70 <execute_command>
f01122f0:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f01122f3:	83 ec 04             	sub    $0x4,%esp
f01122f6:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01122fc:	50                   	push   %eax
f01122fd:	68 8e 97 13 f0       	push   $0xf013978e
f0112302:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112308:	50                   	push   %eax
f0112309:	e8 1d f7 01 00       	call   f0131a2b <strcconcat>
f011230e:	83 c4 10             	add    $0x10,%esp
f0112311:	83 ec 0c             	sub    $0xc,%esp
f0112314:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011231a:	50                   	push   %eax
f011231b:	e8 50 ea fe ff       	call   f0100d70 <execute_command>
f0112320:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112323:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f011232a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011232d:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112330:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112337:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011233a:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f011233d:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0112344:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112347:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f011234a:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112351:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112354:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112357:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f011235e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112361:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0112364:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f011236b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011236e:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0112371:	83 ec 08             	sub    $0x8,%esp
f0112374:	68 00 00 c0 01       	push   $0x1c00000
f0112379:	ff 75 d4             	pushl  -0x2c(%ebp)
f011237c:	e8 94 3f 00 00       	call   f0116315 <GP>
f0112381:	83 c4 10             	add    $0x10,%esp
f0112384:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112387:	83 ec 08             	sub    $0x8,%esp
f011238a:	68 00 00 40 01       	push   $0x1400000
f011238f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112392:	e8 7e 3f 00 00       	call   f0116315 <GP>
f0112397:	83 c4 10             	add    $0x10,%esp
f011239a:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f011239d:	e8 ef a9 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01123a2:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01123a5:	6a 01                	push   $0x1
f01123a7:	68 00 00 40 01       	push   $0x1400000
f01123ac:	68 00 00 c0 01       	push   $0x1c00000
f01123b1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123b4:	e8 8c 65 ff ff       	call   f0108945 <cut_paste_pages>
f01123b9:	83 c4 10             	add    $0x10,%esp
f01123bc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01123bf:	e8 cd a9 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01123c4:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01123c7:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01123cb:	75 08                	jne    f01123d5 <test_cut_paste_pages+0x6b4>
f01123cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01123d0:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01123d3:	74 2b                	je     f0112400 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01123d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01123d8:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01123db:	83 ec 0c             	sub    $0xc,%esp
f01123de:	50                   	push   %eax
f01123df:	ff 75 b4             	pushl  -0x4c(%ebp)
f01123e2:	68 9c 97 13 f0       	push   $0xf013979c
f01123e7:	68 f9 01 00 00       	push   $0x1f9
f01123ec:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01123f1:	e8 1d e0 fe ff       	call   f0100413 <_warn>
f01123f6:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01123f9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112400:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112404:	74 04                	je     f011240a <test_cut_paste_pages+0x6e9>
f0112406:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011240a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112411:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112418:	83 ec 08             	sub    $0x8,%esp
f011241b:	6a 00                	push   $0x0
f011241d:	68 ff 0f 00 00       	push   $0xfff
f0112422:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112425:	68 ff 0f 00 00       	push   $0xfff
f011242a:	ff 75 a0             	pushl  -0x60(%ebp)
f011242d:	6a 01                	push   $0x1
f011242f:	68 00 10 00 00       	push   $0x1000
f0112434:	68 00 00 40 01       	push   $0x1400000
f0112439:	68 00 00 c0 01       	push   $0x1c00000
f011243e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112441:	e8 22 3f 00 00       	call   f0116368 <CCP>
f0112446:	83 c4 30             	add    $0x30,%esp
f0112449:	83 f8 01             	cmp    $0x1,%eax
f011244c:	74 28                	je     f0112476 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011244e:	83 ec 04             	sub    $0x4,%esp
f0112451:	68 b0 96 13 f0       	push   $0xf01396b0
f0112456:	68 02 02 00 00       	push   $0x202
f011245b:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112460:	e8 ae df fe ff       	call   f0100413 <_warn>
f0112465:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112468:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011246f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112476:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011247a:	74 04                	je     f0112480 <test_cut_paste_pages+0x75f>
f011247c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112480:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112487:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011248b:	0f 84 92 00 00 00    	je     f0112523 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0112491:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112498:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011249f:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f01124a6:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f01124ad:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01124b4:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01124bb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124be:	8a 00                	mov    (%eax),%al
f01124c0:	3c 61                	cmp    $0x61,%al
f01124c2:	75 2d                	jne    f01124f1 <test_cut_paste_pages+0x7d0>
f01124c4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01124c7:	8a 00                	mov    (%eax),%al
f01124c9:	3c 78                	cmp    $0x78,%al
f01124cb:	75 24                	jne    f01124f1 <test_cut_paste_pages+0x7d0>
f01124cd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01124d0:	8a 00                	mov    (%eax),%al
f01124d2:	3c 62                	cmp    $0x62,%al
f01124d4:	75 1b                	jne    f01124f1 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01124d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01124d9:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01124db:	3c 79                	cmp    $0x79,%al
f01124dd:	75 12                	jne    f01124f1 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01124df:	8b 45 98             	mov    -0x68(%ebp),%eax
f01124e2:	8a 00                	mov    (%eax),%al
f01124e4:	3c 63                	cmp    $0x63,%al
f01124e6:	75 09                	jne    f01124f1 <test_cut_paste_pages+0x7d0>
f01124e8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01124eb:	8a 00                	mov    (%eax),%al
f01124ed:	3c 7a                	cmp    $0x7a,%al
f01124ef:	74 21                	je     f0112512 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01124f1:	83 ec 04             	sub    $0x4,%esp
f01124f4:	68 fc 96 13 f0       	push   $0xf01396fc
f01124f9:	68 14 02 00 00       	push   $0x214
f01124fe:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112503:	e8 0b df fe ff       	call   f0100413 <_warn>
f0112508:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011250b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112512:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112516:	74 04                	je     f011251c <test_cut_paste_pages+0x7fb>
f0112518:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011251c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112523:	e8 69 a8 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0112528:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f011252b:	6a 03                	push   $0x3
f011252d:	68 00 f0 bf 01       	push   $0x1bff000
f0112532:	68 00 00 40 01       	push   $0x1400000
f0112537:	ff 75 d4             	pushl  -0x2c(%ebp)
f011253a:	e8 06 64 ff ff       	call   f0108945 <cut_paste_pages>
f011253f:	83 c4 10             	add    $0x10,%esp
f0112542:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112545:	e8 47 a8 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011254a:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011254d:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112551:	75 08                	jne    f011255b <test_cut_paste_pages+0x83a>
f0112553:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112556:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112559:	74 2b                	je     f0112586 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f011255b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011255e:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112561:	83 ec 0c             	sub    $0xc,%esp
f0112564:	50                   	push   %eax
f0112565:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112568:	68 9c 97 13 f0       	push   $0xf013979c
f011256d:	68 23 02 00 00       	push   $0x223
f0112572:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112577:	e8 97 de fe ff       	call   f0100413 <_warn>
f011257c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011257f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112586:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011258a:	74 04                	je     f0112590 <test_cut_paste_pages+0x86f>
f011258c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112590:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112597:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011259e:	83 ec 04             	sub    $0x4,%esp
f01125a1:	6a 00                	push   $0x0
f01125a3:	68 00 00 40 01       	push   $0x1400000
f01125a8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125ab:	e8 94 3b 00 00       	call   f0116144 <CB>
f01125b0:	83 c4 10             	add    $0x10,%esp
f01125b3:	83 f8 01             	cmp    $0x1,%eax
f01125b6:	0f 85 80 00 00 00    	jne    f011263c <test_cut_paste_pages+0x91b>
f01125bc:	83 ec 04             	sub    $0x4,%esp
f01125bf:	6a 00                	push   $0x0
f01125c1:	68 00 10 40 01       	push   $0x1401000
f01125c6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125c9:	e8 76 3b 00 00       	call   f0116144 <CB>
f01125ce:	83 c4 10             	add    $0x10,%esp
f01125d1:	83 f8 01             	cmp    $0x1,%eax
f01125d4:	75 66                	jne    f011263c <test_cut_paste_pages+0x91b>
f01125d6:	83 ec 04             	sub    $0x4,%esp
f01125d9:	6a 00                	push   $0x0
f01125db:	68 00 20 40 01       	push   $0x1402000
f01125e0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125e3:	e8 5c 3b 00 00       	call   f0116144 <CB>
f01125e8:	83 c4 10             	add    $0x10,%esp
f01125eb:	83 f8 01             	cmp    $0x1,%eax
f01125ee:	75 4c                	jne    f011263c <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01125f0:	83 ec 04             	sub    $0x4,%esp
f01125f3:	6a 00                	push   $0x0
f01125f5:	68 00 f0 bf 01       	push   $0x1bff000
f01125fa:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125fd:	e8 42 3b 00 00       	call   f0116144 <CB>
f0112602:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112605:	85 c0                	test   %eax,%eax
f0112607:	75 33                	jne    f011263c <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112609:	83 ec 04             	sub    $0x4,%esp
f011260c:	6a 00                	push   $0x0
f011260e:	68 00 00 c0 01       	push   $0x1c00000
f0112613:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112616:	e8 29 3b 00 00       	call   f0116144 <CB>
f011261b:	83 c4 10             	add    $0x10,%esp
f011261e:	83 f8 01             	cmp    $0x1,%eax
f0112621:	75 19                	jne    f011263c <test_cut_paste_pages+0x91b>
f0112623:	83 ec 04             	sub    $0x4,%esp
f0112626:	6a 00                	push   $0x0
f0112628:	68 00 10 c0 01       	push   $0x1c01000
f011262d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112630:	e8 0f 3b 00 00       	call   f0116144 <CB>
f0112635:	83 c4 10             	add    $0x10,%esp
f0112638:	85 c0                	test   %eax,%eax
f011263a:	74 28                	je     f0112664 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f011263c:	83 ec 04             	sub    $0x4,%esp
f011263f:	68 fc 97 13 f0       	push   $0xf01397fc
f0112644:	68 2c 02 00 00       	push   $0x22c
f0112649:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011264e:	e8 c0 dd fe ff       	call   f0100413 <_warn>
f0112653:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112656:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011265d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112664:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112668:	74 04                	je     f011266e <test_cut_paste_pages+0x94d>
f011266a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011266e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112675:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112679:	0f 84 99 00 00 00    	je     f0112718 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f011267f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112686:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011268d:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112694:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011269b:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01126a2:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01126a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01126ac:	8a 00                	mov    (%eax),%al
f01126ae:	3c 61                	cmp    $0x61,%al
f01126b0:	75 2d                	jne    f01126df <test_cut_paste_pages+0x9be>
f01126b2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126b5:	8a 00                	mov    (%eax),%al
f01126b7:	3c 78                	cmp    $0x78,%al
f01126b9:	75 24                	jne    f01126df <test_cut_paste_pages+0x9be>
f01126bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01126be:	8a 00                	mov    (%eax),%al
f01126c0:	3c 62                	cmp    $0x62,%al
f01126c2:	75 1b                	jne    f01126df <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01126c4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01126c7:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01126c9:	3c 79                	cmp    $0x79,%al
f01126cb:	75 12                	jne    f01126df <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01126cd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01126d0:	8a 00                	mov    (%eax),%al
f01126d2:	3c 63                	cmp    $0x63,%al
f01126d4:	75 09                	jne    f01126df <test_cut_paste_pages+0x9be>
f01126d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01126d9:	8a 00                	mov    (%eax),%al
f01126db:	3c 7a                	cmp    $0x7a,%al
f01126dd:	74 28                	je     f0112707 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f01126df:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f01126e6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01126ed:	83 ec 04             	sub    $0x4,%esp
f01126f0:	68 fc 96 13 f0       	push   $0xf01396fc
f01126f5:	68 40 02 00 00       	push   $0x240
f01126fa:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01126ff:	e8 0f dd fe ff       	call   f0100413 <_warn>
f0112704:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112707:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011270b:	74 04                	je     f0112711 <test_cut_paste_pages+0x9f0>
f011270d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112711:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112718:	83 ec 0c             	sub    $0xc,%esp
f011271b:	68 35 98 13 f0       	push   $0xf0139835
f0112720:	e8 e9 e5 fe ff       	call   f0100d0e <cprintf>
f0112725:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112728:	83 ec 08             	sub    $0x8,%esp
f011272b:	ff 75 e4             	pushl  -0x1c(%ebp)
f011272e:	68 44 98 13 f0       	push   $0xf0139844
f0112733:	e8 d6 e5 fe ff       	call   f0100d0e <cprintf>
f0112738:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011273b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011273f:	75 10                	jne    f0112751 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112741:	83 ec 0c             	sub    $0xc,%esp
f0112744:	68 78 98 13 f0       	push   $0xf0139878
f0112749:	e8 c0 e5 fe ff       	call   f0100d0e <cprintf>
f011274e:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112751:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f0112756:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112759:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011275c:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011275f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112764:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112767:	5b                   	pop    %ebx
f0112768:	5e                   	pop    %esi
f0112769:	5f                   	pop    %edi
f011276a:	5d                   	pop    %ebp
f011276b:	c3                   	ret    

f011276c <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f011276c:	55                   	push   %ebp
f011276d:	89 e5                	mov    %esp,%ebp
f011276f:	57                   	push   %edi
f0112770:	56                   	push   %esi
f0112771:	53                   	push   %ebx
f0112772:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112778:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011277e:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f0112783:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112788:	89 c7                	mov    %eax,%edi
f011278a:	89 de                	mov    %ebx,%esi
f011278c:	89 d1                	mov    %edx,%ecx
f011278e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112790:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112796:	b9 23 00 00 00       	mov    $0x23,%ecx
f011279b:	b0 00                	mov    $0x0,%al
f011279d:	89 d7                	mov    %edx,%edi
f011279f:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01127a1:	6a 00                	push   $0x0
f01127a3:	6a 0a                	push   $0xa
f01127a5:	6a 14                	push   $0x14
f01127a7:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01127ad:	50                   	push   %eax
f01127ae:	e8 a5 68 ff ff       	call   f0109058 <env_create>
f01127b3:	83 c4 10             	add    $0x10,%esp
f01127b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01127b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01127bc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01127bf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01127c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01127c5:	8b 40 60             	mov    0x60(%eax),%eax
f01127c8:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01127ce:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01127d4:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01127d7:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f01127de:	75 70 20 
f01127e1:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f01127e8:	00 00 00 
f01127eb:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01127f1:	b9 03 00 00 00       	mov    $0x3,%ecx
f01127f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01127fb:	89 d7                	mov    %edx,%edi
f01127fd:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01127ff:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112802:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112805:	83 ec 08             	sub    $0x8,%esp
f0112808:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f011280e:	52                   	push   %edx
f011280f:	50                   	push   %eax
f0112810:	e8 1e f1 01 00       	call   f0131933 <ltostr>
f0112815:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112818:	83 ec 04             	sub    $0x4,%esp
f011281b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112821:	50                   	push   %eax
f0112822:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112828:	50                   	push   %eax
f0112829:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f011282f:	50                   	push   %eax
f0112830:	e8 f6 f1 01 00       	call   f0131a2b <strcconcat>
f0112835:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112838:	83 ec 0c             	sub    $0xc,%esp
f011283b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011283e:	e8 f1 3a 00 00       	call   f0116334 <ClearUserSpace>
f0112843:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112846:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f011284d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112854:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011285b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112862:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112869:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112870:	83 ec 0c             	sub    $0xc,%esp
f0112873:	68 ec 98 13 f0       	push   $0xf01398ec
f0112878:	e8 91 e4 fe ff       	call   f0100d0e <cprintf>
f011287d:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112880:	83 ec 04             	sub    $0x4,%esp
f0112883:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112889:	50                   	push   %eax
f011288a:	68 22 99 13 f0       	push   $0xf0139922
f011288f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112895:	50                   	push   %eax
f0112896:	e8 90 f1 01 00       	call   f0131a2b <strcconcat>
f011289b:	83 c4 10             	add    $0x10,%esp
f011289e:	83 ec 0c             	sub    $0xc,%esp
f01128a1:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01128a7:	50                   	push   %eax
f01128a8:	e8 c3 e4 fe ff       	call   f0100d70 <execute_command>
f01128ad:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f01128b0:	83 ec 04             	sub    $0x4,%esp
f01128b3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01128b9:	50                   	push   %eax
f01128ba:	68 27 99 13 f0       	push   $0xf0139927
f01128bf:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01128c5:	50                   	push   %eax
f01128c6:	e8 60 f1 01 00       	call   f0131a2b <strcconcat>
f01128cb:	83 c4 10             	add    $0x10,%esp
f01128ce:	83 ec 0c             	sub    $0xc,%esp
f01128d1:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01128d7:	50                   	push   %eax
f01128d8:	e8 93 e4 fe ff       	call   f0100d70 <execute_command>
f01128dd:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f01128e0:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01128e6:	bb 2d 9c 13 f0       	mov    $0xf0139c2d,%ebx
f01128eb:	ba 0f 00 00 00       	mov    $0xf,%edx
f01128f0:	89 c7                	mov    %eax,%edi
f01128f2:	89 de                	mov    %ebx,%esi
f01128f4:	89 d1                	mov    %edx,%ecx
f01128f6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01128f8:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01128fe:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112903:	b0 00                	mov    $0x0,%al
f0112905:	89 d7                	mov    %edx,%edi
f0112907:	f3 aa                	rep stos %al,%es:(%edi)
f0112909:	83 ec 0c             	sub    $0xc,%esp
f011290c:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112912:	50                   	push   %eax
f0112913:	e8 58 e4 fe ff       	call   f0100d70 <execute_command>
f0112918:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f011291b:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112921:	bb 91 9c 13 f0       	mov    $0xf0139c91,%ebx
f0112926:	ba 0f 00 00 00       	mov    $0xf,%edx
f011292b:	89 c7                	mov    %eax,%edi
f011292d:	89 de                	mov    %ebx,%esi
f011292f:	89 d1                	mov    %edx,%ecx
f0112931:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112933:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112939:	b9 55 00 00 00       	mov    $0x55,%ecx
f011293e:	b0 00                	mov    $0x0,%al
f0112940:	89 d7                	mov    %edx,%edi
f0112942:	f3 aa                	rep stos %al,%es:(%edi)
f0112944:	83 ec 0c             	sub    $0xc,%esp
f0112947:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011294d:	50                   	push   %eax
f011294e:	e8 1d e4 fe ff       	call   f0100d70 <execute_command>
f0112953:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112956:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011295c:	bb f5 9c 13 f0       	mov    $0xf0139cf5,%ebx
f0112961:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112966:	89 c7                	mov    %eax,%edi
f0112968:	89 de                	mov    %ebx,%esi
f011296a:	89 d1                	mov    %edx,%ecx
f011296c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011296e:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112974:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112979:	b0 00                	mov    $0x0,%al
f011297b:	89 d7                	mov    %edx,%edi
f011297d:	f3 aa                	rep stos %al,%es:(%edi)
f011297f:	83 ec 0c             	sub    $0xc,%esp
f0112982:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112988:	50                   	push   %eax
f0112989:	e8 e2 e3 fe ff       	call   f0100d70 <execute_command>
f011298e:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112991:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112997:	bb 59 9d 13 f0       	mov    $0xf0139d59,%ebx
f011299c:	ba 0f 00 00 00       	mov    $0xf,%edx
f01129a1:	89 c7                	mov    %eax,%edi
f01129a3:	89 de                	mov    %ebx,%esi
f01129a5:	89 d1                	mov    %edx,%ecx
f01129a7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01129a9:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01129af:	b9 55 00 00 00       	mov    $0x55,%ecx
f01129b4:	b0 00                	mov    $0x0,%al
f01129b6:	89 d7                	mov    %edx,%edi
f01129b8:	f3 aa                	rep stos %al,%es:(%edi)
f01129ba:	83 ec 0c             	sub    $0xc,%esp
f01129bd:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01129c3:	50                   	push   %eax
f01129c4:	e8 a7 e3 fe ff       	call   f0100d70 <execute_command>
f01129c9:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f01129cc:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01129d2:	bb bd 9d 13 f0       	mov    $0xf0139dbd,%ebx
f01129d7:	ba 0f 00 00 00       	mov    $0xf,%edx
f01129dc:	89 c7                	mov    %eax,%edi
f01129de:	89 de                	mov    %ebx,%esi
f01129e0:	89 d1                	mov    %edx,%ecx
f01129e2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01129e4:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01129ea:	b9 55 00 00 00       	mov    $0x55,%ecx
f01129ef:	b0 00                	mov    $0x0,%al
f01129f1:	89 d7                	mov    %edx,%edi
f01129f3:	f3 aa                	rep stos %al,%es:(%edi)
f01129f5:	83 ec 0c             	sub    $0xc,%esp
f01129f8:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01129fe:	50                   	push   %eax
f01129ff:	e8 6c e3 fe ff       	call   f0100d70 <execute_command>
f0112a04:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112a07:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112a0d:	bb 21 9e 13 f0       	mov    $0xf0139e21,%ebx
f0112a12:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112a17:	89 c7                	mov    %eax,%edi
f0112a19:	89 de                	mov    %ebx,%esi
f0112a1b:	89 d1                	mov    %edx,%ecx
f0112a1d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112a1f:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112a25:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112a2a:	b0 00                	mov    $0x0,%al
f0112a2c:	89 d7                	mov    %edx,%edi
f0112a2e:	f3 aa                	rep stos %al,%es:(%edi)
f0112a30:	83 ec 0c             	sub    $0xc,%esp
f0112a33:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112a39:	50                   	push   %eax
f0112a3a:	e8 31 e3 fe ff       	call   f0100d70 <execute_command>
f0112a3f:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112a42:	83 ec 04             	sub    $0x4,%esp
f0112a45:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112a4b:	50                   	push   %eax
f0112a4c:	68 2f 99 13 f0       	push   $0xf013992f
f0112a51:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112a57:	50                   	push   %eax
f0112a58:	e8 ce ef 01 00       	call   f0131a2b <strcconcat>
f0112a5d:	83 c4 10             	add    $0x10,%esp
f0112a60:	83 ec 0c             	sub    $0xc,%esp
f0112a63:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112a69:	50                   	push   %eax
f0112a6a:	e8 01 e3 fe ff       	call   f0100d70 <execute_command>
f0112a6f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112a72:	83 ec 04             	sub    $0x4,%esp
f0112a75:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112a7b:	50                   	push   %eax
f0112a7c:	68 39 99 13 f0       	push   $0xf0139939
f0112a81:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112a87:	50                   	push   %eax
f0112a88:	e8 9e ef 01 00       	call   f0131a2b <strcconcat>
f0112a8d:	83 c4 10             	add    $0x10,%esp
f0112a90:	83 ec 0c             	sub    $0xc,%esp
f0112a93:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112a99:	50                   	push   %eax
f0112a9a:	e8 d1 e2 fe ff       	call   f0100d70 <execute_command>
f0112a9f:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112aa2:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112aa8:	bb 85 9e 13 f0       	mov    $0xf0139e85,%ebx
f0112aad:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ab2:	89 c7                	mov    %eax,%edi
f0112ab4:	89 de                	mov    %ebx,%esi
f0112ab6:	89 d1                	mov    %edx,%ecx
f0112ab8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112aba:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112ac0:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ac5:	b0 00                	mov    $0x0,%al
f0112ac7:	89 d7                	mov    %edx,%edi
f0112ac9:	f3 aa                	rep stos %al,%es:(%edi)
f0112acb:	83 ec 0c             	sub    $0xc,%esp
f0112ace:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112ad4:	50                   	push   %eax
f0112ad5:	e8 96 e2 fe ff       	call   f0100d70 <execute_command>
f0112ada:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0112add:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112ae3:	bb e9 9e 13 f0       	mov    $0xf0139ee9,%ebx
f0112ae8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112aed:	89 c7                	mov    %eax,%edi
f0112aef:	89 de                	mov    %ebx,%esi
f0112af1:	89 d1                	mov    %edx,%ecx
f0112af3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112af5:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112afb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b00:	b0 00                	mov    $0x0,%al
f0112b02:	89 d7                	mov    %edx,%edi
f0112b04:	f3 aa                	rep stos %al,%es:(%edi)
f0112b06:	83 ec 0c             	sub    $0xc,%esp
f0112b09:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112b0f:	50                   	push   %eax
f0112b10:	e8 5b e2 fe ff       	call   f0100d70 <execute_command>
f0112b15:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112b18:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112b1e:	bb 4d 9f 13 f0       	mov    $0xf0139f4d,%ebx
f0112b23:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112b28:	89 c7                	mov    %eax,%edi
f0112b2a:	89 de                	mov    %ebx,%esi
f0112b2c:	89 d1                	mov    %edx,%ecx
f0112b2e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112b30:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112b36:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112b3b:	b0 00                	mov    $0x0,%al
f0112b3d:	89 d7                	mov    %edx,%edi
f0112b3f:	f3 aa                	rep stos %al,%es:(%edi)
f0112b41:	83 ec 0c             	sub    $0xc,%esp
f0112b44:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112b4a:	50                   	push   %eax
f0112b4b:	e8 20 e2 fe ff       	call   f0100d70 <execute_command>
f0112b50:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0112b53:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0112b5a:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0112b61:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0112b68:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0112b6f:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0112b76:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0112b7d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0112b84:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0112b8b:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0112b92:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0112b99:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112ba0:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112ba7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112baa:	8a 00                	mov    (%eax),%al
f0112bac:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0112bb2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112bb5:	8a 00                	mov    (%eax),%al
f0112bb7:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0112bbd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112bc0:	8a 00                	mov    (%eax),%al
f0112bc2:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112bc8:	e8 c4 a1 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0112bcd:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0112bd0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112bd3:	89 d0                	mov    %edx,%eax
f0112bd5:	01 c0                	add    %eax,%eax
f0112bd7:	01 d0                	add    %edx,%eax
f0112bd9:	01 c0                	add    %eax,%eax
f0112bdb:	50                   	push   %eax
f0112bdc:	68 00 00 10 00       	push   $0x100000
f0112be1:	6a 00                	push   $0x0
f0112be3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112be6:	e8 d8 5e ff ff       	call   f0108ac3 <copy_paste_chunk>
f0112beb:	83 c4 10             	add    $0x10,%esp
f0112bee:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112bf1:	e8 9b a1 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0112bf6:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0112bf9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112c00:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112c04:	75 08                	jne    f0112c0e <test_copy_paste_chunk+0x4a2>
f0112c06:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112c09:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0112c0c:	74 2b                	je     f0112c39 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112c0e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112c11:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112c14:	83 ec 0c             	sub    $0xc,%esp
f0112c17:	50                   	push   %eax
f0112c18:	ff 75 88             	pushl  -0x78(%ebp)
f0112c1b:	68 48 99 13 f0       	push   $0xf0139948
f0112c20:	68 93 02 00 00       	push   $0x293
f0112c25:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112c2a:	e8 e4 d7 fe ff       	call   f0100413 <_warn>
f0112c2f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112c32:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112c39:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c3d:	74 04                	je     f0112c43 <test_copy_paste_chunk+0x4d7>
f0112c3f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112c43:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0112c4a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112c4d:	8a 00                	mov    (%eax),%al
f0112c4f:	3c 61                	cmp    $0x61,%al
f0112c51:	75 75                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112c53:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112c56:	8a 00                	mov    (%eax),%al
f0112c58:	3c 78                	cmp    $0x78,%al
f0112c5a:	75 6c                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112c5c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112c5f:	8a 00                	mov    (%eax),%al
f0112c61:	3c 62                	cmp    $0x62,%al
f0112c63:	75 63                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112c65:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112c68:	8a 00                	mov    (%eax),%al
f0112c6a:	3c 79                	cmp    $0x79,%al
f0112c6c:	75 5a                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112c6e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112c71:	8a 00                	mov    (%eax),%al
f0112c73:	3c 63                	cmp    $0x63,%al
f0112c75:	75 51                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112c77:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112c7a:	8a 00                	mov    (%eax),%al
f0112c7c:	3c 7a                	cmp    $0x7a,%al
f0112c7e:	75 48                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0112c80:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112c83:	8a 00                	mov    (%eax),%al
f0112c85:	3c 64                	cmp    $0x64,%al
f0112c87:	75 3f                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112c89:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112c8c:	8a 10                	mov    (%eax),%dl
f0112c8e:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0112c94:	38 c2                	cmp    %al,%dl
f0112c96:	75 30                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112c98:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112c9b:	8a 00                	mov    (%eax),%al
f0112c9d:	3c 65                	cmp    $0x65,%al
f0112c9f:	75 27                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112ca1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ca4:	8a 10                	mov    (%eax),%dl
f0112ca6:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0112cac:	38 c2                	cmp    %al,%dl
f0112cae:	75 18                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112cb0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112cb3:	8a 00                	mov    (%eax),%al
f0112cb5:	3c 66                	cmp    $0x66,%al
f0112cb7:	75 0f                	jne    f0112cc8 <test_copy_paste_chunk+0x55c>
f0112cb9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112cbc:	8a 10                	mov    (%eax),%dl
f0112cbe:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112cc4:	38 c2                	cmp    %al,%dl
f0112cc6:	74 21                	je     f0112ce9 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112cc8:	83 ec 04             	sub    $0x4,%esp
f0112ccb:	68 ac 99 13 f0       	push   $0xf01399ac
f0112cd0:	68 9c 02 00 00       	push   $0x29c
f0112cd5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112cda:	e8 34 d7 fe ff       	call   f0100413 <_warn>
f0112cdf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ce2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112ce9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ced:	74 04                	je     f0112cf3 <test_copy_paste_chunk+0x587>
f0112cef:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112cf3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0112cfa:	83 ec 0c             	sub    $0xc,%esp
f0112cfd:	68 e6 99 13 f0       	push   $0xf01399e6
f0112d02:	e8 07 e0 fe ff       	call   f0100d0e <cprintf>
f0112d07:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0112d0a:	83 ec 0c             	sub    $0xc,%esp
f0112d0d:	68 f8 99 13 f0       	push   $0xf01399f8
f0112d12:	e8 f7 df fe ff       	call   f0100d0e <cprintf>
f0112d17:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0112d1a:	83 ec 04             	sub    $0x4,%esp
f0112d1d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112d23:	50                   	push   %eax
f0112d24:	68 2e 9a 13 f0       	push   $0xf0139a2e
f0112d29:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112d2f:	50                   	push   %eax
f0112d30:	e8 f6 ec 01 00       	call   f0131a2b <strcconcat>
f0112d35:	83 c4 10             	add    $0x10,%esp
f0112d38:	83 ec 0c             	sub    $0xc,%esp
f0112d3b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112d41:	50                   	push   %eax
f0112d42:	e8 29 e0 fe ff       	call   f0100d70 <execute_command>
f0112d47:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0112d4a:	83 ec 04             	sub    $0x4,%esp
f0112d4d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112d53:	50                   	push   %eax
f0112d54:	68 38 9a 13 f0       	push   $0xf0139a38
f0112d59:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112d5f:	50                   	push   %eax
f0112d60:	e8 c6 ec 01 00       	call   f0131a2b <strcconcat>
f0112d65:	83 c4 10             	add    $0x10,%esp
f0112d68:	83 ec 0c             	sub    $0xc,%esp
f0112d6b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112d71:	50                   	push   %eax
f0112d72:	e8 f9 df fe ff       	call   f0100d70 <execute_command>
f0112d77:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0112d7a:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112d80:	bb b1 9f 13 f0       	mov    $0xf0139fb1,%ebx
f0112d85:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d8a:	89 c7                	mov    %eax,%edi
f0112d8c:	89 de                	mov    %ebx,%esi
f0112d8e:	89 d1                	mov    %edx,%ecx
f0112d90:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d92:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112d98:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112d9d:	b0 00                	mov    $0x0,%al
f0112d9f:	89 d7                	mov    %edx,%edi
f0112da1:	f3 aa                	rep stos %al,%es:(%edi)
f0112da3:	83 ec 0c             	sub    $0xc,%esp
f0112da6:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112dac:	50                   	push   %eax
f0112dad:	e8 be df fe ff       	call   f0100d70 <execute_command>
f0112db2:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112db5:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112dbb:	bb 15 a0 13 f0       	mov    $0xf013a015,%ebx
f0112dc0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112dc5:	89 c7                	mov    %eax,%edi
f0112dc7:	89 de                	mov    %ebx,%esi
f0112dc9:	89 d1                	mov    %edx,%ecx
f0112dcb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112dcd:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112dd3:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112dd8:	b0 00                	mov    $0x0,%al
f0112dda:	89 d7                	mov    %edx,%edi
f0112ddc:	f3 aa                	rep stos %al,%es:(%edi)
f0112dde:	83 ec 0c             	sub    $0xc,%esp
f0112de1:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112de7:	50                   	push   %eax
f0112de8:	e8 83 df fe ff       	call   f0100d70 <execute_command>
f0112ded:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0112df0:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112df6:	bb 79 a0 13 f0       	mov    $0xf013a079,%ebx
f0112dfb:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e00:	89 c7                	mov    %eax,%edi
f0112e02:	89 de                	mov    %ebx,%esi
f0112e04:	89 d1                	mov    %edx,%ecx
f0112e06:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e08:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112e0e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e13:	b0 00                	mov    $0x0,%al
f0112e15:	89 d7                	mov    %edx,%edi
f0112e17:	f3 aa                	rep stos %al,%es:(%edi)
f0112e19:	83 ec 0c             	sub    $0xc,%esp
f0112e1c:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112e22:	50                   	push   %eax
f0112e23:	e8 48 df fe ff       	call   f0100d70 <execute_command>
f0112e28:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0112e2b:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112e31:	bb dd a0 13 f0       	mov    $0xf013a0dd,%ebx
f0112e36:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e3b:	89 c7                	mov    %eax,%edi
f0112e3d:	89 de                	mov    %ebx,%esi
f0112e3f:	89 d1                	mov    %edx,%ecx
f0112e41:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e43:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112e49:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e4e:	b0 00                	mov    $0x0,%al
f0112e50:	89 d7                	mov    %edx,%edi
f0112e52:	f3 aa                	rep stos %al,%es:(%edi)
f0112e54:	83 ec 0c             	sub    $0xc,%esp
f0112e57:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112e5d:	50                   	push   %eax
f0112e5e:	e8 0d df fe ff       	call   f0100d70 <execute_command>
f0112e63:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0112e66:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112e6c:	bb 41 a1 13 f0       	mov    $0xf013a141,%ebx
f0112e71:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e76:	89 c7                	mov    %eax,%edi
f0112e78:	89 de                	mov    %ebx,%esi
f0112e7a:	89 d1                	mov    %edx,%ecx
f0112e7c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e7e:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112e84:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e89:	b0 00                	mov    $0x0,%al
f0112e8b:	89 d7                	mov    %edx,%edi
f0112e8d:	f3 aa                	rep stos %al,%es:(%edi)
f0112e8f:	83 ec 0c             	sub    $0xc,%esp
f0112e92:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112e98:	50                   	push   %eax
f0112e99:	e8 d2 de fe ff       	call   f0100d70 <execute_command>
f0112e9e:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0112ea1:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112ea7:	bb a5 a1 13 f0       	mov    $0xf013a1a5,%ebx
f0112eac:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112eb1:	89 c7                	mov    %eax,%edi
f0112eb3:	89 de                	mov    %ebx,%esi
f0112eb5:	89 d1                	mov    %edx,%ecx
f0112eb7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112eb9:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112ebf:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ec4:	b0 00                	mov    $0x0,%al
f0112ec6:	89 d7                	mov    %edx,%edi
f0112ec8:	f3 aa                	rep stos %al,%es:(%edi)
f0112eca:	83 ec 0c             	sub    $0xc,%esp
f0112ecd:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112ed3:	50                   	push   %eax
f0112ed4:	e8 97 de fe ff       	call   f0100d70 <execute_command>
f0112ed9:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0112edc:	83 ec 04             	sub    $0x4,%esp
f0112edf:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ee5:	50                   	push   %eax
f0112ee6:	68 42 9a 13 f0       	push   $0xf0139a42
f0112eeb:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ef1:	50                   	push   %eax
f0112ef2:	e8 34 eb 01 00       	call   f0131a2b <strcconcat>
f0112ef7:	83 c4 10             	add    $0x10,%esp
f0112efa:	83 ec 0c             	sub    $0xc,%esp
f0112efd:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112f03:	50                   	push   %eax
f0112f04:	e8 67 de fe ff       	call   f0100d70 <execute_command>
f0112f09:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0112f0c:	83 ec 04             	sub    $0x4,%esp
f0112f0f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112f15:	50                   	push   %eax
f0112f16:	68 4c 9a 13 f0       	push   $0xf0139a4c
f0112f1b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112f21:	50                   	push   %eax
f0112f22:	e8 04 eb 01 00       	call   f0131a2b <strcconcat>
f0112f27:	83 c4 10             	add    $0x10,%esp
f0112f2a:	83 ec 0c             	sub    $0xc,%esp
f0112f2d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112f33:	50                   	push   %eax
f0112f34:	e8 37 de fe ff       	call   f0100d70 <execute_command>
f0112f39:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0112f3c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112f42:	bb 09 a2 13 f0       	mov    $0xf013a209,%ebx
f0112f47:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f4c:	89 c7                	mov    %eax,%edi
f0112f4e:	89 de                	mov    %ebx,%esi
f0112f50:	89 d1                	mov    %edx,%ecx
f0112f52:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f54:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112f5a:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f5f:	b0 00                	mov    $0x0,%al
f0112f61:	89 d7                	mov    %edx,%edi
f0112f63:	f3 aa                	rep stos %al,%es:(%edi)
f0112f65:	83 ec 0c             	sub    $0xc,%esp
f0112f68:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112f6e:	50                   	push   %eax
f0112f6f:	e8 fc dd fe ff       	call   f0100d70 <execute_command>
f0112f74:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0112f77:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112f7d:	bb 6d a2 13 f0       	mov    $0xf013a26d,%ebx
f0112f82:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f87:	89 c7                	mov    %eax,%edi
f0112f89:	89 de                	mov    %ebx,%esi
f0112f8b:	89 d1                	mov    %edx,%ecx
f0112f8d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f8f:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112f95:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f9a:	b0 00                	mov    $0x0,%al
f0112f9c:	89 d7                	mov    %edx,%edi
f0112f9e:	f3 aa                	rep stos %al,%es:(%edi)
f0112fa0:	83 ec 0c             	sub    $0xc,%esp
f0112fa3:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112fa9:	50                   	push   %eax
f0112faa:	e8 c1 dd fe ff       	call   f0100d70 <execute_command>
f0112faf:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0112fb2:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112fb8:	bb d1 a2 13 f0       	mov    $0xf013a2d1,%ebx
f0112fbd:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fc2:	89 c7                	mov    %eax,%edi
f0112fc4:	89 de                	mov    %ebx,%esi
f0112fc6:	89 d1                	mov    %edx,%ecx
f0112fc8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fca:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112fd0:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fd5:	b0 00                	mov    $0x0,%al
f0112fd7:	89 d7                	mov    %edx,%edi
f0112fd9:	f3 aa                	rep stos %al,%es:(%edi)
f0112fdb:	83 ec 0c             	sub    $0xc,%esp
f0112fde:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112fe4:	50                   	push   %eax
f0112fe5:	e8 86 dd fe ff       	call   f0100d70 <execute_command>
f0112fea:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0112fed:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0112ff4:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0112ffb:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113002:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0113009:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113010:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113017:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f011301e:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113025:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011302c:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113033:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f011303a:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113041:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113044:	8a 00                	mov    (%eax),%al
f0113046:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011304c:	e8 40 9d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113051:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0113054:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113057:	89 d0                	mov    %edx,%eax
f0113059:	01 c0                	add    %eax,%eax
f011305b:	01 d0                	add    %edx,%eax
f011305d:	01 c0                	add    %eax,%eax
f011305f:	50                   	push   %eax
f0113060:	68 00 00 40 00       	push   $0x400000
f0113065:	68 00 00 20 00       	push   $0x200000
f011306a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011306d:	e8 51 5a ff ff       	call   f0108ac3 <copy_paste_chunk>
f0113072:	83 c4 10             	add    $0x10,%esp
f0113075:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113078:	e8 14 9d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011307d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113080:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113087:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011308b:	75 08                	jne    f0113095 <test_copy_paste_chunk+0x929>
f011308d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113090:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113093:	74 2b                	je     f01130c0 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113095:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113098:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011309b:	83 ec 0c             	sub    $0xc,%esp
f011309e:	50                   	push   %eax
f011309f:	ff 75 80             	pushl  -0x80(%ebp)
f01130a2:	68 58 9a 13 f0       	push   $0xf0139a58
f01130a7:	68 cc 02 00 00       	push   $0x2cc
f01130ac:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01130b1:	e8 5d d3 fe ff       	call   f0100413 <_warn>
f01130b6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01130b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01130c0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01130c4:	74 04                	je     f01130ca <test_copy_paste_chunk+0x95e>
f01130c6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01130ca:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01130d1:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01130d8:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01130db:	83 ec 08             	sub    $0x8,%esp
f01130de:	6a 01                	push   $0x1
f01130e0:	6a 07                	push   $0x7
f01130e2:	6a 07                	push   $0x7
f01130e4:	6a 07                	push   $0x7
f01130e6:	6a 07                	push   $0x7
f01130e8:	6a 01                	push   $0x1
f01130ea:	68 00 20 00 00       	push   $0x2000
f01130ef:	68 00 00 40 00       	push   $0x400000
f01130f4:	68 00 00 20 00       	push   $0x200000
f01130f9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01130fc:	e8 67 32 00 00       	call   f0116368 <CCP>
f0113101:	83 c4 30             	add    $0x30,%esp
f0113104:	83 f8 01             	cmp    $0x1,%eax
f0113107:	74 2b                	je     f0113134 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0113109:	83 ec 04             	sub    $0x4,%esp
f011310c:	68 ac 9a 13 f0       	push   $0xf0139aac
f0113111:	68 d5 02 00 00       	push   $0x2d5
f0113116:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011311b:	e8 f3 d2 fe ff       	call   f0100413 <_warn>
f0113120:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113123:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f011312a:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113131:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113134:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113138:	74 04                	je     f011313e <test_copy_paste_chunk+0x9d2>
f011313a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011313e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113145:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113148:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f011314b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011314e:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113151:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113154:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113157:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011315a:	8a 00                	mov    (%eax),%al
f011315c:	3c 61                	cmp    $0x61,%al
f011315e:	75 69                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f0113160:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113163:	8a 00                	mov    (%eax),%al
f0113165:	3c 61                	cmp    $0x61,%al
f0113167:	75 60                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f0113169:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011316c:	8a 00                	mov    (%eax),%al
f011316e:	3c 79                	cmp    $0x79,%al
f0113170:	75 57                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f0113172:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113175:	8a 00                	mov    (%eax),%al
f0113177:	3c 62                	cmp    $0x62,%al
f0113179:	75 4e                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f011317b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011317e:	8a 00                	mov    (%eax),%al
f0113180:	3c 63                	cmp    $0x63,%al
f0113182:	75 45                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f0113184:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113187:	8a 00                	mov    (%eax),%al
f0113189:	3c 7a                	cmp    $0x7a,%al
f011318b:	75 3c                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011318d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113190:	8a 00                	mov    (%eax),%al
f0113192:	3c 77                	cmp    $0x77,%al
f0113194:	75 33                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f0113196:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113199:	8a 00                	mov    (%eax),%al
f011319b:	3c 64                	cmp    $0x64,%al
f011319d:	75 2a                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f011319f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01131a2:	8a 00                	mov    (%eax),%al
f01131a4:	3c 65                	cmp    $0x65,%al
f01131a6:	75 21                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f01131a8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01131ab:	8a 00                	mov    (%eax),%al
f01131ad:	3c 65                	cmp    $0x65,%al
f01131af:	75 18                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f01131b1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01131b4:	8a 00                	mov    (%eax),%al
f01131b6:	3c 66                	cmp    $0x66,%al
f01131b8:	75 0f                	jne    f01131c9 <test_copy_paste_chunk+0xa5d>
f01131ba:	8b 45 90             	mov    -0x70(%ebp),%eax
f01131bd:	8a 10                	mov    (%eax),%dl
f01131bf:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01131c5:	38 c2                	cmp    %al,%dl
f01131c7:	74 21                	je     f01131ea <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01131c9:	83 ec 04             	sub    $0x4,%esp
f01131cc:	68 ac 99 13 f0       	push   $0xf01399ac
f01131d1:	68 e3 02 00 00       	push   $0x2e3
f01131d6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01131db:	e8 33 d2 fe ff       	call   f0100413 <_warn>
f01131e0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01131e3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01131ea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01131ee:	74 04                	je     f01131f4 <test_copy_paste_chunk+0xa88>
f01131f0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01131f4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f01131fb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01131fe:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113201:	e8 8b 9b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113206:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113209:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011320c:	89 c2                	mov    %eax,%edx
f011320e:	01 d2                	add    %edx,%edx
f0113210:	01 d0                	add    %edx,%eax
f0113212:	50                   	push   %eax
f0113213:	68 00 08 20 00       	push   $0x200800
f0113218:	68 00 08 40 00       	push   $0x400800
f011321d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113220:	e8 9e 58 ff ff       	call   f0108ac3 <copy_paste_chunk>
f0113225:	83 c4 10             	add    $0x10,%esp
f0113228:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011322b:	e8 61 9b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113230:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113233:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113237:	75 08                	jne    f0113241 <test_copy_paste_chunk+0xad5>
f0113239:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011323c:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011323f:	74 2b                	je     f011326c <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113241:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113244:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113247:	83 ec 0c             	sub    $0xc,%esp
f011324a:	50                   	push   %eax
f011324b:	ff 75 80             	pushl  -0x80(%ebp)
f011324e:	68 58 9a 13 f0       	push   $0xf0139a58
f0113253:	68 f3 02 00 00       	push   $0x2f3
f0113258:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011325d:	e8 b1 d1 fe ff       	call   f0100413 <_warn>
f0113262:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113265:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011326c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113270:	74 04                	je     f0113276 <test_copy_paste_chunk+0xb0a>
f0113272:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113276:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011327d:	83 ec 08             	sub    $0x8,%esp
f0113280:	6a 01                	push   $0x1
f0113282:	6a 07                	push   $0x7
f0113284:	6a 07                	push   $0x7
f0113286:	6a 07                	push   $0x7
f0113288:	6a 07                	push   $0x7
f011328a:	6a 01                	push   $0x1
f011328c:	68 00 20 00 00       	push   $0x2000
f0113291:	68 00 00 20 00       	push   $0x200000
f0113296:	68 00 00 40 00       	push   $0x400000
f011329b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011329e:	e8 c5 30 00 00       	call   f0116368 <CCP>
f01132a3:	83 c4 30             	add    $0x30,%esp
f01132a6:	83 f8 01             	cmp    $0x1,%eax
f01132a9:	74 21                	je     f01132cc <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01132ab:	83 ec 04             	sub    $0x4,%esp
f01132ae:	68 f8 9a 13 f0       	push   $0xf0139af8
f01132b3:	68 fb 02 00 00       	push   $0x2fb
f01132b8:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01132bd:	e8 51 d1 fe ff       	call   f0100413 <_warn>
f01132c2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132c5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01132cc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01132d0:	74 04                	je     f01132d6 <test_copy_paste_chunk+0xb6a>
f01132d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01132d6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01132dd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01132e0:	8a 00                	mov    (%eax),%al
f01132e2:	3c 61                	cmp    $0x61,%al
f01132e4:	75 69                	jne    f011334f <test_copy_paste_chunk+0xbe3>
f01132e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01132e9:	8a 00                	mov    (%eax),%al
f01132eb:	3c 61                	cmp    $0x61,%al
f01132ed:	75 60                	jne    f011334f <test_copy_paste_chunk+0xbe3>
f01132ef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132f2:	8a 00                	mov    (%eax),%al
f01132f4:	3c 79                	cmp    $0x79,%al
f01132f6:	75 57                	jne    f011334f <test_copy_paste_chunk+0xbe3>
f01132f8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01132fb:	8a 00                	mov    (%eax),%al
f01132fd:	3c 62                	cmp    $0x62,%al
f01132ff:	75 4e                	jne    f011334f <test_copy_paste_chunk+0xbe3>
f0113301:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113304:	8a 00                	mov    (%eax),%al
f0113306:	3c 7a                	cmp    $0x7a,%al
f0113308:	75 45                	jne    f011334f <test_copy_paste_chunk+0xbe3>
f011330a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011330d:	8a 00                	mov    (%eax),%al
f011330f:	3c 7a                	cmp    $0x7a,%al
f0113311:	75 3c                	jne    f011334f <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113313:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113316:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113318:	3c 64                	cmp    $0x64,%al
f011331a:	75 33                	jne    f011334f <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011331c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011331f:	8a 00                	mov    (%eax),%al
f0113321:	3c 64                	cmp    $0x64,%al
f0113323:	75 2a                	jne    f011334f <test_copy_paste_chunk+0xbe3>
f0113325:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113328:	8a 00                	mov    (%eax),%al
f011332a:	3c 65                	cmp    $0x65,%al
f011332c:	75 21                	jne    f011334f <test_copy_paste_chunk+0xbe3>
f011332e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113331:	8a 00                	mov    (%eax),%al
f0113333:	3c 78                	cmp    $0x78,%al
f0113335:	75 18                	jne    f011334f <test_copy_paste_chunk+0xbe3>
f0113337:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011333a:	8a 00                	mov    (%eax),%al
f011333c:	3c 66                	cmp    $0x66,%al
f011333e:	75 0f                	jne    f011334f <test_copy_paste_chunk+0xbe3>
f0113340:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113343:	8a 10                	mov    (%eax),%dl
f0113345:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011334b:	38 c2                	cmp    %al,%dl
f011334d:	74 21                	je     f0113370 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011334f:	83 ec 04             	sub    $0x4,%esp
f0113352:	68 ac 99 13 f0       	push   $0xf01399ac
f0113357:	68 04 03 00 00       	push   $0x304
f011335c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113361:	e8 ad d0 fe ff       	call   f0100413 <_warn>
f0113366:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113369:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113370:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113374:	74 04                	je     f011337a <test_copy_paste_chunk+0xc0e>
f0113376:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011337a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0113381:	83 ec 0c             	sub    $0xc,%esp
f0113384:	68 43 9b 13 f0       	push   $0xf0139b43
f0113389:	e8 80 d9 fe ff       	call   f0100d0e <cprintf>
f011338e:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0113391:	83 ec 0c             	sub    $0xc,%esp
f0113394:	68 54 9b 13 f0       	push   $0xf0139b54
f0113399:	e8 70 d9 fe ff       	call   f0100d0e <cprintf>
f011339e:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01133a1:	83 ec 04             	sub    $0x4,%esp
f01133a4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01133aa:	50                   	push   %eax
f01133ab:	68 88 9b 13 f0       	push   $0xf0139b88
f01133b0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01133b6:	50                   	push   %eax
f01133b7:	e8 6f e6 01 00       	call   f0131a2b <strcconcat>
f01133bc:	83 c4 10             	add    $0x10,%esp
f01133bf:	83 ec 0c             	sub    $0xc,%esp
f01133c2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01133c8:	50                   	push   %eax
f01133c9:	e8 a2 d9 fe ff       	call   f0100d70 <execute_command>
f01133ce:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01133d1:	83 ec 04             	sub    $0x4,%esp
f01133d4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01133da:	50                   	push   %eax
f01133db:	68 92 9b 13 f0       	push   $0xf0139b92
f01133e0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01133e6:	50                   	push   %eax
f01133e7:	e8 3f e6 01 00       	call   f0131a2b <strcconcat>
f01133ec:	83 c4 10             	add    $0x10,%esp
f01133ef:	83 ec 0c             	sub    $0xc,%esp
f01133f2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01133f8:	50                   	push   %eax
f01133f9:	e8 72 d9 fe ff       	call   f0100d70 <execute_command>
f01133fe:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113401:	83 ec 04             	sub    $0x4,%esp
f0113404:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011340a:	50                   	push   %eax
f011340b:	68 9c 9b 13 f0       	push   $0xf0139b9c
f0113410:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113416:	50                   	push   %eax
f0113417:	e8 0f e6 01 00       	call   f0131a2b <strcconcat>
f011341c:	83 c4 10             	add    $0x10,%esp
f011341f:	83 ec 0c             	sub    $0xc,%esp
f0113422:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113428:	50                   	push   %eax
f0113429:	e8 42 d9 fe ff       	call   f0100d70 <execute_command>
f011342e:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113431:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113437:	bb 35 a3 13 f0       	mov    $0xf013a335,%ebx
f011343c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113441:	89 c7                	mov    %eax,%edi
f0113443:	89 de                	mov    %ebx,%esi
f0113445:	89 d1                	mov    %edx,%ecx
f0113447:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113449:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011344f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113454:	b0 00                	mov    $0x0,%al
f0113456:	89 d7                	mov    %edx,%edi
f0113458:	f3 aa                	rep stos %al,%es:(%edi)
f011345a:	83 ec 0c             	sub    $0xc,%esp
f011345d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113463:	50                   	push   %eax
f0113464:	e8 07 d9 fe ff       	call   f0100d70 <execute_command>
f0113469:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f011346c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113472:	bb 99 a3 13 f0       	mov    $0xf013a399,%ebx
f0113477:	ba 0f 00 00 00       	mov    $0xf,%edx
f011347c:	89 c7                	mov    %eax,%edi
f011347e:	89 de                	mov    %ebx,%esi
f0113480:	89 d1                	mov    %edx,%ecx
f0113482:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113484:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011348a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011348f:	b0 00                	mov    $0x0,%al
f0113491:	89 d7                	mov    %edx,%edi
f0113493:	f3 aa                	rep stos %al,%es:(%edi)
f0113495:	83 ec 0c             	sub    $0xc,%esp
f0113498:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011349e:	50                   	push   %eax
f011349f:	e8 cc d8 fe ff       	call   f0100d70 <execute_command>
f01134a4:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f01134a7:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01134ad:	bb fd a3 13 f0       	mov    $0xf013a3fd,%ebx
f01134b2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134b7:	89 c7                	mov    %eax,%edi
f01134b9:	89 de                	mov    %ebx,%esi
f01134bb:	89 d1                	mov    %edx,%ecx
f01134bd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01134bf:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01134c5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134ca:	b0 00                	mov    $0x0,%al
f01134cc:	89 d7                	mov    %edx,%edi
f01134ce:	f3 aa                	rep stos %al,%es:(%edi)
f01134d0:	83 ec 0c             	sub    $0xc,%esp
f01134d3:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01134d9:	50                   	push   %eax
f01134da:	e8 91 d8 fe ff       	call   f0100d70 <execute_command>
f01134df:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01134e2:	e8 aa 98 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01134e7:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f01134ea:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01134ed:	89 d0                	mov    %edx,%eax
f01134ef:	01 c0                	add    %eax,%eax
f01134f1:	01 d0                	add    %edx,%eax
f01134f3:	c1 e0 02             	shl    $0x2,%eax
f01134f6:	50                   	push   %eax
f01134f7:	68 00 00 90 00       	push   $0x900000
f01134fc:	68 00 00 80 00       	push   $0x800000
f0113501:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113504:	e8 ba 55 ff ff       	call   f0108ac3 <copy_paste_chunk>
f0113509:	83 c4 10             	add    $0x10,%esp
f011350c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113512:	e8 7a 98 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113517:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011351a:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113521:	75 0b                	jne    f011352e <test_copy_paste_chunk+0xdc2>
f0113523:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113526:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113529:	83 f8 03             	cmp    $0x3,%eax
f011352c:	74 2e                	je     f011355c <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011352e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113531:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113534:	83 ec 0c             	sub    $0xc,%esp
f0113537:	50                   	push   %eax
f0113538:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011353e:	68 58 9a 13 f0       	push   $0xf0139a58
f0113543:	68 22 03 00 00       	push   $0x322
f0113548:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011354d:	e8 c1 ce fe ff       	call   f0100413 <_warn>
f0113552:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113555:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011355c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113560:	74 04                	je     f0113566 <test_copy_paste_chunk+0xdfa>
f0113562:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113566:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f011356d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113574:	83 ec 08             	sub    $0x8,%esp
f0113577:	6a 01                	push   $0x1
f0113579:	6a 07                	push   $0x7
f011357b:	6a 07                	push   $0x7
f011357d:	6a 07                	push   $0x7
f011357f:	6a 07                	push   $0x7
f0113581:	6a 01                	push   $0x1
f0113583:	68 00 30 00 00       	push   $0x3000
f0113588:	68 00 00 90 00       	push   $0x900000
f011358d:	68 00 00 80 00       	push   $0x800000
f0113592:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113595:	e8 ce 2d 00 00       	call   f0116368 <CCP>
f011359a:	83 c4 30             	add    $0x30,%esp
f011359d:	83 f8 01             	cmp    $0x1,%eax
f01135a0:	74 28                	je     f01135ca <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01135a2:	83 ec 04             	sub    $0x4,%esp
f01135a5:	68 f8 9a 13 f0       	push   $0xf0139af8
f01135aa:	68 2b 03 00 00       	push   $0x32b
f01135af:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01135b4:	e8 5a ce fe ff       	call   f0100413 <_warn>
f01135b9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01135bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01135c3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f01135ca:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01135ce:	74 04                	je     f01135d4 <test_copy_paste_chunk+0xe68>
f01135d0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01135d4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01135db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01135df:	0f 84 9e 00 00 00    	je     f0113683 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f01135e5:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f01135ec:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f01135f3:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f01135fa:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113601:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113608:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f011360f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113612:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113615:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113618:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f011361b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011361e:	8a 00                	mov    (%eax),%al
f0113620:	3c 61                	cmp    $0x61,%al
f0113622:	75 2d                	jne    f0113651 <test_copy_paste_chunk+0xee5>
f0113624:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113627:	8a 00                	mov    (%eax),%al
f0113629:	3c 61                	cmp    $0x61,%al
f011362b:	75 24                	jne    f0113651 <test_copy_paste_chunk+0xee5>
f011362d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113630:	8a 00                	mov    (%eax),%al
f0113632:	3c 79                	cmp    $0x79,%al
f0113634:	75 1b                	jne    f0113651 <test_copy_paste_chunk+0xee5>
f0113636:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113639:	8a 00                	mov    (%eax),%al
f011363b:	3c 62                	cmp    $0x62,%al
f011363d:	75 12                	jne    f0113651 <test_copy_paste_chunk+0xee5>
f011363f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113642:	8a 00                	mov    (%eax),%al
f0113644:	3c 63                	cmp    $0x63,%al
f0113646:	75 09                	jne    f0113651 <test_copy_paste_chunk+0xee5>
f0113648:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011364b:	8a 00                	mov    (%eax),%al
f011364d:	3c 7a                	cmp    $0x7a,%al
f011364f:	74 21                	je     f0113672 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113651:	83 ec 04             	sub    $0x4,%esp
f0113654:	68 ac 99 13 f0       	push   $0xf01399ac
f0113659:	68 3d 03 00 00       	push   $0x33d
f011365e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113663:	e8 ab cd fe ff       	call   f0100413 <_warn>
f0113668:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011366b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113672:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113676:	74 04                	je     f011367c <test_copy_paste_chunk+0xf10>
f0113678:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f011367c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113683:	e8 09 97 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113688:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f011368b:	6a 00                	push   $0x0
f011368d:	6a 02                	push   $0x2
f011368f:	68 00 10 90 00       	push   $0x901000
f0113694:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113697:	e8 59 2b 00 00       	call   f01161f5 <SB>
f011369c:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011369f:	6a 00                	push   $0x0
f01136a1:	6a 02                	push   $0x2
f01136a3:	68 00 20 90 00       	push   $0x902000
f01136a8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01136ab:	e8 45 2b 00 00       	call   f01161f5 <SB>
f01136b0:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f01136b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01136b6:	c1 e0 03             	shl    $0x3,%eax
f01136b9:	50                   	push   %eax
f01136ba:	68 00 f0 bf 00       	push   $0xbff000
f01136bf:	68 00 10 90 00       	push   $0x901000
f01136c4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01136c7:	e8 f7 53 ff ff       	call   f0108ac3 <copy_paste_chunk>
f01136cc:	83 c4 10             	add    $0x10,%esp
f01136cf:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01136d5:	e8 b7 96 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01136da:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01136dd:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01136e4:	75 0b                	jne    f01136f1 <test_copy_paste_chunk+0xf85>
f01136e6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01136e9:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01136ec:	83 f8 03             	cmp    $0x3,%eax
f01136ef:	74 2e                	je     f011371f <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01136f1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01136f4:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01136f7:	83 ec 0c             	sub    $0xc,%esp
f01136fa:	50                   	push   %eax
f01136fb:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113701:	68 58 9a 13 f0       	push   $0xf0139a58
f0113706:	68 4d 03 00 00       	push   $0x34d
f011370b:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113710:	e8 fe cc fe ff       	call   f0100413 <_warn>
f0113715:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113718:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011371f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113723:	74 04                	je     f0113729 <test_copy_paste_chunk+0xfbd>
f0113725:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113729:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113730:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113737:	83 ec 08             	sub    $0x8,%esp
f011373a:	6a 01                	push   $0x1
f011373c:	6a 07                	push   $0x7
f011373e:	6a 03                	push   $0x3
f0113740:	6a 07                	push   $0x7
f0113742:	6a 03                	push   $0x3
f0113744:	6a 01                	push   $0x1
f0113746:	68 00 20 00 00       	push   $0x2000
f011374b:	68 00 f0 bf 00       	push   $0xbff000
f0113750:	68 00 10 90 00       	push   $0x901000
f0113755:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113758:	e8 0b 2c 00 00       	call   f0116368 <CCP>
f011375d:	83 c4 30             	add    $0x30,%esp
f0113760:	83 f8 01             	cmp    $0x1,%eax
f0113763:	74 28                	je     f011378d <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113765:	83 ec 04             	sub    $0x4,%esp
f0113768:	68 f8 9a 13 f0       	push   $0xf0139af8
f011376d:	68 56 03 00 00       	push   $0x356
f0113772:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113777:	e8 97 cc fe ff       	call   f0100413 <_warn>
f011377c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011377f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113786:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f011378d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113791:	74 04                	je     f0113797 <test_copy_paste_chunk+0x102b>
f0113793:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113797:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011379e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01137a2:	74 72                	je     f0113816 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f01137a4:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f01137ab:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f01137b2:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f01137b9:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f01137c0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01137c3:	8a 00                	mov    (%eax),%al
f01137c5:	3c 62                	cmp    $0x62,%al
f01137c7:	75 1b                	jne    f01137e4 <test_copy_paste_chunk+0x1078>
f01137c9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01137cc:	8a 00                	mov    (%eax),%al
f01137ce:	3c 62                	cmp    $0x62,%al
f01137d0:	75 12                	jne    f01137e4 <test_copy_paste_chunk+0x1078>
f01137d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01137d5:	8a 00                	mov    (%eax),%al
f01137d7:	3c 7a                	cmp    $0x7a,%al
f01137d9:	75 09                	jne    f01137e4 <test_copy_paste_chunk+0x1078>
f01137db:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01137de:	8a 00                	mov    (%eax),%al
f01137e0:	3c 7a                	cmp    $0x7a,%al
f01137e2:	74 21                	je     f0113805 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01137e4:	83 ec 04             	sub    $0x4,%esp
f01137e7:	68 ac 99 13 f0       	push   $0xf01399ac
f01137ec:	68 62 03 00 00       	push   $0x362
f01137f1:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01137f6:	e8 18 cc fe ff       	call   f0100413 <_warn>
f01137fb:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01137fe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113805:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113809:	74 04                	je     f011380f <test_copy_paste_chunk+0x10a3>
f011380b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011380f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113816:	83 ec 0c             	sub    $0xc,%esp
f0113819:	68 a6 9b 13 f0       	push   $0xf0139ba6
f011381e:	e8 eb d4 fe ff       	call   f0100d0e <cprintf>
f0113823:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113826:	83 ec 08             	sub    $0x8,%esp
f0113829:	ff 75 e4             	pushl  -0x1c(%ebp)
f011382c:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0113831:	e8 d8 d4 fe ff       	call   f0100d0e <cprintf>
f0113836:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113839:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011383d:	75 10                	jne    f011384f <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f011383f:	83 ec 0c             	sub    $0xc,%esp
f0113842:	68 ec 9b 13 f0       	push   $0xf0139bec
f0113847:	e8 c2 d4 fe ff       	call   f0100d0e <cprintf>
f011384c:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011384f:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f0113854:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113857:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011385a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011385d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113862:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113865:	5b                   	pop    %ebx
f0113866:	5e                   	pop    %esi
f0113867:	5f                   	pop    %edi
f0113868:	5d                   	pop    %ebp
f0113869:	c3                   	ret    

f011386a <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f011386a:	55                   	push   %ebp
f011386b:	89 e5                	mov    %esp,%ebp
f011386d:	57                   	push   %edi
f011386e:	56                   	push   %esi
f011386f:	53                   	push   %ebx
f0113870:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113876:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011387c:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f0113881:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113886:	89 c7                	mov    %eax,%edi
f0113888:	89 de                	mov    %ebx,%esi
f011388a:	89 d1                	mov    %edx,%ecx
f011388c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011388e:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113894:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113899:	b0 00                	mov    $0x0,%al
f011389b:	89 d7                	mov    %edx,%edi
f011389d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011389f:	6a 00                	push   $0x0
f01138a1:	6a 0a                	push   $0xa
f01138a3:	6a 14                	push   $0x14
f01138a5:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01138ab:	50                   	push   %eax
f01138ac:	e8 a7 57 ff ff       	call   f0109058 <env_create>
f01138b1:	83 c4 10             	add    $0x10,%esp
f01138b4:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01138b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01138ba:	8b 40 5c             	mov    0x5c(%eax),%eax
f01138bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01138c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01138c3:	8b 40 60             	mov    0x60(%eax),%eax
f01138c6:	89 45 80             	mov    %eax,-0x80(%ebp)
f01138c9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01138cc:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01138cf:	83 ec 0c             	sub    $0xc,%esp
f01138d2:	ff 75 cc             	pushl  -0x34(%ebp)
f01138d5:	e8 5a 2a 00 00       	call   f0116334 <ClearUserSpace>
f01138da:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01138dd:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01138e4:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f01138eb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f01138f2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f01138f6:	83 ec 0c             	sub    $0xc,%esp
f01138f9:	68 64 a4 13 f0       	push   $0xf013a464
f01138fe:	e8 0b d4 fe ff       	call   f0100d0e <cprintf>
f0113903:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113906:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f011390d:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113914:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113917:	8a 00                	mov    (%eax),%al
f0113919:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f011391f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113922:	8a 00                	mov    (%eax),%al
f0113924:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011392a:	e8 62 94 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011392f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113932:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113935:	89 d0                	mov    %edx,%eax
f0113937:	01 c0                	add    %eax,%eax
f0113939:	01 d0                	add    %edx,%eax
f011393b:	01 c0                	add    %eax,%eax
f011393d:	83 ec 0c             	sub    $0xc,%esp
f0113940:	6a 02                	push   $0x2
f0113942:	50                   	push   %eax
f0113943:	68 00 40 10 f0       	push   $0xf0104000
f0113948:	68 00 00 10 f0       	push   $0xf0100000
f011394d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113950:	e8 b2 52 ff ff       	call   f0108c07 <share_chunk>
f0113955:	83 c4 20             	add    $0x20,%esp
f0113958:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011395b:	e8 31 94 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113960:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113963:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113967:	75 08                	jne    f0113971 <test_share_chunk+0x107>
f0113969:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011396c:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011396f:	74 28                	je     f0113999 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113971:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113974:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113977:	83 ec 0c             	sub    $0xc,%esp
f011397a:	50                   	push   %eax
f011397b:	ff 75 b0             	pushl  -0x50(%ebp)
f011397e:	68 90 a4 13 f0       	push   $0xf013a490
f0113983:	68 9e 03 00 00       	push   $0x39e
f0113988:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011398d:	e8 81 ca fe ff       	call   f0100413 <_warn>
f0113992:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113995:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113999:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011399d:	74 04                	je     f01139a3 <test_share_chunk+0x139>
f011399f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01139a3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f01139a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01139aa:	c1 e0 03             	shl    $0x3,%eax
f01139ad:	83 ec 08             	sub    $0x8,%esp
f01139b0:	68 fd 00 00 00       	push   $0xfd
f01139b5:	6a 07                	push   $0x7
f01139b7:	6a 03                	push   $0x3
f01139b9:	6a 07                	push   $0x7
f01139bb:	6a 03                	push   $0x3
f01139bd:	6a 01                	push   $0x1
f01139bf:	50                   	push   %eax
f01139c0:	68 00 40 10 f0       	push   $0xf0104000
f01139c5:	68 00 00 10 f0       	push   $0xf0100000
f01139ca:	ff 75 cc             	pushl  -0x34(%ebp)
f01139cd:	e8 96 29 00 00       	call   f0116368 <CCP>
f01139d2:	83 c4 30             	add    $0x30,%esp
f01139d5:	85 c0                	test   %eax,%eax
f01139d7:	75 1e                	jne    f01139f7 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01139d9:	83 ec 04             	sub    $0x4,%esp
f01139dc:	68 ec a4 13 f0       	push   $0xf013a4ec
f01139e1:	68 a6 03 00 00       	push   $0x3a6
f01139e6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01139eb:	e8 23 ca fe ff       	call   f0100413 <_warn>
f01139f0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01139f3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01139f7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01139fb:	74 04                	je     f0113a01 <test_share_chunk+0x197>
f01139fd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113a01:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a04:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113a07:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a0a:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113a0d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a10:	8a 00                	mov    (%eax),%al
f0113a12:	3c 41                	cmp    $0x41,%al
f0113a14:	75 09                	jne    f0113a1f <test_share_chunk+0x1b5>
f0113a16:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a19:	8a 00                	mov    (%eax),%al
f0113a1b:	3c 42                	cmp    $0x42,%al
f0113a1d:	74 1e                	je     f0113a3d <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113a1f:	83 ec 04             	sub    $0x4,%esp
f0113a22:	68 34 a5 13 f0       	push   $0xf013a534
f0113a27:	68 b0 03 00 00       	push   $0x3b0
f0113a2c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113a31:	e8 dd c9 fe ff       	call   f0100413 <_warn>
f0113a36:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113a39:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113a3d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a41:	74 04                	je     f0113a47 <test_share_chunk+0x1dd>
f0113a43:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a47:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113a4b:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113a51:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a54:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113a56:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113a5c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a5f:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113a61:	83 ec 0c             	sub    $0xc,%esp
f0113a64:	68 69 a5 13 f0       	push   $0xf013a569
f0113a69:	e8 a0 d2 fe ff       	call   f0100d0e <cprintf>
f0113a6e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113a71:	83 ec 0c             	sub    $0xc,%esp
f0113a74:	68 78 a5 13 f0       	push   $0xf013a578
f0113a79:	e8 90 d2 fe ff       	call   f0100d0e <cprintf>
f0113a7e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113a81:	e8 0b 93 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113a86:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113a89:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113a8c:	c1 e0 05             	shl    $0x5,%eax
f0113a8f:	83 ec 0c             	sub    $0xc,%esp
f0113a92:	68 02 0e 00 00       	push   $0xe02
f0113a97:	50                   	push   %eax
f0113a98:	68 00 00 00 40       	push   $0x40000000
f0113a9d:	68 00 00 00 f0       	push   $0xf0000000
f0113aa2:	ff 75 cc             	pushl  -0x34(%ebp)
f0113aa5:	e8 5d 51 ff ff       	call   f0108c07 <share_chunk>
f0113aaa:	83 c4 20             	add    $0x20,%esp
f0113aad:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ab0:	e8 dc 92 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113ab5:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113ab8:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113abc:	75 1f                	jne    f0113add <test_share_chunk+0x273>
f0113abe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ac1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113ac4:	89 c1                	mov    %eax,%ecx
f0113ac6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113ac9:	c1 e0 05             	shl    $0x5,%eax
f0113acc:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113acf:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113ad6:	99                   	cltd   
f0113ad7:	f7 fb                	idiv   %ebx
f0113ad9:	39 c1                	cmp    %eax,%ecx
f0113adb:	74 28                	je     f0113b05 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113add:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ae0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113ae3:	83 ec 0c             	sub    $0xc,%esp
f0113ae6:	50                   	push   %eax
f0113ae7:	ff 75 a8             	pushl  -0x58(%ebp)
f0113aea:	68 b4 a5 13 f0       	push   $0xf013a5b4
f0113aef:	68 c8 03 00 00       	push   $0x3c8
f0113af4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113af9:	e8 15 c9 fe ff       	call   f0100413 <_warn>
f0113afe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b01:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b05:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b09:	74 04                	je     f0113b0f <test_share_chunk+0x2a5>
f0113b0b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b0f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113b13:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113b1a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113b1d:	c1 e0 05             	shl    $0x5,%eax
f0113b20:	83 ec 08             	sub    $0x8,%esp
f0113b23:	6a 02                	push   $0x2
f0113b25:	6a 07                	push   $0x7
f0113b27:	6a 03                	push   $0x3
f0113b29:	68 07 0e 00 00       	push   $0xe07
f0113b2e:	68 03 0e 00 00       	push   $0xe03
f0113b33:	6a ff                	push   $0xffffffff
f0113b35:	50                   	push   %eax
f0113b36:	68 00 00 00 40       	push   $0x40000000
f0113b3b:	68 00 00 00 f0       	push   $0xf0000000
f0113b40:	ff 75 cc             	pushl  -0x34(%ebp)
f0113b43:	e8 20 28 00 00       	call   f0116368 <CCP>
f0113b48:	83 c4 30             	add    $0x30,%esp
f0113b4b:	85 c0                	test   %eax,%eax
f0113b4d:	75 25                	jne    f0113b74 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113b4f:	83 ec 04             	sub    $0x4,%esp
f0113b52:	68 ec a4 13 f0       	push   $0xf013a4ec
f0113b57:	68 d1 03 00 00       	push   $0x3d1
f0113b5c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113b61:	e8 ad c8 fe ff       	call   f0100413 <_warn>
f0113b66:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b69:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113b6d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113b74:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b77:	89 d0                	mov    %edx,%eax
f0113b79:	01 c0                	add    %eax,%eax
f0113b7b:	01 d0                	add    %edx,%eax
f0113b7d:	c1 e0 02             	shl    $0x2,%eax
f0113b80:	83 ec 08             	sub    $0x8,%esp
f0113b83:	6a 02                	push   $0x2
f0113b85:	6a 07                	push   $0x7
f0113b87:	6a 03                	push   $0x3
f0113b89:	68 07 0e 00 00       	push   $0xe07
f0113b8e:	68 03 0e 00 00       	push   $0xe03
f0113b93:	6a 02                	push   $0x2
f0113b95:	50                   	push   %eax
f0113b96:	68 00 00 00 40       	push   $0x40000000
f0113b9b:	68 00 00 00 f0       	push   $0xf0000000
f0113ba0:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ba3:	e8 c0 27 00 00       	call   f0116368 <CCP>
f0113ba8:	83 c4 30             	add    $0x30,%esp
f0113bab:	85 c0                	test   %eax,%eax
f0113bad:	75 1e                	jne    f0113bcd <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113baf:	83 ec 04             	sub    $0x4,%esp
f0113bb2:	68 ec a4 13 f0       	push   $0xf013a4ec
f0113bb7:	68 d8 03 00 00       	push   $0x3d8
f0113bbc:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113bc1:	e8 4d c8 fe ff       	call   f0100413 <_warn>
f0113bc6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113bc9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113bcd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bd1:	74 04                	je     f0113bd7 <test_share_chunk+0x36d>
f0113bd3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113bd7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0113bdb:	b8 bc 1e 88 f0       	mov    $0xf0881ebc,%eax
f0113be0:	05 00 00 00 10       	add    $0x10000000,%eax
f0113be5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113be8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113beb:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0113bf0:	83 ec 08             	sub    $0x8,%esp
f0113bf3:	6a 02                	push   $0x2
f0113bf5:	6a 07                	push   $0x7
f0113bf7:	6a 03                	push   $0x3
f0113bf9:	68 07 0e 00 00       	push   $0xe07
f0113bfe:	68 03 0e 00 00       	push   $0xe03
f0113c03:	6a 02                	push   $0x2
f0113c05:	50                   	push   %eax
f0113c06:	68 00 00 0a 40       	push   $0x400a0000
f0113c0b:	68 00 00 0a f0       	push   $0xf00a0000
f0113c10:	ff 75 cc             	pushl  -0x34(%ebp)
f0113c13:	e8 50 27 00 00       	call   f0116368 <CCP>
f0113c18:	83 c4 30             	add    $0x30,%esp
f0113c1b:	85 c0                	test   %eax,%eax
f0113c1d:	75 1e                	jne    f0113c3d <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113c1f:	83 ec 04             	sub    $0x4,%esp
f0113c22:	68 ec a4 13 f0       	push   $0xf013a4ec
f0113c27:	68 e2 03 00 00       	push   $0x3e2
f0113c2c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113c31:	e8 dd c7 fe ff       	call   f0100413 <_warn>
f0113c36:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c39:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c3d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c41:	74 04                	je     f0113c47 <test_share_chunk+0x3dd>
f0113c43:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c47:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113c4b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113c4f:	0f 84 a4 00 00 00    	je     f0113cf9 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0113c55:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0113c5c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c5f:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0113c62:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0113c69:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c6c:	8a 00                	mov    (%eax),%al
f0113c6e:	3c 41                	cmp    $0x41,%al
f0113c70:	75 09                	jne    f0113c7b <test_share_chunk+0x411>
f0113c72:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c75:	8a 00                	mov    (%eax),%al
f0113c77:	3c 41                	cmp    $0x41,%al
f0113c79:	74 1e                	je     f0113c99 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113c7b:	83 ec 04             	sub    $0x4,%esp
f0113c7e:	68 34 a5 13 f0       	push   $0xf013a534
f0113c83:	68 ef 03 00 00       	push   $0x3ef
f0113c88:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113c8d:	e8 81 c7 fe ff       	call   f0100413 <_warn>
f0113c92:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113c95:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113c99:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c9d:	74 04                	je     f0113ca3 <test_share_chunk+0x439>
f0113c9f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113ca3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113ca7:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0113cae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113cb1:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113cb4:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0113cbb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113cbe:	8a 00                	mov    (%eax),%al
f0113cc0:	3c 43                	cmp    $0x43,%al
f0113cc2:	75 09                	jne    f0113ccd <test_share_chunk+0x463>
f0113cc4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113cc7:	8a 00                	mov    (%eax),%al
f0113cc9:	3c 43                	cmp    $0x43,%al
f0113ccb:	74 1e                	je     f0113ceb <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113ccd:	83 ec 04             	sub    $0x4,%esp
f0113cd0:	68 34 a5 13 f0       	push   $0xf013a534
f0113cd5:	68 fa 03 00 00       	push   $0x3fa
f0113cda:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113cdf:	e8 2f c7 fe ff       	call   f0100413 <_warn>
f0113ce4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113ce7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113ceb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113cef:	74 04                	je     f0113cf5 <test_share_chunk+0x48b>
f0113cf1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113cf5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113cf9:	83 ec 0c             	sub    $0xc,%esp
f0113cfc:	68 43 9b 13 f0       	push   $0xf0139b43
f0113d01:	e8 08 d0 fe ff       	call   f0100d0e <cprintf>
f0113d06:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0113d09:	83 ec 0c             	sub    $0xc,%esp
f0113d0c:	68 04 a6 13 f0       	push   $0xf013a604
f0113d11:	e8 f8 cf fe ff       	call   f0100d0e <cprintf>
f0113d16:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113d19:	e8 73 90 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113d1e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113d21:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113d24:	89 d0                	mov    %edx,%eax
f0113d26:	c1 e0 03             	shl    $0x3,%eax
f0113d29:	01 d0                	add    %edx,%eax
f0113d2b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113d32:	01 d0                	add    %edx,%eax
f0113d34:	c1 e0 03             	shl    $0x3,%eax
f0113d37:	83 ec 0c             	sub    $0xc,%esp
f0113d3a:	6a 06                	push   $0x6
f0113d3c:	50                   	push   %eax
f0113d3d:	6a 00                	push   $0x0
f0113d3f:	68 00 00 00 40       	push   $0x40000000
f0113d44:	ff 75 cc             	pushl  -0x34(%ebp)
f0113d47:	e8 bb 4e ff ff       	call   f0108c07 <share_chunk>
f0113d4c:	83 c4 20             	add    $0x20,%esp
f0113d4f:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113d52:	e8 3a 90 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113d57:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113d5a:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0113d5e:	75 0b                	jne    f0113d6b <test_share_chunk+0x501>
f0113d60:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d63:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d66:	83 f8 01             	cmp    $0x1,%eax
f0113d69:	74 28                	je     f0113d93 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113d6b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d6e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d71:	83 ec 0c             	sub    $0xc,%esp
f0113d74:	50                   	push   %eax
f0113d75:	ff 75 a0             	pushl  -0x60(%ebp)
f0113d78:	68 b4 a5 13 f0       	push   $0xf013a5b4
f0113d7d:	68 10 04 00 00       	push   $0x410
f0113d82:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113d87:	e8 87 c6 fe ff       	call   f0100413 <_warn>
f0113d8c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d8f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d93:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d97:	74 04                	je     f0113d9d <test_share_chunk+0x533>
f0113d99:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d9d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113da1:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113da8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113dab:	05 00 80 02 00       	add    $0x28000,%eax
f0113db0:	c1 e0 02             	shl    $0x2,%eax
f0113db3:	83 ec 08             	sub    $0x8,%esp
f0113db6:	6a 02                	push   $0x2
f0113db8:	6a 07                	push   $0x7
f0113dba:	6a 03                	push   $0x3
f0113dbc:	6a 07                	push   $0x7
f0113dbe:	6a 07                	push   $0x7
f0113dc0:	6a ff                	push   $0xffffffff
f0113dc2:	50                   	push   %eax
f0113dc3:	6a 00                	push   $0x0
f0113dc5:	68 00 00 00 40       	push   $0x40000000
f0113dca:	ff 75 cc             	pushl  -0x34(%ebp)
f0113dcd:	e8 96 25 00 00       	call   f0116368 <CCP>
f0113dd2:	83 c4 30             	add    $0x30,%esp
f0113dd5:	85 c0                	test   %eax,%eax
f0113dd7:	75 25                	jne    f0113dfe <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113dd9:	83 ec 04             	sub    $0x4,%esp
f0113ddc:	68 ec a4 13 f0       	push   $0xf013a4ec
f0113de1:	68 19 04 00 00       	push   $0x419
f0113de6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113deb:	e8 23 c6 fe ff       	call   f0100413 <_warn>
f0113df0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113df3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113df7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113dfe:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e01:	89 d0                	mov    %edx,%eax
f0113e03:	01 c0                	add    %eax,%eax
f0113e05:	01 d0                	add    %edx,%eax
f0113e07:	c1 e0 02             	shl    $0x2,%eax
f0113e0a:	83 ec 08             	sub    $0x8,%esp
f0113e0d:	6a 02                	push   $0x2
f0113e0f:	6a 07                	push   $0x7
f0113e11:	6a 03                	push   $0x3
f0113e13:	6a 07                	push   $0x7
f0113e15:	6a 07                	push   $0x7
f0113e17:	6a 03                	push   $0x3
f0113e19:	50                   	push   %eax
f0113e1a:	6a 00                	push   $0x0
f0113e1c:	68 00 00 00 40       	push   $0x40000000
f0113e21:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e24:	e8 3f 25 00 00       	call   f0116368 <CCP>
f0113e29:	83 c4 30             	add    $0x30,%esp
f0113e2c:	85 c0                	test   %eax,%eax
f0113e2e:	75 1e                	jne    f0113e4e <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113e30:	83 ec 04             	sub    $0x4,%esp
f0113e33:	68 ec a4 13 f0       	push   $0xf013a4ec
f0113e38:	68 20 04 00 00       	push   $0x420
f0113e3d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113e42:	e8 cc c5 fe ff       	call   f0100413 <_warn>
f0113e47:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e4a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e4e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e52:	74 04                	je     f0113e58 <test_share_chunk+0x5ee>
f0113e54:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e58:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113e5c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e5f:	89 d0                	mov    %edx,%eax
f0113e61:	01 c0                	add    %eax,%eax
f0113e63:	01 d0                	add    %edx,%eax
f0113e65:	c1 e0 02             	shl    $0x2,%eax
f0113e68:	f7 d8                	neg    %eax
f0113e6a:	05 00 00 0a 00       	add    $0xa0000,%eax
f0113e6f:	83 ec 08             	sub    $0x8,%esp
f0113e72:	6a 02                	push   $0x2
f0113e74:	6a 07                	push   $0x7
f0113e76:	6a 03                	push   $0x3
f0113e78:	6a 07                	push   $0x7
f0113e7a:	6a 07                	push   $0x7
f0113e7c:	6a 02                	push   $0x2
f0113e7e:	50                   	push   %eax
f0113e7f:	68 00 30 00 00       	push   $0x3000
f0113e84:	68 00 30 00 40       	push   $0x40003000
f0113e89:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e8c:	e8 d7 24 00 00       	call   f0116368 <CCP>
f0113e91:	83 c4 30             	add    $0x30,%esp
f0113e94:	85 c0                	test   %eax,%eax
f0113e96:	75 1e                	jne    f0113eb6 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113e98:	83 ec 04             	sub    $0x4,%esp
f0113e9b:	68 ec a4 13 f0       	push   $0xf013a4ec
f0113ea0:	68 28 04 00 00       	push   $0x428
f0113ea5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113eaa:	e8 64 c5 fe ff       	call   f0100413 <_warn>
f0113eaf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113eb2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113eb6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113eba:	74 04                	je     f0113ec0 <test_share_chunk+0x656>
f0113ebc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ec0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113ec4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ec7:	c1 e0 02             	shl    $0x2,%eax
f0113eca:	83 ec 08             	sub    $0x8,%esp
f0113ecd:	6a 02                	push   $0x2
f0113ecf:	6a 07                	push   $0x7
f0113ed1:	6a 03                	push   $0x3
f0113ed3:	6a 07                	push   $0x7
f0113ed5:	6a 07                	push   $0x7
f0113ed7:	6a 03                	push   $0x3
f0113ed9:	50                   	push   %eax
f0113eda:	68 00 00 0a 00       	push   $0xa0000
f0113edf:	68 00 00 0a 40       	push   $0x400a0000
f0113ee4:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ee7:	e8 7c 24 00 00       	call   f0116368 <CCP>
f0113eec:	83 c4 30             	add    $0x30,%esp
f0113eef:	85 c0                	test   %eax,%eax
f0113ef1:	75 1e                	jne    f0113f11 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113ef3:	83 ec 04             	sub    $0x4,%esp
f0113ef6:	68 ec a4 13 f0       	push   $0xf013a4ec
f0113efb:	68 30 04 00 00       	push   $0x430
f0113f00:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113f05:	e8 09 c5 fe ff       	call   f0100413 <_warn>
f0113f0a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f0d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f11:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f15:	74 04                	je     f0113f1b <test_share_chunk+0x6b1>
f0113f17:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f1b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113f1f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113f23:	0f 84 92 00 00 00    	je     f0113fbb <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0113f29:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0113f30:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0113f37:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0113f3e:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0113f45:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113f48:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0113f4b:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0113f52:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113f59:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f5c:	8a 00                	mov    (%eax),%al
f0113f5e:	3c 41                	cmp    $0x41,%al
f0113f60:	75 2d                	jne    f0113f8f <test_share_chunk+0x725>
f0113f62:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f65:	8a 00                	mov    (%eax),%al
f0113f67:	3c 41                	cmp    $0x41,%al
f0113f69:	75 24                	jne    f0113f8f <test_share_chunk+0x725>
f0113f6b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113f6e:	8a 00                	mov    (%eax),%al
f0113f70:	3c 41                	cmp    $0x41,%al
f0113f72:	75 1b                	jne    f0113f8f <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113f74:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113f77:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0113f79:	3c 44                	cmp    $0x44,%al
f0113f7b:	75 12                	jne    f0113f8f <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0113f7d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113f80:	8a 00                	mov    (%eax),%al
f0113f82:	3c 44                	cmp    $0x44,%al
f0113f84:	75 09                	jne    f0113f8f <test_share_chunk+0x725>
f0113f86:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113f89:	8a 00                	mov    (%eax),%al
f0113f8b:	3c 44                	cmp    $0x44,%al
f0113f8d:	74 1e                	je     f0113fad <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113f8f:	83 ec 04             	sub    $0x4,%esp
f0113f92:	68 34 a5 13 f0       	push   $0xf013a534
f0113f97:	68 42 04 00 00       	push   $0x442
f0113f9c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113fa1:	e8 6d c4 fe ff       	call   f0100413 <_warn>
f0113fa6:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113fa9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113fad:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fb1:	74 04                	je     f0113fb7 <test_share_chunk+0x74d>
f0113fb3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113fb7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113fbb:	83 ec 0c             	sub    $0xc,%esp
f0113fbe:	68 a6 9b 13 f0       	push   $0xf0139ba6
f0113fc3:	e8 46 cd fe ff       	call   f0100d0e <cprintf>
f0113fc8:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0113fcb:	83 ec 0c             	sub    $0xc,%esp
f0113fce:	68 40 a6 13 f0       	push   $0xf013a640
f0113fd3:	e8 36 cd fe ff       	call   f0100d0e <cprintf>
f0113fd8:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113fdb:	e8 b1 8d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0113fe0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0113fe3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113fe6:	89 d0                	mov    %edx,%eax
f0113fe8:	01 c0                	add    %eax,%eax
f0113fea:	01 d0                	add    %edx,%eax
f0113fec:	01 c0                	add    %eax,%eax
f0113fee:	01 d0                	add    %edx,%eax
f0113ff0:	83 ec 0c             	sub    $0xc,%esp
f0113ff3:	6a 04                	push   $0x4
f0113ff5:	50                   	push   %eax
f0113ff6:	68 00 fc 3f 00       	push   $0x3ffc00
f0113ffb:	68 00 fc 09 00       	push   $0x9fc00
f0114000:	ff 75 cc             	pushl  -0x34(%ebp)
f0114003:	e8 ff 4b ff ff       	call   f0108c07 <share_chunk>
f0114008:	83 c4 20             	add    $0x20,%esp
f011400b:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011400e:	e8 7e 8d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0114013:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114016:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f011401a:	75 0b                	jne    f0114027 <test_share_chunk+0x7bd>
f011401c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011401f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114022:	83 f8 01             	cmp    $0x1,%eax
f0114025:	74 28                	je     f011404f <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114027:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011402a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011402d:	83 ec 0c             	sub    $0xc,%esp
f0114030:	50                   	push   %eax
f0114031:	ff 75 8c             	pushl  -0x74(%ebp)
f0114034:	68 b4 a5 13 f0       	push   $0xf013a5b4
f0114039:	68 58 04 00 00       	push   $0x458
f011403e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114043:	e8 cb c3 fe ff       	call   f0100413 <_warn>
f0114048:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011404b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011404f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114053:	74 04                	je     f0114059 <test_share_chunk+0x7ef>
f0114055:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114059:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011405d:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114064:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114067:	89 d0                	mov    %edx,%eax
f0114069:	01 c0                	add    %eax,%eax
f011406b:	01 d0                	add    %edx,%eax
f011406d:	c1 e0 02             	shl    $0x2,%eax
f0114070:	83 ec 08             	sub    $0x8,%esp
f0114073:	6a 02                	push   $0x2
f0114075:	6a 07                	push   $0x7
f0114077:	6a 07                	push   $0x7
f0114079:	6a 07                	push   $0x7
f011407b:	6a 05                	push   $0x5
f011407d:	6a ff                	push   $0xffffffff
f011407f:	50                   	push   %eax
f0114080:	68 00 f0 3f 00       	push   $0x3ff000
f0114085:	68 00 f0 09 00       	push   $0x9f000
f011408a:	ff 75 cc             	pushl  -0x34(%ebp)
f011408d:	e8 d6 22 00 00       	call   f0116368 <CCP>
f0114092:	83 c4 30             	add    $0x30,%esp
f0114095:	85 c0                	test   %eax,%eax
f0114097:	75 25                	jne    f01140be <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114099:	83 ec 04             	sub    $0x4,%esp
f011409c:	68 ec a4 13 f0       	push   $0xf013a4ec
f01140a1:	68 61 04 00 00       	push   $0x461
f01140a6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01140ab:	e8 63 c3 fe ff       	call   f0100413 <_warn>
f01140b0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140b3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01140b7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01140be:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140c2:	74 04                	je     f01140c8 <test_share_chunk+0x85e>
f01140c4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140c8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01140cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01140cf:	c1 e0 02             	shl    $0x2,%eax
f01140d2:	83 ec 08             	sub    $0x8,%esp
f01140d5:	6a 02                	push   $0x2
f01140d7:	6a 07                	push   $0x7
f01140d9:	6a 07                	push   $0x7
f01140db:	6a 07                	push   $0x7
f01140dd:	6a 05                	push   $0x5
f01140df:	6a 03                	push   $0x3
f01140e1:	50                   	push   %eax
f01140e2:	68 00 f0 3f 00       	push   $0x3ff000
f01140e7:	68 00 f0 09 00       	push   $0x9f000
f01140ec:	ff 75 cc             	pushl  -0x34(%ebp)
f01140ef:	e8 74 22 00 00       	call   f0116368 <CCP>
f01140f4:	83 c4 30             	add    $0x30,%esp
f01140f7:	85 c0                	test   %eax,%eax
f01140f9:	75 1e                	jne    f0114119 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01140fb:	83 ec 04             	sub    $0x4,%esp
f01140fe:	68 ec a4 13 f0       	push   $0xf013a4ec
f0114103:	68 6a 04 00 00       	push   $0x46a
f0114108:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011410d:	e8 01 c3 fe ff       	call   f0100413 <_warn>
f0114112:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114115:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114119:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011411d:	74 04                	je     f0114123 <test_share_chunk+0x8b9>
f011411f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114123:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114127:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011412a:	c1 e0 03             	shl    $0x3,%eax
f011412d:	83 ec 08             	sub    $0x8,%esp
f0114130:	6a 02                	push   $0x2
f0114132:	6a 07                	push   $0x7
f0114134:	6a 07                	push   $0x7
f0114136:	6a 07                	push   $0x7
f0114138:	6a 05                	push   $0x5
f011413a:	6a 04                	push   $0x4
f011413c:	50                   	push   %eax
f011413d:	68 00 00 40 00       	push   $0x400000
f0114142:	68 00 00 0a 00       	push   $0xa0000
f0114147:	ff 75 cc             	pushl  -0x34(%ebp)
f011414a:	e8 19 22 00 00       	call   f0116368 <CCP>
f011414f:	83 c4 30             	add    $0x30,%esp
f0114152:	85 c0                	test   %eax,%eax
f0114154:	75 1e                	jne    f0114174 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114156:	83 ec 04             	sub    $0x4,%esp
f0114159:	68 ec a4 13 f0       	push   $0xf013a4ec
f011415e:	68 72 04 00 00       	push   $0x472
f0114163:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114168:	e8 a6 c2 fe ff       	call   f0100413 <_warn>
f011416d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114170:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114174:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114178:	74 04                	je     f011417e <test_share_chunk+0x914>
f011417a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011417e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114182:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114186:	0f 84 b2 00 00 00    	je     f011423e <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f011418c:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0114193:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f011419a:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01141a1:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01141a8:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f01141af:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01141b6:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01141bd:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01141c4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141c7:	8a 00                	mov    (%eax),%al
f01141c9:	3c 44                	cmp    $0x44,%al
f01141cb:	75 45                	jne    f0114212 <test_share_chunk+0x9a8>
f01141cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01141d0:	8a 00                	mov    (%eax),%al
f01141d2:	3c 44                	cmp    $0x44,%al
f01141d4:	75 3c                	jne    f0114212 <test_share_chunk+0x9a8>
f01141d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01141d9:	8a 00                	mov    (%eax),%al
f01141db:	3c 44                	cmp    $0x44,%al
f01141dd:	75 33                	jne    f0114212 <test_share_chunk+0x9a8>
f01141df:	8b 45 98             	mov    -0x68(%ebp),%eax
f01141e2:	8a 00                	mov    (%eax),%al
f01141e4:	3c 44                	cmp    $0x44,%al
f01141e6:	75 2a                	jne    f0114212 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01141e8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01141eb:	8a 10                	mov    (%eax),%dl
f01141ed:	8b 45 90             	mov    -0x70(%ebp),%eax
f01141f0:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01141f2:	38 c2                	cmp    %al,%dl
f01141f4:	75 1c                	jne    f0114212 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01141f6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01141f9:	8a 10                	mov    (%eax),%dl
f01141fb:	8b 45 88             	mov    -0x78(%ebp),%eax
f01141fe:	8a 00                	mov    (%eax),%al
f0114200:	38 c2                	cmp    %al,%dl
f0114202:	75 0e                	jne    f0114212 <test_share_chunk+0x9a8>
f0114204:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114207:	8a 10                	mov    (%eax),%dl
f0114209:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011420c:	8a 00                	mov    (%eax),%al
f011420e:	38 c2                	cmp    %al,%dl
f0114210:	74 1e                	je     f0114230 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114212:	83 ec 04             	sub    $0x4,%esp
f0114215:	68 34 a5 13 f0       	push   $0xf013a534
f011421a:	68 87 04 00 00       	push   $0x487
f011421f:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114224:	e8 ea c1 fe ff       	call   f0100413 <_warn>
f0114229:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011422c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114230:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114234:	74 04                	je     f011423a <test_share_chunk+0x9d0>
f0114236:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011423a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f011423e:	83 ec 0c             	sub    $0xc,%esp
f0114241:	68 78 a6 13 f0       	push   $0xf013a678
f0114246:	e8 c3 ca fe ff       	call   f0100d0e <cprintf>
f011424b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f011424e:	83 ec 08             	sub    $0x8,%esp
f0114251:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114254:	68 88 a6 13 f0       	push   $0xf013a688
f0114259:	e8 b0 ca fe ff       	call   f0100d0e <cprintf>
f011425e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114261:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114265:	75 10                	jne    f0114277 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0114267:	83 ec 0c             	sub    $0xc,%esp
f011426a:	68 b8 a6 13 f0       	push   $0xf013a6b8
f011426f:	e8 9a ca fe ff       	call   f0100d0e <cprintf>
f0114274:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114277:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f011427c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011427f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114282:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114285:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011428a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011428d:	5b                   	pop    %ebx
f011428e:	5e                   	pop    %esi
f011428f:	5f                   	pop    %edi
f0114290:	5d                   	pop    %ebp
f0114291:	c3                   	ret    

f0114292 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0114292:	55                   	push   %ebp
f0114293:	89 e5                	mov    %esp,%ebp
f0114295:	57                   	push   %edi
f0114296:	56                   	push   %esi
f0114297:	53                   	push   %ebx
f0114298:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011429e:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01142a4:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f01142a9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01142ae:	89 c7                	mov    %eax,%edi
f01142b0:	89 de                	mov    %ebx,%esi
f01142b2:	89 d1                	mov    %edx,%ecx
f01142b4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01142b6:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01142bc:	b9 23 00 00 00       	mov    $0x23,%ecx
f01142c1:	b0 00                	mov    $0x0,%al
f01142c3:	89 d7                	mov    %edx,%edi
f01142c5:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01142c7:	6a 00                	push   $0x0
f01142c9:	6a 0a                	push   $0xa
f01142cb:	6a 14                	push   $0x14
f01142cd:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01142d3:	50                   	push   %eax
f01142d4:	e8 7f 4d ff ff       	call   f0109058 <env_create>
f01142d9:	83 c4 10             	add    $0x10,%esp
f01142dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01142df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01142e2:	8b 40 5c             	mov    0x5c(%eax),%eax
f01142e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f01142e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01142eb:	8b 40 60             	mov    0x60(%eax),%eax
f01142ee:	89 45 90             	mov    %eax,-0x70(%ebp)
f01142f1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01142f4:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01142f7:	83 ec 0c             	sub    $0xc,%esp
f01142fa:	ff 75 d0             	pushl  -0x30(%ebp)
f01142fd:	e8 32 20 00 00       	call   f0116334 <ClearUserSpace>
f0114302:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114305:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011430c:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0114313:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011431a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f011431e:	83 ec 0c             	sub    $0xc,%esp
f0114321:	68 f4 a6 13 f0       	push   $0xf013a6f4
f0114326:	e8 e3 c9 fe ff       	call   f0100d0e <cprintf>
f011432b:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f011432e:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114335:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f011433c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011433f:	8a 00                	mov    (%eax),%al
f0114341:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114347:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011434a:	8a 00                	mov    (%eax),%al
f011434c:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114352:	83 ec 08             	sub    $0x8,%esp
f0114355:	68 00 f0 bf ef       	push   $0xefbff000
f011435a:	ff 75 d0             	pushl  -0x30(%ebp)
f011435d:	e8 b3 1f 00 00       	call   f0116315 <GP>
f0114362:	83 c4 10             	add    $0x10,%esp
f0114365:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114368:	e8 24 8a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011436d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114370:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114373:	c1 e0 02             	shl    $0x2,%eax
f0114376:	6a 02                	push   $0x2
f0114378:	50                   	push   %eax
f0114379:	68 00 f0 bf ef       	push   $0xefbff000
f011437e:	ff 75 d0             	pushl  -0x30(%ebp)
f0114381:	e8 94 49 ff ff       	call   f0108d1a <allocate_chunk>
f0114386:	83 c4 10             	add    $0x10,%esp
f0114389:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011438c:	e8 00 8a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0114391:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114394:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114398:	75 08                	jne    f01143a2 <test_allocate_chunk+0x110>
f011439a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011439d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01143a0:	74 2a                	je     f01143cc <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01143a2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01143a5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01143a8:	83 ec 08             	sub    $0x8,%esp
f01143ab:	6a 00                	push   $0x0
f01143ad:	50                   	push   %eax
f01143ae:	ff 75 b0             	pushl  -0x50(%ebp)
f01143b1:	68 20 a7 13 f0       	push   $0xf013a720
f01143b6:	68 c3 04 00 00       	push   $0x4c3
f01143bb:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01143c0:	e8 4e c0 fe ff       	call   f0100413 <_warn>
f01143c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01143cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143d0:	74 04                	je     f01143d6 <test_allocate_chunk+0x144>
f01143d2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01143d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01143da:	e8 b2 89 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01143df:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f01143e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01143e5:	01 c0                	add    %eax,%eax
f01143e7:	89 c1                	mov    %eax,%ecx
f01143e9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01143ec:	89 d0                	mov    %edx,%eax
f01143ee:	c1 e0 02             	shl    $0x2,%eax
f01143f1:	01 d0                	add    %edx,%eax
f01143f3:	f7 d8                	neg    %eax
f01143f5:	2d 00 00 40 10       	sub    $0x10400000,%eax
f01143fa:	6a 02                	push   $0x2
f01143fc:	51                   	push   %ecx
f01143fd:	50                   	push   %eax
f01143fe:	ff 75 d0             	pushl  -0x30(%ebp)
f0114401:	e8 14 49 ff ff       	call   f0108d1a <allocate_chunk>
f0114406:	83 c4 10             	add    $0x10,%esp
f0114409:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011440c:	e8 80 89 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0114411:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114414:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114418:	75 08                	jne    f0114422 <test_allocate_chunk+0x190>
f011441a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011441d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114420:	74 2a                	je     f011444c <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114422:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114425:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114428:	83 ec 08             	sub    $0x8,%esp
f011442b:	6a 00                	push   $0x0
f011442d:	50                   	push   %eax
f011442e:	ff 75 b0             	pushl  -0x50(%ebp)
f0114431:	68 20 a7 13 f0       	push   $0xf013a720
f0114436:	68 d1 04 00 00       	push   $0x4d1
f011443b:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114440:	e8 ce bf fe ff       	call   f0100413 <_warn>
f0114445:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114448:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011444c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114450:	74 04                	je     f0114456 <test_allocate_chunk+0x1c4>
f0114452:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114456:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f011445a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011445d:	c1 e0 02             	shl    $0x2,%eax
f0114460:	83 ec 08             	sub    $0x8,%esp
f0114463:	6a 03                	push   $0x3
f0114465:	6a 00                	push   $0x0
f0114467:	6a 00                	push   $0x0
f0114469:	68 ff 0f 00 00       	push   $0xfff
f011446e:	ff 75 b8             	pushl  -0x48(%ebp)
f0114471:	6a 01                	push   $0x1
f0114473:	50                   	push   %eax
f0114474:	68 00 f0 bf ef       	push   $0xefbff000
f0114479:	6a 00                	push   $0x0
f011447b:	ff 75 d0             	pushl  -0x30(%ebp)
f011447e:	e8 e5 1e 00 00       	call   f0116368 <CCP>
f0114483:	83 c4 30             	add    $0x30,%esp
f0114486:	85 c0                	test   %eax,%eax
f0114488:	75 1e                	jne    f01144a8 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011448a:	83 ec 04             	sub    $0x4,%esp
f011448d:	68 88 a7 13 f0       	push   $0xf013a788
f0114492:	68 d9 04 00 00       	push   $0x4d9
f0114497:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011449c:	e8 72 bf fe ff       	call   f0100413 <_warn>
f01144a1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01144a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144ac:	74 04                	je     f01144b2 <test_allocate_chunk+0x220>
f01144ae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01144b6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01144b9:	8a 10                	mov    (%eax),%dl
f01144bb:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f01144c1:	38 c2                	cmp    %al,%dl
f01144c3:	75 0f                	jne    f01144d4 <test_allocate_chunk+0x242>
f01144c5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01144c8:	8a 10                	mov    (%eax),%dl
f01144ca:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f01144d0:	38 c2                	cmp    %al,%dl
f01144d2:	74 1e                	je     f01144f2 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01144d4:	83 ec 04             	sub    $0x4,%esp
f01144d7:	68 d4 a7 13 f0       	push   $0xf013a7d4
f01144dc:	68 e1 04 00 00       	push   $0x4e1
f01144e1:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01144e6:	e8 28 bf fe ff       	call   f0100413 <_warn>
f01144eb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01144ee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144f2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144f6:	74 04                	je     f01144fc <test_allocate_chunk+0x26a>
f01144f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144fc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114500:	83 ec 0c             	sub    $0xc,%esp
f0114503:	68 69 a5 13 f0       	push   $0xf013a569
f0114508:	e8 01 c8 fe ff       	call   f0100d0e <cprintf>
f011450d:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114510:	83 ec 0c             	sub    $0xc,%esp
f0114513:	68 0c a8 13 f0       	push   $0xf013a80c
f0114518:	e8 f1 c7 fe ff       	call   f0100d0e <cprintf>
f011451d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114520:	e8 6c 88 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0114525:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114528:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011452b:	c1 e0 05             	shl    $0x5,%eax
f011452e:	68 02 0e 00 00       	push   $0xe02
f0114533:	50                   	push   %eax
f0114534:	6a 00                	push   $0x0
f0114536:	ff 75 d0             	pushl  -0x30(%ebp)
f0114539:	e8 dc 47 ff ff       	call   f0108d1a <allocate_chunk>
f011453e:	83 c4 10             	add    $0x10,%esp
f0114541:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114544:	e8 48 88 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0114549:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f011454c:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114550:	75 36                	jne    f0114588 <test_allocate_chunk+0x2f6>
f0114552:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114555:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114558:	89 c1                	mov    %eax,%ecx
f011455a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011455d:	c1 e0 05             	shl    $0x5,%eax
f0114560:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114563:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011456a:	99                   	cltd   
f011456b:	f7 fe                	idiv   %esi
f011456d:	89 c3                	mov    %eax,%ebx
f011456f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114572:	c1 e0 05             	shl    $0x5,%eax
f0114575:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114578:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011457f:	99                   	cltd   
f0114580:	f7 fe                	idiv   %esi
f0114582:	01 d8                	add    %ebx,%eax
f0114584:	39 c1                	cmp    %eax,%ecx
f0114586:	74 54                	je     f01145dc <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114588:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011458b:	c1 e0 05             	shl    $0x5,%eax
f011458e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114591:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114598:	99                   	cltd   
f0114599:	f7 ff                	idiv   %edi
f011459b:	89 c1                	mov    %eax,%ecx
f011459d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01145a0:	c1 e0 05             	shl    $0x5,%eax
f01145a3:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01145a6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01145ad:	99                   	cltd   
f01145ae:	f7 fe                	idiv   %esi
f01145b0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01145b3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145b6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01145b9:	83 ec 08             	sub    $0x8,%esp
f01145bc:	52                   	push   %edx
f01145bd:	50                   	push   %eax
f01145be:	ff 75 a8             	pushl  -0x58(%ebp)
f01145c1:	68 4c a8 13 f0       	push   $0xf013a84c
f01145c6:	68 f6 04 00 00       	push   $0x4f6
f01145cb:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01145d0:	e8 3e be fe ff       	call   f0100413 <_warn>
f01145d5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145d8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145dc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145e0:	74 04                	je     f01145e6 <test_allocate_chunk+0x354>
f01145e2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145e6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01145ea:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01145f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01145f4:	c1 e0 05             	shl    $0x5,%eax
f01145f7:	83 ec 08             	sub    $0x8,%esp
f01145fa:	6a 03                	push   $0x3
f01145fc:	6a 00                	push   $0x0
f01145fe:	6a 00                	push   $0x0
f0114600:	68 07 0e 00 00       	push   $0xe07
f0114605:	68 03 0e 00 00       	push   $0xe03
f011460a:	6a 01                	push   $0x1
f011460c:	50                   	push   %eax
f011460d:	6a 00                	push   $0x0
f011460f:	6a 00                	push   $0x0
f0114611:	ff 75 d0             	pushl  -0x30(%ebp)
f0114614:	e8 4f 1d 00 00       	call   f0116368 <CCP>
f0114619:	83 c4 30             	add    $0x30,%esp
f011461c:	85 c0                	test   %eax,%eax
f011461e:	75 25                	jne    f0114645 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114620:	83 ec 04             	sub    $0x4,%esp
f0114623:	68 88 a7 13 f0       	push   $0xf013a788
f0114628:	68 ff 04 00 00       	push   $0x4ff
f011462d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114632:	e8 dc bd fe ff       	call   f0100413 <_warn>
f0114637:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011463a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011463e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114645:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114649:	74 04                	je     f011464f <test_allocate_chunk+0x3bd>
f011464b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011464f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114653:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114657:	74 5a                	je     f01146b3 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114659:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011465c:	01 c0                	add    %eax,%eax
f011465e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114661:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114664:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114667:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011466a:	01 c0                	add    %eax,%eax
f011466c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011466f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114672:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114675:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114678:	8a 00                	mov    (%eax),%al
f011467a:	3c 4b                	cmp    $0x4b,%al
f011467c:	75 09                	jne    f0114687 <test_allocate_chunk+0x3f5>
f011467e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114681:	8a 00                	mov    (%eax),%al
f0114683:	3c 4d                	cmp    $0x4d,%al
f0114685:	74 1e                	je     f01146a5 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114687:	83 ec 04             	sub    $0x4,%esp
f011468a:	68 d4 a7 13 f0       	push   $0xf013a7d4
f011468f:	68 0d 05 00 00       	push   $0x50d
f0114694:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114699:	e8 75 bd fe ff       	call   f0100413 <_warn>
f011469e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01146a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01146a5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146a9:	74 04                	je     f01146af <test_allocate_chunk+0x41d>
f01146ab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01146af:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01146b3:	83 ec 0c             	sub    $0xc,%esp
f01146b6:	68 43 9b 13 f0       	push   $0xf0139b43
f01146bb:	e8 4e c6 fe ff       	call   f0100d0e <cprintf>
f01146c0:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f01146c3:	83 ec 0c             	sub    $0xc,%esp
f01146c6:	68 ac a8 13 f0       	push   $0xf013a8ac
f01146cb:	e8 3e c6 fe ff       	call   f0100d0e <cprintf>
f01146d0:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01146d3:	e8 b9 86 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01146d8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f01146db:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146de:	c1 e0 06             	shl    $0x6,%eax
f01146e1:	89 c2                	mov    %eax,%edx
f01146e3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146e6:	c1 e0 05             	shl    $0x5,%eax
f01146e9:	6a 00                	push   $0x0
f01146eb:	52                   	push   %edx
f01146ec:	50                   	push   %eax
f01146ed:	ff 75 d0             	pushl  -0x30(%ebp)
f01146f0:	e8 25 46 ff ff       	call   f0108d1a <allocate_chunk>
f01146f5:	83 c4 10             	add    $0x10,%esp
f01146f8:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01146fb:	e8 91 86 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0114700:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114703:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114707:	75 36                	jne    f011473f <test_allocate_chunk+0x4ad>
f0114709:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011470c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011470f:	89 c1                	mov    %eax,%ecx
f0114711:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114714:	c1 e0 06             	shl    $0x6,%eax
f0114717:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011471a:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114721:	99                   	cltd   
f0114722:	f7 ff                	idiv   %edi
f0114724:	89 c3                	mov    %eax,%ebx
f0114726:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114729:	c1 e0 06             	shl    $0x6,%eax
f011472c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011472f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114736:	99                   	cltd   
f0114737:	f7 fe                	idiv   %esi
f0114739:	01 d8                	add    %ebx,%eax
f011473b:	39 c1                	cmp    %eax,%ecx
f011473d:	74 54                	je     f0114793 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f011473f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114742:	c1 e0 06             	shl    $0x6,%eax
f0114745:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114748:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011474f:	99                   	cltd   
f0114750:	f7 fb                	idiv   %ebx
f0114752:	89 c1                	mov    %eax,%ecx
f0114754:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114757:	c1 e0 06             	shl    $0x6,%eax
f011475a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011475d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114764:	99                   	cltd   
f0114765:	f7 ff                	idiv   %edi
f0114767:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011476a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011476d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114770:	83 ec 08             	sub    $0x8,%esp
f0114773:	52                   	push   %edx
f0114774:	50                   	push   %eax
f0114775:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114778:	68 4c a8 13 f0       	push   $0xf013a84c
f011477d:	68 23 05 00 00       	push   $0x523
f0114782:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114787:	e8 87 bc fe ff       	call   f0100413 <_warn>
f011478c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011478f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114793:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114797:	74 04                	je     f011479d <test_allocate_chunk+0x50b>
f0114799:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011479d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01147a1:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01147a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01147ab:	c1 e0 06             	shl    $0x6,%eax
f01147ae:	89 c2                	mov    %eax,%edx
f01147b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01147b3:	c1 e0 05             	shl    $0x5,%eax
f01147b6:	83 ec 08             	sub    $0x8,%esp
f01147b9:	6a 03                	push   $0x3
f01147bb:	6a 00                	push   $0x0
f01147bd:	6a 00                	push   $0x0
f01147bf:	68 07 0e 00 00       	push   $0xe07
f01147c4:	6a 01                	push   $0x1
f01147c6:	6a 01                	push   $0x1
f01147c8:	52                   	push   %edx
f01147c9:	50                   	push   %eax
f01147ca:	6a 00                	push   $0x0
f01147cc:	ff 75 d0             	pushl  -0x30(%ebp)
f01147cf:	e8 94 1b 00 00       	call   f0116368 <CCP>
f01147d4:	83 c4 30             	add    $0x30,%esp
f01147d7:	85 c0                	test   %eax,%eax
f01147d9:	75 25                	jne    f0114800 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01147db:	83 ec 04             	sub    $0x4,%esp
f01147de:	68 88 a7 13 f0       	push   $0xf013a788
f01147e3:	68 2c 05 00 00       	push   $0x52c
f01147e8:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01147ed:	e8 21 bc fe ff       	call   f0100413 <_warn>
f01147f2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01147f5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01147f9:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114800:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114804:	74 04                	je     f011480a <test_allocate_chunk+0x578>
f0114806:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011480a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f011480e:	83 ec 0c             	sub    $0xc,%esp
f0114811:	68 a6 9b 13 f0       	push   $0xf0139ba6
f0114816:	e8 f3 c4 fe ff       	call   f0100d0e <cprintf>
f011481b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f011481e:	83 ec 0c             	sub    $0xc,%esp
f0114821:	68 ec a8 13 f0       	push   $0xf013a8ec
f0114826:	e8 e3 c4 fe ff       	call   f0100d0e <cprintf>
f011482b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011482e:	e8 5e 85 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0114833:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114836:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114839:	c1 e0 06             	shl    $0x6,%eax
f011483c:	68 06 0e 00 00       	push   $0xe06
f0114841:	50                   	push   %eax
f0114842:	68 00 00 00 80       	push   $0x80000000
f0114847:	ff 75 d0             	pushl  -0x30(%ebp)
f011484a:	e8 cb 44 ff ff       	call   f0108d1a <allocate_chunk>
f011484f:	83 c4 10             	add    $0x10,%esp
f0114852:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114855:	e8 37 85 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011485a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f011485d:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114861:	75 36                	jne    f0114899 <test_allocate_chunk+0x607>
f0114863:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114866:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114869:	89 c1                	mov    %eax,%ecx
f011486b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011486e:	c1 e0 06             	shl    $0x6,%eax
f0114871:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114874:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011487b:	99                   	cltd   
f011487c:	f7 fb                	idiv   %ebx
f011487e:	89 c3                	mov    %eax,%ebx
f0114880:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114883:	c1 e0 06             	shl    $0x6,%eax
f0114886:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114889:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114890:	99                   	cltd   
f0114891:	f7 fe                	idiv   %esi
f0114893:	01 d8                	add    %ebx,%eax
f0114895:	39 c1                	cmp    %eax,%ecx
f0114897:	74 54                	je     f01148ed <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114899:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011489c:	c1 e0 06             	shl    $0x6,%eax
f011489f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01148a2:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01148a9:	99                   	cltd   
f01148aa:	f7 ff                	idiv   %edi
f01148ac:	89 c1                	mov    %eax,%ecx
f01148ae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148b1:	c1 e0 06             	shl    $0x6,%eax
f01148b4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01148b7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01148be:	99                   	cltd   
f01148bf:	f7 fb                	idiv   %ebx
f01148c1:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01148c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01148c7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01148ca:	83 ec 08             	sub    $0x8,%esp
f01148cd:	52                   	push   %edx
f01148ce:	50                   	push   %eax
f01148cf:	ff 75 9c             	pushl  -0x64(%ebp)
f01148d2:	68 4c a8 13 f0       	push   $0xf013a84c
f01148d7:	68 42 05 00 00       	push   $0x542
f01148dc:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01148e1:	e8 2d bb fe ff       	call   f0100413 <_warn>
f01148e6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148e9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148ed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148f1:	74 04                	je     f01148f7 <test_allocate_chunk+0x665>
f01148f3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148f7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01148fb:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114902:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114905:	c1 e0 06             	shl    $0x6,%eax
f0114908:	83 ec 08             	sub    $0x8,%esp
f011490b:	6a 03                	push   $0x3
f011490d:	6a 00                	push   $0x0
f011490f:	6a 00                	push   $0x0
f0114911:	68 07 0e 00 00       	push   $0xe07
f0114916:	68 07 0e 00 00       	push   $0xe07
f011491b:	6a 01                	push   $0x1
f011491d:	50                   	push   %eax
f011491e:	68 00 00 00 80       	push   $0x80000000
f0114923:	6a 00                	push   $0x0
f0114925:	ff 75 d0             	pushl  -0x30(%ebp)
f0114928:	e8 3b 1a 00 00       	call   f0116368 <CCP>
f011492d:	83 c4 30             	add    $0x30,%esp
f0114930:	85 c0                	test   %eax,%eax
f0114932:	75 25                	jne    f0114959 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114934:	83 ec 04             	sub    $0x4,%esp
f0114937:	68 88 a7 13 f0       	push   $0xf013a788
f011493c:	68 4b 05 00 00       	push   $0x54b
f0114941:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114946:	e8 c8 ba fe ff       	call   f0100413 <_warn>
f011494b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011494e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114952:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114959:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011495d:	74 04                	je     f0114963 <test_allocate_chunk+0x6d1>
f011495f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114963:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114967:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011496b:	74 6f                	je     f01149dc <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f011496d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114970:	01 c0                	add    %eax,%eax
f0114972:	05 00 00 00 80       	add    $0x80000000,%eax
f0114977:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011497a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011497d:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114980:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114983:	89 d0                	mov    %edx,%eax
f0114985:	c1 e0 02             	shl    $0x2,%eax
f0114988:	01 d0                	add    %edx,%eax
f011498a:	01 c0                	add    %eax,%eax
f011498c:	01 d0                	add    %edx,%eax
f011498e:	01 c0                	add    %eax,%eax
f0114990:	05 00 00 00 80       	add    $0x80000000,%eax
f0114995:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114998:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011499b:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011499e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01149a1:	8a 00                	mov    (%eax),%al
f01149a3:	3c 4b                	cmp    $0x4b,%al
f01149a5:	75 09                	jne    f01149b0 <test_allocate_chunk+0x71e>
f01149a7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01149aa:	8a 00                	mov    (%eax),%al
f01149ac:	3c 4d                	cmp    $0x4d,%al
f01149ae:	74 1e                	je     f01149ce <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01149b0:	83 ec 04             	sub    $0x4,%esp
f01149b3:	68 d4 a7 13 f0       	push   $0xf013a7d4
f01149b8:	68 59 05 00 00       	push   $0x559
f01149bd:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01149c2:	e8 4c ba fe ff       	call   f0100413 <_warn>
f01149c7:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01149ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01149ce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149d2:	74 04                	je     f01149d8 <test_allocate_chunk+0x746>
f01149d4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01149d8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f01149dc:	83 ec 0c             	sub    $0xc,%esp
f01149df:	68 78 a6 13 f0       	push   $0xf013a678
f01149e4:	e8 25 c3 fe ff       	call   f0100d0e <cprintf>
f01149e9:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f01149ec:	83 ec 0c             	sub    $0xc,%esp
f01149ef:	68 28 a9 13 f0       	push   $0xf013a928
f01149f4:	e8 15 c3 fe ff       	call   f0100d0e <cprintf>
f01149f9:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01149fc:	e8 90 83 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0114a01:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114a04:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114a07:	89 d0                	mov    %edx,%eax
f0114a09:	01 c0                	add    %eax,%eax
f0114a0b:	01 d0                	add    %edx,%eax
f0114a0d:	01 c0                	add    %eax,%eax
f0114a0f:	01 d0                	add    %edx,%eax
f0114a11:	68 04 0e 00 00       	push   $0xe04
f0114a16:	50                   	push   %eax
f0114a17:	68 00 fc 3f 40       	push   $0x403ffc00
f0114a1c:	ff 75 d0             	pushl  -0x30(%ebp)
f0114a1f:	e8 f6 42 ff ff       	call   f0108d1a <allocate_chunk>
f0114a24:	83 c4 10             	add    $0x10,%esp
f0114a27:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114a2a:	e8 62 83 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0114a2f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114a32:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114a36:	75 0b                	jne    f0114a43 <test_allocate_chunk+0x7b1>
f0114a38:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a3b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a3e:	83 f8 05             	cmp    $0x5,%eax
f0114a41:	74 2a                	je     f0114a6d <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114a43:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a46:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a49:	83 ec 08             	sub    $0x8,%esp
f0114a4c:	6a 05                	push   $0x5
f0114a4e:	50                   	push   %eax
f0114a4f:	ff 75 98             	pushl  -0x68(%ebp)
f0114a52:	68 4c a8 13 f0       	push   $0xf013a84c
f0114a57:	68 70 05 00 00       	push   $0x570
f0114a5c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114a61:	e8 ad b9 fe ff       	call   f0100413 <_warn>
f0114a66:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a69:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114a6d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a71:	74 04                	je     f0114a77 <test_allocate_chunk+0x7e5>
f0114a73:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114a77:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114a7b:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114a82:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114a85:	89 d0                	mov    %edx,%eax
f0114a87:	01 c0                	add    %eax,%eax
f0114a89:	01 d0                	add    %edx,%eax
f0114a8b:	c1 e0 02             	shl    $0x2,%eax
f0114a8e:	83 ec 08             	sub    $0x8,%esp
f0114a91:	6a 03                	push   $0x3
f0114a93:	6a 00                	push   $0x0
f0114a95:	6a 00                	push   $0x0
f0114a97:	68 07 0e 00 00       	push   $0xe07
f0114a9c:	68 05 0e 00 00       	push   $0xe05
f0114aa1:	6a 01                	push   $0x1
f0114aa3:	50                   	push   %eax
f0114aa4:	68 00 f0 3f 40       	push   $0x403ff000
f0114aa9:	6a 00                	push   $0x0
f0114aab:	ff 75 d0             	pushl  -0x30(%ebp)
f0114aae:	e8 b5 18 00 00       	call   f0116368 <CCP>
f0114ab3:	83 c4 30             	add    $0x30,%esp
f0114ab6:	85 c0                	test   %eax,%eax
f0114ab8:	75 25                	jne    f0114adf <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114aba:	83 ec 04             	sub    $0x4,%esp
f0114abd:	68 88 a7 13 f0       	push   $0xf013a788
f0114ac2:	68 79 05 00 00       	push   $0x579
f0114ac7:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114acc:	e8 42 b9 fe ff       	call   f0100413 <_warn>
f0114ad1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114ad4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114ad8:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114adf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ae3:	74 04                	je     f0114ae9 <test_allocate_chunk+0x857>
f0114ae5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ae9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0114aed:	83 ec 0c             	sub    $0xc,%esp
f0114af0:	68 5f a9 13 f0       	push   $0xf013a95f
f0114af5:	e8 14 c2 fe ff       	call   f0100d0e <cprintf>
f0114afa:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0114afd:	83 ec 08             	sub    $0x8,%esp
f0114b00:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114b03:	68 70 a9 13 f0       	push   $0xf013a970
f0114b08:	e8 01 c2 fe ff       	call   f0100d0e <cprintf>
f0114b0d:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114b10:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114b14:	75 10                	jne    f0114b26 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114b16:	83 ec 0c             	sub    $0xc,%esp
f0114b19:	68 a4 a9 13 f0       	push   $0xf013a9a4
f0114b1e:	e8 eb c1 fe ff       	call   f0100d0e <cprintf>
f0114b23:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114b26:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f0114b2b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0114b2e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b31:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114b34:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114b39:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114b3c:	5b                   	pop    %ebx
f0114b3d:	5e                   	pop    %esi
f0114b3e:	5f                   	pop    %edi
f0114b3f:	5d                   	pop    %ebp
f0114b40:	c3                   	ret    

f0114b41 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0114b41:	55                   	push   %ebp
f0114b42:	89 e5                	mov    %esp,%ebp
f0114b44:	57                   	push   %edi
f0114b45:	56                   	push   %esi
f0114b46:	53                   	push   %ebx
f0114b47:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114b4d:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114b50:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f0114b55:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b5a:	89 c7                	mov    %eax,%edi
f0114b5c:	89 de                	mov    %ebx,%esi
f0114b5e:	89 d1                	mov    %edx,%ecx
f0114b60:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b62:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114b65:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114b6a:	b0 00                	mov    $0x0,%al
f0114b6c:	89 d7                	mov    %edx,%edi
f0114b6e:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114b70:	6a 00                	push   $0x0
f0114b72:	6a 0a                	push   $0xa
f0114b74:	6a 14                	push   $0x14
f0114b76:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114b79:	50                   	push   %eax
f0114b7a:	e8 d9 44 ff ff       	call   f0109058 <env_create>
f0114b7f:	83 c4 10             	add    $0x10,%esp
f0114b82:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114b85:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114b88:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114b8b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114b8e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114b91:	8b 40 60             	mov    0x60(%eax),%eax
f0114b94:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114b97:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b9a:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114b9d:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114ba4:	75 70 20 
f0114ba7:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114bae:	00 00 00 
f0114bb1:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114bb4:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114bb9:	b8 00 00 00 00       	mov    $0x0,%eax
f0114bbe:	89 d7                	mov    %edx,%edi
f0114bc0:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114bc2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114bc5:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114bc8:	83 ec 08             	sub    $0x8,%esp
f0114bcb:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114bd1:	52                   	push   %edx
f0114bd2:	50                   	push   %eax
f0114bd3:	e8 5b cd 01 00       	call   f0131933 <ltostr>
f0114bd8:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114bdb:	83 ec 04             	sub    $0x4,%esp
f0114bde:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114be4:	50                   	push   %eax
f0114be5:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114beb:	50                   	push   %eax
f0114bec:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114bf2:	50                   	push   %eax
f0114bf3:	e8 33 ce 01 00       	call   f0131a2b <strcconcat>
f0114bf8:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114bfb:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114c02:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114c09:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114c10:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114c17:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0114c1b:	83 ec 0c             	sub    $0xc,%esp
f0114c1e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c21:	e8 0e 17 00 00       	call   f0116334 <ClearUserSpace>
f0114c26:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114c29:	83 ec 0c             	sub    $0xc,%esp
f0114c2c:	68 e4 a9 13 f0       	push   $0xf013a9e4
f0114c31:	e8 d8 c0 fe ff       	call   f0100d0e <cprintf>
f0114c36:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114c39:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114c3c:	c1 e0 03             	shl    $0x3,%eax
f0114c3f:	83 ec 04             	sub    $0x4,%esp
f0114c42:	50                   	push   %eax
f0114c43:	6a 00                	push   $0x0
f0114c45:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c48:	e8 e8 42 ff ff       	call   f0108f35 <calculate_required_frames>
f0114c4d:	83 c4 10             	add    $0x10,%esp
f0114c50:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114c53:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114c57:	74 23                	je     f0114c7c <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114c59:	83 ec 0c             	sub    $0xc,%esp
f0114c5c:	6a 03                	push   $0x3
f0114c5e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c61:	68 18 aa 13 f0       	push   $0xf013aa18
f0114c66:	68 b2 05 00 00       	push   $0x5b2
f0114c6b:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114c70:	e8 9e b7 fe ff       	call   f0100413 <_warn>
f0114c75:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c78:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114c7c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c80:	74 04                	je     f0114c86 <test_calculate_required_frames+0x145>
f0114c82:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114c86:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0114c8a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114c8d:	c1 e0 02             	shl    $0x2,%eax
f0114c90:	83 ec 04             	sub    $0x4,%esp
f0114c93:	50                   	push   %eax
f0114c94:	6a 00                	push   $0x0
f0114c96:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c99:	e8 97 42 ff ff       	call   f0108f35 <calculate_required_frames>
f0114c9e:	83 c4 10             	add    $0x10,%esp
f0114ca1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114ca4:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0114cab:	74 26                	je     f0114cd3 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0114cad:	83 ec 0c             	sub    $0xc,%esp
f0114cb0:	68 01 04 00 00       	push   $0x401
f0114cb5:	ff 75 c8             	pushl  -0x38(%ebp)
f0114cb8:	68 18 aa 13 f0       	push   $0xf013aa18
f0114cbd:	68 bc 05 00 00       	push   $0x5bc
f0114cc2:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114cc7:	e8 47 b7 fe ff       	call   f0100413 <_warn>
f0114ccc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ccf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114cd3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114cd7:	74 04                	je     f0114cdd <test_calculate_required_frames+0x19c>
f0114cd9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114cdd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114ce1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114ce4:	c1 e0 0a             	shl    $0xa,%eax
f0114ce7:	83 ec 04             	sub    $0x4,%esp
f0114cea:	50                   	push   %eax
f0114ceb:	6a 00                	push   $0x0
f0114ced:	ff 75 d8             	pushl  -0x28(%ebp)
f0114cf0:	e8 40 42 ff ff       	call   f0108f35 <calculate_required_frames>
f0114cf5:	83 c4 10             	add    $0x10,%esp
f0114cf8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0114cfb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114cfe:	c1 e0 0a             	shl    $0xa,%eax
f0114d01:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114d04:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114d0b:	99                   	cltd   
f0114d0c:	f7 fb                	idiv   %ebx
f0114d0e:	89 c1                	mov    %eax,%ecx
f0114d10:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d13:	c1 e0 0a             	shl    $0xa,%eax
f0114d16:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114d19:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114d20:	99                   	cltd   
f0114d21:	f7 fe                	idiv   %esi
f0114d23:	01 c8                	add    %ecx,%eax
f0114d25:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114d28:	74 4c                	je     f0114d76 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0114d2a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d2d:	c1 e0 0a             	shl    $0xa,%eax
f0114d30:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114d33:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114d3a:	99                   	cltd   
f0114d3b:	f7 fb                	idiv   %ebx
f0114d3d:	89 c1                	mov    %eax,%ecx
f0114d3f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d42:	c1 e0 0a             	shl    $0xa,%eax
f0114d45:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114d48:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114d4f:	99                   	cltd   
f0114d50:	f7 fe                	idiv   %esi
f0114d52:	01 c8                	add    %ecx,%eax
f0114d54:	83 ec 0c             	sub    $0xc,%esp
f0114d57:	50                   	push   %eax
f0114d58:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d5b:	68 18 aa 13 f0       	push   $0xf013aa18
f0114d60:	68 c6 05 00 00       	push   $0x5c6
f0114d65:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114d6a:	e8 a4 b6 fe ff       	call   f0100413 <_warn>
f0114d6f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d72:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d76:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d7a:	74 04                	je     f0114d80 <test_calculate_required_frames+0x23f>
f0114d7c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d80:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0114d84:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114d87:	89 d0                	mov    %edx,%eax
f0114d89:	01 c0                	add    %eax,%eax
f0114d8b:	01 d0                	add    %edx,%eax
f0114d8d:	01 c0                	add    %eax,%eax
f0114d8f:	83 ec 04             	sub    $0x4,%esp
f0114d92:	50                   	push   %eax
f0114d93:	68 00 10 00 00       	push   $0x1000
f0114d98:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d9b:	e8 95 41 ff ff       	call   f0108f35 <calculate_required_frames>
f0114da0:	83 c4 10             	add    $0x10,%esp
f0114da3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114da6:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114daa:	74 23                	je     f0114dcf <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114dac:	83 ec 0c             	sub    $0xc,%esp
f0114daf:	6a 03                	push   $0x3
f0114db1:	ff 75 c8             	pushl  -0x38(%ebp)
f0114db4:	68 18 aa 13 f0       	push   $0xf013aa18
f0114db9:	68 d2 05 00 00       	push   $0x5d2
f0114dbe:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114dc3:	e8 4b b6 fe ff       	call   f0100413 <_warn>
f0114dc8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114dcb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114dcf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114dd3:	74 04                	je     f0114dd9 <test_calculate_required_frames+0x298>
f0114dd5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114dd9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0114ddd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114de0:	89 c2                	mov    %eax,%edx
f0114de2:	01 d2                	add    %edx,%edx
f0114de4:	01 d0                	add    %edx,%eax
f0114de6:	83 ec 04             	sub    $0x4,%esp
f0114de9:	50                   	push   %eax
f0114dea:	68 00 18 00 00       	push   $0x1800
f0114def:	ff 75 d8             	pushl  -0x28(%ebp)
f0114df2:	e8 3e 41 ff ff       	call   f0108f35 <calculate_required_frames>
f0114df7:	83 c4 10             	add    $0x10,%esp
f0114dfa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114dfd:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114e01:	74 23                	je     f0114e26 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114e03:	83 ec 0c             	sub    $0xc,%esp
f0114e06:	6a 03                	push   $0x3
f0114e08:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e0b:	68 18 aa 13 f0       	push   $0xf013aa18
f0114e10:	68 dc 05 00 00       	push   $0x5dc
f0114e15:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114e1a:	e8 f4 b5 fe ff       	call   f0100413 <_warn>
f0114e1f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e22:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e26:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e2a:	74 04                	je     f0114e30 <test_calculate_required_frames+0x2ef>
f0114e2c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e30:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114e34:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114e37:	89 d0                	mov    %edx,%eax
f0114e39:	c1 e0 02             	shl    $0x2,%eax
f0114e3c:	01 d0                	add    %edx,%eax
f0114e3e:	01 c0                	add    %eax,%eax
f0114e40:	83 ec 04             	sub    $0x4,%esp
f0114e43:	50                   	push   %eax
f0114e44:	68 00 00 40 00       	push   $0x400000
f0114e49:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e4c:	e8 e4 40 ff ff       	call   f0108f35 <calculate_required_frames>
f0114e51:	83 c4 10             	add    $0x10,%esp
f0114e54:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0114e57:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0114e5e:	74 26                	je     f0114e86 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114e60:	83 ec 0c             	sub    $0xc,%esp
f0114e63:	68 03 0a 00 00       	push   $0xa03
f0114e68:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e6b:	68 18 aa 13 f0       	push   $0xf013aa18
f0114e70:	68 e6 05 00 00       	push   $0x5e6
f0114e75:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114e7a:	e8 94 b5 fe ff       	call   f0100413 <_warn>
f0114e7f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e82:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e86:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e8a:	74 04                	je     f0114e90 <test_calculate_required_frames+0x34f>
f0114e8c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e90:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114e94:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e97:	01 c0                	add    %eax,%eax
f0114e99:	83 ec 04             	sub    $0x4,%esp
f0114e9c:	50                   	push   %eax
f0114e9d:	68 00 00 70 00       	push   $0x700000
f0114ea2:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ea5:	e8 8b 40 ff ff       	call   f0108f35 <calculate_required_frames>
f0114eaa:	83 c4 10             	add    $0x10,%esp
f0114ead:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0114eb0:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0114eb7:	74 26                	je     f0114edf <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0114eb9:	83 ec 0c             	sub    $0xc,%esp
f0114ebc:	68 02 02 00 00       	push   $0x202
f0114ec1:	ff 75 c8             	pushl  -0x38(%ebp)
f0114ec4:	68 18 aa 13 f0       	push   $0xf013aa18
f0114ec9:	68 f2 05 00 00       	push   $0x5f2
f0114ece:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114ed3:	e8 3b b5 fe ff       	call   f0100413 <_warn>
f0114ed8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114edb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114edf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ee3:	74 04                	je     f0114ee9 <test_calculate_required_frames+0x3a8>
f0114ee5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114ee9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114eed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ef0:	83 ec 04             	sub    $0x4,%esp
f0114ef3:	50                   	push   %eax
f0114ef4:	68 ff ff 3f 00       	push   $0x3fffff
f0114ef9:	ff 75 d8             	pushl  -0x28(%ebp)
f0114efc:	e8 34 40 ff ff       	call   f0108f35 <calculate_required_frames>
f0114f01:	83 c4 10             	add    $0x10,%esp
f0114f04:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0114f07:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0114f0b:	74 23                	je     f0114f30 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0114f0d:	83 ec 0c             	sub    $0xc,%esp
f0114f10:	6a 04                	push   $0x4
f0114f12:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f15:	68 18 aa 13 f0       	push   $0xf013aa18
f0114f1a:	68 fc 05 00 00       	push   $0x5fc
f0114f1f:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114f24:	e8 ea b4 fe ff       	call   f0100413 <_warn>
f0114f29:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f2c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114f30:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f34:	74 04                	je     f0114f3a <test_calculate_required_frames+0x3f9>
f0114f36:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114f3a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114f3e:	83 ec 0c             	sub    $0xc,%esp
f0114f41:	68 69 a5 13 f0       	push   $0xf013a569
f0114f46:	e8 c3 bd fe ff       	call   f0100d0e <cprintf>
f0114f4b:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0114f4e:	83 ec 0c             	sub    $0xc,%esp
f0114f51:	68 70 aa 13 f0       	push   $0xf013aa70
f0114f56:	e8 b3 bd fe ff       	call   f0100d0e <cprintf>
f0114f5b:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114f5e:	83 ec 04             	sub    $0x4,%esp
f0114f61:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114f67:	50                   	push   %eax
f0114f68:	68 22 99 13 f0       	push   $0xf0139922
f0114f6d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114f73:	50                   	push   %eax
f0114f74:	e8 b2 ca 01 00       	call   f0131a2b <strcconcat>
f0114f79:	83 c4 10             	add    $0x10,%esp
f0114f7c:	83 ec 0c             	sub    $0xc,%esp
f0114f7f:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0114f85:	50                   	push   %eax
f0114f86:	e8 e5 bd fe ff       	call   f0100d70 <execute_command>
f0114f8b:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0114f8e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114f91:	c1 e0 03             	shl    $0x3,%eax
f0114f94:	83 ec 04             	sub    $0x4,%esp
f0114f97:	50                   	push   %eax
f0114f98:	6a 00                	push   $0x0
f0114f9a:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f9d:	e8 93 3f ff ff       	call   f0108f35 <calculate_required_frames>
f0114fa2:	83 c4 10             	add    $0x10,%esp
f0114fa5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114fa8:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114faf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114fb2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114fb5:	74 24                	je     f0114fdb <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114fb7:	83 ec 0c             	sub    $0xc,%esp
f0114fba:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114fbd:	ff 75 c8             	pushl  -0x38(%ebp)
f0114fc0:	68 18 aa 13 f0       	push   $0xf013aa18
f0114fc5:	68 10 06 00 00       	push   $0x610
f0114fca:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114fcf:	e8 3f b4 fe ff       	call   f0100413 <_warn>
f0114fd4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fd7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114fdb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fdf:	74 04                	je     f0114fe5 <test_calculate_required_frames+0x4a4>
f0114fe1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114fe5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0114fe9:	83 ec 04             	sub    $0x4,%esp
f0114fec:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114ff2:	50                   	push   %eax
f0114ff3:	68 2f 99 13 f0       	push   $0xf013992f
f0114ff8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114ffe:	50                   	push   %eax
f0114fff:	e8 27 ca 01 00       	call   f0131a2b <strcconcat>
f0115004:	83 c4 10             	add    $0x10,%esp
f0115007:	83 ec 0c             	sub    $0xc,%esp
f011500a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115010:	50                   	push   %eax
f0115011:	e8 5a bd fe ff       	call   f0100d70 <execute_command>
f0115016:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115019:	83 ec 04             	sub    $0x4,%esp
f011501c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115022:	50                   	push   %eax
f0115023:	68 a4 aa 13 f0       	push   $0xf013aaa4
f0115028:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011502e:	50                   	push   %eax
f011502f:	e8 f7 c9 01 00       	call   f0131a2b <strcconcat>
f0115034:	83 c4 10             	add    $0x10,%esp
f0115037:	83 ec 0c             	sub    $0xc,%esp
f011503a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115040:	50                   	push   %eax
f0115041:	e8 2a bd fe ff       	call   f0100d70 <execute_command>
f0115046:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115049:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011504c:	c1 e0 03             	shl    $0x3,%eax
f011504f:	83 ec 04             	sub    $0x4,%esp
f0115052:	50                   	push   %eax
f0115053:	6a 00                	push   $0x0
f0115055:	ff 75 d8             	pushl  -0x28(%ebp)
f0115058:	e8 d8 3e ff ff       	call   f0108f35 <calculate_required_frames>
f011505d:	83 c4 10             	add    $0x10,%esp
f0115060:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0115063:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f011506a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011506d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115070:	74 24                	je     f0115096 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115072:	83 ec 0c             	sub    $0xc,%esp
f0115075:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115078:	ff 75 c8             	pushl  -0x38(%ebp)
f011507b:	68 18 aa 13 f0       	push   $0xf013aa18
f0115080:	68 1e 06 00 00       	push   $0x61e
f0115085:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011508a:	e8 84 b3 fe ff       	call   f0100413 <_warn>
f011508f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115092:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115096:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011509a:	74 04                	je     f01150a0 <test_calculate_required_frames+0x55f>
f011509c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150a0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01150a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01150a7:	c1 e0 0a             	shl    $0xa,%eax
f01150aa:	83 ec 04             	sub    $0x4,%esp
f01150ad:	50                   	push   %eax
f01150ae:	6a 00                	push   $0x0
f01150b0:	ff 75 d8             	pushl  -0x28(%ebp)
f01150b3:	e8 7d 3e ff ff       	call   f0108f35 <calculate_required_frames>
f01150b8:	83 c4 10             	add    $0x10,%esp
f01150bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01150be:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01150c1:	c1 e0 0a             	shl    $0xa,%eax
f01150c4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01150c7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01150ce:	99                   	cltd   
f01150cf:	f7 fb                	idiv   %ebx
f01150d1:	89 c1                	mov    %eax,%ecx
f01150d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01150d6:	c1 e0 0a             	shl    $0xa,%eax
f01150d9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01150dc:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01150e3:	99                   	cltd   
f01150e4:	f7 fe                	idiv   %esi
f01150e6:	01 c8                	add    %ecx,%eax
f01150e8:	83 e8 05             	sub    $0x5,%eax
f01150eb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01150ee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01150f1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01150f4:	74 24                	je     f011511a <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01150f6:	83 ec 0c             	sub    $0xc,%esp
f01150f9:	ff 75 c4             	pushl  -0x3c(%ebp)
f01150fc:	ff 75 c8             	pushl  -0x38(%ebp)
f01150ff:	68 18 aa 13 f0       	push   $0xf013aa18
f0115104:	68 29 06 00 00       	push   $0x629
f0115109:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011510e:	e8 00 b3 fe ff       	call   f0100413 <_warn>
f0115113:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115116:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011511a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011511e:	74 04                	je     f0115124 <test_calculate_required_frames+0x5e3>
f0115120:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115124:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115128:	83 ec 04             	sub    $0x4,%esp
f011512b:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115131:	50                   	push   %eax
f0115132:	68 b0 aa 13 f0       	push   $0xf013aab0
f0115137:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011513d:	50                   	push   %eax
f011513e:	e8 e8 c8 01 00       	call   f0131a2b <strcconcat>
f0115143:	83 c4 10             	add    $0x10,%esp
f0115146:	83 ec 0c             	sub    $0xc,%esp
f0115149:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011514f:	50                   	push   %eax
f0115150:	e8 1b bc fe ff       	call   f0100d70 <execute_command>
f0115155:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115158:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011515b:	89 c2                	mov    %eax,%edx
f011515d:	01 d2                	add    %edx,%edx
f011515f:	01 d0                	add    %edx,%eax
f0115161:	83 ec 04             	sub    $0x4,%esp
f0115164:	50                   	push   %eax
f0115165:	68 00 18 00 00       	push   $0x1800
f011516a:	ff 75 d8             	pushl  -0x28(%ebp)
f011516d:	e8 c3 3d ff ff       	call   f0108f35 <calculate_required_frames>
f0115172:	83 c4 10             	add    $0x10,%esp
f0115175:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115178:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011517f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115182:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115185:	74 24                	je     f01151ab <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115187:	83 ec 0c             	sub    $0xc,%esp
f011518a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011518d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115190:	68 18 aa 13 f0       	push   $0xf013aa18
f0115195:	68 38 06 00 00       	push   $0x638
f011519a:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011519f:	e8 6f b2 fe ff       	call   f0100413 <_warn>
f01151a4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151a7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151ab:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151af:	74 04                	je     f01151b5 <test_calculate_required_frames+0x674>
f01151b1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151b5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01151b9:	83 ec 04             	sub    $0x4,%esp
f01151bc:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01151c2:	50                   	push   %eax
f01151c3:	68 88 9b 13 f0       	push   $0xf0139b88
f01151c8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01151ce:	50                   	push   %eax
f01151cf:	e8 57 c8 01 00       	call   f0131a2b <strcconcat>
f01151d4:	83 c4 10             	add    $0x10,%esp
f01151d7:	83 ec 0c             	sub    $0xc,%esp
f01151da:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01151e0:	50                   	push   %eax
f01151e1:	e8 8a bb fe ff       	call   f0100d70 <execute_command>
f01151e6:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01151e9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01151ec:	89 d0                	mov    %edx,%eax
f01151ee:	c1 e0 02             	shl    $0x2,%eax
f01151f1:	01 d0                	add    %edx,%eax
f01151f3:	01 c0                	add    %eax,%eax
f01151f5:	83 ec 04             	sub    $0x4,%esp
f01151f8:	50                   	push   %eax
f01151f9:	68 00 00 40 00       	push   $0x400000
f01151fe:	ff 75 d8             	pushl  -0x28(%ebp)
f0115201:	e8 2f 3d ff ff       	call   f0108f35 <calculate_required_frames>
f0115206:	83 c4 10             	add    $0x10,%esp
f0115209:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f011520c:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0115213:	74 26                	je     f011523b <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115215:	83 ec 0c             	sub    $0xc,%esp
f0115218:	68 03 0a 00 00       	push   $0xa03
f011521d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115220:	68 18 aa 13 f0       	push   $0xf013aa18
f0115225:	68 44 06 00 00       	push   $0x644
f011522a:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011522f:	e8 df b1 fe ff       	call   f0100413 <_warn>
f0115234:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115237:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011523b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011523f:	74 04                	je     f0115245 <test_calculate_required_frames+0x704>
f0115241:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115245:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115249:	83 ec 04             	sub    $0x4,%esp
f011524c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115252:	50                   	push   %eax
f0115253:	68 92 9b 13 f0       	push   $0xf0139b92
f0115258:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011525e:	50                   	push   %eax
f011525f:	e8 c7 c7 01 00       	call   f0131a2b <strcconcat>
f0115264:	83 c4 10             	add    $0x10,%esp
f0115267:	83 ec 0c             	sub    $0xc,%esp
f011526a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115270:	50                   	push   %eax
f0115271:	e8 fa ba fe ff       	call   f0100d70 <execute_command>
f0115276:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115279:	83 ec 04             	sub    $0x4,%esp
f011527c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115282:	50                   	push   %eax
f0115283:	68 b8 aa 13 f0       	push   $0xf013aab8
f0115288:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011528e:	50                   	push   %eax
f011528f:	e8 97 c7 01 00       	call   f0131a2b <strcconcat>
f0115294:	83 c4 10             	add    $0x10,%esp
f0115297:	83 ec 0c             	sub    $0xc,%esp
f011529a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01152a0:	50                   	push   %eax
f01152a1:	e8 ca ba fe ff       	call   f0100d70 <execute_command>
f01152a6:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01152a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152ac:	01 c0                	add    %eax,%eax
f01152ae:	83 ec 04             	sub    $0x4,%esp
f01152b1:	50                   	push   %eax
f01152b2:	68 00 00 70 00       	push   $0x700000
f01152b7:	ff 75 d8             	pushl  -0x28(%ebp)
f01152ba:	e8 76 3c ff ff       	call   f0108f35 <calculate_required_frames>
f01152bf:	83 c4 10             	add    $0x10,%esp
f01152c2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f01152c5:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01152cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01152cf:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01152d2:	74 24                	je     f01152f8 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01152d4:	83 ec 0c             	sub    $0xc,%esp
f01152d7:	ff 75 c4             	pushl  -0x3c(%ebp)
f01152da:	ff 75 c8             	pushl  -0x38(%ebp)
f01152dd:	68 18 aa 13 f0       	push   $0xf013aa18
f01152e2:	68 54 06 00 00       	push   $0x654
f01152e7:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01152ec:	e8 22 b1 fe ff       	call   f0100413 <_warn>
f01152f1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152f4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01152f8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152fc:	74 04                	je     f0115302 <test_calculate_required_frames+0x7c1>
f01152fe:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115302:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115306:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115309:	83 ec 04             	sub    $0x4,%esp
f011530c:	50                   	push   %eax
f011530d:	68 ff ff 3f 00       	push   $0x3fffff
f0115312:	ff 75 d8             	pushl  -0x28(%ebp)
f0115315:	e8 1b 3c ff ff       	call   f0108f35 <calculate_required_frames>
f011531a:	83 c4 10             	add    $0x10,%esp
f011531d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115320:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115327:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011532a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011532d:	74 24                	je     f0115353 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011532f:	83 ec 0c             	sub    $0xc,%esp
f0115332:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115335:	ff 75 c8             	pushl  -0x38(%ebp)
f0115338:	68 18 aa 13 f0       	push   $0xf013aa18
f011533d:	68 5f 06 00 00       	push   $0x65f
f0115342:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115347:	e8 c7 b0 fe ff       	call   f0100413 <_warn>
f011534c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011534f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115353:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115357:	74 04                	je     f011535d <test_calculate_required_frames+0x81c>
f0115359:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011535d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115361:	83 ec 0c             	sub    $0xc,%esp
f0115364:	68 43 9b 13 f0       	push   $0xf0139b43
f0115369:	e8 a0 b9 fe ff       	call   f0100d0e <cprintf>
f011536e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0115371:	83 ec 08             	sub    $0x8,%esp
f0115374:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115377:	68 c4 aa 13 f0       	push   $0xf013aac4
f011537c:	e8 8d b9 fe ff       	call   f0100d0e <cprintf>
f0115381:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115384:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115388:	75 10                	jne    f011539a <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f011538a:	83 ec 0c             	sub    $0xc,%esp
f011538d:	68 04 ab 13 f0       	push   $0xf013ab04
f0115392:	e8 77 b9 fe ff       	call   f0100d0e <cprintf>
f0115397:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011539a:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f011539f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01153a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01153a5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01153a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01153ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01153b0:	5b                   	pop    %ebx
f01153b1:	5e                   	pop    %esi
f01153b2:	5f                   	pop    %edi
f01153b3:	5d                   	pop    %ebp
f01153b4:	c3                   	ret    

f01153b5 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01153b5:	55                   	push   %ebp
f01153b6:	89 e5                	mov    %esp,%ebp
f01153b8:	57                   	push   %edi
f01153b9:	56                   	push   %esi
f01153ba:	53                   	push   %ebx
f01153bb:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01153c1:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01153c4:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f01153c9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01153ce:	89 c7                	mov    %eax,%edi
f01153d0:	89 de                	mov    %ebx,%esi
f01153d2:	89 d1                	mov    %edx,%ecx
f01153d4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01153d6:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01153d9:	b9 23 00 00 00       	mov    $0x23,%ecx
f01153de:	b0 00                	mov    $0x0,%al
f01153e0:	89 d7                	mov    %edx,%edi
f01153e2:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01153e4:	6a 00                	push   $0x0
f01153e6:	6a 0a                	push   $0xa
f01153e8:	6a 14                	push   $0x14
f01153ea:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01153ed:	50                   	push   %eax
f01153ee:	e8 65 3c ff ff       	call   f0109058 <env_create>
f01153f3:	83 c4 10             	add    $0x10,%esp
f01153f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01153f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01153fc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01153ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115402:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115405:	8b 40 60             	mov    0x60(%eax),%eax
f0115408:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011540b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011540e:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115411:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115418:	75 70 20 
f011541b:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115422:	00 00 00 
f0115425:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115428:	b9 03 00 00 00       	mov    $0x3,%ecx
f011542d:	b8 00 00 00 00       	mov    $0x0,%eax
f0115432:	89 d7                	mov    %edx,%edi
f0115434:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115436:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115439:	8b 40 4c             	mov    0x4c(%eax),%eax
f011543c:	83 ec 08             	sub    $0x8,%esp
f011543f:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115445:	52                   	push   %edx
f0115446:	50                   	push   %eax
f0115447:	e8 e7 c4 01 00       	call   f0131933 <ltostr>
f011544c:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011544f:	83 ec 04             	sub    $0x4,%esp
f0115452:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115458:	50                   	push   %eax
f0115459:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f011545f:	50                   	push   %eax
f0115460:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115466:	50                   	push   %eax
f0115467:	e8 bf c5 01 00       	call   f0131a2b <strcconcat>
f011546c:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011546f:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115476:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011547d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115484:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115488:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011548f:	00 00 00 
	uint32 num_tables = 0;
f0115492:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115499:	00 00 00 
	ClearUserSpace(proc_directory);
f011549c:	83 ec 0c             	sub    $0xc,%esp
f011549f:	ff 75 d8             	pushl  -0x28(%ebp)
f01154a2:	e8 8d 0e 00 00       	call   f0116334 <ClearUserSpace>
f01154a7:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01154aa:	83 ec 0c             	sub    $0xc,%esp
f01154ad:	68 e4 a9 13 f0       	push   $0xf013a9e4
f01154b2:	e8 57 b8 fe ff       	call   f0100d0e <cprintf>
f01154b7:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01154ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154bd:	c1 e0 03             	shl    $0x3,%eax
f01154c0:	89 c2                	mov    %eax,%edx
f01154c2:	83 ec 0c             	sub    $0xc,%esp
f01154c5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01154cb:	50                   	push   %eax
f01154cc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01154d2:	50                   	push   %eax
f01154d3:	52                   	push   %edx
f01154d4:	6a 00                	push   $0x0
f01154d6:	ff 75 d8             	pushl  -0x28(%ebp)
f01154d9:	e8 62 39 ff ff       	call   f0108e40 <calculate_allocated_space>
f01154de:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01154e1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154e7:	85 c0                	test   %eax,%eax
f01154e9:	74 27                	je     f0115512 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01154eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154f1:	83 ec 0c             	sub    $0xc,%esp
f01154f4:	6a 00                	push   $0x0
f01154f6:	50                   	push   %eax
f01154f7:	68 50 ab 13 f0       	push   $0xf013ab50
f01154fc:	68 94 06 00 00       	push   $0x694
f0115501:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115506:	e8 08 af fe ff       	call   f0100413 <_warn>
f011550b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011550e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115512:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115518:	85 c0                	test   %eax,%eax
f011551a:	74 27                	je     f0115543 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011551c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115522:	83 ec 0c             	sub    $0xc,%esp
f0115525:	6a 00                	push   $0x0
f0115527:	50                   	push   %eax
f0115528:	68 b0 ab 13 f0       	push   $0xf013abb0
f011552d:	68 99 06 00 00       	push   $0x699
f0115532:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115537:	e8 d7 ae fe ff       	call   f0100413 <_warn>
f011553c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011553f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115543:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115547:	74 04                	je     f011554d <test_calculate_allocated_space+0x198>
f0115549:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011554d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115551:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115558:	00 00 00 
		num_pages = 0;
f011555b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115562:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115565:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115568:	c1 e0 02             	shl    $0x2,%eax
f011556b:	89 c2                	mov    %eax,%edx
f011556d:	83 ec 0c             	sub    $0xc,%esp
f0115570:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115576:	50                   	push   %eax
f0115577:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011557d:	50                   	push   %eax
f011557e:	52                   	push   %edx
f011557f:	6a 00                	push   $0x0
f0115581:	ff 75 d8             	pushl  -0x28(%ebp)
f0115584:	e8 b7 38 ff ff       	call   f0108e40 <calculate_allocated_space>
f0115589:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011558c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115592:	85 c0                	test   %eax,%eax
f0115594:	74 27                	je     f01155bd <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115596:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011559c:	83 ec 0c             	sub    $0xc,%esp
f011559f:	6a 00                	push   $0x0
f01155a1:	50                   	push   %eax
f01155a2:	68 50 ab 13 f0       	push   $0xf013ab50
f01155a7:	68 a5 06 00 00       	push   $0x6a5
f01155ac:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01155b1:	e8 5d ae fe ff       	call   f0100413 <_warn>
f01155b6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155b9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01155bd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155c3:	85 c0                	test   %eax,%eax
f01155c5:	74 27                	je     f01155ee <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01155c7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01155cd:	83 ec 0c             	sub    $0xc,%esp
f01155d0:	6a 00                	push   $0x0
f01155d2:	50                   	push   %eax
f01155d3:	68 b0 ab 13 f0       	push   $0xf013abb0
f01155d8:	68 aa 06 00 00       	push   $0x6aa
f01155dd:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01155e2:	e8 2c ae fe ff       	call   f0100413 <_warn>
f01155e7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155ea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01155ee:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155f2:	74 04                	je     f01155f8 <test_calculate_allocated_space+0x243>
f01155f4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01155f8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01155fc:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115603:	00 00 00 
		num_pages = 0;
f0115606:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011560d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115610:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115613:	c1 e0 0a             	shl    $0xa,%eax
f0115616:	89 c2                	mov    %eax,%edx
f0115618:	83 ec 0c             	sub    $0xc,%esp
f011561b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115621:	50                   	push   %eax
f0115622:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115628:	50                   	push   %eax
f0115629:	52                   	push   %edx
f011562a:	6a 00                	push   $0x0
f011562c:	ff 75 d8             	pushl  -0x28(%ebp)
f011562f:	e8 0c 38 ff ff       	call   f0108e40 <calculate_allocated_space>
f0115634:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115637:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011563d:	85 c0                	test   %eax,%eax
f011563f:	74 27                	je     f0115668 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115641:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115647:	83 ec 0c             	sub    $0xc,%esp
f011564a:	6a 00                	push   $0x0
f011564c:	50                   	push   %eax
f011564d:	68 50 ab 13 f0       	push   $0xf013ab50
f0115652:	68 b6 06 00 00       	push   $0x6b6
f0115657:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011565c:	e8 b2 ad fe ff       	call   f0100413 <_warn>
f0115661:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115664:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115668:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011566e:	85 c0                	test   %eax,%eax
f0115670:	74 27                	je     f0115699 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115672:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115678:	83 ec 0c             	sub    $0xc,%esp
f011567b:	6a 00                	push   $0x0
f011567d:	50                   	push   %eax
f011567e:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115683:	68 bb 06 00 00       	push   $0x6bb
f0115688:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011568d:	e8 81 ad fe ff       	call   f0100413 <_warn>
f0115692:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115695:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115699:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011569d:	74 04                	je     f01156a3 <test_calculate_allocated_space+0x2ee>
f011569f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01156a3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01156a7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01156ae:	00 00 00 
		num_pages = 0;
f01156b1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01156b8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01156bb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01156be:	89 d0                	mov    %edx,%eax
f01156c0:	01 c0                	add    %eax,%eax
f01156c2:	01 d0                	add    %edx,%eax
f01156c4:	01 c0                	add    %eax,%eax
f01156c6:	05 00 10 00 00       	add    $0x1000,%eax
f01156cb:	89 c2                	mov    %eax,%edx
f01156cd:	83 ec 0c             	sub    $0xc,%esp
f01156d0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01156d6:	50                   	push   %eax
f01156d7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01156dd:	50                   	push   %eax
f01156de:	52                   	push   %edx
f01156df:	68 00 10 00 00       	push   $0x1000
f01156e4:	ff 75 d8             	pushl  -0x28(%ebp)
f01156e7:	e8 54 37 ff ff       	call   f0108e40 <calculate_allocated_space>
f01156ec:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01156ef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01156f5:	85 c0                	test   %eax,%eax
f01156f7:	74 27                	je     f0115720 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01156f9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01156ff:	83 ec 0c             	sub    $0xc,%esp
f0115702:	6a 00                	push   $0x0
f0115704:	50                   	push   %eax
f0115705:	68 50 ab 13 f0       	push   $0xf013ab50
f011570a:	68 c8 06 00 00       	push   $0x6c8
f011570f:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115714:	e8 fa ac fe ff       	call   f0100413 <_warn>
f0115719:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011571c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115720:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115726:	85 c0                	test   %eax,%eax
f0115728:	74 27                	je     f0115751 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011572a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115730:	83 ec 0c             	sub    $0xc,%esp
f0115733:	6a 00                	push   $0x0
f0115735:	50                   	push   %eax
f0115736:	68 b0 ab 13 f0       	push   $0xf013abb0
f011573b:	68 cd 06 00 00       	push   $0x6cd
f0115740:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115745:	e8 c9 ac fe ff       	call   f0100413 <_warn>
f011574a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011574d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115751:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115755:	74 04                	je     f011575b <test_calculate_allocated_space+0x3a6>
f0115757:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011575b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f011575f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115766:	00 00 00 
		num_pages = 0;
f0115769:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115770:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115773:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115776:	89 c2                	mov    %eax,%edx
f0115778:	01 d2                	add    %edx,%edx
f011577a:	01 d0                	add    %edx,%eax
f011577c:	05 00 18 00 00       	add    $0x1800,%eax
f0115781:	89 c2                	mov    %eax,%edx
f0115783:	83 ec 0c             	sub    $0xc,%esp
f0115786:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011578c:	50                   	push   %eax
f011578d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115793:	50                   	push   %eax
f0115794:	52                   	push   %edx
f0115795:	68 00 18 00 00       	push   $0x1800
f011579a:	ff 75 d8             	pushl  -0x28(%ebp)
f011579d:	e8 9e 36 ff ff       	call   f0108e40 <calculate_allocated_space>
f01157a2:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01157a5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157ab:	85 c0                	test   %eax,%eax
f01157ad:	74 27                	je     f01157d6 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01157af:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157b5:	83 ec 0c             	sub    $0xc,%esp
f01157b8:	6a 00                	push   $0x0
f01157ba:	50                   	push   %eax
f01157bb:	68 50 ab 13 f0       	push   $0xf013ab50
f01157c0:	68 d9 06 00 00       	push   $0x6d9
f01157c5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01157ca:	e8 44 ac fe ff       	call   f0100413 <_warn>
f01157cf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157d2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01157d6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157dc:	85 c0                	test   %eax,%eax
f01157de:	74 27                	je     f0115807 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01157e0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01157e6:	83 ec 0c             	sub    $0xc,%esp
f01157e9:	6a 00                	push   $0x0
f01157eb:	50                   	push   %eax
f01157ec:	68 b0 ab 13 f0       	push   $0xf013abb0
f01157f1:	68 de 06 00 00       	push   $0x6de
f01157f6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01157fb:	e8 13 ac fe ff       	call   f0100413 <_warn>
f0115800:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115803:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115807:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011580b:	74 04                	je     f0115811 <test_calculate_allocated_space+0x45c>
f011580d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115811:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115815:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011581c:	00 00 00 
		num_pages = 0;
f011581f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115826:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115829:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011582c:	89 d0                	mov    %edx,%eax
f011582e:	c1 e0 02             	shl    $0x2,%eax
f0115831:	01 d0                	add    %edx,%eax
f0115833:	01 c0                	add    %eax,%eax
f0115835:	05 00 00 40 00       	add    $0x400000,%eax
f011583a:	89 c2                	mov    %eax,%edx
f011583c:	83 ec 0c             	sub    $0xc,%esp
f011583f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115845:	50                   	push   %eax
f0115846:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011584c:	50                   	push   %eax
f011584d:	52                   	push   %edx
f011584e:	68 00 00 40 00       	push   $0x400000
f0115853:	ff 75 d8             	pushl  -0x28(%ebp)
f0115856:	e8 e5 35 ff ff       	call   f0108e40 <calculate_allocated_space>
f011585b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011585e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115864:	85 c0                	test   %eax,%eax
f0115866:	74 27                	je     f011588f <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115868:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011586e:	83 ec 0c             	sub    $0xc,%esp
f0115871:	6a 00                	push   $0x0
f0115873:	50                   	push   %eax
f0115874:	68 50 ab 13 f0       	push   $0xf013ab50
f0115879:	68 ea 06 00 00       	push   $0x6ea
f011587e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115883:	e8 8b ab fe ff       	call   f0100413 <_warn>
f0115888:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011588b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011588f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115895:	85 c0                	test   %eax,%eax
f0115897:	74 27                	je     f01158c0 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115899:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011589f:	83 ec 0c             	sub    $0xc,%esp
f01158a2:	6a 00                	push   $0x0
f01158a4:	50                   	push   %eax
f01158a5:	68 b0 ab 13 f0       	push   $0xf013abb0
f01158aa:	68 ef 06 00 00       	push   $0x6ef
f01158af:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01158b4:	e8 5a ab fe ff       	call   f0100413 <_warn>
f01158b9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158bc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158c0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158c4:	74 04                	je     f01158ca <test_calculate_allocated_space+0x515>
f01158c6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158ca:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f01158ce:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01158d5:	00 00 00 
		num_pages = 0;
f01158d8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01158df:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01158e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01158e5:	05 00 00 38 00       	add    $0x380000,%eax
f01158ea:	01 c0                	add    %eax,%eax
f01158ec:	89 c2                	mov    %eax,%edx
f01158ee:	83 ec 0c             	sub    $0xc,%esp
f01158f1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01158f7:	50                   	push   %eax
f01158f8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01158fe:	50                   	push   %eax
f01158ff:	52                   	push   %edx
f0115900:	68 00 00 70 00       	push   $0x700000
f0115905:	ff 75 d8             	pushl  -0x28(%ebp)
f0115908:	e8 33 35 ff ff       	call   f0108e40 <calculate_allocated_space>
f011590d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115910:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115916:	85 c0                	test   %eax,%eax
f0115918:	74 27                	je     f0115941 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011591a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115920:	83 ec 0c             	sub    $0xc,%esp
f0115923:	6a 00                	push   $0x0
f0115925:	50                   	push   %eax
f0115926:	68 50 ab 13 f0       	push   $0xf013ab50
f011592b:	68 fc 06 00 00       	push   $0x6fc
f0115930:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115935:	e8 d9 aa fe ff       	call   f0100413 <_warn>
f011593a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011593d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115941:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115947:	85 c0                	test   %eax,%eax
f0115949:	74 27                	je     f0115972 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011594b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115951:	83 ec 0c             	sub    $0xc,%esp
f0115954:	6a 00                	push   $0x0
f0115956:	50                   	push   %eax
f0115957:	68 b0 ab 13 f0       	push   $0xf013abb0
f011595c:	68 01 07 00 00       	push   $0x701
f0115961:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115966:	e8 a8 aa fe ff       	call   f0100413 <_warn>
f011596b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011596e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115972:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115976:	74 04                	je     f011597c <test_calculate_allocated_space+0x5c7>
f0115978:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011597c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115980:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115987:	00 00 00 
		num_pages = 0;
f011598a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115991:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115994:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115997:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011599c:	89 c2                	mov    %eax,%edx
f011599e:	83 ec 0c             	sub    $0xc,%esp
f01159a1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01159a7:	50                   	push   %eax
f01159a8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01159ae:	50                   	push   %eax
f01159af:	52                   	push   %edx
f01159b0:	68 ff ff 3f 00       	push   $0x3fffff
f01159b5:	ff 75 d8             	pushl  -0x28(%ebp)
f01159b8:	e8 83 34 ff ff       	call   f0108e40 <calculate_allocated_space>
f01159bd:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01159c0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159c6:	85 c0                	test   %eax,%eax
f01159c8:	74 27                	je     f01159f1 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01159ca:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01159d0:	83 ec 0c             	sub    $0xc,%esp
f01159d3:	6a 00                	push   $0x0
f01159d5:	50                   	push   %eax
f01159d6:	68 50 ab 13 f0       	push   $0xf013ab50
f01159db:	68 0d 07 00 00       	push   $0x70d
f01159e0:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01159e5:	e8 29 aa fe ff       	call   f0100413 <_warn>
f01159ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01159f1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01159f7:	85 c0                	test   %eax,%eax
f01159f9:	74 27                	je     f0115a22 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01159fb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a01:	83 ec 0c             	sub    $0xc,%esp
f0115a04:	6a 00                	push   $0x0
f0115a06:	50                   	push   %eax
f0115a07:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115a0c:	68 12 07 00 00       	push   $0x712
f0115a11:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115a16:	e8 f8 a9 fe ff       	call   f0100413 <_warn>
f0115a1b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a1e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115a22:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a26:	74 04                	je     f0115a2c <test_calculate_allocated_space+0x677>
f0115a28:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115a2c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115a30:	83 ec 0c             	sub    $0xc,%esp
f0115a33:	68 69 a5 13 f0       	push   $0xf013a569
f0115a38:	e8 d1 b2 fe ff       	call   f0100d0e <cprintf>
f0115a3d:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115a40:	83 ec 0c             	sub    $0xc,%esp
f0115a43:	68 70 aa 13 f0       	push   $0xf013aa70
f0115a48:	e8 c1 b2 fe ff       	call   f0100d0e <cprintf>
f0115a4d:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115a50:	83 ec 04             	sub    $0x4,%esp
f0115a53:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115a59:	50                   	push   %eax
f0115a5a:	68 22 99 13 f0       	push   $0xf0139922
f0115a5f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115a65:	50                   	push   %eax
f0115a66:	e8 c0 bf 01 00       	call   f0131a2b <strcconcat>
f0115a6b:	83 c4 10             	add    $0x10,%esp
f0115a6e:	83 ec 0c             	sub    $0xc,%esp
f0115a71:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115a77:	50                   	push   %eax
f0115a78:	e8 f3 b2 fe ff       	call   f0100d70 <execute_command>
f0115a7d:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115a80:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a87:	00 00 00 
		num_pages = 0;
f0115a8a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a91:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115a94:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a97:	c1 e0 03             	shl    $0x3,%eax
f0115a9a:	89 c2                	mov    %eax,%edx
f0115a9c:	83 ec 0c             	sub    $0xc,%esp
f0115a9f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115aa5:	50                   	push   %eax
f0115aa6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115aac:	50                   	push   %eax
f0115aad:	52                   	push   %edx
f0115aae:	6a 00                	push   $0x0
f0115ab0:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ab3:	e8 88 33 ff ff       	call   f0108e40 <calculate_allocated_space>
f0115ab8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115abb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115ac2:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115ac9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115acf:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115ad2:	74 28                	je     f0115afc <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115ad4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ada:	83 ec 0c             	sub    $0xc,%esp
f0115add:	ff 75 c8             	pushl  -0x38(%ebp)
f0115ae0:	50                   	push   %eax
f0115ae1:	68 50 ab 13 f0       	push   $0xf013ab50
f0115ae6:	68 29 07 00 00       	push   $0x729
f0115aeb:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115af0:	e8 1e a9 fe ff       	call   f0100413 <_warn>
f0115af5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115af8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115afc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b02:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115b05:	74 28                	je     f0115b2f <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115b07:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b0d:	83 ec 0c             	sub    $0xc,%esp
f0115b10:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115b13:	50                   	push   %eax
f0115b14:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115b19:	68 2e 07 00 00       	push   $0x72e
f0115b1e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115b23:	e8 eb a8 fe ff       	call   f0100413 <_warn>
f0115b28:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b2b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b2f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b33:	74 04                	je     f0115b39 <test_calculate_allocated_space+0x784>
f0115b35:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b39:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115b3d:	83 ec 04             	sub    $0x4,%esp
f0115b40:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115b46:	50                   	push   %eax
f0115b47:	68 2f 99 13 f0       	push   $0xf013992f
f0115b4c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115b52:	50                   	push   %eax
f0115b53:	e8 d3 be 01 00       	call   f0131a2b <strcconcat>
f0115b58:	83 c4 10             	add    $0x10,%esp
f0115b5b:	83 ec 0c             	sub    $0xc,%esp
f0115b5e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115b64:	50                   	push   %eax
f0115b65:	e8 06 b2 fe ff       	call   f0100d70 <execute_command>
f0115b6a:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115b6d:	83 ec 04             	sub    $0x4,%esp
f0115b70:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115b76:	50                   	push   %eax
f0115b77:	68 a4 aa 13 f0       	push   $0xf013aaa4
f0115b7c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115b82:	50                   	push   %eax
f0115b83:	e8 a3 be 01 00       	call   f0131a2b <strcconcat>
f0115b88:	83 c4 10             	add    $0x10,%esp
f0115b8b:	83 ec 0c             	sub    $0xc,%esp
f0115b8e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115b94:	50                   	push   %eax
f0115b95:	e8 d6 b1 fe ff       	call   f0100d70 <execute_command>
f0115b9a:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0115b9d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ba4:	00 00 00 
		num_pages = 0;
f0115ba7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115bae:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0115bb1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115bb4:	c1 e0 03             	shl    $0x3,%eax
f0115bb7:	89 c2                	mov    %eax,%edx
f0115bb9:	83 ec 0c             	sub    $0xc,%esp
f0115bbc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115bc2:	50                   	push   %eax
f0115bc3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115bc9:	50                   	push   %eax
f0115bca:	52                   	push   %edx
f0115bcb:	6a 00                	push   $0x0
f0115bcd:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bd0:	e8 6b 32 ff ff       	call   f0108e40 <calculate_allocated_space>
f0115bd5:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115bd8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0115bdf:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115be6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bec:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115bef:	74 28                	je     f0115c19 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115bf1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bf7:	83 ec 0c             	sub    $0xc,%esp
f0115bfa:	ff 75 c8             	pushl  -0x38(%ebp)
f0115bfd:	50                   	push   %eax
f0115bfe:	68 50 ab 13 f0       	push   $0xf013ab50
f0115c03:	68 3f 07 00 00       	push   $0x73f
f0115c08:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115c0d:	e8 01 a8 fe ff       	call   f0100413 <_warn>
f0115c12:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c15:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115c19:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c1f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115c22:	74 28                	je     f0115c4c <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115c24:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c2a:	83 ec 0c             	sub    $0xc,%esp
f0115c2d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115c30:	50                   	push   %eax
f0115c31:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115c36:	68 44 07 00 00       	push   $0x744
f0115c3b:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115c40:	e8 ce a7 fe ff       	call   f0100413 <_warn>
f0115c45:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c48:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c4c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c50:	74 04                	je     f0115c56 <test_calculate_allocated_space+0x8a1>
f0115c52:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c56:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115c5a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c61:	00 00 00 
		num_pages = 0;
f0115c64:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c6b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115c6e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115c71:	c1 e0 0a             	shl    $0xa,%eax
f0115c74:	89 c2                	mov    %eax,%edx
f0115c76:	83 ec 0c             	sub    $0xc,%esp
f0115c79:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c7f:	50                   	push   %eax
f0115c80:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c86:	50                   	push   %eax
f0115c87:	52                   	push   %edx
f0115c88:	6a 00                	push   $0x0
f0115c8a:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c8d:	e8 ae 31 ff ff       	call   f0108e40 <calculate_allocated_space>
f0115c92:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0115c95:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0115c9c:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115ca3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ca9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115cac:	74 28                	je     f0115cd6 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115cae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cb4:	83 ec 0c             	sub    $0xc,%esp
f0115cb7:	ff 75 c8             	pushl  -0x38(%ebp)
f0115cba:	50                   	push   %eax
f0115cbb:	68 50 ab 13 f0       	push   $0xf013ab50
f0115cc0:	68 52 07 00 00       	push   $0x752
f0115cc5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115cca:	e8 44 a7 fe ff       	call   f0100413 <_warn>
f0115ccf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cd2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115cd6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115cdc:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115cdf:	74 28                	je     f0115d09 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115ce1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ce7:	83 ec 0c             	sub    $0xc,%esp
f0115cea:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115ced:	50                   	push   %eax
f0115cee:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115cf3:	68 57 07 00 00       	push   $0x757
f0115cf8:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115cfd:	e8 11 a7 fe ff       	call   f0100413 <_warn>
f0115d02:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d05:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115d09:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d0d:	74 04                	je     f0115d13 <test_calculate_allocated_space+0x95e>
f0115d0f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115d13:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115d17:	83 ec 04             	sub    $0x4,%esp
f0115d1a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115d20:	50                   	push   %eax
f0115d21:	68 b0 aa 13 f0       	push   $0xf013aab0
f0115d26:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115d2c:	50                   	push   %eax
f0115d2d:	e8 f9 bc 01 00       	call   f0131a2b <strcconcat>
f0115d32:	83 c4 10             	add    $0x10,%esp
f0115d35:	83 ec 0c             	sub    $0xc,%esp
f0115d38:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115d3e:	50                   	push   %eax
f0115d3f:	e8 2c b0 fe ff       	call   f0100d70 <execute_command>
f0115d44:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0115d47:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d4e:	00 00 00 
		num_pages = 0;
f0115d51:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d58:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115d5b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115d5e:	89 c2                	mov    %eax,%edx
f0115d60:	01 d2                	add    %edx,%edx
f0115d62:	01 d0                	add    %edx,%eax
f0115d64:	05 00 18 00 00       	add    $0x1800,%eax
f0115d69:	89 c2                	mov    %eax,%edx
f0115d6b:	83 ec 0c             	sub    $0xc,%esp
f0115d6e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d74:	50                   	push   %eax
f0115d75:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d7b:	50                   	push   %eax
f0115d7c:	52                   	push   %edx
f0115d7d:	68 00 18 00 00       	push   $0x1800
f0115d82:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d85:	e8 b6 30 ff ff       	call   f0108e40 <calculate_allocated_space>
f0115d8a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115d8d:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115d94:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115d9b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115da1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115da4:	74 28                	je     f0115dce <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115da6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dac:	83 ec 0c             	sub    $0xc,%esp
f0115daf:	ff 75 c8             	pushl  -0x38(%ebp)
f0115db2:	50                   	push   %eax
f0115db3:	68 50 ab 13 f0       	push   $0xf013ab50
f0115db8:	68 68 07 00 00       	push   $0x768
f0115dbd:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115dc2:	e8 4c a6 fe ff       	call   f0100413 <_warn>
f0115dc7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115dce:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115dd4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115dd7:	74 28                	je     f0115e01 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115dd9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ddf:	83 ec 0c             	sub    $0xc,%esp
f0115de2:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115de5:	50                   	push   %eax
f0115de6:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115deb:	68 6d 07 00 00       	push   $0x76d
f0115df0:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115df5:	e8 19 a6 fe ff       	call   f0100413 <_warn>
f0115dfa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dfd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e01:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e05:	74 04                	je     f0115e0b <test_calculate_allocated_space+0xa56>
f0115e07:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e0b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115e0f:	83 ec 04             	sub    $0x4,%esp
f0115e12:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115e18:	50                   	push   %eax
f0115e19:	68 88 9b 13 f0       	push   $0xf0139b88
f0115e1e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115e24:	50                   	push   %eax
f0115e25:	e8 01 bc 01 00       	call   f0131a2b <strcconcat>
f0115e2a:	83 c4 10             	add    $0x10,%esp
f0115e2d:	83 ec 0c             	sub    $0xc,%esp
f0115e30:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115e36:	50                   	push   %eax
f0115e37:	e8 34 af fe ff       	call   f0100d70 <execute_command>
f0115e3c:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0115e3f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e46:	00 00 00 
		num_pages = 0;
f0115e49:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e50:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115e53:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115e56:	89 d0                	mov    %edx,%eax
f0115e58:	c1 e0 02             	shl    $0x2,%eax
f0115e5b:	01 d0                	add    %edx,%eax
f0115e5d:	01 c0                	add    %eax,%eax
f0115e5f:	05 00 00 40 00       	add    $0x400000,%eax
f0115e64:	89 c2                	mov    %eax,%edx
f0115e66:	83 ec 0c             	sub    $0xc,%esp
f0115e69:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e6f:	50                   	push   %eax
f0115e70:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e76:	50                   	push   %eax
f0115e77:	52                   	push   %edx
f0115e78:	68 00 00 40 00       	push   $0x400000
f0115e7d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e80:	e8 bb 2f ff ff       	call   f0108e40 <calculate_allocated_space>
f0115e85:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115e88:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0115e8f:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115e96:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e9c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115e9f:	74 28                	je     f0115ec9 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115ea1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ea7:	83 ec 0c             	sub    $0xc,%esp
f0115eaa:	ff 75 c8             	pushl  -0x38(%ebp)
f0115ead:	50                   	push   %eax
f0115eae:	68 50 ab 13 f0       	push   $0xf013ab50
f0115eb3:	68 7d 07 00 00       	push   $0x77d
f0115eb8:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115ebd:	e8 51 a5 fe ff       	call   f0100413 <_warn>
f0115ec2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ec5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115ec9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ecf:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115ed2:	74 28                	je     f0115efc <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115ed4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115eda:	83 ec 0c             	sub    $0xc,%esp
f0115edd:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115ee0:	50                   	push   %eax
f0115ee1:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115ee6:	68 82 07 00 00       	push   $0x782
f0115eeb:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115ef0:	e8 1e a5 fe ff       	call   f0100413 <_warn>
f0115ef5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ef8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115efc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f00:	74 04                	je     f0115f06 <test_calculate_allocated_space+0xb51>
f0115f02:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f06:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115f0a:	83 ec 04             	sub    $0x4,%esp
f0115f0d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115f13:	50                   	push   %eax
f0115f14:	68 92 9b 13 f0       	push   $0xf0139b92
f0115f19:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115f1f:	50                   	push   %eax
f0115f20:	e8 06 bb 01 00       	call   f0131a2b <strcconcat>
f0115f25:	83 c4 10             	add    $0x10,%esp
f0115f28:	83 ec 0c             	sub    $0xc,%esp
f0115f2b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115f31:	50                   	push   %eax
f0115f32:	e8 39 ae fe ff       	call   f0100d70 <execute_command>
f0115f37:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115f3a:	83 ec 04             	sub    $0x4,%esp
f0115f3d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115f43:	50                   	push   %eax
f0115f44:	68 b8 aa 13 f0       	push   $0xf013aab8
f0115f49:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115f4f:	50                   	push   %eax
f0115f50:	e8 d6 ba 01 00       	call   f0131a2b <strcconcat>
f0115f55:	83 c4 10             	add    $0x10,%esp
f0115f58:	83 ec 0c             	sub    $0xc,%esp
f0115f5b:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115f61:	50                   	push   %eax
f0115f62:	e8 09 ae fe ff       	call   f0100d70 <execute_command>
f0115f67:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0115f6a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f71:	00 00 00 
		num_pages = 0;
f0115f74:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f7b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115f7e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115f81:	05 00 00 38 00       	add    $0x380000,%eax
f0115f86:	01 c0                	add    %eax,%eax
f0115f88:	89 c2                	mov    %eax,%edx
f0115f8a:	83 ec 0c             	sub    $0xc,%esp
f0115f8d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f93:	50                   	push   %eax
f0115f94:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f9a:	50                   	push   %eax
f0115f9b:	52                   	push   %edx
f0115f9c:	68 00 00 70 00       	push   $0x700000
f0115fa1:	ff 75 d8             	pushl  -0x28(%ebp)
f0115fa4:	e8 97 2e ff ff       	call   f0108e40 <calculate_allocated_space>
f0115fa9:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0115fac:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0115fb3:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115fba:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fc0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115fc3:	74 28                	je     f0115fed <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115fc5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fcb:	83 ec 0c             	sub    $0xc,%esp
f0115fce:	ff 75 c8             	pushl  -0x38(%ebp)
f0115fd1:	50                   	push   %eax
f0115fd2:	68 50 ab 13 f0       	push   $0xf013ab50
f0115fd7:	68 94 07 00 00       	push   $0x794
f0115fdc:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115fe1:	e8 2d a4 fe ff       	call   f0100413 <_warn>
f0115fe6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fe9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115fed:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ff3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115ff6:	74 28                	je     f0116020 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115ff8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ffe:	83 ec 0c             	sub    $0xc,%esp
f0116001:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116004:	50                   	push   %eax
f0116005:	68 b0 ab 13 f0       	push   $0xf013abb0
f011600a:	68 99 07 00 00       	push   $0x799
f011600f:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116014:	e8 fa a3 fe ff       	call   f0100413 <_warn>
f0116019:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011601c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116020:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116024:	74 04                	je     f011602a <test_calculate_allocated_space+0xc75>
f0116026:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011602a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f011602e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116035:	00 00 00 
		num_pages = 0;
f0116038:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011603f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116042:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116045:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011604a:	89 c2                	mov    %eax,%edx
f011604c:	83 ec 0c             	sub    $0xc,%esp
f011604f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116055:	50                   	push   %eax
f0116056:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011605c:	50                   	push   %eax
f011605d:	52                   	push   %edx
f011605e:	68 ff ff 3f 00       	push   $0x3fffff
f0116063:	ff 75 d8             	pushl  -0x28(%ebp)
f0116066:	e8 d5 2d ff ff       	call   f0108e40 <calculate_allocated_space>
f011606b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011606e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116075:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011607c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116082:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116085:	74 28                	je     f01160af <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116087:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011608d:	83 ec 0c             	sub    $0xc,%esp
f0116090:	ff 75 c8             	pushl  -0x38(%ebp)
f0116093:	50                   	push   %eax
f0116094:	68 50 ab 13 f0       	push   $0xf013ab50
f0116099:	68 a7 07 00 00       	push   $0x7a7
f011609e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01160a3:	e8 6b a3 fe ff       	call   f0100413 <_warn>
f01160a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01160af:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160b5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01160b8:	74 28                	je     f01160e2 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01160ba:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160c0:	83 ec 0c             	sub    $0xc,%esp
f01160c3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01160c6:	50                   	push   %eax
f01160c7:	68 b0 ab 13 f0       	push   $0xf013abb0
f01160cc:	68 ac 07 00 00       	push   $0x7ac
f01160d1:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01160d6:	e8 38 a3 fe ff       	call   f0100413 <_warn>
f01160db:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160de:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01160e2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01160e6:	74 04                	je     f01160ec <test_calculate_allocated_space+0xd37>
f01160e8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01160ec:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01160f0:	83 ec 0c             	sub    $0xc,%esp
f01160f3:	68 43 9b 13 f0       	push   $0xf0139b43
f01160f8:	e8 11 ac fe ff       	call   f0100d0e <cprintf>
f01160fd:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116100:	83 ec 08             	sub    $0x8,%esp
f0116103:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116106:	68 0c ac 13 f0       	push   $0xf013ac0c
f011610b:	e8 fe ab fe ff       	call   f0100d0e <cprintf>
f0116110:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116113:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116117:	75 10                	jne    f0116129 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0116119:	83 ec 0c             	sub    $0xc,%esp
f011611c:	68 4c ac 13 f0       	push   $0xf013ac4c
f0116121:	e8 e8 ab fe ff       	call   f0100d0e <cprintf>
f0116126:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116129:	a1 ac 1d 88 f0       	mov    0xf0881dac,%eax
f011612e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116131:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116134:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116137:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011613c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011613f:	5b                   	pop    %ebx
f0116140:	5e                   	pop    %esi
f0116141:	5f                   	pop    %edi
f0116142:	5d                   	pop    %ebp
f0116143:	c3                   	ret    

f0116144 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116144:	55                   	push   %ebp
f0116145:	89 e5                	mov    %esp,%ebp
f0116147:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011614a:	8b 45 10             	mov    0x10(%ebp),%eax
f011614d:	ba 01 00 00 00       	mov    $0x1,%edx
f0116152:	88 c1                	mov    %al,%cl
f0116154:	d3 e2                	shl    %cl,%edx
f0116156:	89 d0                	mov    %edx,%eax
f0116158:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011615b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011615e:	c1 e8 16             	shr    $0x16,%eax
f0116161:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116168:	8b 45 08             	mov    0x8(%ebp),%eax
f011616b:	01 d0                	add    %edx,%eax
f011616d:	8b 00                	mov    (%eax),%eax
f011616f:	83 e0 01             	and    $0x1,%eax
f0116172:	85 c0                	test   %eax,%eax
f0116174:	75 07                	jne    f011617d <CB+0x39>
f0116176:	b8 00 00 00 00       	mov    $0x0,%eax
f011617b:	eb 76                	jmp    f01161f3 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011617d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116180:	c1 e8 16             	shr    $0x16,%eax
f0116183:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011618a:	8b 45 08             	mov    0x8(%ebp),%eax
f011618d:	01 d0                	add    %edx,%eax
f011618f:	8b 00                	mov    (%eax),%eax
f0116191:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116196:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116199:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011619c:	c1 e8 0c             	shr    $0xc,%eax
f011619f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01161a2:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f01161a7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01161aa:	72 17                	jb     f01161c3 <CB+0x7f>
f01161ac:	ff 75 f0             	pushl  -0x10(%ebp)
f01161af:	68 98 ac 13 f0       	push   $0xf013ac98
f01161b4:	68 c7 07 00 00       	push   $0x7c7
f01161b9:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01161be:	e8 42 a0 fe ff       	call   f0100205 <_panic>
f01161c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01161c6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01161cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01161ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01161d1:	c1 e8 0c             	shr    $0xc,%eax
f01161d4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01161d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01161e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01161e3:	01 d0                	add    %edx,%eax
f01161e5:	8b 00                	mov    (%eax),%eax
f01161e7:	23 45 f4             	and    -0xc(%ebp),%eax
f01161ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01161ed:	0f 94 c0             	sete   %al
f01161f0:	0f b6 c0             	movzbl %al,%eax
}
f01161f3:	c9                   	leave  
f01161f4:	c3                   	ret    

f01161f5 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f01161f5:	55                   	push   %ebp
f01161f6:	89 e5                	mov    %esp,%ebp
f01161f8:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01161fb:	68 c7 ac 13 f0       	push   $0xf013acc7
f0116200:	68 d6 ac 13 f0       	push   $0xf013acd6
f0116205:	68 cc 07 00 00       	push   $0x7cc
f011620a:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011620f:	e8 f1 9f fe ff       	call   f0100205 <_panic>

f0116214 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116214:	55                   	push   %ebp
f0116215:	89 e5                	mov    %esp,%ebp
f0116217:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011621a:	68 c7 ac 13 f0       	push   $0xf013acc7
f011621f:	68 d6 ac 13 f0       	push   $0xf013acd6
f0116224:	68 d6 07 00 00       	push   $0x7d6
f0116229:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011622e:	e8 d2 9f fe ff       	call   f0100205 <_panic>

f0116233 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0116233:	55                   	push   %ebp
f0116234:	89 e5                	mov    %esp,%ebp
f0116236:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116239:	68 c7 ac 13 f0       	push   $0xf013acc7
f011623e:	68 d6 ac 13 f0       	push   $0xf013acd6
f0116243:	68 e5 07 00 00       	push   $0x7e5
f0116248:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011624d:	e8 b3 9f fe ff       	call   f0100205 <_panic>

f0116252 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f0116252:	55                   	push   %ebp
f0116253:	89 e5                	mov    %esp,%ebp
f0116255:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116258:	8b 45 0c             	mov    0xc(%ebp),%eax
f011625b:	c1 e8 16             	shr    $0x16,%eax
f011625e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116265:	8b 45 08             	mov    0x8(%ebp),%eax
f0116268:	01 d0                	add    %edx,%eax
f011626a:	8b 00                	mov    (%eax),%eax
f011626c:	83 e0 01             	and    $0x1,%eax
f011626f:	85 c0                	test   %eax,%eax
f0116271:	75 07                	jne    f011627a <CE+0x28>
f0116273:	b8 00 00 00 00       	mov    $0x0,%eax
f0116278:	eb 7a                	jmp    f01162f4 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011627a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011627d:	c1 e8 16             	shr    $0x16,%eax
f0116280:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116287:	8b 45 08             	mov    0x8(%ebp),%eax
f011628a:	01 d0                	add    %edx,%eax
f011628c:	8b 00                	mov    (%eax),%eax
f011628e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116293:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116299:	c1 e8 0c             	shr    $0xc,%eax
f011629c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011629f:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f01162a4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01162a7:	72 17                	jb     f01162c0 <CE+0x6e>
f01162a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01162ac:	68 98 ac 13 f0       	push   $0xf013ac98
f01162b1:	68 ee 07 00 00       	push   $0x7ee
f01162b6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01162bb:	e8 45 9f fe ff       	call   f0100205 <_panic>
f01162c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01162c3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01162c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01162cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01162ce:	c1 e8 0c             	shr    $0xc,%eax
f01162d1:	25 ff 03 00 00       	and    $0x3ff,%eax
f01162d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01162dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01162e0:	01 d0                	add    %edx,%eax
f01162e2:	8b 00                	mov    (%eax),%eax
f01162e4:	85 c0                	test   %eax,%eax
f01162e6:	74 07                	je     f01162ef <CE+0x9d>
f01162e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01162ed:	eb 05                	jmp    f01162f4 <CE+0xa2>
	return 1;
f01162ef:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01162f4:	c9                   	leave  
f01162f5:	c3                   	ret    

f01162f6 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f01162f6:	55                   	push   %ebp
f01162f7:	89 e5                	mov    %esp,%ebp
f01162f9:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01162fc:	68 c7 ac 13 f0       	push   $0xf013acc7
f0116301:	68 d6 ac 13 f0       	push   $0xf013acd6
f0116306:	68 f5 07 00 00       	push   $0x7f5
f011630b:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116310:	e8 f0 9e fe ff       	call   f0100205 <_panic>

f0116315 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116315:	55                   	push   %ebp
f0116316:	89 e5                	mov    %esp,%ebp
f0116318:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011631b:	68 c7 ac 13 f0       	push   $0xf013acc7
f0116320:	68 d6 ac 13 f0       	push   $0xf013acd6
f0116325:	68 05 08 00 00       	push   $0x805
f011632a:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011632f:	e8 d1 9e fe ff       	call   f0100205 <_panic>

f0116334 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0116334:	55                   	push   %ebp
f0116335:	89 e5                	mov    %esp,%ebp
f0116337:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011633a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116341:	eb 18                	jmp    f011635b <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116343:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116346:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011634d:	8b 45 08             	mov    0x8(%ebp),%eax
f0116350:	01 d0                	add    %edx,%eax
f0116352:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116358:	ff 45 fc             	incl   -0x4(%ebp)
f011635b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011635e:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116363:	76 de                	jbe    f0116343 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116365:	90                   	nop
f0116366:	c9                   	leave  
f0116367:	c3                   	ret    

f0116368 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116368:	55                   	push   %ebp
f0116369:	89 e5                	mov    %esp,%ebp
f011636b:	83 ec 38             	sub    $0x38,%esp
f011636e:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116371:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116374:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116377:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011637c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f011637f:	8b 45 10             	mov    0x10(%ebp),%eax
f0116382:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116387:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f011638a:	e9 ea 01 00 00       	jmp    f0116579 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f011638f:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116393:	74 44                	je     f01163d9 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116398:	83 ec 04             	sub    $0x4,%esp
f011639b:	8d 55 dc             	lea    -0x24(%ebp),%edx
f011639e:	52                   	push   %edx
f011639f:	50                   	push   %eax
f01163a0:	ff 75 08             	pushl  0x8(%ebp)
f01163a3:	e8 5e 0a ff ff       	call   f0106e06 <get_frame_info>
f01163a8:	83 c4 10             	add    $0x10,%esp
f01163ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01163ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01163b1:	85 c0                	test   %eax,%eax
f01163b3:	75 24                	jne    f01163d9 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01163b5:	83 ec 04             	sub    $0x4,%esp
f01163b8:	68 ec ac 13 f0       	push   $0xf013acec
f01163bd:	68 22 08 00 00       	push   $0x822
f01163c2:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01163c7:	e8 47 a0 fe ff       	call   f0100413 <_warn>
f01163cc:	83 c4 10             	add    $0x10,%esp
				return 0;
f01163cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01163d4:	e9 b6 01 00 00       	jmp    f011658f <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01163d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01163dc:	83 ec 04             	sub    $0x4,%esp
f01163df:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01163e2:	52                   	push   %edx
f01163e3:	50                   	push   %eax
f01163e4:	ff 75 08             	pushl  0x8(%ebp)
f01163e7:	e8 1a 0a ff ff       	call   f0106e06 <get_frame_info>
f01163ec:	83 c4 10             	add    $0x10,%esp
f01163ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f01163f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01163f5:	85 c0                	test   %eax,%eax
f01163f7:	75 24                	jne    f011641d <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f01163f9:	83 ec 04             	sub    $0x4,%esp
f01163fc:	68 18 ad 13 f0       	push   $0xf013ad18
f0116401:	68 29 08 00 00       	push   $0x829
f0116406:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011640b:	e8 03 a0 fe ff       	call   f0100413 <_warn>
f0116410:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116413:	b8 00 00 00 00       	mov    $0x0,%eax
f0116418:	e9 72 01 00 00       	jmp    f011658f <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f011641d:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116421:	75 70                	jne    f0116493 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116423:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116426:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116429:	c1 ea 0c             	shr    $0xc,%edx
f011642c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116432:	c1 e2 02             	shl    $0x2,%edx
f0116435:	01 d0                	add    %edx,%eax
f0116437:	8b 00                	mov    (%eax),%eax
f0116439:	c1 e8 0c             	shr    $0xc,%eax
f011643c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f011643f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116442:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116445:	c1 ea 0c             	shr    $0xc,%edx
f0116448:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011644e:	c1 e2 02             	shl    $0x2,%edx
f0116451:	01 d0                	add    %edx,%eax
f0116453:	8b 00                	mov    (%eax),%eax
f0116455:	c1 e8 0c             	shr    $0xc,%eax
f0116458:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f011645b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011645e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116461:	74 30                	je     f0116493 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116463:	83 ec 04             	sub    $0x4,%esp
f0116466:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116469:	ff 75 e8             	pushl  -0x18(%ebp)
f011646c:	ff 75 f0             	pushl  -0x10(%ebp)
f011646f:	ff 75 f4             	pushl  -0xc(%ebp)
f0116472:	68 44 ad 13 f0       	push   $0xf013ad44
f0116477:	68 33 08 00 00       	push   $0x833
f011647c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116481:	e8 8d 9f fe ff       	call   f0100413 <_warn>
f0116486:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116489:	b8 00 00 00 00       	mov    $0x0,%eax
f011648e:	e9 fc 00 00 00       	jmp    f011658f <CCP+0x227>
			}
		}
		if (ref != -1)
f0116493:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116497:	74 52                	je     f01164eb <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116499:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011649d:	74 0e                	je     f01164ad <CCP+0x145>
f011649f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01164a2:	8b 40 08             	mov    0x8(%eax),%eax
f01164a5:	0f b7 c0             	movzwl %ax,%eax
f01164a8:	3b 45 18             	cmp    0x18(%ebp),%eax
f01164ab:	74 3e                	je     f01164eb <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01164ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01164b1:	74 0b                	je     f01164be <CCP+0x156>
f01164b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01164b6:	8b 40 08             	mov    0x8(%eax),%eax
f01164b9:	0f b7 c0             	movzwl %ax,%eax
f01164bc:	eb 05                	jmp    f01164c3 <CCP+0x15b>
f01164be:	b8 00 00 00 00       	mov    $0x0,%eax
f01164c3:	83 ec 0c             	sub    $0xc,%esp
f01164c6:	50                   	push   %eax
f01164c7:	ff 75 f0             	pushl  -0x10(%ebp)
f01164ca:	68 a0 ad 13 f0       	push   $0xf013ada0
f01164cf:	68 3b 08 00 00       	push   $0x83b
f01164d4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01164d9:	e8 35 9f fe ff       	call   f0100413 <_warn>
f01164de:	83 c4 20             	add    $0x20,%esp
				return 0;
f01164e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01164e6:	e9 a4 00 00 00       	jmp    f011658f <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f01164eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01164ee:	ff 75 20             	pushl  0x20(%ebp)
f01164f1:	ff 75 1c             	pushl  0x1c(%ebp)
f01164f4:	50                   	push   %eax
f01164f5:	ff 75 08             	pushl  0x8(%ebp)
f01164f8:	e8 17 fd ff ff       	call   f0116214 <CPs>
f01164fd:	83 c4 10             	add    $0x10,%esp
f0116500:	85 c0                	test   %eax,%eax
f0116502:	7f 21                	jg     f0116525 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116504:	83 ec 04             	sub    $0x4,%esp
f0116507:	68 10 ae 13 f0       	push   $0xf013ae10
f011650c:	68 41 08 00 00       	push   $0x841
f0116511:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116516:	e8 f8 9e fe ff       	call   f0100413 <_warn>
f011651b:	83 c4 10             	add    $0x10,%esp
			return 0;
f011651e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116523:	eb 6a                	jmp    f011658f <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116525:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116529:	74 3a                	je     f0116565 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f011652b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011652e:	ff 75 28             	pushl  0x28(%ebp)
f0116531:	ff 75 24             	pushl  0x24(%ebp)
f0116534:	50                   	push   %eax
f0116535:	ff 75 08             	pushl  0x8(%ebp)
f0116538:	e8 d7 fc ff ff       	call   f0116214 <CPs>
f011653d:	83 c4 10             	add    $0x10,%esp
f0116540:	85 c0                	test   %eax,%eax
f0116542:	7f 21                	jg     f0116565 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116544:	83 ec 04             	sub    $0x4,%esp
f0116547:	68 58 ae 13 f0       	push   $0xf013ae58
f011654c:	68 48 08 00 00       	push   $0x848
f0116551:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116556:	e8 b8 9e fe ff       	call   f0100413 <_warn>
f011655b:	83 c4 10             	add    $0x10,%esp
				return 0;
f011655e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116563:	eb 2a                	jmp    f011658f <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116565:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116569:	74 07                	je     f0116572 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f011656b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116572:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116579:	8b 55 10             	mov    0x10(%ebp),%edx
f011657c:	8b 45 14             	mov    0x14(%ebp),%eax
f011657f:	01 d0                	add    %edx,%eax
f0116581:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116584:	0f 87 05 fe ff ff    	ja     f011638f <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f011658a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011658f:	c9                   	leave  
f0116590:	c3                   	ret    

f0116591 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116591:	55                   	push   %ebp
f0116592:	89 e5                	mov    %esp,%ebp
f0116594:	57                   	push   %edi
f0116595:	56                   	push   %esi
f0116596:	53                   	push   %ebx
f0116597:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f011659d:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f01165a2:	84 c0                	test   %al,%al
f01165a4:	0f 84 b4 09 00 00    	je     f0116f5e <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01165aa:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f01165b1:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01165b7:	bb f8 b0 13 f0       	mov    $0xf013b0f8,%ebx
f01165bc:	ba 04 00 00 00       	mov    $0x4,%edx
f01165c1:	89 c7                	mov    %eax,%edi
f01165c3:	89 de                	mov    %ebx,%esi
f01165c5:	89 d1                	mov    %edx,%ecx
f01165c7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01165c9:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f01165cf:	b9 15 00 00 00       	mov    $0x15,%ecx
f01165d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01165d9:	89 d7                	mov    %edx,%edi
f01165db:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01165dd:	83 ec 0c             	sub    $0xc,%esp
f01165e0:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01165e6:	50                   	push   %eax
f01165e7:	e8 84 a7 fe ff       	call   f0100d70 <execute_command>
f01165ec:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f01165ef:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f01165f5:	bb 5c b1 13 f0       	mov    $0xf013b15c,%ebx
f01165fa:	ba 0d 00 00 00       	mov    $0xd,%edx
f01165ff:	89 c7                	mov    %eax,%edi
f0116601:	89 de                	mov    %ebx,%esi
f0116603:	89 d1                	mov    %edx,%ecx
f0116605:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116607:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f011660d:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116612:	b0 00                	mov    $0x0,%al
f0116614:	89 d7                	mov    %edx,%edi
f0116616:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116618:	83 ec 0c             	sub    $0xc,%esp
f011661b:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116621:	50                   	push   %eax
f0116622:	e8 49 a7 fe ff       	call   f0100d70 <execute_command>
f0116627:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011662a:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116630:	bb c0 b1 13 f0       	mov    $0xf013b1c0,%ebx
f0116635:	ba 17 00 00 00       	mov    $0x17,%edx
f011663a:	89 c7                	mov    %eax,%edi
f011663c:	89 de                	mov    %ebx,%esi
f011663e:	89 d1                	mov    %edx,%ecx
f0116640:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116642:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116648:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011664d:	b0 00                	mov    $0x0,%al
f011664f:	89 d7                	mov    %edx,%edi
f0116651:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116653:	83 ec 0c             	sub    $0xc,%esp
f0116656:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011665c:	50                   	push   %eax
f011665d:	e8 0e a7 fe ff       	call   f0100d70 <execute_command>
f0116662:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116665:	83 ec 04             	sub    $0x4,%esp
f0116668:	6a 00                	push   $0x0
f011666a:	8d 45 ac             	lea    -0x54(%ebp),%eax
f011666d:	50                   	push   %eax
f011666e:	68 00 10 00 00       	push   $0x1000
f0116673:	e8 87 36 ff ff       	call   f0109cff <envid2env>
f0116678:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011667b:	83 ec 04             	sub    $0x4,%esp
f011667e:	6a 00                	push   $0x0
f0116680:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116683:	50                   	push   %eax
f0116684:	68 01 10 00 00       	push   $0x1001
f0116689:	e8 71 36 ff ff       	call   f0109cff <envid2env>
f011668e:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116691:	83 ec 04             	sub    $0x4,%esp
f0116694:	6a 00                	push   $0x0
f0116696:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116699:	50                   	push   %eax
f011669a:	68 02 10 00 00       	push   $0x1002
f011669f:	e8 5b 36 ff ff       	call   f0109cff <envid2env>
f01166a4:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01166a7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01166aa:	85 c0                	test   %eax,%eax
f01166ac:	74 0e                	je     f01166bc <test_priority_normal_and_higher+0x12b>
f01166ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01166b1:	85 c0                	test   %eax,%eax
f01166b3:	74 07                	je     f01166bc <test_priority_normal_and_higher+0x12b>
f01166b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166b8:	85 c0                	test   %eax,%eax
f01166ba:	75 14                	jne    f01166d0 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f01166bc:	83 ec 04             	sub    $0x4,%esp
f01166bf:	68 98 ae 13 f0       	push   $0xf013ae98
f01166c4:	6a 26                	push   $0x26
f01166c6:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01166cb:	e8 35 9b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01166d0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01166d3:	8b 40 74             	mov    0x74(%eax),%eax
f01166d6:	83 f8 14             	cmp    $0x14,%eax
f01166d9:	75 16                	jne    f01166f1 <test_priority_normal_and_higher+0x160>
f01166db:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01166de:	8b 40 74             	mov    0x74(%eax),%eax
f01166e1:	83 f8 0f             	cmp    $0xf,%eax
f01166e4:	75 0b                	jne    f01166f1 <test_priority_normal_and_higher+0x160>
f01166e6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01166e9:	8b 40 74             	mov    0x74(%eax),%eax
f01166ec:	83 f8 0a             	cmp    $0xa,%eax
f01166ef:	74 14                	je     f0116705 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f01166f1:	83 ec 04             	sub    $0x4,%esp
f01166f4:	68 cc ae 13 f0       	push   $0xf013aecc
f01166f9:	6a 29                	push   $0x29
f01166fb:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116700:	e8 00 9b fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116705:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011670c:	eb 44                	jmp    f0116752 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011670e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116711:	8b 48 78             	mov    0x78(%eax),%ecx
f0116714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116717:	89 d0                	mov    %edx,%eax
f0116719:	01 c0                	add    %eax,%eax
f011671b:	01 d0                	add    %edx,%eax
f011671d:	c1 e0 03             	shl    $0x3,%eax
f0116720:	01 c8                	add    %ecx,%eax
f0116722:	8b 10                	mov    (%eax),%edx
f0116724:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116727:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011672e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116731:	8b 48 78             	mov    0x78(%eax),%ecx
f0116734:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116737:	89 d0                	mov    %edx,%eax
f0116739:	01 c0                	add    %eax,%eax
f011673b:	01 d0                	add    %edx,%eax
f011673d:	c1 e0 03             	shl    $0x3,%eax
f0116740:	01 c8                	add    %ecx,%eax
f0116742:	8b 50 08             	mov    0x8(%eax),%edx
f0116745:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116748:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011674f:	ff 45 e4             	incl   -0x1c(%ebp)
f0116752:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116756:	7e b6                	jle    f011670e <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116758:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011675f:	eb 44                	jmp    f01167a5 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116761:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116764:	8b 48 78             	mov    0x78(%eax),%ecx
f0116767:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011676a:	89 d0                	mov    %edx,%eax
f011676c:	01 c0                	add    %eax,%eax
f011676e:	01 d0                	add    %edx,%eax
f0116770:	c1 e0 03             	shl    $0x3,%eax
f0116773:	01 c8                	add    %ecx,%eax
f0116775:	8b 10                	mov    (%eax),%edx
f0116777:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011677a:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116781:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116784:	8b 48 78             	mov    0x78(%eax),%ecx
f0116787:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011678a:	89 d0                	mov    %edx,%eax
f011678c:	01 c0                	add    %eax,%eax
f011678e:	01 d0                	add    %edx,%eax
f0116790:	c1 e0 03             	shl    $0x3,%eax
f0116793:	01 c8                	add    %ecx,%eax
f0116795:	8b 50 08             	mov    0x8(%eax),%edx
f0116798:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011679b:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01167a2:	ff 45 e0             	incl   -0x20(%ebp)
f01167a5:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01167a9:	7e b6                	jle    f0116761 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01167ab:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01167b2:	eb 44                	jmp    f01167f8 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01167b4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167b7:	8b 48 78             	mov    0x78(%eax),%ecx
f01167ba:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01167bd:	89 d0                	mov    %edx,%eax
f01167bf:	01 c0                	add    %eax,%eax
f01167c1:	01 d0                	add    %edx,%eax
f01167c3:	c1 e0 03             	shl    $0x3,%eax
f01167c6:	01 c8                	add    %ecx,%eax
f01167c8:	8b 10                	mov    (%eax),%edx
f01167ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01167cd:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01167d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01167d7:	8b 48 78             	mov    0x78(%eax),%ecx
f01167da:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01167dd:	89 d0                	mov    %edx,%eax
f01167df:	01 c0                	add    %eax,%eax
f01167e1:	01 d0                	add    %edx,%eax
f01167e3:	c1 e0 03             	shl    $0x3,%eax
f01167e6:	01 c8                	add    %ecx,%eax
f01167e8:	8b 50 08             	mov    0x8(%eax),%edx
f01167eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01167ee:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01167f5:	ff 45 dc             	incl   -0x24(%ebp)
f01167f8:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f01167fc:	7e b6                	jle    f01167b4 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01167fe:	e8 8e 65 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116803:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116806:	e8 bd d5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011680b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011680e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116811:	83 ec 08             	sub    $0x8,%esp
f0116814:	6a 03                	push   $0x3
f0116816:	50                   	push   %eax
f0116817:	e8 c1 49 ff ff       	call   f010b1dd <set_program_priority>
f011681c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011681f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116822:	83 ec 08             	sub    $0x8,%esp
f0116825:	6a 03                	push   $0x3
f0116827:	50                   	push   %eax
f0116828:	e8 b0 49 ff ff       	call   f010b1dd <set_program_priority>
f011682d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116830:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116833:	83 ec 08             	sub    $0x8,%esp
f0116836:	6a 03                	push   $0x3
f0116838:	50                   	push   %eax
f0116839:	e8 9f 49 ff ff       	call   f010b1dd <set_program_priority>
f011683e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116841:	e8 82 d5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116846:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116849:	74 14                	je     f011685f <test_priority_normal_and_higher+0x2ce>
f011684b:	83 ec 04             	sub    $0x4,%esp
f011684e:	68 18 af 13 f0       	push   $0xf013af18
f0116853:	6a 45                	push   $0x45
f0116855:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011685a:	e8 a6 99 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011685f:	e8 2d 65 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116864:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116867:	74 14                	je     f011687d <test_priority_normal_and_higher+0x2ec>
f0116869:	83 ec 04             	sub    $0x4,%esp
f011686c:	68 18 af 13 f0       	push   $0xf013af18
f0116871:	6a 46                	push   $0x46
f0116873:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116878:	e8 88 99 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011687d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116880:	8b 40 74             	mov    0x74(%eax),%eax
f0116883:	83 f8 14             	cmp    $0x14,%eax
f0116886:	75 16                	jne    f011689e <test_priority_normal_and_higher+0x30d>
f0116888:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011688b:	8b 40 74             	mov    0x74(%eax),%eax
f011688e:	83 f8 0f             	cmp    $0xf,%eax
f0116891:	75 0b                	jne    f011689e <test_priority_normal_and_higher+0x30d>
f0116893:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116896:	8b 40 74             	mov    0x74(%eax),%eax
f0116899:	83 f8 0a             	cmp    $0xa,%eax
f011689c:	74 14                	je     f01168b2 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011689e:	83 ec 04             	sub    $0x4,%esp
f01168a1:	68 44 af 13 f0       	push   $0xf013af44
f01168a6:	6a 49                	push   $0x49
f01168a8:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01168ad:	e8 53 99 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01168b2:	e8 da 64 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01168b7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01168ba:	e8 09 d5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01168bf:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01168c2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01168c5:	83 ec 08             	sub    $0x8,%esp
f01168c8:	6a 04                	push   $0x4
f01168ca:	50                   	push   %eax
f01168cb:	e8 0d 49 ff ff       	call   f010b1dd <set_program_priority>
f01168d0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01168d3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01168d6:	83 ec 08             	sub    $0x8,%esp
f01168d9:	6a 04                	push   $0x4
f01168db:	50                   	push   %eax
f01168dc:	e8 fc 48 ff ff       	call   f010b1dd <set_program_priority>
f01168e1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01168e4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01168e7:	83 ec 08             	sub    $0x8,%esp
f01168ea:	6a 04                	push   $0x4
f01168ec:	50                   	push   %eax
f01168ed:	e8 eb 48 ff ff       	call   f010b1dd <set_program_priority>
f01168f2:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01168f5:	e8 ce d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01168fa:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01168fd:	74 14                	je     f0116913 <test_priority_normal_and_higher+0x382>
f01168ff:	83 ec 04             	sub    $0x4,%esp
f0116902:	68 18 af 13 f0       	push   $0xf013af18
f0116907:	6a 53                	push   $0x53
f0116909:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011690e:	e8 f2 98 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116913:	e8 79 64 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116918:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011691b:	74 14                	je     f0116931 <test_priority_normal_and_higher+0x3a0>
f011691d:	83 ec 04             	sub    $0x4,%esp
f0116920:	68 98 af 13 f0       	push   $0xf013af98
f0116925:	6a 54                	push   $0x54
f0116927:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011692c:	e8 d4 98 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116931:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116934:	8b 40 74             	mov    0x74(%eax),%eax
f0116937:	83 f8 14             	cmp    $0x14,%eax
f011693a:	75 16                	jne    f0116952 <test_priority_normal_and_higher+0x3c1>
f011693c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011693f:	8b 40 74             	mov    0x74(%eax),%eax
f0116942:	83 f8 0f             	cmp    $0xf,%eax
f0116945:	75 0b                	jne    f0116952 <test_priority_normal_and_higher+0x3c1>
f0116947:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011694a:	8b 40 74             	mov    0x74(%eax),%eax
f011694d:	83 f8 14             	cmp    $0x14,%eax
f0116950:	74 14                	je     f0116966 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116952:	83 ec 04             	sub    $0x4,%esp
f0116955:	68 c8 af 13 f0       	push   $0xf013afc8
f011695a:	6a 57                	push   $0x57
f011695c:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116961:	e8 9f 98 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116966:	e8 26 64 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011696b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011696e:	e8 55 d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116973:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116976:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116979:	83 ec 08             	sub    $0x8,%esp
f011697c:	6a 04                	push   $0x4
f011697e:	50                   	push   %eax
f011697f:	e8 59 48 ff ff       	call   f010b1dd <set_program_priority>
f0116984:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116987:	e8 3c d4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011698c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011698f:	74 14                	je     f01169a5 <test_priority_normal_and_higher+0x414>
f0116991:	83 ec 04             	sub    $0x4,%esp
f0116994:	68 18 af 13 f0       	push   $0xf013af18
f0116999:	6a 5f                	push   $0x5f
f011699b:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01169a0:	e8 60 98 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01169a5:	e8 e7 63 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01169aa:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01169ad:	74 14                	je     f01169c3 <test_priority_normal_and_higher+0x432>
f01169af:	83 ec 04             	sub    $0x4,%esp
f01169b2:	68 18 af 13 f0       	push   $0xf013af18
f01169b7:	6a 60                	push   $0x60
f01169b9:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01169be:	e8 42 98 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01169c3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01169c6:	8b 40 74             	mov    0x74(%eax),%eax
f01169c9:	83 f8 14             	cmp    $0x14,%eax
f01169cc:	75 16                	jne    f01169e4 <test_priority_normal_and_higher+0x453>
f01169ce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01169d1:	8b 40 74             	mov    0x74(%eax),%eax
f01169d4:	83 f8 0f             	cmp    $0xf,%eax
f01169d7:	75 0b                	jne    f01169e4 <test_priority_normal_and_higher+0x453>
f01169d9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169dc:	8b 40 74             	mov    0x74(%eax),%eax
f01169df:	83 f8 14             	cmp    $0x14,%eax
f01169e2:	74 14                	je     f01169f8 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f01169e4:	83 ec 04             	sub    $0x4,%esp
f01169e7:	68 10 b0 13 f0       	push   $0xf013b010
f01169ec:	6a 63                	push   $0x63
f01169ee:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01169f3:	e8 0d 98 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01169f8:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f01169ff:	eb 1b                	jmp    f0116a1c <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116a01:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a04:	8b 48 78             	mov    0x78(%eax),%ecx
f0116a07:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116a0a:	89 d0                	mov    %edx,%eax
f0116a0c:	01 c0                	add    %eax,%eax
f0116a0e:	01 d0                	add    %edx,%eax
f0116a10:	c1 e0 03             	shl    $0x3,%eax
f0116a13:	01 c8                	add    %ecx,%eax
f0116a15:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116a19:	ff 45 d8             	incl   -0x28(%ebp)
f0116a1c:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116a20:	7e df                	jle    f0116a01 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116a22:	e8 6a 63 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116a27:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a2a:	e8 99 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116a2f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116a32:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a35:	83 ec 08             	sub    $0x8,%esp
f0116a38:	6a 04                	push   $0x4
f0116a3a:	50                   	push   %eax
f0116a3b:	e8 9d 47 ff ff       	call   f010b1dd <set_program_priority>
f0116a40:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a43:	e8 80 d3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116a48:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116a4b:	74 14                	je     f0116a61 <test_priority_normal_and_higher+0x4d0>
f0116a4d:	83 ec 04             	sub    $0x4,%esp
f0116a50:	68 18 af 13 f0       	push   $0xf013af18
f0116a55:	6a 70                	push   $0x70
f0116a57:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116a5c:	e8 a4 97 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116a61:	e8 2b 63 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116a66:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116a69:	74 14                	je     f0116a7f <test_priority_normal_and_higher+0x4ee>
f0116a6b:	83 ec 04             	sub    $0x4,%esp
f0116a6e:	68 18 af 13 f0       	push   $0xf013af18
f0116a73:	6a 71                	push   $0x71
f0116a75:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116a7a:	e8 86 97 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116a7f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116a82:	8b 40 74             	mov    0x74(%eax),%eax
f0116a85:	83 f8 14             	cmp    $0x14,%eax
f0116a88:	75 16                	jne    f0116aa0 <test_priority_normal_and_higher+0x50f>
f0116a8a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116a8d:	8b 40 74             	mov    0x74(%eax),%eax
f0116a90:	83 f8 0f             	cmp    $0xf,%eax
f0116a93:	75 0b                	jne    f0116aa0 <test_priority_normal_and_higher+0x50f>
f0116a95:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116a98:	8b 40 74             	mov    0x74(%eax),%eax
f0116a9b:	83 f8 14             	cmp    $0x14,%eax
f0116a9e:	74 14                	je     f0116ab4 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116aa0:	83 ec 04             	sub    $0x4,%esp
f0116aa3:	68 10 b0 13 f0       	push   $0xf013b010
f0116aa8:	6a 74                	push   $0x74
f0116aaa:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116aaf:	e8 51 97 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f0116ab4:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0116abb:	eb 1b                	jmp    f0116ad8 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116abd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116ac0:	8b 48 78             	mov    0x78(%eax),%ecx
f0116ac3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116ac6:	89 d0                	mov    %edx,%eax
f0116ac8:	01 c0                	add    %eax,%eax
f0116aca:	01 d0                	add    %edx,%eax
f0116acc:	c1 e0 03             	shl    $0x3,%eax
f0116acf:	01 c8                	add    %ecx,%eax
f0116ad1:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116ad5:	ff 45 d4             	incl   -0x2c(%ebp)
f0116ad8:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116adc:	7e df                	jle    f0116abd <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116ade:	e8 ae 62 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116ae3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ae6:	e8 dd d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116aeb:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116aee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116af1:	83 ec 08             	sub    $0x8,%esp
f0116af4:	6a 05                	push   $0x5
f0116af6:	50                   	push   %eax
f0116af7:	e8 e1 46 ff ff       	call   f010b1dd <set_program_priority>
f0116afc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0116aff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b02:	83 ec 08             	sub    $0x8,%esp
f0116b05:	6a 05                	push   $0x5
f0116b07:	50                   	push   %eax
f0116b08:	e8 d0 46 ff ff       	call   f010b1dd <set_program_priority>
f0116b0d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116b10:	e8 b3 d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116b15:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116b18:	74 14                	je     f0116b2e <test_priority_normal_and_higher+0x59d>
f0116b1a:	83 ec 04             	sub    $0x4,%esp
f0116b1d:	68 18 af 13 f0       	push   $0xf013af18
f0116b22:	6a 7f                	push   $0x7f
f0116b24:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116b29:	e8 d7 96 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116b2e:	e8 5e 62 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116b33:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116b36:	74 17                	je     f0116b4f <test_priority_normal_and_higher+0x5be>
f0116b38:	83 ec 04             	sub    $0x4,%esp
f0116b3b:	68 18 af 13 f0       	push   $0xf013af18
f0116b40:	68 80 00 00 00       	push   $0x80
f0116b45:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116b4a:	e8 b6 96 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116b4f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116b52:	8b 40 74             	mov    0x74(%eax),%eax
f0116b55:	83 f8 14             	cmp    $0x14,%eax
f0116b58:	75 16                	jne    f0116b70 <test_priority_normal_and_higher+0x5df>
f0116b5a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116b5d:	8b 40 74             	mov    0x74(%eax),%eax
f0116b60:	83 f8 1e             	cmp    $0x1e,%eax
f0116b63:	75 0b                	jne    f0116b70 <test_priority_normal_and_higher+0x5df>
f0116b65:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b68:	8b 40 74             	mov    0x74(%eax),%eax
f0116b6b:	83 f8 28             	cmp    $0x28,%eax
f0116b6e:	74 17                	je     f0116b87 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f0116b70:	83 ec 04             	sub    $0x4,%esp
f0116b73:	68 4c b0 13 f0       	push   $0xf013b04c
f0116b78:	68 83 00 00 00       	push   $0x83
f0116b7d:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116b82:	e8 7e 96 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f0116b87:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0116b8e:	eb 1b                	jmp    f0116bab <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116b90:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116b93:	8b 48 78             	mov    0x78(%eax),%ecx
f0116b96:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116b99:	89 d0                	mov    %edx,%eax
f0116b9b:	01 c0                	add    %eax,%eax
f0116b9d:	01 d0                	add    %edx,%eax
f0116b9f:	c1 e0 03             	shl    $0x3,%eax
f0116ba2:	01 c8                	add    %ecx,%eax
f0116ba4:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0116ba8:	ff 45 d0             	incl   -0x30(%ebp)
f0116bab:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0116baf:	7e df                	jle    f0116b90 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116bb1:	e8 db 61 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116bb6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116bb9:	e8 0a d2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116bbe:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116bc1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116bc4:	83 ec 08             	sub    $0x8,%esp
f0116bc7:	6a 05                	push   $0x5
f0116bc9:	50                   	push   %eax
f0116bca:	e8 0e 46 ff ff       	call   f010b1dd <set_program_priority>
f0116bcf:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116bd2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116bd5:	83 ec 08             	sub    $0x8,%esp
f0116bd8:	6a 04                	push   $0x4
f0116bda:	50                   	push   %eax
f0116bdb:	e8 fd 45 ff ff       	call   f010b1dd <set_program_priority>
f0116be0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116be3:	e8 e0 d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116be8:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116beb:	74 17                	je     f0116c04 <test_priority_normal_and_higher+0x673>
f0116bed:	83 ec 04             	sub    $0x4,%esp
f0116bf0:	68 18 af 13 f0       	push   $0xf013af18
f0116bf5:	68 8e 00 00 00       	push   $0x8e
f0116bfa:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116bff:	e8 01 96 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116c04:	e8 88 61 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116c09:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116c0c:	74 17                	je     f0116c25 <test_priority_normal_and_higher+0x694>
f0116c0e:	83 ec 04             	sub    $0x4,%esp
f0116c11:	68 18 af 13 f0       	push   $0xf013af18
f0116c16:	68 8f 00 00 00       	push   $0x8f
f0116c1b:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116c20:	e8 e0 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116c25:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c28:	8b 40 74             	mov    0x74(%eax),%eax
f0116c2b:	83 f8 14             	cmp    $0x14,%eax
f0116c2e:	75 16                	jne    f0116c46 <test_priority_normal_and_higher+0x6b5>
f0116c30:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c33:	8b 40 74             	mov    0x74(%eax),%eax
f0116c36:	83 f8 1e             	cmp    $0x1e,%eax
f0116c39:	75 0b                	jne    f0116c46 <test_priority_normal_and_higher+0x6b5>
f0116c3b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c3e:	8b 40 74             	mov    0x74(%eax),%eax
f0116c41:	83 f8 28             	cmp    $0x28,%eax
f0116c44:	74 17                	je     f0116c5d <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0116c46:	83 ec 04             	sub    $0x4,%esp
f0116c49:	68 4c b0 13 f0       	push   $0xf013b04c
f0116c4e:	68 92 00 00 00       	push   $0x92
f0116c53:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116c58:	e8 a8 95 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f0116c5d:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0116c64:	eb 1b                	jmp    f0116c81 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0116c66:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c69:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c6c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116c6f:	89 d0                	mov    %edx,%eax
f0116c71:	01 c0                	add    %eax,%eax
f0116c73:	01 d0                	add    %edx,%eax
f0116c75:	c1 e0 03             	shl    $0x3,%eax
f0116c78:	01 c8                	add    %ecx,%eax
f0116c7a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0116c7e:	ff 45 cc             	incl   -0x34(%ebp)
f0116c81:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0116c85:	7e df                	jle    f0116c66 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116c87:	e8 05 61 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116c8c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c8f:	e8 34 d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116c94:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116c97:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c9a:	83 ec 08             	sub    $0x8,%esp
f0116c9d:	6a 05                	push   $0x5
f0116c9f:	50                   	push   %eax
f0116ca0:	e8 38 45 ff ff       	call   f010b1dd <set_program_priority>
f0116ca5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116ca8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cab:	83 ec 08             	sub    $0x8,%esp
f0116cae:	6a 04                	push   $0x4
f0116cb0:	50                   	push   %eax
f0116cb1:	e8 27 45 ff ff       	call   f010b1dd <set_program_priority>
f0116cb6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116cb9:	e8 0a d1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0116cbe:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116cc1:	74 17                	je     f0116cda <test_priority_normal_and_higher+0x749>
f0116cc3:	83 ec 04             	sub    $0x4,%esp
f0116cc6:	68 18 af 13 f0       	push   $0xf013af18
f0116ccb:	68 9d 00 00 00       	push   $0x9d
f0116cd0:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116cd5:	e8 2b 95 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116cda:	e8 b2 60 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0116cdf:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116ce2:	74 17                	je     f0116cfb <test_priority_normal_and_higher+0x76a>
f0116ce4:	83 ec 04             	sub    $0x4,%esp
f0116ce7:	68 18 af 13 f0       	push   $0xf013af18
f0116cec:	68 9e 00 00 00       	push   $0x9e
f0116cf1:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116cf6:	e8 0a 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0116cfb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116cfe:	8b 40 74             	mov    0x74(%eax),%eax
f0116d01:	83 f8 14             	cmp    $0x14,%eax
f0116d04:	75 16                	jne    f0116d1c <test_priority_normal_and_higher+0x78b>
f0116d06:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d09:	8b 40 74             	mov    0x74(%eax),%eax
f0116d0c:	83 f8 3c             	cmp    $0x3c,%eax
f0116d0f:	75 0b                	jne    f0116d1c <test_priority_normal_and_higher+0x78b>
f0116d11:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d14:	8b 40 74             	mov    0x74(%eax),%eax
f0116d17:	83 f8 28             	cmp    $0x28,%eax
f0116d1a:	74 17                	je     f0116d33 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0116d1c:	83 ec 04             	sub    $0x4,%esp
f0116d1f:	68 4c b0 13 f0       	push   $0xf013b04c
f0116d24:	68 a1 00 00 00       	push   $0xa1
f0116d29:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116d2e:	e8 d2 94 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f0116d33:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0116d3a:	eb 1b                	jmp    f0116d57 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0116d3c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d3f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d42:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116d45:	89 d0                	mov    %edx,%eax
f0116d47:	01 c0                	add    %eax,%eax
f0116d49:	01 d0                	add    %edx,%eax
f0116d4b:	c1 e0 03             	shl    $0x3,%eax
f0116d4e:	01 c8                	add    %ecx,%eax
f0116d50:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0116d54:	ff 45 c8             	incl   -0x38(%ebp)
f0116d57:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0116d5b:	7e df                	jle    f0116d3c <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116d5d:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0116d64:	eb 1b                	jmp    f0116d81 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0116d66:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d69:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d6c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116d6f:	89 d0                	mov    %edx,%eax
f0116d71:	01 c0                	add    %eax,%eax
f0116d73:	01 d0                	add    %edx,%eax
f0116d75:	c1 e0 03             	shl    $0x3,%eax
f0116d78:	01 c8                	add    %ecx,%eax
f0116d7a:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0116d7e:	ff 45 c4             	incl   -0x3c(%ebp)
f0116d81:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0116d85:	7e df                	jle    f0116d66 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116d87:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0116d8e:	eb 7a                	jmp    f0116e0a <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116d90:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116d93:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0116d9a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d9d:	8b 58 78             	mov    0x78(%eax),%ebx
f0116da0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116da3:	89 d0                	mov    %edx,%eax
f0116da5:	01 c0                	add    %eax,%eax
f0116da7:	01 d0                	add    %edx,%eax
f0116da9:	c1 e0 03             	shl    $0x3,%eax
f0116dac:	01 d8                	add    %ebx,%eax
f0116dae:	8b 00                	mov    (%eax),%eax
f0116db0:	39 c1                	cmp    %eax,%ecx
f0116db2:	74 17                	je     f0116dcb <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0116db4:	83 ec 04             	sub    $0x4,%esp
f0116db7:	68 88 b0 13 f0       	push   $0xf013b088
f0116dbc:	68 af 00 00 00       	push   $0xaf
f0116dc1:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116dc6:	e8 3a 94 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116dcb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116dce:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116dd5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116dd8:	8b 58 78             	mov    0x78(%eax),%ebx
f0116ddb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116dde:	89 d0                	mov    %edx,%eax
f0116de0:	01 c0                	add    %eax,%eax
f0116de2:	01 d0                	add    %edx,%eax
f0116de4:	c1 e0 03             	shl    $0x3,%eax
f0116de7:	01 d8                	add    %ebx,%eax
f0116de9:	8b 40 08             	mov    0x8(%eax),%eax
f0116dec:	39 c1                	cmp    %eax,%ecx
f0116dee:	74 17                	je     f0116e07 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0116df0:	83 ec 04             	sub    $0x4,%esp
f0116df3:	68 88 b0 13 f0       	push   $0xf013b088
f0116df8:	68 b2 00 00 00       	push   $0xb2
f0116dfd:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116e02:	e8 fe 93 fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116e07:	ff 45 c0             	incl   -0x40(%ebp)
f0116e0a:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0116e0e:	7e 80                	jle    f0116d90 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116e10:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116e17:	eb 7a                	jmp    f0116e93 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116e19:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116e1c:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116e23:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e26:	8b 58 78             	mov    0x78(%eax),%ebx
f0116e29:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116e2c:	89 d0                	mov    %edx,%eax
f0116e2e:	01 c0                	add    %eax,%eax
f0116e30:	01 d0                	add    %edx,%eax
f0116e32:	c1 e0 03             	shl    $0x3,%eax
f0116e35:	01 d8                	add    %ebx,%eax
f0116e37:	8b 00                	mov    (%eax),%eax
f0116e39:	39 c1                	cmp    %eax,%ecx
f0116e3b:	74 17                	je     f0116e54 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0116e3d:	83 ec 04             	sub    $0x4,%esp
f0116e40:	68 88 b0 13 f0       	push   $0xf013b088
f0116e45:	68 b8 00 00 00       	push   $0xb8
f0116e4a:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116e4f:	e8 b1 93 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116e54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116e57:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0116e5e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e61:	8b 58 78             	mov    0x78(%eax),%ebx
f0116e64:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116e67:	89 d0                	mov    %edx,%eax
f0116e69:	01 c0                	add    %eax,%eax
f0116e6b:	01 d0                	add    %edx,%eax
f0116e6d:	c1 e0 03             	shl    $0x3,%eax
f0116e70:	01 d8                	add    %ebx,%eax
f0116e72:	8b 40 08             	mov    0x8(%eax),%eax
f0116e75:	39 c1                	cmp    %eax,%ecx
f0116e77:	74 17                	je     f0116e90 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0116e79:	83 ec 04             	sub    $0x4,%esp
f0116e7c:	68 88 b0 13 f0       	push   $0xf013b088
f0116e81:	68 bb 00 00 00       	push   $0xbb
f0116e86:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116e8b:	e8 75 93 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116e90:	ff 45 bc             	incl   -0x44(%ebp)
f0116e93:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116e97:	7e 80                	jle    f0116e19 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116e99:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116ea0:	eb 7a                	jmp    f0116f1c <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116ea2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ea5:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0116eac:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116eaf:	8b 58 78             	mov    0x78(%eax),%ebx
f0116eb2:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116eb5:	89 d0                	mov    %edx,%eax
f0116eb7:	01 c0                	add    %eax,%eax
f0116eb9:	01 d0                	add    %edx,%eax
f0116ebb:	c1 e0 03             	shl    $0x3,%eax
f0116ebe:	01 d8                	add    %ebx,%eax
f0116ec0:	8b 00                	mov    (%eax),%eax
f0116ec2:	39 c1                	cmp    %eax,%ecx
f0116ec4:	74 17                	je     f0116edd <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0116ec6:	83 ec 04             	sub    $0x4,%esp
f0116ec9:	68 88 b0 13 f0       	push   $0xf013b088
f0116ece:	68 c1 00 00 00       	push   $0xc1
f0116ed3:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116ed8:	e8 28 93 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116edd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ee0:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0116ee7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116eea:	8b 58 78             	mov    0x78(%eax),%ebx
f0116eed:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116ef0:	89 d0                	mov    %edx,%eax
f0116ef2:	01 c0                	add    %eax,%eax
f0116ef4:	01 d0                	add    %edx,%eax
f0116ef6:	c1 e0 03             	shl    $0x3,%eax
f0116ef9:	01 d8                	add    %ebx,%eax
f0116efb:	8b 40 08             	mov    0x8(%eax),%eax
f0116efe:	39 c1                	cmp    %eax,%ecx
f0116f00:	74 17                	je     f0116f19 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0116f02:	83 ec 04             	sub    $0x4,%esp
f0116f05:	68 88 b0 13 f0       	push   $0xf013b088
f0116f0a:	68 c4 00 00 00       	push   $0xc4
f0116f0f:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116f14:	e8 ec 92 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116f19:	ff 45 b8             	incl   -0x48(%ebp)
f0116f1c:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0116f20:	7e 80                	jle    f0116ea2 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116f22:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116f29:	75 6e 61 
f0116f2c:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116f33:	6c 00 00 
f0116f36:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0116f3c:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116f41:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f46:	89 d7                	mov    %edx,%edi
f0116f48:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116f4a:	83 ec 0c             	sub    $0xc,%esp
f0116f4d:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116f53:	50                   	push   %eax
f0116f54:	e8 17 9e fe ff       	call   f0100d70 <execute_command>
f0116f59:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0116f5c:	eb 10                	jmp    f0116f6e <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0116f5e:	83 ec 0c             	sub    $0xc,%esp
f0116f61:	68 bc b0 13 f0       	push   $0xf013b0bc
f0116f66:	e8 a3 9d fe ff       	call   f0100d0e <cprintf>
f0116f6b:	83 c4 10             	add    $0x10,%esp
	}
}
f0116f6e:	90                   	nop
f0116f6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116f72:	5b                   	pop    %ebx
f0116f73:	5e                   	pop    %esi
f0116f74:	5f                   	pop    %edi
f0116f75:	5d                   	pop    %ebp
f0116f76:	c3                   	ret    

f0116f77 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0116f77:	55                   	push   %ebp
f0116f78:	89 e5                	mov    %esp,%ebp
f0116f7a:	57                   	push   %edi
f0116f7b:	56                   	push   %esi
f0116f7c:	53                   	push   %ebx
f0116f7d:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0116f83:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f0116f88:	84 c0                	test   %al,%al
f0116f8a:	0f 84 be 09 00 00    	je     f011794e <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0116f90:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f0116f97:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116f9d:	bb f8 b0 13 f0       	mov    $0xf013b0f8,%ebx
f0116fa2:	ba 04 00 00 00       	mov    $0x4,%edx
f0116fa7:	89 c7                	mov    %eax,%edi
f0116fa9:	89 de                	mov    %ebx,%esi
f0116fab:	89 d1                	mov    %edx,%ecx
f0116fad:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116faf:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0116fb5:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116fba:	b8 00 00 00 00       	mov    $0x0,%eax
f0116fbf:	89 d7                	mov    %edx,%edi
f0116fc1:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116fc3:	83 ec 0c             	sub    $0xc,%esp
f0116fc6:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0116fcc:	50                   	push   %eax
f0116fcd:	e8 9e 9d fe ff       	call   f0100d70 <execute_command>
f0116fd2:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0116fd5:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116fdb:	bb b4 b3 13 f0       	mov    $0xf013b3b4,%ebx
f0116fe0:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116fe5:	89 c7                	mov    %eax,%edi
f0116fe7:	89 de                	mov    %ebx,%esi
f0116fe9:	89 d1                	mov    %edx,%ecx
f0116feb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116fed:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0116ff3:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116ff8:	b0 00                	mov    $0x0,%al
f0116ffa:	89 d7                	mov    %edx,%edi
f0116ffc:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116ffe:	83 ec 0c             	sub    $0xc,%esp
f0117001:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117007:	50                   	push   %eax
f0117008:	e8 63 9d fe ff       	call   f0100d70 <execute_command>
f011700d:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117010:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117016:	bb 18 b4 13 f0       	mov    $0xf013b418,%ebx
f011701b:	ba 17 00 00 00       	mov    $0x17,%edx
f0117020:	89 c7                	mov    %eax,%edi
f0117022:	89 de                	mov    %ebx,%esi
f0117024:	89 d1                	mov    %edx,%ecx
f0117026:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117028:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f011702e:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117033:	b0 00                	mov    $0x0,%al
f0117035:	89 d7                	mov    %edx,%edi
f0117037:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117039:	83 ec 0c             	sub    $0xc,%esp
f011703c:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117042:	50                   	push   %eax
f0117043:	e8 28 9d fe ff       	call   f0100d70 <execute_command>
f0117048:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011704b:	83 ec 04             	sub    $0x4,%esp
f011704e:	6a 00                	push   $0x0
f0117050:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117053:	50                   	push   %eax
f0117054:	68 00 10 00 00       	push   $0x1000
f0117059:	e8 a1 2c ff ff       	call   f0109cff <envid2env>
f011705e:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117061:	83 ec 04             	sub    $0x4,%esp
f0117064:	6a 00                	push   $0x0
f0117066:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117069:	50                   	push   %eax
f011706a:	68 01 10 00 00       	push   $0x1001
f011706f:	e8 8b 2c ff ff       	call   f0109cff <envid2env>
f0117074:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117077:	83 ec 04             	sub    $0x4,%esp
f011707a:	6a 00                	push   $0x0
f011707c:	8d 45 b0             	lea    -0x50(%ebp),%eax
f011707f:	50                   	push   %eax
f0117080:	68 02 10 00 00       	push   $0x1002
f0117085:	e8 75 2c ff ff       	call   f0109cff <envid2env>
f011708a:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011708d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117090:	85 c0                	test   %eax,%eax
f0117092:	74 0e                	je     f01170a2 <test_priority_normal_and_lower+0x12b>
f0117094:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117097:	85 c0                	test   %eax,%eax
f0117099:	74 07                	je     f01170a2 <test_priority_normal_and_lower+0x12b>
f011709b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011709e:	85 c0                	test   %eax,%eax
f01170a0:	75 17                	jne    f01170b9 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01170a2:	83 ec 04             	sub    $0x4,%esp
f01170a5:	68 98 ae 13 f0       	push   $0xf013ae98
f01170aa:	68 eb 00 00 00       	push   $0xeb
f01170af:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01170b4:	e8 4c 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01170b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01170bc:	8b 40 74             	mov    0x74(%eax),%eax
f01170bf:	83 f8 14             	cmp    $0x14,%eax
f01170c2:	75 16                	jne    f01170da <test_priority_normal_and_lower+0x163>
f01170c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01170c7:	8b 40 74             	mov    0x74(%eax),%eax
f01170ca:	83 f8 1e             	cmp    $0x1e,%eax
f01170cd:	75 0b                	jne    f01170da <test_priority_normal_and_lower+0x163>
f01170cf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01170d2:	8b 40 74             	mov    0x74(%eax),%eax
f01170d5:	83 f8 28             	cmp    $0x28,%eax
f01170d8:	74 17                	je     f01170f1 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01170da:	83 ec 04             	sub    $0x4,%esp
f01170dd:	68 cc ae 13 f0       	push   $0xf013aecc
f01170e2:	68 ee 00 00 00       	push   $0xee
f01170e7:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01170ec:	e8 14 91 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f01170f1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01170f8:	eb 44                	jmp    f011713e <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01170fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01170fd:	8b 48 78             	mov    0x78(%eax),%ecx
f0117100:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117103:	89 d0                	mov    %edx,%eax
f0117105:	01 c0                	add    %eax,%eax
f0117107:	01 d0                	add    %edx,%eax
f0117109:	c1 e0 03             	shl    $0x3,%eax
f011710c:	01 c8                	add    %ecx,%eax
f011710e:	8b 10                	mov    (%eax),%edx
f0117110:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117113:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011711a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011711d:	8b 48 78             	mov    0x78(%eax),%ecx
f0117120:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117123:	89 d0                	mov    %edx,%eax
f0117125:	01 c0                	add    %eax,%eax
f0117127:	01 d0                	add    %edx,%eax
f0117129:	c1 e0 03             	shl    $0x3,%eax
f011712c:	01 c8                	add    %ecx,%eax
f011712e:	8b 50 08             	mov    0x8(%eax),%edx
f0117131:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117134:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011713b:	ff 45 e4             	incl   -0x1c(%ebp)
f011713e:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117142:	7e b6                	jle    f01170fa <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117144:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011714b:	eb 44                	jmp    f0117191 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011714d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117150:	8b 48 78             	mov    0x78(%eax),%ecx
f0117153:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117156:	89 d0                	mov    %edx,%eax
f0117158:	01 c0                	add    %eax,%eax
f011715a:	01 d0                	add    %edx,%eax
f011715c:	c1 e0 03             	shl    $0x3,%eax
f011715f:	01 c8                	add    %ecx,%eax
f0117161:	8b 10                	mov    (%eax),%edx
f0117163:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117166:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011716d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117170:	8b 48 78             	mov    0x78(%eax),%ecx
f0117173:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117176:	89 d0                	mov    %edx,%eax
f0117178:	01 c0                	add    %eax,%eax
f011717a:	01 d0                	add    %edx,%eax
f011717c:	c1 e0 03             	shl    $0x3,%eax
f011717f:	01 c8                	add    %ecx,%eax
f0117181:	8b 50 08             	mov    0x8(%eax),%edx
f0117184:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117187:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011718e:	ff 45 e0             	incl   -0x20(%ebp)
f0117191:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117195:	7e b6                	jle    f011714d <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117197:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011719e:	eb 44                	jmp    f01171e4 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01171a0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01171a3:	8b 48 78             	mov    0x78(%eax),%ecx
f01171a6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01171a9:	89 d0                	mov    %edx,%eax
f01171ab:	01 c0                	add    %eax,%eax
f01171ad:	01 d0                	add    %edx,%eax
f01171af:	c1 e0 03             	shl    $0x3,%eax
f01171b2:	01 c8                	add    %ecx,%eax
f01171b4:	8b 10                	mov    (%eax),%edx
f01171b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01171b9:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01171c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01171c3:	8b 48 78             	mov    0x78(%eax),%ecx
f01171c6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01171c9:	89 d0                	mov    %edx,%eax
f01171cb:	01 c0                	add    %eax,%eax
f01171cd:	01 d0                	add    %edx,%eax
f01171cf:	c1 e0 03             	shl    $0x3,%eax
f01171d2:	01 c8                	add    %ecx,%eax
f01171d4:	8b 50 08             	mov    0x8(%eax),%edx
f01171d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01171da:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01171e1:	ff 45 dc             	incl   -0x24(%ebp)
f01171e4:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01171e8:	7e b6                	jle    f01171a0 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01171ea:	e8 a2 5b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01171ef:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01171f2:	e8 d1 cb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01171f7:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01171fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01171fd:	83 ec 08             	sub    $0x8,%esp
f0117200:	6a 03                	push   $0x3
f0117202:	50                   	push   %eax
f0117203:	e8 d5 3f ff ff       	call   f010b1dd <set_program_priority>
f0117208:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011720b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011720e:	83 ec 08             	sub    $0x8,%esp
f0117211:	6a 03                	push   $0x3
f0117213:	50                   	push   %eax
f0117214:	e8 c4 3f ff ff       	call   f010b1dd <set_program_priority>
f0117219:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011721c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011721f:	83 ec 08             	sub    $0x8,%esp
f0117222:	6a 03                	push   $0x3
f0117224:	50                   	push   %eax
f0117225:	e8 b3 3f ff ff       	call   f010b1dd <set_program_priority>
f011722a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011722d:	e8 96 cb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117232:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117235:	74 17                	je     f011724e <test_priority_normal_and_lower+0x2d7>
f0117237:	83 ec 04             	sub    $0x4,%esp
f011723a:	68 18 af 13 f0       	push   $0xf013af18
f011723f:	68 0a 01 00 00       	push   $0x10a
f0117244:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117249:	e8 b7 8f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011724e:	e8 3e 5b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117253:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117256:	74 17                	je     f011726f <test_priority_normal_and_lower+0x2f8>
f0117258:	83 ec 04             	sub    $0x4,%esp
f011725b:	68 18 af 13 f0       	push   $0xf013af18
f0117260:	68 0b 01 00 00       	push   $0x10b
f0117265:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011726a:	e8 96 8f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011726f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117272:	8b 40 74             	mov    0x74(%eax),%eax
f0117275:	83 f8 14             	cmp    $0x14,%eax
f0117278:	75 16                	jne    f0117290 <test_priority_normal_and_lower+0x319>
f011727a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011727d:	8b 40 74             	mov    0x74(%eax),%eax
f0117280:	83 f8 1e             	cmp    $0x1e,%eax
f0117283:	75 0b                	jne    f0117290 <test_priority_normal_and_lower+0x319>
f0117285:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117288:	8b 40 74             	mov    0x74(%eax),%eax
f011728b:	83 f8 28             	cmp    $0x28,%eax
f011728e:	74 17                	je     f01172a7 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117290:	83 ec 04             	sub    $0x4,%esp
f0117293:	68 44 af 13 f0       	push   $0xf013af44
f0117298:	68 0e 01 00 00       	push   $0x10e
f011729d:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01172a2:	e8 5e 8f fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01172a7:	e8 e5 5a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01172ac:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01172af:	e8 14 cb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01172b4:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01172b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01172ba:	83 ec 08             	sub    $0x8,%esp
f01172bd:	6a 02                	push   $0x2
f01172bf:	50                   	push   %eax
f01172c0:	e8 18 3f ff ff       	call   f010b1dd <set_program_priority>
f01172c5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01172c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172cb:	83 ec 08             	sub    $0x8,%esp
f01172ce:	6a 02                	push   $0x2
f01172d0:	50                   	push   %eax
f01172d1:	e8 07 3f ff ff       	call   f010b1dd <set_program_priority>
f01172d6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01172d9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172dc:	83 ec 08             	sub    $0x8,%esp
f01172df:	6a 02                	push   $0x2
f01172e1:	50                   	push   %eax
f01172e2:	e8 f6 3e ff ff       	call   f010b1dd <set_program_priority>
f01172e7:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01172ea:	e8 d9 ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01172ef:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01172f2:	74 17                	je     f011730b <test_priority_normal_and_lower+0x394>
f01172f4:	83 ec 04             	sub    $0x4,%esp
f01172f7:	68 18 af 13 f0       	push   $0xf013af18
f01172fc:	68 18 01 00 00       	push   $0x118
f0117301:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117306:	e8 fa 8e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011730b:	e8 81 5a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117310:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117313:	74 21                	je     f0117336 <test_priority_normal_and_lower+0x3bf>
f0117315:	e8 77 5a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011731a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011731d:	29 c2                	sub    %eax,%edx
f011731f:	89 d0                	mov    %edx,%eax
f0117321:	50                   	push   %eax
f0117322:	68 98 af 13 f0       	push   $0xf013af98
f0117327:	68 19 01 00 00       	push   $0x119
f011732c:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117331:	e8 cf 8e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117336:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117339:	8b 40 74             	mov    0x74(%eax),%eax
f011733c:	83 f8 0a             	cmp    $0xa,%eax
f011733f:	75 16                	jne    f0117357 <test_priority_normal_and_lower+0x3e0>
f0117341:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117344:	8b 40 74             	mov    0x74(%eax),%eax
f0117347:	83 f8 0f             	cmp    $0xf,%eax
f011734a:	75 0b                	jne    f0117357 <test_priority_normal_and_lower+0x3e0>
f011734c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011734f:	8b 40 74             	mov    0x74(%eax),%eax
f0117352:	83 f8 14             	cmp    $0x14,%eax
f0117355:	74 17                	je     f011736e <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117357:	83 ec 04             	sub    $0x4,%esp
f011735a:	68 c8 af 13 f0       	push   $0xf013afc8
f011735f:	68 1c 01 00 00       	push   $0x11c
f0117364:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117369:	e8 97 8e fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f011736e:	e8 1e 5a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117373:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117376:	e8 4d ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011737b:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011737e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117381:	83 ec 08             	sub    $0x8,%esp
f0117384:	6a 02                	push   $0x2
f0117386:	50                   	push   %eax
f0117387:	e8 51 3e ff ff       	call   f010b1dd <set_program_priority>
f011738c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011738f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117392:	83 ec 08             	sub    $0x8,%esp
f0117395:	6a 02                	push   $0x2
f0117397:	50                   	push   %eax
f0117398:	e8 40 3e ff ff       	call   f010b1dd <set_program_priority>
f011739d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01173a0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01173a3:	83 ec 08             	sub    $0x8,%esp
f01173a6:	6a 02                	push   $0x2
f01173a8:	50                   	push   %eax
f01173a9:	e8 2f 3e ff ff       	call   f010b1dd <set_program_priority>
f01173ae:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01173b1:	e8 12 ca fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01173b6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01173b9:	74 17                	je     f01173d2 <test_priority_normal_and_lower+0x45b>
f01173bb:	83 ec 04             	sub    $0x4,%esp
f01173be:	68 18 af 13 f0       	push   $0xf013af18
f01173c3:	68 26 01 00 00       	push   $0x126
f01173c8:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01173cd:	e8 33 8e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01173d2:	e8 ba 59 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01173d7:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01173da:	74 21                	je     f01173fd <test_priority_normal_and_lower+0x486>
f01173dc:	e8 b0 59 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01173e1:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01173e4:	29 c2                	sub    %eax,%edx
f01173e6:	89 d0                	mov    %edx,%eax
f01173e8:	50                   	push   %eax
f01173e9:	68 98 af 13 f0       	push   $0xf013af98
f01173ee:	68 27 01 00 00       	push   $0x127
f01173f3:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01173f8:	e8 08 8e fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01173fd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117400:	8b 40 74             	mov    0x74(%eax),%eax
f0117403:	83 f8 0a             	cmp    $0xa,%eax
f0117406:	75 16                	jne    f011741e <test_priority_normal_and_lower+0x4a7>
f0117408:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011740b:	8b 40 74             	mov    0x74(%eax),%eax
f011740e:	83 f8 0f             	cmp    $0xf,%eax
f0117411:	75 0b                	jne    f011741e <test_priority_normal_and_lower+0x4a7>
f0117413:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117416:	8b 40 74             	mov    0x74(%eax),%eax
f0117419:	83 f8 0a             	cmp    $0xa,%eax
f011741c:	74 17                	je     f0117435 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f011741e:	83 ec 04             	sub    $0x4,%esp
f0117421:	68 c8 af 13 f0       	push   $0xf013afc8
f0117426:	68 2a 01 00 00       	push   $0x12a
f011742b:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117430:	e8 d0 8d fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f0117435:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011743c:	eb 7a                	jmp    f01174b8 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011743e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117441:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117448:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011744b:	8b 58 78             	mov    0x78(%eax),%ebx
f011744e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117451:	89 d0                	mov    %edx,%eax
f0117453:	01 c0                	add    %eax,%eax
f0117455:	01 d0                	add    %edx,%eax
f0117457:	c1 e0 03             	shl    $0x3,%eax
f011745a:	01 d8                	add    %ebx,%eax
f011745c:	8b 00                	mov    (%eax),%eax
f011745e:	39 c1                	cmp    %eax,%ecx
f0117460:	74 17                	je     f0117479 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0117462:	83 ec 04             	sub    $0x4,%esp
f0117465:	68 88 b0 13 f0       	push   $0xf013b088
f011746a:	68 2f 01 00 00       	push   $0x12f
f011746f:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117474:	e8 8c 8d fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117479:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011747c:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117483:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117486:	8b 58 78             	mov    0x78(%eax),%ebx
f0117489:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011748c:	89 d0                	mov    %edx,%eax
f011748e:	01 c0                	add    %eax,%eax
f0117490:	01 d0                	add    %edx,%eax
f0117492:	c1 e0 03             	shl    $0x3,%eax
f0117495:	01 d8                	add    %ebx,%eax
f0117497:	8b 40 08             	mov    0x8(%eax),%eax
f011749a:	39 c1                	cmp    %eax,%ecx
f011749c:	74 17                	je     f01174b5 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f011749e:	83 ec 04             	sub    $0x4,%esp
f01174a1:	68 88 b0 13 f0       	push   $0xf013b088
f01174a6:	68 32 01 00 00       	push   $0x132
f01174ab:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01174b0:	e8 50 8d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01174b5:	ff 45 d8             	incl   -0x28(%ebp)
f01174b8:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01174bc:	7e 80                	jle    f011743e <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01174be:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01174c5:	eb 7a                	jmp    f0117541 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01174c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01174ca:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01174d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01174d4:	8b 58 78             	mov    0x78(%eax),%ebx
f01174d7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01174da:	89 d0                	mov    %edx,%eax
f01174dc:	01 c0                	add    %eax,%eax
f01174de:	01 d0                	add    %edx,%eax
f01174e0:	c1 e0 03             	shl    $0x3,%eax
f01174e3:	01 d8                	add    %ebx,%eax
f01174e5:	8b 00                	mov    (%eax),%eax
f01174e7:	39 c1                	cmp    %eax,%ecx
f01174e9:	74 17                	je     f0117502 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f01174eb:	83 ec 04             	sub    $0x4,%esp
f01174ee:	68 88 b0 13 f0       	push   $0xf013b088
f01174f3:	68 38 01 00 00       	push   $0x138
f01174f8:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01174fd:	e8 03 8d fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117502:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117505:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011750c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011750f:	8b 58 78             	mov    0x78(%eax),%ebx
f0117512:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117515:	89 d0                	mov    %edx,%eax
f0117517:	01 c0                	add    %eax,%eax
f0117519:	01 d0                	add    %edx,%eax
f011751b:	c1 e0 03             	shl    $0x3,%eax
f011751e:	01 d8                	add    %ebx,%eax
f0117520:	8b 40 08             	mov    0x8(%eax),%eax
f0117523:	39 c1                	cmp    %eax,%ecx
f0117525:	74 17                	je     f011753e <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0117527:	83 ec 04             	sub    $0x4,%esp
f011752a:	68 88 b0 13 f0       	push   $0xf013b088
f011752f:	68 3b 01 00 00       	push   $0x13b
f0117534:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117539:	e8 c7 8c fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011753e:	ff 45 d4             	incl   -0x2c(%ebp)
f0117541:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117545:	7e 80                	jle    f01174c7 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117547:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011754e:	eb 7a                	jmp    f01175ca <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117550:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117553:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011755a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011755d:	8b 58 78             	mov    0x78(%eax),%ebx
f0117560:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117563:	89 d0                	mov    %edx,%eax
f0117565:	01 c0                	add    %eax,%eax
f0117567:	01 d0                	add    %edx,%eax
f0117569:	c1 e0 03             	shl    $0x3,%eax
f011756c:	01 d8                	add    %ebx,%eax
f011756e:	8b 00                	mov    (%eax),%eax
f0117570:	39 c1                	cmp    %eax,%ecx
f0117572:	74 17                	je     f011758b <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0117574:	83 ec 04             	sub    $0x4,%esp
f0117577:	68 88 b0 13 f0       	push   $0xf013b088
f011757c:	68 41 01 00 00       	push   $0x141
f0117581:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117586:	e8 7a 8c fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011758b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011758e:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117595:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117598:	8b 58 78             	mov    0x78(%eax),%ebx
f011759b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011759e:	89 d0                	mov    %edx,%eax
f01175a0:	01 c0                	add    %eax,%eax
f01175a2:	01 d0                	add    %edx,%eax
f01175a4:	c1 e0 03             	shl    $0x3,%eax
f01175a7:	01 d8                	add    %ebx,%eax
f01175a9:	8b 40 08             	mov    0x8(%eax),%eax
f01175ac:	39 c1                	cmp    %eax,%ecx
f01175ae:	74 17                	je     f01175c7 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f01175b0:	83 ec 04             	sub    $0x4,%esp
f01175b3:	68 88 b0 13 f0       	push   $0xf013b088
f01175b8:	68 44 01 00 00       	push   $0x144
f01175bd:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01175c2:	e8 3e 8c fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01175c7:	ff 45 d0             	incl   -0x30(%ebp)
f01175ca:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01175ce:	7e 80                	jle    f0117550 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01175d0:	e8 bc 57 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01175d5:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01175d8:	e8 eb c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01175dd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01175e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01175e3:	83 ec 08             	sub    $0x8,%esp
f01175e6:	6a 01                	push   $0x1
f01175e8:	50                   	push   %eax
f01175e9:	e8 ef 3b ff ff       	call   f010b1dd <set_program_priority>
f01175ee:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f01175f1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01175f4:	83 ec 08             	sub    $0x8,%esp
f01175f7:	6a 01                	push   $0x1
f01175f9:	50                   	push   %eax
f01175fa:	e8 de 3b ff ff       	call   f010b1dd <set_program_priority>
f01175ff:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117602:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117605:	83 ec 08             	sub    $0x8,%esp
f0117608:	6a 01                	push   $0x1
f011760a:	50                   	push   %eax
f011760b:	e8 cd 3b ff ff       	call   f010b1dd <set_program_priority>
f0117610:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117613:	e8 b0 c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117618:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011761b:	74 17                	je     f0117634 <test_priority_normal_and_lower+0x6bd>
f011761d:	83 ec 04             	sub    $0x4,%esp
f0117620:	68 18 af 13 f0       	push   $0xf013af18
f0117625:	68 4d 01 00 00       	push   $0x14d
f011762a:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011762f:	e8 d1 8b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117634:	e8 58 57 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117639:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011763c:	83 f8 0d             	cmp    $0xd,%eax
f011763f:	74 17                	je     f0117658 <test_priority_normal_and_lower+0x6e1>
f0117641:	83 ec 04             	sub    $0x4,%esp
f0117644:	68 24 b2 13 f0       	push   $0xf013b224
f0117649:	68 4e 01 00 00       	push   $0x14e
f011764e:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117653:	e8 ad 8b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117658:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011765b:	8b 40 74             	mov    0x74(%eax),%eax
f011765e:	83 f8 05             	cmp    $0x5,%eax
f0117661:	75 16                	jne    f0117679 <test_priority_normal_and_lower+0x702>
f0117663:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117666:	8b 40 74             	mov    0x74(%eax),%eax
f0117669:	83 f8 07             	cmp    $0x7,%eax
f011766c:	75 0b                	jne    f0117679 <test_priority_normal_and_lower+0x702>
f011766e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117671:	8b 40 74             	mov    0x74(%eax),%eax
f0117674:	83 f8 05             	cmp    $0x5,%eax
f0117677:	74 17                	je     f0117690 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0117679:	83 ec 04             	sub    $0x4,%esp
f011767c:	68 6c b2 13 f0       	push   $0xf013b26c
f0117681:	68 51 01 00 00       	push   $0x151
f0117686:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011768b:	e8 75 8b fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f0117690:	e8 fc 56 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117695:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117698:	e8 2b c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011769d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01176a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01176a3:	83 ec 08             	sub    $0x8,%esp
f01176a6:	6a 01                	push   $0x1
f01176a8:	50                   	push   %eax
f01176a9:	e8 2f 3b ff ff       	call   f010b1dd <set_program_priority>
f01176ae:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01176b1:	e8 12 c7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01176b6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01176b9:	74 17                	je     f01176d2 <test_priority_normal_and_lower+0x75b>
f01176bb:	83 ec 04             	sub    $0x4,%esp
f01176be:	68 18 af 13 f0       	push   $0xf013af18
f01176c3:	68 57 01 00 00       	push   $0x157
f01176c8:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01176cd:	e8 33 8b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01176d2:	e8 ba 56 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01176d7:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01176da:	83 f8 03             	cmp    $0x3,%eax
f01176dd:	74 17                	je     f01176f6 <test_priority_normal_and_lower+0x77f>
f01176df:	83 ec 04             	sub    $0x4,%esp
f01176e2:	68 18 af 13 f0       	push   $0xf013af18
f01176e7:	68 58 01 00 00       	push   $0x158
f01176ec:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01176f1:	e8 0f 8b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01176f6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01176f9:	8b 40 74             	mov    0x74(%eax),%eax
f01176fc:	83 f8 02             	cmp    $0x2,%eax
f01176ff:	75 16                	jne    f0117717 <test_priority_normal_and_lower+0x7a0>
f0117701:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117704:	8b 40 74             	mov    0x74(%eax),%eax
f0117707:	83 f8 07             	cmp    $0x7,%eax
f011770a:	75 0b                	jne    f0117717 <test_priority_normal_and_lower+0x7a0>
f011770c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011770f:	8b 40 74             	mov    0x74(%eax),%eax
f0117712:	83 f8 05             	cmp    $0x5,%eax
f0117715:	74 17                	je     f011772e <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117717:	83 ec 04             	sub    $0x4,%esp
f011771a:	68 4c b0 13 f0       	push   $0xf013b04c
f011771f:	68 5b 01 00 00       	push   $0x15b
f0117724:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117729:	e8 d7 8a fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f011772e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117735:	e9 80 00 00 00       	jmp    f01177ba <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011773a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011773d:	83 c0 08             	add    $0x8,%eax
f0117740:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117747:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011774a:	8b 58 78             	mov    0x78(%eax),%ebx
f011774d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117750:	89 d0                	mov    %edx,%eax
f0117752:	01 c0                	add    %eax,%eax
f0117754:	01 d0                	add    %edx,%eax
f0117756:	c1 e0 03             	shl    $0x3,%eax
f0117759:	01 d8                	add    %ebx,%eax
f011775b:	8b 00                	mov    (%eax),%eax
f011775d:	39 c1                	cmp    %eax,%ecx
f011775f:	74 17                	je     f0117778 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117761:	83 ec 04             	sub    $0x4,%esp
f0117764:	68 9c b2 13 f0       	push   $0xf013b29c
f0117769:	68 60 01 00 00       	push   $0x160
f011776e:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117773:	e8 8d 8a fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117778:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011777b:	83 c0 08             	add    $0x8,%eax
f011777e:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117785:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117788:	8b 58 78             	mov    0x78(%eax),%ebx
f011778b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011778e:	89 d0                	mov    %edx,%eax
f0117790:	01 c0                	add    %eax,%eax
f0117792:	01 d0                	add    %edx,%eax
f0117794:	c1 e0 03             	shl    $0x3,%eax
f0117797:	01 d8                	add    %ebx,%eax
f0117799:	8b 40 08             	mov    0x8(%eax),%eax
f011779c:	39 c1                	cmp    %eax,%ecx
f011779e:	74 17                	je     f01177b7 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01177a0:	83 ec 04             	sub    $0x4,%esp
f01177a3:	68 9c b2 13 f0       	push   $0xf013b29c
f01177a8:	68 63 01 00 00       	push   $0x163
f01177ad:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01177b2:	e8 4e 8a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01177b7:	ff 45 cc             	incl   -0x34(%ebp)
f01177ba:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01177be:	0f 8e 76 ff ff ff    	jle    f011773a <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01177c4:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01177cb:	e9 80 00 00 00       	jmp    f0117850 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01177d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01177d3:	83 c0 03             	add    $0x3,%eax
f01177d6:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01177dd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177e0:	8b 58 78             	mov    0x78(%eax),%ebx
f01177e3:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01177e6:	89 d0                	mov    %edx,%eax
f01177e8:	01 c0                	add    %eax,%eax
f01177ea:	01 d0                	add    %edx,%eax
f01177ec:	c1 e0 03             	shl    $0x3,%eax
f01177ef:	01 d8                	add    %ebx,%eax
f01177f1:	8b 00                	mov    (%eax),%eax
f01177f3:	39 c1                	cmp    %eax,%ecx
f01177f5:	74 17                	je     f011780e <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01177f7:	ff 75 c8             	pushl  -0x38(%ebp)
f01177fa:	68 08 b3 13 f0       	push   $0xf013b308
f01177ff:	68 69 01 00 00       	push   $0x169
f0117804:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117809:	e8 f7 89 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011780e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117811:	83 c0 03             	add    $0x3,%eax
f0117814:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011781b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011781e:	8b 58 78             	mov    0x78(%eax),%ebx
f0117821:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117824:	89 d0                	mov    %edx,%eax
f0117826:	01 c0                	add    %eax,%eax
f0117828:	01 d0                	add    %edx,%eax
f011782a:	c1 e0 03             	shl    $0x3,%eax
f011782d:	01 d8                	add    %ebx,%eax
f011782f:	8b 40 08             	mov    0x8(%eax),%eax
f0117832:	39 c1                	cmp    %eax,%ecx
f0117834:	74 17                	je     f011784d <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117836:	83 ec 04             	sub    $0x4,%esp
f0117839:	68 9c b2 13 f0       	push   $0xf013b29c
f011783e:	68 6c 01 00 00       	push   $0x16c
f0117843:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117848:	e8 b8 89 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011784d:	ff 45 c8             	incl   -0x38(%ebp)
f0117850:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117854:	0f 8e 76 ff ff ff    	jle    f01177d0 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011785a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117861:	e9 80 00 00 00       	jmp    f01178e6 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117866:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117869:	83 c0 05             	add    $0x5,%eax
f011786c:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117873:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117876:	8b 58 78             	mov    0x78(%eax),%ebx
f0117879:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011787c:	89 d0                	mov    %edx,%eax
f011787e:	01 c0                	add    %eax,%eax
f0117880:	01 d0                	add    %edx,%eax
f0117882:	c1 e0 03             	shl    $0x3,%eax
f0117885:	01 d8                	add    %ebx,%eax
f0117887:	8b 00                	mov    (%eax),%eax
f0117889:	39 c1                	cmp    %eax,%ecx
f011788b:	74 17                	je     f01178a4 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011788d:	83 ec 04             	sub    $0x4,%esp
f0117890:	68 9c b2 13 f0       	push   $0xf013b29c
f0117895:	68 72 01 00 00       	push   $0x172
f011789a:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011789f:	e8 61 89 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01178a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01178a7:	83 c0 05             	add    $0x5,%eax
f01178aa:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01178b1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01178b4:	8b 58 78             	mov    0x78(%eax),%ebx
f01178b7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01178ba:	89 d0                	mov    %edx,%eax
f01178bc:	01 c0                	add    %eax,%eax
f01178be:	01 d0                	add    %edx,%eax
f01178c0:	c1 e0 03             	shl    $0x3,%eax
f01178c3:	01 d8                	add    %ebx,%eax
f01178c5:	8b 40 08             	mov    0x8(%eax),%eax
f01178c8:	39 c1                	cmp    %eax,%ecx
f01178ca:	74 17                	je     f01178e3 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01178cc:	83 ec 04             	sub    $0x4,%esp
f01178cf:	68 9c b2 13 f0       	push   $0xf013b29c
f01178d4:	68 75 01 00 00       	push   $0x175
f01178d9:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01178de:	e8 22 89 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01178e3:	ff 45 c4             	incl   -0x3c(%ebp)
f01178e6:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f01178ea:	0f 8e 76 ff ff ff    	jle    f0117866 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f01178f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178f3:	83 ec 08             	sub    $0x8,%esp
f01178f6:	6a 05                	push   $0x5
f01178f8:	50                   	push   %eax
f01178f9:	e8 df 38 ff ff       	call   f010b1dd <set_program_priority>
f01178fe:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117901:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117904:	83 ec 08             	sub    $0x8,%esp
f0117907:	6a 05                	push   $0x5
f0117909:	50                   	push   %eax
f011790a:	e8 ce 38 ff ff       	call   f010b1dd <set_program_priority>
f011790f:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117912:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117919:	75 6e 61 
f011791c:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117923:	6c 00 00 
f0117926:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f011792c:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117931:	b8 00 00 00 00       	mov    $0x0,%eax
f0117936:	89 d7                	mov    %edx,%edi
f0117938:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011793a:	83 ec 0c             	sub    $0xc,%esp
f011793d:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117943:	50                   	push   %eax
f0117944:	e8 27 94 fe ff       	call   f0100d70 <execute_command>
f0117949:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f011794c:	eb 10                	jmp    f011795e <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f011794e:	83 ec 0c             	sub    $0xc,%esp
f0117951:	68 78 b3 13 f0       	push   $0xf013b378
f0117956:	e8 b3 93 fe ff       	call   f0100d0e <cprintf>
f011795b:	83 c4 10             	add    $0x10,%esp
	}
}
f011795e:	90                   	nop
f011795f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117962:	5b                   	pop    %ebx
f0117963:	5e                   	pop    %esi
f0117964:	5f                   	pop    %edi
f0117965:	5d                   	pop    %ebp
f0117966:	c3                   	ret    

f0117967 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117967:	55                   	push   %ebp
f0117968:	89 e5                	mov    %esp,%ebp
f011796a:	a1 5c 1d 88 f0       	mov    0xf0881d5c,%eax
f011796f:	83 f8 03             	cmp    $0x3,%eax
f0117972:	75 04                	jne    f0117978 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117974:	b0 01                	mov    $0x1,%al
f0117976:	eb 02                	jmp    f011797a <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117978:	b0 00                	mov    $0x0,%al
f011797a:	5d                   	pop    %ebp
f011797b:	c3                   	ret    

f011797c <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f011797c:	55                   	push   %ebp
f011797d:	89 e5                	mov    %esp,%ebp
f011797f:	57                   	push   %edi
f0117980:	53                   	push   %ebx
f0117981:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117987:	83 ec 0c             	sub    $0xc,%esp
f011798a:	68 7c b4 13 f0       	push   $0xf013b47c
f011798f:	e8 7a 93 fe ff       	call   f0100d0e <cprintf>
f0117994:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117997:	83 ec 0c             	sub    $0xc,%esp
f011799a:	68 ac b4 13 f0       	push   $0xf013b4ac
f011799f:	e8 6a 93 fe ff       	call   f0100d0e <cprintf>
f01179a4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01179a7:	83 ec 0c             	sub    $0xc,%esp
f01179aa:	68 7c b4 13 f0       	push   $0xf013b47c
f01179af:	e8 5a 93 fe ff       	call   f0100d0e <cprintf>
f01179b4:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01179b7:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01179bb:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01179bf:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01179c5:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01179cb:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01179d2:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01179d9:	e8 b3 53 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01179de:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f01179e1:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f01179e7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01179ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01179f1:	89 d7                	mov    %edx,%edi
f01179f3:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f01179f5:	e8 97 53 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01179fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01179fd:	e8 c6 c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117a02:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117a05:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117a0c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117a0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117a14:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117a17:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117a1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a1f:	f7 75 d4             	divl   -0x2c(%ebp)
f0117a22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117a25:	29 d0                	sub    %edx,%eax
f0117a27:	89 c1                	mov    %eax,%ecx
f0117a29:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117a30:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117a35:	0f b6 d0             	movzbl %al,%edx
f0117a38:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117a3b:	01 d0                	add    %edx,%eax
f0117a3d:	48                   	dec    %eax
f0117a3e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117a41:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117a44:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a49:	f7 75 cc             	divl   -0x34(%ebp)
f0117a4c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117a4f:	29 d0                	sub    %edx,%eax
f0117a51:	01 c1                	add    %eax,%ecx
f0117a53:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117a5a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117a5f:	0f b6 c0             	movzbl %al,%eax
f0117a62:	c1 e0 04             	shl    $0x4,%eax
f0117a65:	89 c2                	mov    %eax,%edx
f0117a67:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117a6a:	01 d0                	add    %edx,%eax
f0117a6c:	48                   	dec    %eax
f0117a6d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117a70:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117a73:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a78:	f7 75 c4             	divl   -0x3c(%ebp)
f0117a7b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117a7e:	29 d0                	sub    %edx,%eax
f0117a80:	01 c8                	add    %ecx,%eax
f0117a82:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117a87:	29 c2                	sub    %eax,%edx
f0117a89:	89 d0                	mov    %edx,%eax
f0117a8b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0117a8e:	83 ec 0c             	sub    $0xc,%esp
f0117a91:	ff 75 bc             	pushl  -0x44(%ebp)
f0117a94:	e8 e1 ff fe ff       	call   f0107a7a <kmalloc>
f0117a99:	83 c4 10             	add    $0x10,%esp
f0117a9c:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117aa2:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117aa8:	85 c0                	test   %eax,%eax
f0117aaa:	74 14                	je     f0117ac0 <test_kmalloc+0x144>
f0117aac:	83 ec 04             	sub    $0x4,%esp
f0117aaf:	68 08 b5 13 f0       	push   $0xf013b508
f0117ab4:	6a 40                	push   $0x40
f0117ab6:	68 3a b5 13 f0       	push   $0xf013b53a
f0117abb:	e8 45 87 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117ac0:	e8 03 c3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117ac5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117ac8:	74 14                	je     f0117ade <test_kmalloc+0x162>
f0117aca:	83 ec 04             	sub    $0x4,%esp
f0117acd:	68 54 b5 13 f0       	push   $0xf013b554
f0117ad2:	6a 41                	push   $0x41
f0117ad4:	68 3a b5 13 f0       	push   $0xf013b53a
f0117ad9:	e8 27 87 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117ade:	e8 ae 52 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117ae3:	89 c2                	mov    %eax,%edx
f0117ae5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117ae8:	39 c2                	cmp    %eax,%edx
f0117aea:	74 14                	je     f0117b00 <test_kmalloc+0x184>
f0117aec:	83 ec 04             	sub    $0x4,%esp
f0117aef:	68 bc b5 13 f0       	push   $0xf013b5bc
f0117af4:	6a 42                	push   $0x42
f0117af6:	68 3a b5 13 f0       	push   $0xf013b53a
f0117afb:	e8 05 87 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0117b00:	83 ec 0c             	sub    $0xc,%esp
f0117b03:	68 fc b5 13 f0       	push   $0xf013b5fc
f0117b08:	e8 01 92 fe ff       	call   f0100d0e <cprintf>
f0117b0d:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117b10:	e8 7c 52 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117b15:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b18:	e8 ab c2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117b1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117b20:	83 ec 0c             	sub    $0xc,%esp
f0117b23:	68 00 fc 1f 00       	push   $0x1ffc00
f0117b28:	e8 4d ff fe ff       	call   f0107a7a <kmalloc>
f0117b2d:	83 c4 10             	add    $0x10,%esp
f0117b30:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117b36:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117b3c:	89 c1                	mov    %eax,%ecx
f0117b3e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117b45:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b48:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b4d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117b50:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b53:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b58:	f7 75 b8             	divl   -0x48(%ebp)
f0117b5b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b5e:	29 d0                	sub    %edx,%eax
f0117b60:	89 c3                	mov    %eax,%ebx
f0117b62:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117b69:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117b6e:	0f b6 d0             	movzbl %al,%edx
f0117b71:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b74:	01 d0                	add    %edx,%eax
f0117b76:	48                   	dec    %eax
f0117b77:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117b7a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117b7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b82:	f7 75 b0             	divl   -0x50(%ebp)
f0117b85:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117b88:	29 d0                	sub    %edx,%eax
f0117b8a:	01 c3                	add    %eax,%ebx
f0117b8c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117b93:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117b98:	0f b6 c0             	movzbl %al,%eax
f0117b9b:	c1 e0 04             	shl    $0x4,%eax
f0117b9e:	89 c2                	mov    %eax,%edx
f0117ba0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117ba3:	01 d0                	add    %edx,%eax
f0117ba5:	48                   	dec    %eax
f0117ba6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117ba9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117bac:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bb1:	f7 75 a8             	divl   -0x58(%ebp)
f0117bb4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117bb7:	29 d0                	sub    %edx,%eax
f0117bb9:	01 d8                	add    %ebx,%eax
f0117bbb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117bc0:	39 c1                	cmp    %eax,%ecx
f0117bc2:	74 14                	je     f0117bd8 <test_kmalloc+0x25c>
f0117bc4:	83 ec 04             	sub    $0x4,%esp
f0117bc7:	68 20 b6 13 f0       	push   $0xf013b620
f0117bcc:	6a 49                	push   $0x49
f0117bce:	68 3a b5 13 f0       	push   $0xf013b53a
f0117bd3:	e8 2d 86 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117bd8:	e8 eb c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117bdd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117be0:	74 14                	je     f0117bf6 <test_kmalloc+0x27a>
f0117be2:	83 ec 04             	sub    $0x4,%esp
f0117be5:	68 54 b5 13 f0       	push   $0xf013b554
f0117bea:	6a 4a                	push   $0x4a
f0117bec:	68 3a b5 13 f0       	push   $0xf013b53a
f0117bf1:	e8 0f 86 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117bf6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117bf9:	e8 93 51 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117bfe:	29 c3                	sub    %eax,%ebx
f0117c00:	89 d8                	mov    %ebx,%eax
f0117c02:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117c07:	74 14                	je     f0117c1d <test_kmalloc+0x2a1>
f0117c09:	83 ec 04             	sub    $0x4,%esp
f0117c0c:	68 bc b5 13 f0       	push   $0xf013b5bc
f0117c11:	6a 4b                	push   $0x4b
f0117c13:	68 3a b5 13 f0       	push   $0xf013b53a
f0117c18:	e8 e8 85 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117c1d:	e8 6f 51 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117c22:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c25:	e8 9e c1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117c2a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117c2d:	83 ec 0c             	sub    $0xc,%esp
f0117c30:	68 00 fc 1f 00       	push   $0x1ffc00
f0117c35:	e8 40 fe fe ff       	call   f0107a7a <kmalloc>
f0117c3a:	83 c4 10             	add    $0x10,%esp
f0117c3d:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117c43:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117c49:	89 c1                	mov    %eax,%ecx
f0117c4b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117c52:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117c55:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c5a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117c5d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117c60:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c65:	f7 75 a0             	divl   -0x60(%ebp)
f0117c68:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117c6b:	29 d0                	sub    %edx,%eax
f0117c6d:	89 c3                	mov    %eax,%ebx
f0117c6f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117c76:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117c7b:	0f b6 d0             	movzbl %al,%edx
f0117c7e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117c81:	01 d0                	add    %edx,%eax
f0117c83:	48                   	dec    %eax
f0117c84:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117c87:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117c8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c8f:	f7 75 98             	divl   -0x68(%ebp)
f0117c92:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117c95:	29 d0                	sub    %edx,%eax
f0117c97:	01 c3                	add    %eax,%ebx
f0117c99:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117ca0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117ca5:	0f b6 c0             	movzbl %al,%eax
f0117ca8:	c1 e0 04             	shl    $0x4,%eax
f0117cab:	89 c2                	mov    %eax,%edx
f0117cad:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117cb0:	01 d0                	add    %edx,%eax
f0117cb2:	48                   	dec    %eax
f0117cb3:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117cb6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117cb9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cbe:	f7 75 90             	divl   -0x70(%ebp)
f0117cc1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117cc4:	29 d0                	sub    %edx,%eax
f0117cc6:	01 d8                	add    %ebx,%eax
f0117cc8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117ccd:	39 c1                	cmp    %eax,%ecx
f0117ccf:	74 14                	je     f0117ce5 <test_kmalloc+0x369>
f0117cd1:	83 ec 04             	sub    $0x4,%esp
f0117cd4:	68 20 b6 13 f0       	push   $0xf013b620
f0117cd9:	6a 51                	push   $0x51
f0117cdb:	68 3a b5 13 f0       	push   $0xf013b53a
f0117ce0:	e8 20 85 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117ce5:	e8 de c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117cea:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117ced:	74 14                	je     f0117d03 <test_kmalloc+0x387>
f0117cef:	83 ec 04             	sub    $0x4,%esp
f0117cf2:	68 54 b5 13 f0       	push   $0xf013b554
f0117cf7:	6a 52                	push   $0x52
f0117cf9:	68 3a b5 13 f0       	push   $0xf013b53a
f0117cfe:	e8 02 85 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117d03:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117d06:	e8 86 50 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117d0b:	29 c3                	sub    %eax,%ebx
f0117d0d:	89 d8                	mov    %ebx,%eax
f0117d0f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117d14:	74 14                	je     f0117d2a <test_kmalloc+0x3ae>
f0117d16:	83 ec 04             	sub    $0x4,%esp
f0117d19:	68 bc b5 13 f0       	push   $0xf013b5bc
f0117d1e:	6a 53                	push   $0x53
f0117d20:	68 3a b5 13 f0       	push   $0xf013b53a
f0117d25:	e8 db 84 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117d2a:	e8 62 50 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117d2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d32:	e8 91 c0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117d37:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117d3a:	83 ec 0c             	sub    $0xc,%esp
f0117d3d:	68 00 08 00 00       	push   $0x800
f0117d42:	e8 33 fd fe ff       	call   f0107a7a <kmalloc>
f0117d47:	83 c4 10             	add    $0x10,%esp
f0117d4a:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117d50:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117d56:	89 c1                	mov    %eax,%ecx
f0117d58:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117d5f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117d62:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117d67:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117d6a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117d6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d72:	f7 75 88             	divl   -0x78(%ebp)
f0117d75:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117d78:	29 d0                	sub    %edx,%eax
f0117d7a:	89 c3                	mov    %eax,%ebx
f0117d7c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117d83:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117d88:	0f b6 d0             	movzbl %al,%edx
f0117d8b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117d8e:	01 d0                	add    %edx,%eax
f0117d90:	48                   	dec    %eax
f0117d91:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117d97:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117d9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117da2:	f7 75 80             	divl   -0x80(%ebp)
f0117da5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117dab:	29 d0                	sub    %edx,%eax
f0117dad:	01 c3                	add    %eax,%ebx
f0117daf:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117db6:	10 00 00 
f0117db9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117dbe:	0f b6 c0             	movzbl %al,%eax
f0117dc1:	c1 e0 04             	shl    $0x4,%eax
f0117dc4:	89 c2                	mov    %eax,%edx
f0117dc6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117dcc:	01 d0                	add    %edx,%eax
f0117dce:	48                   	dec    %eax
f0117dcf:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117dd5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117ddb:	ba 00 00 00 00       	mov    $0x0,%edx
f0117de0:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117de6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117dec:	29 d0                	sub    %edx,%eax
f0117dee:	01 d8                	add    %ebx,%eax
f0117df0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117df5:	39 c1                	cmp    %eax,%ecx
f0117df7:	74 14                	je     f0117e0d <test_kmalloc+0x491>
f0117df9:	83 ec 04             	sub    $0x4,%esp
f0117dfc:	68 20 b6 13 f0       	push   $0xf013b620
f0117e01:	6a 59                	push   $0x59
f0117e03:	68 3a b5 13 f0       	push   $0xf013b53a
f0117e08:	e8 f8 83 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117e0d:	e8 b6 bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e12:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117e15:	74 14                	je     f0117e2b <test_kmalloc+0x4af>
f0117e17:	83 ec 04             	sub    $0x4,%esp
f0117e1a:	68 54 b5 13 f0       	push   $0xf013b554
f0117e1f:	6a 5a                	push   $0x5a
f0117e21:	68 3a b5 13 f0       	push   $0xf013b53a
f0117e26:	e8 da 83 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117e2b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117e2e:	e8 5e 4f ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117e33:	29 c3                	sub    %eax,%ebx
f0117e35:	89 d8                	mov    %ebx,%eax
f0117e37:	83 f8 01             	cmp    $0x1,%eax
f0117e3a:	74 14                	je     f0117e50 <test_kmalloc+0x4d4>
f0117e3c:	83 ec 04             	sub    $0x4,%esp
f0117e3f:	68 bc b5 13 f0       	push   $0xf013b5bc
f0117e44:	6a 5b                	push   $0x5b
f0117e46:	68 3a b5 13 f0       	push   $0xf013b53a
f0117e4b:	e8 b5 83 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117e50:	e8 3c 4f ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117e55:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117e58:	e8 6b bf fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117e5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117e60:	83 ec 0c             	sub    $0xc,%esp
f0117e63:	68 00 08 00 00       	push   $0x800
f0117e68:	e8 0d fc fe ff       	call   f0107a7a <kmalloc>
f0117e6d:	83 c4 10             	add    $0x10,%esp
f0117e70:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117e76:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117e7c:	89 c1                	mov    %eax,%ecx
f0117e7e:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117e85:	10 00 00 
f0117e88:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117e8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e93:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117e99:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117e9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ea4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117eaa:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117eb0:	29 d0                	sub    %edx,%eax
f0117eb2:	89 c3                	mov    %eax,%ebx
f0117eb4:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117ebb:	10 00 00 
f0117ebe:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117ec3:	0f b6 d0             	movzbl %al,%edx
f0117ec6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117ecc:	01 d0                	add    %edx,%eax
f0117ece:	48                   	dec    %eax
f0117ecf:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117ed5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117edb:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ee0:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117ee6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117eec:	29 d0                	sub    %edx,%eax
f0117eee:	01 c3                	add    %eax,%ebx
f0117ef0:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117ef7:	10 00 00 
f0117efa:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0117eff:	0f b6 c0             	movzbl %al,%eax
f0117f02:	c1 e0 04             	shl    $0x4,%eax
f0117f05:	89 c2                	mov    %eax,%edx
f0117f07:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117f0d:	01 d0                	add    %edx,%eax
f0117f0f:	48                   	dec    %eax
f0117f10:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117f16:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117f1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f21:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117f27:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117f2d:	29 d0                	sub    %edx,%eax
f0117f2f:	01 d8                	add    %ebx,%eax
f0117f31:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117f36:	39 c1                	cmp    %eax,%ecx
f0117f38:	74 14                	je     f0117f4e <test_kmalloc+0x5d2>
f0117f3a:	83 ec 04             	sub    $0x4,%esp
f0117f3d:	68 20 b6 13 f0       	push   $0xf013b620
f0117f42:	6a 61                	push   $0x61
f0117f44:	68 3a b5 13 f0       	push   $0xf013b53a
f0117f49:	e8 b7 82 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117f4e:	e8 75 be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f53:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117f56:	74 14                	je     f0117f6c <test_kmalloc+0x5f0>
f0117f58:	83 ec 04             	sub    $0x4,%esp
f0117f5b:	68 54 b5 13 f0       	push   $0xf013b554
f0117f60:	6a 62                	push   $0x62
f0117f62:	68 3a b5 13 f0       	push   $0xf013b53a
f0117f67:	e8 99 82 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117f6c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117f6f:	e8 1d 4e ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117f74:	29 c3                	sub    %eax,%ebx
f0117f76:	89 d8                	mov    %ebx,%eax
f0117f78:	83 f8 01             	cmp    $0x1,%eax
f0117f7b:	74 14                	je     f0117f91 <test_kmalloc+0x615>
f0117f7d:	83 ec 04             	sub    $0x4,%esp
f0117f80:	68 bc b5 13 f0       	push   $0xf013b5bc
f0117f85:	6a 63                	push   $0x63
f0117f87:	68 3a b5 13 f0       	push   $0xf013b53a
f0117f8c:	e8 74 82 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117f91:	e8 fb 4d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0117f96:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117f99:	e8 2a be fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0117f9e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117fa1:	83 ec 0c             	sub    $0xc,%esp
f0117fa4:	68 00 1c 00 00       	push   $0x1c00
f0117fa9:	e8 cc fa fe ff       	call   f0107a7a <kmalloc>
f0117fae:	83 c4 10             	add    $0x10,%esp
f0117fb1:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117fb7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117fbd:	89 c1                	mov    %eax,%ecx
f0117fbf:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117fc6:	10 00 00 
f0117fc9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117fcf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117fd4:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117fda:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117fe0:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fe5:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0117feb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117ff1:	29 d0                	sub    %edx,%eax
f0117ff3:	89 c3                	mov    %eax,%ebx
f0117ff5:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0117ffc:	10 00 00 
f0117fff:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118004:	0f b6 d0             	movzbl %al,%edx
f0118007:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011800d:	01 d0                	add    %edx,%eax
f011800f:	48                   	dec    %eax
f0118010:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118016:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011801c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118021:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118027:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011802d:	29 d0                	sub    %edx,%eax
f011802f:	01 c3                	add    %eax,%ebx
f0118031:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118038:	10 00 00 
f011803b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118040:	0f b6 c0             	movzbl %al,%eax
f0118043:	c1 e0 04             	shl    $0x4,%eax
f0118046:	89 c2                	mov    %eax,%edx
f0118048:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011804e:	01 d0                	add    %edx,%eax
f0118050:	48                   	dec    %eax
f0118051:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118057:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011805d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118062:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118068:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011806e:	29 d0                	sub    %edx,%eax
f0118070:	01 d8                	add    %ebx,%eax
f0118072:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118077:	39 c1                	cmp    %eax,%ecx
f0118079:	74 14                	je     f011808f <test_kmalloc+0x713>
f011807b:	83 ec 04             	sub    $0x4,%esp
f011807e:	68 20 b6 13 f0       	push   $0xf013b620
f0118083:	6a 69                	push   $0x69
f0118085:	68 3a b5 13 f0       	push   $0xf013b53a
f011808a:	e8 76 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011808f:	e8 34 bd fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118094:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118097:	74 14                	je     f01180ad <test_kmalloc+0x731>
f0118099:	83 ec 04             	sub    $0x4,%esp
f011809c:	68 54 b5 13 f0       	push   $0xf013b554
f01180a1:	6a 6a                	push   $0x6a
f01180a3:	68 3a b5 13 f0       	push   $0xf013b53a
f01180a8:	e8 58 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01180ad:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01180b0:	e8 dc 4c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01180b5:	29 c3                	sub    %eax,%ebx
f01180b7:	89 d8                	mov    %ebx,%eax
f01180b9:	83 f8 02             	cmp    $0x2,%eax
f01180bc:	74 14                	je     f01180d2 <test_kmalloc+0x756>
f01180be:	83 ec 04             	sub    $0x4,%esp
f01180c1:	68 bc b5 13 f0       	push   $0xf013b5bc
f01180c6:	6a 6b                	push   $0x6b
f01180c8:	68 3a b5 13 f0       	push   $0xf013b53a
f01180cd:	e8 33 81 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01180d2:	e8 ba 4c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01180d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01180da:	e8 e9 bc fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01180df:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01180e2:	83 ec 0c             	sub    $0xc,%esp
f01180e5:	68 00 fc 2f 00       	push   $0x2ffc00
f01180ea:	e8 8b f9 fe ff       	call   f0107a7a <kmalloc>
f01180ef:	83 c4 10             	add    $0x10,%esp
f01180f2:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01180f8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01180fe:	89 c1                	mov    %eax,%ecx
f0118100:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118107:	10 00 00 
f011810a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118110:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118115:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011811b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118121:	ba 00 00 00 00       	mov    $0x0,%edx
f0118126:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011812c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118132:	29 d0                	sub    %edx,%eax
f0118134:	89 c3                	mov    %eax,%ebx
f0118136:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011813d:	10 00 00 
f0118140:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118145:	0f b6 d0             	movzbl %al,%edx
f0118148:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011814e:	01 d0                	add    %edx,%eax
f0118150:	48                   	dec    %eax
f0118151:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118157:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011815d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118162:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118168:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011816e:	29 d0                	sub    %edx,%eax
f0118170:	01 c3                	add    %eax,%ebx
f0118172:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118179:	10 00 00 
f011817c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118181:	0f b6 c0             	movzbl %al,%eax
f0118184:	c1 e0 04             	shl    $0x4,%eax
f0118187:	89 c2                	mov    %eax,%edx
f0118189:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011818f:	01 d0                	add    %edx,%eax
f0118191:	48                   	dec    %eax
f0118192:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118198:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011819e:	ba 00 00 00 00       	mov    $0x0,%edx
f01181a3:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01181a9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01181af:	29 d0                	sub    %edx,%eax
f01181b1:	01 d8                	add    %ebx,%eax
f01181b3:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01181b8:	39 c1                	cmp    %eax,%ecx
f01181ba:	74 14                	je     f01181d0 <test_kmalloc+0x854>
f01181bc:	83 ec 04             	sub    $0x4,%esp
f01181bf:	68 20 b6 13 f0       	push   $0xf013b620
f01181c4:	6a 71                	push   $0x71
f01181c6:	68 3a b5 13 f0       	push   $0xf013b53a
f01181cb:	e8 35 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01181d0:	e8 f3 bb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01181d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01181d8:	74 14                	je     f01181ee <test_kmalloc+0x872>
f01181da:	83 ec 04             	sub    $0x4,%esp
f01181dd:	68 54 b5 13 f0       	push   $0xf013b554
f01181e2:	6a 72                	push   $0x72
f01181e4:	68 3a b5 13 f0       	push   $0xf013b53a
f01181e9:	e8 17 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01181ee:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01181f1:	e8 9b 4b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01181f6:	29 c3                	sub    %eax,%ebx
f01181f8:	89 d8                	mov    %ebx,%eax
f01181fa:	3d 00 03 00 00       	cmp    $0x300,%eax
f01181ff:	74 14                	je     f0118215 <test_kmalloc+0x899>
f0118201:	83 ec 04             	sub    $0x4,%esp
f0118204:	68 bc b5 13 f0       	push   $0xf013b5bc
f0118209:	6a 73                	push   $0x73
f011820b:	68 3a b5 13 f0       	push   $0xf013b53a
f0118210:	e8 f0 7f fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118215:	e8 77 4b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011821a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011821d:	e8 a6 bb fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118222:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118225:	83 ec 0c             	sub    $0xc,%esp
f0118228:	68 00 fc 5f 00       	push   $0x5ffc00
f011822d:	e8 48 f8 fe ff       	call   f0107a7a <kmalloc>
f0118232:	83 c4 10             	add    $0x10,%esp
f0118235:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011823b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118241:	89 c1                	mov    %eax,%ecx
f0118243:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011824a:	10 00 00 
f011824d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118253:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118258:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011825e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118264:	ba 00 00 00 00       	mov    $0x0,%edx
f0118269:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011826f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118275:	29 d0                	sub    %edx,%eax
f0118277:	89 c3                	mov    %eax,%ebx
f0118279:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118280:	10 00 00 
f0118283:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118288:	0f b6 d0             	movzbl %al,%edx
f011828b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118291:	01 d0                	add    %edx,%eax
f0118293:	48                   	dec    %eax
f0118294:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011829a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01182a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01182a5:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01182ab:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01182b1:	29 d0                	sub    %edx,%eax
f01182b3:	01 c3                	add    %eax,%ebx
f01182b5:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01182bc:	10 00 00 
f01182bf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01182c4:	0f b6 c0             	movzbl %al,%eax
f01182c7:	c1 e0 04             	shl    $0x4,%eax
f01182ca:	89 c2                	mov    %eax,%edx
f01182cc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01182d2:	01 d0                	add    %edx,%eax
f01182d4:	48                   	dec    %eax
f01182d5:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01182db:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01182e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01182e6:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01182ec:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01182f2:	29 d0                	sub    %edx,%eax
f01182f4:	01 d8                	add    %ebx,%eax
f01182f6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01182fb:	39 c1                	cmp    %eax,%ecx
f01182fd:	74 14                	je     f0118313 <test_kmalloc+0x997>
f01182ff:	83 ec 04             	sub    $0x4,%esp
f0118302:	68 20 b6 13 f0       	push   $0xf013b620
f0118307:	6a 79                	push   $0x79
f0118309:	68 3a b5 13 f0       	push   $0xf013b53a
f011830e:	e8 f2 7e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118313:	e8 b0 ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118318:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011831b:	74 14                	je     f0118331 <test_kmalloc+0x9b5>
f011831d:	83 ec 04             	sub    $0x4,%esp
f0118320:	68 54 b5 13 f0       	push   $0xf013b554
f0118325:	6a 7a                	push   $0x7a
f0118327:	68 3a b5 13 f0       	push   $0xf013b53a
f011832c:	e8 d4 7e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118331:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118334:	e8 58 4a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0118339:	29 c3                	sub    %eax,%ebx
f011833b:	89 d8                	mov    %ebx,%eax
f011833d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118342:	74 14                	je     f0118358 <test_kmalloc+0x9dc>
f0118344:	83 ec 04             	sub    $0x4,%esp
f0118347:	68 bc b5 13 f0       	push   $0xf013b5bc
f011834c:	6a 7b                	push   $0x7b
f011834e:	68 3a b5 13 f0       	push   $0xf013b53a
f0118353:	e8 ad 7e fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118358:	e8 34 4a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011835d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118360:	e8 63 ba fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118365:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118368:	83 ec 0c             	sub    $0xc,%esp
f011836b:	68 00 38 00 00       	push   $0x3800
f0118370:	e8 05 f7 fe ff       	call   f0107a7a <kmalloc>
f0118375:	83 c4 10             	add    $0x10,%esp
f0118378:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011837e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118384:	89 c1                	mov    %eax,%ecx
f0118386:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011838d:	10 00 00 
f0118390:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118396:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011839b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01183a1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01183a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01183ac:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01183b2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01183b8:	29 d0                	sub    %edx,%eax
f01183ba:	89 c3                	mov    %eax,%ebx
f01183bc:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01183c3:	10 00 00 
f01183c6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01183cb:	0f b6 d0             	movzbl %al,%edx
f01183ce:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01183d4:	01 d0                	add    %edx,%eax
f01183d6:	48                   	dec    %eax
f01183d7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01183dd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01183e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01183e8:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01183ee:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01183f4:	29 d0                	sub    %edx,%eax
f01183f6:	01 c3                	add    %eax,%ebx
f01183f8:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01183ff:	10 00 00 
f0118402:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118407:	0f b6 c0             	movzbl %al,%eax
f011840a:	c1 e0 04             	shl    $0x4,%eax
f011840d:	89 c2                	mov    %eax,%edx
f011840f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118415:	01 d0                	add    %edx,%eax
f0118417:	48                   	dec    %eax
f0118418:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011841e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118424:	ba 00 00 00 00       	mov    $0x0,%edx
f0118429:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011842f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118435:	29 d0                	sub    %edx,%eax
f0118437:	01 d8                	add    %ebx,%eax
f0118439:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011843e:	39 c1                	cmp    %eax,%ecx
f0118440:	74 17                	je     f0118459 <test_kmalloc+0xadd>
f0118442:	83 ec 04             	sub    $0x4,%esp
f0118445:	68 20 b6 13 f0       	push   $0xf013b620
f011844a:	68 81 00 00 00       	push   $0x81
f011844f:	68 3a b5 13 f0       	push   $0xf013b53a
f0118454:	e8 ac 7d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118459:	e8 6a b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011845e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118461:	74 17                	je     f011847a <test_kmalloc+0xafe>
f0118463:	83 ec 04             	sub    $0x4,%esp
f0118466:	68 54 b5 13 f0       	push   $0xf013b554
f011846b:	68 82 00 00 00       	push   $0x82
f0118470:	68 3a b5 13 f0       	push   $0xf013b53a
f0118475:	e8 8b 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011847a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011847d:	e8 0f 49 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0118482:	29 c3                	sub    %eax,%ebx
f0118484:	89 d8                	mov    %ebx,%eax
f0118486:	83 f8 04             	cmp    $0x4,%eax
f0118489:	74 17                	je     f01184a2 <test_kmalloc+0xb26>
f011848b:	83 ec 04             	sub    $0x4,%esp
f011848e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0118493:	68 83 00 00 00       	push   $0x83
f0118498:	68 3a b5 13 f0       	push   $0xf013b53a
f011849d:	e8 63 7d fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f01184a2:	83 ec 0c             	sub    $0xc,%esp
f01184a5:	68 86 b6 13 f0       	push   $0xf013b686
f01184aa:	e8 5f 88 fe ff       	call   f0100d0e <cprintf>
f01184af:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01184b2:	e8 da 48 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01184b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01184ba:	e8 09 b9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01184bf:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f01184c2:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f01184c9:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f01184cc:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01184d2:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f01184d8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01184de:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01184e1:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f01184e3:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01184e9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01184ef:	01 c2                	add    %eax,%edx
f01184f1:	8a 45 f2             	mov    -0xe(%ebp),%al
f01184f4:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f01184f6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01184fc:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118502:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0118509:	fd 0f 00 
			shortArr[0] = minShort;
f011850c:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118512:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118515:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118518:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011851e:	01 c0                	add    %eax,%eax
f0118520:	89 c2                	mov    %eax,%edx
f0118522:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118528:	01 c2                	add    %eax,%edx
f011852a:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011852e:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118531:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118537:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f011853d:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0118544:	01 00 00 
			intArr[0] = minInt;
f0118547:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011854d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118550:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118552:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118558:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011855f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118565:	01 c2                	add    %eax,%edx
f0118567:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011856a:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f011856c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118572:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118578:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f011857f:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118582:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118588:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011858b:	88 10                	mov    %dl,(%eax)
f011858d:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0118593:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118596:	66 89 42 02          	mov    %ax,0x2(%edx)
f011859a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01185a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01185a3:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f01185a6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01185ac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01185b3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01185b9:	01 c2                	add    %eax,%edx
f01185bb:	8a 45 f2             	mov    -0xe(%ebp),%al
f01185be:	88 02                	mov    %al,(%edx)
f01185c0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01185c6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01185cd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01185d3:	01 c2                	add    %eax,%edx
f01185d5:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01185d9:	66 89 42 02          	mov    %ax,0x2(%edx)
f01185dd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01185e3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01185ea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01185f0:	01 c2                	add    %eax,%edx
f01185f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01185f5:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f01185f8:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01185ff:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118602:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118608:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f011860e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118614:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118617:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118619:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011861f:	89 c2                	mov    %eax,%edx
f0118621:	c1 ea 1f             	shr    $0x1f,%edx
f0118624:	01 d0                	add    %edx,%eax
f0118626:	d1 f8                	sar    %eax
f0118628:	89 c2                	mov    %eax,%edx
f011862a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118630:	01 c2                	add    %eax,%edx
f0118632:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118635:	88 c1                	mov    %al,%cl
f0118637:	c0 e9 07             	shr    $0x7,%cl
f011863a:	01 c8                	add    %ecx,%eax
f011863c:	d0 f8                	sar    %al
f011863e:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118640:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118646:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011864c:	01 c2                	add    %eax,%edx
f011864e:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118651:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118653:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118659:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011865f:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0118666:	1b 00 00 
			shortArr2[0] = minShort;
f0118669:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011866f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118672:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118675:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011867b:	01 c0                	add    %eax,%eax
f011867d:	89 c2                	mov    %eax,%edx
f011867f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118685:	01 c2                	add    %eax,%edx
f0118687:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011868b:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011868e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118694:	8a 00                	mov    (%eax),%al
f0118696:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118699:	75 15                	jne    f01186b0 <test_kmalloc+0xd34>
f011869b:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01186a1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01186a7:	01 d0                	add    %edx,%eax
f01186a9:	8a 00                	mov    (%eax),%al
f01186ab:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01186ae:	74 17                	je     f01186c7 <test_kmalloc+0xd4b>
f01186b0:	83 ec 04             	sub    $0x4,%esp
f01186b3:	68 90 b6 13 f0       	push   $0xf013b690
f01186b8:	68 b2 00 00 00       	push   $0xb2
f01186bd:	68 3a b5 13 f0       	push   $0xf013b53a
f01186c2:	e8 3e 7b fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01186c7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01186cd:	66 8b 00             	mov    (%eax),%ax
f01186d0:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01186d4:	75 1b                	jne    f01186f1 <test_kmalloc+0xd75>
f01186d6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01186dc:	01 c0                	add    %eax,%eax
f01186de:	89 c2                	mov    %eax,%edx
f01186e0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01186e6:	01 d0                	add    %edx,%eax
f01186e8:	66 8b 00             	mov    (%eax),%ax
f01186eb:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01186ef:	74 17                	je     f0118708 <test_kmalloc+0xd8c>
f01186f1:	83 ec 04             	sub    $0x4,%esp
f01186f4:	68 90 b6 13 f0       	push   $0xf013b690
f01186f9:	68 b3 00 00 00       	push   $0xb3
f01186fe:	68 3a b5 13 f0       	push   $0xf013b53a
f0118703:	e8 fd 7a fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118708:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011870e:	8b 00                	mov    (%eax),%eax
f0118710:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118713:	75 1c                	jne    f0118731 <test_kmalloc+0xdb5>
f0118715:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011871b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118722:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118728:	01 d0                	add    %edx,%eax
f011872a:	8b 00                	mov    (%eax),%eax
f011872c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011872f:	74 17                	je     f0118748 <test_kmalloc+0xdcc>
f0118731:	83 ec 04             	sub    $0x4,%esp
f0118734:	68 90 b6 13 f0       	push   $0xf013b690
f0118739:	68 b4 00 00 00       	push   $0xb4
f011873e:	68 3a b5 13 f0       	push   $0xf013b53a
f0118743:	e8 bd 7a fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118748:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011874e:	8a 00                	mov    (%eax),%al
f0118750:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118753:	75 1c                	jne    f0118771 <test_kmalloc+0xdf5>
f0118755:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011875b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118762:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118768:	01 d0                	add    %edx,%eax
f011876a:	8a 00                	mov    (%eax),%al
f011876c:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011876f:	74 17                	je     f0118788 <test_kmalloc+0xe0c>
f0118771:	83 ec 04             	sub    $0x4,%esp
f0118774:	68 90 b6 13 f0       	push   $0xf013b690
f0118779:	68 b6 00 00 00       	push   $0xb6
f011877e:	68 3a b5 13 f0       	push   $0xf013b53a
f0118783:	e8 7d 7a fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118788:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011878e:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118792:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118796:	75 1f                	jne    f01187b7 <test_kmalloc+0xe3b>
f0118798:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011879e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01187a5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01187ab:	01 d0                	add    %edx,%eax
f01187ad:	66 8b 40 02          	mov    0x2(%eax),%ax
f01187b1:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01187b5:	74 17                	je     f01187ce <test_kmalloc+0xe52>
f01187b7:	83 ec 04             	sub    $0x4,%esp
f01187ba:	68 90 b6 13 f0       	push   $0xf013b690
f01187bf:	68 b7 00 00 00       	push   $0xb7
f01187c4:	68 3a b5 13 f0       	push   $0xf013b53a
f01187c9:	e8 37 7a fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01187ce:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01187d4:	8b 40 04             	mov    0x4(%eax),%eax
f01187d7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01187da:	75 1d                	jne    f01187f9 <test_kmalloc+0xe7d>
f01187dc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01187e2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01187e9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01187ef:	01 d0                	add    %edx,%eax
f01187f1:	8b 40 04             	mov    0x4(%eax),%eax
f01187f4:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01187f7:	74 17                	je     f0118810 <test_kmalloc+0xe94>
f01187f9:	83 ec 04             	sub    $0x4,%esp
f01187fc:	68 90 b6 13 f0       	push   $0xf013b690
f0118801:	68 b8 00 00 00       	push   $0xb8
f0118806:	68 3a b5 13 f0       	push   $0xf013b53a
f011880b:	e8 f5 79 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118810:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118816:	8a 00                	mov    (%eax),%al
f0118818:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011881b:	75 40                	jne    f011885d <test_kmalloc+0xee1>
f011881d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118823:	89 c2                	mov    %eax,%edx
f0118825:	c1 ea 1f             	shr    $0x1f,%edx
f0118828:	01 d0                	add    %edx,%eax
f011882a:	d1 f8                	sar    %eax
f011882c:	89 c2                	mov    %eax,%edx
f011882e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118834:	01 d0                	add    %edx,%eax
f0118836:	8a 10                	mov    (%eax),%dl
f0118838:	8a 45 f2             	mov    -0xe(%ebp),%al
f011883b:	88 c1                	mov    %al,%cl
f011883d:	c0 e9 07             	shr    $0x7,%cl
f0118840:	01 c8                	add    %ecx,%eax
f0118842:	d0 f8                	sar    %al
f0118844:	38 c2                	cmp    %al,%dl
f0118846:	75 15                	jne    f011885d <test_kmalloc+0xee1>
f0118848:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f011884e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118854:	01 d0                	add    %edx,%eax
f0118856:	8a 00                	mov    (%eax),%al
f0118858:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011885b:	74 17                	je     f0118874 <test_kmalloc+0xef8>
f011885d:	83 ec 04             	sub    $0x4,%esp
f0118860:	68 90 b6 13 f0       	push   $0xf013b690
f0118865:	68 ba 00 00 00       	push   $0xba
f011886a:	68 3a b5 13 f0       	push   $0xf013b53a
f011886f:	e8 91 79 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118874:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011887a:	66 8b 00             	mov    (%eax),%ax
f011887d:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118881:	75 1b                	jne    f011889e <test_kmalloc+0xf22>
f0118883:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118889:	01 c0                	add    %eax,%eax
f011888b:	89 c2                	mov    %eax,%edx
f011888d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118893:	01 d0                	add    %edx,%eax
f0118895:	66 8b 00             	mov    (%eax),%ax
f0118898:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011889c:	74 17                	je     f01188b5 <test_kmalloc+0xf39>
f011889e:	83 ec 04             	sub    $0x4,%esp
f01188a1:	68 90 b6 13 f0       	push   $0xf013b690
f01188a6:	68 bb 00 00 00       	push   $0xbb
f01188ab:	68 3a b5 13 f0       	push   $0xf013b53a
f01188b0:	e8 50 79 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01188b5:	e8 d7 44 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01188ba:	89 c2                	mov    %eax,%edx
f01188bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01188bf:	39 c2                	cmp    %eax,%edx
f01188c1:	74 17                	je     f01188da <test_kmalloc+0xf5e>
f01188c3:	83 ec 04             	sub    $0x4,%esp
f01188c6:	68 bc b5 13 f0       	push   $0xf013b5bc
f01188cb:	68 bd 00 00 00       	push   $0xbd
f01188d0:	68 3a b5 13 f0       	push   $0xf013b53a
f01188d5:	e8 2b 79 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01188da:	e8 e9 b4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01188df:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01188e2:	74 17                	je     f01188fb <test_kmalloc+0xf7f>
f01188e4:	83 ec 04             	sub    $0x4,%esp
f01188e7:	68 54 b5 13 f0       	push   $0xf013b554
f01188ec:	68 be 00 00 00       	push   $0xbe
f01188f1:	68 3a b5 13 f0       	push   $0xf013b53a
f01188f6:	e8 0a 79 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f01188fb:	83 ec 0c             	sub    $0xc,%esp
f01188fe:	68 c5 b6 13 f0       	push   $0xf013b6c5
f0118903:	e8 06 84 fe ff       	call   f0100d0e <cprintf>
f0118908:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f011890b:	e8 81 44 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0118910:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118913:	e8 b0 b4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118918:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f011891b:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118922:	10 00 00 
f0118925:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011892b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118930:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118936:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011893c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118941:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118947:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011894d:	29 d0                	sub    %edx,%eax
f011894f:	89 c1                	mov    %eax,%ecx
f0118951:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118958:	10 00 00 
f011895b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118960:	0f b6 d0             	movzbl %al,%edx
f0118963:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118969:	01 d0                	add    %edx,%eax
f011896b:	48                   	dec    %eax
f011896c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118972:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118978:	ba 00 00 00 00       	mov    $0x0,%edx
f011897d:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118983:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118989:	29 d0                	sub    %edx,%eax
f011898b:	01 c1                	add    %eax,%ecx
f011898d:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118994:	10 00 00 
f0118997:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011899c:	0f b6 c0             	movzbl %al,%eax
f011899f:	c1 e0 04             	shl    $0x4,%eax
f01189a2:	89 c2                	mov    %eax,%edx
f01189a4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01189aa:	01 d0                	add    %edx,%eax
f01189ac:	48                   	dec    %eax
f01189ad:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f01189b3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01189b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01189be:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f01189c4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01189ca:	29 d0                	sub    %edx,%eax
f01189cc:	01 c8                	add    %ecx,%eax
f01189ce:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f01189d3:	29 c2                	sub    %eax,%edx
f01189d5:	89 d0                	mov    %edx,%eax
f01189d7:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f01189dd:	83 ec 0c             	sub    $0xc,%esp
f01189e0:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f01189e6:	e8 8f f0 fe ff       	call   f0107a7a <kmalloc>
f01189eb:	83 c4 10             	add    $0x10,%esp
f01189ee:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f01189f4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01189fa:	85 c0                	test   %eax,%eax
f01189fc:	74 17                	je     f0118a15 <test_kmalloc+0x1099>
f01189fe:	83 ec 04             	sub    $0x4,%esp
f0118a01:	68 08 b5 13 f0       	push   $0xf013b508
f0118a06:	68 c8 00 00 00       	push   $0xc8
f0118a0b:	68 3a b5 13 f0       	push   $0xf013b53a
f0118a10:	e8 f0 77 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a15:	e8 ae b3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118a1a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118a1d:	74 17                	je     f0118a36 <test_kmalloc+0x10ba>
f0118a1f:	83 ec 04             	sub    $0x4,%esp
f0118a22:	68 54 b5 13 f0       	push   $0xf013b554
f0118a27:	68 c9 00 00 00       	push   $0xc9
f0118a2c:	68 3a b5 13 f0       	push   $0xf013b53a
f0118a31:	e8 cf 77 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118a36:	e8 56 43 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0118a3b:	89 c2                	mov    %eax,%edx
f0118a3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118a40:	39 c2                	cmp    %eax,%edx
f0118a42:	74 17                	je     f0118a5b <test_kmalloc+0x10df>
f0118a44:	83 ec 04             	sub    $0x4,%esp
f0118a47:	68 bc b5 13 f0       	push   $0xf013b5bc
f0118a4c:	68 ca 00 00 00       	push   $0xca
f0118a51:	68 3a b5 13 f0       	push   $0xf013b53a
f0118a56:	e8 aa 77 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118a5b:	83 ec 0c             	sub    $0xc,%esp
f0118a5e:	68 cc b6 13 f0       	push   $0xf013b6cc
f0118a63:	e8 a6 82 fe ff       	call   f0100d0e <cprintf>
f0118a68:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118a6b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118a71:	05 00 40 00 00       	add    $0x4000,%eax
f0118a76:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118a7c:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118a83:	10 00 00 
f0118a86:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118a8c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a91:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0118a97:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118a9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aa2:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118aa8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118aae:	29 d0                	sub    %edx,%eax
f0118ab0:	89 c1                	mov    %eax,%ecx
f0118ab2:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0118ab9:	10 00 00 
f0118abc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118ac1:	0f b6 d0             	movzbl %al,%edx
f0118ac4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118aca:	01 d0                	add    %edx,%eax
f0118acc:	48                   	dec    %eax
f0118acd:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118ad3:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118ad9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ade:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118ae4:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118aea:	29 d0                	sub    %edx,%eax
f0118aec:	01 c1                	add    %eax,%ecx
f0118aee:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118af5:	10 00 00 
f0118af8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118afd:	0f b6 c0             	movzbl %al,%eax
f0118b00:	c1 e0 04             	shl    $0x4,%eax
f0118b03:	89 c2                	mov    %eax,%edx
f0118b05:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118b0b:	01 d0                	add    %edx,%eax
f0118b0d:	48                   	dec    %eax
f0118b0e:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118b14:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118b1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b1f:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118b25:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118b2b:	29 d0                	sub    %edx,%eax
f0118b2d:	01 c8                	add    %ecx,%eax
f0118b2f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118b34:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118b37:	eb 6a                	jmp    f0118ba3 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118b39:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0118b3e:	83 ec 04             	sub    $0x4,%esp
f0118b41:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0118b47:	52                   	push   %edx
f0118b48:	ff 75 f4             	pushl  -0xc(%ebp)
f0118b4b:	50                   	push   %eax
f0118b4c:	e8 60 df fe ff       	call   f0106ab1 <get_page_table>
f0118b51:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118b54:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118b5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118b5d:	c1 ea 0c             	shr    $0xc,%edx
f0118b60:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118b66:	c1 e2 02             	shl    $0x2,%edx
f0118b69:	01 d0                	add    %edx,%eax
f0118b6b:	8b 00                	mov    (%eax),%eax
f0118b6d:	25 ff 0f 00 00       	and    $0xfff,%eax
f0118b72:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0118b78:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118b7e:	83 e0 04             	and    $0x4,%eax
f0118b81:	85 c0                	test   %eax,%eax
f0118b83:	74 17                	je     f0118b9c <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0118b85:	83 ec 04             	sub    $0x4,%esp
f0118b88:	68 d4 b6 13 f0       	push   $0xf013b6d4
f0118b8d:	68 d7 00 00 00       	push   $0xd7
f0118b92:	68 3a b5 13 f0       	push   $0xf013b53a
f0118b97:	e8 69 76 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118b9c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118ba6:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0118bac:	72 8b                	jb     f0118b39 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0118bae:	83 ec 0c             	sub    $0xc,%esp
f0118bb1:	68 1e b7 13 f0       	push   $0xf013b71e
f0118bb6:	e8 53 81 fe ff       	call   f0100d0e <cprintf>
f0118bbb:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0118bbe:	83 ec 0c             	sub    $0xc,%esp
f0118bc1:	68 28 b7 13 f0       	push   $0xf013b728
f0118bc6:	e8 43 81 fe ff       	call   f0100d0e <cprintf>
f0118bcb:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118bce:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118bd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118bd6:	5b                   	pop    %ebx
f0118bd7:	5f                   	pop    %edi
f0118bd8:	5d                   	pop    %ebp
f0118bd9:	c3                   	ret    

f0118bda <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0118bda:	55                   	push   %ebp
f0118bdb:	89 e5                	mov    %esp,%ebp
f0118bdd:	57                   	push   %edi
f0118bde:	53                   	push   %ebx
f0118bdf:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0118be5:	83 ec 0c             	sub    $0xc,%esp
f0118be8:	68 7c b4 13 f0       	push   $0xf013b47c
f0118bed:	e8 1c 81 fe ff       	call   f0100d0e <cprintf>
f0118bf2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118bf5:	83 ec 0c             	sub    $0xc,%esp
f0118bf8:	68 ac b4 13 f0       	push   $0xf013b4ac
f0118bfd:	e8 0c 81 fe ff       	call   f0100d0e <cprintf>
f0118c02:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118c05:	83 ec 0c             	sub    $0xc,%esp
f0118c08:	68 7c b4 13 f0       	push   $0xf013b47c
f0118c0d:	e8 fc 80 fe ff       	call   f0100d0e <cprintf>
f0118c12:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118c15:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0118c1b:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118c20:	b8 00 00 00 00       	mov    $0x0,%eax
f0118c25:	89 d7                	mov    %edx,%edi
f0118c27:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0118c29:	83 ec 0c             	sub    $0xc,%esp
f0118c2c:	68 64 b7 13 f0       	push   $0xf013b764
f0118c31:	e8 d8 80 fe ff       	call   f0100d0e <cprintf>
f0118c36:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0118c39:	e8 53 41 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0118c3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0118c41:	e8 82 b1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0118c46:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118c49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118c50:	eb 1f                	jmp    f0118c71 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0118c52:	83 ec 0c             	sub    $0xc,%esp
f0118c55:	68 00 00 20 00       	push   $0x200000
f0118c5a:	e8 1b ee fe ff       	call   f0107a7a <kmalloc>
f0118c5f:	83 c4 10             	add    $0x10,%esp
f0118c62:	89 c2                	mov    %eax,%edx
f0118c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118c67:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0118c6e:	ff 45 f4             	incl   -0xc(%ebp)
f0118c71:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0118c75:	7e db                	jle    f0118c52 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0118c77:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0118c7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118c81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118c86:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0118c89:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118c8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c91:	f7 75 e8             	divl   -0x18(%ebp)
f0118c94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118c97:	29 d0                	sub    %edx,%eax
f0118c99:	89 c1                	mov    %eax,%ecx
f0118c9b:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118ca2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118ca7:	0f b6 d0             	movzbl %al,%edx
f0118caa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118cad:	01 d0                	add    %edx,%eax
f0118caf:	48                   	dec    %eax
f0118cb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118cb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118cb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cbb:	f7 75 e0             	divl   -0x20(%ebp)
f0118cbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118cc1:	29 d0                	sub    %edx,%eax
f0118cc3:	01 c1                	add    %eax,%ecx
f0118cc5:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0118ccc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118cd1:	0f b6 c0             	movzbl %al,%eax
f0118cd4:	c1 e0 04             	shl    $0x4,%eax
f0118cd7:	89 c2                	mov    %eax,%edx
f0118cd9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118cdc:	01 d0                	add    %edx,%eax
f0118cde:	48                   	dec    %eax
f0118cdf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118ce2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118ce5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cea:	f7 75 d8             	divl   -0x28(%ebp)
f0118ced:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118cf0:	29 d0                	sub    %edx,%eax
f0118cf2:	01 c8                	add    %ecx,%eax
f0118cf4:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0118cf9:	29 c2                	sub    %eax,%edx
f0118cfb:	89 d0                	mov    %edx,%eax
f0118cfd:	83 ec 0c             	sub    $0xc,%esp
f0118d00:	50                   	push   %eax
f0118d01:	e8 74 ed fe ff       	call   f0107a7a <kmalloc>
f0118d06:	83 c4 10             	add    $0x10,%esp
f0118d09:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118d0f:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118d15:	89 c1                	mov    %eax,%ecx
f0118d17:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0118d1e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118d21:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d26:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0118d29:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118d2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d31:	f7 75 d0             	divl   -0x30(%ebp)
f0118d34:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118d37:	29 d0                	sub    %edx,%eax
f0118d39:	89 c3                	mov    %eax,%ebx
f0118d3b:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0118d42:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118d47:	0f b6 d0             	movzbl %al,%edx
f0118d4a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118d4d:	01 d0                	add    %edx,%eax
f0118d4f:	48                   	dec    %eax
f0118d50:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0118d53:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118d56:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d5b:	f7 75 c8             	divl   -0x38(%ebp)
f0118d5e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118d61:	29 d0                	sub    %edx,%eax
f0118d63:	01 c3                	add    %eax,%ebx
f0118d65:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118d6c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118d71:	0f b6 c0             	movzbl %al,%eax
f0118d74:	c1 e0 04             	shl    $0x4,%eax
f0118d77:	89 c2                	mov    %eax,%edx
f0118d79:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118d7c:	01 d0                	add    %edx,%eax
f0118d7e:	48                   	dec    %eax
f0118d7f:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118d82:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d8a:	f7 75 c0             	divl   -0x40(%ebp)
f0118d8d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118d90:	29 d0                	sub    %edx,%eax
f0118d92:	01 d8                	add    %ebx,%eax
f0118d94:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118d99:	39 c1                	cmp    %eax,%ecx
f0118d9b:	0f 85 ed 04 00 00    	jne    f011928e <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118da1:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118da7:	89 c1                	mov    %eax,%ecx
f0118da9:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118db0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118db3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118db8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118dbb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118dbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dc3:	f7 75 b8             	divl   -0x48(%ebp)
f0118dc6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118dc9:	29 d0                	sub    %edx,%eax
f0118dcb:	89 c3                	mov    %eax,%ebx
f0118dcd:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118dd4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118dd9:	0f b6 d0             	movzbl %al,%edx
f0118ddc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118ddf:	01 d0                	add    %edx,%eax
f0118de1:	48                   	dec    %eax
f0118de2:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118de5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118de8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ded:	f7 75 b0             	divl   -0x50(%ebp)
f0118df0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118df3:	29 d0                	sub    %edx,%eax
f0118df5:	01 c3                	add    %eax,%ebx
f0118df7:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118dfe:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118e03:	0f b6 c0             	movzbl %al,%eax
f0118e06:	c1 e0 04             	shl    $0x4,%eax
f0118e09:	89 c2                	mov    %eax,%edx
f0118e0b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118e0e:	01 d0                	add    %edx,%eax
f0118e10:	48                   	dec    %eax
f0118e11:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118e14:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118e17:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e1c:	f7 75 a8             	divl   -0x58(%ebp)
f0118e1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118e22:	29 d0                	sub    %edx,%eax
f0118e24:	01 d8                	add    %ebx,%eax
f0118e26:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118e2b:	39 c1                	cmp    %eax,%ecx
f0118e2d:	0f 85 5b 04 00 00    	jne    f011928e <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118e33:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118e39:	89 c1                	mov    %eax,%ecx
f0118e3b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118e42:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118e45:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e4a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118e4d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118e50:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e55:	f7 75 a0             	divl   -0x60(%ebp)
f0118e58:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118e5b:	29 d0                	sub    %edx,%eax
f0118e5d:	89 c3                	mov    %eax,%ebx
f0118e5f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118e66:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118e6b:	0f b6 d0             	movzbl %al,%edx
f0118e6e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118e71:	01 d0                	add    %edx,%eax
f0118e73:	48                   	dec    %eax
f0118e74:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118e77:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118e7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e7f:	f7 75 98             	divl   -0x68(%ebp)
f0118e82:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118e85:	29 d0                	sub    %edx,%eax
f0118e87:	01 c3                	add    %eax,%ebx
f0118e89:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118e90:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118e95:	0f b6 c0             	movzbl %al,%eax
f0118e98:	c1 e0 04             	shl    $0x4,%eax
f0118e9b:	89 c2                	mov    %eax,%edx
f0118e9d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118ea0:	01 d0                	add    %edx,%eax
f0118ea2:	48                   	dec    %eax
f0118ea3:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118ea6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118ea9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eae:	f7 75 90             	divl   -0x70(%ebp)
f0118eb1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118eb4:	29 d0                	sub    %edx,%eax
f0118eb6:	01 d8                	add    %ebx,%eax
f0118eb8:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118ebd:	39 c1                	cmp    %eax,%ecx
f0118ebf:	0f 85 c9 03 00 00    	jne    f011928e <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118ec5:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118ecb:	89 c1                	mov    %eax,%ecx
f0118ecd:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118ed4:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118ed7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118edc:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118edf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118ee2:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ee7:	f7 75 88             	divl   -0x78(%ebp)
f0118eea:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118eed:	29 d0                	sub    %edx,%eax
f0118eef:	89 c3                	mov    %eax,%ebx
f0118ef1:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118ef8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118efd:	0f b6 d0             	movzbl %al,%edx
f0118f00:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118f03:	01 d0                	add    %edx,%eax
f0118f05:	48                   	dec    %eax
f0118f06:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118f0c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118f12:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f17:	f7 75 80             	divl   -0x80(%ebp)
f0118f1a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118f20:	29 d0                	sub    %edx,%eax
f0118f22:	01 c3                	add    %eax,%ebx
f0118f24:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118f2b:	10 00 00 
f0118f2e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118f33:	0f b6 c0             	movzbl %al,%eax
f0118f36:	c1 e0 04             	shl    $0x4,%eax
f0118f39:	89 c2                	mov    %eax,%edx
f0118f3b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118f41:	01 d0                	add    %edx,%eax
f0118f43:	48                   	dec    %eax
f0118f44:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118f4a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118f50:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f55:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118f5b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118f61:	29 d0                	sub    %edx,%eax
f0118f63:	01 d8                	add    %ebx,%eax
f0118f65:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118f6a:	39 c1                	cmp    %eax,%ecx
f0118f6c:	0f 85 1c 03 00 00    	jne    f011928e <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0118f72:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118f78:	89 c1                	mov    %eax,%ecx
f0118f7a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118f81:	10 00 00 
f0118f84:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118f8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f8f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118f95:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118f9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fa0:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118fa6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118fac:	29 d0                	sub    %edx,%eax
f0118fae:	89 c3                	mov    %eax,%ebx
f0118fb0:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118fb7:	10 00 00 
f0118fba:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118fbf:	0f b6 d0             	movzbl %al,%edx
f0118fc2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118fc8:	01 d0                	add    %edx,%eax
f0118fca:	48                   	dec    %eax
f0118fcb:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118fd1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118fd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fdc:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118fe2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118fe8:	29 d0                	sub    %edx,%eax
f0118fea:	01 c3                	add    %eax,%ebx
f0118fec:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118ff3:	10 00 00 
f0118ff6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0118ffb:	0f b6 c0             	movzbl %al,%eax
f0118ffe:	c1 e0 04             	shl    $0x4,%eax
f0119001:	89 c2                	mov    %eax,%edx
f0119003:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119009:	01 d0                	add    %edx,%eax
f011900b:	48                   	dec    %eax
f011900c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119012:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119018:	ba 00 00 00 00       	mov    $0x0,%edx
f011901d:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119023:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119029:	29 d0                	sub    %edx,%eax
f011902b:	01 d8                	add    %ebx,%eax
f011902d:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119032:	39 c1                	cmp    %eax,%ecx
f0119034:	0f 85 54 02 00 00    	jne    f011928e <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011903a:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119040:	89 c1                	mov    %eax,%ecx
f0119042:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0119049:	10 00 00 
f011904c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119052:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119057:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011905d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119063:	ba 00 00 00 00       	mov    $0x0,%edx
f0119068:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011906e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119074:	29 d0                	sub    %edx,%eax
f0119076:	89 c3                	mov    %eax,%ebx
f0119078:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011907f:	10 00 00 
f0119082:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119087:	0f b6 d0             	movzbl %al,%edx
f011908a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119090:	01 d0                	add    %edx,%eax
f0119092:	48                   	dec    %eax
f0119093:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0119099:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011909f:	ba 00 00 00 00       	mov    $0x0,%edx
f01190a4:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01190aa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01190b0:	29 d0                	sub    %edx,%eax
f01190b2:	01 c3                	add    %eax,%ebx
f01190b4:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01190bb:	10 00 00 
f01190be:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01190c3:	0f b6 c0             	movzbl %al,%eax
f01190c6:	c1 e0 04             	shl    $0x4,%eax
f01190c9:	89 c2                	mov    %eax,%edx
f01190cb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01190d1:	01 d0                	add    %edx,%eax
f01190d3:	48                   	dec    %eax
f01190d4:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01190da:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01190e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01190e5:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01190eb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01190f1:	29 d0                	sub    %edx,%eax
f01190f3:	01 d8                	add    %ebx,%eax
f01190f5:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01190fa:	39 c1                	cmp    %eax,%ecx
f01190fc:	0f 85 8c 01 00 00    	jne    f011928e <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119102:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119108:	89 c1                	mov    %eax,%ecx
f011910a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119111:	10 00 00 
f0119114:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011911a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011911f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119125:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011912b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119130:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119136:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011913c:	29 d0                	sub    %edx,%eax
f011913e:	89 c3                	mov    %eax,%ebx
f0119140:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0119147:	10 00 00 
f011914a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011914f:	0f b6 d0             	movzbl %al,%edx
f0119152:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119158:	01 d0                	add    %edx,%eax
f011915a:	48                   	dec    %eax
f011915b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0119161:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119167:	ba 00 00 00 00       	mov    $0x0,%edx
f011916c:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0119172:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119178:	29 d0                	sub    %edx,%eax
f011917a:	01 c3                	add    %eax,%ebx
f011917c:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0119183:	10 00 00 
f0119186:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011918b:	0f b6 c0             	movzbl %al,%eax
f011918e:	c1 e0 04             	shl    $0x4,%eax
f0119191:	89 c2                	mov    %eax,%edx
f0119193:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119199:	01 d0                	add    %edx,%eax
f011919b:	48                   	dec    %eax
f011919c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01191a2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01191a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01191ad:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01191b3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01191b9:	29 d0                	sub    %edx,%eax
f01191bb:	01 d8                	add    %ebx,%eax
f01191bd:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01191c2:	39 c1                	cmp    %eax,%ecx
f01191c4:	0f 85 c4 00 00 00    	jne    f011928e <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01191ca:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01191d0:	89 c1                	mov    %eax,%ecx
f01191d2:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01191d9:	10 00 00 
f01191dc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01191e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01191e7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01191ed:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01191f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01191f8:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01191fe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119204:	29 d0                	sub    %edx,%eax
f0119206:	89 c3                	mov    %eax,%ebx
f0119208:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011920f:	10 00 00 
f0119212:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119217:	0f b6 d0             	movzbl %al,%edx
f011921a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119220:	01 d0                	add    %edx,%eax
f0119222:	48                   	dec    %eax
f0119223:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0119229:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011922f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119234:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011923a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119240:	29 d0                	sub    %edx,%eax
f0119242:	01 c3                	add    %eax,%ebx
f0119244:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011924b:	10 00 00 
f011924e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119253:	0f b6 c0             	movzbl %al,%eax
f0119256:	c1 e0 04             	shl    $0x4,%eax
f0119259:	89 c2                	mov    %eax,%edx
f011925b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119261:	01 d0                	add    %edx,%eax
f0119263:	48                   	dec    %eax
f0119264:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011926a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119270:	ba 00 00 00 00       	mov    $0x0,%edx
f0119275:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011927b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119281:	29 d0                	sub    %edx,%eax
f0119283:	01 d8                	add    %ebx,%eax
f0119285:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011928a:	39 c1                	cmp    %eax,%ecx
f011928c:	74 17                	je     f01192a5 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f011928e:	83 ec 04             	sub    $0x4,%esp
f0119291:	68 b4 b7 13 f0       	push   $0xf013b7b4
f0119296:	68 03 01 00 00       	push   $0x103
f011929b:	68 3a b5 13 f0       	push   $0xf013b53a
f01192a0:	e8 60 6f fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01192a5:	e8 1e ab fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01192aa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01192ad:	74 17                	je     f01192c6 <test_kmalloc_nextfit+0x6ec>
f01192af:	83 ec 04             	sub    $0x4,%esp
f01192b2:	68 54 b5 13 f0       	push   $0xf013b554
f01192b7:	68 05 01 00 00       	push   $0x105
f01192bc:	68 3a b5 13 f0       	push   $0xf013b53a
f01192c1:	e8 3f 6f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01192c6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01192c9:	e8 c3 3a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01192ce:	29 c3                	sub    %eax,%ebx
f01192d0:	89 d9                	mov    %ebx,%ecx
f01192d2:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01192d9:	10 00 00 
f01192dc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01192e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01192e7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01192ed:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01192f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01192f8:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01192fe:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119304:	29 d0                	sub    %edx,%eax
f0119306:	89 c3                	mov    %eax,%ebx
f0119308:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011930f:	10 00 00 
f0119312:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119317:	0f b6 d0             	movzbl %al,%edx
f011931a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119320:	01 d0                	add    %edx,%eax
f0119322:	48                   	dec    %eax
f0119323:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0119329:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011932f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119334:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011933a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119340:	29 d0                	sub    %edx,%eax
f0119342:	01 c3                	add    %eax,%ebx
f0119344:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011934b:	10 00 00 
f011934e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119353:	0f b6 c0             	movzbl %al,%eax
f0119356:	c1 e0 04             	shl    $0x4,%eax
f0119359:	89 c2                	mov    %eax,%edx
f011935b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119361:	01 d0                	add    %edx,%eax
f0119363:	48                   	dec    %eax
f0119364:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011936a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119370:	ba 00 00 00 00       	mov    $0x0,%edx
f0119375:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011937b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119381:	29 d0                	sub    %edx,%eax
f0119383:	01 d8                	add    %ebx,%eax
f0119385:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f011938a:	29 c2                	sub    %eax,%edx
f011938c:	89 d0                	mov    %edx,%eax
f011938e:	c1 e8 0c             	shr    $0xc,%eax
f0119391:	39 c1                	cmp    %eax,%ecx
f0119393:	74 17                	je     f01193ac <test_kmalloc_nextfit+0x7d2>
f0119395:	83 ec 04             	sub    $0x4,%esp
f0119398:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011939d:	68 06 01 00 00       	push   $0x106
f01193a2:	68 3a b5 13 f0       	push   $0xf013b53a
f01193a7:	e8 59 6e fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01193ac:	e8 17 aa fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01193b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01193b4:	e8 d8 39 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01193b9:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01193bc:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01193c2:	83 ec 0c             	sub    $0xc,%esp
f01193c5:	50                   	push   %eax
f01193c6:	e8 7a e7 fe ff       	call   f0107b45 <kfree>
f01193cb:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01193ce:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01193d4:	83 ec 0c             	sub    $0xc,%esp
f01193d7:	50                   	push   %eax
f01193d8:	e8 68 e7 fe ff       	call   f0107b45 <kfree>
f01193dd:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01193e0:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f01193e6:	83 ec 0c             	sub    $0xc,%esp
f01193e9:	50                   	push   %eax
f01193ea:	e8 56 e7 fe ff       	call   f0107b45 <kfree>
f01193ef:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01193f2:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f01193f8:	83 ec 0c             	sub    $0xc,%esp
f01193fb:	50                   	push   %eax
f01193fc:	e8 44 e7 fe ff       	call   f0107b45 <kfree>
f0119401:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119404:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f011940a:	83 ec 0c             	sub    $0xc,%esp
f011940d:	50                   	push   %eax
f011940e:	e8 32 e7 fe ff       	call   f0107b45 <kfree>
f0119413:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119416:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f011941c:	83 ec 0c             	sub    $0xc,%esp
f011941f:	50                   	push   %eax
f0119420:	e8 20 e7 fe ff       	call   f0107b45 <kfree>
f0119425:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119428:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011942e:	83 ec 0c             	sub    $0xc,%esp
f0119431:	50                   	push   %eax
f0119432:	e8 0e e7 fe ff       	call   f0107b45 <kfree>
f0119437:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f011943a:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119440:	83 ec 0c             	sub    $0xc,%esp
f0119443:	50                   	push   %eax
f0119444:	e8 fc e6 fe ff       	call   f0107b45 <kfree>
f0119449:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f011944c:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119452:	83 ec 0c             	sub    $0xc,%esp
f0119455:	50                   	push   %eax
f0119456:	e8 ea e6 fe ff       	call   f0107b45 <kfree>
f011945b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f011945e:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0119464:	83 ec 0c             	sub    $0xc,%esp
f0119467:	50                   	push   %eax
f0119468:	e8 d8 e6 fe ff       	call   f0107b45 <kfree>
f011946d:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119470:	e8 53 a9 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119475:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119478:	74 17                	je     f0119491 <test_kmalloc_nextfit+0x8b7>
f011947a:	83 ec 04             	sub    $0x4,%esp
f011947d:	68 54 b5 13 f0       	push   $0xf013b554
f0119482:	68 17 01 00 00       	push   $0x117
f0119487:	68 3a b5 13 f0       	push   $0xf013b53a
f011948c:	e8 74 6d fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119491:	e8 fb 38 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119496:	89 c2                	mov    %eax,%edx
f0119498:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011949b:	89 d1                	mov    %edx,%ecx
f011949d:	29 c1                	sub    %eax,%ecx
f011949f:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01194a6:	10 00 00 
f01194a9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01194af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01194b4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01194ba:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01194c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01194c5:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01194cb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01194d1:	29 d0                	sub    %edx,%eax
f01194d3:	89 c3                	mov    %eax,%ebx
f01194d5:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01194dc:	10 00 00 
f01194df:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01194e4:	0f b6 d0             	movzbl %al,%edx
f01194e7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01194ed:	01 d0                	add    %edx,%eax
f01194ef:	48                   	dec    %eax
f01194f0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01194f6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01194fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0119501:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119507:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011950d:	29 d0                	sub    %edx,%eax
f011950f:	01 c3                	add    %eax,%ebx
f0119511:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0119518:	10 00 00 
f011951b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119520:	0f b6 c0             	movzbl %al,%eax
f0119523:	c1 e0 04             	shl    $0x4,%eax
f0119526:	89 c2                	mov    %eax,%edx
f0119528:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011952e:	01 d0                	add    %edx,%eax
f0119530:	48                   	dec    %eax
f0119531:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0119537:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011953d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119542:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0119548:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011954e:	29 d0                	sub    %edx,%eax
f0119550:	01 d8                	add    %ebx,%eax
f0119552:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119557:	29 c2                	sub    %eax,%edx
f0119559:	89 d0                	mov    %edx,%eax
f011955b:	c1 e8 0c             	shr    $0xc,%eax
f011955e:	39 c1                	cmp    %eax,%ecx
f0119560:	74 17                	je     f0119579 <test_kmalloc_nextfit+0x99f>
f0119562:	83 ec 04             	sub    $0x4,%esp
f0119565:	68 08 b8 13 f0       	push   $0xf013b808
f011956a:	68 18 01 00 00       	push   $0x118
f011956f:	68 3a b5 13 f0       	push   $0xf013b53a
f0119574:	e8 8c 6c fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119579:	e8 4a a8 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011957e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119581:	e8 0b 38 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119586:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119589:	83 ec 0c             	sub    $0xc,%esp
f011958c:	68 00 fc 0f 00       	push   $0xffc00
f0119591:	e8 e4 e4 fe ff       	call   f0107a7a <kmalloc>
f0119596:	83 c4 10             	add    $0x10,%esp
f0119599:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011959f:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01195a6:	10 00 00 
f01195a9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01195af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195b4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01195ba:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01195c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01195c5:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01195cb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01195d1:	29 d0                	sub    %edx,%eax
f01195d3:	89 c1                	mov    %eax,%ecx
f01195d5:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01195dc:	10 00 00 
f01195df:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01195e4:	0f b6 d0             	movzbl %al,%edx
f01195e7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01195ed:	01 d0                	add    %edx,%eax
f01195ef:	48                   	dec    %eax
f01195f0:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01195f6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01195fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0119601:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119607:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011960d:	29 d0                	sub    %edx,%eax
f011960f:	01 c1                	add    %eax,%ecx
f0119611:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119618:	10 00 00 
f011961b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119620:	0f b6 c0             	movzbl %al,%eax
f0119623:	c1 e0 04             	shl    $0x4,%eax
f0119626:	89 c2                	mov    %eax,%edx
f0119628:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011962e:	01 d0                	add    %edx,%eax
f0119630:	48                   	dec    %eax
f0119631:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119637:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011963d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119642:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119648:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011964e:	29 d0                	sub    %edx,%eax
f0119650:	01 c8                	add    %ecx,%eax
f0119652:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119658:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011965e:	39 c2                	cmp    %eax,%edx
f0119660:	74 17                	je     f0119679 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0119662:	83 ec 04             	sub    $0x4,%esp
f0119665:	68 48 b8 13 f0       	push   $0xf013b848
f011966a:	68 1f 01 00 00       	push   $0x11f
f011966f:	68 3a b5 13 f0       	push   $0xf013b53a
f0119674:	e8 8c 6b fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119679:	e8 4a a7 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011967e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119681:	74 17                	je     f011969a <test_kmalloc_nextfit+0xac0>
f0119683:	83 ec 04             	sub    $0x4,%esp
f0119686:	68 54 b5 13 f0       	push   $0xf013b554
f011968b:	68 20 01 00 00       	push   $0x120
f0119690:	68 3a b5 13 f0       	push   $0xf013b53a
f0119695:	e8 6b 6b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011969a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011969d:	e8 ef 36 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01196a2:	29 c3                	sub    %eax,%ebx
f01196a4:	89 d8                	mov    %ebx,%eax
f01196a6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01196ab:	74 17                	je     f01196c4 <test_kmalloc_nextfit+0xaea>
f01196ad:	83 ec 04             	sub    $0x4,%esp
f01196b0:	68 f7 b7 13 f0       	push   $0xf013b7f7
f01196b5:	68 21 01 00 00       	push   $0x121
f01196ba:	68 3a b5 13 f0       	push   $0xf013b53a
f01196bf:	e8 41 6b fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01196c4:	e8 ff a6 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01196c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01196cc:	e8 c0 36 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01196d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01196d4:	83 ec 0c             	sub    $0xc,%esp
f01196d7:	68 00 04 00 00       	push   $0x400
f01196dc:	e8 99 e3 fe ff       	call   f0107a7a <kmalloc>
f01196e1:	83 c4 10             	add    $0x10,%esp
f01196e4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f01196ea:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01196f1:	10 00 00 
f01196f4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01196fa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196ff:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119705:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011970b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119710:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119716:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011971c:	29 d0                	sub    %edx,%eax
f011971e:	89 c1                	mov    %eax,%ecx
f0119720:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119727:	10 00 00 
f011972a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011972f:	0f b6 d0             	movzbl %al,%edx
f0119732:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0119738:	01 d0                	add    %edx,%eax
f011973a:	48                   	dec    %eax
f011973b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119741:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119747:	ba 00 00 00 00       	mov    $0x0,%edx
f011974c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119752:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119758:	29 d0                	sub    %edx,%eax
f011975a:	01 c1                	add    %eax,%ecx
f011975c:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119763:	10 00 00 
f0119766:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011976b:	0f b6 c0             	movzbl %al,%eax
f011976e:	c1 e0 04             	shl    $0x4,%eax
f0119771:	89 c2                	mov    %eax,%edx
f0119773:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119779:	01 d0                	add    %edx,%eax
f011977b:	48                   	dec    %eax
f011977c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0119782:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119788:	ba 00 00 00 00       	mov    $0x0,%edx
f011978d:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0119793:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119799:	29 d0                	sub    %edx,%eax
f011979b:	01 c8                	add    %ecx,%eax
f011979d:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f01197a3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01197a9:	39 c2                	cmp    %eax,%edx
f01197ab:	74 17                	je     f01197c4 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f01197ad:	83 ec 04             	sub    $0x4,%esp
f01197b0:	68 48 b8 13 f0       	push   $0xf013b848
f01197b5:	68 27 01 00 00       	push   $0x127
f01197ba:	68 3a b5 13 f0       	push   $0xf013b53a
f01197bf:	e8 41 6a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197c4:	e8 ff a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01197c9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197cc:	74 17                	je     f01197e5 <test_kmalloc_nextfit+0xc0b>
f01197ce:	83 ec 04             	sub    $0x4,%esp
f01197d1:	68 54 b5 13 f0       	push   $0xf013b554
f01197d6:	68 28 01 00 00       	push   $0x128
f01197db:	68 3a b5 13 f0       	push   $0xf013b53a
f01197e0:	e8 20 6a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01197e5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01197e8:	e8 a4 35 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f01197ed:	29 c3                	sub    %eax,%ebx
f01197ef:	89 d8                	mov    %ebx,%eax
f01197f1:	83 f8 01             	cmp    $0x1,%eax
f01197f4:	74 17                	je     f011980d <test_kmalloc_nextfit+0xc33>
f01197f6:	83 ec 04             	sub    $0x4,%esp
f01197f9:	68 f7 b7 13 f0       	push   $0xf013b7f7
f01197fe:	68 29 01 00 00       	push   $0x129
f0119803:	68 3a b5 13 f0       	push   $0xf013b53a
f0119808:	e8 f8 69 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011980d:	e8 b6 a5 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119812:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119815:	e8 77 35 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011981a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011981d:	83 ec 0c             	sub    $0xc,%esp
f0119820:	68 00 00 50 00       	push   $0x500000
f0119825:	e8 50 e2 fe ff       	call   f0107a7a <kmalloc>
f011982a:	83 c4 10             	add    $0x10,%esp
f011982d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119833:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011983a:	10 00 00 
f011983d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119843:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119848:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011984e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119854:	ba 00 00 00 00       	mov    $0x0,%edx
f0119859:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011985f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119865:	29 d0                	sub    %edx,%eax
f0119867:	89 c1                	mov    %eax,%ecx
f0119869:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119870:	10 00 00 
f0119873:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119878:	0f b6 d0             	movzbl %al,%edx
f011987b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119881:	01 d0                	add    %edx,%eax
f0119883:	48                   	dec    %eax
f0119884:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011988a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119890:	ba 00 00 00 00       	mov    $0x0,%edx
f0119895:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011989b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01198a1:	29 d0                	sub    %edx,%eax
f01198a3:	01 c1                	add    %eax,%ecx
f01198a5:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01198ac:	10 00 00 
f01198af:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01198b4:	0f b6 c0             	movzbl %al,%eax
f01198b7:	c1 e0 04             	shl    $0x4,%eax
f01198ba:	89 c2                	mov    %eax,%edx
f01198bc:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01198c2:	01 d0                	add    %edx,%eax
f01198c4:	48                   	dec    %eax
f01198c5:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01198cb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01198d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01198d6:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f01198dc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01198e2:	29 d0                	sub    %edx,%eax
f01198e4:	01 c8                	add    %ecx,%eax
f01198e6:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f01198ec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01198f2:	39 c2                	cmp    %eax,%edx
f01198f4:	74 17                	je     f011990d <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f01198f6:	83 ec 04             	sub    $0x4,%esp
f01198f9:	68 48 b8 13 f0       	push   $0xf013b848
f01198fe:	68 2f 01 00 00       	push   $0x12f
f0119903:	68 3a b5 13 f0       	push   $0xf013b53a
f0119908:	e8 f8 68 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011990d:	e8 b6 a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119912:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119915:	74 17                	je     f011992e <test_kmalloc_nextfit+0xd54>
f0119917:	83 ec 04             	sub    $0x4,%esp
f011991a:	68 54 b5 13 f0       	push   $0xf013b554
f011991f:	68 30 01 00 00       	push   $0x130
f0119924:	68 3a b5 13 f0       	push   $0xf013b53a
f0119929:	e8 d7 68 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011992e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119931:	e8 5b 34 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119936:	29 c3                	sub    %eax,%ebx
f0119938:	89 d8                	mov    %ebx,%eax
f011993a:	3d 00 05 00 00       	cmp    $0x500,%eax
f011993f:	74 17                	je     f0119958 <test_kmalloc_nextfit+0xd7e>
f0119941:	83 ec 04             	sub    $0x4,%esp
f0119944:	68 f7 b7 13 f0       	push   $0xf013b7f7
f0119949:	68 31 01 00 00       	push   $0x131
f011994e:	68 3a b5 13 f0       	push   $0xf013b53a
f0119953:	e8 ad 68 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119958:	e8 6b a4 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011995d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119960:	e8 2c 34 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119965:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119968:	83 ec 0c             	sub    $0xc,%esp
f011996b:	68 00 00 10 00       	push   $0x100000
f0119970:	e8 05 e1 fe ff       	call   f0107a7a <kmalloc>
f0119975:	83 c4 10             	add    $0x10,%esp
f0119978:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f011997e:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119985:	10 00 00 
f0119988:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011998e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119993:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119999:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011999f:	ba 00 00 00 00       	mov    $0x0,%edx
f01199a4:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f01199aa:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01199b0:	29 d0                	sub    %edx,%eax
f01199b2:	89 c1                	mov    %eax,%ecx
f01199b4:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f01199bb:	10 00 00 
f01199be:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01199c3:	0f b6 d0             	movzbl %al,%edx
f01199c6:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01199cc:	01 d0                	add    %edx,%eax
f01199ce:	48                   	dec    %eax
f01199cf:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f01199d5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01199db:	ba 00 00 00 00       	mov    $0x0,%edx
f01199e0:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01199e6:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01199ec:	29 d0                	sub    %edx,%eax
f01199ee:	01 c1                	add    %eax,%ecx
f01199f0:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f01199f7:	10 00 00 
f01199fa:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01199ff:	0f b6 c0             	movzbl %al,%eax
f0119a02:	c1 e0 04             	shl    $0x4,%eax
f0119a05:	89 c2                	mov    %eax,%edx
f0119a07:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119a0d:	01 d0                	add    %edx,%eax
f0119a0f:	48                   	dec    %eax
f0119a10:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119a16:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119a1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a21:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119a27:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119a2d:	29 d0                	sub    %edx,%eax
f0119a2f:	01 c8                	add    %ecx,%eax
f0119a31:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119a37:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119a3d:	39 c2                	cmp    %eax,%edx
f0119a3f:	74 17                	je     f0119a58 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119a41:	83 ec 04             	sub    $0x4,%esp
f0119a44:	68 48 b8 13 f0       	push   $0xf013b848
f0119a49:	68 37 01 00 00       	push   $0x137
f0119a4e:	68 3a b5 13 f0       	push   $0xf013b53a
f0119a53:	e8 ad 67 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a58:	e8 6b a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119a5d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119a60:	74 17                	je     f0119a79 <test_kmalloc_nextfit+0xe9f>
f0119a62:	83 ec 04             	sub    $0x4,%esp
f0119a65:	68 54 b5 13 f0       	push   $0xf013b554
f0119a6a:	68 38 01 00 00       	push   $0x138
f0119a6f:	68 3a b5 13 f0       	push   $0xf013b53a
f0119a74:	e8 8c 67 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119a79:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119a7c:	e8 10 33 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119a81:	29 c3                	sub    %eax,%ebx
f0119a83:	89 d8                	mov    %ebx,%eax
f0119a85:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119a8a:	74 17                	je     f0119aa3 <test_kmalloc_nextfit+0xec9>
f0119a8c:	83 ec 04             	sub    $0x4,%esp
f0119a8f:	68 f7 b7 13 f0       	push   $0xf013b7f7
f0119a94:	68 39 01 00 00       	push   $0x139
f0119a99:	68 3a b5 13 f0       	push   $0xf013b53a
f0119a9e:	e8 62 67 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119aa3:	e8 20 a3 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119aa8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119aab:	e8 e1 32 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119ab0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119ab3:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119ab9:	83 ec 0c             	sub    $0xc,%esp
f0119abc:	50                   	push   %eax
f0119abd:	e8 83 e0 fe ff       	call   f0107b45 <kfree>
f0119ac2:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ac5:	e8 fe a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119aca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119acd:	74 17                	je     f0119ae6 <test_kmalloc_nextfit+0xf0c>
f0119acf:	83 ec 04             	sub    $0x4,%esp
f0119ad2:	68 54 b5 13 f0       	push   $0xf013b554
f0119ad7:	68 3e 01 00 00       	push   $0x13e
f0119adc:	68 3a b5 13 f0       	push   $0xf013b53a
f0119ae1:	e8 1f 67 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119ae6:	e8 a6 32 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119aeb:	89 c2                	mov    %eax,%edx
f0119aed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119af0:	29 c2                	sub    %eax,%edx
f0119af2:	89 d0                	mov    %edx,%eax
f0119af4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119af9:	74 17                	je     f0119b12 <test_kmalloc_nextfit+0xf38>
f0119afb:	83 ec 04             	sub    $0x4,%esp
f0119afe:	68 08 b8 13 f0       	push   $0xf013b808
f0119b03:	68 3f 01 00 00       	push   $0x13f
f0119b08:	68 3a b5 13 f0       	push   $0xf013b53a
f0119b0d:	e8 f3 66 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119b12:	e8 b1 a2 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119b17:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b1a:	e8 72 32 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119b1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119b22:	83 ec 0c             	sub    $0xc,%esp
f0119b25:	68 00 04 00 00       	push   $0x400
f0119b2a:	e8 4b df fe ff       	call   f0107a7a <kmalloc>
f0119b2f:	83 c4 10             	add    $0x10,%esp
f0119b32:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119b38:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0119b3f:	10 00 00 
f0119b42:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119b48:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b4d:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0119b53:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119b59:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b5e:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0119b64:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119b6a:	29 d0                	sub    %edx,%eax
f0119b6c:	89 c1                	mov    %eax,%ecx
f0119b6e:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0119b75:	10 00 00 
f0119b78:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119b7d:	0f b6 d0             	movzbl %al,%edx
f0119b80:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119b86:	01 d0                	add    %edx,%eax
f0119b88:	48                   	dec    %eax
f0119b89:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0119b8f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119b95:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b9a:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119ba0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119ba6:	29 d0                	sub    %edx,%eax
f0119ba8:	01 c1                	add    %eax,%ecx
f0119baa:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0119bb1:	10 00 00 
f0119bb4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119bb9:	0f b6 c0             	movzbl %al,%eax
f0119bbc:	c1 e0 04             	shl    $0x4,%eax
f0119bbf:	89 c2                	mov    %eax,%edx
f0119bc1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119bc7:	01 d0                	add    %edx,%eax
f0119bc9:	48                   	dec    %eax
f0119bca:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0119bd0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119bd6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bdb:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0119be1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119be7:	29 d0                	sub    %edx,%eax
f0119be9:	01 c8                	add    %ecx,%eax
f0119beb:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119bf1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119bf7:	39 c2                	cmp    %eax,%edx
f0119bf9:	74 17                	je     f0119c12 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0119bfb:	83 ec 04             	sub    $0x4,%esp
f0119bfe:	68 48 b8 13 f0       	push   $0xf013b848
f0119c03:	68 45 01 00 00       	push   $0x145
f0119c08:	68 3a b5 13 f0       	push   $0xf013b53a
f0119c0d:	e8 f3 65 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c12:	e8 b1 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c17:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c1a:	74 17                	je     f0119c33 <test_kmalloc_nextfit+0x1059>
f0119c1c:	83 ec 04             	sub    $0x4,%esp
f0119c1f:	68 54 b5 13 f0       	push   $0xf013b554
f0119c24:	68 46 01 00 00       	push   $0x146
f0119c29:	68 3a b5 13 f0       	push   $0xf013b53a
f0119c2e:	e8 d2 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119c33:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c36:	e8 56 31 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119c3b:	29 c3                	sub    %eax,%ebx
f0119c3d:	89 d8                	mov    %ebx,%eax
f0119c3f:	83 f8 01             	cmp    $0x1,%eax
f0119c42:	74 17                	je     f0119c5b <test_kmalloc_nextfit+0x1081>
f0119c44:	83 ec 04             	sub    $0x4,%esp
f0119c47:	68 f7 b7 13 f0       	push   $0xf013b7f7
f0119c4c:	68 47 01 00 00       	push   $0x147
f0119c51:	68 3a b5 13 f0       	push   $0xf013b53a
f0119c56:	e8 aa 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c5b:	e8 68 a1 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119c60:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c63:	e8 29 31 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119c68:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0119c6b:	83 ec 0c             	sub    $0xc,%esp
f0119c6e:	68 00 e0 1f 00       	push   $0x1fe000
f0119c73:	e8 02 de fe ff       	call   f0107a7a <kmalloc>
f0119c78:	83 c4 10             	add    $0x10,%esp
f0119c7b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0119c81:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0119c88:	10 00 00 
f0119c8b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0119c91:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c96:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0119c9c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119ca2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ca7:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0119cad:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119cb3:	29 d0                	sub    %edx,%eax
f0119cb5:	89 c1                	mov    %eax,%ecx
f0119cb7:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0119cbe:	10 00 00 
f0119cc1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119cc6:	0f b6 d0             	movzbl %al,%edx
f0119cc9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0119ccf:	01 d0                	add    %edx,%eax
f0119cd1:	48                   	dec    %eax
f0119cd2:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119cd8:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119cde:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ce3:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0119ce9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119cef:	29 d0                	sub    %edx,%eax
f0119cf1:	01 c1                	add    %eax,%ecx
f0119cf3:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0119cfa:	10 00 00 
f0119cfd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119d02:	0f b6 c0             	movzbl %al,%eax
f0119d05:	c1 e0 04             	shl    $0x4,%eax
f0119d08:	89 c2                	mov    %eax,%edx
f0119d0a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0119d10:	01 d0                	add    %edx,%eax
f0119d12:	48                   	dec    %eax
f0119d13:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0119d19:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119d1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d24:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0119d2a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119d30:	29 d0                	sub    %edx,%eax
f0119d32:	01 c8                	add    %ecx,%eax
f0119d34:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0119d3a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119d40:	39 c2                	cmp    %eax,%edx
f0119d42:	74 17                	je     f0119d5b <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0119d44:	83 ec 04             	sub    $0x4,%esp
f0119d47:	68 48 b8 13 f0       	push   $0xf013b848
f0119d4c:	68 4d 01 00 00       	push   $0x14d
f0119d51:	68 3a b5 13 f0       	push   $0xf013b53a
f0119d56:	e8 aa 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d5b:	e8 68 a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119d60:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d63:	74 17                	je     f0119d7c <test_kmalloc_nextfit+0x11a2>
f0119d65:	83 ec 04             	sub    $0x4,%esp
f0119d68:	68 54 b5 13 f0       	push   $0xf013b554
f0119d6d:	68 4e 01 00 00       	push   $0x14e
f0119d72:	68 3a b5 13 f0       	push   $0xf013b53a
f0119d77:	e8 89 64 fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119d7c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d7f:	e8 0d 30 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119d84:	29 c3                	sub    %eax,%ebx
f0119d86:	89 d8                	mov    %ebx,%eax
f0119d88:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0119d8d:	74 17                	je     f0119da6 <test_kmalloc_nextfit+0x11cc>
f0119d8f:	83 ec 04             	sub    $0x4,%esp
f0119d92:	68 f7 b7 13 f0       	push   $0xf013b7f7
f0119d97:	68 50 01 00 00       	push   $0x150
f0119d9c:	68 3a b5 13 f0       	push   $0xf013b53a
f0119da1:	e8 5f 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119da6:	e8 1d a0 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119dab:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119dae:	e8 de 2f ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119db3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119db6:	83 ec 0c             	sub    $0xc,%esp
f0119db9:	68 00 00 08 00       	push   $0x80000
f0119dbe:	e8 b7 dc fe ff       	call   f0107a7a <kmalloc>
f0119dc3:	83 c4 10             	add    $0x10,%esp
f0119dc6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0119dcc:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119dd3:	10 00 00 
f0119dd6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0119ddc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119de1:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119de7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119ded:	ba 00 00 00 00       	mov    $0x0,%edx
f0119df2:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119df8:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0119dfe:	29 d0                	sub    %edx,%eax
f0119e00:	89 c1                	mov    %eax,%ecx
f0119e02:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0119e09:	10 00 00 
f0119e0c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119e11:	0f b6 d0             	movzbl %al,%edx
f0119e14:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0119e1a:	01 d0                	add    %edx,%eax
f0119e1c:	48                   	dec    %eax
f0119e1d:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119e23:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119e29:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e2e:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119e34:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119e3a:	29 d0                	sub    %edx,%eax
f0119e3c:	01 c1                	add    %eax,%ecx
f0119e3e:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119e45:	10 00 00 
f0119e48:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119e4d:	0f b6 c0             	movzbl %al,%eax
f0119e50:	c1 e0 04             	shl    $0x4,%eax
f0119e53:	89 c2                	mov    %eax,%edx
f0119e55:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119e5b:	01 d0                	add    %edx,%eax
f0119e5d:	48                   	dec    %eax
f0119e5e:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119e64:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119e6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e6f:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119e75:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119e7b:	29 d0                	sub    %edx,%eax
f0119e7d:	01 c8                	add    %ecx,%eax
f0119e7f:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119e85:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e8b:	39 c2                	cmp    %eax,%edx
f0119e8d:	74 17                	je     f0119ea6 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0119e8f:	83 ec 04             	sub    $0x4,%esp
f0119e92:	68 48 b8 13 f0       	push   $0xf013b848
f0119e97:	68 56 01 00 00       	push   $0x156
f0119e9c:	68 3a b5 13 f0       	push   $0xf013b53a
f0119ea1:	e8 5f 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ea6:	e8 1d 9f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119eab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119eae:	74 17                	je     f0119ec7 <test_kmalloc_nextfit+0x12ed>
f0119eb0:	83 ec 04             	sub    $0x4,%esp
f0119eb3:	68 54 b5 13 f0       	push   $0xf013b554
f0119eb8:	68 57 01 00 00       	push   $0x157
f0119ebd:	68 3a b5 13 f0       	push   $0xf013b53a
f0119ec2:	e8 3e 63 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119ec7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119eca:	e8 c2 2e ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119ecf:	29 c3                	sub    %eax,%ebx
f0119ed1:	89 d8                	mov    %ebx,%eax
f0119ed3:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119ed8:	74 17                	je     f0119ef1 <test_kmalloc_nextfit+0x1317>
f0119eda:	83 ec 04             	sub    $0x4,%esp
f0119edd:	68 f7 b7 13 f0       	push   $0xf013b7f7
f0119ee2:	68 58 01 00 00       	push   $0x158
f0119ee7:	68 3a b5 13 f0       	push   $0xf013b53a
f0119eec:	e8 14 63 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0119ef1:	83 ec 0c             	sub    $0xc,%esp
f0119ef4:	68 68 b8 13 f0       	push   $0xf013b868
f0119ef9:	e8 10 6e fe ff       	call   f0100d0e <cprintf>
f0119efe:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0119f01:	e8 c2 9e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0119f06:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f09:	e8 83 2e ff ff       	call   f010cd91 <sys_calculate_free_frames>
f0119f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0119f11:	83 ec 0c             	sub    $0xc,%esp
f0119f14:	68 00 00 38 00       	push   $0x380000
f0119f19:	e8 5c db fe ff       	call   f0107a7a <kmalloc>
f0119f1e:	83 c4 10             	add    $0x10,%esp
f0119f21:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0119f27:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0119f2e:	10 00 00 
f0119f31:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119f37:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119f3c:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f0119f42:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119f48:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f4d:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119f53:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119f59:	29 d0                	sub    %edx,%eax
f0119f5b:	89 c1                	mov    %eax,%ecx
f0119f5d:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0119f64:	10 00 00 
f0119f67:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119f6c:	0f b6 d0             	movzbl %al,%edx
f0119f6f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0119f75:	01 d0                	add    %edx,%eax
f0119f77:	48                   	dec    %eax
f0119f78:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f0119f7e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119f84:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f89:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f0119f8f:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119f95:	29 d0                	sub    %edx,%eax
f0119f97:	01 c1                	add    %eax,%ecx
f0119f99:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0119fa0:	10 00 00 
f0119fa3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0119fa8:	0f b6 c0             	movzbl %al,%eax
f0119fab:	c1 e0 04             	shl    $0x4,%eax
f0119fae:	89 c2                	mov    %eax,%edx
f0119fb0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0119fb6:	01 d0                	add    %edx,%eax
f0119fb8:	48                   	dec    %eax
f0119fb9:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f0119fbf:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119fc5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fca:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f0119fd0:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119fd6:	29 d0                	sub    %edx,%eax
f0119fd8:	01 c8                	add    %ecx,%eax
f0119fda:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0119fe0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119fe6:	39 c2                	cmp    %eax,%edx
f0119fe8:	74 17                	je     f011a001 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f0119fea:	83 ec 04             	sub    $0x4,%esp
f0119fed:	68 48 b8 13 f0       	push   $0xf013b848
f0119ff2:	68 62 01 00 00       	push   $0x162
f0119ff7:	68 3a b5 13 f0       	push   $0xf013b53a
f0119ffc:	e8 04 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a001:	e8 c2 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a006:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a009:	74 17                	je     f011a022 <test_kmalloc_nextfit+0x1448>
f011a00b:	83 ec 04             	sub    $0x4,%esp
f011a00e:	68 54 b5 13 f0       	push   $0xf013b554
f011a013:	68 63 01 00 00       	push   $0x163
f011a018:	68 3a b5 13 f0       	push   $0xf013b53a
f011a01d:	e8 e3 61 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a022:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a025:	e8 67 2d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a02a:	29 c3                	sub    %eax,%ebx
f011a02c:	89 d8                	mov    %ebx,%eax
f011a02e:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a033:	74 17                	je     f011a04c <test_kmalloc_nextfit+0x1472>
f011a035:	83 ec 04             	sub    $0x4,%esp
f011a038:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a03d:	68 64 01 00 00       	push   $0x164
f011a042:	68 3a b5 13 f0       	push   $0xf013b53a
f011a047:	e8 b9 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a04c:	e8 77 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a051:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a054:	e8 38 2d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a059:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a05c:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a062:	83 ec 0c             	sub    $0xc,%esp
f011a065:	50                   	push   %eax
f011a066:	e8 da da fe ff       	call   f0107b45 <kfree>
f011a06b:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a06e:	e8 55 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a073:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a076:	74 17                	je     f011a08f <test_kmalloc_nextfit+0x14b5>
f011a078:	83 ec 04             	sub    $0x4,%esp
f011a07b:	68 54 b5 13 f0       	push   $0xf013b554
f011a080:	68 69 01 00 00       	push   $0x169
f011a085:	68 3a b5 13 f0       	push   $0xf013b53a
f011a08a:	e8 76 61 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a08f:	e8 fd 2c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a094:	89 c2                	mov    %eax,%edx
f011a096:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a099:	29 c2                	sub    %eax,%edx
f011a09b:	89 d0                	mov    %edx,%eax
f011a09d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a0a2:	74 17                	je     f011a0bb <test_kmalloc_nextfit+0x14e1>
f011a0a4:	83 ec 04             	sub    $0x4,%esp
f011a0a7:	68 08 b8 13 f0       	push   $0xf013b808
f011a0ac:	68 6a 01 00 00       	push   $0x16a
f011a0b1:	68 3a b5 13 f0       	push   $0xf013b53a
f011a0b6:	e8 4a 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a0bb:	e8 08 9d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a0c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a0c3:	e8 c9 2c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a0c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a0cb:	83 ec 0c             	sub    $0xc,%esp
f011a0ce:	68 00 fc 3f 00       	push   $0x3ffc00
f011a0d3:	e8 a2 d9 fe ff       	call   f0107a7a <kmalloc>
f011a0d8:	83 c4 10             	add    $0x10,%esp
f011a0db:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a0e1:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a0e8:	10 00 00 
f011a0eb:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a0f1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0f6:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a0fc:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a102:	ba 00 00 00 00       	mov    $0x0,%edx
f011a107:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a10d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a113:	29 d0                	sub    %edx,%eax
f011a115:	89 c1                	mov    %eax,%ecx
f011a117:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a11e:	10 00 00 
f011a121:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a126:	0f b6 d0             	movzbl %al,%edx
f011a129:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a12f:	01 d0                	add    %edx,%eax
f011a131:	48                   	dec    %eax
f011a132:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a138:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a13e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a143:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a149:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a14f:	29 d0                	sub    %edx,%eax
f011a151:	01 c1                	add    %eax,%ecx
f011a153:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a15a:	10 00 00 
f011a15d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a162:	0f b6 c0             	movzbl %al,%eax
f011a165:	c1 e0 04             	shl    $0x4,%eax
f011a168:	89 c2                	mov    %eax,%edx
f011a16a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a170:	01 d0                	add    %edx,%eax
f011a172:	48                   	dec    %eax
f011a173:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a179:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a17f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a184:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a18a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a190:	29 d0                	sub    %edx,%eax
f011a192:	01 c8                	add    %ecx,%eax
f011a194:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a19a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a1a0:	39 c2                	cmp    %eax,%edx
f011a1a2:	74 17                	je     f011a1bb <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a1a4:	83 ec 04             	sub    $0x4,%esp
f011a1a7:	68 48 b8 13 f0       	push   $0xf013b848
f011a1ac:	68 70 01 00 00       	push   $0x170
f011a1b1:	68 3a b5 13 f0       	push   $0xf013b53a
f011a1b6:	e8 4a 60 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1bb:	e8 08 9c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a1c0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a1c3:	74 17                	je     f011a1dc <test_kmalloc_nextfit+0x1602>
f011a1c5:	83 ec 04             	sub    $0x4,%esp
f011a1c8:	68 54 b5 13 f0       	push   $0xf013b554
f011a1cd:	68 71 01 00 00       	push   $0x171
f011a1d2:	68 3a b5 13 f0       	push   $0xf013b53a
f011a1d7:	e8 29 60 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a1dc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a1df:	e8 ad 2b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a1e4:	29 c3                	sub    %eax,%ebx
f011a1e6:	89 d8                	mov    %ebx,%eax
f011a1e8:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a1ed:	74 17                	je     f011a206 <test_kmalloc_nextfit+0x162c>
f011a1ef:	83 ec 04             	sub    $0x4,%esp
f011a1f2:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a1f7:	68 72 01 00 00       	push   $0x172
f011a1fc:	68 3a b5 13 f0       	push   $0xf013b53a
f011a201:	e8 ff 5f fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a206:	83 ec 0c             	sub    $0xc,%esp
f011a209:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011a20e:	e8 fb 6a fe ff       	call   f0100d0e <cprintf>
f011a213:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a216:	e8 ad 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a21b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a21e:	e8 6e 2b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a223:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a226:	83 ec 0c             	sub    $0xc,%esp
f011a229:	68 00 00 60 00       	push   $0x600000
f011a22e:	e8 47 d8 fe ff       	call   f0107a7a <kmalloc>
f011a233:	83 c4 10             	add    $0x10,%esp
f011a236:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a23c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a242:	85 c0                	test   %eax,%eax
f011a244:	74 17                	je     f011a25d <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a246:	83 ec 04             	sub    $0x4,%esp
f011a249:	68 48 b8 13 f0       	push   $0xf013b848
f011a24e:	68 7c 01 00 00       	push   $0x17c
f011a253:	68 3a b5 13 f0       	push   $0xf013b53a
f011a258:	e8 a8 5f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a25d:	e8 66 9b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a262:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a265:	74 17                	je     f011a27e <test_kmalloc_nextfit+0x16a4>
f011a267:	83 ec 04             	sub    $0x4,%esp
f011a26a:	68 54 b5 13 f0       	push   $0xf013b554
f011a26f:	68 7d 01 00 00       	push   $0x17d
f011a274:	68 3a b5 13 f0       	push   $0xf013b53a
f011a279:	e8 87 5f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a27e:	e8 0e 2b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a283:	89 c2                	mov    %eax,%edx
f011a285:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a288:	39 c2                	cmp    %eax,%edx
f011a28a:	74 17                	je     f011a2a3 <test_kmalloc_nextfit+0x16c9>
f011a28c:	83 ec 04             	sub    $0x4,%esp
f011a28f:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a294:	68 7e 01 00 00       	push   $0x17e
f011a299:	68 3a b5 13 f0       	push   $0xf013b53a
f011a29e:	e8 62 5f fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a2a3:	83 ec 0c             	sub    $0xc,%esp
f011a2a6:	68 dc b8 13 f0       	push   $0xf013b8dc
f011a2ab:	e8 5e 6a fe ff       	call   f0100d0e <cprintf>
f011a2b0:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a2b3:	83 ec 0c             	sub    $0xc,%esp
f011a2b6:	68 18 b9 13 f0       	push   $0xf013b918
f011a2bb:	e8 4e 6a fe ff       	call   f0100d0e <cprintf>
f011a2c0:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a2c3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a2c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a2cb:	5b                   	pop    %ebx
f011a2cc:	5f                   	pop    %edi
f011a2cd:	5d                   	pop    %ebp
f011a2ce:	c3                   	ret    

f011a2cf <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a2cf:	55                   	push   %ebp
f011a2d0:	89 e5                	mov    %esp,%ebp
f011a2d2:	57                   	push   %edi
f011a2d3:	53                   	push   %ebx
f011a2d4:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a2da:	83 ec 0c             	sub    $0xc,%esp
f011a2dd:	68 7c b4 13 f0       	push   $0xf013b47c
f011a2e2:	e8 27 6a fe ff       	call   f0100d0e <cprintf>
f011a2e7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a2ea:	83 ec 0c             	sub    $0xc,%esp
f011a2ed:	68 ac b4 13 f0       	push   $0xf013b4ac
f011a2f2:	e8 17 6a fe ff       	call   f0100d0e <cprintf>
f011a2f7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a2fa:	83 ec 0c             	sub    $0xc,%esp
f011a2fd:	68 7c b4 13 f0       	push   $0xf013b47c
f011a302:	e8 07 6a fe ff       	call   f0100d0e <cprintf>
f011a307:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a30a:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a310:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a315:	b8 00 00 00 00       	mov    $0x0,%eax
f011a31a:	89 d7                	mov    %edx,%edi
f011a31c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a31e:	e8 6e 2a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a323:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a326:	e8 9d 9a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a32b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a32e:	83 ec 0c             	sub    $0xc,%esp
f011a331:	68 00 fc 2f 00       	push   $0x2ffc00
f011a336:	e8 3f d7 fe ff       	call   f0107a7a <kmalloc>
f011a33b:	83 c4 10             	add    $0x10,%esp
f011a33e:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a344:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a34a:	89 c1                	mov    %eax,%ecx
f011a34c:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a353:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a356:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a35b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a35e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a361:	ba 00 00 00 00       	mov    $0x0,%edx
f011a366:	f7 75 ec             	divl   -0x14(%ebp)
f011a369:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a36c:	29 d0                	sub    %edx,%eax
f011a36e:	89 c3                	mov    %eax,%ebx
f011a370:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a377:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a37c:	0f b6 d0             	movzbl %al,%edx
f011a37f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a382:	01 d0                	add    %edx,%eax
f011a384:	48                   	dec    %eax
f011a385:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a388:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a38b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a390:	f7 75 e4             	divl   -0x1c(%ebp)
f011a393:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a396:	29 d0                	sub    %edx,%eax
f011a398:	01 c3                	add    %eax,%ebx
f011a39a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a3a1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a3a6:	0f b6 c0             	movzbl %al,%eax
f011a3a9:	c1 e0 04             	shl    $0x4,%eax
f011a3ac:	89 c2                	mov    %eax,%edx
f011a3ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a3b1:	01 d0                	add    %edx,%eax
f011a3b3:	48                   	dec    %eax
f011a3b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a3b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a3ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3bf:	f7 75 dc             	divl   -0x24(%ebp)
f011a3c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a3c5:	29 d0                	sub    %edx,%eax
f011a3c7:	01 d8                	add    %ebx,%eax
f011a3c9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a3ce:	39 c1                	cmp    %eax,%ecx
f011a3d0:	74 17                	je     f011a3e9 <test_kmalloc_bestfit1+0x11a>
f011a3d2:	83 ec 04             	sub    $0x4,%esp
f011a3d5:	68 54 b9 13 f0       	push   $0xf013b954
f011a3da:	68 98 01 00 00       	push   $0x198
f011a3df:	68 3a b5 13 f0       	push   $0xf013b53a
f011a3e4:	e8 1c 5e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3e9:	e8 da 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a3ee:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a3f1:	74 17                	je     f011a40a <test_kmalloc_bestfit1+0x13b>
f011a3f3:	83 ec 04             	sub    $0x4,%esp
f011a3f6:	68 54 b5 13 f0       	push   $0xf013b554
f011a3fb:	68 99 01 00 00       	push   $0x199
f011a400:	68 3a b5 13 f0       	push   $0xf013b53a
f011a405:	e8 fb 5d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a40a:	e8 82 29 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a40f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a412:	29 c2                	sub    %eax,%edx
f011a414:	89 d0                	mov    %edx,%eax
f011a416:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a41b:	74 17                	je     f011a434 <test_kmalloc_bestfit1+0x165>
f011a41d:	83 ec 04             	sub    $0x4,%esp
f011a420:	68 84 b9 13 f0       	push   $0xf013b984
f011a425:	68 9a 01 00 00       	push   $0x19a
f011a42a:	68 3a b5 13 f0       	push   $0xf013b53a
f011a42f:	e8 d1 5d fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a434:	e8 58 29 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a439:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a43c:	e8 87 99 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a441:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a444:	83 ec 0c             	sub    $0xc,%esp
f011a447:	68 00 fc 2f 00       	push   $0x2ffc00
f011a44c:	e8 29 d6 fe ff       	call   f0107a7a <kmalloc>
f011a451:	83 c4 10             	add    $0x10,%esp
f011a454:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a45a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a460:	89 c1                	mov    %eax,%ecx
f011a462:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a469:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a46c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a471:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a474:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a477:	ba 00 00 00 00       	mov    $0x0,%edx
f011a47c:	f7 75 d4             	divl   -0x2c(%ebp)
f011a47f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a482:	29 d0                	sub    %edx,%eax
f011a484:	89 c3                	mov    %eax,%ebx
f011a486:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a48d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a492:	0f b6 d0             	movzbl %al,%edx
f011a495:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a498:	01 d0                	add    %edx,%eax
f011a49a:	48                   	dec    %eax
f011a49b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a49e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a4a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4a6:	f7 75 cc             	divl   -0x34(%ebp)
f011a4a9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a4ac:	29 d0                	sub    %edx,%eax
f011a4ae:	01 c3                	add    %eax,%ebx
f011a4b0:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a4b7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a4bc:	0f b6 c0             	movzbl %al,%eax
f011a4bf:	c1 e0 04             	shl    $0x4,%eax
f011a4c2:	89 c2                	mov    %eax,%edx
f011a4c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a4c7:	01 d0                	add    %edx,%eax
f011a4c9:	48                   	dec    %eax
f011a4ca:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a4cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a4d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4d5:	f7 75 c4             	divl   -0x3c(%ebp)
f011a4d8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a4db:	29 d0                	sub    %edx,%eax
f011a4dd:	01 d8                	add    %ebx,%eax
f011a4df:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a4e4:	39 c1                	cmp    %eax,%ecx
f011a4e6:	74 17                	je     f011a4ff <test_kmalloc_bestfit1+0x230>
f011a4e8:	83 ec 04             	sub    $0x4,%esp
f011a4eb:	68 54 b9 13 f0       	push   $0xf013b954
f011a4f0:	68 a0 01 00 00       	push   $0x1a0
f011a4f5:	68 3a b5 13 f0       	push   $0xf013b53a
f011a4fa:	e8 06 5d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4ff:	e8 c4 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a504:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a507:	74 17                	je     f011a520 <test_kmalloc_bestfit1+0x251>
f011a509:	83 ec 04             	sub    $0x4,%esp
f011a50c:	68 54 b5 13 f0       	push   $0xf013b554
f011a511:	68 a1 01 00 00       	push   $0x1a1
f011a516:	68 3a b5 13 f0       	push   $0xf013b53a
f011a51b:	e8 e5 5c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a520:	e8 6c 28 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a525:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a528:	29 c2                	sub    %eax,%edx
f011a52a:	89 d0                	mov    %edx,%eax
f011a52c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a531:	74 17                	je     f011a54a <test_kmalloc_bestfit1+0x27b>
f011a533:	83 ec 04             	sub    $0x4,%esp
f011a536:	68 84 b9 13 f0       	push   $0xf013b984
f011a53b:	68 a2 01 00 00       	push   $0x1a2
f011a540:	68 3a b5 13 f0       	push   $0xf013b53a
f011a545:	e8 bb 5c fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a54a:	e8 42 28 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a54f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a552:	e8 71 98 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a557:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a55a:	83 ec 0c             	sub    $0xc,%esp
f011a55d:	68 00 fc 1f 00       	push   $0x1ffc00
f011a562:	e8 13 d5 fe ff       	call   f0107a7a <kmalloc>
f011a567:	83 c4 10             	add    $0x10,%esp
f011a56a:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a570:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a576:	89 c1                	mov    %eax,%ecx
f011a578:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a57f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a582:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a587:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a58a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a58d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a592:	f7 75 bc             	divl   -0x44(%ebp)
f011a595:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a598:	29 d0                	sub    %edx,%eax
f011a59a:	89 c3                	mov    %eax,%ebx
f011a59c:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a5a3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a5a8:	0f b6 d0             	movzbl %al,%edx
f011a5ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a5ae:	01 d0                	add    %edx,%eax
f011a5b0:	48                   	dec    %eax
f011a5b1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a5b4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a5b7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5bc:	f7 75 b4             	divl   -0x4c(%ebp)
f011a5bf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a5c2:	29 d0                	sub    %edx,%eax
f011a5c4:	01 c3                	add    %eax,%ebx
f011a5c6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a5cd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a5d2:	0f b6 c0             	movzbl %al,%eax
f011a5d5:	c1 e0 04             	shl    $0x4,%eax
f011a5d8:	89 c2                	mov    %eax,%edx
f011a5da:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a5dd:	01 d0                	add    %edx,%eax
f011a5df:	48                   	dec    %eax
f011a5e0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a5e3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a5e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5eb:	f7 75 ac             	divl   -0x54(%ebp)
f011a5ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a5f1:	29 d0                	sub    %edx,%eax
f011a5f3:	01 d8                	add    %ebx,%eax
f011a5f5:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a5fa:	39 c1                	cmp    %eax,%ecx
f011a5fc:	74 17                	je     f011a615 <test_kmalloc_bestfit1+0x346>
f011a5fe:	83 ec 04             	sub    $0x4,%esp
f011a601:	68 54 b9 13 f0       	push   $0xf013b954
f011a606:	68 a8 01 00 00       	push   $0x1a8
f011a60b:	68 3a b5 13 f0       	push   $0xf013b53a
f011a610:	e8 f0 5b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a615:	e8 ae 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a61a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a61d:	74 17                	je     f011a636 <test_kmalloc_bestfit1+0x367>
f011a61f:	83 ec 04             	sub    $0x4,%esp
f011a622:	68 54 b5 13 f0       	push   $0xf013b554
f011a627:	68 a9 01 00 00       	push   $0x1a9
f011a62c:	68 3a b5 13 f0       	push   $0xf013b53a
f011a631:	e8 cf 5b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a636:	e8 56 27 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a63b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a63e:	29 c2                	sub    %eax,%edx
f011a640:	89 d0                	mov    %edx,%eax
f011a642:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a647:	74 17                	je     f011a660 <test_kmalloc_bestfit1+0x391>
f011a649:	83 ec 04             	sub    $0x4,%esp
f011a64c:	68 84 b9 13 f0       	push   $0xf013b984
f011a651:	68 aa 01 00 00       	push   $0x1aa
f011a656:	68 3a b5 13 f0       	push   $0xf013b53a
f011a65b:	e8 a5 5b fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a660:	e8 2c 27 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a665:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a668:	e8 5b 97 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a66d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011a670:	83 ec 0c             	sub    $0xc,%esp
f011a673:	68 00 fc 1f 00       	push   $0x1ffc00
f011a678:	e8 fd d3 fe ff       	call   f0107a7a <kmalloc>
f011a67d:	83 c4 10             	add    $0x10,%esp
f011a680:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a686:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a68c:	89 c1                	mov    %eax,%ecx
f011a68e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a695:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a698:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a69d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a6a0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a6a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6a8:	f7 75 a4             	divl   -0x5c(%ebp)
f011a6ab:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a6ae:	29 d0                	sub    %edx,%eax
f011a6b0:	89 c3                	mov    %eax,%ebx
f011a6b2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a6b9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a6be:	0f b6 d0             	movzbl %al,%edx
f011a6c1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a6c4:	01 d0                	add    %edx,%eax
f011a6c6:	48                   	dec    %eax
f011a6c7:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a6ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a6cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6d2:	f7 75 9c             	divl   -0x64(%ebp)
f011a6d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a6d8:	29 d0                	sub    %edx,%eax
f011a6da:	01 c3                	add    %eax,%ebx
f011a6dc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a6e3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a6e8:	0f b6 c0             	movzbl %al,%eax
f011a6eb:	c1 e0 04             	shl    $0x4,%eax
f011a6ee:	89 c2                	mov    %eax,%edx
f011a6f0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a6f3:	01 d0                	add    %edx,%eax
f011a6f5:	48                   	dec    %eax
f011a6f6:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a6f9:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a6fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a701:	f7 75 94             	divl   -0x6c(%ebp)
f011a704:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a707:	29 d0                	sub    %edx,%eax
f011a709:	01 d8                	add    %ebx,%eax
f011a70b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a710:	39 c1                	cmp    %eax,%ecx
f011a712:	74 17                	je     f011a72b <test_kmalloc_bestfit1+0x45c>
f011a714:	83 ec 04             	sub    $0x4,%esp
f011a717:	68 54 b9 13 f0       	push   $0xf013b954
f011a71c:	68 b0 01 00 00       	push   $0x1b0
f011a721:	68 3a b5 13 f0       	push   $0xf013b53a
f011a726:	e8 da 5a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a72b:	e8 98 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a730:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a733:	74 17                	je     f011a74c <test_kmalloc_bestfit1+0x47d>
f011a735:	83 ec 04             	sub    $0x4,%esp
f011a738:	68 54 b5 13 f0       	push   $0xf013b554
f011a73d:	68 b1 01 00 00       	push   $0x1b1
f011a742:	68 3a b5 13 f0       	push   $0xf013b53a
f011a747:	e8 b9 5a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a74c:	e8 40 26 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a751:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a754:	29 c2                	sub    %eax,%edx
f011a756:	89 d0                	mov    %edx,%eax
f011a758:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a75d:	74 17                	je     f011a776 <test_kmalloc_bestfit1+0x4a7>
f011a75f:	83 ec 04             	sub    $0x4,%esp
f011a762:	68 84 b9 13 f0       	push   $0xf013b984
f011a767:	68 b2 01 00 00       	push   $0x1b2
f011a76c:	68 3a b5 13 f0       	push   $0xf013b53a
f011a771:	e8 8f 5a fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a776:	e8 16 26 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a77b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a77e:	e8 45 96 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a783:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011a786:	83 ec 0c             	sub    $0xc,%esp
f011a789:	68 00 fc 0f 00       	push   $0xffc00
f011a78e:	e8 e7 d2 fe ff       	call   f0107a7a <kmalloc>
f011a793:	83 c4 10             	add    $0x10,%esp
f011a796:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011a79c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a7a2:	89 c1                	mov    %eax,%ecx
f011a7a4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a7ab:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a7ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a7b3:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a7b6:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a7b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7be:	f7 75 8c             	divl   -0x74(%ebp)
f011a7c1:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a7c4:	29 d0                	sub    %edx,%eax
f011a7c6:	89 c3                	mov    %eax,%ebx
f011a7c8:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a7cf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a7d4:	0f b6 d0             	movzbl %al,%edx
f011a7d7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a7da:	01 d0                	add    %edx,%eax
f011a7dc:	48                   	dec    %eax
f011a7dd:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a7e0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a7e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7e8:	f7 75 84             	divl   -0x7c(%ebp)
f011a7eb:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a7ee:	29 d0                	sub    %edx,%eax
f011a7f0:	01 c3                	add    %eax,%ebx
f011a7f2:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a7f9:	10 00 00 
f011a7fc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a801:	0f b6 c0             	movzbl %al,%eax
f011a804:	c1 e0 04             	shl    $0x4,%eax
f011a807:	89 c2                	mov    %eax,%edx
f011a809:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a80f:	01 d0                	add    %edx,%eax
f011a811:	48                   	dec    %eax
f011a812:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a818:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a81e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a823:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a829:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a82f:	29 d0                	sub    %edx,%eax
f011a831:	01 d8                	add    %ebx,%eax
f011a833:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011a838:	39 c1                	cmp    %eax,%ecx
f011a83a:	74 17                	je     f011a853 <test_kmalloc_bestfit1+0x584>
f011a83c:	83 ec 04             	sub    $0x4,%esp
f011a83f:	68 54 b9 13 f0       	push   $0xf013b954
f011a844:	68 b8 01 00 00       	push   $0x1b8
f011a849:	68 3a b5 13 f0       	push   $0xf013b53a
f011a84e:	e8 b2 59 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a853:	e8 70 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a858:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a85b:	74 17                	je     f011a874 <test_kmalloc_bestfit1+0x5a5>
f011a85d:	83 ec 04             	sub    $0x4,%esp
f011a860:	68 54 b5 13 f0       	push   $0xf013b554
f011a865:	68 b9 01 00 00       	push   $0x1b9
f011a86a:	68 3a b5 13 f0       	push   $0xf013b53a
f011a86f:	e8 91 59 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a874:	e8 18 25 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a879:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a87c:	29 c2                	sub    %eax,%edx
f011a87e:	89 d0                	mov    %edx,%eax
f011a880:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a885:	74 17                	je     f011a89e <test_kmalloc_bestfit1+0x5cf>
f011a887:	83 ec 04             	sub    $0x4,%esp
f011a88a:	68 84 b9 13 f0       	push   $0xf013b984
f011a88f:	68 ba 01 00 00       	push   $0x1ba
f011a894:	68 3a b5 13 f0       	push   $0xf013b53a
f011a899:	e8 67 59 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a89e:	e8 ee 24 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a8a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a8a6:	e8 1d 95 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a8ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a8ae:	83 ec 0c             	sub    $0xc,%esp
f011a8b1:	68 00 fc 0f 00       	push   $0xffc00
f011a8b6:	e8 bf d1 fe ff       	call   f0107a7a <kmalloc>
f011a8bb:	83 c4 10             	add    $0x10,%esp
f011a8be:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a8c4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a8ca:	89 c1                	mov    %eax,%ecx
f011a8cc:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a8d3:	10 00 00 
f011a8d6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a8dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8e1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a8e7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a8ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8f2:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a8f8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a8fe:	29 d0                	sub    %edx,%eax
f011a900:	89 c3                	mov    %eax,%ebx
f011a902:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a909:	10 00 00 
f011a90c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a911:	0f b6 d0             	movzbl %al,%edx
f011a914:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a91a:	01 d0                	add    %edx,%eax
f011a91c:	48                   	dec    %eax
f011a91d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a923:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a929:	ba 00 00 00 00       	mov    $0x0,%edx
f011a92e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a934:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a93a:	29 d0                	sub    %edx,%eax
f011a93c:	01 c3                	add    %eax,%ebx
f011a93e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a945:	10 00 00 
f011a948:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011a94d:	0f b6 c0             	movzbl %al,%eax
f011a950:	c1 e0 04             	shl    $0x4,%eax
f011a953:	89 c2                	mov    %eax,%edx
f011a955:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a95b:	01 d0                	add    %edx,%eax
f011a95d:	48                   	dec    %eax
f011a95e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a964:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a96a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a96f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a975:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a97b:	29 d0                	sub    %edx,%eax
f011a97d:	01 d8                	add    %ebx,%eax
f011a97f:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a984:	39 c1                	cmp    %eax,%ecx
f011a986:	74 17                	je     f011a99f <test_kmalloc_bestfit1+0x6d0>
f011a988:	83 ec 04             	sub    $0x4,%esp
f011a98b:	68 54 b9 13 f0       	push   $0xf013b954
f011a990:	68 c0 01 00 00       	push   $0x1c0
f011a995:	68 3a b5 13 f0       	push   $0xf013b53a
f011a99a:	e8 66 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a99f:	e8 24 94 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a9a4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9a7:	74 17                	je     f011a9c0 <test_kmalloc_bestfit1+0x6f1>
f011a9a9:	83 ec 04             	sub    $0x4,%esp
f011a9ac:	68 54 b5 13 f0       	push   $0xf013b554
f011a9b1:	68 c1 01 00 00       	push   $0x1c1
f011a9b6:	68 3a b5 13 f0       	push   $0xf013b53a
f011a9bb:	e8 45 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a9c0:	e8 cc 23 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a9c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a9c8:	29 c2                	sub    %eax,%edx
f011a9ca:	89 d0                	mov    %edx,%eax
f011a9cc:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a9d1:	74 17                	je     f011a9ea <test_kmalloc_bestfit1+0x71b>
f011a9d3:	83 ec 04             	sub    $0x4,%esp
f011a9d6:	68 84 b9 13 f0       	push   $0xf013b984
f011a9db:	68 c2 01 00 00       	push   $0x1c2
f011a9e0:	68 3a b5 13 f0       	push   $0xf013b53a
f011a9e5:	e8 1b 58 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a9ea:	e8 a2 23 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011a9ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9f2:	e8 d1 93 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011a9f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a9fa:	83 ec 0c             	sub    $0xc,%esp
f011a9fd:	68 00 fc 0f 00       	push   $0xffc00
f011aa02:	e8 73 d0 fe ff       	call   f0107a7a <kmalloc>
f011aa07:	83 c4 10             	add    $0x10,%esp
f011aa0a:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011aa10:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011aa16:	89 c1                	mov    %eax,%ecx
f011aa18:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011aa1f:	10 00 00 
f011aa22:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011aa28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aa2d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011aa33:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011aa39:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa3e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011aa44:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011aa4a:	29 d0                	sub    %edx,%eax
f011aa4c:	89 c3                	mov    %eax,%ebx
f011aa4e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011aa55:	10 00 00 
f011aa58:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011aa5d:	0f b6 d0             	movzbl %al,%edx
f011aa60:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011aa66:	01 d0                	add    %edx,%eax
f011aa68:	48                   	dec    %eax
f011aa69:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011aa6f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011aa75:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa7a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011aa80:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011aa86:	29 d0                	sub    %edx,%eax
f011aa88:	01 c3                	add    %eax,%ebx
f011aa8a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011aa91:	10 00 00 
f011aa94:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011aa99:	0f b6 c0             	movzbl %al,%eax
f011aa9c:	c1 e0 04             	shl    $0x4,%eax
f011aa9f:	89 c2                	mov    %eax,%edx
f011aaa1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011aaa7:	01 d0                	add    %edx,%eax
f011aaa9:	48                   	dec    %eax
f011aaaa:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011aab0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011aab6:	ba 00 00 00 00       	mov    $0x0,%edx
f011aabb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011aac1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011aac7:	29 d0                	sub    %edx,%eax
f011aac9:	01 d8                	add    %ebx,%eax
f011aacb:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011aad0:	39 c1                	cmp    %eax,%ecx
f011aad2:	74 17                	je     f011aaeb <test_kmalloc_bestfit1+0x81c>
f011aad4:	83 ec 04             	sub    $0x4,%esp
f011aad7:	68 54 b9 13 f0       	push   $0xf013b954
f011aadc:	68 c8 01 00 00       	push   $0x1c8
f011aae1:	68 3a b5 13 f0       	push   $0xf013b53a
f011aae6:	e8 1a 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aaeb:	e8 d8 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aaf0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aaf3:	74 17                	je     f011ab0c <test_kmalloc_bestfit1+0x83d>
f011aaf5:	83 ec 04             	sub    $0x4,%esp
f011aaf8:	68 54 b5 13 f0       	push   $0xf013b554
f011aafd:	68 c9 01 00 00       	push   $0x1c9
f011ab02:	68 3a b5 13 f0       	push   $0xf013b53a
f011ab07:	e8 f9 56 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ab0c:	e8 80 22 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ab11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab14:	29 c2                	sub    %eax,%edx
f011ab16:	89 d0                	mov    %edx,%eax
f011ab18:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ab1d:	74 17                	je     f011ab36 <test_kmalloc_bestfit1+0x867>
f011ab1f:	83 ec 04             	sub    $0x4,%esp
f011ab22:	68 84 b9 13 f0       	push   $0xf013b984
f011ab27:	68 ca 01 00 00       	push   $0x1ca
f011ab2c:	68 3a b5 13 f0       	push   $0xf013b53a
f011ab31:	e8 cf 56 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab36:	e8 56 22 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ab3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab3e:	e8 85 92 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ab43:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011ab46:	83 ec 0c             	sub    $0xc,%esp
f011ab49:	68 00 fc 0f 00       	push   $0xffc00
f011ab4e:	e8 27 cf fe ff       	call   f0107a7a <kmalloc>
f011ab53:	83 c4 10             	add    $0x10,%esp
f011ab56:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011ab5c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ab62:	89 c1                	mov    %eax,%ecx
f011ab64:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ab6b:	10 00 00 
f011ab6e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ab74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab79:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ab7f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ab85:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab8a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ab90:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ab96:	29 d0                	sub    %edx,%eax
f011ab98:	89 c3                	mov    %eax,%ebx
f011ab9a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011aba1:	10 00 00 
f011aba4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011aba9:	0f b6 d0             	movzbl %al,%edx
f011abac:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011abb2:	01 d0                	add    %edx,%eax
f011abb4:	48                   	dec    %eax
f011abb5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011abbb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011abc1:	ba 00 00 00 00       	mov    $0x0,%edx
f011abc6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011abcc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011abd2:	29 d0                	sub    %edx,%eax
f011abd4:	01 c3                	add    %eax,%ebx
f011abd6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011abdd:	10 00 00 
f011abe0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011abe5:	0f b6 c0             	movzbl %al,%eax
f011abe8:	c1 e0 04             	shl    $0x4,%eax
f011abeb:	89 c2                	mov    %eax,%edx
f011abed:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011abf3:	01 d0                	add    %edx,%eax
f011abf5:	48                   	dec    %eax
f011abf6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011abfc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ac02:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac07:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ac0d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ac13:	29 d0                	sub    %edx,%eax
f011ac15:	01 d8                	add    %ebx,%eax
f011ac17:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011ac1c:	39 c1                	cmp    %eax,%ecx
f011ac1e:	74 17                	je     f011ac37 <test_kmalloc_bestfit1+0x968>
f011ac20:	83 ec 04             	sub    $0x4,%esp
f011ac23:	68 54 b9 13 f0       	push   $0xf013b954
f011ac28:	68 d0 01 00 00       	push   $0x1d0
f011ac2d:	68 3a b5 13 f0       	push   $0xf013b53a
f011ac32:	e8 ce 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac37:	e8 8c 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac3c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac3f:	74 17                	je     f011ac58 <test_kmalloc_bestfit1+0x989>
f011ac41:	83 ec 04             	sub    $0x4,%esp
f011ac44:	68 54 b5 13 f0       	push   $0xf013b554
f011ac49:	68 d1 01 00 00       	push   $0x1d1
f011ac4e:	68 3a b5 13 f0       	push   $0xf013b53a
f011ac53:	e8 ad 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ac58:	e8 34 21 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ac5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac60:	29 c2                	sub    %eax,%edx
f011ac62:	89 d0                	mov    %edx,%eax
f011ac64:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ac69:	74 17                	je     f011ac82 <test_kmalloc_bestfit1+0x9b3>
f011ac6b:	83 ec 04             	sub    $0x4,%esp
f011ac6e:	68 84 b9 13 f0       	push   $0xf013b984
f011ac73:	68 d2 01 00 00       	push   $0x1d2
f011ac78:	68 3a b5 13 f0       	push   $0xf013b53a
f011ac7d:	e8 83 55 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ac82:	e8 0a 21 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ac87:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac8a:	e8 39 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ac8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011ac92:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ac98:	83 ec 0c             	sub    $0xc,%esp
f011ac9b:	50                   	push   %eax
f011ac9c:	e8 a4 ce fe ff       	call   f0107b45 <kfree>
f011aca1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aca4:	e8 1f 91 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aca9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011acac:	74 17                	je     f011acc5 <test_kmalloc_bestfit1+0x9f6>
f011acae:	83 ec 04             	sub    $0x4,%esp
f011acb1:	68 54 b5 13 f0       	push   $0xf013b554
f011acb6:	68 db 01 00 00       	push   $0x1db
f011acbb:	68 3a b5 13 f0       	push   $0xf013b53a
f011acc0:	e8 40 55 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011acc5:	e8 c7 20 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011acca:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011accd:	3d 00 03 00 00       	cmp    $0x300,%eax
f011acd2:	74 17                	je     f011aceb <test_kmalloc_bestfit1+0xa1c>
f011acd4:	83 ec 04             	sub    $0x4,%esp
f011acd7:	68 97 b9 13 f0       	push   $0xf013b997
f011acdc:	68 dc 01 00 00       	push   $0x1dc
f011ace1:	68 3a b5 13 f0       	push   $0xf013b53a
f011ace6:	e8 1a 55 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aceb:	e8 a1 20 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011acf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acf3:	e8 d0 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011acf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011acfb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ad01:	83 ec 0c             	sub    $0xc,%esp
f011ad04:	50                   	push   %eax
f011ad05:	e8 3b ce fe ff       	call   f0107b45 <kfree>
f011ad0a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad0d:	e8 b6 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad12:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad15:	74 17                	je     f011ad2e <test_kmalloc_bestfit1+0xa5f>
f011ad17:	83 ec 04             	sub    $0x4,%esp
f011ad1a:	68 54 b5 13 f0       	push   $0xf013b554
f011ad1f:	68 e2 01 00 00       	push   $0x1e2
f011ad24:	68 3a b5 13 f0       	push   $0xf013b53a
f011ad29:	e8 d7 54 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011ad2e:	e8 5e 20 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ad33:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ad36:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ad3b:	74 17                	je     f011ad54 <test_kmalloc_bestfit1+0xa85>
f011ad3d:	83 ec 04             	sub    $0x4,%esp
f011ad40:	68 97 b9 13 f0       	push   $0xf013b997
f011ad45:	68 e3 01 00 00       	push   $0x1e3
f011ad4a:	68 3a b5 13 f0       	push   $0xf013b53a
f011ad4f:	e8 b1 54 fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ad54:	e8 38 20 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ad59:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad5c:	e8 67 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad61:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011ad64:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ad6a:	83 ec 0c             	sub    $0xc,%esp
f011ad6d:	50                   	push   %eax
f011ad6e:	e8 d2 cd fe ff       	call   f0107b45 <kfree>
f011ad73:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad76:	e8 4d 90 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ad7b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad7e:	74 17                	je     f011ad97 <test_kmalloc_bestfit1+0xac8>
f011ad80:	83 ec 04             	sub    $0x4,%esp
f011ad83:	68 54 b5 13 f0       	push   $0xf013b554
f011ad88:	68 e9 01 00 00       	push   $0x1e9
f011ad8d:	68 3a b5 13 f0       	push   $0xf013b53a
f011ad92:	e8 6e 54 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011ad97:	e8 f5 1f ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ad9c:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ad9f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ada4:	74 17                	je     f011adbd <test_kmalloc_bestfit1+0xaee>
f011ada6:	83 ec 04             	sub    $0x4,%esp
f011ada9:	68 97 b9 13 f0       	push   $0xf013b997
f011adae:	68 ea 01 00 00       	push   $0x1ea
f011adb3:	68 3a b5 13 f0       	push   $0xf013b53a
f011adb8:	e8 48 54 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011adbd:	e8 cf 1f ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011adc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011adc5:	e8 fe 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011adca:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011adcd:	83 ec 0c             	sub    $0xc,%esp
f011add0:	68 00 00 08 00       	push   $0x80000
f011add5:	e8 a0 cc fe ff       	call   f0107a7a <kmalloc>
f011adda:	83 c4 10             	add    $0x10,%esp
f011addd:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ade3:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ade9:	89 c1                	mov    %eax,%ecx
f011adeb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011adf2:	10 00 00 
f011adf5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011adfb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae00:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ae06:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ae0c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae11:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ae17:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ae1d:	29 d0                	sub    %edx,%eax
f011ae1f:	89 c3                	mov    %eax,%ebx
f011ae21:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011ae28:	10 00 00 
f011ae2b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ae30:	0f b6 d0             	movzbl %al,%edx
f011ae33:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ae39:	01 d0                	add    %edx,%eax
f011ae3b:	48                   	dec    %eax
f011ae3c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011ae42:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ae48:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae4d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011ae53:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ae59:	29 d0                	sub    %edx,%eax
f011ae5b:	01 c3                	add    %eax,%ebx
f011ae5d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011ae64:	10 00 00 
f011ae67:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ae6c:	0f b6 c0             	movzbl %al,%eax
f011ae6f:	c1 e0 04             	shl    $0x4,%eax
f011ae72:	89 c2                	mov    %eax,%edx
f011ae74:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ae7a:	01 d0                	add    %edx,%eax
f011ae7c:	48                   	dec    %eax
f011ae7d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ae83:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ae89:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae8e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ae94:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ae9a:	29 d0                	sub    %edx,%eax
f011ae9c:	01 d8                	add    %ebx,%eax
f011ae9e:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011aea3:	39 c1                	cmp    %eax,%ecx
f011aea5:	74 17                	je     f011aebe <test_kmalloc_bestfit1+0xbef>
f011aea7:	83 ec 04             	sub    $0x4,%esp
f011aeaa:	68 54 b9 13 f0       	push   $0xf013b954
f011aeaf:	68 f3 01 00 00       	push   $0x1f3
f011aeb4:	68 3a b5 13 f0       	push   $0xf013b53a
f011aeb9:	e8 47 53 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aebe:	e8 05 8f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011aec3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aec6:	74 17                	je     f011aedf <test_kmalloc_bestfit1+0xc10>
f011aec8:	83 ec 04             	sub    $0x4,%esp
f011aecb:	68 54 b5 13 f0       	push   $0xf013b554
f011aed0:	68 f4 01 00 00       	push   $0x1f4
f011aed5:	68 3a b5 13 f0       	push   $0xf013b53a
f011aeda:	e8 26 53 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011aedf:	e8 ad 1e ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011aee4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aee7:	29 c2                	sub    %eax,%edx
f011aee9:	89 d0                	mov    %edx,%eax
f011aeeb:	3d 80 00 00 00       	cmp    $0x80,%eax
f011aef0:	74 17                	je     f011af09 <test_kmalloc_bestfit1+0xc3a>
f011aef2:	83 ec 04             	sub    $0x4,%esp
f011aef5:	68 84 b9 13 f0       	push   $0xf013b984
f011aefa:	68 f5 01 00 00       	push   $0x1f5
f011aeff:	68 3a b5 13 f0       	push   $0xf013b53a
f011af04:	e8 fc 52 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011af09:	e8 83 1e ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011af0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af11:	e8 b2 8e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011af16:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011af19:	83 ec 0c             	sub    $0xc,%esp
f011af1c:	68 00 fc 0f 00       	push   $0xffc00
f011af21:	e8 54 cb fe ff       	call   f0107a7a <kmalloc>
f011af26:	83 c4 10             	add    $0x10,%esp
f011af29:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011af2f:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011af35:	89 c1                	mov    %eax,%ecx
f011af37:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011af3e:	10 00 00 
f011af41:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011af47:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af4c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011af52:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011af58:	ba 00 00 00 00       	mov    $0x0,%edx
f011af5d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011af63:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011af69:	29 d0                	sub    %edx,%eax
f011af6b:	89 c3                	mov    %eax,%ebx
f011af6d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011af74:	10 00 00 
f011af77:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011af7c:	0f b6 d0             	movzbl %al,%edx
f011af7f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011af85:	01 d0                	add    %edx,%eax
f011af87:	48                   	dec    %eax
f011af88:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011af8e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011af94:	ba 00 00 00 00       	mov    $0x0,%edx
f011af99:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011af9f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011afa5:	29 d0                	sub    %edx,%eax
f011afa7:	01 c3                	add    %eax,%ebx
f011afa9:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011afb0:	10 00 00 
f011afb3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011afb8:	0f b6 c0             	movzbl %al,%eax
f011afbb:	c1 e0 04             	shl    $0x4,%eax
f011afbe:	89 c2                	mov    %eax,%edx
f011afc0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011afc6:	01 d0                	add    %edx,%eax
f011afc8:	48                   	dec    %eax
f011afc9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011afcf:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011afd5:	ba 00 00 00 00       	mov    $0x0,%edx
f011afda:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011afe0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011afe6:	29 d0                	sub    %edx,%eax
f011afe8:	01 d8                	add    %ebx,%eax
f011afea:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011afef:	39 c1                	cmp    %eax,%ecx
f011aff1:	74 17                	je     f011b00a <test_kmalloc_bestfit1+0xd3b>
f011aff3:	83 ec 04             	sub    $0x4,%esp
f011aff6:	68 54 b9 13 f0       	push   $0xf013b954
f011affb:	68 fb 01 00 00       	push   $0x1fb
f011b000:	68 3a b5 13 f0       	push   $0xf013b53a
f011b005:	e8 fb 51 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b00a:	e8 b9 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b00f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b012:	74 17                	je     f011b02b <test_kmalloc_bestfit1+0xd5c>
f011b014:	83 ec 04             	sub    $0x4,%esp
f011b017:	68 54 b5 13 f0       	push   $0xf013b554
f011b01c:	68 fc 01 00 00       	push   $0x1fc
f011b021:	68 3a b5 13 f0       	push   $0xf013b53a
f011b026:	e8 da 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b02b:	e8 61 1d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b030:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b033:	29 c2                	sub    %eax,%edx
f011b035:	89 d0                	mov    %edx,%eax
f011b037:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b03c:	74 17                	je     f011b055 <test_kmalloc_bestfit1+0xd86>
f011b03e:	83 ec 04             	sub    $0x4,%esp
f011b041:	68 84 b9 13 f0       	push   $0xf013b984
f011b046:	68 fd 01 00 00       	push   $0x1fd
f011b04b:	68 3a b5 13 f0       	push   $0xf013b53a
f011b050:	e8 b0 51 fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b055:	e8 37 1d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b05a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b05d:	e8 66 8d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b062:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b065:	83 ec 0c             	sub    $0xc,%esp
f011b068:	68 00 fc 03 00       	push   $0x3fc00
f011b06d:	e8 08 ca fe ff       	call   f0107a7a <kmalloc>
f011b072:	83 c4 10             	add    $0x10,%esp
f011b075:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b07b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b081:	89 c1                	mov    %eax,%ecx
f011b083:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b08a:	10 00 00 
f011b08d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b093:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b098:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b09e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b0a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0a9:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b0af:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b0b5:	29 d0                	sub    %edx,%eax
f011b0b7:	89 c3                	mov    %eax,%ebx
f011b0b9:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b0c0:	10 00 00 
f011b0c3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b0c8:	0f b6 d0             	movzbl %al,%edx
f011b0cb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b0d1:	01 d0                	add    %edx,%eax
f011b0d3:	48                   	dec    %eax
f011b0d4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b0da:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b0e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0e5:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b0eb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b0f1:	29 d0                	sub    %edx,%eax
f011b0f3:	01 c3                	add    %eax,%ebx
f011b0f5:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b0fc:	10 00 00 
f011b0ff:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b104:	0f b6 c0             	movzbl %al,%eax
f011b107:	c1 e0 04             	shl    $0x4,%eax
f011b10a:	89 c2                	mov    %eax,%edx
f011b10c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b112:	01 d0                	add    %edx,%eax
f011b114:	48                   	dec    %eax
f011b115:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b11b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b121:	ba 00 00 00 00       	mov    $0x0,%edx
f011b126:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b12c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b132:	29 d0                	sub    %edx,%eax
f011b134:	01 d8                	add    %ebx,%eax
f011b136:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b13b:	39 c1                	cmp    %eax,%ecx
f011b13d:	74 17                	je     f011b156 <test_kmalloc_bestfit1+0xe87>
f011b13f:	83 ec 04             	sub    $0x4,%esp
f011b142:	68 54 b9 13 f0       	push   $0xf013b954
f011b147:	68 03 02 00 00       	push   $0x203
f011b14c:	68 3a b5 13 f0       	push   $0xf013b53a
f011b151:	e8 af 50 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b156:	e8 6d 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b15b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b15e:	74 17                	je     f011b177 <test_kmalloc_bestfit1+0xea8>
f011b160:	83 ec 04             	sub    $0x4,%esp
f011b163:	68 54 b5 13 f0       	push   $0xf013b554
f011b168:	68 04 02 00 00       	push   $0x204
f011b16d:	68 3a b5 13 f0       	push   $0xf013b53a
f011b172:	e8 8e 50 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b177:	e8 15 1c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b17c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b17f:	29 c2                	sub    %eax,%edx
f011b181:	89 d0                	mov    %edx,%eax
f011b183:	83 f8 40             	cmp    $0x40,%eax
f011b186:	74 17                	je     f011b19f <test_kmalloc_bestfit1+0xed0>
f011b188:	83 ec 04             	sub    $0x4,%esp
f011b18b:	68 84 b9 13 f0       	push   $0xf013b984
f011b190:	68 05 02 00 00       	push   $0x205
f011b195:	68 3a b5 13 f0       	push   $0xf013b53a
f011b19a:	e8 66 50 fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b19f:	e8 ed 1b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b1a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b1a7:	e8 1c 8c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b1ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b1af:	83 ec 0c             	sub    $0xc,%esp
f011b1b2:	68 00 fc 3f 00       	push   $0x3ffc00
f011b1b7:	e8 be c8 fe ff       	call   f0107a7a <kmalloc>
f011b1bc:	83 c4 10             	add    $0x10,%esp
f011b1bf:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b1c5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b1cb:	89 c1                	mov    %eax,%ecx
f011b1cd:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b1d4:	10 00 00 
f011b1d7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b1dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b1e2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b1e8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b1ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1f3:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b1f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b1ff:	29 d0                	sub    %edx,%eax
f011b201:	89 c3                	mov    %eax,%ebx
f011b203:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b20a:	10 00 00 
f011b20d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b212:	0f b6 d0             	movzbl %al,%edx
f011b215:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b21b:	01 d0                	add    %edx,%eax
f011b21d:	48                   	dec    %eax
f011b21e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b224:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b22a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b22f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b235:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b23b:	29 d0                	sub    %edx,%eax
f011b23d:	01 c3                	add    %eax,%ebx
f011b23f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b246:	10 00 00 
f011b249:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b24e:	0f b6 c0             	movzbl %al,%eax
f011b251:	c1 e0 04             	shl    $0x4,%eax
f011b254:	89 c2                	mov    %eax,%edx
f011b256:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b25c:	01 d0                	add    %edx,%eax
f011b25e:	48                   	dec    %eax
f011b25f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b265:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b26b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b270:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b276:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b27c:	29 d0                	sub    %edx,%eax
f011b27e:	01 d8                	add    %ebx,%eax
f011b280:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b285:	39 c1                	cmp    %eax,%ecx
f011b287:	74 17                	je     f011b2a0 <test_kmalloc_bestfit1+0xfd1>
f011b289:	83 ec 04             	sub    $0x4,%esp
f011b28c:	68 54 b9 13 f0       	push   $0xf013b954
f011b291:	68 0b 02 00 00       	push   $0x20b
f011b296:	68 3a b5 13 f0       	push   $0xf013b53a
f011b29b:	e8 65 4f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2a0:	e8 23 8b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b2a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b2a8:	74 17                	je     f011b2c1 <test_kmalloc_bestfit1+0xff2>
f011b2aa:	83 ec 04             	sub    $0x4,%esp
f011b2ad:	68 54 b5 13 f0       	push   $0xf013b554
f011b2b2:	68 0c 02 00 00       	push   $0x20c
f011b2b7:	68 3a b5 13 f0       	push   $0xf013b53a
f011b2bc:	e8 44 4f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b2c1:	e8 cb 1a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b2c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b2c9:	29 c2                	sub    %eax,%edx
f011b2cb:	89 d0                	mov    %edx,%eax
f011b2cd:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b2d2:	74 17                	je     f011b2eb <test_kmalloc_bestfit1+0x101c>
f011b2d4:	83 ec 04             	sub    $0x4,%esp
f011b2d7:	68 84 b9 13 f0       	push   $0xf013b984
f011b2dc:	68 0d 02 00 00       	push   $0x20d
f011b2e1:	68 3a b5 13 f0       	push   $0xf013b53a
f011b2e6:	e8 1a 4f fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b2eb:	e8 a1 1a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b2f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2f3:	e8 d0 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b2f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b2fb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b301:	83 ec 0c             	sub    $0xc,%esp
f011b304:	50                   	push   %eax
f011b305:	e8 3b c8 fe ff       	call   f0107b45 <kfree>
f011b30a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b30d:	e8 b6 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b312:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b315:	74 17                	je     f011b32e <test_kmalloc_bestfit1+0x105f>
f011b317:	83 ec 04             	sub    $0x4,%esp
f011b31a:	68 54 b5 13 f0       	push   $0xf013b554
f011b31f:	68 16 02 00 00       	push   $0x216
f011b324:	68 3a b5 13 f0       	push   $0xf013b53a
f011b329:	e8 d7 4e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b32e:	e8 5e 1a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b333:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b336:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b33b:	74 17                	je     f011b354 <test_kmalloc_bestfit1+0x1085>
f011b33d:	83 ec 04             	sub    $0x4,%esp
f011b340:	68 97 b9 13 f0       	push   $0xf013b997
f011b345:	68 17 02 00 00       	push   $0x217
f011b34a:	68 3a b5 13 f0       	push   $0xf013b53a
f011b34f:	e8 b1 4e fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b354:	e8 38 1a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b359:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b35c:	e8 67 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b361:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b364:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b36a:	83 ec 0c             	sub    $0xc,%esp
f011b36d:	50                   	push   %eax
f011b36e:	e8 d2 c7 fe ff       	call   f0107b45 <kfree>
f011b373:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b376:	e8 4d 8a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b37b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b37e:	74 17                	je     f011b397 <test_kmalloc_bestfit1+0x10c8>
f011b380:	83 ec 04             	sub    $0x4,%esp
f011b383:	68 54 b5 13 f0       	push   $0xf013b554
f011b388:	68 1d 02 00 00       	push   $0x21d
f011b38d:	68 3a b5 13 f0       	push   $0xf013b53a
f011b392:	e8 6e 4e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b397:	e8 f5 19 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b39c:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b39f:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b3a4:	74 17                	je     f011b3bd <test_kmalloc_bestfit1+0x10ee>
f011b3a6:	83 ec 04             	sub    $0x4,%esp
f011b3a9:	68 97 b9 13 f0       	push   $0xf013b997
f011b3ae:	68 1e 02 00 00       	push   $0x21e
f011b3b3:	68 3a b5 13 f0       	push   $0xf013b53a
f011b3b8:	e8 48 4e fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b3bd:	e8 cf 19 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b3c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b3c5:	e8 fe 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b3ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b3cd:	83 ec 0c             	sub    $0xc,%esp
f011b3d0:	68 00 fc 1f 00       	push   $0x1ffc00
f011b3d5:	e8 a0 c6 fe ff       	call   f0107a7a <kmalloc>
f011b3da:	83 c4 10             	add    $0x10,%esp
f011b3dd:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b3e3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b3e9:	89 c1                	mov    %eax,%ecx
f011b3eb:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b3f2:	10 00 00 
f011b3f5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b3fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b400:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b406:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b40c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b411:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b417:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b41d:	29 d0                	sub    %edx,%eax
f011b41f:	89 c3                	mov    %eax,%ebx
f011b421:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b428:	10 00 00 
f011b42b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b430:	0f b6 d0             	movzbl %al,%edx
f011b433:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b439:	01 d0                	add    %edx,%eax
f011b43b:	48                   	dec    %eax
f011b43c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b442:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b448:	ba 00 00 00 00       	mov    $0x0,%edx
f011b44d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b453:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b459:	29 d0                	sub    %edx,%eax
f011b45b:	01 c3                	add    %eax,%ebx
f011b45d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b464:	10 00 00 
f011b467:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b46c:	0f b6 c0             	movzbl %al,%eax
f011b46f:	c1 e0 04             	shl    $0x4,%eax
f011b472:	89 c2                	mov    %eax,%edx
f011b474:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b47a:	01 d0                	add    %edx,%eax
f011b47c:	48                   	dec    %eax
f011b47d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b483:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b489:	ba 00 00 00 00       	mov    $0x0,%edx
f011b48e:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b494:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b49a:	29 d0                	sub    %edx,%eax
f011b49c:	01 d8                	add    %ebx,%eax
f011b49e:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b4a3:	39 c1                	cmp    %eax,%ecx
f011b4a5:	74 17                	je     f011b4be <test_kmalloc_bestfit1+0x11ef>
f011b4a7:	83 ec 04             	sub    $0x4,%esp
f011b4aa:	68 54 b9 13 f0       	push   $0xf013b954
f011b4af:	68 27 02 00 00       	push   $0x227
f011b4b4:	68 3a b5 13 f0       	push   $0xf013b53a
f011b4b9:	e8 47 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4be:	e8 05 89 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b4c3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4c6:	74 17                	je     f011b4df <test_kmalloc_bestfit1+0x1210>
f011b4c8:	83 ec 04             	sub    $0x4,%esp
f011b4cb:	68 54 b5 13 f0       	push   $0xf013b554
f011b4d0:	68 28 02 00 00       	push   $0x228
f011b4d5:	68 3a b5 13 f0       	push   $0xf013b53a
f011b4da:	e8 26 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b4df:	e8 ad 18 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b4e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b4e7:	29 c2                	sub    %eax,%edx
f011b4e9:	89 d0                	mov    %edx,%eax
f011b4eb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b4f0:	74 17                	je     f011b509 <test_kmalloc_bestfit1+0x123a>
f011b4f2:	83 ec 04             	sub    $0x4,%esp
f011b4f5:	68 84 b9 13 f0       	push   $0xf013b984
f011b4fa:	68 29 02 00 00       	push   $0x229
f011b4ff:	68 3a b5 13 f0       	push   $0xf013b53a
f011b504:	e8 fc 4c fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b509:	83 ec 0c             	sub    $0xc,%esp
f011b50c:	68 a4 b9 13 f0       	push   $0xf013b9a4
f011b511:	e8 f8 57 fe ff       	call   f0100d0e <cprintf>
f011b516:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b519:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b51e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b521:	5b                   	pop    %ebx
f011b522:	5f                   	pop    %edi
f011b523:	5d                   	pop    %ebp
f011b524:	c3                   	ret    

f011b525 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b525:	55                   	push   %ebp
f011b526:	89 e5                	mov    %esp,%ebp
f011b528:	57                   	push   %edi
f011b529:	53                   	push   %ebx
f011b52a:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b530:	83 ec 0c             	sub    $0xc,%esp
f011b533:	68 7c b4 13 f0       	push   $0xf013b47c
f011b538:	e8 d1 57 fe ff       	call   f0100d0e <cprintf>
f011b53d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b540:	83 ec 0c             	sub    $0xc,%esp
f011b543:	68 ac b4 13 f0       	push   $0xf013b4ac
f011b548:	e8 c1 57 fe ff       	call   f0100d0e <cprintf>
f011b54d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b550:	83 ec 0c             	sub    $0xc,%esp
f011b553:	68 7c b4 13 f0       	push   $0xf013b47c
f011b558:	e8 b1 57 fe ff       	call   f0100d0e <cprintf>
f011b55d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b560:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b566:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b56b:	b8 00 00 00 00       	mov    $0x0,%eax
f011b570:	89 d7                	mov    %edx,%edi
f011b572:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b574:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b57b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b57e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b583:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b586:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b589:	ba 00 00 00 00       	mov    $0x0,%edx
f011b58e:	f7 75 f4             	divl   -0xc(%ebp)
f011b591:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b594:	29 d0                	sub    %edx,%eax
f011b596:	89 c1                	mov    %eax,%ecx
f011b598:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b59f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b5a4:	0f b6 d0             	movzbl %al,%edx
f011b5a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b5aa:	01 d0                	add    %edx,%eax
f011b5ac:	48                   	dec    %eax
f011b5ad:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b5b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b5b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5b8:	f7 75 ec             	divl   -0x14(%ebp)
f011b5bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b5be:	29 d0                	sub    %edx,%eax
f011b5c0:	01 c1                	add    %eax,%ecx
f011b5c2:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b5c9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b5ce:	0f b6 c0             	movzbl %al,%eax
f011b5d1:	c1 e0 04             	shl    $0x4,%eax
f011b5d4:	89 c2                	mov    %eax,%edx
f011b5d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b5d9:	01 d0                	add    %edx,%eax
f011b5db:	48                   	dec    %eax
f011b5dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b5df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b5e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5e7:	f7 75 e4             	divl   -0x1c(%ebp)
f011b5ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b5ed:	29 d0                	sub    %edx,%eax
f011b5ef:	01 c8                	add    %ecx,%eax
f011b5f1:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b5f6:	29 c2                	sub    %eax,%edx
f011b5f8:	89 d0                	mov    %edx,%eax
f011b5fa:	83 ec 0c             	sub    $0xc,%esp
f011b5fd:	50                   	push   %eax
f011b5fe:	e8 77 c4 fe ff       	call   f0107a7a <kmalloc>
f011b603:	83 c4 10             	add    $0x10,%esp
f011b606:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b60c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b612:	85 c0                	test   %eax,%eax
f011b614:	74 17                	je     f011b62d <test_kmalloc_bestfit2+0x108>
f011b616:	83 ec 04             	sub    $0x4,%esp
f011b619:	68 ec b9 13 f0       	push   $0xf013b9ec
f011b61e:	68 3f 02 00 00       	push   $0x23f
f011b623:	68 3a b5 13 f0       	push   $0xf013b53a
f011b628:	e8 d8 4b fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b62d:	e8 5f 17 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b632:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b635:	e8 8e 87 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b63a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b63d:	83 ec 0c             	sub    $0xc,%esp
f011b640:	68 00 fc 1f 00       	push   $0x1ffc00
f011b645:	e8 30 c4 fe ff       	call   f0107a7a <kmalloc>
f011b64a:	83 c4 10             	add    $0x10,%esp
f011b64d:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b653:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b659:	89 c1                	mov    %eax,%ecx
f011b65b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b662:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b665:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b66a:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b66d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b670:	ba 00 00 00 00       	mov    $0x0,%edx
f011b675:	f7 75 d4             	divl   -0x2c(%ebp)
f011b678:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b67b:	29 d0                	sub    %edx,%eax
f011b67d:	89 c3                	mov    %eax,%ebx
f011b67f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b686:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b68b:	0f b6 d0             	movzbl %al,%edx
f011b68e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b691:	01 d0                	add    %edx,%eax
f011b693:	48                   	dec    %eax
f011b694:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b697:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b69a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b69f:	f7 75 cc             	divl   -0x34(%ebp)
f011b6a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b6a5:	29 d0                	sub    %edx,%eax
f011b6a7:	01 c3                	add    %eax,%ebx
f011b6a9:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b6b0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b6b5:	0f b6 c0             	movzbl %al,%eax
f011b6b8:	c1 e0 04             	shl    $0x4,%eax
f011b6bb:	89 c2                	mov    %eax,%edx
f011b6bd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b6c0:	01 d0                	add    %edx,%eax
f011b6c2:	48                   	dec    %eax
f011b6c3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b6c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b6c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6ce:	f7 75 c4             	divl   -0x3c(%ebp)
f011b6d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b6d4:	29 d0                	sub    %edx,%eax
f011b6d6:	01 d8                	add    %ebx,%eax
f011b6d8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b6dd:	39 c1                	cmp    %eax,%ecx
f011b6df:	74 17                	je     f011b6f8 <test_kmalloc_bestfit2+0x1d3>
f011b6e1:	83 ec 04             	sub    $0x4,%esp
f011b6e4:	68 54 b9 13 f0       	push   $0xf013b954
f011b6e9:	68 49 02 00 00       	push   $0x249
f011b6ee:	68 3a b5 13 f0       	push   $0xf013b53a
f011b6f3:	e8 0d 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6f8:	e8 cb 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b6fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b700:	74 17                	je     f011b719 <test_kmalloc_bestfit2+0x1f4>
f011b702:	83 ec 04             	sub    $0x4,%esp
f011b705:	68 54 b5 13 f0       	push   $0xf013b554
f011b70a:	68 4a 02 00 00       	push   $0x24a
f011b70f:	68 3a b5 13 f0       	push   $0xf013b53a
f011b714:	e8 ec 4a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b719:	e8 73 16 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b71e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b721:	29 c2                	sub    %eax,%edx
f011b723:	89 d0                	mov    %edx,%eax
f011b725:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b72a:	74 17                	je     f011b743 <test_kmalloc_bestfit2+0x21e>
f011b72c:	83 ec 04             	sub    $0x4,%esp
f011b72f:	68 84 b9 13 f0       	push   $0xf013b984
f011b734:	68 4b 02 00 00       	push   $0x24b
f011b739:	68 3a b5 13 f0       	push   $0xf013b53a
f011b73e:	e8 c2 4a fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b743:	e8 49 16 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b748:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b74b:	e8 78 86 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b750:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b753:	83 ec 0c             	sub    $0xc,%esp
f011b756:	68 00 fc 1f 00       	push   $0x1ffc00
f011b75b:	e8 1a c3 fe ff       	call   f0107a7a <kmalloc>
f011b760:	83 c4 10             	add    $0x10,%esp
f011b763:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b769:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b76f:	89 c1                	mov    %eax,%ecx
f011b771:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b778:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b77b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b780:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b783:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b786:	ba 00 00 00 00       	mov    $0x0,%edx
f011b78b:	f7 75 bc             	divl   -0x44(%ebp)
f011b78e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b791:	29 d0                	sub    %edx,%eax
f011b793:	89 c3                	mov    %eax,%ebx
f011b795:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b79c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b7a1:	0f b6 d0             	movzbl %al,%edx
f011b7a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b7a7:	01 d0                	add    %edx,%eax
f011b7a9:	48                   	dec    %eax
f011b7aa:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b7ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b7b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7b5:	f7 75 b4             	divl   -0x4c(%ebp)
f011b7b8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b7bb:	29 d0                	sub    %edx,%eax
f011b7bd:	01 c3                	add    %eax,%ebx
f011b7bf:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b7c6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b7cb:	0f b6 c0             	movzbl %al,%eax
f011b7ce:	c1 e0 04             	shl    $0x4,%eax
f011b7d1:	89 c2                	mov    %eax,%edx
f011b7d3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b7d6:	01 d0                	add    %edx,%eax
f011b7d8:	48                   	dec    %eax
f011b7d9:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b7dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b7df:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7e4:	f7 75 ac             	divl   -0x54(%ebp)
f011b7e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b7ea:	29 d0                	sub    %edx,%eax
f011b7ec:	01 d8                	add    %ebx,%eax
f011b7ee:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b7f3:	39 c1                	cmp    %eax,%ecx
f011b7f5:	74 17                	je     f011b80e <test_kmalloc_bestfit2+0x2e9>
f011b7f7:	83 ec 04             	sub    $0x4,%esp
f011b7fa:	68 54 b9 13 f0       	push   $0xf013b954
f011b7ff:	68 51 02 00 00       	push   $0x251
f011b804:	68 3a b5 13 f0       	push   $0xf013b53a
f011b809:	e8 f7 49 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b80e:	e8 b5 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b813:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b816:	74 17                	je     f011b82f <test_kmalloc_bestfit2+0x30a>
f011b818:	83 ec 04             	sub    $0x4,%esp
f011b81b:	68 54 b5 13 f0       	push   $0xf013b554
f011b820:	68 52 02 00 00       	push   $0x252
f011b825:	68 3a b5 13 f0       	push   $0xf013b53a
f011b82a:	e8 d6 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b82f:	e8 5d 15 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b834:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b837:	29 c2                	sub    %eax,%edx
f011b839:	89 d0                	mov    %edx,%eax
f011b83b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b840:	74 17                	je     f011b859 <test_kmalloc_bestfit2+0x334>
f011b842:	83 ec 04             	sub    $0x4,%esp
f011b845:	68 84 b9 13 f0       	push   $0xf013b984
f011b84a:	68 53 02 00 00       	push   $0x253
f011b84f:	68 3a b5 13 f0       	push   $0xf013b53a
f011b854:	e8 ac 49 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b859:	e8 33 15 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b85e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b861:	e8 62 85 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b866:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b869:	83 ec 0c             	sub    $0xc,%esp
f011b86c:	68 00 08 00 00       	push   $0x800
f011b871:	e8 04 c2 fe ff       	call   f0107a7a <kmalloc>
f011b876:	83 c4 10             	add    $0x10,%esp
f011b879:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b87f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b885:	89 c1                	mov    %eax,%ecx
f011b887:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b88e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b891:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b896:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b899:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b89c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8a1:	f7 75 a4             	divl   -0x5c(%ebp)
f011b8a4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b8a7:	29 d0                	sub    %edx,%eax
f011b8a9:	89 c3                	mov    %eax,%ebx
f011b8ab:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b8b2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b8b7:	0f b6 d0             	movzbl %al,%edx
f011b8ba:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b8bd:	01 d0                	add    %edx,%eax
f011b8bf:	48                   	dec    %eax
f011b8c0:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b8c3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b8c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8cb:	f7 75 9c             	divl   -0x64(%ebp)
f011b8ce:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b8d1:	29 d0                	sub    %edx,%eax
f011b8d3:	01 c3                	add    %eax,%ebx
f011b8d5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b8dc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b8e1:	0f b6 c0             	movzbl %al,%eax
f011b8e4:	c1 e0 04             	shl    $0x4,%eax
f011b8e7:	89 c2                	mov    %eax,%edx
f011b8e9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b8ec:	01 d0                	add    %edx,%eax
f011b8ee:	48                   	dec    %eax
f011b8ef:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b8f2:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b8f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8fa:	f7 75 94             	divl   -0x6c(%ebp)
f011b8fd:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b900:	29 d0                	sub    %edx,%eax
f011b902:	01 d8                	add    %ebx,%eax
f011b904:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b909:	39 c1                	cmp    %eax,%ecx
f011b90b:	74 17                	je     f011b924 <test_kmalloc_bestfit2+0x3ff>
f011b90d:	83 ec 04             	sub    $0x4,%esp
f011b910:	68 54 b9 13 f0       	push   $0xf013b954
f011b915:	68 59 02 00 00       	push   $0x259
f011b91a:	68 3a b5 13 f0       	push   $0xf013b53a
f011b91f:	e8 e1 48 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b924:	e8 9f 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b929:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b92c:	74 17                	je     f011b945 <test_kmalloc_bestfit2+0x420>
f011b92e:	83 ec 04             	sub    $0x4,%esp
f011b931:	68 54 b5 13 f0       	push   $0xf013b554
f011b936:	68 5a 02 00 00       	push   $0x25a
f011b93b:	68 3a b5 13 f0       	push   $0xf013b53a
f011b940:	e8 c0 48 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b945:	e8 47 14 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b94a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b94d:	29 c2                	sub    %eax,%edx
f011b94f:	89 d0                	mov    %edx,%eax
f011b951:	83 f8 01             	cmp    $0x1,%eax
f011b954:	74 17                	je     f011b96d <test_kmalloc_bestfit2+0x448>
f011b956:	83 ec 04             	sub    $0x4,%esp
f011b959:	68 84 b9 13 f0       	push   $0xf013b984
f011b95e:	68 5b 02 00 00       	push   $0x25b
f011b963:	68 3a b5 13 f0       	push   $0xf013b53a
f011b968:	e8 98 48 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b96d:	e8 1f 14 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011b972:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b975:	e8 4e 84 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011b97a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b97d:	83 ec 0c             	sub    $0xc,%esp
f011b980:	68 00 08 00 00       	push   $0x800
f011b985:	e8 f0 c0 fe ff       	call   f0107a7a <kmalloc>
f011b98a:	83 c4 10             	add    $0x10,%esp
f011b98d:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b993:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b999:	89 c1                	mov    %eax,%ecx
f011b99b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b9a2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b9a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9aa:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b9ad:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b9b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9b5:	f7 75 8c             	divl   -0x74(%ebp)
f011b9b8:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b9bb:	29 d0                	sub    %edx,%eax
f011b9bd:	89 c3                	mov    %eax,%ebx
f011b9bf:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b9c6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b9cb:	0f b6 d0             	movzbl %al,%edx
f011b9ce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b9d1:	01 d0                	add    %edx,%eax
f011b9d3:	48                   	dec    %eax
f011b9d4:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b9d7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b9da:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9df:	f7 75 84             	divl   -0x7c(%ebp)
f011b9e2:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b9e5:	29 d0                	sub    %edx,%eax
f011b9e7:	01 c3                	add    %eax,%ebx
f011b9e9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b9f0:	10 00 00 
f011b9f3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011b9f8:	0f b6 c0             	movzbl %al,%eax
f011b9fb:	c1 e0 04             	shl    $0x4,%eax
f011b9fe:	89 c2                	mov    %eax,%edx
f011ba00:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ba06:	01 d0                	add    %edx,%eax
f011ba08:	48                   	dec    %eax
f011ba09:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ba0f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ba15:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba1a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ba20:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ba26:	29 d0                	sub    %edx,%eax
f011ba28:	01 d8                	add    %ebx,%eax
f011ba2a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011ba2f:	39 c1                	cmp    %eax,%ecx
f011ba31:	74 17                	je     f011ba4a <test_kmalloc_bestfit2+0x525>
f011ba33:	83 ec 04             	sub    $0x4,%esp
f011ba36:	68 54 b9 13 f0       	push   $0xf013b954
f011ba3b:	68 61 02 00 00       	push   $0x261
f011ba40:	68 3a b5 13 f0       	push   $0xf013b53a
f011ba45:	e8 bb 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba4a:	e8 79 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ba4f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ba52:	74 17                	je     f011ba6b <test_kmalloc_bestfit2+0x546>
f011ba54:	83 ec 04             	sub    $0x4,%esp
f011ba57:	68 54 b5 13 f0       	push   $0xf013b554
f011ba5c:	68 62 02 00 00       	push   $0x262
f011ba61:	68 3a b5 13 f0       	push   $0xf013b53a
f011ba66:	e8 9a 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ba6b:	e8 21 13 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ba70:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ba73:	29 c2                	sub    %eax,%edx
f011ba75:	89 d0                	mov    %edx,%eax
f011ba77:	83 f8 01             	cmp    $0x1,%eax
f011ba7a:	74 17                	je     f011ba93 <test_kmalloc_bestfit2+0x56e>
f011ba7c:	83 ec 04             	sub    $0x4,%esp
f011ba7f:	68 84 b9 13 f0       	push   $0xf013b984
f011ba84:	68 63 02 00 00       	push   $0x263
f011ba89:	68 3a b5 13 f0       	push   $0xf013b53a
f011ba8e:	e8 72 47 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ba93:	e8 f9 12 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ba98:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba9b:	e8 28 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011baa0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011baa3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011baa9:	83 ec 0c             	sub    $0xc,%esp
f011baac:	50                   	push   %eax
f011baad:	e8 93 c0 fe ff       	call   f0107b45 <kfree>
f011bab2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bab5:	e8 0e 83 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011baba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011babd:	74 17                	je     f011bad6 <test_kmalloc_bestfit2+0x5b1>
f011babf:	83 ec 04             	sub    $0x4,%esp
f011bac2:	68 54 b5 13 f0       	push   $0xf013b554
f011bac7:	68 69 02 00 00       	push   $0x269
f011bacc:	68 3a b5 13 f0       	push   $0xf013b53a
f011bad1:	e8 2f 47 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bad6:	e8 b6 12 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011badb:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bade:	83 f8 01             	cmp    $0x1,%eax
f011bae1:	74 17                	je     f011bafa <test_kmalloc_bestfit2+0x5d5>
f011bae3:	83 ec 04             	sub    $0x4,%esp
f011bae6:	68 84 b9 13 f0       	push   $0xf013b984
f011baeb:	68 6a 02 00 00       	push   $0x26a
f011baf0:	68 3a b5 13 f0       	push   $0xf013b53a
f011baf5:	e8 0b 47 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bafa:	e8 92 12 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011baff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb02:	e8 c1 82 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bb07:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bb0a:	83 ec 0c             	sub    $0xc,%esp
f011bb0d:	68 00 1c 00 00       	push   $0x1c00
f011bb12:	e8 63 bf fe ff       	call   f0107a7a <kmalloc>
f011bb17:	83 c4 10             	add    $0x10,%esp
f011bb1a:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bb20:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011bb26:	89 c1                	mov    %eax,%ecx
f011bb28:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bb2f:	10 00 00 
f011bb32:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bb38:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bb3d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bb43:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bb49:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb4e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bb54:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bb5a:	29 d0                	sub    %edx,%eax
f011bb5c:	89 c3                	mov    %eax,%ebx
f011bb5e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bb65:	10 00 00 
f011bb68:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bb6d:	0f b6 d0             	movzbl %al,%edx
f011bb70:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bb76:	01 d0                	add    %edx,%eax
f011bb78:	48                   	dec    %eax
f011bb79:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bb7f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bb85:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb8a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bb90:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bb96:	29 d0                	sub    %edx,%eax
f011bb98:	01 c3                	add    %eax,%ebx
f011bb9a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bba1:	10 00 00 
f011bba4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bba9:	0f b6 c0             	movzbl %al,%eax
f011bbac:	c1 e0 04             	shl    $0x4,%eax
f011bbaf:	89 c2                	mov    %eax,%edx
f011bbb1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bbb7:	01 d0                	add    %edx,%eax
f011bbb9:	48                   	dec    %eax
f011bbba:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bbc0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bbc6:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbcb:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bbd1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bbd7:	29 d0                	sub    %edx,%eax
f011bbd9:	01 d8                	add    %ebx,%eax
f011bbdb:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011bbe0:	39 c1                	cmp    %eax,%ecx
f011bbe2:	74 17                	je     f011bbfb <test_kmalloc_bestfit2+0x6d6>
f011bbe4:	83 ec 04             	sub    $0x4,%esp
f011bbe7:	68 54 b9 13 f0       	push   $0xf013b954
f011bbec:	68 70 02 00 00       	push   $0x270
f011bbf1:	68 3a b5 13 f0       	push   $0xf013b53a
f011bbf6:	e8 0a 46 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bbfb:	e8 c8 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bc00:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc03:	74 17                	je     f011bc1c <test_kmalloc_bestfit2+0x6f7>
f011bc05:	83 ec 04             	sub    $0x4,%esp
f011bc08:	68 54 b5 13 f0       	push   $0xf013b554
f011bc0d:	68 71 02 00 00       	push   $0x271
f011bc12:	68 3a b5 13 f0       	push   $0xf013b53a
f011bc17:	e8 e9 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011bc1c:	e8 70 11 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011bc21:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bc24:	29 c2                	sub    %eax,%edx
f011bc26:	89 d0                	mov    %edx,%eax
f011bc28:	83 f8 02             	cmp    $0x2,%eax
f011bc2b:	74 17                	je     f011bc44 <test_kmalloc_bestfit2+0x71f>
f011bc2d:	83 ec 04             	sub    $0x4,%esp
f011bc30:	68 84 b9 13 f0       	push   $0xf013b984
f011bc35:	68 72 02 00 00       	push   $0x272
f011bc3a:	68 3a b5 13 f0       	push   $0xf013b53a
f011bc3f:	e8 c1 45 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bc44:	e8 48 11 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011bc49:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc4c:	e8 77 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bc51:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011bc54:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bc5a:	83 ec 0c             	sub    $0xc,%esp
f011bc5d:	50                   	push   %eax
f011bc5e:	e8 e2 be fe ff       	call   f0107b45 <kfree>
f011bc63:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc66:	e8 5d 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bc6b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc6e:	74 17                	je     f011bc87 <test_kmalloc_bestfit2+0x762>
f011bc70:	83 ec 04             	sub    $0x4,%esp
f011bc73:	68 54 b5 13 f0       	push   $0xf013b554
f011bc78:	68 78 02 00 00       	push   $0x278
f011bc7d:	68 3a b5 13 f0       	push   $0xf013b53a
f011bc82:	e8 7e 45 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011bc87:	e8 05 11 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011bc8c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bc8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bc94:	74 17                	je     f011bcad <test_kmalloc_bestfit2+0x788>
f011bc96:	83 ec 04             	sub    $0x4,%esp
f011bc99:	68 08 b8 13 f0       	push   $0xf013b808
f011bc9e:	68 79 02 00 00       	push   $0x279
f011bca3:	68 3a b5 13 f0       	push   $0xf013b53a
f011bca8:	e8 58 45 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bcad:	e8 df 10 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011bcb2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcb5:	e8 0e 81 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bcba:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bcbd:	83 ec 0c             	sub    $0xc,%esp
f011bcc0:	68 00 fc 2f 00       	push   $0x2ffc00
f011bcc5:	e8 b0 bd fe ff       	call   f0107a7a <kmalloc>
f011bcca:	83 c4 10             	add    $0x10,%esp
f011bccd:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bcd3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bcd9:	89 c1                	mov    %eax,%ecx
f011bcdb:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011bce2:	10 00 00 
f011bce5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011bceb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bcf0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011bcf6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bcfc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd01:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011bd07:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bd0d:	29 d0                	sub    %edx,%eax
f011bd0f:	89 c3                	mov    %eax,%ebx
f011bd11:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011bd18:	10 00 00 
f011bd1b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bd20:	0f b6 d0             	movzbl %al,%edx
f011bd23:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011bd29:	01 d0                	add    %edx,%eax
f011bd2b:	48                   	dec    %eax
f011bd2c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011bd32:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bd38:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd3d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011bd43:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bd49:	29 d0                	sub    %edx,%eax
f011bd4b:	01 c3                	add    %eax,%ebx
f011bd4d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011bd54:	10 00 00 
f011bd57:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bd5c:	0f b6 c0             	movzbl %al,%eax
f011bd5f:	c1 e0 04             	shl    $0x4,%eax
f011bd62:	89 c2                	mov    %eax,%edx
f011bd64:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011bd6a:	01 d0                	add    %edx,%eax
f011bd6c:	48                   	dec    %eax
f011bd6d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011bd73:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bd79:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd7e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011bd84:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bd8a:	29 d0                	sub    %edx,%eax
f011bd8c:	01 d8                	add    %ebx,%eax
f011bd8e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bd93:	39 c1                	cmp    %eax,%ecx
f011bd95:	74 17                	je     f011bdae <test_kmalloc_bestfit2+0x889>
f011bd97:	83 ec 04             	sub    $0x4,%esp
f011bd9a:	68 54 b9 13 f0       	push   $0xf013b954
f011bd9f:	68 7f 02 00 00       	push   $0x27f
f011bda4:	68 3a b5 13 f0       	push   $0xf013b53a
f011bda9:	e8 57 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bdae:	e8 15 80 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bdb3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bdb6:	74 17                	je     f011bdcf <test_kmalloc_bestfit2+0x8aa>
f011bdb8:	83 ec 04             	sub    $0x4,%esp
f011bdbb:	68 54 b5 13 f0       	push   $0xf013b554
f011bdc0:	68 80 02 00 00       	push   $0x280
f011bdc5:	68 3a b5 13 f0       	push   $0xf013b53a
f011bdca:	e8 36 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bdcf:	e8 bd 0f ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011bdd4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bdd7:	29 c2                	sub    %eax,%edx
f011bdd9:	89 d0                	mov    %edx,%eax
f011bddb:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bde0:	74 17                	je     f011bdf9 <test_kmalloc_bestfit2+0x8d4>
f011bde2:	83 ec 04             	sub    $0x4,%esp
f011bde5:	68 84 b9 13 f0       	push   $0xf013b984
f011bdea:	68 81 02 00 00       	push   $0x281
f011bdef:	68 3a b5 13 f0       	push   $0xf013b53a
f011bdf4:	e8 0c 44 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011bdf9:	e8 93 0f ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011bdfe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be01:	e8 c2 7f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011be06:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011be09:	83 ec 0c             	sub    $0xc,%esp
f011be0c:	68 00 18 20 00       	push   $0x201800
f011be11:	e8 64 bc fe ff       	call   f0107a7a <kmalloc>
f011be16:	83 c4 10             	add    $0x10,%esp
f011be19:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011be1f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011be25:	89 c1                	mov    %eax,%ecx
f011be27:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011be2e:	10 00 00 
f011be31:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011be37:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be3c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011be42:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011be48:	ba 00 00 00 00       	mov    $0x0,%edx
f011be4d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011be53:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011be59:	29 d0                	sub    %edx,%eax
f011be5b:	89 c3                	mov    %eax,%ebx
f011be5d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011be64:	10 00 00 
f011be67:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011be6c:	0f b6 d0             	movzbl %al,%edx
f011be6f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011be75:	01 d0                	add    %edx,%eax
f011be77:	48                   	dec    %eax
f011be78:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011be7e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011be84:	ba 00 00 00 00       	mov    $0x0,%edx
f011be89:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011be8f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011be95:	29 d0                	sub    %edx,%eax
f011be97:	01 c3                	add    %eax,%ebx
f011be99:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011bea0:	10 00 00 
f011bea3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bea8:	0f b6 c0             	movzbl %al,%eax
f011beab:	c1 e0 04             	shl    $0x4,%eax
f011beae:	89 c2                	mov    %eax,%edx
f011beb0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011beb6:	01 d0                	add    %edx,%eax
f011beb8:	48                   	dec    %eax
f011beb9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011bebf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bec5:	ba 00 00 00 00       	mov    $0x0,%edx
f011beca:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011bed0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bed6:	29 d0                	sub    %edx,%eax
f011bed8:	01 d8                	add    %ebx,%eax
f011beda:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bedf:	39 c1                	cmp    %eax,%ecx
f011bee1:	74 17                	je     f011befa <test_kmalloc_bestfit2+0x9d5>
f011bee3:	83 ec 04             	sub    $0x4,%esp
f011bee6:	68 54 b9 13 f0       	push   $0xf013b954
f011beeb:	68 87 02 00 00       	push   $0x287
f011bef0:	68 3a b5 13 f0       	push   $0xf013b53a
f011bef5:	e8 0b 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011befa:	e8 c9 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011beff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bf02:	74 17                	je     f011bf1b <test_kmalloc_bestfit2+0x9f6>
f011bf04:	83 ec 04             	sub    $0x4,%esp
f011bf07:	68 54 b5 13 f0       	push   $0xf013b554
f011bf0c:	68 88 02 00 00       	push   $0x288
f011bf11:	68 3a b5 13 f0       	push   $0xf013b53a
f011bf16:	e8 ea 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011bf1b:	e8 71 0e ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011bf20:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bf23:	29 c2                	sub    %eax,%edx
f011bf25:	89 d0                	mov    %edx,%eax
f011bf27:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bf2c:	74 17                	je     f011bf45 <test_kmalloc_bestfit2+0xa20>
f011bf2e:	83 ec 04             	sub    $0x4,%esp
f011bf31:	68 84 b9 13 f0       	push   $0xf013b984
f011bf36:	68 89 02 00 00       	push   $0x289
f011bf3b:	68 3a b5 13 f0       	push   $0xf013b53a
f011bf40:	e8 c0 42 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011bf45:	e8 47 0e ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011bf4a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf4d:	e8 76 7e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011bf52:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011bf55:	83 ec 0c             	sub    $0xc,%esp
f011bf58:	68 00 fc 4f 00       	push   $0x4ffc00
f011bf5d:	e8 18 bb fe ff       	call   f0107a7a <kmalloc>
f011bf62:	83 c4 10             	add    $0x10,%esp
f011bf65:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bf6b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011bf71:	89 c1                	mov    %eax,%ecx
f011bf73:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011bf7a:	10 00 00 
f011bf7d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011bf83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf88:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011bf8e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bf94:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf99:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011bf9f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bfa5:	29 d0                	sub    %edx,%eax
f011bfa7:	89 c3                	mov    %eax,%ebx
f011bfa9:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011bfb0:	10 00 00 
f011bfb3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bfb8:	0f b6 d0             	movzbl %al,%edx
f011bfbb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011bfc1:	01 d0                	add    %edx,%eax
f011bfc3:	48                   	dec    %eax
f011bfc4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011bfca:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bfd0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfd5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011bfdb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bfe1:	29 d0                	sub    %edx,%eax
f011bfe3:	01 c3                	add    %eax,%ebx
f011bfe5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011bfec:	10 00 00 
f011bfef:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011bff4:	0f b6 c0             	movzbl %al,%eax
f011bff7:	c1 e0 04             	shl    $0x4,%eax
f011bffa:	89 c2                	mov    %eax,%edx
f011bffc:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c002:	01 d0                	add    %edx,%eax
f011c004:	48                   	dec    %eax
f011c005:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c00b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c011:	ba 00 00 00 00       	mov    $0x0,%edx
f011c016:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c01c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c022:	29 d0                	sub    %edx,%eax
f011c024:	01 d8                	add    %ebx,%eax
f011c026:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c02b:	39 c1                	cmp    %eax,%ecx
f011c02d:	74 17                	je     f011c046 <test_kmalloc_bestfit2+0xb21>
f011c02f:	83 ec 04             	sub    $0x4,%esp
f011c032:	68 54 b9 13 f0       	push   $0xf013b954
f011c037:	68 8f 02 00 00       	push   $0x28f
f011c03c:	68 3a b5 13 f0       	push   $0xf013b53a
f011c041:	e8 bf 41 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c046:	e8 7d 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c04b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c04e:	74 17                	je     f011c067 <test_kmalloc_bestfit2+0xb42>
f011c050:	83 ec 04             	sub    $0x4,%esp
f011c053:	68 54 b5 13 f0       	push   $0xf013b554
f011c058:	68 90 02 00 00       	push   $0x290
f011c05d:	68 3a b5 13 f0       	push   $0xf013b53a
f011c062:	e8 9e 41 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c067:	e8 25 0d ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c06c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c06f:	29 c2                	sub    %eax,%edx
f011c071:	89 d0                	mov    %edx,%eax
f011c073:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c078:	74 17                	je     f011c091 <test_kmalloc_bestfit2+0xb6c>
f011c07a:	83 ec 04             	sub    $0x4,%esp
f011c07d:	68 84 b9 13 f0       	push   $0xf013b984
f011c082:	68 91 02 00 00       	push   $0x291
f011c087:	68 3a b5 13 f0       	push   $0xf013b53a
f011c08c:	e8 74 41 fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c091:	e8 fb 0c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c096:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c099:	e8 2a 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c09e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c0a1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c0a7:	83 ec 0c             	sub    $0xc,%esp
f011c0aa:	50                   	push   %eax
f011c0ab:	e8 95 ba fe ff       	call   f0107b45 <kfree>
f011c0b0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0b3:	e8 10 7d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c0b8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c0bb:	74 17                	je     f011c0d4 <test_kmalloc_bestfit2+0xbaf>
f011c0bd:	83 ec 04             	sub    $0x4,%esp
f011c0c0:	68 54 b5 13 f0       	push   $0xf013b554
f011c0c5:	68 97 02 00 00       	push   $0x297
f011c0ca:	68 3a b5 13 f0       	push   $0xf013b53a
f011c0cf:	e8 31 41 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c0d4:	e8 b8 0c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c0d9:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c0dc:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c0e1:	74 17                	je     f011c0fa <test_kmalloc_bestfit2+0xbd5>
f011c0e3:	83 ec 04             	sub    $0x4,%esp
f011c0e6:	68 08 b8 13 f0       	push   $0xf013b808
f011c0eb:	68 98 02 00 00       	push   $0x298
f011c0f0:	68 3a b5 13 f0       	push   $0xf013b53a
f011c0f5:	e8 0b 41 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c0fa:	e8 92 0c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c0ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c102:	e8 c1 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c107:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c10a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c110:	83 ec 0c             	sub    $0xc,%esp
f011c113:	50                   	push   %eax
f011c114:	e8 2c ba fe ff       	call   f0107b45 <kfree>
f011c119:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c11c:	e8 a7 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c121:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c124:	74 17                	je     f011c13d <test_kmalloc_bestfit2+0xc18>
f011c126:	83 ec 04             	sub    $0x4,%esp
f011c129:	68 54 b5 13 f0       	push   $0xf013b554
f011c12e:	68 9e 02 00 00       	push   $0x29e
f011c133:	68 3a b5 13 f0       	push   $0xf013b53a
f011c138:	e8 c8 40 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c13d:	e8 4f 0c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c142:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c145:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c14a:	74 17                	je     f011c163 <test_kmalloc_bestfit2+0xc3e>
f011c14c:	83 ec 04             	sub    $0x4,%esp
f011c14f:	68 34 ba 13 f0       	push   $0xf013ba34
f011c154:	68 9f 02 00 00       	push   $0x29f
f011c159:	68 3a b5 13 f0       	push   $0xf013b53a
f011c15e:	e8 a2 40 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c163:	e8 29 0c ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c168:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c16b:	e8 58 7c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c170:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c173:	83 ec 0c             	sub    $0xc,%esp
f011c176:	68 00 fc 1f 00       	push   $0x1ffc00
f011c17b:	e8 fa b8 fe ff       	call   f0107a7a <kmalloc>
f011c180:	83 c4 10             	add    $0x10,%esp
f011c183:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c189:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c18f:	89 c1                	mov    %eax,%ecx
f011c191:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c198:	10 00 00 
f011c19b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c1a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c1a6:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c1ac:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c1b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1b7:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c1bd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c1c3:	29 d0                	sub    %edx,%eax
f011c1c5:	89 c3                	mov    %eax,%ebx
f011c1c7:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c1ce:	10 00 00 
f011c1d1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c1d6:	0f b6 d0             	movzbl %al,%edx
f011c1d9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c1df:	01 d0                	add    %edx,%eax
f011c1e1:	48                   	dec    %eax
f011c1e2:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c1e8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c1ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1f3:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c1f9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c1ff:	29 d0                	sub    %edx,%eax
f011c201:	01 c3                	add    %eax,%ebx
f011c203:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c20a:	10 00 00 
f011c20d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c212:	0f b6 c0             	movzbl %al,%eax
f011c215:	c1 e0 04             	shl    $0x4,%eax
f011c218:	89 c2                	mov    %eax,%edx
f011c21a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c220:	01 d0                	add    %edx,%eax
f011c222:	48                   	dec    %eax
f011c223:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c229:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c22f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c234:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c23a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c240:	29 d0                	sub    %edx,%eax
f011c242:	01 d8                	add    %ebx,%eax
f011c244:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c249:	39 c1                	cmp    %eax,%ecx
f011c24b:	74 17                	je     f011c264 <test_kmalloc_bestfit2+0xd3f>
f011c24d:	83 ec 04             	sub    $0x4,%esp
f011c250:	68 54 b9 13 f0       	push   $0xf013b954
f011c255:	68 a5 02 00 00       	push   $0x2a5
f011c25a:	68 3a b5 13 f0       	push   $0xf013b53a
f011c25f:	e8 a1 3f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c264:	e8 5f 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c269:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c26c:	74 17                	je     f011c285 <test_kmalloc_bestfit2+0xd60>
f011c26e:	83 ec 04             	sub    $0x4,%esp
f011c271:	68 54 b5 13 f0       	push   $0xf013b554
f011c276:	68 a6 02 00 00       	push   $0x2a6
f011c27b:	68 3a b5 13 f0       	push   $0xf013b53a
f011c280:	e8 80 3f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c285:	e8 07 0b ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c28a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c28d:	29 c2                	sub    %eax,%edx
f011c28f:	89 d0                	mov    %edx,%eax
f011c291:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c296:	74 17                	je     f011c2af <test_kmalloc_bestfit2+0xd8a>
f011c298:	83 ec 04             	sub    $0x4,%esp
f011c29b:	68 72 ba 13 f0       	push   $0xf013ba72
f011c2a0:	68 a7 02 00 00       	push   $0x2a7
f011c2a5:	68 3a b5 13 f0       	push   $0xf013b53a
f011c2aa:	e8 56 3f fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c2af:	e8 dd 0a ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c2b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c2b7:	e8 0c 7b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c2bc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c2bf:	83 ec 0c             	sub    $0xc,%esp
f011c2c2:	68 00 18 00 00       	push   $0x1800
f011c2c7:	e8 ae b7 fe ff       	call   f0107a7a <kmalloc>
f011c2cc:	83 c4 10             	add    $0x10,%esp
f011c2cf:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c2d5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c2db:	89 c1                	mov    %eax,%ecx
f011c2dd:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c2e4:	10 00 00 
f011c2e7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c2ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2f2:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c2f8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c2fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011c303:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c309:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c30f:	29 d0                	sub    %edx,%eax
f011c311:	89 c3                	mov    %eax,%ebx
f011c313:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c31a:	10 00 00 
f011c31d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c322:	0f b6 d0             	movzbl %al,%edx
f011c325:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c32b:	01 d0                	add    %edx,%eax
f011c32d:	48                   	dec    %eax
f011c32e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c334:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c33a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c33f:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c345:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c34b:	29 d0                	sub    %edx,%eax
f011c34d:	01 c3                	add    %eax,%ebx
f011c34f:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c356:	10 00 00 
f011c359:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c35e:	0f b6 c0             	movzbl %al,%eax
f011c361:	c1 e0 04             	shl    $0x4,%eax
f011c364:	89 c2                	mov    %eax,%edx
f011c366:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c36c:	01 d0                	add    %edx,%eax
f011c36e:	48                   	dec    %eax
f011c36f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c375:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c37b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c380:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c386:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c38c:	29 d0                	sub    %edx,%eax
f011c38e:	01 d8                	add    %ebx,%eax
f011c390:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c395:	39 c1                	cmp    %eax,%ecx
f011c397:	74 17                	je     f011c3b0 <test_kmalloc_bestfit2+0xe8b>
f011c399:	83 ec 04             	sub    $0x4,%esp
f011c39c:	68 54 b9 13 f0       	push   $0xf013b954
f011c3a1:	68 ad 02 00 00       	push   $0x2ad
f011c3a6:	68 3a b5 13 f0       	push   $0xf013b53a
f011c3ab:	e8 55 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3b0:	e8 13 7a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c3b5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c3b8:	74 17                	je     f011c3d1 <test_kmalloc_bestfit2+0xeac>
f011c3ba:	83 ec 04             	sub    $0x4,%esp
f011c3bd:	68 54 b5 13 f0       	push   $0xf013b554
f011c3c2:	68 ae 02 00 00       	push   $0x2ae
f011c3c7:	68 3a b5 13 f0       	push   $0xf013b53a
f011c3cc:	e8 34 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c3d1:	e8 bb 09 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c3d6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c3d9:	29 c2                	sub    %eax,%edx
f011c3db:	89 d0                	mov    %edx,%eax
f011c3dd:	83 f8 02             	cmp    $0x2,%eax
f011c3e0:	74 17                	je     f011c3f9 <test_kmalloc_bestfit2+0xed4>
f011c3e2:	83 ec 04             	sub    $0x4,%esp
f011c3e5:	68 72 ba 13 f0       	push   $0xf013ba72
f011c3ea:	68 af 02 00 00       	push   $0x2af
f011c3ef:	68 3a b5 13 f0       	push   $0xf013b53a
f011c3f4:	e8 0c 3e fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c3f9:	e8 93 09 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c3fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c401:	e8 c2 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c406:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c409:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c40f:	83 ec 0c             	sub    $0xc,%esp
f011c412:	50                   	push   %eax
f011c413:	e8 2d b7 fe ff       	call   f0107b45 <kfree>
f011c418:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c41b:	e8 a8 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c420:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c423:	74 17                	je     f011c43c <test_kmalloc_bestfit2+0xf17>
f011c425:	83 ec 04             	sub    $0x4,%esp
f011c428:	68 54 b5 13 f0       	push   $0xf013b554
f011c42d:	68 b5 02 00 00       	push   $0x2b5
f011c432:	68 3a b5 13 f0       	push   $0xf013b53a
f011c437:	e8 c9 3d fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c43c:	e8 50 09 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c441:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c444:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c449:	74 17                	je     f011c462 <test_kmalloc_bestfit2+0xf3d>
f011c44b:	83 ec 04             	sub    $0x4,%esp
f011c44e:	68 34 ba 13 f0       	push   $0xf013ba34
f011c453:	68 b6 02 00 00       	push   $0x2b6
f011c458:	68 3a b5 13 f0       	push   $0xf013b53a
f011c45d:	e8 a3 3d fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c462:	e8 2a 09 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c467:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c46a:	e8 59 79 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c46f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c472:	83 ec 0c             	sub    $0xc,%esp
f011c475:	68 00 fc 2f 00       	push   $0x2ffc00
f011c47a:	e8 fb b5 fe ff       	call   f0107a7a <kmalloc>
f011c47f:	83 c4 10             	add    $0x10,%esp
f011c482:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c488:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c48e:	89 c1                	mov    %eax,%ecx
f011c490:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c497:	10 00 00 
f011c49a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c4a0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c4a5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c4ab:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c4b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4b6:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c4bc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c4c2:	29 d0                	sub    %edx,%eax
f011c4c4:	89 c3                	mov    %eax,%ebx
f011c4c6:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c4cd:	10 00 00 
f011c4d0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c4d5:	0f b6 d0             	movzbl %al,%edx
f011c4d8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c4de:	01 d0                	add    %edx,%eax
f011c4e0:	48                   	dec    %eax
f011c4e1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c4e7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c4ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4f2:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c4f8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c4fe:	29 d0                	sub    %edx,%eax
f011c500:	01 c3                	add    %eax,%ebx
f011c502:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c509:	10 00 00 
f011c50c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c511:	0f b6 c0             	movzbl %al,%eax
f011c514:	c1 e0 04             	shl    $0x4,%eax
f011c517:	89 c2                	mov    %eax,%edx
f011c519:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c51f:	01 d0                	add    %edx,%eax
f011c521:	48                   	dec    %eax
f011c522:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c528:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c52e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c533:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c539:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c53f:	29 d0                	sub    %edx,%eax
f011c541:	01 d8                	add    %ebx,%eax
f011c543:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c548:	39 c1                	cmp    %eax,%ecx
f011c54a:	74 17                	je     f011c563 <test_kmalloc_bestfit2+0x103e>
f011c54c:	83 ec 04             	sub    $0x4,%esp
f011c54f:	68 54 b9 13 f0       	push   $0xf013b954
f011c554:	68 bc 02 00 00       	push   $0x2bc
f011c559:	68 3a b5 13 f0       	push   $0xf013b53a
f011c55e:	e8 a2 3c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c563:	e8 60 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c568:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c56b:	74 17                	je     f011c584 <test_kmalloc_bestfit2+0x105f>
f011c56d:	83 ec 04             	sub    $0x4,%esp
f011c570:	68 54 b5 13 f0       	push   $0xf013b554
f011c575:	68 bd 02 00 00       	push   $0x2bd
f011c57a:	68 3a b5 13 f0       	push   $0xf013b53a
f011c57f:	e8 81 3c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c584:	e8 08 08 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c589:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c58c:	29 c2                	sub    %eax,%edx
f011c58e:	89 d0                	mov    %edx,%eax
f011c590:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c595:	74 17                	je     f011c5ae <test_kmalloc_bestfit2+0x1089>
f011c597:	83 ec 04             	sub    $0x4,%esp
f011c59a:	68 34 ba 13 f0       	push   $0xf013ba34
f011c59f:	68 be 02 00 00       	push   $0x2be
f011c5a4:	68 3a b5 13 f0       	push   $0xf013b53a
f011c5a9:	e8 57 3c fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c5ae:	e8 de 07 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c5b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c5b6:	e8 0d 78 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c5bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c5be:	83 ec 0c             	sub    $0xc,%esp
f011c5c1:	68 00 fc 3f 00       	push   $0x3ffc00
f011c5c6:	e8 af b4 fe ff       	call   f0107a7a <kmalloc>
f011c5cb:	83 c4 10             	add    $0x10,%esp
f011c5ce:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c5d4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c5da:	89 c1                	mov    %eax,%ecx
f011c5dc:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c5e3:	10 00 00 
f011c5e6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c5ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c5f1:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c5f7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c5fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c602:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c608:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c60e:	29 d0                	sub    %edx,%eax
f011c610:	89 c3                	mov    %eax,%ebx
f011c612:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c619:	10 00 00 
f011c61c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c621:	0f b6 d0             	movzbl %al,%edx
f011c624:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c62a:	01 d0                	add    %edx,%eax
f011c62c:	48                   	dec    %eax
f011c62d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c633:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c639:	ba 00 00 00 00       	mov    $0x0,%edx
f011c63e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c644:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c64a:	29 d0                	sub    %edx,%eax
f011c64c:	01 c3                	add    %eax,%ebx
f011c64e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c655:	10 00 00 
f011c658:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c65d:	0f b6 c0             	movzbl %al,%eax
f011c660:	c1 e0 04             	shl    $0x4,%eax
f011c663:	89 c2                	mov    %eax,%edx
f011c665:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c66b:	01 d0                	add    %edx,%eax
f011c66d:	48                   	dec    %eax
f011c66e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c674:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c67a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c67f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c685:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c68b:	29 d0                	sub    %edx,%eax
f011c68d:	01 d8                	add    %ebx,%eax
f011c68f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c694:	39 c1                	cmp    %eax,%ecx
f011c696:	74 17                	je     f011c6af <test_kmalloc_bestfit2+0x118a>
f011c698:	83 ec 04             	sub    $0x4,%esp
f011c69b:	68 54 b9 13 f0       	push   $0xf013b954
f011c6a0:	68 c4 02 00 00       	push   $0x2c4
f011c6a5:	68 3a b5 13 f0       	push   $0xf013b53a
f011c6aa:	e8 56 3b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6af:	e8 14 77 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c6b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c6b7:	74 17                	je     f011c6d0 <test_kmalloc_bestfit2+0x11ab>
f011c6b9:	83 ec 04             	sub    $0x4,%esp
f011c6bc:	68 54 b5 13 f0       	push   $0xf013b554
f011c6c1:	68 c5 02 00 00       	push   $0x2c5
f011c6c6:	68 3a b5 13 f0       	push   $0xf013b53a
f011c6cb:	e8 35 3b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c6d0:	e8 bc 06 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c6d5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c6d8:	29 c2                	sub    %eax,%edx
f011c6da:	89 d0                	mov    %edx,%eax
f011c6dc:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c6e1:	74 17                	je     f011c6fa <test_kmalloc_bestfit2+0x11d5>
f011c6e3:	83 ec 04             	sub    $0x4,%esp
f011c6e6:	68 34 ba 13 f0       	push   $0xf013ba34
f011c6eb:	68 c6 02 00 00       	push   $0x2c6
f011c6f0:	68 3a b5 13 f0       	push   $0xf013b53a
f011c6f5:	e8 0b 3b fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c6fa:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c701:	10 00 00 
f011c704:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c70a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c70f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c715:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c71b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c720:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c726:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c72c:	29 d0                	sub    %edx,%eax
f011c72e:	89 c1                	mov    %eax,%ecx
f011c730:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c737:	10 00 00 
f011c73a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c73f:	0f b6 d0             	movzbl %al,%edx
f011c742:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c748:	01 d0                	add    %edx,%eax
f011c74a:	48                   	dec    %eax
f011c74b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c751:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c757:	ba 00 00 00 00       	mov    $0x0,%edx
f011c75c:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c762:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c768:	29 d0                	sub    %edx,%eax
f011c76a:	01 c1                	add    %eax,%ecx
f011c76c:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c773:	10 00 00 
f011c776:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c77b:	0f b6 c0             	movzbl %al,%eax
f011c77e:	c1 e0 04             	shl    $0x4,%eax
f011c781:	89 c2                	mov    %eax,%edx
f011c783:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c789:	01 d0                	add    %edx,%eax
f011c78b:	48                   	dec    %eax
f011c78c:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c792:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c798:	ba 00 00 00 00       	mov    $0x0,%edx
f011c79d:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c7a3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c7a9:	29 d0                	sub    %edx,%eax
f011c7ab:	01 c8                	add    %ecx,%eax
f011c7ad:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c7b2:	29 c2                	sub    %eax,%edx
f011c7b4:	89 d0                	mov    %edx,%eax
f011c7b6:	83 ec 0c             	sub    $0xc,%esp
f011c7b9:	50                   	push   %eax
f011c7ba:	e8 bb b2 fe ff       	call   f0107a7a <kmalloc>
f011c7bf:	83 c4 10             	add    $0x10,%esp
f011c7c2:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c7c8:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c7ce:	85 c0                	test   %eax,%eax
f011c7d0:	74 17                	je     f011c7e9 <test_kmalloc_bestfit2+0x12c4>
f011c7d2:	83 ec 04             	sub    $0x4,%esp
f011c7d5:	68 84 ba 13 f0       	push   $0xf013ba84
f011c7da:	68 ce 02 00 00       	push   $0x2ce
f011c7df:	68 3a b5 13 f0       	push   $0xf013b53a
f011c7e4:	e8 1c 3a fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c7e9:	83 ec 0c             	sub    $0xc,%esp
f011c7ec:	68 e8 ba 13 f0       	push   $0xf013bae8
f011c7f1:	e8 18 45 fe ff       	call   f0100d0e <cprintf>
f011c7f6:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c7f9:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c7fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c801:	5b                   	pop    %ebx
f011c802:	5f                   	pop    %edi
f011c803:	5d                   	pop    %ebp
f011c804:	c3                   	ret    

f011c805 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c805:	55                   	push   %ebp
f011c806:	89 e5                	mov    %esp,%ebp
f011c808:	57                   	push   %edi
f011c809:	53                   	push   %ebx
f011c80a:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011c810:	83 ec 0c             	sub    $0xc,%esp
f011c813:	68 7c b4 13 f0       	push   $0xf013b47c
f011c818:	e8 f1 44 fe ff       	call   f0100d0e <cprintf>
f011c81d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c820:	83 ec 0c             	sub    $0xc,%esp
f011c823:	68 ac b4 13 f0       	push   $0xf013b4ac
f011c828:	e8 e1 44 fe ff       	call   f0100d0e <cprintf>
f011c82d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c830:	83 ec 0c             	sub    $0xc,%esp
f011c833:	68 7c b4 13 f0       	push   $0xf013b47c
f011c838:	e8 d1 44 fe ff       	call   f0100d0e <cprintf>
f011c83d:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c840:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011c846:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c84b:	b8 00 00 00 00       	mov    $0x0,%eax
f011c850:	89 d7                	mov    %edx,%edi
f011c852:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c854:	e8 38 05 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c859:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c85c:	e8 67 75 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c861:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c864:	83 ec 0c             	sub    $0xc,%esp
f011c867:	68 00 fc 0f 00       	push   $0xffc00
f011c86c:	e8 09 b2 fe ff       	call   f0107a7a <kmalloc>
f011c871:	83 c4 10             	add    $0x10,%esp
f011c874:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c87a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c880:	89 c1                	mov    %eax,%ecx
f011c882:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c889:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c88c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c891:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c894:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c897:	ba 00 00 00 00       	mov    $0x0,%edx
f011c89c:	f7 75 ec             	divl   -0x14(%ebp)
f011c89f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c8a2:	29 d0                	sub    %edx,%eax
f011c8a4:	89 c3                	mov    %eax,%ebx
f011c8a6:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c8ad:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c8b2:	0f b6 d0             	movzbl %al,%edx
f011c8b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c8b8:	01 d0                	add    %edx,%eax
f011c8ba:	48                   	dec    %eax
f011c8bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c8be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c8c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8c6:	f7 75 e4             	divl   -0x1c(%ebp)
f011c8c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c8cc:	29 d0                	sub    %edx,%eax
f011c8ce:	01 c3                	add    %eax,%ebx
f011c8d0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c8d7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c8dc:	0f b6 c0             	movzbl %al,%eax
f011c8df:	c1 e0 04             	shl    $0x4,%eax
f011c8e2:	89 c2                	mov    %eax,%edx
f011c8e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c8e7:	01 d0                	add    %edx,%eax
f011c8e9:	48                   	dec    %eax
f011c8ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c8ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c8f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8f5:	f7 75 dc             	divl   -0x24(%ebp)
f011c8f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c8fb:	29 d0                	sub    %edx,%eax
f011c8fd:	01 d8                	add    %ebx,%eax
f011c8ff:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c904:	39 c1                	cmp    %eax,%ecx
f011c906:	74 17                	je     f011c91f <test_kmalloc_firstfit1+0x11a>
f011c908:	83 ec 04             	sub    $0x4,%esp
f011c90b:	68 54 b9 13 f0       	push   $0xf013b954
f011c910:	68 e6 02 00 00       	push   $0x2e6
f011c915:	68 3a b5 13 f0       	push   $0xf013b53a
f011c91a:	e8 e6 38 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c91f:	e8 a4 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c924:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c927:	74 17                	je     f011c940 <test_kmalloc_firstfit1+0x13b>
f011c929:	83 ec 04             	sub    $0x4,%esp
f011c92c:	68 54 b5 13 f0       	push   $0xf013b554
f011c931:	68 e7 02 00 00       	push   $0x2e7
f011c936:	68 3a b5 13 f0       	push   $0xf013b53a
f011c93b:	e8 c5 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c940:	e8 4c 04 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c945:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c948:	29 c2                	sub    %eax,%edx
f011c94a:	89 d0                	mov    %edx,%eax
f011c94c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c951:	74 17                	je     f011c96a <test_kmalloc_firstfit1+0x165>
f011c953:	83 ec 04             	sub    $0x4,%esp
f011c956:	68 84 b9 13 f0       	push   $0xf013b984
f011c95b:	68 e8 02 00 00       	push   $0x2e8
f011c960:	68 3a b5 13 f0       	push   $0xf013b53a
f011c965:	e8 9b 38 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c96a:	e8 22 04 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011c96f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c972:	e8 51 74 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011c977:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c97a:	83 ec 0c             	sub    $0xc,%esp
f011c97d:	68 00 fc 0f 00       	push   $0xffc00
f011c982:	e8 f3 b0 fe ff       	call   f0107a7a <kmalloc>
f011c987:	83 c4 10             	add    $0x10,%esp
f011c98a:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c990:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c996:	89 c1                	mov    %eax,%ecx
f011c998:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c99f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c9a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c9a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c9aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c9ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9b2:	f7 75 d4             	divl   -0x2c(%ebp)
f011c9b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c9b8:	29 d0                	sub    %edx,%eax
f011c9ba:	89 c3                	mov    %eax,%ebx
f011c9bc:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c9c3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c9c8:	0f b6 d0             	movzbl %al,%edx
f011c9cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c9ce:	01 d0                	add    %edx,%eax
f011c9d0:	48                   	dec    %eax
f011c9d1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c9d4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c9d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c9dc:	f7 75 cc             	divl   -0x34(%ebp)
f011c9df:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c9e2:	29 d0                	sub    %edx,%eax
f011c9e4:	01 c3                	add    %eax,%ebx
f011c9e6:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c9ed:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011c9f2:	0f b6 c0             	movzbl %al,%eax
f011c9f5:	c1 e0 04             	shl    $0x4,%eax
f011c9f8:	89 c2                	mov    %eax,%edx
f011c9fa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c9fd:	01 d0                	add    %edx,%eax
f011c9ff:	48                   	dec    %eax
f011ca00:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ca03:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ca06:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca0b:	f7 75 c4             	divl   -0x3c(%ebp)
f011ca0e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ca11:	29 d0                	sub    %edx,%eax
f011ca13:	01 d8                	add    %ebx,%eax
f011ca15:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011ca1a:	39 c1                	cmp    %eax,%ecx
f011ca1c:	74 17                	je     f011ca35 <test_kmalloc_firstfit1+0x230>
f011ca1e:	83 ec 04             	sub    $0x4,%esp
f011ca21:	68 54 b9 13 f0       	push   $0xf013b954
f011ca26:	68 ee 02 00 00       	push   $0x2ee
f011ca2b:	68 3a b5 13 f0       	push   $0xf013b53a
f011ca30:	e8 d0 37 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca35:	e8 8e 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca3a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca3d:	74 17                	je     f011ca56 <test_kmalloc_firstfit1+0x251>
f011ca3f:	83 ec 04             	sub    $0x4,%esp
f011ca42:	68 54 b5 13 f0       	push   $0xf013b554
f011ca47:	68 ef 02 00 00       	push   $0x2ef
f011ca4c:	68 3a b5 13 f0       	push   $0xf013b53a
f011ca51:	e8 af 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ca56:	e8 36 03 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ca5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ca5e:	29 c2                	sub    %eax,%edx
f011ca60:	89 d0                	mov    %edx,%eax
f011ca62:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ca67:	74 17                	je     f011ca80 <test_kmalloc_firstfit1+0x27b>
f011ca69:	83 ec 04             	sub    $0x4,%esp
f011ca6c:	68 84 b9 13 f0       	push   $0xf013b984
f011ca71:	68 f0 02 00 00       	push   $0x2f0
f011ca76:	68 3a b5 13 f0       	push   $0xf013b53a
f011ca7b:	e8 85 37 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca80:	e8 0c 03 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ca85:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca88:	e8 3b 73 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ca8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011ca90:	83 ec 0c             	sub    $0xc,%esp
f011ca93:	68 00 fc 0f 00       	push   $0xffc00
f011ca98:	e8 dd af fe ff       	call   f0107a7a <kmalloc>
f011ca9d:	83 c4 10             	add    $0x10,%esp
f011caa0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011caa6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011caac:	89 c1                	mov    %eax,%ecx
f011caae:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cab5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cab8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cabd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cac0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cac3:	ba 00 00 00 00       	mov    $0x0,%edx
f011cac8:	f7 75 bc             	divl   -0x44(%ebp)
f011cacb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cace:	29 d0                	sub    %edx,%eax
f011cad0:	89 c3                	mov    %eax,%ebx
f011cad2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cad9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cade:	0f b6 d0             	movzbl %al,%edx
f011cae1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cae4:	01 d0                	add    %edx,%eax
f011cae6:	48                   	dec    %eax
f011cae7:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011caea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011caed:	ba 00 00 00 00       	mov    $0x0,%edx
f011caf2:	f7 75 b4             	divl   -0x4c(%ebp)
f011caf5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011caf8:	29 d0                	sub    %edx,%eax
f011cafa:	01 c3                	add    %eax,%ebx
f011cafc:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cb03:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cb08:	0f b6 c0             	movzbl %al,%eax
f011cb0b:	c1 e0 04             	shl    $0x4,%eax
f011cb0e:	89 c2                	mov    %eax,%edx
f011cb10:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cb13:	01 d0                	add    %edx,%eax
f011cb15:	48                   	dec    %eax
f011cb16:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cb19:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cb1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb21:	f7 75 ac             	divl   -0x54(%ebp)
f011cb24:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cb27:	29 d0                	sub    %edx,%eax
f011cb29:	01 d8                	add    %ebx,%eax
f011cb2b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cb30:	39 c1                	cmp    %eax,%ecx
f011cb32:	74 17                	je     f011cb4b <test_kmalloc_firstfit1+0x346>
f011cb34:	83 ec 04             	sub    $0x4,%esp
f011cb37:	68 54 b9 13 f0       	push   $0xf013b954
f011cb3c:	68 f6 02 00 00       	push   $0x2f6
f011cb41:	68 3a b5 13 f0       	push   $0xf013b53a
f011cb46:	e8 ba 36 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb4b:	e8 78 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cb50:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb53:	74 17                	je     f011cb6c <test_kmalloc_firstfit1+0x367>
f011cb55:	83 ec 04             	sub    $0x4,%esp
f011cb58:	68 54 b5 13 f0       	push   $0xf013b554
f011cb5d:	68 f7 02 00 00       	push   $0x2f7
f011cb62:	68 3a b5 13 f0       	push   $0xf013b53a
f011cb67:	e8 99 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cb6c:	e8 20 02 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011cb71:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb74:	29 c2                	sub    %eax,%edx
f011cb76:	89 d0                	mov    %edx,%eax
f011cb78:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb7d:	74 17                	je     f011cb96 <test_kmalloc_firstfit1+0x391>
f011cb7f:	83 ec 04             	sub    $0x4,%esp
f011cb82:	68 84 b9 13 f0       	push   $0xf013b984
f011cb87:	68 f8 02 00 00       	push   $0x2f8
f011cb8c:	68 3a b5 13 f0       	push   $0xf013b53a
f011cb91:	e8 6f 36 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb96:	e8 f6 01 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011cb9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb9e:	e8 25 72 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cba3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011cba6:	83 ec 0c             	sub    $0xc,%esp
f011cba9:	68 00 fc 0f 00       	push   $0xffc00
f011cbae:	e8 c7 ae fe ff       	call   f0107a7a <kmalloc>
f011cbb3:	83 c4 10             	add    $0x10,%esp
f011cbb6:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011cbbc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011cbc2:	89 c1                	mov    %eax,%ecx
f011cbc4:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cbcb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cbce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbd3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cbd6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cbd9:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbde:	f7 75 a4             	divl   -0x5c(%ebp)
f011cbe1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cbe4:	29 d0                	sub    %edx,%eax
f011cbe6:	89 c3                	mov    %eax,%ebx
f011cbe8:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cbef:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cbf4:	0f b6 d0             	movzbl %al,%edx
f011cbf7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cbfa:	01 d0                	add    %edx,%eax
f011cbfc:	48                   	dec    %eax
f011cbfd:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cc00:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cc03:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc08:	f7 75 9c             	divl   -0x64(%ebp)
f011cc0b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cc0e:	29 d0                	sub    %edx,%eax
f011cc10:	01 c3                	add    %eax,%ebx
f011cc12:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cc19:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cc1e:	0f b6 c0             	movzbl %al,%eax
f011cc21:	c1 e0 04             	shl    $0x4,%eax
f011cc24:	89 c2                	mov    %eax,%edx
f011cc26:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cc29:	01 d0                	add    %edx,%eax
f011cc2b:	48                   	dec    %eax
f011cc2c:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cc2f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cc32:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc37:	f7 75 94             	divl   -0x6c(%ebp)
f011cc3a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cc3d:	29 d0                	sub    %edx,%eax
f011cc3f:	01 d8                	add    %ebx,%eax
f011cc41:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011cc46:	39 c1                	cmp    %eax,%ecx
f011cc48:	74 17                	je     f011cc61 <test_kmalloc_firstfit1+0x45c>
f011cc4a:	83 ec 04             	sub    $0x4,%esp
f011cc4d:	68 54 b9 13 f0       	push   $0xf013b954
f011cc52:	68 fe 02 00 00       	push   $0x2fe
f011cc57:	68 3a b5 13 f0       	push   $0xf013b53a
f011cc5c:	e8 a4 35 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc61:	e8 62 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cc66:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc69:	74 17                	je     f011cc82 <test_kmalloc_firstfit1+0x47d>
f011cc6b:	83 ec 04             	sub    $0x4,%esp
f011cc6e:	68 54 b5 13 f0       	push   $0xf013b554
f011cc73:	68 ff 02 00 00       	push   $0x2ff
f011cc78:	68 3a b5 13 f0       	push   $0xf013b53a
f011cc7d:	e8 83 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cc82:	e8 0a 01 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011cc87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc8a:	29 c2                	sub    %eax,%edx
f011cc8c:	89 d0                	mov    %edx,%eax
f011cc8e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cc93:	74 17                	je     f011ccac <test_kmalloc_firstfit1+0x4a7>
f011cc95:	83 ec 04             	sub    $0x4,%esp
f011cc98:	68 84 b9 13 f0       	push   $0xf013b984
f011cc9d:	68 00 03 00 00       	push   $0x300
f011cca2:	68 3a b5 13 f0       	push   $0xf013b53a
f011cca7:	e8 59 35 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ccac:	e8 e0 00 ff ff       	call   f010cd91 <sys_calculate_free_frames>
f011ccb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccb4:	e8 0f 71 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ccb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011ccbc:	83 ec 0c             	sub    $0xc,%esp
f011ccbf:	68 00 fc 1f 00       	push   $0x1ffc00
f011ccc4:	e8 b1 ad fe ff       	call   f0107a7a <kmalloc>
f011ccc9:	83 c4 10             	add    $0x10,%esp
f011cccc:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ccd2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011ccd8:	89 c1                	mov    %eax,%ecx
f011ccda:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011cce1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011cce4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cce9:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ccec:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ccef:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccf4:	f7 75 8c             	divl   -0x74(%ebp)
f011ccf7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ccfa:	29 d0                	sub    %edx,%eax
f011ccfc:	89 c3                	mov    %eax,%ebx
f011ccfe:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011cd05:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cd0a:	0f b6 d0             	movzbl %al,%edx
f011cd0d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011cd10:	01 d0                	add    %edx,%eax
f011cd12:	48                   	dec    %eax
f011cd13:	89 45 80             	mov    %eax,-0x80(%ebp)
f011cd16:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cd19:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd1e:	f7 75 84             	divl   -0x7c(%ebp)
f011cd21:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cd24:	29 d0                	sub    %edx,%eax
f011cd26:	01 c3                	add    %eax,%ebx
f011cd28:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011cd2f:	10 00 00 
f011cd32:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cd37:	0f b6 c0             	movzbl %al,%eax
f011cd3a:	c1 e0 04             	shl    $0x4,%eax
f011cd3d:	89 c2                	mov    %eax,%edx
f011cd3f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011cd45:	01 d0                	add    %edx,%eax
f011cd47:	48                   	dec    %eax
f011cd48:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cd4e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cd54:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd59:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011cd5f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cd65:	29 d0                	sub    %edx,%eax
f011cd67:	01 d8                	add    %ebx,%eax
f011cd69:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cd6e:	39 c1                	cmp    %eax,%ecx
f011cd70:	74 17                	je     f011cd89 <test_kmalloc_firstfit1+0x584>
f011cd72:	83 ec 04             	sub    $0x4,%esp
f011cd75:	68 54 b9 13 f0       	push   $0xf013b954
f011cd7a:	68 06 03 00 00       	push   $0x306
f011cd7f:	68 3a b5 13 f0       	push   $0xf013b53a
f011cd84:	e8 7c 34 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd89:	e8 3a 70 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cd8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd91:	74 17                	je     f011cdaa <test_kmalloc_firstfit1+0x5a5>
f011cd93:	83 ec 04             	sub    $0x4,%esp
f011cd96:	68 54 b5 13 f0       	push   $0xf013b554
f011cd9b:	68 07 03 00 00       	push   $0x307
f011cda0:	68 3a b5 13 f0       	push   $0xf013b53a
f011cda5:	e8 5b 34 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cdaa:	e8 e2 ff fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011cdaf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cdb2:	29 c2                	sub    %eax,%edx
f011cdb4:	89 d0                	mov    %edx,%eax
f011cdb6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cdbb:	74 17                	je     f011cdd4 <test_kmalloc_firstfit1+0x5cf>
f011cdbd:	83 ec 04             	sub    $0x4,%esp
f011cdc0:	68 84 b9 13 f0       	push   $0xf013b984
f011cdc5:	68 08 03 00 00       	push   $0x308
f011cdca:	68 3a b5 13 f0       	push   $0xf013b53a
f011cdcf:	e8 31 34 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cdd4:	e8 b8 ff fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011cdd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cddc:	e8 e7 6f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cde1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cde4:	83 ec 0c             	sub    $0xc,%esp
f011cde7:	68 00 fc 1f 00       	push   $0x1ffc00
f011cdec:	e8 89 ac fe ff       	call   f0107a7a <kmalloc>
f011cdf1:	83 c4 10             	add    $0x10,%esp
f011cdf4:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cdfa:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ce00:	89 c1                	mov    %eax,%ecx
f011ce02:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ce09:	10 00 00 
f011ce0c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ce12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce17:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ce1d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ce23:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce28:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ce2e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ce34:	29 d0                	sub    %edx,%eax
f011ce36:	89 c3                	mov    %eax,%ebx
f011ce38:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ce3f:	10 00 00 
f011ce42:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ce47:	0f b6 d0             	movzbl %al,%edx
f011ce4a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ce50:	01 d0                	add    %edx,%eax
f011ce52:	48                   	dec    %eax
f011ce53:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ce59:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ce5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce64:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ce6a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ce70:	29 d0                	sub    %edx,%eax
f011ce72:	01 c3                	add    %eax,%ebx
f011ce74:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ce7b:	10 00 00 
f011ce7e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ce83:	0f b6 c0             	movzbl %al,%eax
f011ce86:	c1 e0 04             	shl    $0x4,%eax
f011ce89:	89 c2                	mov    %eax,%edx
f011ce8b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ce91:	01 d0                	add    %edx,%eax
f011ce93:	48                   	dec    %eax
f011ce94:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ce9a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011cea0:	ba 00 00 00 00       	mov    $0x0,%edx
f011cea5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ceab:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ceb1:	29 d0                	sub    %edx,%eax
f011ceb3:	01 d8                	add    %ebx,%eax
f011ceb5:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011ceba:	39 c1                	cmp    %eax,%ecx
f011cebc:	74 17                	je     f011ced5 <test_kmalloc_firstfit1+0x6d0>
f011cebe:	83 ec 04             	sub    $0x4,%esp
f011cec1:	68 54 b9 13 f0       	push   $0xf013b954
f011cec6:	68 0e 03 00 00       	push   $0x30e
f011cecb:	68 3a b5 13 f0       	push   $0xf013b53a
f011ced0:	e8 30 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ced5:	e8 ee 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ceda:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cedd:	74 17                	je     f011cef6 <test_kmalloc_firstfit1+0x6f1>
f011cedf:	83 ec 04             	sub    $0x4,%esp
f011cee2:	68 54 b5 13 f0       	push   $0xf013b554
f011cee7:	68 0f 03 00 00       	push   $0x30f
f011ceec:	68 3a b5 13 f0       	push   $0xf013b53a
f011cef1:	e8 0f 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cef6:	e8 96 fe fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011cefb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cefe:	29 c2                	sub    %eax,%edx
f011cf00:	89 d0                	mov    %edx,%eax
f011cf02:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cf07:	74 17                	je     f011cf20 <test_kmalloc_firstfit1+0x71b>
f011cf09:	83 ec 04             	sub    $0x4,%esp
f011cf0c:	68 84 b9 13 f0       	push   $0xf013b984
f011cf11:	68 10 03 00 00       	push   $0x310
f011cf16:	68 3a b5 13 f0       	push   $0xf013b53a
f011cf1b:	e8 e5 32 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cf20:	e8 6c fe fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011cf25:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf28:	e8 9b 6e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011cf2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011cf30:	83 ec 0c             	sub    $0xc,%esp
f011cf33:	68 00 fc 2f 00       	push   $0x2ffc00
f011cf38:	e8 3d ab fe ff       	call   f0107a7a <kmalloc>
f011cf3d:	83 c4 10             	add    $0x10,%esp
f011cf40:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011cf46:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011cf4c:	89 c1                	mov    %eax,%ecx
f011cf4e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011cf55:	10 00 00 
f011cf58:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011cf5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf63:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011cf69:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cf6f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf74:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011cf7a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011cf80:	29 d0                	sub    %edx,%eax
f011cf82:	89 c3                	mov    %eax,%ebx
f011cf84:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011cf8b:	10 00 00 
f011cf8e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cf93:	0f b6 d0             	movzbl %al,%edx
f011cf96:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011cf9c:	01 d0                	add    %edx,%eax
f011cf9e:	48                   	dec    %eax
f011cf9f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011cfa5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cfab:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfb0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011cfb6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011cfbc:	29 d0                	sub    %edx,%eax
f011cfbe:	01 c3                	add    %eax,%ebx
f011cfc0:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011cfc7:	10 00 00 
f011cfca:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011cfcf:	0f b6 c0             	movzbl %al,%eax
f011cfd2:	c1 e0 04             	shl    $0x4,%eax
f011cfd5:	89 c2                	mov    %eax,%edx
f011cfd7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011cfdd:	01 d0                	add    %edx,%eax
f011cfdf:	48                   	dec    %eax
f011cfe0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011cfe6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011cfec:	ba 00 00 00 00       	mov    $0x0,%edx
f011cff1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011cff7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011cffd:	29 d0                	sub    %edx,%eax
f011cfff:	01 d8                	add    %ebx,%eax
f011d001:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d006:	39 c1                	cmp    %eax,%ecx
f011d008:	74 17                	je     f011d021 <test_kmalloc_firstfit1+0x81c>
f011d00a:	83 ec 04             	sub    $0x4,%esp
f011d00d:	68 54 b9 13 f0       	push   $0xf013b954
f011d012:	68 16 03 00 00       	push   $0x316
f011d017:	68 3a b5 13 f0       	push   $0xf013b53a
f011d01c:	e8 e4 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d021:	e8 a2 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d026:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d029:	74 17                	je     f011d042 <test_kmalloc_firstfit1+0x83d>
f011d02b:	83 ec 04             	sub    $0x4,%esp
f011d02e:	68 54 b5 13 f0       	push   $0xf013b554
f011d033:	68 17 03 00 00       	push   $0x317
f011d038:	68 3a b5 13 f0       	push   $0xf013b53a
f011d03d:	e8 c3 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d042:	e8 4a fd fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d047:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d04a:	29 c2                	sub    %eax,%edx
f011d04c:	89 d0                	mov    %edx,%eax
f011d04e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d053:	74 17                	je     f011d06c <test_kmalloc_firstfit1+0x867>
f011d055:	83 ec 04             	sub    $0x4,%esp
f011d058:	68 84 b9 13 f0       	push   $0xf013b984
f011d05d:	68 18 03 00 00       	push   $0x318
f011d062:	68 3a b5 13 f0       	push   $0xf013b53a
f011d067:	e8 99 31 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d06c:	e8 20 fd fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d071:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d074:	e8 4f 6d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d079:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d07c:	83 ec 0c             	sub    $0xc,%esp
f011d07f:	68 00 fc 2f 00       	push   $0x2ffc00
f011d084:	e8 f1 a9 fe ff       	call   f0107a7a <kmalloc>
f011d089:	83 c4 10             	add    $0x10,%esp
f011d08c:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d092:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d098:	89 c1                	mov    %eax,%ecx
f011d09a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d0a1:	10 00 00 
f011d0a4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d0aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d0af:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d0b5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d0bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0c0:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d0c6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d0cc:	29 d0                	sub    %edx,%eax
f011d0ce:	89 c3                	mov    %eax,%ebx
f011d0d0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d0d7:	10 00 00 
f011d0da:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d0df:	0f b6 d0             	movzbl %al,%edx
f011d0e2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d0e8:	01 d0                	add    %edx,%eax
f011d0ea:	48                   	dec    %eax
f011d0eb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d0f1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d0f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0fc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d102:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d108:	29 d0                	sub    %edx,%eax
f011d10a:	01 c3                	add    %eax,%ebx
f011d10c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d113:	10 00 00 
f011d116:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d11b:	0f b6 c0             	movzbl %al,%eax
f011d11e:	c1 e0 04             	shl    $0x4,%eax
f011d121:	89 c2                	mov    %eax,%edx
f011d123:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d129:	01 d0                	add    %edx,%eax
f011d12b:	48                   	dec    %eax
f011d12c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d132:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d138:	ba 00 00 00 00       	mov    $0x0,%edx
f011d13d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d143:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d149:	29 d0                	sub    %edx,%eax
f011d14b:	01 d8                	add    %ebx,%eax
f011d14d:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d152:	39 c1                	cmp    %eax,%ecx
f011d154:	74 17                	je     f011d16d <test_kmalloc_firstfit1+0x968>
f011d156:	83 ec 04             	sub    $0x4,%esp
f011d159:	68 54 b9 13 f0       	push   $0xf013b954
f011d15e:	68 1e 03 00 00       	push   $0x31e
f011d163:	68 3a b5 13 f0       	push   $0xf013b53a
f011d168:	e8 98 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d16d:	e8 56 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d172:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d175:	74 17                	je     f011d18e <test_kmalloc_firstfit1+0x989>
f011d177:	83 ec 04             	sub    $0x4,%esp
f011d17a:	68 54 b5 13 f0       	push   $0xf013b554
f011d17f:	68 1f 03 00 00       	push   $0x31f
f011d184:	68 3a b5 13 f0       	push   $0xf013b53a
f011d189:	e8 77 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d18e:	e8 fe fb fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d193:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d196:	29 c2                	sub    %eax,%edx
f011d198:	89 d0                	mov    %edx,%eax
f011d19a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d19f:	74 17                	je     f011d1b8 <test_kmalloc_firstfit1+0x9b3>
f011d1a1:	83 ec 04             	sub    $0x4,%esp
f011d1a4:	68 84 b9 13 f0       	push   $0xf013b984
f011d1a9:	68 20 03 00 00       	push   $0x320
f011d1ae:	68 3a b5 13 f0       	push   $0xf013b53a
f011d1b3:	e8 4d 30 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d1b8:	e8 d4 fb fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d1bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1c0:	e8 03 6c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d1c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d1c8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d1ce:	83 ec 0c             	sub    $0xc,%esp
f011d1d1:	50                   	push   %eax
f011d1d2:	e8 6e a9 fe ff       	call   f0107b45 <kfree>
f011d1d7:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1da:	e8 e9 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d1df:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1e2:	74 17                	je     f011d1fb <test_kmalloc_firstfit1+0x9f6>
f011d1e4:	83 ec 04             	sub    $0x4,%esp
f011d1e7:	68 54 b5 13 f0       	push   $0xf013b554
f011d1ec:	68 29 03 00 00       	push   $0x329
f011d1f1:	68 3a b5 13 f0       	push   $0xf013b53a
f011d1f6:	e8 0a 30 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d1fb:	e8 91 fb fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d200:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d203:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d208:	74 17                	je     f011d221 <test_kmalloc_firstfit1+0xa1c>
f011d20a:	83 ec 04             	sub    $0x4,%esp
f011d20d:	68 97 b9 13 f0       	push   $0xf013b997
f011d212:	68 2a 03 00 00       	push   $0x32a
f011d217:	68 3a b5 13 f0       	push   $0xf013b53a
f011d21c:	e8 e4 2f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d221:	e8 6b fb fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d226:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d229:	e8 9a 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d22e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d231:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d237:	83 ec 0c             	sub    $0xc,%esp
f011d23a:	50                   	push   %eax
f011d23b:	e8 05 a9 fe ff       	call   f0107b45 <kfree>
f011d240:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d243:	e8 80 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d248:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d24b:	74 17                	je     f011d264 <test_kmalloc_firstfit1+0xa5f>
f011d24d:	83 ec 04             	sub    $0x4,%esp
f011d250:	68 54 b5 13 f0       	push   $0xf013b554
f011d255:	68 30 03 00 00       	push   $0x330
f011d25a:	68 3a b5 13 f0       	push   $0xf013b53a
f011d25f:	e8 a1 2f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d264:	e8 28 fb fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d269:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d26c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d271:	74 17                	je     f011d28a <test_kmalloc_firstfit1+0xa85>
f011d273:	83 ec 04             	sub    $0x4,%esp
f011d276:	68 97 b9 13 f0       	push   $0xf013b997
f011d27b:	68 31 03 00 00       	push   $0x331
f011d280:	68 3a b5 13 f0       	push   $0xf013b53a
f011d285:	e8 7b 2f fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d28a:	e8 02 fb fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d28f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d292:	e8 31 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d297:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d29a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d2a0:	83 ec 0c             	sub    $0xc,%esp
f011d2a3:	50                   	push   %eax
f011d2a4:	e8 9c a8 fe ff       	call   f0107b45 <kfree>
f011d2a9:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2ac:	e8 17 6b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d2b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2b4:	74 17                	je     f011d2cd <test_kmalloc_firstfit1+0xac8>
f011d2b6:	83 ec 04             	sub    $0x4,%esp
f011d2b9:	68 54 b5 13 f0       	push   $0xf013b554
f011d2be:	68 37 03 00 00       	push   $0x337
f011d2c3:	68 3a b5 13 f0       	push   $0xf013b53a
f011d2c8:	e8 38 2f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d2cd:	e8 bf fa fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d2d2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d2d5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d2da:	74 17                	je     f011d2f3 <test_kmalloc_firstfit1+0xaee>
f011d2dc:	83 ec 04             	sub    $0x4,%esp
f011d2df:	68 97 b9 13 f0       	push   $0xf013b997
f011d2e4:	68 38 03 00 00       	push   $0x338
f011d2e9:	68 3a b5 13 f0       	push   $0xf013b53a
f011d2ee:	e8 12 2f fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d2f3:	e8 99 fa fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d2f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2fb:	e8 c8 6a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d300:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d303:	83 ec 0c             	sub    $0xc,%esp
f011d306:	68 00 fc 07 00       	push   $0x7fc00
f011d30b:	e8 6a a7 fe ff       	call   f0107a7a <kmalloc>
f011d310:	83 c4 10             	add    $0x10,%esp
f011d313:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d319:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d31f:	89 c1                	mov    %eax,%ecx
f011d321:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d328:	10 00 00 
f011d32b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d331:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d336:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d33c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d342:	ba 00 00 00 00       	mov    $0x0,%edx
f011d347:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d34d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d353:	29 d0                	sub    %edx,%eax
f011d355:	89 c3                	mov    %eax,%ebx
f011d357:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d35e:	10 00 00 
f011d361:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d366:	0f b6 d0             	movzbl %al,%edx
f011d369:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d36f:	01 d0                	add    %edx,%eax
f011d371:	48                   	dec    %eax
f011d372:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d378:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d37e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d383:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d389:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d38f:	29 d0                	sub    %edx,%eax
f011d391:	01 c3                	add    %eax,%ebx
f011d393:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d39a:	10 00 00 
f011d39d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d3a2:	0f b6 c0             	movzbl %al,%eax
f011d3a5:	c1 e0 04             	shl    $0x4,%eax
f011d3a8:	89 c2                	mov    %eax,%edx
f011d3aa:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d3b0:	01 d0                	add    %edx,%eax
f011d3b2:	48                   	dec    %eax
f011d3b3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d3b9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d3bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3c4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d3ca:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d3d0:	29 d0                	sub    %edx,%eax
f011d3d2:	01 d8                	add    %ebx,%eax
f011d3d4:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d3d9:	39 c1                	cmp    %eax,%ecx
f011d3db:	74 17                	je     f011d3f4 <test_kmalloc_firstfit1+0xbef>
f011d3dd:	83 ec 04             	sub    $0x4,%esp
f011d3e0:	68 54 b9 13 f0       	push   $0xf013b954
f011d3e5:	68 41 03 00 00       	push   $0x341
f011d3ea:	68 3a b5 13 f0       	push   $0xf013b53a
f011d3ef:	e8 11 2e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3f4:	e8 cf 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d3f9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3fc:	74 17                	je     f011d415 <test_kmalloc_firstfit1+0xc10>
f011d3fe:	83 ec 04             	sub    $0x4,%esp
f011d401:	68 54 b5 13 f0       	push   $0xf013b554
f011d406:	68 42 03 00 00       	push   $0x342
f011d40b:	68 3a b5 13 f0       	push   $0xf013b53a
f011d410:	e8 f0 2d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d415:	e8 77 f9 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d41a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d41d:	29 c2                	sub    %eax,%edx
f011d41f:	89 d0                	mov    %edx,%eax
f011d421:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d426:	74 17                	je     f011d43f <test_kmalloc_firstfit1+0xc3a>
f011d428:	83 ec 04             	sub    $0x4,%esp
f011d42b:	68 84 b9 13 f0       	push   $0xf013b984
f011d430:	68 43 03 00 00       	push   $0x343
f011d435:	68 3a b5 13 f0       	push   $0xf013b53a
f011d43a:	e8 c6 2d fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d43f:	e8 4d f9 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d444:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d447:	e8 7c 69 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d44c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d44f:	83 ec 0c             	sub    $0xc,%esp
f011d452:	68 00 fc 0f 00       	push   $0xffc00
f011d457:	e8 1e a6 fe ff       	call   f0107a7a <kmalloc>
f011d45c:	83 c4 10             	add    $0x10,%esp
f011d45f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d465:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d46b:	89 c1                	mov    %eax,%ecx
f011d46d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d474:	10 00 00 
f011d477:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d47d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d482:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d488:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d48e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d493:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d499:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d49f:	29 d0                	sub    %edx,%eax
f011d4a1:	89 c3                	mov    %eax,%ebx
f011d4a3:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d4aa:	10 00 00 
f011d4ad:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d4b2:	0f b6 d0             	movzbl %al,%edx
f011d4b5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d4bb:	01 d0                	add    %edx,%eax
f011d4bd:	48                   	dec    %eax
f011d4be:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d4c4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d4ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4cf:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d4d5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d4db:	29 d0                	sub    %edx,%eax
f011d4dd:	01 c3                	add    %eax,%ebx
f011d4df:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d4e6:	10 00 00 
f011d4e9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d4ee:	0f b6 c0             	movzbl %al,%eax
f011d4f1:	c1 e0 04             	shl    $0x4,%eax
f011d4f4:	89 c2                	mov    %eax,%edx
f011d4f6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d4fc:	01 d0                	add    %edx,%eax
f011d4fe:	48                   	dec    %eax
f011d4ff:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d505:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d50b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d510:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d516:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d51c:	29 d0                	sub    %edx,%eax
f011d51e:	01 d8                	add    %ebx,%eax
f011d520:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d525:	39 c1                	cmp    %eax,%ecx
f011d527:	74 17                	je     f011d540 <test_kmalloc_firstfit1+0xd3b>
f011d529:	83 ec 04             	sub    $0x4,%esp
f011d52c:	68 54 b9 13 f0       	push   $0xf013b954
f011d531:	68 49 03 00 00       	push   $0x349
f011d536:	68 3a b5 13 f0       	push   $0xf013b53a
f011d53b:	e8 c5 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d540:	e8 83 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d545:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d548:	74 17                	je     f011d561 <test_kmalloc_firstfit1+0xd5c>
f011d54a:	83 ec 04             	sub    $0x4,%esp
f011d54d:	68 54 b5 13 f0       	push   $0xf013b554
f011d552:	68 4a 03 00 00       	push   $0x34a
f011d557:	68 3a b5 13 f0       	push   $0xf013b53a
f011d55c:	e8 a4 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d561:	e8 2b f8 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d566:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d569:	29 c2                	sub    %eax,%edx
f011d56b:	89 d0                	mov    %edx,%eax
f011d56d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d572:	74 17                	je     f011d58b <test_kmalloc_firstfit1+0xd86>
f011d574:	83 ec 04             	sub    $0x4,%esp
f011d577:	68 84 b9 13 f0       	push   $0xf013b984
f011d57c:	68 4b 03 00 00       	push   $0x34b
f011d581:	68 3a b5 13 f0       	push   $0xf013b53a
f011d586:	e8 7a 2c fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d58b:	e8 01 f8 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d590:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d593:	e8 30 68 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d598:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d59b:	83 ec 0c             	sub    $0xc,%esp
f011d59e:	68 00 fc 03 00       	push   $0x3fc00
f011d5a3:	e8 d2 a4 fe ff       	call   f0107a7a <kmalloc>
f011d5a8:	83 c4 10             	add    $0x10,%esp
f011d5ab:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d5b1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d5b7:	89 c1                	mov    %eax,%ecx
f011d5b9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d5c0:	10 00 00 
f011d5c3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d5c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d5ce:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d5d4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d5da:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5df:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d5e5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d5eb:	29 d0                	sub    %edx,%eax
f011d5ed:	89 c3                	mov    %eax,%ebx
f011d5ef:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d5f6:	10 00 00 
f011d5f9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d5fe:	0f b6 d0             	movzbl %al,%edx
f011d601:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d607:	01 d0                	add    %edx,%eax
f011d609:	48                   	dec    %eax
f011d60a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d610:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d616:	ba 00 00 00 00       	mov    $0x0,%edx
f011d61b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d621:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d627:	29 d0                	sub    %edx,%eax
f011d629:	01 c3                	add    %eax,%ebx
f011d62b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d632:	10 00 00 
f011d635:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d63a:	0f b6 c0             	movzbl %al,%eax
f011d63d:	c1 e0 04             	shl    $0x4,%eax
f011d640:	89 c2                	mov    %eax,%edx
f011d642:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d648:	01 d0                	add    %edx,%eax
f011d64a:	48                   	dec    %eax
f011d64b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d651:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d657:	ba 00 00 00 00       	mov    $0x0,%edx
f011d65c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d662:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d668:	29 d0                	sub    %edx,%eax
f011d66a:	01 d8                	add    %ebx,%eax
f011d66c:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d671:	39 c1                	cmp    %eax,%ecx
f011d673:	74 17                	je     f011d68c <test_kmalloc_firstfit1+0xe87>
f011d675:	83 ec 04             	sub    $0x4,%esp
f011d678:	68 54 b9 13 f0       	push   $0xf013b954
f011d67d:	68 52 03 00 00       	push   $0x352
f011d682:	68 3a b5 13 f0       	push   $0xf013b53a
f011d687:	e8 79 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d68c:	e8 37 67 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d691:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d694:	74 17                	je     f011d6ad <test_kmalloc_firstfit1+0xea8>
f011d696:	83 ec 04             	sub    $0x4,%esp
f011d699:	68 54 b5 13 f0       	push   $0xf013b554
f011d69e:	68 53 03 00 00       	push   $0x353
f011d6a3:	68 3a b5 13 f0       	push   $0xf013b53a
f011d6a8:	e8 58 2b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d6ad:	e8 df f6 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d6b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d6b5:	29 c2                	sub    %eax,%edx
f011d6b7:	89 d0                	mov    %edx,%eax
f011d6b9:	83 f8 40             	cmp    $0x40,%eax
f011d6bc:	74 17                	je     f011d6d5 <test_kmalloc_firstfit1+0xed0>
f011d6be:	83 ec 04             	sub    $0x4,%esp
f011d6c1:	68 84 b9 13 f0       	push   $0xf013b984
f011d6c6:	68 54 03 00 00       	push   $0x354
f011d6cb:	68 3a b5 13 f0       	push   $0xf013b53a
f011d6d0:	e8 30 2b fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d6d5:	e8 b7 f6 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d6da:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6dd:	e8 e6 66 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d6e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d6e5:	83 ec 0c             	sub    $0xc,%esp
f011d6e8:	68 00 00 20 00       	push   $0x200000
f011d6ed:	e8 88 a3 fe ff       	call   f0107a7a <kmalloc>
f011d6f2:	83 c4 10             	add    $0x10,%esp
f011d6f5:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d6fb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d701:	89 c1                	mov    %eax,%ecx
f011d703:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011d70a:	10 00 00 
f011d70d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d713:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d718:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011d71e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d724:	ba 00 00 00 00       	mov    $0x0,%edx
f011d729:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011d72f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d735:	29 d0                	sub    %edx,%eax
f011d737:	89 c3                	mov    %eax,%ebx
f011d739:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011d740:	10 00 00 
f011d743:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d748:	0f b6 d0             	movzbl %al,%edx
f011d74b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d751:	01 d0                	add    %edx,%eax
f011d753:	48                   	dec    %eax
f011d754:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011d75a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d760:	ba 00 00 00 00       	mov    $0x0,%edx
f011d765:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011d76b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d771:	29 d0                	sub    %edx,%eax
f011d773:	01 c3                	add    %eax,%ebx
f011d775:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011d77c:	10 00 00 
f011d77f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d784:	0f b6 c0             	movzbl %al,%eax
f011d787:	c1 e0 04             	shl    $0x4,%eax
f011d78a:	89 c2                	mov    %eax,%edx
f011d78c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d792:	01 d0                	add    %edx,%eax
f011d794:	48                   	dec    %eax
f011d795:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011d79b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d7a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7a6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011d7ac:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d7b2:	29 d0                	sub    %edx,%eax
f011d7b4:	01 d8                	add    %ebx,%eax
f011d7b6:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d7bb:	39 c1                	cmp    %eax,%ecx
f011d7bd:	74 17                	je     f011d7d6 <test_kmalloc_firstfit1+0xfd1>
f011d7bf:	83 ec 04             	sub    $0x4,%esp
f011d7c2:	68 54 b9 13 f0       	push   $0xf013b954
f011d7c7:	68 5a 03 00 00       	push   $0x35a
f011d7cc:	68 3a b5 13 f0       	push   $0xf013b53a
f011d7d1:	e8 2f 2a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d7d6:	e8 b6 f5 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d7db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d7de:	29 c2                	sub    %eax,%edx
f011d7e0:	89 d0                	mov    %edx,%eax
f011d7e2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d7e7:	74 17                	je     f011d800 <test_kmalloc_firstfit1+0xffb>
f011d7e9:	83 ec 04             	sub    $0x4,%esp
f011d7ec:	68 84 b9 13 f0       	push   $0xf013b984
f011d7f1:	68 5b 03 00 00       	push   $0x35b
f011d7f6:	68 3a b5 13 f0       	push   $0xf013b53a
f011d7fb:	e8 05 2a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d800:	e8 c3 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d805:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d808:	74 17                	je     f011d821 <test_kmalloc_firstfit1+0x101c>
f011d80a:	83 ec 04             	sub    $0x4,%esp
f011d80d:	68 54 b5 13 f0       	push   $0xf013b554
f011d812:	68 5c 03 00 00       	push   $0x35c
f011d817:	68 3a b5 13 f0       	push   $0xf013b53a
f011d81c:	e8 e4 29 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d821:	e8 6b f5 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d826:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d829:	e8 9a 65 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d82e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d831:	83 ec 0c             	sub    $0xc,%esp
f011d834:	68 00 fc 3f 00       	push   $0x3ffc00
f011d839:	e8 3c a2 fe ff       	call   f0107a7a <kmalloc>
f011d83e:	83 c4 10             	add    $0x10,%esp
f011d841:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d847:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d84d:	89 c1                	mov    %eax,%ecx
f011d84f:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011d856:	10 00 00 
f011d859:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d85f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d864:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011d86a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d870:	ba 00 00 00 00       	mov    $0x0,%edx
f011d875:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011d87b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d881:	29 d0                	sub    %edx,%eax
f011d883:	89 c3                	mov    %eax,%ebx
f011d885:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011d88c:	10 00 00 
f011d88f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d894:	0f b6 d0             	movzbl %al,%edx
f011d897:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d89d:	01 d0                	add    %edx,%eax
f011d89f:	48                   	dec    %eax
f011d8a0:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d8a6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d8ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8b1:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d8b7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d8bd:	29 d0                	sub    %edx,%eax
f011d8bf:	01 c3                	add    %eax,%ebx
f011d8c1:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d8c8:	10 00 00 
f011d8cb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011d8d0:	0f b6 c0             	movzbl %al,%eax
f011d8d3:	c1 e0 04             	shl    $0x4,%eax
f011d8d6:	89 c2                	mov    %eax,%edx
f011d8d8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d8de:	01 d0                	add    %edx,%eax
f011d8e0:	48                   	dec    %eax
f011d8e1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d8e7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d8ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8f2:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011d8f8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d8fe:	29 d0                	sub    %edx,%eax
f011d900:	01 d8                	add    %ebx,%eax
f011d902:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d907:	39 c1                	cmp    %eax,%ecx
f011d909:	74 17                	je     f011d922 <test_kmalloc_firstfit1+0x111d>
f011d90b:	83 ec 04             	sub    $0x4,%esp
f011d90e:	68 54 b9 13 f0       	push   $0xf013b954
f011d913:	68 63 03 00 00       	push   $0x363
f011d918:	68 3a b5 13 f0       	push   $0xf013b53a
f011d91d:	e8 e3 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d922:	e8 a1 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d927:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d92a:	74 17                	je     f011d943 <test_kmalloc_firstfit1+0x113e>
f011d92c:	83 ec 04             	sub    $0x4,%esp
f011d92f:	68 54 b5 13 f0       	push   $0xf013b554
f011d934:	68 64 03 00 00       	push   $0x364
f011d939:	68 3a b5 13 f0       	push   $0xf013b53a
f011d93e:	e8 c2 28 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d943:	e8 49 f4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d948:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d94b:	29 c2                	sub    %eax,%edx
f011d94d:	89 d0                	mov    %edx,%eax
f011d94f:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d954:	74 17                	je     f011d96d <test_kmalloc_firstfit1+0x1168>
f011d956:	83 ec 04             	sub    $0x4,%esp
f011d959:	68 84 b9 13 f0       	push   $0xf013b984
f011d95e:	68 65 03 00 00       	push   $0x365
f011d963:	68 3a b5 13 f0       	push   $0xf013b53a
f011d968:	e8 98 28 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d96d:	e8 1f f4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d972:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d975:	e8 4e 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d97a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d97d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d983:	83 ec 0c             	sub    $0xc,%esp
f011d986:	50                   	push   %eax
f011d987:	e8 b9 a1 fe ff       	call   f0107b45 <kfree>
f011d98c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d98f:	e8 34 64 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d994:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d997:	74 17                	je     f011d9b0 <test_kmalloc_firstfit1+0x11ab>
f011d999:	83 ec 04             	sub    $0x4,%esp
f011d99c:	68 54 b5 13 f0       	push   $0xf013b554
f011d9a1:	68 6e 03 00 00       	push   $0x36e
f011d9a6:	68 3a b5 13 f0       	push   $0xf013b53a
f011d9ab:	e8 55 28 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d9b0:	e8 dc f3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d9b5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d9b8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d9bd:	74 17                	je     f011d9d6 <test_kmalloc_firstfit1+0x11d1>
f011d9bf:	83 ec 04             	sub    $0x4,%esp
f011d9c2:	68 97 b9 13 f0       	push   $0xf013b997
f011d9c7:	68 6f 03 00 00       	push   $0x36f
f011d9cc:	68 3a b5 13 f0       	push   $0xf013b53a
f011d9d1:	e8 2f 28 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d9d6:	e8 b6 f3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011d9db:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9de:	e8 e5 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d9e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d9e6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d9ec:	83 ec 0c             	sub    $0xc,%esp
f011d9ef:	50                   	push   %eax
f011d9f0:	e8 50 a1 fe ff       	call   f0107b45 <kfree>
f011d9f5:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9f8:	e8 cb 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011d9fd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011da00:	74 17                	je     f011da19 <test_kmalloc_firstfit1+0x1214>
f011da02:	83 ec 04             	sub    $0x4,%esp
f011da05:	68 54 b5 13 f0       	push   $0xf013b554
f011da0a:	68 75 03 00 00       	push   $0x375
f011da0f:	68 3a b5 13 f0       	push   $0xf013b53a
f011da14:	e8 ec 27 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011da19:	e8 73 f3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011da1e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011da21:	3d 00 01 00 00       	cmp    $0x100,%eax
f011da26:	74 17                	je     f011da3f <test_kmalloc_firstfit1+0x123a>
f011da28:	83 ec 04             	sub    $0x4,%esp
f011da2b:	68 97 b9 13 f0       	push   $0xf013b997
f011da30:	68 76 03 00 00       	push   $0x376
f011da35:	68 3a b5 13 f0       	push   $0xf013b53a
f011da3a:	e8 c6 27 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011da3f:	e8 4d f3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011da44:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da47:	e8 7c 63 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011da4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011da4f:	83 ec 0c             	sub    $0xc,%esp
f011da52:	68 00 00 10 00       	push   $0x100000
f011da57:	e8 1e a0 fe ff       	call   f0107a7a <kmalloc>
f011da5c:	83 c4 10             	add    $0x10,%esp
f011da5f:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011da65:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011da6b:	89 c1                	mov    %eax,%ecx
f011da6d:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011da74:	10 00 00 
f011da77:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011da7d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da82:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011da88:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011da8e:	ba 00 00 00 00       	mov    $0x0,%edx
f011da93:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011da99:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011da9f:	29 d0                	sub    %edx,%eax
f011daa1:	89 c3                	mov    %eax,%ebx
f011daa3:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011daaa:	10 00 00 
f011daad:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dab2:	0f b6 d0             	movzbl %al,%edx
f011dab5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dabb:	01 d0                	add    %edx,%eax
f011dabd:	48                   	dec    %eax
f011dabe:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011dac4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011daca:	ba 00 00 00 00       	mov    $0x0,%edx
f011dacf:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011dad5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011dadb:	29 d0                	sub    %edx,%eax
f011dadd:	01 c3                	add    %eax,%ebx
f011dadf:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011dae6:	10 00 00 
f011dae9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011daee:	0f b6 c0             	movzbl %al,%eax
f011daf1:	c1 e0 04             	shl    $0x4,%eax
f011daf4:	89 c2                	mov    %eax,%edx
f011daf6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011dafc:	01 d0                	add    %edx,%eax
f011dafe:	48                   	dec    %eax
f011daff:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011db05:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011db0b:	ba 00 00 00 00       	mov    $0x0,%edx
f011db10:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011db16:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011db1c:	29 d0                	sub    %edx,%eax
f011db1e:	01 d8                	add    %ebx,%eax
f011db20:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011db25:	39 c1                	cmp    %eax,%ecx
f011db27:	74 17                	je     f011db40 <test_kmalloc_firstfit1+0x133b>
f011db29:	83 ec 04             	sub    $0x4,%esp
f011db2c:	68 54 b9 13 f0       	push   $0xf013b954
f011db31:	68 80 03 00 00       	push   $0x380
f011db36:	68 3a b5 13 f0       	push   $0xf013b53a
f011db3b:	e8 c5 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db40:	e8 83 62 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011db45:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011db48:	74 17                	je     f011db61 <test_kmalloc_firstfit1+0x135c>
f011db4a:	83 ec 04             	sub    $0x4,%esp
f011db4d:	68 54 b5 13 f0       	push   $0xf013b554
f011db52:	68 81 03 00 00       	push   $0x381
f011db57:	68 3a b5 13 f0       	push   $0xf013b53a
f011db5c:	e8 a4 26 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011db61:	e8 2b f2 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011db66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011db69:	29 c2                	sub    %eax,%edx
f011db6b:	89 d0                	mov    %edx,%eax
f011db6d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011db72:	74 17                	je     f011db8b <test_kmalloc_firstfit1+0x1386>
f011db74:	83 ec 04             	sub    $0x4,%esp
f011db77:	68 84 b9 13 f0       	push   $0xf013b984
f011db7c:	68 82 03 00 00       	push   $0x382
f011db81:	68 3a b5 13 f0       	push   $0xf013b53a
f011db86:	e8 7a 26 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011db8b:	83 ec 0c             	sub    $0xc,%esp
f011db8e:	68 30 bb 13 f0       	push   $0xf013bb30
f011db93:	e8 76 31 fe ff       	call   f0100d0e <cprintf>
f011db98:	83 c4 10             	add    $0x10,%esp

	return 1;
f011db9b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dba0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dba3:	5b                   	pop    %ebx
f011dba4:	5f                   	pop    %edi
f011dba5:	5d                   	pop    %ebp
f011dba6:	c3                   	ret    

f011dba7 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011dba7:	55                   	push   %ebp
f011dba8:	89 e5                	mov    %esp,%ebp
f011dbaa:	57                   	push   %edi
f011dbab:	53                   	push   %ebx
f011dbac:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011dbb2:	83 ec 0c             	sub    $0xc,%esp
f011dbb5:	68 7c b4 13 f0       	push   $0xf013b47c
f011dbba:	e8 4f 31 fe ff       	call   f0100d0e <cprintf>
f011dbbf:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011dbc2:	83 ec 0c             	sub    $0xc,%esp
f011dbc5:	68 ac b4 13 f0       	push   $0xf013b4ac
f011dbca:	e8 3f 31 fe ff       	call   f0100d0e <cprintf>
f011dbcf:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011dbd2:	83 ec 0c             	sub    $0xc,%esp
f011dbd5:	68 7c b4 13 f0       	push   $0xf013b47c
f011dbda:	e8 2f 31 fe ff       	call   f0100d0e <cprintf>
f011dbdf:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011dbe2:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011dbe8:	b9 14 00 00 00       	mov    $0x14,%ecx
f011dbed:	b8 00 00 00 00       	mov    $0x0,%eax
f011dbf2:	89 d7                	mov    %edx,%edi
f011dbf4:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011dbf6:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011dbfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dc00:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc05:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011dc08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dc0b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc10:	f7 75 f4             	divl   -0xc(%ebp)
f011dc13:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dc16:	29 d0                	sub    %edx,%eax
f011dc18:	89 c1                	mov    %eax,%ecx
f011dc1a:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011dc21:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dc26:	0f b6 d0             	movzbl %al,%edx
f011dc29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011dc2c:	01 d0                	add    %edx,%eax
f011dc2e:	48                   	dec    %eax
f011dc2f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dc32:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dc35:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc3a:	f7 75 ec             	divl   -0x14(%ebp)
f011dc3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dc40:	29 d0                	sub    %edx,%eax
f011dc42:	01 c1                	add    %eax,%ecx
f011dc44:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011dc4b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dc50:	0f b6 c0             	movzbl %al,%eax
f011dc53:	c1 e0 04             	shl    $0x4,%eax
f011dc56:	89 c2                	mov    %eax,%edx
f011dc58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011dc5b:	01 d0                	add    %edx,%eax
f011dc5d:	48                   	dec    %eax
f011dc5e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011dc61:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dc64:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc69:	f7 75 e4             	divl   -0x1c(%ebp)
f011dc6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dc6f:	29 d0                	sub    %edx,%eax
f011dc71:	01 c8                	add    %ecx,%eax
f011dc73:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011dc78:	29 c2                	sub    %eax,%edx
f011dc7a:	89 d0                	mov    %edx,%eax
f011dc7c:	83 ec 0c             	sub    $0xc,%esp
f011dc7f:	50                   	push   %eax
f011dc80:	e8 f5 9d fe ff       	call   f0107a7a <kmalloc>
f011dc85:	83 c4 10             	add    $0x10,%esp
f011dc88:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011dc8e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011dc94:	85 c0                	test   %eax,%eax
f011dc96:	74 17                	je     f011dcaf <test_kmalloc_firstfit2+0x108>
f011dc98:	83 ec 04             	sub    $0x4,%esp
f011dc9b:	68 7c bb 13 f0       	push   $0xf013bb7c
f011dca0:	68 97 03 00 00       	push   $0x397
f011dca5:	68 3a b5 13 f0       	push   $0xf013b53a
f011dcaa:	e8 56 25 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011dcaf:	e8 dd f0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011dcb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dcb7:	e8 0c 61 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dcbc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011dcbf:	83 ec 0c             	sub    $0xc,%esp
f011dcc2:	68 00 fc 1f 00       	push   $0x1ffc00
f011dcc7:	e8 ae 9d fe ff       	call   f0107a7a <kmalloc>
f011dccc:	83 c4 10             	add    $0x10,%esp
f011dccf:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011dcd5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011dcdb:	89 c1                	mov    %eax,%ecx
f011dcdd:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011dce4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011dce7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcec:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011dcef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011dcf2:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcf7:	f7 75 d4             	divl   -0x2c(%ebp)
f011dcfa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011dcfd:	29 d0                	sub    %edx,%eax
f011dcff:	89 c3                	mov    %eax,%ebx
f011dd01:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011dd08:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dd0d:	0f b6 d0             	movzbl %al,%edx
f011dd10:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011dd13:	01 d0                	add    %edx,%eax
f011dd15:	48                   	dec    %eax
f011dd16:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011dd19:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dd1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd21:	f7 75 cc             	divl   -0x34(%ebp)
f011dd24:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dd27:	29 d0                	sub    %edx,%eax
f011dd29:	01 c3                	add    %eax,%ebx
f011dd2b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011dd32:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011dd37:	0f b6 c0             	movzbl %al,%eax
f011dd3a:	c1 e0 04             	shl    $0x4,%eax
f011dd3d:	89 c2                	mov    %eax,%edx
f011dd3f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011dd42:	01 d0                	add    %edx,%eax
f011dd44:	48                   	dec    %eax
f011dd45:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011dd48:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dd4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd50:	f7 75 c4             	divl   -0x3c(%ebp)
f011dd53:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dd56:	29 d0                	sub    %edx,%eax
f011dd58:	01 d8                	add    %ebx,%eax
f011dd5a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011dd5f:	39 c1                	cmp    %eax,%ecx
f011dd61:	74 17                	je     f011dd7a <test_kmalloc_firstfit2+0x1d3>
f011dd63:	83 ec 04             	sub    $0x4,%esp
f011dd66:	68 54 b9 13 f0       	push   $0xf013b954
f011dd6b:	68 a1 03 00 00       	push   $0x3a1
f011dd70:	68 3a b5 13 f0       	push   $0xf013b53a
f011dd75:	e8 8b 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd7a:	e8 49 60 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dd7f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dd82:	74 17                	je     f011dd9b <test_kmalloc_firstfit2+0x1f4>
f011dd84:	83 ec 04             	sub    $0x4,%esp
f011dd87:	68 54 b5 13 f0       	push   $0xf013b554
f011dd8c:	68 a2 03 00 00       	push   $0x3a2
f011dd91:	68 3a b5 13 f0       	push   $0xf013b53a
f011dd96:	e8 6a 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dd9b:	e8 f1 ef fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011dda0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dda3:	29 c2                	sub    %eax,%edx
f011dda5:	89 d0                	mov    %edx,%eax
f011dda7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ddac:	74 17                	je     f011ddc5 <test_kmalloc_firstfit2+0x21e>
f011ddae:	83 ec 04             	sub    $0x4,%esp
f011ddb1:	68 84 b9 13 f0       	push   $0xf013b984
f011ddb6:	68 a3 03 00 00       	push   $0x3a3
f011ddbb:	68 3a b5 13 f0       	push   $0xf013b53a
f011ddc0:	e8 40 24 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ddc5:	e8 c7 ef fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011ddca:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddcd:	e8 f6 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ddd2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011ddd5:	83 ec 0c             	sub    $0xc,%esp
f011ddd8:	68 00 fc 1f 00       	push   $0x1ffc00
f011dddd:	e8 98 9c fe ff       	call   f0107a7a <kmalloc>
f011dde2:	83 c4 10             	add    $0x10,%esp
f011dde5:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011ddeb:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ddf1:	89 c1                	mov    %eax,%ecx
f011ddf3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ddfa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ddfd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de02:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011de05:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011de08:	ba 00 00 00 00       	mov    $0x0,%edx
f011de0d:	f7 75 bc             	divl   -0x44(%ebp)
f011de10:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011de13:	29 d0                	sub    %edx,%eax
f011de15:	89 c3                	mov    %eax,%ebx
f011de17:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011de1e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011de23:	0f b6 d0             	movzbl %al,%edx
f011de26:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011de29:	01 d0                	add    %edx,%eax
f011de2b:	48                   	dec    %eax
f011de2c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011de2f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011de32:	ba 00 00 00 00       	mov    $0x0,%edx
f011de37:	f7 75 b4             	divl   -0x4c(%ebp)
f011de3a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011de3d:	29 d0                	sub    %edx,%eax
f011de3f:	01 c3                	add    %eax,%ebx
f011de41:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011de48:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011de4d:	0f b6 c0             	movzbl %al,%eax
f011de50:	c1 e0 04             	shl    $0x4,%eax
f011de53:	89 c2                	mov    %eax,%edx
f011de55:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011de58:	01 d0                	add    %edx,%eax
f011de5a:	48                   	dec    %eax
f011de5b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011de5e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011de61:	ba 00 00 00 00       	mov    $0x0,%edx
f011de66:	f7 75 ac             	divl   -0x54(%ebp)
f011de69:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011de6c:	29 d0                	sub    %edx,%eax
f011de6e:	01 d8                	add    %ebx,%eax
f011de70:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011de75:	39 c1                	cmp    %eax,%ecx
f011de77:	74 17                	je     f011de90 <test_kmalloc_firstfit2+0x2e9>
f011de79:	83 ec 04             	sub    $0x4,%esp
f011de7c:	68 54 b9 13 f0       	push   $0xf013b954
f011de81:	68 a9 03 00 00       	push   $0x3a9
f011de86:	68 3a b5 13 f0       	push   $0xf013b53a
f011de8b:	e8 75 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de90:	e8 33 5f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011de95:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011de98:	74 17                	je     f011deb1 <test_kmalloc_firstfit2+0x30a>
f011de9a:	83 ec 04             	sub    $0x4,%esp
f011de9d:	68 54 b5 13 f0       	push   $0xf013b554
f011dea2:	68 aa 03 00 00       	push   $0x3aa
f011dea7:	68 3a b5 13 f0       	push   $0xf013b53a
f011deac:	e8 54 23 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011deb1:	e8 db ee fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011deb6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011deb9:	29 c2                	sub    %eax,%edx
f011debb:	89 d0                	mov    %edx,%eax
f011debd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dec2:	74 17                	je     f011dedb <test_kmalloc_firstfit2+0x334>
f011dec4:	83 ec 04             	sub    $0x4,%esp
f011dec7:	68 84 b9 13 f0       	push   $0xf013b984
f011decc:	68 ab 03 00 00       	push   $0x3ab
f011ded1:	68 3a b5 13 f0       	push   $0xf013b53a
f011ded6:	e8 2a 23 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dedb:	e8 b1 ee fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011dee0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dee3:	e8 e0 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dee8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011deeb:	83 ec 0c             	sub    $0xc,%esp
f011deee:	68 00 08 00 00       	push   $0x800
f011def3:	e8 82 9b fe ff       	call   f0107a7a <kmalloc>
f011def8:	83 c4 10             	add    $0x10,%esp
f011defb:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011df01:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011df07:	89 c1                	mov    %eax,%ecx
f011df09:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011df10:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011df13:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df18:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011df1b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011df1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011df23:	f7 75 a4             	divl   -0x5c(%ebp)
f011df26:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011df29:	29 d0                	sub    %edx,%eax
f011df2b:	89 c3                	mov    %eax,%ebx
f011df2d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011df34:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011df39:	0f b6 d0             	movzbl %al,%edx
f011df3c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011df3f:	01 d0                	add    %edx,%eax
f011df41:	48                   	dec    %eax
f011df42:	89 45 98             	mov    %eax,-0x68(%ebp)
f011df45:	8b 45 98             	mov    -0x68(%ebp),%eax
f011df48:	ba 00 00 00 00       	mov    $0x0,%edx
f011df4d:	f7 75 9c             	divl   -0x64(%ebp)
f011df50:	8b 45 98             	mov    -0x68(%ebp),%eax
f011df53:	29 d0                	sub    %edx,%eax
f011df55:	01 c3                	add    %eax,%ebx
f011df57:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011df5e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011df63:	0f b6 c0             	movzbl %al,%eax
f011df66:	c1 e0 04             	shl    $0x4,%eax
f011df69:	89 c2                	mov    %eax,%edx
f011df6b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011df6e:	01 d0                	add    %edx,%eax
f011df70:	48                   	dec    %eax
f011df71:	89 45 90             	mov    %eax,-0x70(%ebp)
f011df74:	8b 45 90             	mov    -0x70(%ebp),%eax
f011df77:	ba 00 00 00 00       	mov    $0x0,%edx
f011df7c:	f7 75 94             	divl   -0x6c(%ebp)
f011df7f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011df82:	29 d0                	sub    %edx,%eax
f011df84:	01 d8                	add    %ebx,%eax
f011df86:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011df8b:	39 c1                	cmp    %eax,%ecx
f011df8d:	73 17                	jae    f011dfa6 <test_kmalloc_firstfit2+0x3ff>
f011df8f:	83 ec 04             	sub    $0x4,%esp
f011df92:	68 54 b9 13 f0       	push   $0xf013b954
f011df97:	68 b1 03 00 00       	push   $0x3b1
f011df9c:	68 3a b5 13 f0       	push   $0xf013b53a
f011dfa1:	e8 5f 22 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfa6:	e8 1d 5e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dfab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dfae:	74 17                	je     f011dfc7 <test_kmalloc_firstfit2+0x420>
f011dfb0:	83 ec 04             	sub    $0x4,%esp
f011dfb3:	68 54 b5 13 f0       	push   $0xf013b554
f011dfb8:	68 b2 03 00 00       	push   $0x3b2
f011dfbd:	68 3a b5 13 f0       	push   $0xf013b53a
f011dfc2:	e8 3e 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dfc7:	e8 c5 ed fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011dfcc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dfcf:	29 c2                	sub    %eax,%edx
f011dfd1:	89 d0                	mov    %edx,%eax
f011dfd3:	83 f8 01             	cmp    $0x1,%eax
f011dfd6:	74 17                	je     f011dfef <test_kmalloc_firstfit2+0x448>
f011dfd8:	83 ec 04             	sub    $0x4,%esp
f011dfdb:	68 84 b9 13 f0       	push   $0xf013b984
f011dfe0:	68 b3 03 00 00       	push   $0x3b3
f011dfe5:	68 3a b5 13 f0       	push   $0xf013b53a
f011dfea:	e8 16 22 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011dfef:	e8 9d ed fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011dff4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dff7:	e8 cc 5d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011dffc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011dfff:	83 ec 0c             	sub    $0xc,%esp
f011e002:	68 00 08 00 00       	push   $0x800
f011e007:	e8 6e 9a fe ff       	call   f0107a7a <kmalloc>
f011e00c:	83 c4 10             	add    $0x10,%esp
f011e00f:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e015:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e01b:	89 c1                	mov    %eax,%ecx
f011e01d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e024:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e027:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e02c:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e02f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e032:	ba 00 00 00 00       	mov    $0x0,%edx
f011e037:	f7 75 8c             	divl   -0x74(%ebp)
f011e03a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e03d:	29 d0                	sub    %edx,%eax
f011e03f:	89 c3                	mov    %eax,%ebx
f011e041:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e048:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e04d:	0f b6 d0             	movzbl %al,%edx
f011e050:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e053:	01 d0                	add    %edx,%eax
f011e055:	48                   	dec    %eax
f011e056:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e059:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e05c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e061:	f7 75 84             	divl   -0x7c(%ebp)
f011e064:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e067:	29 d0                	sub    %edx,%eax
f011e069:	01 c3                	add    %eax,%ebx
f011e06b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e072:	10 00 00 
f011e075:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e07a:	0f b6 c0             	movzbl %al,%eax
f011e07d:	c1 e0 04             	shl    $0x4,%eax
f011e080:	89 c2                	mov    %eax,%edx
f011e082:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e088:	01 d0                	add    %edx,%eax
f011e08a:	48                   	dec    %eax
f011e08b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e091:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e097:	ba 00 00 00 00       	mov    $0x0,%edx
f011e09c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e0a2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e0a8:	29 d0                	sub    %edx,%eax
f011e0aa:	01 d8                	add    %ebx,%eax
f011e0ac:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e0b1:	39 c1                	cmp    %eax,%ecx
f011e0b3:	74 17                	je     f011e0cc <test_kmalloc_firstfit2+0x525>
f011e0b5:	83 ec 04             	sub    $0x4,%esp
f011e0b8:	68 54 b9 13 f0       	push   $0xf013b954
f011e0bd:	68 b9 03 00 00       	push   $0x3b9
f011e0c2:	68 3a b5 13 f0       	push   $0xf013b53a
f011e0c7:	e8 39 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0cc:	e8 f7 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e0d1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e0d4:	74 17                	je     f011e0ed <test_kmalloc_firstfit2+0x546>
f011e0d6:	83 ec 04             	sub    $0x4,%esp
f011e0d9:	68 54 b5 13 f0       	push   $0xf013b554
f011e0de:	68 ba 03 00 00       	push   $0x3ba
f011e0e3:	68 3a b5 13 f0       	push   $0xf013b53a
f011e0e8:	e8 18 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e0ed:	e8 9f ec fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e0f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e0f5:	29 c2                	sub    %eax,%edx
f011e0f7:	89 d0                	mov    %edx,%eax
f011e0f9:	83 f8 01             	cmp    $0x1,%eax
f011e0fc:	74 17                	je     f011e115 <test_kmalloc_firstfit2+0x56e>
f011e0fe:	83 ec 04             	sub    $0x4,%esp
f011e101:	68 84 b9 13 f0       	push   $0xf013b984
f011e106:	68 bb 03 00 00       	push   $0x3bb
f011e10b:	68 3a b5 13 f0       	push   $0xf013b53a
f011e110:	e8 f0 20 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e115:	e8 77 ec fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e11a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e11d:	e8 a6 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e122:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e125:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e12b:	83 ec 0c             	sub    $0xc,%esp
f011e12e:	50                   	push   %eax
f011e12f:	e8 11 9a fe ff       	call   f0107b45 <kfree>
f011e134:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e137:	e8 8c 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e13c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e13f:	74 17                	je     f011e158 <test_kmalloc_firstfit2+0x5b1>
f011e141:	83 ec 04             	sub    $0x4,%esp
f011e144:	68 54 b5 13 f0       	push   $0xf013b554
f011e149:	68 c1 03 00 00       	push   $0x3c1
f011e14e:	68 3a b5 13 f0       	push   $0xf013b53a
f011e153:	e8 ad 20 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e158:	e8 34 ec fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e15d:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e160:	83 f8 01             	cmp    $0x1,%eax
f011e163:	74 17                	je     f011e17c <test_kmalloc_firstfit2+0x5d5>
f011e165:	83 ec 04             	sub    $0x4,%esp
f011e168:	68 97 b9 13 f0       	push   $0xf013b997
f011e16d:	68 c2 03 00 00       	push   $0x3c2
f011e172:	68 3a b5 13 f0       	push   $0xf013b53a
f011e177:	e8 89 20 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e17c:	e8 10 ec fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e181:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e184:	e8 3f 5c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e189:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e18c:	83 ec 0c             	sub    $0xc,%esp
f011e18f:	68 00 1c 00 00       	push   $0x1c00
f011e194:	e8 e1 98 fe ff       	call   f0107a7a <kmalloc>
f011e199:	83 c4 10             	add    $0x10,%esp
f011e19c:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e1a2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e1a8:	89 c1                	mov    %eax,%ecx
f011e1aa:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e1b1:	10 00 00 
f011e1b4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e1ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e1bf:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e1c5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e1cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1d0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e1d6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e1dc:	29 d0                	sub    %edx,%eax
f011e1de:	89 c3                	mov    %eax,%ebx
f011e1e0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e1e7:	10 00 00 
f011e1ea:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e1ef:	0f b6 d0             	movzbl %al,%edx
f011e1f2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e1f8:	01 d0                	add    %edx,%eax
f011e1fa:	48                   	dec    %eax
f011e1fb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e201:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e207:	ba 00 00 00 00       	mov    $0x0,%edx
f011e20c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e212:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e218:	29 d0                	sub    %edx,%eax
f011e21a:	01 c3                	add    %eax,%ebx
f011e21c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e223:	10 00 00 
f011e226:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e22b:	0f b6 c0             	movzbl %al,%eax
f011e22e:	c1 e0 04             	shl    $0x4,%eax
f011e231:	89 c2                	mov    %eax,%edx
f011e233:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e239:	01 d0                	add    %edx,%eax
f011e23b:	48                   	dec    %eax
f011e23c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e242:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e248:	ba 00 00 00 00       	mov    $0x0,%edx
f011e24d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e253:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e259:	29 d0                	sub    %edx,%eax
f011e25b:	01 d8                	add    %ebx,%eax
f011e25d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e262:	39 c1                	cmp    %eax,%ecx
f011e264:	74 17                	je     f011e27d <test_kmalloc_firstfit2+0x6d6>
f011e266:	83 ec 04             	sub    $0x4,%esp
f011e269:	68 54 b9 13 f0       	push   $0xf013b954
f011e26e:	68 c8 03 00 00       	push   $0x3c8
f011e273:	68 3a b5 13 f0       	push   $0xf013b53a
f011e278:	e8 88 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e27d:	e8 46 5b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e282:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e285:	74 17                	je     f011e29e <test_kmalloc_firstfit2+0x6f7>
f011e287:	83 ec 04             	sub    $0x4,%esp
f011e28a:	68 54 b5 13 f0       	push   $0xf013b554
f011e28f:	68 c9 03 00 00       	push   $0x3c9
f011e294:	68 3a b5 13 f0       	push   $0xf013b53a
f011e299:	e8 67 1f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e29e:	e8 ee ea fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e2a3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e2a6:	29 c2                	sub    %eax,%edx
f011e2a8:	89 d0                	mov    %edx,%eax
f011e2aa:	83 f8 02             	cmp    $0x2,%eax
f011e2ad:	74 17                	je     f011e2c6 <test_kmalloc_firstfit2+0x71f>
f011e2af:	83 ec 04             	sub    $0x4,%esp
f011e2b2:	68 84 b9 13 f0       	push   $0xf013b984
f011e2b7:	68 ca 03 00 00       	push   $0x3ca
f011e2bc:	68 3a b5 13 f0       	push   $0xf013b53a
f011e2c1:	e8 3f 1f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e2c6:	e8 c6 ea fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e2cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e2ce:	e8 f5 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e2d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e2d6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e2dc:	83 ec 0c             	sub    $0xc,%esp
f011e2df:	50                   	push   %eax
f011e2e0:	e8 60 98 fe ff       	call   f0107b45 <kfree>
f011e2e5:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e2e8:	e8 db 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e2ed:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e2f0:	74 17                	je     f011e309 <test_kmalloc_firstfit2+0x762>
f011e2f2:	83 ec 04             	sub    $0x4,%esp
f011e2f5:	68 54 b5 13 f0       	push   $0xf013b554
f011e2fa:	68 d0 03 00 00       	push   $0x3d0
f011e2ff:	68 3a b5 13 f0       	push   $0xf013b53a
f011e304:	e8 fc 1e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e309:	e8 83 ea fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e30e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e311:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e316:	74 17                	je     f011e32f <test_kmalloc_firstfit2+0x788>
f011e318:	83 ec 04             	sub    $0x4,%esp
f011e31b:	68 97 b9 13 f0       	push   $0xf013b997
f011e320:	68 d1 03 00 00       	push   $0x3d1
f011e325:	68 3a b5 13 f0       	push   $0xf013b53a
f011e32a:	e8 d6 1e fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e32f:	e8 5d ea fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e334:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e337:	e8 8c 5a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e33c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e33f:	83 ec 0c             	sub    $0xc,%esp
f011e342:	68 00 fc 2f 00       	push   $0x2ffc00
f011e347:	e8 2e 97 fe ff       	call   f0107a7a <kmalloc>
f011e34c:	83 c4 10             	add    $0x10,%esp
f011e34f:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e355:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e35b:	89 c1                	mov    %eax,%ecx
f011e35d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e364:	10 00 00 
f011e367:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e36d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e372:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e378:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e37e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e383:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e389:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e38f:	29 d0                	sub    %edx,%eax
f011e391:	89 c3                	mov    %eax,%ebx
f011e393:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e39a:	10 00 00 
f011e39d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e3a2:	0f b6 d0             	movzbl %al,%edx
f011e3a5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e3ab:	01 d0                	add    %edx,%eax
f011e3ad:	48                   	dec    %eax
f011e3ae:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e3b4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e3ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3bf:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e3c5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e3cb:	29 d0                	sub    %edx,%eax
f011e3cd:	01 c3                	add    %eax,%ebx
f011e3cf:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e3d6:	10 00 00 
f011e3d9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e3de:	0f b6 c0             	movzbl %al,%eax
f011e3e1:	c1 e0 04             	shl    $0x4,%eax
f011e3e4:	89 c2                	mov    %eax,%edx
f011e3e6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e3ec:	01 d0                	add    %edx,%eax
f011e3ee:	48                   	dec    %eax
f011e3ef:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e3f5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e3fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e400:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e406:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e40c:	29 d0                	sub    %edx,%eax
f011e40e:	01 d8                	add    %ebx,%eax
f011e410:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e415:	39 c1                	cmp    %eax,%ecx
f011e417:	74 17                	je     f011e430 <test_kmalloc_firstfit2+0x889>
f011e419:	83 ec 04             	sub    $0x4,%esp
f011e41c:	68 54 b9 13 f0       	push   $0xf013b954
f011e421:	68 d7 03 00 00       	push   $0x3d7
f011e426:	68 3a b5 13 f0       	push   $0xf013b53a
f011e42b:	e8 d5 1d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e430:	e8 93 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e435:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e438:	74 17                	je     f011e451 <test_kmalloc_firstfit2+0x8aa>
f011e43a:	83 ec 04             	sub    $0x4,%esp
f011e43d:	68 54 b5 13 f0       	push   $0xf013b554
f011e442:	68 d8 03 00 00       	push   $0x3d8
f011e447:	68 3a b5 13 f0       	push   $0xf013b53a
f011e44c:	e8 b4 1d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e451:	e8 3b e9 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e456:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e459:	29 c2                	sub    %eax,%edx
f011e45b:	89 d0                	mov    %edx,%eax
f011e45d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e462:	74 17                	je     f011e47b <test_kmalloc_firstfit2+0x8d4>
f011e464:	83 ec 04             	sub    $0x4,%esp
f011e467:	68 84 b9 13 f0       	push   $0xf013b984
f011e46c:	68 d9 03 00 00       	push   $0x3d9
f011e471:	68 3a b5 13 f0       	push   $0xf013b53a
f011e476:	e8 8a 1d fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e47b:	e8 11 e9 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e480:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e483:	e8 40 59 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e488:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e48b:	83 ec 0c             	sub    $0xc,%esp
f011e48e:	68 00 18 20 00       	push   $0x201800
f011e493:	e8 e2 95 fe ff       	call   f0107a7a <kmalloc>
f011e498:	83 c4 10             	add    $0x10,%esp
f011e49b:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e4a1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e4a7:	89 c1                	mov    %eax,%ecx
f011e4a9:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e4b0:	10 00 00 
f011e4b3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e4b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e4be:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e4c4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e4ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4cf:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e4d5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e4db:	29 d0                	sub    %edx,%eax
f011e4dd:	89 c3                	mov    %eax,%ebx
f011e4df:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e4e6:	10 00 00 
f011e4e9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e4ee:	0f b6 d0             	movzbl %al,%edx
f011e4f1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e4f7:	01 d0                	add    %edx,%eax
f011e4f9:	48                   	dec    %eax
f011e4fa:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e500:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e506:	ba 00 00 00 00       	mov    $0x0,%edx
f011e50b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e511:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e517:	29 d0                	sub    %edx,%eax
f011e519:	01 c3                	add    %eax,%ebx
f011e51b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e522:	10 00 00 
f011e525:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e52a:	0f b6 c0             	movzbl %al,%eax
f011e52d:	c1 e0 04             	shl    $0x4,%eax
f011e530:	89 c2                	mov    %eax,%edx
f011e532:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e538:	01 d0                	add    %edx,%eax
f011e53a:	48                   	dec    %eax
f011e53b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e541:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e547:	ba 00 00 00 00       	mov    $0x0,%edx
f011e54c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e552:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e558:	29 d0                	sub    %edx,%eax
f011e55a:	01 d8                	add    %ebx,%eax
f011e55c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e561:	39 c1                	cmp    %eax,%ecx
f011e563:	74 17                	je     f011e57c <test_kmalloc_firstfit2+0x9d5>
f011e565:	83 ec 04             	sub    $0x4,%esp
f011e568:	68 54 b9 13 f0       	push   $0xf013b954
f011e56d:	68 df 03 00 00       	push   $0x3df
f011e572:	68 3a b5 13 f0       	push   $0xf013b53a
f011e577:	e8 89 1c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e57c:	e8 47 58 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e581:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e584:	74 17                	je     f011e59d <test_kmalloc_firstfit2+0x9f6>
f011e586:	83 ec 04             	sub    $0x4,%esp
f011e589:	68 54 b5 13 f0       	push   $0xf013b554
f011e58e:	68 e0 03 00 00       	push   $0x3e0
f011e593:	68 3a b5 13 f0       	push   $0xf013b53a
f011e598:	e8 68 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e59d:	e8 ef e7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e5a2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e5a5:	29 c2                	sub    %eax,%edx
f011e5a7:	89 d0                	mov    %edx,%eax
f011e5a9:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e5ae:	74 17                	je     f011e5c7 <test_kmalloc_firstfit2+0xa20>
f011e5b0:	83 ec 04             	sub    $0x4,%esp
f011e5b3:	68 84 b9 13 f0       	push   $0xf013b984
f011e5b8:	68 e1 03 00 00       	push   $0x3e1
f011e5bd:	68 3a b5 13 f0       	push   $0xf013b53a
f011e5c2:	e8 3e 1c fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e5c7:	e8 c5 e7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e5cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e5cf:	e8 f4 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e5d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011e5d7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e5dd:	83 ec 0c             	sub    $0xc,%esp
f011e5e0:	50                   	push   %eax
f011e5e1:	e8 5f 95 fe ff       	call   f0107b45 <kfree>
f011e5e6:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e5e9:	e8 da 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e5ee:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e5f1:	74 17                	je     f011e60a <test_kmalloc_firstfit2+0xa63>
f011e5f3:	83 ec 04             	sub    $0x4,%esp
f011e5f6:	68 54 b5 13 f0       	push   $0xf013b554
f011e5fb:	68 e7 03 00 00       	push   $0x3e7
f011e600:	68 3a b5 13 f0       	push   $0xf013b53a
f011e605:	e8 fb 1b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e60a:	e8 82 e7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e60f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e612:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e617:	74 17                	je     f011e630 <test_kmalloc_firstfit2+0xa89>
f011e619:	83 ec 04             	sub    $0x4,%esp
f011e61c:	68 97 b9 13 f0       	push   $0xf013b997
f011e621:	68 e8 03 00 00       	push   $0x3e8
f011e626:	68 3a b5 13 f0       	push   $0xf013b53a
f011e62b:	e8 d5 1b fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e630:	e8 5c e7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e635:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e638:	e8 8b 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e63d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011e640:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e646:	83 ec 0c             	sub    $0xc,%esp
f011e649:	50                   	push   %eax
f011e64a:	e8 f6 94 fe ff       	call   f0107b45 <kfree>
f011e64f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e652:	e8 3a e7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e657:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e65a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e65f:	74 17                	je     f011e678 <test_kmalloc_firstfit2+0xad1>
f011e661:	83 ec 04             	sub    $0x4,%esp
f011e664:	68 97 b9 13 f0       	push   $0xf013b997
f011e669:	68 ee 03 00 00       	push   $0x3ee
f011e66e:	68 3a b5 13 f0       	push   $0xf013b53a
f011e673:	e8 8d 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e678:	e8 4b 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e67d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e680:	74 17                	je     f011e699 <test_kmalloc_firstfit2+0xaf2>
f011e682:	83 ec 04             	sub    $0x4,%esp
f011e685:	68 54 b5 13 f0       	push   $0xf013b554
f011e68a:	68 ef 03 00 00       	push   $0x3ef
f011e68f:	68 3a b5 13 f0       	push   $0xf013b53a
f011e694:	e8 6c 1b fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e699:	e8 f3 e6 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e69e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e6a1:	e8 22 57 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e6a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e6a9:	83 ec 0c             	sub    $0xc,%esp
f011e6ac:	68 00 fc 4f 00       	push   $0x4ffc00
f011e6b1:	e8 c4 93 fe ff       	call   f0107a7a <kmalloc>
f011e6b6:	83 c4 10             	add    $0x10,%esp
f011e6b9:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e6bf:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e6c5:	89 c1                	mov    %eax,%ecx
f011e6c7:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e6ce:	10 00 00 
f011e6d1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e6d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6dc:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e6e2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e6e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6ed:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e6f3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e6f9:	29 d0                	sub    %edx,%eax
f011e6fb:	89 c3                	mov    %eax,%ebx
f011e6fd:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011e704:	10 00 00 
f011e707:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e70c:	0f b6 d0             	movzbl %al,%edx
f011e70f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e715:	01 d0                	add    %edx,%eax
f011e717:	48                   	dec    %eax
f011e718:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011e71e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e724:	ba 00 00 00 00       	mov    $0x0,%edx
f011e729:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011e72f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e735:	29 d0                	sub    %edx,%eax
f011e737:	01 c3                	add    %eax,%ebx
f011e739:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011e740:	10 00 00 
f011e743:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e748:	0f b6 c0             	movzbl %al,%eax
f011e74b:	c1 e0 04             	shl    $0x4,%eax
f011e74e:	89 c2                	mov    %eax,%edx
f011e750:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e756:	01 d0                	add    %edx,%eax
f011e758:	48                   	dec    %eax
f011e759:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011e75f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e765:	ba 00 00 00 00       	mov    $0x0,%edx
f011e76a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011e770:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e776:	29 d0                	sub    %edx,%eax
f011e778:	01 d8                	add    %ebx,%eax
f011e77a:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e77f:	39 c1                	cmp    %eax,%ecx
f011e781:	74 17                	je     f011e79a <test_kmalloc_firstfit2+0xbf3>
f011e783:	83 ec 04             	sub    $0x4,%esp
f011e786:	68 54 b9 13 f0       	push   $0xf013b954
f011e78b:	68 f5 03 00 00       	push   $0x3f5
f011e790:	68 3a b5 13 f0       	push   $0xf013b53a
f011e795:	e8 6b 1a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e79a:	e8 29 56 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e79f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e7a2:	74 17                	je     f011e7bb <test_kmalloc_firstfit2+0xc14>
f011e7a4:	83 ec 04             	sub    $0x4,%esp
f011e7a7:	68 54 b5 13 f0       	push   $0xf013b554
f011e7ac:	68 f6 03 00 00       	push   $0x3f6
f011e7b1:	68 3a b5 13 f0       	push   $0xf013b53a
f011e7b6:	e8 4a 1a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e7bb:	e8 d1 e5 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e7c0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e7c3:	29 c2                	sub    %eax,%edx
f011e7c5:	89 d0                	mov    %edx,%eax
f011e7c7:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e7cc:	74 17                	je     f011e7e5 <test_kmalloc_firstfit2+0xc3e>
f011e7ce:	83 ec 04             	sub    $0x4,%esp
f011e7d1:	68 84 b9 13 f0       	push   $0xf013b984
f011e7d6:	68 f7 03 00 00       	push   $0x3f7
f011e7db:	68 3a b5 13 f0       	push   $0xf013b53a
f011e7e0:	e8 20 1a fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e7e5:	e8 a7 e5 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e7ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e7ed:	e8 d6 55 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e7f2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e7f5:	83 ec 0c             	sub    $0xc,%esp
f011e7f8:	68 00 fc 2f 00       	push   $0x2ffc00
f011e7fd:	e8 78 92 fe ff       	call   f0107a7a <kmalloc>
f011e802:	83 c4 10             	add    $0x10,%esp
f011e805:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e80b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e811:	89 c1                	mov    %eax,%ecx
f011e813:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011e81a:	10 00 00 
f011e81d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e823:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e828:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011e82e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e834:	ba 00 00 00 00       	mov    $0x0,%edx
f011e839:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011e83f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e845:	29 d0                	sub    %edx,%eax
f011e847:	89 c3                	mov    %eax,%ebx
f011e849:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011e850:	10 00 00 
f011e853:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e858:	0f b6 d0             	movzbl %al,%edx
f011e85b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e861:	01 d0                	add    %edx,%eax
f011e863:	48                   	dec    %eax
f011e864:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011e86a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e870:	ba 00 00 00 00       	mov    $0x0,%edx
f011e875:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011e87b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e881:	29 d0                	sub    %edx,%eax
f011e883:	01 c3                	add    %eax,%ebx
f011e885:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011e88c:	10 00 00 
f011e88f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e894:	0f b6 c0             	movzbl %al,%eax
f011e897:	c1 e0 04             	shl    $0x4,%eax
f011e89a:	89 c2                	mov    %eax,%edx
f011e89c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e8a2:	01 d0                	add    %edx,%eax
f011e8a4:	48                   	dec    %eax
f011e8a5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e8ab:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e8b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8b6:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e8bc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e8c2:	29 d0                	sub    %edx,%eax
f011e8c4:	01 d8                	add    %ebx,%eax
f011e8c6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e8cb:	39 c1                	cmp    %eax,%ecx
f011e8cd:	74 17                	je     f011e8e6 <test_kmalloc_firstfit2+0xd3f>
f011e8cf:	83 ec 04             	sub    $0x4,%esp
f011e8d2:	68 54 b9 13 f0       	push   $0xf013b954
f011e8d7:	68 05 04 00 00       	push   $0x405
f011e8dc:	68 3a b5 13 f0       	push   $0xf013b53a
f011e8e1:	e8 1f 19 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8e6:	e8 dd 54 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011e8eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e8ee:	74 17                	je     f011e907 <test_kmalloc_firstfit2+0xd60>
f011e8f0:	83 ec 04             	sub    $0x4,%esp
f011e8f3:	68 54 b5 13 f0       	push   $0xf013b554
f011e8f8:	68 06 04 00 00       	push   $0x406
f011e8fd:	68 3a b5 13 f0       	push   $0xf013b53a
f011e902:	e8 fe 18 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e907:	e8 85 e4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011e90c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e90f:	29 c2                	sub    %eax,%edx
f011e911:	89 d0                	mov    %edx,%eax
f011e913:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e918:	74 17                	je     f011e931 <test_kmalloc_firstfit2+0xd8a>
f011e91a:	83 ec 04             	sub    $0x4,%esp
f011e91d:	68 84 b9 13 f0       	push   $0xf013b984
f011e922:	68 07 04 00 00       	push   $0x407
f011e927:	68 3a b5 13 f0       	push   $0xf013b53a
f011e92c:	e8 d4 18 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e931:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e938:	10 00 00 
f011e93b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e941:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e946:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e94c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e952:	ba 00 00 00 00       	mov    $0x0,%edx
f011e957:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e95d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e963:	29 d0                	sub    %edx,%eax
f011e965:	89 c1                	mov    %eax,%ecx
f011e967:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e96e:	10 00 00 
f011e971:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e976:	0f b6 d0             	movzbl %al,%edx
f011e979:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e97f:	01 d0                	add    %edx,%eax
f011e981:	48                   	dec    %eax
f011e982:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e988:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e98e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e993:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e999:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e99f:	29 d0                	sub    %edx,%eax
f011e9a1:	01 c1                	add    %eax,%ecx
f011e9a3:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e9aa:	10 00 00 
f011e9ad:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011e9b2:	0f b6 c0             	movzbl %al,%eax
f011e9b5:	c1 e0 04             	shl    $0x4,%eax
f011e9b8:	89 c2                	mov    %eax,%edx
f011e9ba:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e9c0:	01 d0                	add    %edx,%eax
f011e9c2:	48                   	dec    %eax
f011e9c3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e9c9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e9cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9d4:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e9da:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e9e0:	29 d0                	sub    %edx,%eax
f011e9e2:	01 c8                	add    %ecx,%eax
f011e9e4:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e9e9:	29 c2                	sub    %eax,%edx
f011e9eb:	89 d0                	mov    %edx,%eax
f011e9ed:	83 ec 0c             	sub    $0xc,%esp
f011e9f0:	50                   	push   %eax
f011e9f1:	e8 84 90 fe ff       	call   f0107a7a <kmalloc>
f011e9f6:	83 c4 10             	add    $0x10,%esp
f011e9f9:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e9ff:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ea05:	85 c0                	test   %eax,%eax
f011ea07:	74 17                	je     f011ea20 <test_kmalloc_firstfit2+0xe79>
f011ea09:	83 ec 04             	sub    $0x4,%esp
f011ea0c:	68 84 ba 13 f0       	push   $0xf013ba84
f011ea11:	68 0d 04 00 00       	push   $0x40d
f011ea16:	68 3a b5 13 f0       	push   $0xf013b53a
f011ea1b:	e8 e5 17 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011ea20:	83 ec 0c             	sub    $0xc,%esp
f011ea23:	68 c4 bb 13 f0       	push   $0xf013bbc4
f011ea28:	e8 e1 22 fe ff       	call   f0100d0e <cprintf>
f011ea2d:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011ea30:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011ea35:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ea38:	5b                   	pop    %ebx
f011ea39:	5f                   	pop    %edi
f011ea3a:	5d                   	pop    %ebp
f011ea3b:	c3                   	ret    

f011ea3c <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011ea3c:	55                   	push   %ebp
f011ea3d:	89 e5                	mov    %esp,%ebp
f011ea3f:	57                   	push   %edi
f011ea40:	53                   	push   %ebx
f011ea41:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011ea47:	83 ec 0c             	sub    $0xc,%esp
f011ea4a:	68 7c b4 13 f0       	push   $0xf013b47c
f011ea4f:	e8 ba 22 fe ff       	call   f0100d0e <cprintf>
f011ea54:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ea57:	83 ec 0c             	sub    $0xc,%esp
f011ea5a:	68 ac b4 13 f0       	push   $0xf013b4ac
f011ea5f:	e8 aa 22 fe ff       	call   f0100d0e <cprintf>
f011ea64:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ea67:	83 ec 0c             	sub    $0xc,%esp
f011ea6a:	68 7c b4 13 f0       	push   $0xf013b47c
f011ea6f:	e8 9a 22 fe ff       	call   f0100d0e <cprintf>
f011ea74:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011ea77:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011ea7d:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011ea82:	b8 00 00 00 00       	mov    $0x0,%eax
f011ea87:	89 d7                	mov    %edx,%edi
f011ea89:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011ea8b:	e8 01 e3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011ea90:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011ea93:	e8 30 53 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ea98:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011ea9b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011eaa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011eaa9:	eb 1f                	jmp    f011eaca <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011eaab:	83 ec 0c             	sub    $0xc,%esp
f011eaae:	68 00 00 20 00       	push   $0x200000
f011eab3:	e8 c2 8f fe ff       	call   f0107a7a <kmalloc>
f011eab8:	83 c4 10             	add    $0x10,%esp
f011eabb:	89 c2                	mov    %eax,%edx
f011eabd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011eac0:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011eac7:	ff 45 f4             	incl   -0xc(%ebp)
f011eaca:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011eace:	7e db                	jle    f011eaab <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011ead0:	83 ec 0c             	sub    $0xc,%esp
f011ead3:	68 00 b0 1f 00       	push   $0x1fb000
f011ead8:	e8 9d 8f fe ff       	call   f0107a7a <kmalloc>
f011eadd:	83 c4 10             	add    $0x10,%esp
f011eae0:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011eae6:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011eaec:	89 c1                	mov    %eax,%ecx
f011eaee:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011eaf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011eaf8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eafd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011eb00:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011eb03:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb08:	f7 75 e4             	divl   -0x1c(%ebp)
f011eb0b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011eb0e:	29 d0                	sub    %edx,%eax
f011eb10:	89 c3                	mov    %eax,%ebx
f011eb12:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011eb19:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011eb1e:	0f b6 d0             	movzbl %al,%edx
f011eb21:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011eb24:	01 d0                	add    %edx,%eax
f011eb26:	48                   	dec    %eax
f011eb27:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011eb2a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011eb2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb32:	f7 75 dc             	divl   -0x24(%ebp)
f011eb35:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011eb38:	29 d0                	sub    %edx,%eax
f011eb3a:	01 c3                	add    %eax,%ebx
f011eb3c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011eb43:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011eb48:	0f b6 c0             	movzbl %al,%eax
f011eb4b:	c1 e0 04             	shl    $0x4,%eax
f011eb4e:	89 c2                	mov    %eax,%edx
f011eb50:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011eb53:	01 d0                	add    %edx,%eax
f011eb55:	48                   	dec    %eax
f011eb56:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011eb59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011eb5c:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb61:	f7 75 d4             	divl   -0x2c(%ebp)
f011eb64:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011eb67:	29 d0                	sub    %edx,%eax
f011eb69:	01 d8                	add    %ebx,%eax
f011eb6b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011eb70:	39 c1                	cmp    %eax,%ecx
f011eb72:	0f 85 c0 04 00 00    	jne    f011f038 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011eb78:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011eb7e:	89 c1                	mov    %eax,%ecx
f011eb80:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011eb87:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011eb8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb8f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011eb92:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011eb95:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb9a:	f7 75 cc             	divl   -0x34(%ebp)
f011eb9d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011eba0:	29 d0                	sub    %edx,%eax
f011eba2:	89 c3                	mov    %eax,%ebx
f011eba4:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ebab:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ebb0:	0f b6 d0             	movzbl %al,%edx
f011ebb3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ebb6:	01 d0                	add    %edx,%eax
f011ebb8:	48                   	dec    %eax
f011ebb9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ebbc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ebbf:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebc4:	f7 75 c4             	divl   -0x3c(%ebp)
f011ebc7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ebca:	29 d0                	sub    %edx,%eax
f011ebcc:	01 c3                	add    %eax,%ebx
f011ebce:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ebd5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ebda:	0f b6 c0             	movzbl %al,%eax
f011ebdd:	c1 e0 04             	shl    $0x4,%eax
f011ebe0:	89 c2                	mov    %eax,%edx
f011ebe2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ebe5:	01 d0                	add    %edx,%eax
f011ebe7:	48                   	dec    %eax
f011ebe8:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ebeb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ebee:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebf3:	f7 75 bc             	divl   -0x44(%ebp)
f011ebf6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ebf9:	29 d0                	sub    %edx,%eax
f011ebfb:	01 d8                	add    %ebx,%eax
f011ebfd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ec02:	39 c1                	cmp    %eax,%ecx
f011ec04:	0f 85 2e 04 00 00    	jne    f011f038 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ec0a:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011ec10:	89 c1                	mov    %eax,%ecx
f011ec12:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ec19:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ec1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec21:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ec24:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ec27:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec2c:	f7 75 b4             	divl   -0x4c(%ebp)
f011ec2f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ec32:	29 d0                	sub    %edx,%eax
f011ec34:	89 c3                	mov    %eax,%ebx
f011ec36:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ec3d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ec42:	0f b6 d0             	movzbl %al,%edx
f011ec45:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ec48:	01 d0                	add    %edx,%eax
f011ec4a:	48                   	dec    %eax
f011ec4b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ec4e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ec51:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec56:	f7 75 ac             	divl   -0x54(%ebp)
f011ec59:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ec5c:	29 d0                	sub    %edx,%eax
f011ec5e:	01 c3                	add    %eax,%ebx
f011ec60:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ec67:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ec6c:	0f b6 c0             	movzbl %al,%eax
f011ec6f:	c1 e0 04             	shl    $0x4,%eax
f011ec72:	89 c2                	mov    %eax,%edx
f011ec74:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ec77:	01 d0                	add    %edx,%eax
f011ec79:	48                   	dec    %eax
f011ec7a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ec7d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ec80:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec85:	f7 75 a4             	divl   -0x5c(%ebp)
f011ec88:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ec8b:	29 d0                	sub    %edx,%eax
f011ec8d:	01 d8                	add    %ebx,%eax
f011ec8f:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011ec94:	39 c1                	cmp    %eax,%ecx
f011ec96:	0f 85 9c 03 00 00    	jne    f011f038 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011ec9c:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011eca2:	89 c1                	mov    %eax,%ecx
f011eca4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ecab:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ecae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ecb3:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ecb6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ecb9:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecbe:	f7 75 9c             	divl   -0x64(%ebp)
f011ecc1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ecc4:	29 d0                	sub    %edx,%eax
f011ecc6:	89 c3                	mov    %eax,%ebx
f011ecc8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011eccf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ecd4:	0f b6 d0             	movzbl %al,%edx
f011ecd7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ecda:	01 d0                	add    %edx,%eax
f011ecdc:	48                   	dec    %eax
f011ecdd:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ece0:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ece3:	ba 00 00 00 00       	mov    $0x0,%edx
f011ece8:	f7 75 94             	divl   -0x6c(%ebp)
f011eceb:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ecee:	29 d0                	sub    %edx,%eax
f011ecf0:	01 c3                	add    %eax,%ebx
f011ecf2:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ecf9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ecfe:	0f b6 c0             	movzbl %al,%eax
f011ed01:	c1 e0 04             	shl    $0x4,%eax
f011ed04:	89 c2                	mov    %eax,%edx
f011ed06:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ed09:	01 d0                	add    %edx,%eax
f011ed0b:	48                   	dec    %eax
f011ed0c:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ed0f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ed12:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed17:	f7 75 8c             	divl   -0x74(%ebp)
f011ed1a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ed1d:	29 d0                	sub    %edx,%eax
f011ed1f:	01 d8                	add    %ebx,%eax
f011ed21:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ed26:	39 c1                	cmp    %eax,%ecx
f011ed28:	0f 85 0a 03 00 00    	jne    f011f038 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011ed2e:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011ed34:	89 c1                	mov    %eax,%ecx
f011ed36:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ed3d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ed40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ed45:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ed48:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ed4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed50:	f7 75 84             	divl   -0x7c(%ebp)
f011ed53:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ed56:	29 d0                	sub    %edx,%eax
f011ed58:	89 c3                	mov    %eax,%ebx
f011ed5a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ed61:	10 00 00 
f011ed64:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ed69:	0f b6 d0             	movzbl %al,%edx
f011ed6c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ed72:	01 d0                	add    %edx,%eax
f011ed74:	48                   	dec    %eax
f011ed75:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ed7b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ed81:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed86:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ed8c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ed92:	29 d0                	sub    %edx,%eax
f011ed94:	01 c3                	add    %eax,%ebx
f011ed96:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ed9d:	10 00 00 
f011eda0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011eda5:	0f b6 c0             	movzbl %al,%eax
f011eda8:	c1 e0 04             	shl    $0x4,%eax
f011edab:	89 c2                	mov    %eax,%edx
f011edad:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011edb3:	01 d0                	add    %edx,%eax
f011edb5:	48                   	dec    %eax
f011edb6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011edbc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011edc2:	ba 00 00 00 00       	mov    $0x0,%edx
f011edc7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011edcd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011edd3:	29 d0                	sub    %edx,%eax
f011edd5:	01 d8                	add    %ebx,%eax
f011edd7:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011eddc:	39 c1                	cmp    %eax,%ecx
f011edde:	0f 85 54 02 00 00    	jne    f011f038 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ede4:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011edea:	89 c1                	mov    %eax,%ecx
f011edec:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011edf3:	10 00 00 
f011edf6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011edfc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ee01:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ee07:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ee0d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee12:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ee18:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ee1e:	29 d0                	sub    %edx,%eax
f011ee20:	89 c3                	mov    %eax,%ebx
f011ee22:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ee29:	10 00 00 
f011ee2c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ee31:	0f b6 d0             	movzbl %al,%edx
f011ee34:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ee3a:	01 d0                	add    %edx,%eax
f011ee3c:	48                   	dec    %eax
f011ee3d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ee43:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ee49:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee4e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ee54:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ee5a:	29 d0                	sub    %edx,%eax
f011ee5c:	01 c3                	add    %eax,%ebx
f011ee5e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011ee65:	10 00 00 
f011ee68:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ee6d:	0f b6 c0             	movzbl %al,%eax
f011ee70:	c1 e0 04             	shl    $0x4,%eax
f011ee73:	89 c2                	mov    %eax,%edx
f011ee75:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ee7b:	01 d0                	add    %edx,%eax
f011ee7d:	48                   	dec    %eax
f011ee7e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011ee84:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ee8a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee8f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011ee95:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ee9b:	29 d0                	sub    %edx,%eax
f011ee9d:	01 d8                	add    %ebx,%eax
f011ee9f:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011eea4:	39 c1                	cmp    %eax,%ecx
f011eea6:	0f 85 8c 01 00 00    	jne    f011f038 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011eeac:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011eeb2:	89 c1                	mov    %eax,%ecx
f011eeb4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011eebb:	10 00 00 
f011eebe:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011eec4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eec9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011eecf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011eed5:	ba 00 00 00 00       	mov    $0x0,%edx
f011eeda:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011eee0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011eee6:	29 d0                	sub    %edx,%eax
f011eee8:	89 c3                	mov    %eax,%ebx
f011eeea:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011eef1:	10 00 00 
f011eef4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011eef9:	0f b6 d0             	movzbl %al,%edx
f011eefc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ef02:	01 d0                	add    %edx,%eax
f011ef04:	48                   	dec    %eax
f011ef05:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ef0b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ef11:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef16:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ef1c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ef22:	29 d0                	sub    %edx,%eax
f011ef24:	01 c3                	add    %eax,%ebx
f011ef26:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ef2d:	10 00 00 
f011ef30:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ef35:	0f b6 c0             	movzbl %al,%eax
f011ef38:	c1 e0 04             	shl    $0x4,%eax
f011ef3b:	89 c2                	mov    %eax,%edx
f011ef3d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ef43:	01 d0                	add    %edx,%eax
f011ef45:	48                   	dec    %eax
f011ef46:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ef4c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ef52:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef57:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ef5d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ef63:	29 d0                	sub    %edx,%eax
f011ef65:	01 d8                	add    %ebx,%eax
f011ef67:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ef6c:	39 c1                	cmp    %eax,%ecx
f011ef6e:	0f 85 c4 00 00 00    	jne    f011f038 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011ef74:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011ef7a:	89 c1                	mov    %eax,%ecx
f011ef7c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ef83:	10 00 00 
f011ef86:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ef8c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef91:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ef97:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ef9d:	ba 00 00 00 00       	mov    $0x0,%edx
f011efa2:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011efa8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011efae:	29 d0                	sub    %edx,%eax
f011efb0:	89 c3                	mov    %eax,%ebx
f011efb2:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011efb9:	10 00 00 
f011efbc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011efc1:	0f b6 d0             	movzbl %al,%edx
f011efc4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011efca:	01 d0                	add    %edx,%eax
f011efcc:	48                   	dec    %eax
f011efcd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011efd3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011efd9:	ba 00 00 00 00       	mov    $0x0,%edx
f011efde:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011efe4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011efea:	29 d0                	sub    %edx,%eax
f011efec:	01 c3                	add    %eax,%ebx
f011efee:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011eff5:	10 00 00 
f011eff8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011effd:	0f b6 c0             	movzbl %al,%eax
f011f000:	c1 e0 04             	shl    $0x4,%eax
f011f003:	89 c2                	mov    %eax,%edx
f011f005:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f00b:	01 d0                	add    %edx,%eax
f011f00d:	48                   	dec    %eax
f011f00e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f014:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f01a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f01f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f025:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f02b:	29 d0                	sub    %edx,%eax
f011f02d:	01 d8                	add    %ebx,%eax
f011f02f:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f034:	39 c1                	cmp    %eax,%ecx
f011f036:	74 17                	je     f011f04f <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f038:	83 ec 04             	sub    $0x4,%esp
f011f03b:	68 10 bc 13 f0       	push   $0xf013bc10
f011f040:	68 31 04 00 00       	push   $0x431
f011f045:	68 3a b5 13 f0       	push   $0xf013b53a
f011f04a:	e8 b6 11 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f04f:	e8 74 4d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f054:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f057:	74 17                	je     f011f070 <test_kmalloc_worstfit+0x634>
f011f059:	83 ec 04             	sub    $0x4,%esp
f011f05c:	68 54 b5 13 f0       	push   $0xf013b554
f011f061:	68 33 04 00 00       	push   $0x433
f011f066:	68 3a b5 13 f0       	push   $0xf013b53a
f011f06b:	e8 95 11 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f070:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f073:	e8 19 dd fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f078:	29 c3                	sub    %eax,%ebx
f011f07a:	89 d8                	mov    %ebx,%eax
f011f07c:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f081:	74 17                	je     f011f09a <test_kmalloc_worstfit+0x65e>
f011f083:	83 ec 04             	sub    $0x4,%esp
f011f086:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011f08b:	68 34 04 00 00       	push   $0x434
f011f090:	68 3a b5 13 f0       	push   $0xf013b53a
f011f095:	e8 6b 11 fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f09a:	e8 f2 dc fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f09f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f0a2:	e8 21 4d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f0a7:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f0aa:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f0b0:	83 ec 0c             	sub    $0xc,%esp
f011f0b3:	50                   	push   %eax
f011f0b4:	e8 8c 8a fe ff       	call   f0107b45 <kfree>
f011f0b9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f0bc:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f0c2:	83 ec 0c             	sub    $0xc,%esp
f011f0c5:	50                   	push   %eax
f011f0c6:	e8 7a 8a fe ff       	call   f0107b45 <kfree>
f011f0cb:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f0ce:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f0d4:	83 ec 0c             	sub    $0xc,%esp
f011f0d7:	50                   	push   %eax
f011f0d8:	e8 68 8a fe ff       	call   f0107b45 <kfree>
f011f0dd:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f0e0:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f0e6:	83 ec 0c             	sub    $0xc,%esp
f011f0e9:	50                   	push   %eax
f011f0ea:	e8 56 8a fe ff       	call   f0107b45 <kfree>
f011f0ef:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f0f2:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f0f8:	83 ec 0c             	sub    $0xc,%esp
f011f0fb:	50                   	push   %eax
f011f0fc:	e8 44 8a fe ff       	call   f0107b45 <kfree>
f011f101:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f104:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f10a:	83 ec 0c             	sub    $0xc,%esp
f011f10d:	50                   	push   %eax
f011f10e:	e8 32 8a fe ff       	call   f0107b45 <kfree>
f011f113:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f116:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f11c:	83 ec 0c             	sub    $0xc,%esp
f011f11f:	50                   	push   %eax
f011f120:	e8 20 8a fe ff       	call   f0107b45 <kfree>
f011f125:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f128:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f12e:	83 ec 0c             	sub    $0xc,%esp
f011f131:	50                   	push   %eax
f011f132:	e8 0e 8a fe ff       	call   f0107b45 <kfree>
f011f137:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f13a:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f140:	83 ec 0c             	sub    $0xc,%esp
f011f143:	50                   	push   %eax
f011f144:	e8 fc 89 fe ff       	call   f0107b45 <kfree>
f011f149:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f14c:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f152:	83 ec 0c             	sub    $0xc,%esp
f011f155:	50                   	push   %eax
f011f156:	e8 ea 89 fe ff       	call   f0107b45 <kfree>
f011f15b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f15e:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f164:	83 ec 0c             	sub    $0xc,%esp
f011f167:	50                   	push   %eax
f011f168:	e8 d8 89 fe ff       	call   f0107b45 <kfree>
f011f16d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f170:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f176:	83 ec 0c             	sub    $0xc,%esp
f011f179:	50                   	push   %eax
f011f17a:	e8 c6 89 fe ff       	call   f0107b45 <kfree>
f011f17f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f182:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f188:	83 ec 0c             	sub    $0xc,%esp
f011f18b:	50                   	push   %eax
f011f18c:	e8 b4 89 fe ff       	call   f0107b45 <kfree>
f011f191:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f194:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f19a:	83 ec 0c             	sub    $0xc,%esp
f011f19d:	50                   	push   %eax
f011f19e:	e8 a2 89 fe ff       	call   f0107b45 <kfree>
f011f1a3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f1a6:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f1ac:	83 ec 0c             	sub    $0xc,%esp
f011f1af:	50                   	push   %eax
f011f1b0:	e8 90 89 fe ff       	call   f0107b45 <kfree>
f011f1b5:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1b8:	e8 0b 4c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f1bd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f1c0:	74 17                	je     f011f1d9 <test_kmalloc_worstfit+0x79d>
f011f1c2:	83 ec 04             	sub    $0x4,%esp
f011f1c5:	68 54 b5 13 f0       	push   $0xf013b554
f011f1ca:	68 4a 04 00 00       	push   $0x44a
f011f1cf:	68 3a b5 13 f0       	push   $0xf013b53a
f011f1d4:	e8 2c 10 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f1d9:	e8 b3 db fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f1de:	89 c2                	mov    %eax,%edx
f011f1e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f1e3:	29 c2                	sub    %eax,%edx
f011f1e5:	89 d0                	mov    %edx,%eax
f011f1e7:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f1ec:	74 17                	je     f011f205 <test_kmalloc_worstfit+0x7c9>
f011f1ee:	83 ec 04             	sub    $0x4,%esp
f011f1f1:	68 08 b8 13 f0       	push   $0xf013b808
f011f1f6:	68 4b 04 00 00       	push   $0x44b
f011f1fb:	68 3a b5 13 f0       	push   $0xf013b53a
f011f200:	e8 00 10 fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f205:	e8 87 db fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f20a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f20d:	e8 b6 4b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f212:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f215:	83 ec 0c             	sub    $0xc,%esp
f011f218:	68 00 00 10 00       	push   $0x100000
f011f21d:	e8 58 88 fe ff       	call   f0107a7a <kmalloc>
f011f222:	83 c4 10             	add    $0x10,%esp
f011f225:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f22b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f232:	10 00 00 
f011f235:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f23b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f240:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f246:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f24c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f251:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f257:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f25d:	29 d0                	sub    %edx,%eax
f011f25f:	89 c1                	mov    %eax,%ecx
f011f261:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f268:	10 00 00 
f011f26b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f270:	0f b6 d0             	movzbl %al,%edx
f011f273:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f279:	01 d0                	add    %edx,%eax
f011f27b:	48                   	dec    %eax
f011f27c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f282:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f288:	ba 00 00 00 00       	mov    $0x0,%edx
f011f28d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f293:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f299:	29 d0                	sub    %edx,%eax
f011f29b:	01 c1                	add    %eax,%ecx
f011f29d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f2a4:	10 00 00 
f011f2a7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f2ac:	0f b6 c0             	movzbl %al,%eax
f011f2af:	c1 e0 04             	shl    $0x4,%eax
f011f2b2:	89 c2                	mov    %eax,%edx
f011f2b4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f2ba:	01 d0                	add    %edx,%eax
f011f2bc:	48                   	dec    %eax
f011f2bd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f2c3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f2c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2ce:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f2d4:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f2da:	29 d0                	sub    %edx,%eax
f011f2dc:	01 c8                	add    %ecx,%eax
f011f2de:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f2e4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f2ea:	39 c2                	cmp    %eax,%edx
f011f2ec:	74 17                	je     f011f305 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f2ee:	83 ec 04             	sub    $0x4,%esp
f011f2f1:	68 54 bc 13 f0       	push   $0xf013bc54
f011f2f6:	68 52 04 00 00       	push   $0x452
f011f2fb:	68 3a b5 13 f0       	push   $0xf013b53a
f011f300:	e8 00 0f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f305:	e8 be 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f30a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f30d:	74 17                	je     f011f326 <test_kmalloc_worstfit+0x8ea>
f011f30f:	83 ec 04             	sub    $0x4,%esp
f011f312:	68 54 b5 13 f0       	push   $0xf013b554
f011f317:	68 53 04 00 00       	push   $0x453
f011f31c:	68 3a b5 13 f0       	push   $0xf013b53a
f011f321:	e8 df 0e fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f326:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f329:	e8 63 da fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f32e:	29 c3                	sub    %eax,%ebx
f011f330:	89 d8                	mov    %ebx,%eax
f011f332:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f337:	74 17                	je     f011f350 <test_kmalloc_worstfit+0x914>
f011f339:	83 ec 04             	sub    $0x4,%esp
f011f33c:	68 72 ba 13 f0       	push   $0xf013ba72
f011f341:	68 54 04 00 00       	push   $0x454
f011f346:	68 3a b5 13 f0       	push   $0xf013b53a
f011f34b:	e8 b5 0e fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f350:	ff 45 e8             	incl   -0x18(%ebp)
f011f353:	83 ec 08             	sub    $0x8,%esp
f011f356:	ff 75 e8             	pushl  -0x18(%ebp)
f011f359:	68 74 bc 13 f0       	push   $0xf013bc74
f011f35e:	e8 ab 19 fe ff       	call   f0100d0e <cprintf>
f011f363:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f366:	e8 26 da fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f36b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f36e:	e8 55 4a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f373:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f376:	83 ec 0c             	sub    $0xc,%esp
f011f379:	68 00 00 40 00       	push   $0x400000
f011f37e:	e8 f7 86 fe ff       	call   f0107a7a <kmalloc>
f011f383:	83 c4 10             	add    $0x10,%esp
f011f386:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f38c:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f393:	10 00 00 
f011f396:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f39c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f3a1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f3a7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f3ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3b2:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f3b8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f3be:	29 d0                	sub    %edx,%eax
f011f3c0:	89 c1                	mov    %eax,%ecx
f011f3c2:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f3c9:	10 00 00 
f011f3cc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f3d1:	0f b6 d0             	movzbl %al,%edx
f011f3d4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f3da:	01 d0                	add    %edx,%eax
f011f3dc:	48                   	dec    %eax
f011f3dd:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f3e3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f3e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3ee:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f3f4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f3fa:	29 d0                	sub    %edx,%eax
f011f3fc:	01 c1                	add    %eax,%ecx
f011f3fe:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f405:	10 00 00 
f011f408:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f40d:	0f b6 c0             	movzbl %al,%eax
f011f410:	c1 e0 04             	shl    $0x4,%eax
f011f413:	89 c2                	mov    %eax,%edx
f011f415:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f41b:	01 d0                	add    %edx,%eax
f011f41d:	48                   	dec    %eax
f011f41e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f424:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f42a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f42f:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f435:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f43b:	29 d0                	sub    %edx,%eax
f011f43d:	01 c8                	add    %ecx,%eax
f011f43f:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f445:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f44b:	39 c2                	cmp    %eax,%edx
f011f44d:	74 17                	je     f011f466 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f44f:	83 ec 04             	sub    $0x4,%esp
f011f452:	68 54 bc 13 f0       	push   $0xf013bc54
f011f457:	68 5b 04 00 00       	push   $0x45b
f011f45c:	68 3a b5 13 f0       	push   $0xf013b53a
f011f461:	e8 9f 0d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f466:	e8 5d 49 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f46b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f46e:	74 17                	je     f011f487 <test_kmalloc_worstfit+0xa4b>
f011f470:	83 ec 04             	sub    $0x4,%esp
f011f473:	68 54 b5 13 f0       	push   $0xf013b554
f011f478:	68 5c 04 00 00       	push   $0x45c
f011f47d:	68 3a b5 13 f0       	push   $0xf013b53a
f011f482:	e8 7e 0d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f487:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f48a:	e8 02 d9 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f48f:	29 c3                	sub    %eax,%ebx
f011f491:	89 d8                	mov    %ebx,%eax
f011f493:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f498:	74 17                	je     f011f4b1 <test_kmalloc_worstfit+0xa75>
f011f49a:	83 ec 04             	sub    $0x4,%esp
f011f49d:	68 72 ba 13 f0       	push   $0xf013ba72
f011f4a2:	68 5d 04 00 00       	push   $0x45d
f011f4a7:	68 3a b5 13 f0       	push   $0xf013b53a
f011f4ac:	e8 54 0d fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f4b1:	ff 45 e8             	incl   -0x18(%ebp)
f011f4b4:	83 ec 08             	sub    $0x8,%esp
f011f4b7:	ff 75 e8             	pushl  -0x18(%ebp)
f011f4ba:	68 74 bc 13 f0       	push   $0xf013bc74
f011f4bf:	e8 4a 18 fe ff       	call   f0100d0e <cprintf>
f011f4c4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f4c7:	e8 c5 d8 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f4cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f4cf:	e8 f4 48 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f4d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f4d7:	83 ec 0c             	sub    $0xc,%esp
f011f4da:	68 00 00 60 00       	push   $0x600000
f011f4df:	e8 96 85 fe ff       	call   f0107a7a <kmalloc>
f011f4e4:	83 c4 10             	add    $0x10,%esp
f011f4e7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f4ed:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f4f4:	10 00 00 
f011f4f7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f4fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f502:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f508:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f50e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f513:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f519:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f51f:	29 d0                	sub    %edx,%eax
f011f521:	89 c1                	mov    %eax,%ecx
f011f523:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f52a:	10 00 00 
f011f52d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f532:	0f b6 d0             	movzbl %al,%edx
f011f535:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f53b:	01 d0                	add    %edx,%eax
f011f53d:	48                   	dec    %eax
f011f53e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f544:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f54a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f54f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f555:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f55b:	29 d0                	sub    %edx,%eax
f011f55d:	01 c1                	add    %eax,%ecx
f011f55f:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f566:	10 00 00 
f011f569:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f56e:	0f b6 c0             	movzbl %al,%eax
f011f571:	c1 e0 04             	shl    $0x4,%eax
f011f574:	89 c2                	mov    %eax,%edx
f011f576:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f57c:	01 d0                	add    %edx,%eax
f011f57e:	48                   	dec    %eax
f011f57f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f585:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f58b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f590:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f596:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f59c:	29 d0                	sub    %edx,%eax
f011f59e:	01 c8                	add    %ecx,%eax
f011f5a0:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f5a6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f5ac:	39 c2                	cmp    %eax,%edx
f011f5ae:	74 17                	je     f011f5c7 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011f5b0:	83 ec 04             	sub    $0x4,%esp
f011f5b3:	68 54 bc 13 f0       	push   $0xf013bc54
f011f5b8:	68 64 04 00 00       	push   $0x464
f011f5bd:	68 3a b5 13 f0       	push   $0xf013b53a
f011f5c2:	e8 3e 0c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5c7:	e8 fc 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f5cc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f5cf:	74 17                	je     f011f5e8 <test_kmalloc_worstfit+0xbac>
f011f5d1:	83 ec 04             	sub    $0x4,%esp
f011f5d4:	68 54 b5 13 f0       	push   $0xf013b554
f011f5d9:	68 65 04 00 00       	push   $0x465
f011f5de:	68 3a b5 13 f0       	push   $0xf013b53a
f011f5e3:	e8 1d 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f5e8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f5eb:	e8 a1 d7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f5f0:	29 c3                	sub    %eax,%ebx
f011f5f2:	89 d8                	mov    %ebx,%eax
f011f5f4:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f5f9:	74 17                	je     f011f612 <test_kmalloc_worstfit+0xbd6>
f011f5fb:	83 ec 04             	sub    $0x4,%esp
f011f5fe:	68 72 ba 13 f0       	push   $0xf013ba72
f011f603:	68 66 04 00 00       	push   $0x466
f011f608:	68 3a b5 13 f0       	push   $0xf013b53a
f011f60d:	e8 f3 0b fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f612:	ff 45 e8             	incl   -0x18(%ebp)
f011f615:	83 ec 08             	sub    $0x8,%esp
f011f618:	ff 75 e8             	pushl  -0x18(%ebp)
f011f61b:	68 74 bc 13 f0       	push   $0xf013bc74
f011f620:	e8 e9 16 fe ff       	call   f0100d0e <cprintf>
f011f625:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f628:	e8 64 d7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f62d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f630:	e8 93 47 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f635:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f638:	83 ec 0c             	sub    $0xc,%esp
f011f63b:	68 00 00 50 00       	push   $0x500000
f011f640:	e8 35 84 fe ff       	call   f0107a7a <kmalloc>
f011f645:	83 c4 10             	add    $0x10,%esp
f011f648:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f64e:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f655:	10 00 00 
f011f658:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f65e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f663:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f669:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f66f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f674:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f67a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f680:	29 d0                	sub    %edx,%eax
f011f682:	89 c1                	mov    %eax,%ecx
f011f684:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f68b:	10 00 00 
f011f68e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f693:	0f b6 d0             	movzbl %al,%edx
f011f696:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f69c:	01 d0                	add    %edx,%eax
f011f69e:	48                   	dec    %eax
f011f69f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f6a5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f6ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6b0:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f6b6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f6bc:	29 d0                	sub    %edx,%eax
f011f6be:	01 c1                	add    %eax,%ecx
f011f6c0:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f6c7:	10 00 00 
f011f6ca:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f6cf:	0f b6 c0             	movzbl %al,%eax
f011f6d2:	c1 e0 04             	shl    $0x4,%eax
f011f6d5:	89 c2                	mov    %eax,%edx
f011f6d7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f6dd:	01 d0                	add    %edx,%eax
f011f6df:	48                   	dec    %eax
f011f6e0:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f6e6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f6ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6f1:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f6f7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f6fd:	29 d0                	sub    %edx,%eax
f011f6ff:	01 c8                	add    %ecx,%eax
f011f701:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f707:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f70d:	39 c2                	cmp    %eax,%edx
f011f70f:	74 17                	je     f011f728 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011f711:	83 ec 04             	sub    $0x4,%esp
f011f714:	68 54 bc 13 f0       	push   $0xf013bc54
f011f719:	68 6d 04 00 00       	push   $0x46d
f011f71e:	68 3a b5 13 f0       	push   $0xf013b53a
f011f723:	e8 dd 0a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f728:	e8 9b 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f72d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f730:	74 17                	je     f011f749 <test_kmalloc_worstfit+0xd0d>
f011f732:	83 ec 04             	sub    $0x4,%esp
f011f735:	68 54 b5 13 f0       	push   $0xf013b554
f011f73a:	68 6e 04 00 00       	push   $0x46e
f011f73f:	68 3a b5 13 f0       	push   $0xf013b53a
f011f744:	e8 bc 0a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f749:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f74c:	e8 40 d6 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f751:	29 c3                	sub    %eax,%ebx
f011f753:	89 d8                	mov    %ebx,%eax
f011f755:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f75a:	74 17                	je     f011f773 <test_kmalloc_worstfit+0xd37>
f011f75c:	83 ec 04             	sub    $0x4,%esp
f011f75f:	68 72 ba 13 f0       	push   $0xf013ba72
f011f764:	68 6f 04 00 00       	push   $0x46f
f011f769:	68 3a b5 13 f0       	push   $0xf013b53a
f011f76e:	e8 92 0a fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f773:	ff 45 e8             	incl   -0x18(%ebp)
f011f776:	83 ec 08             	sub    $0x8,%esp
f011f779:	ff 75 e8             	pushl  -0x18(%ebp)
f011f77c:	68 74 bc 13 f0       	push   $0xf013bc74
f011f781:	e8 88 15 fe ff       	call   f0100d0e <cprintf>
f011f786:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f789:	e8 03 d6 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f78e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f791:	e8 32 46 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f796:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f799:	83 ec 0c             	sub    $0xc,%esp
f011f79c:	68 00 00 40 00       	push   $0x400000
f011f7a1:	e8 d4 82 fe ff       	call   f0107a7a <kmalloc>
f011f7a6:	83 c4 10             	add    $0x10,%esp
f011f7a9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f7af:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011f7b6:	10 00 00 
f011f7b9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011f7bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f7c4:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011f7ca:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f7d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7d5:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011f7db:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011f7e1:	29 d0                	sub    %edx,%eax
f011f7e3:	89 c1                	mov    %eax,%ecx
f011f7e5:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011f7ec:	10 00 00 
f011f7ef:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f7f4:	0f b6 d0             	movzbl %al,%edx
f011f7f7:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011f7fd:	01 d0                	add    %edx,%eax
f011f7ff:	48                   	dec    %eax
f011f800:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011f806:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f80c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f811:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011f817:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011f81d:	29 d0                	sub    %edx,%eax
f011f81f:	01 c1                	add    %eax,%ecx
f011f821:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011f828:	10 00 00 
f011f82b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f830:	0f b6 c0             	movzbl %al,%eax
f011f833:	c1 e0 04             	shl    $0x4,%eax
f011f836:	89 c2                	mov    %eax,%edx
f011f838:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011f83e:	01 d0                	add    %edx,%eax
f011f840:	48                   	dec    %eax
f011f841:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011f847:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f84d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f852:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011f858:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011f85e:	29 d0                	sub    %edx,%eax
f011f860:	01 c8                	add    %ecx,%eax
f011f862:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f868:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f86e:	39 c2                	cmp    %eax,%edx
f011f870:	74 17                	je     f011f889 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011f872:	83 ec 04             	sub    $0x4,%esp
f011f875:	68 54 bc 13 f0       	push   $0xf013bc54
f011f87a:	68 76 04 00 00       	push   $0x476
f011f87f:	68 3a b5 13 f0       	push   $0xf013b53a
f011f884:	e8 7c 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f889:	e8 3a 45 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f88e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f891:	74 17                	je     f011f8aa <test_kmalloc_worstfit+0xe6e>
f011f893:	83 ec 04             	sub    $0x4,%esp
f011f896:	68 54 b5 13 f0       	push   $0xf013b554
f011f89b:	68 77 04 00 00       	push   $0x477
f011f8a0:	68 3a b5 13 f0       	push   $0xf013b53a
f011f8a5:	e8 5b 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f8aa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f8ad:	e8 df d4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f8b2:	29 c3                	sub    %eax,%ebx
f011f8b4:	89 d8                	mov    %ebx,%eax
f011f8b6:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f8bb:	74 17                	je     f011f8d4 <test_kmalloc_worstfit+0xe98>
f011f8bd:	83 ec 04             	sub    $0x4,%esp
f011f8c0:	68 72 ba 13 f0       	push   $0xf013ba72
f011f8c5:	68 78 04 00 00       	push   $0x478
f011f8ca:	68 3a b5 13 f0       	push   $0xf013b53a
f011f8cf:	e8 31 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f8d4:	ff 45 e8             	incl   -0x18(%ebp)
f011f8d7:	83 ec 08             	sub    $0x8,%esp
f011f8da:	ff 75 e8             	pushl  -0x18(%ebp)
f011f8dd:	68 74 bc 13 f0       	push   $0xf013bc74
f011f8e2:	e8 27 14 fe ff       	call   f0100d0e <cprintf>
f011f8e7:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f8ea:	e8 a2 d4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011f8ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f8f2:	e8 d1 44 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f8f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f8fa:	83 ec 0c             	sub    $0xc,%esp
f011f8fd:	68 00 00 20 00       	push   $0x200000
f011f902:	e8 73 81 fe ff       	call   f0107a7a <kmalloc>
f011f907:	83 c4 10             	add    $0x10,%esp
f011f90a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f910:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011f917:	10 00 00 
f011f91a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011f920:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f925:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011f92b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f931:	ba 00 00 00 00       	mov    $0x0,%edx
f011f936:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011f93c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f942:	29 d0                	sub    %edx,%eax
f011f944:	89 c1                	mov    %eax,%ecx
f011f946:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011f94d:	10 00 00 
f011f950:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f955:	0f b6 d0             	movzbl %al,%edx
f011f958:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011f95e:	01 d0                	add    %edx,%eax
f011f960:	48                   	dec    %eax
f011f961:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011f967:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f96d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f972:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011f978:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f97e:	29 d0                	sub    %edx,%eax
f011f980:	01 c1                	add    %eax,%ecx
f011f982:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011f989:	10 00 00 
f011f98c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011f991:	0f b6 c0             	movzbl %al,%eax
f011f994:	c1 e0 04             	shl    $0x4,%eax
f011f997:	89 c2                	mov    %eax,%edx
f011f999:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011f99f:	01 d0                	add    %edx,%eax
f011f9a1:	48                   	dec    %eax
f011f9a2:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011f9a8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f9ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9b3:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011f9b9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f9bf:	29 d0                	sub    %edx,%eax
f011f9c1:	01 c8                	add    %ecx,%eax
f011f9c3:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f9c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f9cf:	39 c2                	cmp    %eax,%edx
f011f9d1:	74 17                	je     f011f9ea <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011f9d3:	83 ec 04             	sub    $0x4,%esp
f011f9d6:	68 54 bc 13 f0       	push   $0xf013bc54
f011f9db:	68 7f 04 00 00       	push   $0x47f
f011f9e0:	68 3a b5 13 f0       	push   $0xf013b53a
f011f9e5:	e8 1b 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f9ea:	e8 d9 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011f9ef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f9f2:	74 17                	je     f011fa0b <test_kmalloc_worstfit+0xfcf>
f011f9f4:	83 ec 04             	sub    $0x4,%esp
f011f9f7:	68 54 b5 13 f0       	push   $0xf013b554
f011f9fc:	68 80 04 00 00       	push   $0x480
f011fa01:	68 3a b5 13 f0       	push   $0xf013b53a
f011fa06:	e8 fa 07 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fa0b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fa0e:	e8 7e d3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011fa13:	29 c3                	sub    %eax,%ebx
f011fa15:	89 d8                	mov    %ebx,%eax
f011fa17:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fa1c:	74 17                	je     f011fa35 <test_kmalloc_worstfit+0xff9>
f011fa1e:	83 ec 04             	sub    $0x4,%esp
f011fa21:	68 72 ba 13 f0       	push   $0xf013ba72
f011fa26:	68 81 04 00 00       	push   $0x481
f011fa2b:	68 3a b5 13 f0       	push   $0xf013b53a
f011fa30:	e8 d0 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fa35:	ff 45 e8             	incl   -0x18(%ebp)
f011fa38:	83 ec 08             	sub    $0x8,%esp
f011fa3b:	ff 75 e8             	pushl  -0x18(%ebp)
f011fa3e:	68 74 bc 13 f0       	push   $0xf013bc74
f011fa43:	e8 c6 12 fe ff       	call   f0100d0e <cprintf>
f011fa48:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa4b:	e8 41 d3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011fa50:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa53:	e8 70 43 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fa58:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011fa5b:	83 ec 0c             	sub    $0xc,%esp
f011fa5e:	68 00 00 18 00       	push   $0x180000
f011fa63:	e8 12 80 fe ff       	call   f0107a7a <kmalloc>
f011fa68:	83 c4 10             	add    $0x10,%esp
f011fa6b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011fa71:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011fa78:	10 00 00 
f011fa7b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011fa81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fa86:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011fa8c:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011fa92:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa97:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011fa9d:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011faa3:	29 d0                	sub    %edx,%eax
f011faa5:	89 c1                	mov    %eax,%ecx
f011faa7:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011faae:	10 00 00 
f011fab1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fab6:	0f b6 d0             	movzbl %al,%edx
f011fab9:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011fabf:	01 d0                	add    %edx,%eax
f011fac1:	48                   	dec    %eax
f011fac2:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011fac8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011face:	ba 00 00 00 00       	mov    $0x0,%edx
f011fad3:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011fad9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fadf:	29 d0                	sub    %edx,%eax
f011fae1:	01 c1                	add    %eax,%ecx
f011fae3:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011faea:	10 00 00 
f011faed:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011faf2:	0f b6 c0             	movzbl %al,%eax
f011faf5:	c1 e0 04             	shl    $0x4,%eax
f011faf8:	89 c2                	mov    %eax,%edx
f011fafa:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011fb00:	01 d0                	add    %edx,%eax
f011fb02:	48                   	dec    %eax
f011fb03:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011fb09:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fb0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb14:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011fb1a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fb20:	29 d0                	sub    %edx,%eax
f011fb22:	01 c8                	add    %ecx,%eax
f011fb24:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011fb2a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fb30:	39 c2                	cmp    %eax,%edx
f011fb32:	74 17                	je     f011fb4b <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011fb34:	83 ec 04             	sub    $0x4,%esp
f011fb37:	68 54 bc 13 f0       	push   $0xf013bc54
f011fb3c:	68 88 04 00 00       	push   $0x488
f011fb41:	68 3a b5 13 f0       	push   $0xf013b53a
f011fb46:	e8 ba 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb4b:	e8 78 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fb50:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb53:	74 17                	je     f011fb6c <test_kmalloc_worstfit+0x1130>
f011fb55:	83 ec 04             	sub    $0x4,%esp
f011fb58:	68 54 b5 13 f0       	push   $0xf013b554
f011fb5d:	68 89 04 00 00       	push   $0x489
f011fb62:	68 3a b5 13 f0       	push   $0xf013b53a
f011fb67:	e8 99 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fb6c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fb6f:	e8 1d d2 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011fb74:	29 c3                	sub    %eax,%ebx
f011fb76:	89 d8                	mov    %ebx,%eax
f011fb78:	3d 80 01 00 00       	cmp    $0x180,%eax
f011fb7d:	74 17                	je     f011fb96 <test_kmalloc_worstfit+0x115a>
f011fb7f:	83 ec 04             	sub    $0x4,%esp
f011fb82:	68 72 ba 13 f0       	push   $0xf013ba72
f011fb87:	68 8a 04 00 00       	push   $0x48a
f011fb8c:	68 3a b5 13 f0       	push   $0xf013b53a
f011fb91:	e8 6f 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fb96:	ff 45 e8             	incl   -0x18(%ebp)
f011fb99:	83 ec 08             	sub    $0x8,%esp
f011fb9c:	ff 75 e8             	pushl  -0x18(%ebp)
f011fb9f:	68 74 bc 13 f0       	push   $0xf013bc74
f011fba4:	e8 65 11 fe ff       	call   f0100d0e <cprintf>
f011fba9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fbac:	e8 e0 d1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011fbb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fbb4:	e8 0f 42 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fbb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011fbbc:	83 ec 0c             	sub    $0xc,%esp
f011fbbf:	68 00 00 08 00       	push   $0x80000
f011fbc4:	e8 b1 7e fe ff       	call   f0107a7a <kmalloc>
f011fbc9:	83 c4 10             	add    $0x10,%esp
f011fbcc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011fbd2:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011fbd9:	10 00 00 
f011fbdc:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fbe2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fbe7:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011fbed:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fbf3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbf8:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011fbfe:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fc04:	29 d0                	sub    %edx,%eax
f011fc06:	89 c1                	mov    %eax,%ecx
f011fc08:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011fc0f:	10 00 00 
f011fc12:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fc17:	0f b6 d0             	movzbl %al,%edx
f011fc1a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011fc20:	01 d0                	add    %edx,%eax
f011fc22:	48                   	dec    %eax
f011fc23:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011fc29:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fc2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc34:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011fc3a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011fc40:	29 d0                	sub    %edx,%eax
f011fc42:	01 c1                	add    %eax,%ecx
f011fc44:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011fc4b:	10 00 00 
f011fc4e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fc53:	0f b6 c0             	movzbl %al,%eax
f011fc56:	c1 e0 04             	shl    $0x4,%eax
f011fc59:	89 c2                	mov    %eax,%edx
f011fc5b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011fc61:	01 d0                	add    %edx,%eax
f011fc63:	48                   	dec    %eax
f011fc64:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011fc6a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fc70:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc75:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011fc7b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011fc81:	29 d0                	sub    %edx,%eax
f011fc83:	01 c8                	add    %ecx,%eax
f011fc85:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011fc8b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fc91:	39 c2                	cmp    %eax,%edx
f011fc93:	74 17                	je     f011fcac <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011fc95:	83 ec 04             	sub    $0x4,%esp
f011fc98:	68 54 bc 13 f0       	push   $0xf013bc54
f011fc9d:	68 91 04 00 00       	push   $0x491
f011fca2:	68 3a b5 13 f0       	push   $0xf013b53a
f011fca7:	e8 59 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fcac:	e8 17 41 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fcb1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fcb4:	74 17                	je     f011fccd <test_kmalloc_worstfit+0x1291>
f011fcb6:	83 ec 04             	sub    $0x4,%esp
f011fcb9:	68 54 b5 13 f0       	push   $0xf013b554
f011fcbe:	68 92 04 00 00       	push   $0x492
f011fcc3:	68 3a b5 13 f0       	push   $0xf013b53a
f011fcc8:	e8 38 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fccd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fcd0:	e8 bc d0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011fcd5:	29 c3                	sub    %eax,%ebx
f011fcd7:	89 d8                	mov    %ebx,%eax
f011fcd9:	3d 80 00 00 00       	cmp    $0x80,%eax
f011fcde:	74 17                	je     f011fcf7 <test_kmalloc_worstfit+0x12bb>
f011fce0:	83 ec 04             	sub    $0x4,%esp
f011fce3:	68 72 ba 13 f0       	push   $0xf013ba72
f011fce8:	68 93 04 00 00       	push   $0x493
f011fced:	68 3a b5 13 f0       	push   $0xf013b53a
f011fcf2:	e8 0e 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fcf7:	ff 45 e8             	incl   -0x18(%ebp)
f011fcfa:	83 ec 08             	sub    $0x8,%esp
f011fcfd:	ff 75 e8             	pushl  -0x18(%ebp)
f011fd00:	68 74 bc 13 f0       	push   $0xf013bc74
f011fd05:	e8 04 10 fe ff       	call   f0100d0e <cprintf>
f011fd0a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fd0d:	e8 7f d0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011fd12:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fd15:	e8 ae 40 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fd1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011fd1d:	83 ec 0c             	sub    $0xc,%esp
f011fd20:	68 00 04 00 00       	push   $0x400
f011fd25:	e8 50 7d fe ff       	call   f0107a7a <kmalloc>
f011fd2a:	83 c4 10             	add    $0x10,%esp
f011fd2d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011fd33:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011fd3a:	10 00 00 
f011fd3d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011fd43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fd48:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011fd4e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fd54:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd59:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011fd5f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011fd65:	29 d0                	sub    %edx,%eax
f011fd67:	89 c1                	mov    %eax,%ecx
f011fd69:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011fd70:	10 00 00 
f011fd73:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fd78:	0f b6 d0             	movzbl %al,%edx
f011fd7b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011fd81:	01 d0                	add    %edx,%eax
f011fd83:	48                   	dec    %eax
f011fd84:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011fd8a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011fd90:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd95:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011fd9b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011fda1:	29 d0                	sub    %edx,%eax
f011fda3:	01 c1                	add    %eax,%ecx
f011fda5:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011fdac:	10 00 00 
f011fdaf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fdb4:	0f b6 c0             	movzbl %al,%eax
f011fdb7:	c1 e0 04             	shl    $0x4,%eax
f011fdba:	89 c2                	mov    %eax,%edx
f011fdbc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011fdc2:	01 d0                	add    %edx,%eax
f011fdc4:	48                   	dec    %eax
f011fdc5:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011fdcb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fdd1:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdd6:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011fddc:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011fde2:	29 d0                	sub    %edx,%eax
f011fde4:	01 c8                	add    %ecx,%eax
f011fde6:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011fdec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fdf2:	39 c2                	cmp    %eax,%edx
f011fdf4:	74 17                	je     f011fe0d <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011fdf6:	83 ec 04             	sub    $0x4,%esp
f011fdf9:	68 54 bc 13 f0       	push   $0xf013bc54
f011fdfe:	68 9a 04 00 00       	push   $0x49a
f011fe03:	68 3a b5 13 f0       	push   $0xf013b53a
f011fe08:	e8 f8 03 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe0d:	e8 b6 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fe12:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fe15:	74 17                	je     f011fe2e <test_kmalloc_worstfit+0x13f2>
f011fe17:	83 ec 04             	sub    $0x4,%esp
f011fe1a:	68 54 b5 13 f0       	push   $0xf013b554
f011fe1f:	68 9b 04 00 00       	push   $0x49b
f011fe24:	68 3a b5 13 f0       	push   $0xf013b53a
f011fe29:	e8 d7 03 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fe2e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fe31:	e8 5b cf fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011fe36:	29 c3                	sub    %eax,%ebx
f011fe38:	89 d8                	mov    %ebx,%eax
f011fe3a:	83 f8 01             	cmp    $0x1,%eax
f011fe3d:	74 17                	je     f011fe56 <test_kmalloc_worstfit+0x141a>
f011fe3f:	83 ec 04             	sub    $0x4,%esp
f011fe42:	68 72 ba 13 f0       	push   $0xf013ba72
f011fe47:	68 9c 04 00 00       	push   $0x49c
f011fe4c:	68 3a b5 13 f0       	push   $0xf013b53a
f011fe51:	e8 af 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fe56:	ff 45 e8             	incl   -0x18(%ebp)
f011fe59:	83 ec 08             	sub    $0x8,%esp
f011fe5c:	ff 75 e8             	pushl  -0x18(%ebp)
f011fe5f:	68 74 bc 13 f0       	push   $0xf013bc74
f011fe64:	e8 a5 0e fe ff       	call   f0100d0e <cprintf>
f011fe69:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fe6c:	e8 20 cf fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011fe71:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fe74:	e8 4f 3f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011fe79:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011fe7c:	83 ec 0c             	sub    $0xc,%esp
f011fe7f:	68 00 f0 1f 00       	push   $0x1ff000
f011fe84:	e8 f1 7b fe ff       	call   f0107a7a <kmalloc>
f011fe89:	83 c4 10             	add    $0x10,%esp
f011fe8c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011fe92:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011fe99:	10 00 00 
f011fe9c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011fea2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fea7:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011fead:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011feb3:	ba 00 00 00 00       	mov    $0x0,%edx
f011feb8:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011febe:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011fec4:	29 d0                	sub    %edx,%eax
f011fec6:	89 c1                	mov    %eax,%ecx
f011fec8:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011fecf:	10 00 00 
f011fed2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011fed7:	0f b6 d0             	movzbl %al,%edx
f011feda:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011fee0:	01 d0                	add    %edx,%eax
f011fee2:	48                   	dec    %eax
f011fee3:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011fee9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011feef:	ba 00 00 00 00       	mov    $0x0,%edx
f011fef4:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011fefa:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011ff00:	29 d0                	sub    %edx,%eax
f011ff02:	01 c1                	add    %eax,%ecx
f011ff04:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011ff0b:	10 00 00 
f011ff0e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f011ff13:	0f b6 c0             	movzbl %al,%eax
f011ff16:	c1 e0 04             	shl    $0x4,%eax
f011ff19:	89 c2                	mov    %eax,%edx
f011ff1b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011ff21:	01 d0                	add    %edx,%eax
f011ff23:	48                   	dec    %eax
f011ff24:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011ff2a:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011ff30:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff35:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011ff3b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011ff41:	29 d0                	sub    %edx,%eax
f011ff43:	01 c8                	add    %ecx,%eax
f011ff45:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011ff4b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ff51:	39 c2                	cmp    %eax,%edx
f011ff53:	74 17                	je     f011ff6c <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011ff55:	83 ec 04             	sub    $0x4,%esp
f011ff58:	68 54 bc 13 f0       	push   $0xf013bc54
f011ff5d:	68 a3 04 00 00       	push   $0x4a3
f011ff62:	68 3a b5 13 f0       	push   $0xf013b53a
f011ff67:	e8 99 02 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff6c:	e8 57 3e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ff71:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ff74:	74 17                	je     f011ff8d <test_kmalloc_worstfit+0x1551>
f011ff76:	83 ec 04             	sub    $0x4,%esp
f011ff79:	68 54 b5 13 f0       	push   $0xf013b554
f011ff7e:	68 a4 04 00 00       	push   $0x4a4
f011ff83:	68 3a b5 13 f0       	push   $0xf013b53a
f011ff88:	e8 78 02 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ff8d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ff90:	e8 fc cd fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011ff95:	29 c3                	sub    %eax,%ebx
f011ff97:	89 d8                	mov    %ebx,%eax
f011ff99:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ff9e:	74 17                	je     f011ffb7 <test_kmalloc_worstfit+0x157b>
f011ffa0:	83 ec 04             	sub    $0x4,%esp
f011ffa3:	68 72 ba 13 f0       	push   $0xf013ba72
f011ffa8:	68 a5 04 00 00       	push   $0x4a5
f011ffad:	68 3a b5 13 f0       	push   $0xf013b53a
f011ffb2:	e8 4e 02 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ffb7:	ff 45 e8             	incl   -0x18(%ebp)
f011ffba:	83 ec 08             	sub    $0x8,%esp
f011ffbd:	ff 75 e8             	pushl  -0x18(%ebp)
f011ffc0:	68 74 bc 13 f0       	push   $0xf013bc74
f011ffc5:	e8 44 0d fe ff       	call   f0100d0e <cprintf>
f011ffca:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011ffcd:	e8 bf cd fe ff       	call   f010cd91 <sys_calculate_free_frames>
f011ffd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ffd5:	e8 ee 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f011ffda:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011ffdd:	83 ec 0c             	sub    $0xc,%esp
f011ffe0:	68 00 00 40 00       	push   $0x400000
f011ffe5:	e8 90 7a fe ff       	call   f0107a7a <kmalloc>
f011ffea:	83 c4 10             	add    $0x10,%esp
f011ffed:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011fff3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fff9:	85 c0                	test   %eax,%eax
f011fffb:	74 17                	je     f0120014 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011fffd:	83 ec 04             	sub    $0x4,%esp
f0120000:	68 54 bc 13 f0       	push   $0xf013bc54
f0120005:	68 ad 04 00 00       	push   $0x4ad
f012000a:	68 3a b5 13 f0       	push   $0xf013b53a
f012000f:	e8 f1 01 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120014:	e8 af 3d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120019:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012001c:	74 17                	je     f0120035 <test_kmalloc_worstfit+0x15f9>
f012001e:	83 ec 04             	sub    $0x4,%esp
f0120021:	68 54 b5 13 f0       	push   $0xf013b554
f0120026:	68 ae 04 00 00       	push   $0x4ae
f012002b:	68 3a b5 13 f0       	push   $0xf013b53a
f0120030:	e8 d0 01 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f0120035:	e8 57 cd fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012003a:	89 c2                	mov    %eax,%edx
f012003c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012003f:	39 c2                	cmp    %eax,%edx
f0120041:	74 17                	je     f012005a <test_kmalloc_worstfit+0x161e>
f0120043:	83 ec 04             	sub    $0x4,%esp
f0120046:	68 72 ba 13 f0       	push   $0xf013ba72
f012004b:	68 af 04 00 00       	push   $0x4af
f0120050:	68 3a b5 13 f0       	push   $0xf013b53a
f0120055:	e8 ab 01 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012005a:	ff 45 e8             	incl   -0x18(%ebp)
f012005d:	83 ec 08             	sub    $0x8,%esp
f0120060:	ff 75 e8             	pushl  -0x18(%ebp)
f0120063:	68 74 bc 13 f0       	push   $0xf013bc74
f0120068:	e8 a1 0c fe ff       	call   f0100d0e <cprintf>
f012006d:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f0120070:	83 ec 0c             	sub    $0xc,%esp
f0120073:	68 88 bc 13 f0       	push   $0xf013bc88
f0120078:	e8 91 0c fe ff       	call   f0100d0e <cprintf>
f012007d:	83 c4 10             	add    $0x10,%esp


	return 1;
f0120080:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0120085:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0120088:	5b                   	pop    %ebx
f0120089:	5f                   	pop    %edi
f012008a:	5d                   	pop    %ebp
f012008b:	c3                   	ret    

f012008c <test_kfree>:

int test_kfree()
{
f012008c:	55                   	push   %ebp
f012008d:	89 e5                	mov    %esp,%ebp
f012008f:	57                   	push   %edi
f0120090:	53                   	push   %ebx
f0120091:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f0120097:	83 ec 0c             	sub    $0xc,%esp
f012009a:	68 7c b4 13 f0       	push   $0xf013b47c
f012009f:	e8 6a 0c fe ff       	call   f0100d0e <cprintf>
f01200a4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01200a7:	83 ec 0c             	sub    $0xc,%esp
f01200aa:	68 ac b4 13 f0       	push   $0xf013b4ac
f01200af:	e8 5a 0c fe ff       	call   f0100d0e <cprintf>
f01200b4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01200b7:	83 ec 0c             	sub    $0xc,%esp
f01200ba:	68 7c b4 13 f0       	push   $0xf013b47c
f01200bf:	e8 4a 0c fe ff       	call   f0100d0e <cprintf>
f01200c4:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01200c7:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01200cb:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01200cf:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01200d5:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01200db:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01200e2:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01200e9:	e8 a3 cc fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01200ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01200f1:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f01200f7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01200fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0120101:	89 d7                	mov    %edx,%edi
f0120103:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0120105:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f012010b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120110:	b8 00 00 00 00       	mov    $0x0,%eax
f0120115:	89 d7                	mov    %edx,%edi
f0120117:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0120119:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f012011f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120124:	b8 00 00 00 00       	mov    $0x0,%eax
f0120129:	89 d7                	mov    %edx,%edi
f012012b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012012d:	e8 5f cc fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120132:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120135:	e8 8e 3c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012013a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012013d:	83 ec 0c             	sub    $0xc,%esp
f0120140:	68 00 fc 1f 00       	push   $0x1ffc00
f0120145:	e8 30 79 fe ff       	call   f0107a7a <kmalloc>
f012014a:	83 c4 10             	add    $0x10,%esp
f012014d:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120153:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120159:	89 c1                	mov    %eax,%ecx
f012015b:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0120162:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0120165:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012016a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f012016d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120170:	ba 00 00 00 00       	mov    $0x0,%edx
f0120175:	f7 75 c8             	divl   -0x38(%ebp)
f0120178:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012017b:	29 d0                	sub    %edx,%eax
f012017d:	89 c3                	mov    %eax,%ebx
f012017f:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0120186:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012018b:	0f b6 d0             	movzbl %al,%edx
f012018e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0120191:	01 d0                	add    %edx,%eax
f0120193:	48                   	dec    %eax
f0120194:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0120197:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012019a:	ba 00 00 00 00       	mov    $0x0,%edx
f012019f:	f7 75 c0             	divl   -0x40(%ebp)
f01201a2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01201a5:	29 d0                	sub    %edx,%eax
f01201a7:	01 c3                	add    %eax,%ebx
f01201a9:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01201b0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01201b5:	0f b6 c0             	movzbl %al,%eax
f01201b8:	c1 e0 04             	shl    $0x4,%eax
f01201bb:	89 c2                	mov    %eax,%edx
f01201bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01201c0:	01 d0                	add    %edx,%eax
f01201c2:	48                   	dec    %eax
f01201c3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01201c6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01201c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01201ce:	f7 75 b8             	divl   -0x48(%ebp)
f01201d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01201d4:	29 d0                	sub    %edx,%eax
f01201d6:	01 d8                	add    %ebx,%eax
f01201d8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01201dd:	39 c1                	cmp    %eax,%ecx
f01201df:	74 17                	je     f01201f8 <test_kfree+0x16c>
f01201e1:	83 ec 04             	sub    $0x4,%esp
f01201e4:	68 20 b6 13 f0       	push   $0xf013b620
f01201e9:	68 d7 04 00 00       	push   $0x4d7
f01201ee:	68 3a b5 13 f0       	push   $0xf013b53a
f01201f3:	e8 0d 00 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201f8:	e8 cb 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01201fd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120200:	74 17                	je     f0120219 <test_kfree+0x18d>
f0120202:	83 ec 04             	sub    $0x4,%esp
f0120205:	68 54 b5 13 f0       	push   $0xf013b554
f012020a:	68 d8 04 00 00       	push   $0x4d8
f012020f:	68 3a b5 13 f0       	push   $0xf013b53a
f0120214:	e8 ec ff fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120219:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012021c:	e8 70 cb fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120221:	29 c3                	sub    %eax,%ebx
f0120223:	89 d8                	mov    %ebx,%eax
f0120225:	3d 00 02 00 00       	cmp    $0x200,%eax
f012022a:	74 17                	je     f0120243 <test_kfree+0x1b7>
f012022c:	83 ec 04             	sub    $0x4,%esp
f012022f:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120234:	68 d9 04 00 00       	push   $0x4d9
f0120239:	68 3a b5 13 f0       	push   $0xf013b53a
f012023e:	e8 c2 ff fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0120243:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f012024a:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012024d:	e8 3f cb fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120252:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120255:	e8 6e 3b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012025a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012025d:	83 ec 0c             	sub    $0xc,%esp
f0120260:	68 00 fc 1f 00       	push   $0x1ffc00
f0120265:	e8 10 78 fe ff       	call   f0107a7a <kmalloc>
f012026a:	83 c4 10             	add    $0x10,%esp
f012026d:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120273:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120279:	89 c1                	mov    %eax,%ecx
f012027b:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0120282:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0120285:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012028a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012028d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0120290:	ba 00 00 00 00       	mov    $0x0,%edx
f0120295:	f7 75 b0             	divl   -0x50(%ebp)
f0120298:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012029b:	29 d0                	sub    %edx,%eax
f012029d:	89 c3                	mov    %eax,%ebx
f012029f:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01202a6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01202ab:	0f b6 d0             	movzbl %al,%edx
f01202ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01202b1:	01 d0                	add    %edx,%eax
f01202b3:	48                   	dec    %eax
f01202b4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01202b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01202ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01202bf:	f7 75 a8             	divl   -0x58(%ebp)
f01202c2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01202c5:	29 d0                	sub    %edx,%eax
f01202c7:	01 c3                	add    %eax,%ebx
f01202c9:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01202d0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01202d5:	0f b6 c0             	movzbl %al,%eax
f01202d8:	c1 e0 04             	shl    $0x4,%eax
f01202db:	89 c2                	mov    %eax,%edx
f01202dd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01202e0:	01 d0                	add    %edx,%eax
f01202e2:	48                   	dec    %eax
f01202e3:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01202e6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01202e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01202ee:	f7 75 a0             	divl   -0x60(%ebp)
f01202f1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01202f4:	29 d0                	sub    %edx,%eax
f01202f6:	01 d8                	add    %ebx,%eax
f01202f8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01202fd:	39 c1                	cmp    %eax,%ecx
f01202ff:	74 17                	je     f0120318 <test_kfree+0x28c>
f0120301:	83 ec 04             	sub    $0x4,%esp
f0120304:	68 20 b6 13 f0       	push   $0xf013b620
f0120309:	68 e0 04 00 00       	push   $0x4e0
f012030e:	68 3a b5 13 f0       	push   $0xf013b53a
f0120313:	e8 ed fe fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120318:	e8 ab 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012031d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120320:	74 17                	je     f0120339 <test_kfree+0x2ad>
f0120322:	83 ec 04             	sub    $0x4,%esp
f0120325:	68 54 b5 13 f0       	push   $0xf013b554
f012032a:	68 e1 04 00 00       	push   $0x4e1
f012032f:	68 3a b5 13 f0       	push   $0xf013b53a
f0120334:	e8 cc fe fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120339:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012033c:	e8 50 ca fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120341:	29 c3                	sub    %eax,%ebx
f0120343:	89 d8                	mov    %ebx,%eax
f0120345:	3d 00 02 00 00       	cmp    $0x200,%eax
f012034a:	74 17                	je     f0120363 <test_kfree+0x2d7>
f012034c:	83 ec 04             	sub    $0x4,%esp
f012034f:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120354:	68 e2 04 00 00       	push   $0x4e2
f0120359:	68 3a b5 13 f0       	push   $0xf013b53a
f012035e:	e8 a2 fe fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0120363:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f012036a:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012036d:	e8 1f ca fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120372:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120375:	e8 4e 3a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012037a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012037d:	83 ec 0c             	sub    $0xc,%esp
f0120380:	68 00 08 00 00       	push   $0x800
f0120385:	e8 f0 76 fe ff       	call   f0107a7a <kmalloc>
f012038a:	83 c4 10             	add    $0x10,%esp
f012038d:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120393:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120399:	89 c1                	mov    %eax,%ecx
f012039b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01203a2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01203a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01203aa:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01203ad:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01203b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01203b5:	f7 75 98             	divl   -0x68(%ebp)
f01203b8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01203bb:	29 d0                	sub    %edx,%eax
f01203bd:	89 c3                	mov    %eax,%ebx
f01203bf:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01203c6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01203cb:	0f b6 d0             	movzbl %al,%edx
f01203ce:	8b 45 90             	mov    -0x70(%ebp),%eax
f01203d1:	01 d0                	add    %edx,%eax
f01203d3:	48                   	dec    %eax
f01203d4:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01203d7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01203da:	ba 00 00 00 00       	mov    $0x0,%edx
f01203df:	f7 75 90             	divl   -0x70(%ebp)
f01203e2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01203e5:	29 d0                	sub    %edx,%eax
f01203e7:	01 c3                	add    %eax,%ebx
f01203e9:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01203f0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01203f5:	0f b6 c0             	movzbl %al,%eax
f01203f8:	c1 e0 04             	shl    $0x4,%eax
f01203fb:	89 c2                	mov    %eax,%edx
f01203fd:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120400:	01 d0                	add    %edx,%eax
f0120402:	48                   	dec    %eax
f0120403:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0120406:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120409:	ba 00 00 00 00       	mov    $0x0,%edx
f012040e:	f7 75 88             	divl   -0x78(%ebp)
f0120411:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120414:	29 d0                	sub    %edx,%eax
f0120416:	01 d8                	add    %ebx,%eax
f0120418:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012041d:	39 c1                	cmp    %eax,%ecx
f012041f:	74 17                	je     f0120438 <test_kfree+0x3ac>
f0120421:	83 ec 04             	sub    $0x4,%esp
f0120424:	68 20 b6 13 f0       	push   $0xf013b620
f0120429:	68 e9 04 00 00       	push   $0x4e9
f012042e:	68 3a b5 13 f0       	push   $0xf013b53a
f0120433:	e8 cd fd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120438:	e8 8b 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012043d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120440:	74 17                	je     f0120459 <test_kfree+0x3cd>
f0120442:	83 ec 04             	sub    $0x4,%esp
f0120445:	68 54 b5 13 f0       	push   $0xf013b554
f012044a:	68 ea 04 00 00       	push   $0x4ea
f012044f:	68 3a b5 13 f0       	push   $0xf013b53a
f0120454:	e8 ac fd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120459:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012045c:	e8 30 c9 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120461:	29 c3                	sub    %eax,%ebx
f0120463:	89 d8                	mov    %ebx,%eax
f0120465:	83 f8 01             	cmp    $0x1,%eax
f0120468:	74 17                	je     f0120481 <test_kfree+0x3f5>
f012046a:	83 ec 04             	sub    $0x4,%esp
f012046d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120472:	68 eb 04 00 00       	push   $0x4eb
f0120477:	68 3a b5 13 f0       	push   $0xf013b53a
f012047c:	e8 84 fd fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0120481:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f0120488:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012048b:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120491:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0120494:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012049b:	eb 0e                	jmp    f01204ab <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f012049d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01204a0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01204a3:	01 d0                	add    %edx,%eax
f01204a5:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01204a8:	ff 45 f4             	incl   -0xc(%ebp)
f01204ab:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01204b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01204b4:	7f e7                	jg     f012049d <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01204b6:	e8 d6 c8 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01204bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01204be:	e8 05 39 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01204c3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01204c6:	83 ec 0c             	sub    $0xc,%esp
f01204c9:	68 00 08 00 00       	push   $0x800
f01204ce:	e8 a7 75 fe ff       	call   f0107a7a <kmalloc>
f01204d3:	83 c4 10             	add    $0x10,%esp
f01204d6:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01204dc:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01204e2:	89 c1                	mov    %eax,%ecx
f01204e4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01204eb:	10 00 00 
f01204ee:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01204f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01204f9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01204ff:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120505:	ba 00 00 00 00       	mov    $0x0,%edx
f012050a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120510:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120516:	29 d0                	sub    %edx,%eax
f0120518:	89 c3                	mov    %eax,%ebx
f012051a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120521:	10 00 00 
f0120524:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120529:	0f b6 d0             	movzbl %al,%edx
f012052c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120532:	01 d0                	add    %edx,%eax
f0120534:	48                   	dec    %eax
f0120535:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012053b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120541:	ba 00 00 00 00       	mov    $0x0,%edx
f0120546:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012054c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120552:	29 d0                	sub    %edx,%eax
f0120554:	01 c3                	add    %eax,%ebx
f0120556:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012055d:	10 00 00 
f0120560:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120565:	0f b6 c0             	movzbl %al,%eax
f0120568:	c1 e0 04             	shl    $0x4,%eax
f012056b:	89 c2                	mov    %eax,%edx
f012056d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120573:	01 d0                	add    %edx,%eax
f0120575:	48                   	dec    %eax
f0120576:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012057c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120582:	ba 00 00 00 00       	mov    $0x0,%edx
f0120587:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012058d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120593:	29 d0                	sub    %edx,%eax
f0120595:	01 d8                	add    %ebx,%eax
f0120597:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012059c:	39 c1                	cmp    %eax,%ecx
f012059e:	74 17                	je     f01205b7 <test_kfree+0x52b>
f01205a0:	83 ec 04             	sub    $0x4,%esp
f01205a3:	68 20 b6 13 f0       	push   $0xf013b620
f01205a8:	68 f7 04 00 00       	push   $0x4f7
f01205ad:	68 3a b5 13 f0       	push   $0xf013b53a
f01205b2:	e8 4e fc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01205b7:	e8 0c 38 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01205bc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01205bf:	74 17                	je     f01205d8 <test_kfree+0x54c>
f01205c1:	83 ec 04             	sub    $0x4,%esp
f01205c4:	68 54 b5 13 f0       	push   $0xf013b554
f01205c9:	68 f8 04 00 00       	push   $0x4f8
f01205ce:	68 3a b5 13 f0       	push   $0xf013b53a
f01205d3:	e8 2d fc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01205d8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01205db:	e8 b1 c7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01205e0:	29 c3                	sub    %eax,%ebx
f01205e2:	89 d8                	mov    %ebx,%eax
f01205e4:	83 f8 01             	cmp    $0x1,%eax
f01205e7:	74 17                	je     f0120600 <test_kfree+0x574>
f01205e9:	83 ec 04             	sub    $0x4,%esp
f01205ec:	68 bc b5 13 f0       	push   $0xf013b5bc
f01205f1:	68 f9 04 00 00       	push   $0x4f9
f01205f6:	68 3a b5 13 f0       	push   $0xf013b53a
f01205fb:	e8 05 fc fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120600:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120607:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012060a:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120610:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120613:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012061a:	eb 0e                	jmp    f012062a <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f012061c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012061f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120622:	01 d0                	add    %edx,%eax
f0120624:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120627:	ff 45 f4             	incl   -0xc(%ebp)
f012062a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120630:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120633:	7f e7                	jg     f012061c <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120635:	e8 57 c7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012063a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012063d:	e8 86 37 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120642:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120645:	83 ec 0c             	sub    $0xc,%esp
f0120648:	68 00 1c 00 00       	push   $0x1c00
f012064d:	e8 28 74 fe ff       	call   f0107a7a <kmalloc>
f0120652:	83 c4 10             	add    $0x10,%esp
f0120655:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012065b:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120661:	89 c1                	mov    %eax,%ecx
f0120663:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012066a:	10 00 00 
f012066d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120673:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120678:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012067e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120684:	ba 00 00 00 00       	mov    $0x0,%edx
f0120689:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012068f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120695:	29 d0                	sub    %edx,%eax
f0120697:	89 c3                	mov    %eax,%ebx
f0120699:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01206a0:	10 00 00 
f01206a3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01206a8:	0f b6 d0             	movzbl %al,%edx
f01206ab:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01206b1:	01 d0                	add    %edx,%eax
f01206b3:	48                   	dec    %eax
f01206b4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01206ba:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01206c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01206c5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01206cb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01206d1:	29 d0                	sub    %edx,%eax
f01206d3:	01 c3                	add    %eax,%ebx
f01206d5:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01206dc:	10 00 00 
f01206df:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01206e4:	0f b6 c0             	movzbl %al,%eax
f01206e7:	c1 e0 04             	shl    $0x4,%eax
f01206ea:	89 c2                	mov    %eax,%edx
f01206ec:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01206f2:	01 d0                	add    %edx,%eax
f01206f4:	48                   	dec    %eax
f01206f5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01206fb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120701:	ba 00 00 00 00       	mov    $0x0,%edx
f0120706:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012070c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120712:	29 d0                	sub    %edx,%eax
f0120714:	01 d8                	add    %ebx,%eax
f0120716:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012071b:	39 c1                	cmp    %eax,%ecx
f012071d:	74 17                	je     f0120736 <test_kfree+0x6aa>
f012071f:	83 ec 04             	sub    $0x4,%esp
f0120722:	68 20 b6 13 f0       	push   $0xf013b620
f0120727:	68 05 05 00 00       	push   $0x505
f012072c:	68 3a b5 13 f0       	push   $0xf013b53a
f0120731:	e8 cf fa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120736:	e8 8d 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012073b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012073e:	74 17                	je     f0120757 <test_kfree+0x6cb>
f0120740:	83 ec 04             	sub    $0x4,%esp
f0120743:	68 54 b5 13 f0       	push   $0xf013b554
f0120748:	68 06 05 00 00       	push   $0x506
f012074d:	68 3a b5 13 f0       	push   $0xf013b53a
f0120752:	e8 ae fa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120757:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012075a:	e8 32 c6 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012075f:	29 c3                	sub    %eax,%ebx
f0120761:	89 d8                	mov    %ebx,%eax
f0120763:	83 f8 02             	cmp    $0x2,%eax
f0120766:	74 17                	je     f012077f <test_kfree+0x6f3>
f0120768:	83 ec 04             	sub    $0x4,%esp
f012076b:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120770:	68 07 05 00 00       	push   $0x507
f0120775:	68 3a b5 13 f0       	push   $0xf013b53a
f012077a:	e8 86 fa fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012077f:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120786:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120789:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012078f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120792:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120799:	eb 0e                	jmp    f01207a9 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f012079b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012079e:	8b 45 80             	mov    -0x80(%ebp),%eax
f01207a1:	01 d0                	add    %edx,%eax
f01207a3:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01207a6:	ff 45 f4             	incl   -0xc(%ebp)
f01207a9:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01207af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01207b2:	7f e7                	jg     f012079b <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01207b4:	e8 d8 c5 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01207b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207bc:	e8 07 36 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01207c1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01207c4:	83 ec 0c             	sub    $0xc,%esp
f01207c7:	68 00 fc 2f 00       	push   $0x2ffc00
f01207cc:	e8 a9 72 fe ff       	call   f0107a7a <kmalloc>
f01207d1:	83 c4 10             	add    $0x10,%esp
f01207d4:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207da:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01207e0:	89 c1                	mov    %eax,%ecx
f01207e2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01207e9:	10 00 00 
f01207ec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01207f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01207f7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01207fd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120803:	ba 00 00 00 00       	mov    $0x0,%edx
f0120808:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012080e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120814:	29 d0                	sub    %edx,%eax
f0120816:	89 c3                	mov    %eax,%ebx
f0120818:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012081f:	10 00 00 
f0120822:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120827:	0f b6 d0             	movzbl %al,%edx
f012082a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120830:	01 d0                	add    %edx,%eax
f0120832:	48                   	dec    %eax
f0120833:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120839:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012083f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120844:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012084a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120850:	29 d0                	sub    %edx,%eax
f0120852:	01 c3                	add    %eax,%ebx
f0120854:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012085b:	10 00 00 
f012085e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120863:	0f b6 c0             	movzbl %al,%eax
f0120866:	c1 e0 04             	shl    $0x4,%eax
f0120869:	89 c2                	mov    %eax,%edx
f012086b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120871:	01 d0                	add    %edx,%eax
f0120873:	48                   	dec    %eax
f0120874:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012087a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120880:	ba 00 00 00 00       	mov    $0x0,%edx
f0120885:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012088b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120891:	29 d0                	sub    %edx,%eax
f0120893:	01 d8                	add    %ebx,%eax
f0120895:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012089a:	39 c1                	cmp    %eax,%ecx
f012089c:	74 17                	je     f01208b5 <test_kfree+0x829>
f012089e:	83 ec 04             	sub    $0x4,%esp
f01208a1:	68 20 b6 13 f0       	push   $0xf013b620
f01208a6:	68 13 05 00 00       	push   $0x513
f01208ab:	68 3a b5 13 f0       	push   $0xf013b53a
f01208b0:	e8 50 f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208b5:	e8 0e 35 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01208ba:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208bd:	74 17                	je     f01208d6 <test_kfree+0x84a>
f01208bf:	83 ec 04             	sub    $0x4,%esp
f01208c2:	68 54 b5 13 f0       	push   $0xf013b554
f01208c7:	68 14 05 00 00       	push   $0x514
f01208cc:	68 3a b5 13 f0       	push   $0xf013b53a
f01208d1:	e8 2f f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01208d6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01208d9:	e8 b3 c4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01208de:	29 c3                	sub    %eax,%ebx
f01208e0:	89 d8                	mov    %ebx,%eax
f01208e2:	3d 00 03 00 00       	cmp    $0x300,%eax
f01208e7:	74 17                	je     f0120900 <test_kfree+0x874>
f01208e9:	83 ec 04             	sub    $0x4,%esp
f01208ec:	68 bc b5 13 f0       	push   $0xf013b5bc
f01208f1:	68 15 05 00 00       	push   $0x515
f01208f6:	68 3a b5 13 f0       	push   $0xf013b53a
f01208fb:	e8 05 f9 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120900:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120907:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012090a:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120910:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120913:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012091a:	eb 0e                	jmp    f012092a <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f012091c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012091f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120922:	01 d0                	add    %edx,%eax
f0120924:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120927:	ff 45 f4             	incl   -0xc(%ebp)
f012092a:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120930:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120933:	7f e7                	jg     f012091c <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120935:	e8 57 c4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012093a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012093d:	e8 86 34 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120942:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120945:	83 ec 0c             	sub    $0xc,%esp
f0120948:	68 00 fc 5f 00       	push   $0x5ffc00
f012094d:	e8 28 71 fe ff       	call   f0107a7a <kmalloc>
f0120952:	83 c4 10             	add    $0x10,%esp
f0120955:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012095b:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120961:	89 c1                	mov    %eax,%ecx
f0120963:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012096a:	10 00 00 
f012096d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120973:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120978:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012097e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120984:	ba 00 00 00 00       	mov    $0x0,%edx
f0120989:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012098f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120995:	29 d0                	sub    %edx,%eax
f0120997:	89 c3                	mov    %eax,%ebx
f0120999:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01209a0:	10 00 00 
f01209a3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01209a8:	0f b6 d0             	movzbl %al,%edx
f01209ab:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01209b1:	01 d0                	add    %edx,%eax
f01209b3:	48                   	dec    %eax
f01209b4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01209ba:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01209c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01209c5:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01209cb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01209d1:	29 d0                	sub    %edx,%eax
f01209d3:	01 c3                	add    %eax,%ebx
f01209d5:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01209dc:	10 00 00 
f01209df:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01209e4:	0f b6 c0             	movzbl %al,%eax
f01209e7:	c1 e0 04             	shl    $0x4,%eax
f01209ea:	89 c2                	mov    %eax,%edx
f01209ec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01209f2:	01 d0                	add    %edx,%eax
f01209f4:	48                   	dec    %eax
f01209f5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01209fb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120a01:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a06:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120a0c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120a12:	29 d0                	sub    %edx,%eax
f0120a14:	01 d8                	add    %ebx,%eax
f0120a16:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120a1b:	39 c1                	cmp    %eax,%ecx
f0120a1d:	74 17                	je     f0120a36 <test_kfree+0x9aa>
f0120a1f:	83 ec 04             	sub    $0x4,%esp
f0120a22:	68 20 b6 13 f0       	push   $0xf013b620
f0120a27:	68 21 05 00 00       	push   $0x521
f0120a2c:	68 3a b5 13 f0       	push   $0xf013b53a
f0120a31:	e8 cf f7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a36:	e8 8d 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a3b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a3e:	74 17                	je     f0120a57 <test_kfree+0x9cb>
f0120a40:	83 ec 04             	sub    $0x4,%esp
f0120a43:	68 54 b5 13 f0       	push   $0xf013b554
f0120a48:	68 22 05 00 00       	push   $0x522
f0120a4d:	68 3a b5 13 f0       	push   $0xf013b53a
f0120a52:	e8 ae f7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a57:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120a5a:	e8 32 c3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120a5f:	29 c3                	sub    %eax,%ebx
f0120a61:	89 d8                	mov    %ebx,%eax
f0120a63:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120a68:	74 17                	je     f0120a81 <test_kfree+0x9f5>
f0120a6a:	83 ec 04             	sub    $0x4,%esp
f0120a6d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120a72:	68 23 05 00 00       	push   $0x523
f0120a77:	68 3a b5 13 f0       	push   $0xf013b53a
f0120a7c:	e8 84 f7 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120a81:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0120a88:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120a8b:	e8 01 c3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120a90:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a93:	e8 30 33 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120a98:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0120a9b:	83 ec 0c             	sub    $0xc,%esp
f0120a9e:	68 00 38 00 00       	push   $0x3800
f0120aa3:	e8 d2 6f fe ff       	call   f0107a7a <kmalloc>
f0120aa8:	83 c4 10             	add    $0x10,%esp
f0120aab:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ab1:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120ab7:	89 c1                	mov    %eax,%ecx
f0120ab9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0120ac0:	10 00 00 
f0120ac3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120ac9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120ace:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120ad4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120ada:	ba 00 00 00 00       	mov    $0x0,%edx
f0120adf:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120ae5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120aeb:	29 d0                	sub    %edx,%eax
f0120aed:	89 c3                	mov    %eax,%ebx
f0120aef:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120af6:	10 00 00 
f0120af9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120afe:	0f b6 d0             	movzbl %al,%edx
f0120b01:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120b07:	01 d0                	add    %edx,%eax
f0120b09:	48                   	dec    %eax
f0120b0a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120b10:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120b16:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b1b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120b21:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120b27:	29 d0                	sub    %edx,%eax
f0120b29:	01 c3                	add    %eax,%ebx
f0120b2b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120b32:	10 00 00 
f0120b35:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0120b3a:	0f b6 c0             	movzbl %al,%eax
f0120b3d:	c1 e0 04             	shl    $0x4,%eax
f0120b40:	89 c2                	mov    %eax,%edx
f0120b42:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120b48:	01 d0                	add    %edx,%eax
f0120b4a:	48                   	dec    %eax
f0120b4b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0120b51:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120b57:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b5c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0120b62:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120b68:	29 d0                	sub    %edx,%eax
f0120b6a:	01 d8                	add    %ebx,%eax
f0120b6c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120b71:	39 c1                	cmp    %eax,%ecx
f0120b73:	74 17                	je     f0120b8c <test_kfree+0xb00>
f0120b75:	83 ec 04             	sub    $0x4,%esp
f0120b78:	68 20 b6 13 f0       	push   $0xf013b620
f0120b7d:	68 2a 05 00 00       	push   $0x52a
f0120b82:	68 3a b5 13 f0       	push   $0xf013b53a
f0120b87:	e8 79 f6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b8c:	e8 37 32 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120b91:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b94:	74 17                	je     f0120bad <test_kfree+0xb21>
f0120b96:	83 ec 04             	sub    $0x4,%esp
f0120b99:	68 54 b5 13 f0       	push   $0xf013b554
f0120b9e:	68 2b 05 00 00       	push   $0x52b
f0120ba3:	68 3a b5 13 f0       	push   $0xf013b53a
f0120ba8:	e8 58 f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120bad:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120bb0:	e8 dc c1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120bb5:	29 c3                	sub    %eax,%ebx
f0120bb7:	89 d8                	mov    %ebx,%eax
f0120bb9:	83 f8 04             	cmp    $0x4,%eax
f0120bbc:	74 17                	je     f0120bd5 <test_kfree+0xb49>
f0120bbe:	83 ec 04             	sub    $0x4,%esp
f0120bc1:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120bc6:	68 2c 05 00 00       	push   $0x52c
f0120bcb:	68 3a b5 13 f0       	push   $0xf013b53a
f0120bd0:	e8 30 f6 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120bd5:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0120bdc:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0120bdf:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120be5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120be8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120bef:	eb 0e                	jmp    f0120bff <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0120bf1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120bf4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120bf7:	01 d0                	add    %edx,%eax
f0120bf9:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120bfc:	ff 45 f4             	incl   -0xc(%ebp)
f0120bff:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120c05:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c08:	7f e7                	jg     f0120bf1 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120c0a:	e8 82 c1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120c0f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120c15:	e8 ae 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120c1a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120c20:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120c26:	83 ec 0c             	sub    $0xc,%esp
f0120c29:	50                   	push   %eax
f0120c2a:	e8 16 6f fe ff       	call   f0107b45 <kfree>
f0120c2f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c32:	e8 91 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120c37:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120c3d:	74 17                	je     f0120c56 <test_kfree+0xbca>
f0120c3f:	83 ec 04             	sub    $0x4,%esp
f0120c42:	68 54 b5 13 f0       	push   $0xf013b554
f0120c47:	68 3b 05 00 00       	push   $0x53b
f0120c4c:	68 3a b5 13 f0       	push   $0xf013b53a
f0120c51:	e8 af f5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c56:	e8 36 c1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120c5b:	89 c2                	mov    %eax,%edx
f0120c5d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120c63:	29 c2                	sub    %eax,%edx
f0120c65:	89 d0                	mov    %edx,%eax
f0120c67:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120c6c:	74 17                	je     f0120c85 <test_kfree+0xbf9>
f0120c6e:	83 ec 04             	sub    $0x4,%esp
f0120c71:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0120c76:	68 3c 05 00 00       	push   $0x53c
f0120c7b:	68 3a b5 13 f0       	push   $0xf013b53a
f0120c80:	e8 80 f5 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c85:	e8 07 c1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120c8a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c90:	e8 33 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120c95:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0120c9b:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120ca1:	83 ec 0c             	sub    $0xc,%esp
f0120ca4:	50                   	push   %eax
f0120ca5:	e8 9b 6e fe ff       	call   f0107b45 <kfree>
f0120caa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120cad:	e8 16 31 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120cb2:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120cb8:	74 17                	je     f0120cd1 <test_kfree+0xc45>
f0120cba:	83 ec 04             	sub    $0x4,%esp
f0120cbd:	68 54 b5 13 f0       	push   $0xf013b554
f0120cc2:	68 42 05 00 00       	push   $0x542
f0120cc7:	68 3a b5 13 f0       	push   $0xf013b53a
f0120ccc:	e8 34 f5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120cd1:	e8 bb c0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120cd6:	89 c2                	mov    %eax,%edx
f0120cd8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120cde:	29 c2                	sub    %eax,%edx
f0120ce0:	89 d0                	mov    %edx,%eax
f0120ce2:	83 f8 01             	cmp    $0x1,%eax
f0120ce5:	74 17                	je     f0120cfe <test_kfree+0xc72>
f0120ce7:	83 ec 04             	sub    $0x4,%esp
f0120cea:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0120cef:	68 43 05 00 00       	push   $0x543
f0120cf4:	68 3a b5 13 f0       	push   $0xf013b53a
f0120cf9:	e8 07 f5 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120cfe:	e8 8e c0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120d03:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d09:	e8 ba 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d0e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120d14:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120d1a:	83 ec 0c             	sub    $0xc,%esp
f0120d1d:	50                   	push   %eax
f0120d1e:	e8 22 6e fe ff       	call   f0107b45 <kfree>
f0120d23:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d26:	e8 9d 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d2b:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120d31:	74 17                	je     f0120d4a <test_kfree+0xcbe>
f0120d33:	83 ec 04             	sub    $0x4,%esp
f0120d36:	68 54 b5 13 f0       	push   $0xf013b554
f0120d3b:	68 49 05 00 00       	push   $0x549
f0120d40:	68 3a b5 13 f0       	push   $0xf013b53a
f0120d45:	e8 bb f4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d4a:	e8 42 c0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120d4f:	89 c2                	mov    %eax,%edx
f0120d51:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120d57:	29 c2                	sub    %eax,%edx
f0120d59:	89 d0                	mov    %edx,%eax
f0120d5b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120d60:	74 17                	je     f0120d79 <test_kfree+0xced>
f0120d62:	83 ec 04             	sub    $0x4,%esp
f0120d65:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0120d6a:	68 4a 05 00 00       	push   $0x54a
f0120d6f:	68 3a b5 13 f0       	push   $0xf013b53a
f0120d74:	e8 8c f4 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120d79:	e8 13 c0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120d7e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d84:	e8 3f 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120d89:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0120d8f:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120d95:	83 ec 0c             	sub    $0xc,%esp
f0120d98:	50                   	push   %eax
f0120d99:	e8 a7 6d fe ff       	call   f0107b45 <kfree>
f0120d9e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120da1:	e8 22 30 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120da6:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120dac:	74 17                	je     f0120dc5 <test_kfree+0xd39>
f0120dae:	83 ec 04             	sub    $0x4,%esp
f0120db1:	68 54 b5 13 f0       	push   $0xf013b554
f0120db6:	68 50 05 00 00       	push   $0x550
f0120dbb:	68 3a b5 13 f0       	push   $0xf013b53a
f0120dc0:	e8 40 f4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120dc5:	e8 c7 bf fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120dca:	89 c2                	mov    %eax,%edx
f0120dcc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120dd2:	29 c2                	sub    %eax,%edx
f0120dd4:	89 d0                	mov    %edx,%eax
f0120dd6:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120ddb:	74 17                	je     f0120df4 <test_kfree+0xd68>
f0120ddd:	83 ec 04             	sub    $0x4,%esp
f0120de0:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0120de5:	68 51 05 00 00       	push   $0x551
f0120dea:	68 3a b5 13 f0       	push   $0xf013b53a
f0120def:	e8 11 f4 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120df4:	83 ec 0c             	sub    $0xc,%esp
f0120df7:	68 fc bc 13 f0       	push   $0xf013bcfc
f0120dfc:	e8 0d ff fd ff       	call   f0100d0e <cprintf>
f0120e01:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120e04:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120e0a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120e0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e14:	eb 1e                	jmp    f0120e34 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120e16:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120e1c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120e1f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120e22:	01 c8                	add    %ecx,%eax
f0120e24:	8a 00                	mov    (%eax),%al
f0120e26:	0f be c0             	movsbl %al,%eax
f0120e29:	01 d0                	add    %edx,%eax
f0120e2b:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120e31:	ff 45 f4             	incl   -0xc(%ebp)
f0120e34:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120e3a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120e3d:	7f d7                	jg     f0120e16 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120e3f:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120e45:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120e4b:	89 c1                	mov    %eax,%ecx
f0120e4d:	01 c9                	add    %ecx,%ecx
f0120e4f:	01 c8                	add    %ecx,%eax
f0120e51:	39 c2                	cmp    %eax,%edx
f0120e53:	74 17                	je     f0120e6c <test_kfree+0xde0>
f0120e55:	83 ec 04             	sub    $0x4,%esp
f0120e58:	68 20 bd 13 f0       	push   $0xf013bd20
f0120e5d:	68 5e 05 00 00       	push   $0x55e
f0120e62:	68 3a b5 13 f0       	push   $0xf013b53a
f0120e67:	e8 99 f3 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120e6c:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120e72:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120e75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e7c:	eb 1e                	jmp    f0120e9c <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0120e7e:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120e84:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120e87:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120e8a:	01 c8                	add    %ecx,%eax
f0120e8c:	8a 00                	mov    (%eax),%al
f0120e8e:	0f be c0             	movsbl %al,%eax
f0120e91:	01 d0                	add    %edx,%eax
f0120e93:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120e99:	ff 45 f4             	incl   -0xc(%ebp)
f0120e9c:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120ea2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120ea5:	7f d7                	jg     f0120e7e <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120ea7:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0120ead:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120eb3:	c1 e2 02             	shl    $0x2,%edx
f0120eb6:	39 d0                	cmp    %edx,%eax
f0120eb8:	74 17                	je     f0120ed1 <test_kfree+0xe45>
f0120eba:	83 ec 04             	sub    $0x4,%esp
f0120ebd:	68 20 bd 13 f0       	push   $0xf013bd20
f0120ec2:	68 66 05 00 00       	push   $0x566
f0120ec7:	68 3a b5 13 f0       	push   $0xf013b53a
f0120ecc:	e8 34 f3 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120ed1:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120ed7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120eda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120ee1:	eb 1e                	jmp    f0120f01 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0120ee3:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0120ee9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120eec:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120eef:	01 c8                	add    %ecx,%eax
f0120ef1:	8a 00                	mov    (%eax),%al
f0120ef3:	0f be c0             	movsbl %al,%eax
f0120ef6:	01 d0                	add    %edx,%eax
f0120ef8:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120efe:	ff 45 f4             	incl   -0xc(%ebp)
f0120f01:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120f07:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f0a:	7f d7                	jg     f0120ee3 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0120f0c:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0120f12:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0120f18:	89 d0                	mov    %edx,%eax
f0120f1a:	c1 e0 02             	shl    $0x2,%eax
f0120f1d:	01 d0                	add    %edx,%eax
f0120f1f:	39 c1                	cmp    %eax,%ecx
f0120f21:	74 17                	je     f0120f3a <test_kfree+0xeae>
f0120f23:	83 ec 04             	sub    $0x4,%esp
f0120f26:	68 20 bd 13 f0       	push   $0xf013bd20
f0120f2b:	68 6e 05 00 00       	push   $0x56e
f0120f30:	68 3a b5 13 f0       	push   $0xf013b53a
f0120f35:	e8 cb f2 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120f3a:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120f40:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120f43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f4a:	eb 1e                	jmp    f0120f6a <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0120f4c:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f0120f52:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120f55:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f58:	01 c8                	add    %ecx,%eax
f0120f5a:	8a 00                	mov    (%eax),%al
f0120f5c:	0f be c0             	movsbl %al,%eax
f0120f5f:	01 d0                	add    %edx,%eax
f0120f61:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120f67:	ff 45 f4             	incl   -0xc(%ebp)
f0120f6a:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120f70:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f73:	7f d7                	jg     f0120f4c <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120f75:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0120f7b:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f0120f81:	89 d0                	mov    %edx,%eax
f0120f83:	01 c0                	add    %eax,%eax
f0120f85:	01 d0                	add    %edx,%eax
f0120f87:	01 c0                	add    %eax,%eax
f0120f89:	01 d0                	add    %edx,%eax
f0120f8b:	39 c1                	cmp    %eax,%ecx
f0120f8d:	74 17                	je     f0120fa6 <test_kfree+0xf1a>
f0120f8f:	83 ec 04             	sub    $0x4,%esp
f0120f92:	68 20 bd 13 f0       	push   $0xf013bd20
f0120f97:	68 76 05 00 00       	push   $0x576
f0120f9c:	68 3a b5 13 f0       	push   $0xf013b53a
f0120fa1:	e8 5f f2 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0120fa6:	83 ec 0c             	sub    $0xc,%esp
f0120fa9:	68 53 bd 13 f0       	push   $0xf013bd53
f0120fae:	e8 5b fd fd ff       	call   f0100d0e <cprintf>
f0120fb3:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120fb6:	e8 d6 bd fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0120fbb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120fbe:	e8 05 2e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0120fc3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120fc6:	83 ec 0c             	sub    $0xc,%esp
f0120fc9:	68 00 50 00 00       	push   $0x5000
f0120fce:	e8 a7 6a fe ff       	call   f0107a7a <kmalloc>
f0120fd3:	83 c4 10             	add    $0x10,%esp
f0120fd6:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120fdc:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120fe2:	89 c1                	mov    %eax,%ecx
f0120fe4:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0120feb:	10 00 00 
f0120fee:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120ff4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120ff9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0120fff:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121005:	ba 00 00 00 00       	mov    $0x0,%edx
f012100a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121010:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121016:	29 d0                	sub    %edx,%eax
f0121018:	89 c3                	mov    %eax,%ebx
f012101a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121021:	10 00 00 
f0121024:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121029:	0f b6 d0             	movzbl %al,%edx
f012102c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121032:	01 d0                	add    %edx,%eax
f0121034:	48                   	dec    %eax
f0121035:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012103b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121041:	ba 00 00 00 00       	mov    $0x0,%edx
f0121046:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012104c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121052:	29 d0                	sub    %edx,%eax
f0121054:	01 c3                	add    %eax,%ebx
f0121056:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012105d:	10 00 00 
f0121060:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121065:	0f b6 c0             	movzbl %al,%eax
f0121068:	c1 e0 04             	shl    $0x4,%eax
f012106b:	89 c2                	mov    %eax,%edx
f012106d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0121073:	01 d0                	add    %edx,%eax
f0121075:	48                   	dec    %eax
f0121076:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012107c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0121082:	ba 00 00 00 00       	mov    $0x0,%edx
f0121087:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012108d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0121093:	29 d0                	sub    %edx,%eax
f0121095:	01 d8                	add    %ebx,%eax
f0121097:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012109c:	39 c1                	cmp    %eax,%ecx
f012109e:	74 17                	je     f01210b7 <test_kfree+0x102b>
f01210a0:	83 ec 04             	sub    $0x4,%esp
f01210a3:	68 20 b6 13 f0       	push   $0xf013b620
f01210a8:	68 80 05 00 00       	push   $0x580
f01210ad:	68 3a b5 13 f0       	push   $0xf013b53a
f01210b2:	e8 4e f1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01210b7:	e8 0c 2d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01210bc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01210bf:	74 17                	je     f01210d8 <test_kfree+0x104c>
f01210c1:	83 ec 04             	sub    $0x4,%esp
f01210c4:	68 54 b5 13 f0       	push   $0xf013b554
f01210c9:	68 81 05 00 00       	push   $0x581
f01210ce:	68 3a b5 13 f0       	push   $0xf013b53a
f01210d3:	e8 2d f1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01210d8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01210db:	e8 b1 bc fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01210e0:	29 c3                	sub    %eax,%ebx
f01210e2:	89 d8                	mov    %ebx,%eax
f01210e4:	83 f8 05             	cmp    $0x5,%eax
f01210e7:	74 17                	je     f0121100 <test_kfree+0x1074>
f01210e9:	83 ec 04             	sub    $0x4,%esp
f01210ec:	68 bc b5 13 f0       	push   $0xf013b5bc
f01210f1:	68 82 05 00 00       	push   $0x582
f01210f6:	68 3a b5 13 f0       	push   $0xf013b53a
f01210fb:	e8 05 f1 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0121100:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0121107:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012110a:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121110:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0121113:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012111a:	eb 0e                	jmp    f012112a <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f012111c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012111f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121122:	01 d0                	add    %edx,%eax
f0121124:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0121127:	ff 45 f4             	incl   -0xc(%ebp)
f012112a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0121130:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121133:	7f e7                	jg     f012111c <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121135:	e8 57 bc fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012113a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012113d:	e8 86 2c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121142:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0121145:	83 ec 0c             	sub    $0xc,%esp
f0121148:	68 00 00 10 00       	push   $0x100000
f012114d:	e8 28 69 fe ff       	call   f0107a7a <kmalloc>
f0121152:	83 c4 10             	add    $0x10,%esp
f0121155:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012115b:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121161:	89 c1                	mov    %eax,%ecx
f0121163:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012116a:	10 00 00 
f012116d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0121173:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121178:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012117e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0121184:	ba 00 00 00 00       	mov    $0x0,%edx
f0121189:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012118f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0121195:	29 d0                	sub    %edx,%eax
f0121197:	89 c3                	mov    %eax,%ebx
f0121199:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01211a0:	10 00 00 
f01211a3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01211a8:	0f b6 d0             	movzbl %al,%edx
f01211ab:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01211b1:	01 d0                	add    %edx,%eax
f01211b3:	48                   	dec    %eax
f01211b4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01211ba:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01211c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01211c5:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01211cb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01211d1:	29 d0                	sub    %edx,%eax
f01211d3:	01 c3                	add    %eax,%ebx
f01211d5:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01211dc:	10 00 00 
f01211df:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01211e4:	0f b6 c0             	movzbl %al,%eax
f01211e7:	c1 e0 04             	shl    $0x4,%eax
f01211ea:	89 c2                	mov    %eax,%edx
f01211ec:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01211f2:	01 d0                	add    %edx,%eax
f01211f4:	48                   	dec    %eax
f01211f5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01211fb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121201:	ba 00 00 00 00       	mov    $0x0,%edx
f0121206:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012120c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121212:	29 d0                	sub    %edx,%eax
f0121214:	01 d8                	add    %ebx,%eax
f0121216:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012121b:	39 c1                	cmp    %eax,%ecx
f012121d:	74 17                	je     f0121236 <test_kfree+0x11aa>
f012121f:	83 ec 04             	sub    $0x4,%esp
f0121222:	68 20 b6 13 f0       	push   $0xf013b620
f0121227:	68 8e 05 00 00       	push   $0x58e
f012122c:	68 3a b5 13 f0       	push   $0xf013b53a
f0121231:	e8 cf ef fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121236:	e8 8d 2b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012123b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012123e:	74 17                	je     f0121257 <test_kfree+0x11cb>
f0121240:	83 ec 04             	sub    $0x4,%esp
f0121243:	68 54 b5 13 f0       	push   $0xf013b554
f0121248:	68 8f 05 00 00       	push   $0x58f
f012124d:	68 3a b5 13 f0       	push   $0xf013b53a
f0121252:	e8 ae ef fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121257:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012125a:	e8 32 bb fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012125f:	29 c3                	sub    %eax,%ebx
f0121261:	89 d8                	mov    %ebx,%eax
f0121263:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121268:	74 17                	je     f0121281 <test_kfree+0x11f5>
f012126a:	83 ec 04             	sub    $0x4,%esp
f012126d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0121272:	68 90 05 00 00       	push   $0x590
f0121277:	68 3a b5 13 f0       	push   $0xf013b53a
f012127c:	e8 84 ef fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0121281:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0121288:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012128b:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121291:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0121294:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012129b:	eb 0e                	jmp    f01212ab <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f012129d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01212a0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01212a3:	01 d0                	add    %edx,%eax
f01212a5:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01212a8:	ff 45 f4             	incl   -0xc(%ebp)
f01212ab:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01212b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01212b4:	7f e7                	jg     f012129d <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01212b6:	e8 ac 66 ff ff       	call   f0117967 <isKHeapPlacementStrategyNEXTFIT>
f01212bb:	84 c0                	test   %al,%al
f01212bd:	0f 84 ac 06 00 00    	je     f012196f <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01212c3:	e8 c9 ba fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01212c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01212cb:	e8 f8 2a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01212d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01212d3:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01212da:	10 00 00 
f01212dd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01212e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01212e8:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01212ee:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01212f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01212f9:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01212ff:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121305:	29 d0                	sub    %edx,%eax
f0121307:	89 c1                	mov    %eax,%ecx
f0121309:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0121310:	10 00 00 
f0121313:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121318:	0f b6 d0             	movzbl %al,%edx
f012131b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121321:	01 d0                	add    %edx,%eax
f0121323:	48                   	dec    %eax
f0121324:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012132a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121330:	ba 00 00 00 00       	mov    $0x0,%edx
f0121335:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012133b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121341:	29 d0                	sub    %edx,%eax
f0121343:	01 c1                	add    %eax,%ecx
f0121345:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012134c:	10 00 00 
f012134f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121354:	0f b6 c0             	movzbl %al,%eax
f0121357:	c1 e0 04             	shl    $0x4,%eax
f012135a:	89 c2                	mov    %eax,%edx
f012135c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0121362:	01 d0                	add    %edx,%eax
f0121364:	48                   	dec    %eax
f0121365:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012136b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0121371:	ba 00 00 00 00       	mov    $0x0,%edx
f0121376:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012137c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0121382:	29 d0                	sub    %edx,%eax
f0121384:	01 c8                	add    %ecx,%eax
f0121386:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f012138b:	29 c2                	sub    %eax,%edx
f012138d:	89 d0                	mov    %edx,%eax
f012138f:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0121395:	83 ec 0c             	sub    $0xc,%esp
f0121398:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f012139e:	e8 d7 66 fe ff       	call   f0107a7a <kmalloc>
f01213a3:	83 c4 10             	add    $0x10,%esp
f01213a6:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01213ac:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01213b2:	89 c1                	mov    %eax,%ecx
f01213b4:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01213bb:	10 00 00 
f01213be:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01213c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01213c9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01213cf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01213d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01213da:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01213e0:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01213e6:	29 d0                	sub    %edx,%eax
f01213e8:	89 c3                	mov    %eax,%ebx
f01213ea:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01213f1:	10 00 00 
f01213f4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01213f9:	0f b6 d0             	movzbl %al,%edx
f01213fc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0121402:	01 d0                	add    %edx,%eax
f0121404:	48                   	dec    %eax
f0121405:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012140b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121411:	ba 00 00 00 00       	mov    $0x0,%edx
f0121416:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012141c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121422:	29 d0                	sub    %edx,%eax
f0121424:	01 c3                	add    %eax,%ebx
f0121426:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012142d:	10 00 00 
f0121430:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121435:	0f b6 c0             	movzbl %al,%eax
f0121438:	c1 e0 04             	shl    $0x4,%eax
f012143b:	89 c2                	mov    %eax,%edx
f012143d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0121443:	01 d0                	add    %edx,%eax
f0121445:	48                   	dec    %eax
f0121446:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012144c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121452:	ba 00 00 00 00       	mov    $0x0,%edx
f0121457:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012145d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121463:	29 d0                	sub    %edx,%eax
f0121465:	01 d8                	add    %ebx,%eax
f0121467:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f012146c:	39 c1                	cmp    %eax,%ecx
f012146e:	74 17                	je     f0121487 <test_kfree+0x13fb>
f0121470:	83 ec 04             	sub    $0x4,%esp
f0121473:	68 20 b6 13 f0       	push   $0xf013b620
f0121478:	68 9f 05 00 00       	push   $0x59f
f012147d:	68 3a b5 13 f0       	push   $0xf013b53a
f0121482:	e8 7e ed fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121487:	e8 3c 29 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012148c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012148f:	74 17                	je     f01214a8 <test_kfree+0x141c>
f0121491:	83 ec 04             	sub    $0x4,%esp
f0121494:	68 54 b5 13 f0       	push   $0xf013b554
f0121499:	68 a0 05 00 00       	push   $0x5a0
f012149e:	68 3a b5 13 f0       	push   $0xf013b53a
f01214a3:	e8 5d ed fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01214a8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01214ab:	e8 e1 b8 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01214b0:	29 c3                	sub    %eax,%ebx
f01214b2:	89 da                	mov    %ebx,%edx
f01214b4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01214ba:	c1 e8 0c             	shr    $0xc,%eax
f01214bd:	39 c2                	cmp    %eax,%edx
f01214bf:	74 17                	je     f01214d8 <test_kfree+0x144c>
f01214c1:	83 ec 04             	sub    $0x4,%esp
f01214c4:	68 bc b5 13 f0       	push   $0xf013b5bc
f01214c9:	68 a1 05 00 00       	push   $0x5a1
f01214ce:	68 3a b5 13 f0       	push   $0xf013b53a
f01214d3:	e8 2d ed fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01214d8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01214de:	48                   	dec    %eax
f01214df:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f01214e5:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01214eb:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f01214ee:	e8 9e b8 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01214f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01214f6:	e8 cd 28 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01214fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f01214fe:	83 ec 0c             	sub    $0xc,%esp
f0121501:	68 00 00 30 00       	push   $0x300000
f0121506:	e8 6f 65 fe ff       	call   f0107a7a <kmalloc>
f012150b:	83 c4 10             	add    $0x10,%esp
f012150e:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121514:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012151a:	89 c1                	mov    %eax,%ecx
f012151c:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121523:	10 00 00 
f0121526:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012152c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121531:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0121537:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012153d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121542:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0121548:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012154e:	29 d0                	sub    %edx,%eax
f0121550:	89 c3                	mov    %eax,%ebx
f0121552:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0121559:	10 00 00 
f012155c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121561:	0f b6 d0             	movzbl %al,%edx
f0121564:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012156a:	01 d0                	add    %edx,%eax
f012156c:	48                   	dec    %eax
f012156d:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0121573:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121579:	ba 00 00 00 00       	mov    $0x0,%edx
f012157e:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0121584:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012158a:	29 d0                	sub    %edx,%eax
f012158c:	01 c3                	add    %eax,%ebx
f012158e:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0121595:	10 00 00 
f0121598:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012159d:	0f b6 c0             	movzbl %al,%eax
f01215a0:	c1 e0 04             	shl    $0x4,%eax
f01215a3:	89 c2                	mov    %eax,%edx
f01215a5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01215ab:	01 d0                	add    %edx,%eax
f01215ad:	48                   	dec    %eax
f01215ae:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01215b4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01215ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01215bf:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01215c5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01215cb:	29 d0                	sub    %edx,%eax
f01215cd:	01 d8                	add    %ebx,%eax
f01215cf:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01215d4:	39 c1                	cmp    %eax,%ecx
f01215d6:	74 17                	je     f01215ef <test_kfree+0x1563>
f01215d8:	83 ec 04             	sub    $0x4,%esp
f01215db:	68 20 b6 13 f0       	push   $0xf013b620
f01215e0:	68 ae 05 00 00       	push   $0x5ae
f01215e5:	68 3a b5 13 f0       	push   $0xf013b53a
f01215ea:	e8 16 ec fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215ef:	e8 d4 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01215f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215f7:	74 17                	je     f0121610 <test_kfree+0x1584>
f01215f9:	83 ec 04             	sub    $0x4,%esp
f01215fc:	68 54 b5 13 f0       	push   $0xf013b554
f0121601:	68 af 05 00 00       	push   $0x5af
f0121606:	68 3a b5 13 f0       	push   $0xf013b53a
f012160b:	e8 f5 eb fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121610:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121613:	e8 79 b7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121618:	29 c3                	sub    %eax,%ebx
f012161a:	89 d8                	mov    %ebx,%eax
f012161c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121621:	74 17                	je     f012163a <test_kfree+0x15ae>
f0121623:	83 ec 04             	sub    $0x4,%esp
f0121626:	68 bc b5 13 f0       	push   $0xf013b5bc
f012162b:	68 b0 05 00 00       	push   $0x5b0
f0121630:	68 3a b5 13 f0       	push   $0xf013b53a
f0121635:	e8 cb eb fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f012163a:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121641:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121644:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012164a:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f012164d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121654:	eb 0e                	jmp    f0121664 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121656:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121659:	8b 45 80             	mov    -0x80(%ebp),%eax
f012165c:	01 d0                	add    %edx,%eax
f012165e:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0121661:	ff 45 f4             	incl   -0xc(%ebp)
f0121664:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012166a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012166d:	7f e7                	jg     f0121656 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f012166f:	e8 1d b7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121674:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121677:	e8 4c 27 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012167c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f012167f:	83 ec 0c             	sub    $0xc,%esp
f0121682:	68 00 08 00 00       	push   $0x800
f0121687:	e8 ee 63 fe ff       	call   f0107a7a <kmalloc>
f012168c:	83 c4 10             	add    $0x10,%esp
f012168f:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121695:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012169b:	89 c1                	mov    %eax,%ecx
f012169d:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01216a4:	10 00 00 
f01216a7:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01216ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01216b2:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01216b8:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01216be:	ba 00 00 00 00       	mov    $0x0,%edx
f01216c3:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01216c9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01216cf:	29 d0                	sub    %edx,%eax
f01216d1:	89 c3                	mov    %eax,%ebx
f01216d3:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01216da:	10 00 00 
f01216dd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01216e2:	0f b6 d0             	movzbl %al,%edx
f01216e5:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01216eb:	01 d0                	add    %edx,%eax
f01216ed:	48                   	dec    %eax
f01216ee:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01216f4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01216fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01216ff:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121705:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012170b:	29 d0                	sub    %edx,%eax
f012170d:	01 c3                	add    %eax,%ebx
f012170f:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121716:	10 00 00 
f0121719:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012171e:	0f b6 c0             	movzbl %al,%eax
f0121721:	c1 e0 04             	shl    $0x4,%eax
f0121724:	89 c2                	mov    %eax,%edx
f0121726:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012172c:	01 d0                	add    %edx,%eax
f012172e:	48                   	dec    %eax
f012172f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121735:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012173b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121740:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121746:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012174c:	29 d0                	sub    %edx,%eax
f012174e:	01 d8                	add    %ebx,%eax
f0121750:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121755:	39 c1                	cmp    %eax,%ecx
f0121757:	74 17                	je     f0121770 <test_kfree+0x16e4>
f0121759:	83 ec 04             	sub    $0x4,%esp
f012175c:	68 20 b6 13 f0       	push   $0xf013b620
f0121761:	68 bc 05 00 00       	push   $0x5bc
f0121766:	68 3a b5 13 f0       	push   $0xf013b53a
f012176b:	e8 95 ea fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121770:	e8 53 26 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121775:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121778:	74 17                	je     f0121791 <test_kfree+0x1705>
f012177a:	83 ec 04             	sub    $0x4,%esp
f012177d:	68 54 b5 13 f0       	push   $0xf013b554
f0121782:	68 bd 05 00 00       	push   $0x5bd
f0121787:	68 3a b5 13 f0       	push   $0xf013b53a
f012178c:	e8 74 ea fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121791:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121794:	e8 f8 b5 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121799:	29 c3                	sub    %eax,%ebx
f012179b:	89 d8                	mov    %ebx,%eax
f012179d:	83 f8 01             	cmp    $0x1,%eax
f01217a0:	74 17                	je     f01217b9 <test_kfree+0x172d>
f01217a2:	83 ec 04             	sub    $0x4,%esp
f01217a5:	68 bc b5 13 f0       	push   $0xf013b5bc
f01217aa:	68 be 05 00 00       	push   $0x5be
f01217af:	68 3a b5 13 f0       	push   $0xf013b53a
f01217b4:	e8 4c ea fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01217b9:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01217c0:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01217c3:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01217c9:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01217cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01217d3:	eb 0e                	jmp    f01217e3 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f01217d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01217d8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01217db:	01 d0                	add    %edx,%eax
f01217dd:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f01217e0:	ff 45 f4             	incl   -0xc(%ebp)
f01217e3:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01217e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01217ec:	7f e7                	jg     f01217d5 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f01217ee:	e8 9e b5 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01217f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01217f6:	e8 cd 25 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01217fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f01217fe:	83 ec 0c             	sub    $0xc,%esp
f0121801:	68 00 00 10 00       	push   $0x100000
f0121806:	e8 6f 62 fe ff       	call   f0107a7a <kmalloc>
f012180b:	83 c4 10             	add    $0x10,%esp
f012180e:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121814:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012181a:	89 c1                	mov    %eax,%ecx
f012181c:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121823:	10 00 00 
f0121826:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012182c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121831:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121837:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012183d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121842:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121848:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012184e:	29 d0                	sub    %edx,%eax
f0121850:	89 c3                	mov    %eax,%ebx
f0121852:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121859:	10 00 00 
f012185c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121861:	0f b6 d0             	movzbl %al,%edx
f0121864:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012186a:	01 d0                	add    %edx,%eax
f012186c:	48                   	dec    %eax
f012186d:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121873:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121879:	ba 00 00 00 00       	mov    $0x0,%edx
f012187e:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121884:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012188a:	29 d0                	sub    %edx,%eax
f012188c:	01 c3                	add    %eax,%ebx
f012188e:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121895:	10 00 00 
f0121898:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012189d:	0f b6 c0             	movzbl %al,%eax
f01218a0:	c1 e0 04             	shl    $0x4,%eax
f01218a3:	89 c2                	mov    %eax,%edx
f01218a5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01218ab:	01 d0                	add    %edx,%eax
f01218ad:	48                   	dec    %eax
f01218ae:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01218b4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01218ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01218bf:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01218c5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01218cb:	29 d0                	sub    %edx,%eax
f01218cd:	01 d8                	add    %ebx,%eax
f01218cf:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01218d4:	39 c1                	cmp    %eax,%ecx
f01218d6:	74 17                	je     f01218ef <test_kfree+0x1863>
f01218d8:	83 ec 04             	sub    $0x4,%esp
f01218db:	68 20 b6 13 f0       	push   $0xf013b620
f01218e0:	68 ca 05 00 00       	push   $0x5ca
f01218e5:	68 3a b5 13 f0       	push   $0xf013b53a
f01218ea:	e8 16 e9 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218ef:	e8 d4 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01218f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218f7:	74 17                	je     f0121910 <test_kfree+0x1884>
f01218f9:	83 ec 04             	sub    $0x4,%esp
f01218fc:	68 54 b5 13 f0       	push   $0xf013b554
f0121901:	68 cb 05 00 00       	push   $0x5cb
f0121906:	68 3a b5 13 f0       	push   $0xf013b53a
f012190b:	e8 f5 e8 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121910:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121913:	e8 79 b4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121918:	29 c3                	sub    %eax,%ebx
f012191a:	89 d8                	mov    %ebx,%eax
f012191c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121921:	74 17                	je     f012193a <test_kfree+0x18ae>
f0121923:	83 ec 04             	sub    $0x4,%esp
f0121926:	68 bc b5 13 f0       	push   $0xf013b5bc
f012192b:	68 cc 05 00 00       	push   $0x5cc
f0121930:	68 3a b5 13 f0       	push   $0xf013b53a
f0121935:	e8 cb e8 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f012193a:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121941:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121944:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012194a:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f012194d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121954:	eb 0e                	jmp    f0121964 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121956:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121959:	8b 45 80             	mov    -0x80(%ebp),%eax
f012195c:	01 d0                	add    %edx,%eax
f012195e:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121961:	ff 45 f4             	incl   -0xc(%ebp)
f0121964:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012196a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012196d:	7f e7                	jg     f0121956 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f012196f:	83 ec 0c             	sub    $0xc,%esp
f0121972:	68 5a bd 13 f0       	push   $0xf013bd5a
f0121977:	e8 92 f3 fd ff       	call   f0100d0e <cprintf>
f012197c:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012197f:	e8 0d b4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121984:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121987:	e8 3c 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012198c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f012198f:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121995:	83 ec 0c             	sub    $0xc,%esp
f0121998:	50                   	push   %eax
f0121999:	e8 a7 61 fe ff       	call   f0107b45 <kfree>
f012199e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219a1:	e8 22 24 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01219a6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219a9:	74 17                	je     f01219c2 <test_kfree+0x1936>
f01219ab:	83 ec 04             	sub    $0x4,%esp
f01219ae:	68 54 b5 13 f0       	push   $0xf013b554
f01219b3:	68 dd 05 00 00       	push   $0x5dd
f01219b8:	68 3a b5 13 f0       	push   $0xf013b53a
f01219bd:	e8 43 e8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01219c2:	e8 ca b3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01219c7:	89 c2                	mov    %eax,%edx
f01219c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01219cc:	29 c2                	sub    %eax,%edx
f01219ce:	89 d0                	mov    %edx,%eax
f01219d0:	83 f8 02             	cmp    $0x2,%eax
f01219d3:	74 17                	je     f01219ec <test_kfree+0x1960>
f01219d5:	83 ec 04             	sub    $0x4,%esp
f01219d8:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01219dd:	68 de 05 00 00       	push   $0x5de
f01219e2:	68 3a b5 13 f0       	push   $0xf013b53a
f01219e7:	e8 19 e8 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01219ec:	e8 a0 b3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01219f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219f4:	e8 cf 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01219f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01219fc:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121a02:	83 ec 0c             	sub    $0xc,%esp
f0121a05:	50                   	push   %eax
f0121a06:	e8 3a 61 fe ff       	call   f0107b45 <kfree>
f0121a0b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a0e:	e8 b5 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a13:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a16:	74 17                	je     f0121a2f <test_kfree+0x19a3>
f0121a18:	83 ec 04             	sub    $0x4,%esp
f0121a1b:	68 54 b5 13 f0       	push   $0xf013b554
f0121a20:	68 e4 05 00 00       	push   $0x5e4
f0121a25:	68 3a b5 13 f0       	push   $0xf013b53a
f0121a2a:	e8 d6 e7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121a2f:	e8 5d b3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121a34:	89 c2                	mov    %eax,%edx
f0121a36:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121a39:	29 c2                	sub    %eax,%edx
f0121a3b:	89 d0                	mov    %edx,%eax
f0121a3d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121a42:	74 17                	je     f0121a5b <test_kfree+0x19cf>
f0121a44:	83 ec 04             	sub    $0x4,%esp
f0121a47:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121a4c:	68 e5 05 00 00       	push   $0x5e5
f0121a51:	68 3a b5 13 f0       	push   $0xf013b53a
f0121a56:	e8 aa e7 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121a5b:	e8 31 b3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121a60:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121a63:	e8 60 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a68:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121a6b:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121a71:	83 ec 0c             	sub    $0xc,%esp
f0121a74:	50                   	push   %eax
f0121a75:	e8 cb 60 fe ff       	call   f0107b45 <kfree>
f0121a7a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a7d:	e8 46 23 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121a82:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a85:	74 17                	je     f0121a9e <test_kfree+0x1a12>
f0121a87:	83 ec 04             	sub    $0x4,%esp
f0121a8a:	68 54 b5 13 f0       	push   $0xf013b554
f0121a8f:	68 eb 05 00 00       	push   $0x5eb
f0121a94:	68 3a b5 13 f0       	push   $0xf013b53a
f0121a99:	e8 67 e7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121a9e:	e8 ee b2 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121aa3:	89 c2                	mov    %eax,%edx
f0121aa5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121aa8:	29 c2                	sub    %eax,%edx
f0121aaa:	89 d0                	mov    %edx,%eax
f0121aac:	83 f8 01             	cmp    $0x1,%eax
f0121aaf:	74 17                	je     f0121ac8 <test_kfree+0x1a3c>
f0121ab1:	83 ec 04             	sub    $0x4,%esp
f0121ab4:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121ab9:	68 ec 05 00 00       	push   $0x5ec
f0121abe:	68 3a b5 13 f0       	push   $0xf013b53a
f0121ac3:	e8 3d e7 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ac8:	e8 c4 b2 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121acd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ad0:	e8 f3 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121ad5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121ad8:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121ade:	83 ec 0c             	sub    $0xc,%esp
f0121ae1:	50                   	push   %eax
f0121ae2:	e8 5e 60 fe ff       	call   f0107b45 <kfree>
f0121ae7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121aea:	e8 d9 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121aef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121af2:	74 17                	je     f0121b0b <test_kfree+0x1a7f>
f0121af4:	83 ec 04             	sub    $0x4,%esp
f0121af7:	68 54 b5 13 f0       	push   $0xf013b554
f0121afc:	68 f2 05 00 00       	push   $0x5f2
f0121b01:	68 3a b5 13 f0       	push   $0xf013b53a
f0121b06:	e8 fa e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b0b:	e8 81 b2 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121b10:	89 c2                	mov    %eax,%edx
f0121b12:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b15:	29 c2                	sub    %eax,%edx
f0121b17:	89 d0                	mov    %edx,%eax
f0121b19:	83 f8 04             	cmp    $0x4,%eax
f0121b1c:	74 17                	je     f0121b35 <test_kfree+0x1aa9>
f0121b1e:	83 ec 04             	sub    $0x4,%esp
f0121b21:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121b26:	68 f3 05 00 00       	push   $0x5f3
f0121b2b:	68 3a b5 13 f0       	push   $0xf013b53a
f0121b30:	e8 d0 e6 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121b35:	e8 57 b2 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121b3a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b3d:	e8 86 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b42:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121b45:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121b4b:	83 ec 0c             	sub    $0xc,%esp
f0121b4e:	50                   	push   %eax
f0121b4f:	e8 f1 5f fe ff       	call   f0107b45 <kfree>
f0121b54:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b57:	e8 6c 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121b5c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b5f:	74 17                	je     f0121b78 <test_kfree+0x1aec>
f0121b61:	83 ec 04             	sub    $0x4,%esp
f0121b64:	68 54 b5 13 f0       	push   $0xf013b554
f0121b69:	68 f9 05 00 00       	push   $0x5f9
f0121b6e:	68 3a b5 13 f0       	push   $0xf013b53a
f0121b73:	e8 8d e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b78:	e8 14 b2 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121b7d:	89 c2                	mov    %eax,%edx
f0121b7f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121b82:	29 c2                	sub    %eax,%edx
f0121b84:	89 d0                	mov    %edx,%eax
f0121b86:	83 f8 05             	cmp    $0x5,%eax
f0121b89:	74 17                	je     f0121ba2 <test_kfree+0x1b16>
f0121b8b:	83 ec 04             	sub    $0x4,%esp
f0121b8e:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121b93:	68 fa 05 00 00       	push   $0x5fa
f0121b98:	68 3a b5 13 f0       	push   $0xf013b53a
f0121b9d:	e8 63 e6 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121ba2:	e8 ea b1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121ba7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121baa:	e8 19 22 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121baf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121bb2:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121bb8:	83 ec 0c             	sub    $0xc,%esp
f0121bbb:	50                   	push   %eax
f0121bbc:	e8 84 5f fe ff       	call   f0107b45 <kfree>
f0121bc1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bc4:	e8 ff 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121bc9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bcc:	74 17                	je     f0121be5 <test_kfree+0x1b59>
f0121bce:	83 ec 04             	sub    $0x4,%esp
f0121bd1:	68 54 b5 13 f0       	push   $0xf013b554
f0121bd6:	68 00 06 00 00       	push   $0x600
f0121bdb:	68 3a b5 13 f0       	push   $0xf013b53a
f0121be0:	e8 20 e6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121be5:	e8 a7 b1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121bea:	89 c2                	mov    %eax,%edx
f0121bec:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121bef:	29 c2                	sub    %eax,%edx
f0121bf1:	89 d0                	mov    %edx,%eax
f0121bf3:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121bf8:	74 17                	je     f0121c11 <test_kfree+0x1b85>
f0121bfa:	83 ec 04             	sub    $0x4,%esp
f0121bfd:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121c02:	68 01 06 00 00       	push   $0x601
f0121c07:	68 3a b5 13 f0       	push   $0xf013b53a
f0121c0c:	e8 f4 e5 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121c11:	e8 51 5d ff ff       	call   f0117967 <isKHeapPlacementStrategyNEXTFIT>
f0121c16:	84 c0                	test   %al,%al
f0121c18:	0f 84 80 02 00 00    	je     f0121e9e <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0121c1e:	e8 6e b1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121c23:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121c26:	e8 9d 21 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121c2b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0121c2e:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121c34:	83 ec 0c             	sub    $0xc,%esp
f0121c37:	50                   	push   %eax
f0121c38:	e8 08 5f fe ff       	call   f0107b45 <kfree>
f0121c3d:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0121c40:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0121c47:	10 00 00 
f0121c4a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0121c50:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c55:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0121c5b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121c61:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c66:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0121c6c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0121c72:	29 d0                	sub    %edx,%eax
f0121c74:	89 c1                	mov    %eax,%ecx
f0121c76:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0121c7d:	10 00 00 
f0121c80:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121c85:	0f b6 d0             	movzbl %al,%edx
f0121c88:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0121c8e:	01 d0                	add    %edx,%eax
f0121c90:	48                   	dec    %eax
f0121c91:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0121c97:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121c9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ca2:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121ca8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0121cae:	29 d0                	sub    %edx,%eax
f0121cb0:	01 c1                	add    %eax,%ecx
f0121cb2:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0121cb9:	10 00 00 
f0121cbc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0121cc1:	0f b6 c0             	movzbl %al,%eax
f0121cc4:	c1 e0 04             	shl    $0x4,%eax
f0121cc7:	89 c2                	mov    %eax,%edx
f0121cc9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121ccf:	01 d0                	add    %edx,%eax
f0121cd1:	48                   	dec    %eax
f0121cd2:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121cd8:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121cde:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ce3:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0121ce9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121cef:	29 d0                	sub    %edx,%eax
f0121cf1:	01 c8                	add    %ecx,%eax
f0121cf3:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121cf8:	29 c2                	sub    %eax,%edx
f0121cfa:	89 d0                	mov    %edx,%eax
f0121cfc:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d02:	e8 c1 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d07:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d0a:	74 17                	je     f0121d23 <test_kfree+0x1c97>
f0121d0c:	83 ec 04             	sub    $0x4,%esp
f0121d0f:	68 54 b5 13 f0       	push   $0xf013b554
f0121d14:	68 0b 06 00 00       	push   $0x60b
f0121d19:	68 3a b5 13 f0       	push   $0xf013b53a
f0121d1e:	e8 e2 e4 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121d23:	e8 69 b0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121d28:	89 c2                	mov    %eax,%edx
f0121d2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121d2d:	29 c2                	sub    %eax,%edx
f0121d2f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121d35:	c1 e8 0c             	shr    $0xc,%eax
f0121d38:	39 c2                	cmp    %eax,%edx
f0121d3a:	74 17                	je     f0121d53 <test_kfree+0x1cc7>
f0121d3c:	83 ec 04             	sub    $0x4,%esp
f0121d3f:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121d44:	68 0c 06 00 00       	push   $0x60c
f0121d49:	68 3a b5 13 f0       	push   $0xf013b53a
f0121d4e:	e8 b2 e4 fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121d53:	e8 39 b0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121d58:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121d5b:	e8 68 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d60:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0121d63:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121d69:	83 ec 0c             	sub    $0xc,%esp
f0121d6c:	50                   	push   %eax
f0121d6d:	e8 d3 5d fe ff       	call   f0107b45 <kfree>
f0121d72:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d75:	e8 4e 20 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121d7a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d7d:	74 17                	je     f0121d96 <test_kfree+0x1d0a>
f0121d7f:	83 ec 04             	sub    $0x4,%esp
f0121d82:	68 54 b5 13 f0       	push   $0xf013b554
f0121d87:	68 12 06 00 00       	push   $0x612
f0121d8c:	68 3a b5 13 f0       	push   $0xf013b53a
f0121d91:	e8 6f e4 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121d96:	e8 f6 af fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121d9b:	89 c2                	mov    %eax,%edx
f0121d9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121da0:	29 c2                	sub    %eax,%edx
f0121da2:	89 d0                	mov    %edx,%eax
f0121da4:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121da9:	74 17                	je     f0121dc2 <test_kfree+0x1d36>
f0121dab:	83 ec 04             	sub    $0x4,%esp
f0121dae:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121db3:	68 13 06 00 00       	push   $0x613
f0121db8:	68 3a b5 13 f0       	push   $0xf013b53a
f0121dbd:	e8 43 e4 fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121dc2:	e8 ca af fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121dc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121dca:	e8 f9 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121dcf:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121dd2:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121dd8:	83 ec 0c             	sub    $0xc,%esp
f0121ddb:	50                   	push   %eax
f0121ddc:	e8 64 5d fe ff       	call   f0107b45 <kfree>
f0121de1:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121de4:	e8 df 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121de9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121dec:	74 17                	je     f0121e05 <test_kfree+0x1d79>
f0121dee:	83 ec 04             	sub    $0x4,%esp
f0121df1:	68 54 b5 13 f0       	push   $0xf013b554
f0121df6:	68 19 06 00 00       	push   $0x619
f0121dfb:	68 3a b5 13 f0       	push   $0xf013b53a
f0121e00:	e8 00 e4 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e05:	e8 87 af fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121e0a:	89 c2                	mov    %eax,%edx
f0121e0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e0f:	29 c2                	sub    %eax,%edx
f0121e11:	89 d0                	mov    %edx,%eax
f0121e13:	83 f8 01             	cmp    $0x1,%eax
f0121e16:	74 17                	je     f0121e2f <test_kfree+0x1da3>
f0121e18:	83 ec 04             	sub    $0x4,%esp
f0121e1b:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121e20:	68 1a 06 00 00       	push   $0x61a
f0121e25:	68 3a b5 13 f0       	push   $0xf013b53a
f0121e2a:	e8 d6 e3 fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121e2f:	e8 5d af fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121e34:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121e37:	e8 8c 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e3c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0121e3f:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121e45:	83 ec 0c             	sub    $0xc,%esp
f0121e48:	50                   	push   %eax
f0121e49:	e8 f7 5c fe ff       	call   f0107b45 <kfree>
f0121e4e:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e51:	e8 72 1f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121e56:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e59:	74 17                	je     f0121e72 <test_kfree+0x1de6>
f0121e5b:	83 ec 04             	sub    $0x4,%esp
f0121e5e:	68 54 b5 13 f0       	push   $0xf013b554
f0121e63:	68 20 06 00 00       	push   $0x620
f0121e68:	68 3a b5 13 f0       	push   $0xf013b53a
f0121e6d:	e8 93 e3 fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e72:	e8 1a af fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121e77:	89 c2                	mov    %eax,%edx
f0121e79:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121e7c:	29 c2                	sub    %eax,%edx
f0121e7e:	89 d0                	mov    %edx,%eax
f0121e80:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121e85:	74 17                	je     f0121e9e <test_kfree+0x1e12>
f0121e87:	83 ec 04             	sub    $0x4,%esp
f0121e8a:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121e8f:	68 21 06 00 00       	push   $0x621
f0121e94:	68 3a b5 13 f0       	push   $0xf013b53a
f0121e99:	e8 67 e3 fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121e9e:	e8 ee ae fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121ea3:	89 c2                	mov    %eax,%edx
f0121ea5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121ea8:	39 c2                	cmp    %eax,%edx
f0121eaa:	74 17                	je     f0121ec3 <test_kfree+0x1e37>
f0121eac:	83 ec 04             	sub    $0x4,%esp
f0121eaf:	68 64 bd 13 f0       	push   $0xf013bd64
f0121eb4:	68 24 06 00 00       	push   $0x624
f0121eb9:	68 3a b5 13 f0       	push   $0xf013b53a
f0121ebe:	e8 42 e3 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0121ec3:	83 ec 0c             	sub    $0xc,%esp
f0121ec6:	68 98 bd 13 f0       	push   $0xf013bd98
f0121ecb:	e8 3e ee fd ff       	call   f0100d0e <cprintf>
f0121ed0:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121ed3:	83 ec 0c             	sub    $0xc,%esp
f0121ed6:	6a 03                	push   $0x3
f0121ed8:	e8 54 b3 fe ff       	call   f010d231 <sys_bypassPageFault>
f0121edd:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0121ee0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ee7:	e9 82 00 00 00       	jmp    f0121f6e <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0121eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121eef:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0121ef6:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0121ef9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121efc:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121eff:	e8 1b b3 fe ff       	call   f010d21f <sys_rcr2>
f0121f04:	89 c2                	mov    %eax,%edx
f0121f06:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121f09:	39 c2                	cmp    %eax,%edx
f0121f0b:	74 17                	je     f0121f24 <test_kfree+0x1e98>
f0121f0d:	83 ec 04             	sub    $0x4,%esp
f0121f10:	68 a0 bd 13 f0       	push   $0xf013bda0
f0121f15:	68 33 06 00 00       	push   $0x633
f0121f1a:	68 3a b5 13 f0       	push   $0xf013b53a
f0121f1f:	e8 e1 e2 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0121f24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121f27:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121f2e:	89 c2                	mov    %eax,%edx
f0121f30:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121f33:	01 d0                	add    %edx,%eax
f0121f35:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121f38:	e8 e2 b2 fe ff       	call   f010d21f <sys_rcr2>
f0121f3d:	89 c2                	mov    %eax,%edx
f0121f3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121f42:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121f49:	89 c1                	mov    %eax,%ecx
f0121f4b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121f4e:	01 c8                	add    %ecx,%eax
f0121f50:	39 c2                	cmp    %eax,%edx
f0121f52:	74 17                	je     f0121f6b <test_kfree+0x1edf>
f0121f54:	83 ec 04             	sub    $0x4,%esp
f0121f57:	68 a0 bd 13 f0       	push   $0xf013bda0
f0121f5c:	68 35 06 00 00       	push   $0x635
f0121f61:	68 3a b5 13 f0       	push   $0xf013b53a
f0121f66:	e8 9a e2 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121f6b:	ff 45 f4             	incl   -0xc(%ebp)
f0121f6e:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0121f72:	0f 8e 74 ff ff ff    	jle    f0121eec <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121f78:	83 ec 0c             	sub    $0xc,%esp
f0121f7b:	6a 00                	push   $0x0
f0121f7d:	e8 af b2 fe ff       	call   f010d231 <sys_bypassPageFault>
f0121f82:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121f85:	83 ec 0c             	sub    $0xc,%esp
f0121f88:	68 e5 bd 13 f0       	push   $0xf013bde5
f0121f8d:	e8 7c ed fd ff       	call   f0100d0e <cprintf>
f0121f92:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f95:	e8 f7 ad fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121f9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f9d:	e8 26 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121fa2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121fa5:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121fab:	83 ec 0c             	sub    $0xc,%esp
f0121fae:	50                   	push   %eax
f0121faf:	e8 91 5b fe ff       	call   f0107b45 <kfree>
f0121fb4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fb7:	e8 0c 1e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0121fbc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121fbf:	74 17                	je     f0121fd8 <test_kfree+0x1f4c>
f0121fc1:	83 ec 04             	sub    $0x4,%esp
f0121fc4:	68 54 b5 13 f0       	push   $0xf013b554
f0121fc9:	68 43 06 00 00       	push   $0x643
f0121fce:	68 3a b5 13 f0       	push   $0xf013b53a
f0121fd3:	e8 2d e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121fd8:	e8 b4 ad fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0121fdd:	89 c2                	mov    %eax,%edx
f0121fdf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121fe2:	39 c2                	cmp    %eax,%edx
f0121fe4:	74 17                	je     f0121ffd <test_kfree+0x1f71>
f0121fe6:	83 ec 04             	sub    $0x4,%esp
f0121fe9:	68 ec bd 13 f0       	push   $0xf013bdec
f0121fee:	68 44 06 00 00       	push   $0x644
f0121ff3:	68 3a b5 13 f0       	push   $0xf013b53a
f0121ff8:	e8 08 e2 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ffd:	e8 8f ad fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122002:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122005:	e8 be 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012200a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012200d:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0122013:	83 ec 0c             	sub    $0xc,%esp
f0122016:	50                   	push   %eax
f0122017:	e8 29 5b fe ff       	call   f0107b45 <kfree>
f012201c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012201f:	e8 a4 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122024:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122027:	74 17                	je     f0122040 <test_kfree+0x1fb4>
f0122029:	83 ec 04             	sub    $0x4,%esp
f012202c:	68 54 b5 13 f0       	push   $0xf013b554
f0122031:	68 4a 06 00 00       	push   $0x64a
f0122036:	68 3a b5 13 f0       	push   $0xf013b53a
f012203b:	e8 c5 e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122040:	e8 4c ad fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122045:	89 c2                	mov    %eax,%edx
f0122047:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012204a:	39 c2                	cmp    %eax,%edx
f012204c:	74 17                	je     f0122065 <test_kfree+0x1fd9>
f012204e:	83 ec 04             	sub    $0x4,%esp
f0122051:	68 ec bd 13 f0       	push   $0xf013bdec
f0122056:	68 4b 06 00 00       	push   $0x64b
f012205b:	68 3a b5 13 f0       	push   $0xf013b53a
f0122060:	e8 a0 e1 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122065:	e8 27 ad fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012206a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012206d:	e8 56 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122072:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122075:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012207b:	83 ec 0c             	sub    $0xc,%esp
f012207e:	50                   	push   %eax
f012207f:	e8 c1 5a fe ff       	call   f0107b45 <kfree>
f0122084:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122087:	e8 3c 1d fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012208c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012208f:	74 17                	je     f01220a8 <test_kfree+0x201c>
f0122091:	83 ec 04             	sub    $0x4,%esp
f0122094:	68 54 b5 13 f0       	push   $0xf013b554
f0122099:	68 51 06 00 00       	push   $0x651
f012209e:	68 3a b5 13 f0       	push   $0xf013b53a
f01220a3:	e8 5d e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01220a8:	e8 e4 ac fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01220ad:	89 c2                	mov    %eax,%edx
f01220af:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01220b2:	39 c2                	cmp    %eax,%edx
f01220b4:	74 17                	je     f01220cd <test_kfree+0x2041>
f01220b6:	83 ec 04             	sub    $0x4,%esp
f01220b9:	68 ec bd 13 f0       	push   $0xf013bdec
f01220be:	68 52 06 00 00       	push   $0x652
f01220c3:	68 3a b5 13 f0       	push   $0xf013b53a
f01220c8:	e8 38 e1 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01220cd:	e8 bf ac fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01220d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220d5:	e8 ee 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01220da:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01220dd:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01220e3:	83 ec 0c             	sub    $0xc,%esp
f01220e6:	50                   	push   %eax
f01220e7:	e8 59 5a fe ff       	call   f0107b45 <kfree>
f01220ec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220ef:	e8 d4 1c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01220f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01220f7:	74 17                	je     f0122110 <test_kfree+0x2084>
f01220f9:	83 ec 04             	sub    $0x4,%esp
f01220fc:	68 54 b5 13 f0       	push   $0xf013b554
f0122101:	68 58 06 00 00       	push   $0x658
f0122106:	68 3a b5 13 f0       	push   $0xf013b53a
f012210b:	e8 f5 e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122110:	e8 7c ac fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122115:	89 c2                	mov    %eax,%edx
f0122117:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012211a:	39 c2                	cmp    %eax,%edx
f012211c:	74 17                	je     f0122135 <test_kfree+0x20a9>
f012211e:	83 ec 04             	sub    $0x4,%esp
f0122121:	68 ec bd 13 f0       	push   $0xf013bdec
f0122126:	68 59 06 00 00       	push   $0x659
f012212b:	68 3a b5 13 f0       	push   $0xf013b53a
f0122130:	e8 d0 e0 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0122135:	83 ec 0c             	sub    $0xc,%esp
f0122138:	68 33 be 13 f0       	push   $0xf013be33
f012213d:	e8 cc eb fd ff       	call   f0100d0e <cprintf>
f0122142:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122145:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012214c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122153:	eb 48                	jmp    f012219d <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122155:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122158:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012215d:	83 ec 04             	sub    $0x4,%esp
f0122160:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0122166:	51                   	push   %ecx
f0122167:	52                   	push   %edx
f0122168:	50                   	push   %eax
f0122169:	e8 43 49 fe ff       	call   f0106ab1 <get_page_table>
f012216e:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122171:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0122177:	85 c0                	test   %eax,%eax
f0122179:	75 17                	jne    f0122192 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012217b:	83 ec 04             	sub    $0x4,%esp
f012217e:	68 3c be 13 f0       	push   $0xf013be3c
f0122183:	68 67 06 00 00       	push   $0x667
f0122188:	68 3a b5 13 f0       	push   $0xf013b53a
f012218d:	e8 73 e0 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122192:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122199:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012219d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01221a1:	78 b2                	js     f0122155 <test_kfree+0x20c9>
f01221a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01221a7:	7f 09                	jg     f01221b2 <test_kfree+0x2126>
f01221a9:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01221b0:	76 a3                	jbe    f0122155 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01221b2:	83 ec 0c             	sub    $0xc,%esp
f01221b5:	68 1e b7 13 f0       	push   $0xf013b71e
f01221ba:	e8 4f eb fd ff       	call   f0100d0e <cprintf>
f01221bf:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01221c2:	83 ec 0c             	sub    $0xc,%esp
f01221c5:	68 a4 be 13 f0       	push   $0xf013bea4
f01221ca:	e8 3f eb fd ff       	call   f0100d0e <cprintf>
f01221cf:	83 c4 10             	add    $0x10,%esp

	return 1;
f01221d2:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01221d7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01221da:	5b                   	pop    %ebx
f01221db:	5f                   	pop    %edi
f01221dc:	5d                   	pop    %ebp
f01221dd:	c3                   	ret    

f01221de <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01221de:	55                   	push   %ebp
f01221df:	89 e5                	mov    %esp,%ebp
f01221e1:	57                   	push   %edi
f01221e2:	53                   	push   %ebx
f01221e3:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f01221e9:	83 ec 0c             	sub    $0xc,%esp
f01221ec:	68 7c b4 13 f0       	push   $0xf013b47c
f01221f1:	e8 18 eb fd ff       	call   f0100d0e <cprintf>
f01221f6:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01221f9:	83 ec 0c             	sub    $0xc,%esp
f01221fc:	68 ac b4 13 f0       	push   $0xf013b4ac
f0122201:	e8 08 eb fd ff       	call   f0100d0e <cprintf>
f0122206:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122209:	83 ec 0c             	sub    $0xc,%esp
f012220c:	68 7c b4 13 f0       	push   $0xf013b47c
f0122211:	e8 f8 ea fd ff       	call   f0100d0e <cprintf>
f0122216:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122219:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012221d:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0122221:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0122227:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012222d:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122234:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012223b:	e8 51 ab fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122240:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122243:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0122249:	b9 14 00 00 00       	mov    $0x14,%ecx
f012224e:	b8 00 00 00 00       	mov    $0x0,%eax
f0122253:	89 d7                	mov    %edx,%edi
f0122255:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122257:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012225d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122262:	b8 00 00 00 00       	mov    $0x0,%eax
f0122267:	89 d7                	mov    %edx,%edi
f0122269:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012226b:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0122271:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122276:	b8 00 00 00 00       	mov    $0x0,%eax
f012227b:	89 d7                	mov    %edx,%edi
f012227d:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012227f:	e8 0d ab fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122284:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122287:	e8 3c 1b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012228c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012228f:	83 ec 0c             	sub    $0xc,%esp
f0122292:	68 00 fc 1f 00       	push   $0x1ffc00
f0122297:	e8 de 57 fe ff       	call   f0107a7a <kmalloc>
f012229c:	83 c4 10             	add    $0x10,%esp
f012229f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01222a5:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01222ab:	89 c1                	mov    %eax,%ecx
f01222ad:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01222b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01222b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01222bc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01222bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01222c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01222c7:	f7 75 c8             	divl   -0x38(%ebp)
f01222ca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01222cd:	29 d0                	sub    %edx,%eax
f01222cf:	89 c3                	mov    %eax,%ebx
f01222d1:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01222d8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01222dd:	0f b6 d0             	movzbl %al,%edx
f01222e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01222e3:	01 d0                	add    %edx,%eax
f01222e5:	48                   	dec    %eax
f01222e6:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01222e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01222ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01222f1:	f7 75 c0             	divl   -0x40(%ebp)
f01222f4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01222f7:	29 d0                	sub    %edx,%eax
f01222f9:	01 c3                	add    %eax,%ebx
f01222fb:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0122302:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122307:	0f b6 c0             	movzbl %al,%eax
f012230a:	c1 e0 04             	shl    $0x4,%eax
f012230d:	89 c2                	mov    %eax,%edx
f012230f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0122312:	01 d0                	add    %edx,%eax
f0122314:	48                   	dec    %eax
f0122315:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0122318:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012231b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122320:	f7 75 b8             	divl   -0x48(%ebp)
f0122323:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122326:	29 d0                	sub    %edx,%eax
f0122328:	01 d8                	add    %ebx,%eax
f012232a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012232f:	39 c1                	cmp    %eax,%ecx
f0122331:	74 17                	je     f012234a <test_kfree_bestfirstfit+0x16c>
f0122333:	83 ec 04             	sub    $0x4,%esp
f0122336:	68 20 b6 13 f0       	push   $0xf013b620
f012233b:	68 95 06 00 00       	push   $0x695
f0122340:	68 3a b5 13 f0       	push   $0xf013b53a
f0122345:	e8 bb de fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012234a:	e8 79 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012234f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122352:	74 17                	je     f012236b <test_kfree_bestfirstfit+0x18d>
f0122354:	83 ec 04             	sub    $0x4,%esp
f0122357:	68 54 b5 13 f0       	push   $0xf013b554
f012235c:	68 96 06 00 00       	push   $0x696
f0122361:	68 3a b5 13 f0       	push   $0xf013b53a
f0122366:	e8 9a de fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012236b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012236e:	e8 1e aa fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122373:	29 c3                	sub    %eax,%ebx
f0122375:	89 d8                	mov    %ebx,%eax
f0122377:	3d 00 02 00 00       	cmp    $0x200,%eax
f012237c:	74 17                	je     f0122395 <test_kfree_bestfirstfit+0x1b7>
f012237e:	83 ec 04             	sub    $0x4,%esp
f0122381:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122386:	68 97 06 00 00       	push   $0x697
f012238b:	68 3a b5 13 f0       	push   $0xf013b53a
f0122390:	e8 70 de fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0122395:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f012239c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012239f:	e8 ed a9 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01223a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01223a7:	e8 1c 1a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01223ac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01223af:	83 ec 0c             	sub    $0xc,%esp
f01223b2:	68 00 fc 1f 00       	push   $0x1ffc00
f01223b7:	e8 be 56 fe ff       	call   f0107a7a <kmalloc>
f01223bc:	83 c4 10             	add    $0x10,%esp
f01223bf:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01223c5:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01223cb:	89 c1                	mov    %eax,%ecx
f01223cd:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01223d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01223d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01223dc:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01223df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01223e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01223e7:	f7 75 b0             	divl   -0x50(%ebp)
f01223ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01223ed:	29 d0                	sub    %edx,%eax
f01223ef:	89 c3                	mov    %eax,%ebx
f01223f1:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01223f8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01223fd:	0f b6 d0             	movzbl %al,%edx
f0122400:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0122403:	01 d0                	add    %edx,%eax
f0122405:	48                   	dec    %eax
f0122406:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0122409:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012240c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122411:	f7 75 a8             	divl   -0x58(%ebp)
f0122414:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122417:	29 d0                	sub    %edx,%eax
f0122419:	01 c3                	add    %eax,%ebx
f012241b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122422:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122427:	0f b6 c0             	movzbl %al,%eax
f012242a:	c1 e0 04             	shl    $0x4,%eax
f012242d:	89 c2                	mov    %eax,%edx
f012242f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122432:	01 d0                	add    %edx,%eax
f0122434:	48                   	dec    %eax
f0122435:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122438:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012243b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122440:	f7 75 a0             	divl   -0x60(%ebp)
f0122443:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122446:	29 d0                	sub    %edx,%eax
f0122448:	01 d8                	add    %ebx,%eax
f012244a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012244f:	39 c1                	cmp    %eax,%ecx
f0122451:	74 17                	je     f012246a <test_kfree_bestfirstfit+0x28c>
f0122453:	83 ec 04             	sub    $0x4,%esp
f0122456:	68 20 b6 13 f0       	push   $0xf013b620
f012245b:	68 9e 06 00 00       	push   $0x69e
f0122460:	68 3a b5 13 f0       	push   $0xf013b53a
f0122465:	e8 9b dd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012246a:	e8 59 19 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012246f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122472:	74 17                	je     f012248b <test_kfree_bestfirstfit+0x2ad>
f0122474:	83 ec 04             	sub    $0x4,%esp
f0122477:	68 54 b5 13 f0       	push   $0xf013b554
f012247c:	68 9f 06 00 00       	push   $0x69f
f0122481:	68 3a b5 13 f0       	push   $0xf013b53a
f0122486:	e8 7a dd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012248b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012248e:	e8 fe a8 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122493:	29 c3                	sub    %eax,%ebx
f0122495:	89 d8                	mov    %ebx,%eax
f0122497:	3d 00 02 00 00       	cmp    $0x200,%eax
f012249c:	74 17                	je     f01224b5 <test_kfree_bestfirstfit+0x2d7>
f012249e:	83 ec 04             	sub    $0x4,%esp
f01224a1:	68 bc b5 13 f0       	push   $0xf013b5bc
f01224a6:	68 a0 06 00 00       	push   $0x6a0
f01224ab:	68 3a b5 13 f0       	push   $0xf013b53a
f01224b0:	e8 50 dd fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01224b5:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01224bc:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01224bf:	e8 cd a8 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01224c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224c7:	e8 fc 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01224cc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01224cf:	83 ec 0c             	sub    $0xc,%esp
f01224d2:	68 00 08 00 00       	push   $0x800
f01224d7:	e8 9e 55 fe ff       	call   f0107a7a <kmalloc>
f01224dc:	83 c4 10             	add    $0x10,%esp
f01224df:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01224e5:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01224eb:	89 c1                	mov    %eax,%ecx
f01224ed:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01224f4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01224f7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01224fc:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01224ff:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122502:	ba 00 00 00 00       	mov    $0x0,%edx
f0122507:	f7 75 98             	divl   -0x68(%ebp)
f012250a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012250d:	29 d0                	sub    %edx,%eax
f012250f:	89 c3                	mov    %eax,%ebx
f0122511:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122518:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012251d:	0f b6 d0             	movzbl %al,%edx
f0122520:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122523:	01 d0                	add    %edx,%eax
f0122525:	48                   	dec    %eax
f0122526:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122529:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012252c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122531:	f7 75 90             	divl   -0x70(%ebp)
f0122534:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122537:	29 d0                	sub    %edx,%eax
f0122539:	01 c3                	add    %eax,%ebx
f012253b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122542:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122547:	0f b6 c0             	movzbl %al,%eax
f012254a:	c1 e0 04             	shl    $0x4,%eax
f012254d:	89 c2                	mov    %eax,%edx
f012254f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122552:	01 d0                	add    %edx,%eax
f0122554:	48                   	dec    %eax
f0122555:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122558:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012255b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122560:	f7 75 88             	divl   -0x78(%ebp)
f0122563:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122566:	29 d0                	sub    %edx,%eax
f0122568:	01 d8                	add    %ebx,%eax
f012256a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012256f:	39 c1                	cmp    %eax,%ecx
f0122571:	74 17                	je     f012258a <test_kfree_bestfirstfit+0x3ac>
f0122573:	83 ec 04             	sub    $0x4,%esp
f0122576:	68 20 b6 13 f0       	push   $0xf013b620
f012257b:	68 a7 06 00 00       	push   $0x6a7
f0122580:	68 3a b5 13 f0       	push   $0xf013b53a
f0122585:	e8 7b dc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012258a:	e8 39 18 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012258f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122592:	74 17                	je     f01225ab <test_kfree_bestfirstfit+0x3cd>
f0122594:	83 ec 04             	sub    $0x4,%esp
f0122597:	68 54 b5 13 f0       	push   $0xf013b554
f012259c:	68 a8 06 00 00       	push   $0x6a8
f01225a1:	68 3a b5 13 f0       	push   $0xf013b53a
f01225a6:	e8 5a dc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01225ab:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01225ae:	e8 de a7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01225b3:	29 c3                	sub    %eax,%ebx
f01225b5:	89 d8                	mov    %ebx,%eax
f01225b7:	83 f8 01             	cmp    $0x1,%eax
f01225ba:	74 17                	je     f01225d3 <test_kfree_bestfirstfit+0x3f5>
f01225bc:	83 ec 04             	sub    $0x4,%esp
f01225bf:	68 bc b5 13 f0       	push   $0xf013b5bc
f01225c4:	68 a9 06 00 00       	push   $0x6a9
f01225c9:	68 3a b5 13 f0       	push   $0xf013b53a
f01225ce:	e8 32 dc fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01225d3:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01225da:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01225dd:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01225e3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01225e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01225ed:	eb 0e                	jmp    f01225fd <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f01225ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01225f2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01225f5:	01 d0                	add    %edx,%eax
f01225f7:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01225fa:	ff 45 f4             	incl   -0xc(%ebp)
f01225fd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122603:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122606:	7f e7                	jg     f01225ef <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122608:	e8 84 a7 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012260d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122610:	e8 b3 17 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122615:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122618:	83 ec 0c             	sub    $0xc,%esp
f012261b:	68 00 08 00 00       	push   $0x800
f0122620:	e8 55 54 fe ff       	call   f0107a7a <kmalloc>
f0122625:	83 c4 10             	add    $0x10,%esp
f0122628:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012262e:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122634:	89 c1                	mov    %eax,%ecx
f0122636:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012263d:	10 00 00 
f0122640:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122646:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012264b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122651:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122657:	ba 00 00 00 00       	mov    $0x0,%edx
f012265c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0122662:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122668:	29 d0                	sub    %edx,%eax
f012266a:	89 c3                	mov    %eax,%ebx
f012266c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122673:	10 00 00 
f0122676:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012267b:	0f b6 d0             	movzbl %al,%edx
f012267e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122684:	01 d0                	add    %edx,%eax
f0122686:	48                   	dec    %eax
f0122687:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012268d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122693:	ba 00 00 00 00       	mov    $0x0,%edx
f0122698:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012269e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01226a4:	29 d0                	sub    %edx,%eax
f01226a6:	01 c3                	add    %eax,%ebx
f01226a8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01226af:	10 00 00 
f01226b2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01226b7:	0f b6 c0             	movzbl %al,%eax
f01226ba:	c1 e0 04             	shl    $0x4,%eax
f01226bd:	89 c2                	mov    %eax,%edx
f01226bf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01226c5:	01 d0                	add    %edx,%eax
f01226c7:	48                   	dec    %eax
f01226c8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01226ce:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01226d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01226d9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01226df:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01226e5:	29 d0                	sub    %edx,%eax
f01226e7:	01 d8                	add    %ebx,%eax
f01226e9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01226ee:	39 c1                	cmp    %eax,%ecx
f01226f0:	74 17                	je     f0122709 <test_kfree_bestfirstfit+0x52b>
f01226f2:	83 ec 04             	sub    $0x4,%esp
f01226f5:	68 20 b6 13 f0       	push   $0xf013b620
f01226fa:	68 b5 06 00 00       	push   $0x6b5
f01226ff:	68 3a b5 13 f0       	push   $0xf013b53a
f0122704:	e8 fc da fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122709:	e8 ba 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012270e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122711:	74 17                	je     f012272a <test_kfree_bestfirstfit+0x54c>
f0122713:	83 ec 04             	sub    $0x4,%esp
f0122716:	68 54 b5 13 f0       	push   $0xf013b554
f012271b:	68 b6 06 00 00       	push   $0x6b6
f0122720:	68 3a b5 13 f0       	push   $0xf013b53a
f0122725:	e8 db da fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012272a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012272d:	e8 5f a6 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122732:	29 c3                	sub    %eax,%ebx
f0122734:	89 d8                	mov    %ebx,%eax
f0122736:	83 f8 01             	cmp    $0x1,%eax
f0122739:	74 17                	je     f0122752 <test_kfree_bestfirstfit+0x574>
f012273b:	83 ec 04             	sub    $0x4,%esp
f012273e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122743:	68 b7 06 00 00       	push   $0x6b7
f0122748:	68 3a b5 13 f0       	push   $0xf013b53a
f012274d:	e8 b3 da fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122752:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0122759:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012275c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122762:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122765:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012276c:	eb 0e                	jmp    f012277c <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f012276e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122771:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122774:	01 d0                	add    %edx,%eax
f0122776:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122779:	ff 45 f4             	incl   -0xc(%ebp)
f012277c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122782:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122785:	7f e7                	jg     f012276e <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122787:	e8 05 a6 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012278c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012278f:	e8 34 16 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122794:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122797:	83 ec 0c             	sub    $0xc,%esp
f012279a:	68 00 1c 00 00       	push   $0x1c00
f012279f:	e8 d6 52 fe ff       	call   f0107a7a <kmalloc>
f01227a4:	83 c4 10             	add    $0x10,%esp
f01227a7:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01227ad:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01227b3:	89 c1                	mov    %eax,%ecx
f01227b5:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01227bc:	10 00 00 
f01227bf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01227c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01227ca:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01227d0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01227d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01227db:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01227e1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01227e7:	29 d0                	sub    %edx,%eax
f01227e9:	89 c3                	mov    %eax,%ebx
f01227eb:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01227f2:	10 00 00 
f01227f5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01227fa:	0f b6 d0             	movzbl %al,%edx
f01227fd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122803:	01 d0                	add    %edx,%eax
f0122805:	48                   	dec    %eax
f0122806:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012280c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122812:	ba 00 00 00 00       	mov    $0x0,%edx
f0122817:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012281d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122823:	29 d0                	sub    %edx,%eax
f0122825:	01 c3                	add    %eax,%ebx
f0122827:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012282e:	10 00 00 
f0122831:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122836:	0f b6 c0             	movzbl %al,%eax
f0122839:	c1 e0 04             	shl    $0x4,%eax
f012283c:	89 c2                	mov    %eax,%edx
f012283e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122844:	01 d0                	add    %edx,%eax
f0122846:	48                   	dec    %eax
f0122847:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012284d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122853:	ba 00 00 00 00       	mov    $0x0,%edx
f0122858:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012285e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122864:	29 d0                	sub    %edx,%eax
f0122866:	01 d8                	add    %ebx,%eax
f0122868:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012286d:	39 c1                	cmp    %eax,%ecx
f012286f:	74 17                	je     f0122888 <test_kfree_bestfirstfit+0x6aa>
f0122871:	83 ec 04             	sub    $0x4,%esp
f0122874:	68 20 b6 13 f0       	push   $0xf013b620
f0122879:	68 c3 06 00 00       	push   $0x6c3
f012287e:	68 3a b5 13 f0       	push   $0xf013b53a
f0122883:	e8 7d d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122888:	e8 3b 15 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012288d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122890:	74 17                	je     f01228a9 <test_kfree_bestfirstfit+0x6cb>
f0122892:	83 ec 04             	sub    $0x4,%esp
f0122895:	68 54 b5 13 f0       	push   $0xf013b554
f012289a:	68 c4 06 00 00       	push   $0x6c4
f012289f:	68 3a b5 13 f0       	push   $0xf013b53a
f01228a4:	e8 5c d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01228a9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01228ac:	e8 e0 a4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01228b1:	29 c3                	sub    %eax,%ebx
f01228b3:	89 d8                	mov    %ebx,%eax
f01228b5:	83 f8 02             	cmp    $0x2,%eax
f01228b8:	74 17                	je     f01228d1 <test_kfree_bestfirstfit+0x6f3>
f01228ba:	83 ec 04             	sub    $0x4,%esp
f01228bd:	68 bc b5 13 f0       	push   $0xf013b5bc
f01228c2:	68 c5 06 00 00       	push   $0x6c5
f01228c7:	68 3a b5 13 f0       	push   $0xf013b53a
f01228cc:	e8 34 d9 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01228d1:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01228d8:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01228db:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01228e1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01228e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01228eb:	eb 0e                	jmp    f01228fb <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f01228ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01228f0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01228f3:	01 d0                	add    %edx,%eax
f01228f5:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01228f8:	ff 45 f4             	incl   -0xc(%ebp)
f01228fb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122901:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122904:	7f e7                	jg     f01228ed <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122906:	e8 86 a4 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012290b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012290e:	e8 b5 14 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122913:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122916:	83 ec 0c             	sub    $0xc,%esp
f0122919:	68 00 fc 2f 00       	push   $0x2ffc00
f012291e:	e8 57 51 fe ff       	call   f0107a7a <kmalloc>
f0122923:	83 c4 10             	add    $0x10,%esp
f0122926:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012292c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122932:	89 c1                	mov    %eax,%ecx
f0122934:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012293b:	10 00 00 
f012293e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122944:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122949:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012294f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122955:	ba 00 00 00 00       	mov    $0x0,%edx
f012295a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122960:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122966:	29 d0                	sub    %edx,%eax
f0122968:	89 c3                	mov    %eax,%ebx
f012296a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122971:	10 00 00 
f0122974:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122979:	0f b6 d0             	movzbl %al,%edx
f012297c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122982:	01 d0                	add    %edx,%eax
f0122984:	48                   	dec    %eax
f0122985:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012298b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122991:	ba 00 00 00 00       	mov    $0x0,%edx
f0122996:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012299c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01229a2:	29 d0                	sub    %edx,%eax
f01229a4:	01 c3                	add    %eax,%ebx
f01229a6:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01229ad:	10 00 00 
f01229b0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01229b5:	0f b6 c0             	movzbl %al,%eax
f01229b8:	c1 e0 04             	shl    $0x4,%eax
f01229bb:	89 c2                	mov    %eax,%edx
f01229bd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01229c3:	01 d0                	add    %edx,%eax
f01229c5:	48                   	dec    %eax
f01229c6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01229cc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01229d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01229d7:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01229dd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01229e3:	29 d0                	sub    %edx,%eax
f01229e5:	01 d8                	add    %ebx,%eax
f01229e7:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01229ec:	39 c1                	cmp    %eax,%ecx
f01229ee:	74 17                	je     f0122a07 <test_kfree_bestfirstfit+0x829>
f01229f0:	83 ec 04             	sub    $0x4,%esp
f01229f3:	68 20 b6 13 f0       	push   $0xf013b620
f01229f8:	68 d1 06 00 00       	push   $0x6d1
f01229fd:	68 3a b5 13 f0       	push   $0xf013b53a
f0122a02:	e8 fe d7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a07:	e8 bc 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122a0c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a0f:	74 17                	je     f0122a28 <test_kfree_bestfirstfit+0x84a>
f0122a11:	83 ec 04             	sub    $0x4,%esp
f0122a14:	68 54 b5 13 f0       	push   $0xf013b554
f0122a19:	68 d2 06 00 00       	push   $0x6d2
f0122a1e:	68 3a b5 13 f0       	push   $0xf013b53a
f0122a23:	e8 dd d7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a28:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122a2b:	e8 61 a3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122a30:	29 c3                	sub    %eax,%ebx
f0122a32:	89 d8                	mov    %ebx,%eax
f0122a34:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122a39:	74 17                	je     f0122a52 <test_kfree_bestfirstfit+0x874>
f0122a3b:	83 ec 04             	sub    $0x4,%esp
f0122a3e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122a43:	68 d3 06 00 00       	push   $0x6d3
f0122a48:	68 3a b5 13 f0       	push   $0xf013b53a
f0122a4d:	e8 b3 d7 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122a52:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122a59:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122a5c:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122a62:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122a65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a6c:	eb 0e                	jmp    f0122a7c <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122a6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a71:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122a74:	01 d0                	add    %edx,%eax
f0122a76:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122a79:	ff 45 f4             	incl   -0xc(%ebp)
f0122a7c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122a82:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a85:	7f e7                	jg     f0122a6e <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a87:	e8 05 a3 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122a8c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a8f:	e8 34 13 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122a94:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0122a97:	83 ec 0c             	sub    $0xc,%esp
f0122a9a:	68 00 fc 5f 00       	push   $0x5ffc00
f0122a9f:	e8 d6 4f fe ff       	call   f0107a7a <kmalloc>
f0122aa4:	83 c4 10             	add    $0x10,%esp
f0122aa7:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122aad:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122ab3:	89 c1                	mov    %eax,%ecx
f0122ab5:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122abc:	10 00 00 
f0122abf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122ac5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122aca:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122ad0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122ad6:	ba 00 00 00 00       	mov    $0x0,%edx
f0122adb:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122ae1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122ae7:	29 d0                	sub    %edx,%eax
f0122ae9:	89 c3                	mov    %eax,%ebx
f0122aeb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122af2:	10 00 00 
f0122af5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122afa:	0f b6 d0             	movzbl %al,%edx
f0122afd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122b03:	01 d0                	add    %edx,%eax
f0122b05:	48                   	dec    %eax
f0122b06:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122b0c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122b12:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b17:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0122b1d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122b23:	29 d0                	sub    %edx,%eax
f0122b25:	01 c3                	add    %eax,%ebx
f0122b27:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122b2e:	10 00 00 
f0122b31:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122b36:	0f b6 c0             	movzbl %al,%eax
f0122b39:	c1 e0 04             	shl    $0x4,%eax
f0122b3c:	89 c2                	mov    %eax,%edx
f0122b3e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122b44:	01 d0                	add    %edx,%eax
f0122b46:	48                   	dec    %eax
f0122b47:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0122b4d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122b53:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b58:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122b5e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122b64:	29 d0                	sub    %edx,%eax
f0122b66:	01 d8                	add    %ebx,%eax
f0122b68:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0122b6d:	39 c1                	cmp    %eax,%ecx
f0122b6f:	74 17                	je     f0122b88 <test_kfree_bestfirstfit+0x9aa>
f0122b71:	83 ec 04             	sub    $0x4,%esp
f0122b74:	68 20 b6 13 f0       	push   $0xf013b620
f0122b79:	68 df 06 00 00       	push   $0x6df
f0122b7e:	68 3a b5 13 f0       	push   $0xf013b53a
f0122b83:	e8 7d d6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b88:	e8 3b 12 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122b8d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b90:	74 17                	je     f0122ba9 <test_kfree_bestfirstfit+0x9cb>
f0122b92:	83 ec 04             	sub    $0x4,%esp
f0122b95:	68 54 b5 13 f0       	push   $0xf013b554
f0122b9a:	68 e0 06 00 00       	push   $0x6e0
f0122b9f:	68 3a b5 13 f0       	push   $0xf013b53a
f0122ba4:	e8 5c d6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ba9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122bac:	e8 e0 a1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122bb1:	29 c3                	sub    %eax,%ebx
f0122bb3:	89 d8                	mov    %ebx,%eax
f0122bb5:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122bba:	74 17                	je     f0122bd3 <test_kfree_bestfirstfit+0x9f5>
f0122bbc:	83 ec 04             	sub    $0x4,%esp
f0122bbf:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122bc4:	68 e1 06 00 00       	push   $0x6e1
f0122bc9:	68 3a b5 13 f0       	push   $0xf013b53a
f0122bce:	e8 32 d6 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0122bd3:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0122bda:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122bdd:	e8 af a1 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122be2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122be5:	e8 de 11 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122bea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0122bed:	83 ec 0c             	sub    $0xc,%esp
f0122bf0:	68 00 38 00 00       	push   $0x3800
f0122bf5:	e8 80 4e fe ff       	call   f0107a7a <kmalloc>
f0122bfa:	83 c4 10             	add    $0x10,%esp
f0122bfd:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122c03:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122c09:	89 c1                	mov    %eax,%ecx
f0122c0b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122c12:	10 00 00 
f0122c15:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122c1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122c20:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122c26:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122c2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c31:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122c37:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122c3d:	29 d0                	sub    %edx,%eax
f0122c3f:	89 c3                	mov    %eax,%ebx
f0122c41:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122c48:	10 00 00 
f0122c4b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122c50:	0f b6 d0             	movzbl %al,%edx
f0122c53:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122c59:	01 d0                	add    %edx,%eax
f0122c5b:	48                   	dec    %eax
f0122c5c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122c62:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122c68:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c6d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122c73:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122c79:	29 d0                	sub    %edx,%eax
f0122c7b:	01 c3                	add    %eax,%ebx
f0122c7d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0122c84:	10 00 00 
f0122c87:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0122c8c:	0f b6 c0             	movzbl %al,%eax
f0122c8f:	c1 e0 04             	shl    $0x4,%eax
f0122c92:	89 c2                	mov    %eax,%edx
f0122c94:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0122c9a:	01 d0                	add    %edx,%eax
f0122c9c:	48                   	dec    %eax
f0122c9d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122ca3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122ca9:	ba 00 00 00 00       	mov    $0x0,%edx
f0122cae:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122cb4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0122cba:	29 d0                	sub    %edx,%eax
f0122cbc:	01 d8                	add    %ebx,%eax
f0122cbe:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122cc3:	39 c1                	cmp    %eax,%ecx
f0122cc5:	74 17                	je     f0122cde <test_kfree_bestfirstfit+0xb00>
f0122cc7:	83 ec 04             	sub    $0x4,%esp
f0122cca:	68 20 b6 13 f0       	push   $0xf013b620
f0122ccf:	68 e8 06 00 00       	push   $0x6e8
f0122cd4:	68 3a b5 13 f0       	push   $0xf013b53a
f0122cd9:	e8 27 d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122cde:	e8 e5 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122ce3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ce6:	74 17                	je     f0122cff <test_kfree_bestfirstfit+0xb21>
f0122ce8:	83 ec 04             	sub    $0x4,%esp
f0122ceb:	68 54 b5 13 f0       	push   $0xf013b554
f0122cf0:	68 e9 06 00 00       	push   $0x6e9
f0122cf5:	68 3a b5 13 f0       	push   $0xf013b53a
f0122cfa:	e8 06 d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122cff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122d02:	e8 8a a0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122d07:	29 c3                	sub    %eax,%ebx
f0122d09:	89 d8                	mov    %ebx,%eax
f0122d0b:	83 f8 04             	cmp    $0x4,%eax
f0122d0e:	74 17                	je     f0122d27 <test_kfree_bestfirstfit+0xb49>
f0122d10:	83 ec 04             	sub    $0x4,%esp
f0122d13:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122d18:	68 ea 06 00 00       	push   $0x6ea
f0122d1d:	68 3a b5 13 f0       	push   $0xf013b53a
f0122d22:	e8 de d4 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122d27:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0122d2e:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122d31:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122d37:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122d3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d41:	eb 0e                	jmp    f0122d51 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0122d43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122d46:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122d49:	01 d0                	add    %edx,%eax
f0122d4b:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122d4e:	ff 45 f4             	incl   -0xc(%ebp)
f0122d51:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122d57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122d5a:	7f e7                	jg     f0122d43 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122d5c:	e8 30 a0 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122d61:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0122d67:	e8 5c 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122d6c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0122d72:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122d78:	83 ec 0c             	sub    $0xc,%esp
f0122d7b:	50                   	push   %eax
f0122d7c:	e8 c4 4d fe ff       	call   f0107b45 <kfree>
f0122d81:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d84:	e8 3f 10 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122d89:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122d8f:	74 17                	je     f0122da8 <test_kfree_bestfirstfit+0xbca>
f0122d91:	83 ec 04             	sub    $0x4,%esp
f0122d94:	68 54 b5 13 f0       	push   $0xf013b554
f0122d99:	68 f9 06 00 00       	push   $0x6f9
f0122d9e:	68 3a b5 13 f0       	push   $0xf013b53a
f0122da3:	e8 5d d4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122da8:	e8 e4 9f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122dad:	89 c2                	mov    %eax,%edx
f0122daf:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122db5:	29 c2                	sub    %eax,%edx
f0122db7:	89 d0                	mov    %edx,%eax
f0122db9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122dbe:	74 17                	je     f0122dd7 <test_kfree_bestfirstfit+0xbf9>
f0122dc0:	83 ec 04             	sub    $0x4,%esp
f0122dc3:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0122dc8:	68 fa 06 00 00       	push   $0x6fa
f0122dcd:	68 3a b5 13 f0       	push   $0xf013b53a
f0122dd2:	e8 2e d4 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122dd7:	e8 b5 9f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122ddc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122de2:	e8 e1 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122de7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0122ded:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122df3:	83 ec 0c             	sub    $0xc,%esp
f0122df6:	50                   	push   %eax
f0122df7:	e8 49 4d fe ff       	call   f0107b45 <kfree>
f0122dfc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122dff:	e8 c4 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e04:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122e0a:	74 17                	je     f0122e23 <test_kfree_bestfirstfit+0xc45>
f0122e0c:	83 ec 04             	sub    $0x4,%esp
f0122e0f:	68 54 b5 13 f0       	push   $0xf013b554
f0122e14:	68 00 07 00 00       	push   $0x700
f0122e19:	68 3a b5 13 f0       	push   $0xf013b53a
f0122e1e:	e8 e2 d3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e23:	e8 69 9f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122e28:	89 c2                	mov    %eax,%edx
f0122e2a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122e30:	29 c2                	sub    %eax,%edx
f0122e32:	89 d0                	mov    %edx,%eax
f0122e34:	83 f8 01             	cmp    $0x1,%eax
f0122e37:	74 17                	je     f0122e50 <test_kfree_bestfirstfit+0xc72>
f0122e39:	83 ec 04             	sub    $0x4,%esp
f0122e3c:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0122e41:	68 01 07 00 00       	push   $0x701
f0122e46:	68 3a b5 13 f0       	push   $0xf013b53a
f0122e4b:	e8 b5 d3 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e50:	e8 3c 9f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122e55:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e5b:	e8 68 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e60:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122e66:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122e6c:	83 ec 0c             	sub    $0xc,%esp
f0122e6f:	50                   	push   %eax
f0122e70:	e8 d0 4c fe ff       	call   f0107b45 <kfree>
f0122e75:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e78:	e8 4b 0f fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122e7d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122e83:	74 17                	je     f0122e9c <test_kfree_bestfirstfit+0xcbe>
f0122e85:	83 ec 04             	sub    $0x4,%esp
f0122e88:	68 54 b5 13 f0       	push   $0xf013b554
f0122e8d:	68 07 07 00 00       	push   $0x707
f0122e92:	68 3a b5 13 f0       	push   $0xf013b53a
f0122e97:	e8 69 d3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e9c:	e8 f0 9e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122ea1:	89 c2                	mov    %eax,%edx
f0122ea3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122ea9:	29 c2                	sub    %eax,%edx
f0122eab:	89 d0                	mov    %edx,%eax
f0122ead:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122eb2:	74 17                	je     f0122ecb <test_kfree_bestfirstfit+0xced>
f0122eb4:	83 ec 04             	sub    $0x4,%esp
f0122eb7:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0122ebc:	68 08 07 00 00       	push   $0x708
f0122ec1:	68 3a b5 13 f0       	push   $0xf013b53a
f0122ec6:	e8 3a d3 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ecb:	e8 c1 9e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122ed0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ed6:	e8 ed 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122edb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0122ee1:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122ee7:	83 ec 0c             	sub    $0xc,%esp
f0122eea:	50                   	push   %eax
f0122eeb:	e8 55 4c fe ff       	call   f0107b45 <kfree>
f0122ef0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ef3:	e8 d0 0e fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0122ef8:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122efe:	74 17                	je     f0122f17 <test_kfree_bestfirstfit+0xd39>
f0122f00:	83 ec 04             	sub    $0x4,%esp
f0122f03:	68 54 b5 13 f0       	push   $0xf013b554
f0122f08:	68 0e 07 00 00       	push   $0x70e
f0122f0d:	68 3a b5 13 f0       	push   $0xf013b53a
f0122f12:	e8 ee d2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f17:	e8 75 9e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0122f1c:	89 c2                	mov    %eax,%edx
f0122f1e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122f24:	29 c2                	sub    %eax,%edx
f0122f26:	89 d0                	mov    %edx,%eax
f0122f28:	3d 00 06 00 00       	cmp    $0x600,%eax
f0122f2d:	74 17                	je     f0122f46 <test_kfree_bestfirstfit+0xd68>
f0122f2f:	83 ec 04             	sub    $0x4,%esp
f0122f32:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0122f37:	68 0f 07 00 00       	push   $0x70f
f0122f3c:	68 3a b5 13 f0       	push   $0xf013b53a
f0122f41:	e8 bf d2 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122f46:	83 ec 0c             	sub    $0xc,%esp
f0122f49:	68 fc bc 13 f0       	push   $0xf013bcfc
f0122f4e:	e8 bb dd fd ff       	call   f0100d0e <cprintf>
f0122f53:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122f56:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122f5c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122f5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122f66:	eb 1e                	jmp    f0122f86 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0122f68:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122f6e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122f71:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122f74:	01 c8                	add    %ecx,%eax
f0122f76:	8a 00                	mov    (%eax),%al
f0122f78:	0f be c0             	movsbl %al,%eax
f0122f7b:	01 d0                	add    %edx,%eax
f0122f7d:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122f83:	ff 45 f4             	incl   -0xc(%ebp)
f0122f86:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122f8c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122f8f:	7f d7                	jg     f0122f68 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0122f91:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122f97:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122f9d:	89 c1                	mov    %eax,%ecx
f0122f9f:	01 c9                	add    %ecx,%ecx
f0122fa1:	01 c8                	add    %ecx,%eax
f0122fa3:	39 c2                	cmp    %eax,%edx
f0122fa5:	74 17                	je     f0122fbe <test_kfree_bestfirstfit+0xde0>
f0122fa7:	83 ec 04             	sub    $0x4,%esp
f0122faa:	68 20 bd 13 f0       	push   $0xf013bd20
f0122faf:	68 1c 07 00 00       	push   $0x71c
f0122fb4:	68 3a b5 13 f0       	push   $0xf013b53a
f0122fb9:	e8 47 d2 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0122fbe:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122fc4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122fc7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122fce:	eb 1e                	jmp    f0122fee <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0122fd0:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122fd6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122fd9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122fdc:	01 c8                	add    %ecx,%eax
f0122fde:	8a 00                	mov    (%eax),%al
f0122fe0:	0f be c0             	movsbl %al,%eax
f0122fe3:	01 d0                	add    %edx,%eax
f0122fe5:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122feb:	ff 45 f4             	incl   -0xc(%ebp)
f0122fee:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122ff4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ff7:	7f d7                	jg     f0122fd0 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122ff9:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122fff:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0123005:	c1 e2 02             	shl    $0x2,%edx
f0123008:	39 d0                	cmp    %edx,%eax
f012300a:	74 17                	je     f0123023 <test_kfree_bestfirstfit+0xe45>
f012300c:	83 ec 04             	sub    $0x4,%esp
f012300f:	68 20 bd 13 f0       	push   $0xf013bd20
f0123014:	68 24 07 00 00       	push   $0x724
f0123019:	68 3a b5 13 f0       	push   $0xf013b53a
f012301e:	e8 e2 d1 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0123023:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123029:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012302c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123033:	eb 1e                	jmp    f0123053 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0123035:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f012303b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012303e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123041:	01 c8                	add    %ecx,%eax
f0123043:	8a 00                	mov    (%eax),%al
f0123045:	0f be c0             	movsbl %al,%eax
f0123048:	01 d0                	add    %edx,%eax
f012304a:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0123050:	ff 45 f4             	incl   -0xc(%ebp)
f0123053:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0123059:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012305c:	7f d7                	jg     f0123035 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012305e:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0123064:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012306a:	89 d0                	mov    %edx,%eax
f012306c:	c1 e0 02             	shl    $0x2,%eax
f012306f:	01 d0                	add    %edx,%eax
f0123071:	39 c1                	cmp    %eax,%ecx
f0123073:	74 17                	je     f012308c <test_kfree_bestfirstfit+0xeae>
f0123075:	83 ec 04             	sub    $0x4,%esp
f0123078:	68 20 bd 13 f0       	push   $0xf013bd20
f012307d:	68 2c 07 00 00       	push   $0x72c
f0123082:	68 3a b5 13 f0       	push   $0xf013b53a
f0123087:	e8 79 d1 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012308c:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123092:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0123095:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012309c:	eb 1e                	jmp    f01230bc <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f012309e:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01230a4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01230a7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01230aa:	01 c8                	add    %ecx,%eax
f01230ac:	8a 00                	mov    (%eax),%al
f01230ae:	0f be c0             	movsbl %al,%eax
f01230b1:	01 d0                	add    %edx,%eax
f01230b3:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01230b9:	ff 45 f4             	incl   -0xc(%ebp)
f01230bc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01230c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01230c5:	7f d7                	jg     f012309e <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01230c7:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01230cd:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01230d3:	89 d0                	mov    %edx,%eax
f01230d5:	01 c0                	add    %eax,%eax
f01230d7:	01 d0                	add    %edx,%eax
f01230d9:	01 c0                	add    %eax,%eax
f01230db:	01 d0                	add    %edx,%eax
f01230dd:	39 c1                	cmp    %eax,%ecx
f01230df:	74 17                	je     f01230f8 <test_kfree_bestfirstfit+0xf1a>
f01230e1:	83 ec 04             	sub    $0x4,%esp
f01230e4:	68 20 bd 13 f0       	push   $0xf013bd20
f01230e9:	68 34 07 00 00       	push   $0x734
f01230ee:	68 3a b5 13 f0       	push   $0xf013b53a
f01230f3:	e8 0d d1 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f01230f8:	83 ec 0c             	sub    $0xc,%esp
f01230fb:	68 53 bd 13 f0       	push   $0xf013bd53
f0123100:	e8 09 dc fd ff       	call   f0100d0e <cprintf>
f0123105:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123108:	e8 84 9c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012310d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123110:	e8 b3 0c fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123115:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0123118:	83 ec 0c             	sub    $0xc,%esp
f012311b:	68 00 00 30 00       	push   $0x300000
f0123120:	e8 55 49 fe ff       	call   f0107a7a <kmalloc>
f0123125:	83 c4 10             	add    $0x10,%esp
f0123128:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012312e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123134:	89 c1                	mov    %eax,%ecx
f0123136:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012313d:	10 00 00 
f0123140:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123146:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012314b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0123151:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123157:	ba 00 00 00 00       	mov    $0x0,%edx
f012315c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0123162:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123168:	29 d0                	sub    %edx,%eax
f012316a:	89 c3                	mov    %eax,%ebx
f012316c:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0123173:	10 00 00 
f0123176:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012317b:	0f b6 d0             	movzbl %al,%edx
f012317e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123184:	01 d0                	add    %edx,%eax
f0123186:	48                   	dec    %eax
f0123187:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012318d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123193:	ba 00 00 00 00       	mov    $0x0,%edx
f0123198:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012319e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01231a4:	29 d0                	sub    %edx,%eax
f01231a6:	01 c3                	add    %eax,%ebx
f01231a8:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01231af:	10 00 00 
f01231b2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01231b7:	0f b6 c0             	movzbl %al,%eax
f01231ba:	c1 e0 04             	shl    $0x4,%eax
f01231bd:	89 c2                	mov    %eax,%edx
f01231bf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01231c5:	01 d0                	add    %edx,%eax
f01231c7:	48                   	dec    %eax
f01231c8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01231ce:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01231d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01231d9:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01231df:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01231e5:	29 d0                	sub    %edx,%eax
f01231e7:	01 d8                	add    %ebx,%eax
f01231e9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01231ee:	39 c1                	cmp    %eax,%ecx
f01231f0:	74 17                	je     f0123209 <test_kfree_bestfirstfit+0x102b>
f01231f2:	83 ec 04             	sub    $0x4,%esp
f01231f5:	68 20 b6 13 f0       	push   $0xf013b620
f01231fa:	68 3f 07 00 00       	push   $0x73f
f01231ff:	68 3a b5 13 f0       	push   $0xf013b53a
f0123204:	e8 fc cf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123209:	e8 ba 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012320e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123211:	74 17                	je     f012322a <test_kfree_bestfirstfit+0x104c>
f0123213:	83 ec 04             	sub    $0x4,%esp
f0123216:	68 54 b5 13 f0       	push   $0xf013b554
f012321b:	68 40 07 00 00       	push   $0x740
f0123220:	68 3a b5 13 f0       	push   $0xf013b53a
f0123225:	e8 db cf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012322a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012322d:	e8 5f 9b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123232:	29 c3                	sub    %eax,%ebx
f0123234:	89 d8                	mov    %ebx,%eax
f0123236:	3d 00 03 00 00       	cmp    $0x300,%eax
f012323b:	74 17                	je     f0123254 <test_kfree_bestfirstfit+0x1076>
f012323d:	83 ec 04             	sub    $0x4,%esp
f0123240:	68 bc b5 13 f0       	push   $0xf013b5bc
f0123245:	68 41 07 00 00       	push   $0x741
f012324a:	68 3a b5 13 f0       	push   $0xf013b53a
f012324f:	e8 b1 cf fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0123254:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f012325b:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f012325e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123264:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0123267:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012326e:	eb 0e                	jmp    f012327e <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0123270:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123273:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123276:	01 d0                	add    %edx,%eax
f0123278:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012327b:	ff 45 f4             	incl   -0xc(%ebp)
f012327e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0123284:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123287:	7f e7                	jg     f0123270 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123289:	e8 03 9b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012328e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123291:	e8 32 0b fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123296:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0123299:	83 ec 0c             	sub    $0xc,%esp
f012329c:	68 00 08 00 00       	push   $0x800
f01232a1:	e8 d4 47 fe ff       	call   f0107a7a <kmalloc>
f01232a6:	83 c4 10             	add    $0x10,%esp
f01232a9:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01232af:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01232b5:	89 c1                	mov    %eax,%ecx
f01232b7:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01232be:	10 00 00 
f01232c1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01232c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01232cc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01232d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01232d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01232dd:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01232e3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01232e9:	29 d0                	sub    %edx,%eax
f01232eb:	89 c3                	mov    %eax,%ebx
f01232ed:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01232f4:	10 00 00 
f01232f7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01232fc:	0f b6 d0             	movzbl %al,%edx
f01232ff:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123305:	01 d0                	add    %edx,%eax
f0123307:	48                   	dec    %eax
f0123308:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012330e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123314:	ba 00 00 00 00       	mov    $0x0,%edx
f0123319:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012331f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123325:	29 d0                	sub    %edx,%eax
f0123327:	01 c3                	add    %eax,%ebx
f0123329:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123330:	10 00 00 
f0123333:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123338:	0f b6 c0             	movzbl %al,%eax
f012333b:	c1 e0 04             	shl    $0x4,%eax
f012333e:	89 c2                	mov    %eax,%edx
f0123340:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123346:	01 d0                	add    %edx,%eax
f0123348:	48                   	dec    %eax
f0123349:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012334f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123355:	ba 00 00 00 00       	mov    $0x0,%edx
f012335a:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123360:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123366:	29 d0                	sub    %edx,%eax
f0123368:	01 d8                	add    %ebx,%eax
f012336a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012336f:	39 c1                	cmp    %eax,%ecx
f0123371:	74 17                	je     f012338a <test_kfree_bestfirstfit+0x11ac>
f0123373:	83 ec 04             	sub    $0x4,%esp
f0123376:	68 20 b6 13 f0       	push   $0xf013b620
f012337b:	68 4d 07 00 00       	push   $0x74d
f0123380:	68 3a b5 13 f0       	push   $0xf013b53a
f0123385:	e8 7b ce fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012338a:	e8 39 0a fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012338f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123392:	74 17                	je     f01233ab <test_kfree_bestfirstfit+0x11cd>
f0123394:	83 ec 04             	sub    $0x4,%esp
f0123397:	68 54 b5 13 f0       	push   $0xf013b554
f012339c:	68 4e 07 00 00       	push   $0x74e
f01233a1:	68 3a b5 13 f0       	push   $0xf013b53a
f01233a6:	e8 5a ce fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01233ab:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01233ae:	e8 de 99 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01233b3:	29 c3                	sub    %eax,%ebx
f01233b5:	89 d8                	mov    %ebx,%eax
f01233b7:	83 f8 01             	cmp    $0x1,%eax
f01233ba:	74 17                	je     f01233d3 <test_kfree_bestfirstfit+0x11f5>
f01233bc:	83 ec 04             	sub    $0x4,%esp
f01233bf:	68 bc b5 13 f0       	push   $0xf013b5bc
f01233c4:	68 4f 07 00 00       	push   $0x74f
f01233c9:	68 3a b5 13 f0       	push   $0xf013b53a
f01233ce:	e8 32 ce fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01233d3:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01233da:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01233dd:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01233e3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01233e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01233ed:	eb 0e                	jmp    f01233fd <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f01233ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01233f2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01233f5:	01 d0                	add    %edx,%eax
f01233f7:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01233fa:	ff 45 f4             	incl   -0xc(%ebp)
f01233fd:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0123403:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123406:	7f e7                	jg     f01233ef <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123408:	e8 84 99 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012340d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123410:	e8 b3 09 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123415:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0123418:	83 ec 0c             	sub    $0xc,%esp
f012341b:	68 00 00 10 00       	push   $0x100000
f0123420:	e8 55 46 fe ff       	call   f0107a7a <kmalloc>
f0123425:	83 c4 10             	add    $0x10,%esp
f0123428:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012342e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123434:	89 c1                	mov    %eax,%ecx
f0123436:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012343d:	10 00 00 
f0123440:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123446:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012344b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123451:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123457:	ba 00 00 00 00       	mov    $0x0,%edx
f012345c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123462:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123468:	29 d0                	sub    %edx,%eax
f012346a:	89 c3                	mov    %eax,%ebx
f012346c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123473:	10 00 00 
f0123476:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012347b:	0f b6 d0             	movzbl %al,%edx
f012347e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123484:	01 d0                	add    %edx,%eax
f0123486:	48                   	dec    %eax
f0123487:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012348d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123493:	ba 00 00 00 00       	mov    $0x0,%edx
f0123498:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012349e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01234a4:	29 d0                	sub    %edx,%eax
f01234a6:	01 c3                	add    %eax,%ebx
f01234a8:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01234af:	10 00 00 
f01234b2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01234b7:	0f b6 c0             	movzbl %al,%eax
f01234ba:	c1 e0 04             	shl    $0x4,%eax
f01234bd:	89 c2                	mov    %eax,%edx
f01234bf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01234c5:	01 d0                	add    %edx,%eax
f01234c7:	48                   	dec    %eax
f01234c8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01234ce:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01234d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01234d9:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01234df:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01234e5:	29 d0                	sub    %edx,%eax
f01234e7:	01 d8                	add    %ebx,%eax
f01234e9:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01234ee:	39 c1                	cmp    %eax,%ecx
f01234f0:	74 17                	je     f0123509 <test_kfree_bestfirstfit+0x132b>
f01234f2:	83 ec 04             	sub    $0x4,%esp
f01234f5:	68 20 b6 13 f0       	push   $0xf013b620
f01234fa:	68 5b 07 00 00       	push   $0x75b
f01234ff:	68 3a b5 13 f0       	push   $0xf013b53a
f0123504:	e8 fc cc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123509:	e8 ba 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012350e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123511:	74 17                	je     f012352a <test_kfree_bestfirstfit+0x134c>
f0123513:	83 ec 04             	sub    $0x4,%esp
f0123516:	68 54 b5 13 f0       	push   $0xf013b554
f012351b:	68 5c 07 00 00       	push   $0x75c
f0123520:	68 3a b5 13 f0       	push   $0xf013b53a
f0123525:	e8 db cc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012352a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012352d:	e8 5f 98 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123532:	29 c3                	sub    %eax,%ebx
f0123534:	89 d8                	mov    %ebx,%eax
f0123536:	3d 00 01 00 00       	cmp    $0x100,%eax
f012353b:	74 17                	je     f0123554 <test_kfree_bestfirstfit+0x1376>
f012353d:	83 ec 04             	sub    $0x4,%esp
f0123540:	68 bc b5 13 f0       	push   $0xf013b5bc
f0123545:	68 5d 07 00 00       	push   $0x75d
f012354a:	68 3a b5 13 f0       	push   $0xf013b53a
f012354f:	e8 b1 cc fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0123554:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f012355b:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f012355e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123564:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0123567:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012356e:	eb 0e                	jmp    f012357e <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0123570:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123573:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123576:	01 d0                	add    %edx,%eax
f0123578:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012357b:	ff 45 f4             	incl   -0xc(%ebp)
f012357e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123584:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123587:	7f e7                	jg     f0123570 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0123589:	83 ec 0c             	sub    $0xc,%esp
f012358c:	68 5a bd 13 f0       	push   $0xf013bd5a
f0123591:	e8 78 d7 fd ff       	call   f0100d0e <cprintf>
f0123596:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123599:	e8 f3 97 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012359e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01235a1:	e8 22 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01235a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01235a9:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01235af:	83 ec 0c             	sub    $0xc,%esp
f01235b2:	50                   	push   %eax
f01235b3:	e8 8d 45 fe ff       	call   f0107b45 <kfree>
f01235b8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01235bb:	e8 08 08 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01235c0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01235c3:	74 17                	je     f01235dc <test_kfree_bestfirstfit+0x13fe>
f01235c5:	83 ec 04             	sub    $0x4,%esp
f01235c8:	68 54 b5 13 f0       	push   $0xf013b554
f01235cd:	68 6d 07 00 00       	push   $0x76d
f01235d2:	68 3a b5 13 f0       	push   $0xf013b53a
f01235d7:	e8 29 cc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01235dc:	e8 b0 97 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01235e1:	89 c2                	mov    %eax,%edx
f01235e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01235e6:	29 c2                	sub    %eax,%edx
f01235e8:	89 d0                	mov    %edx,%eax
f01235ea:	83 f8 02             	cmp    $0x2,%eax
f01235ed:	74 17                	je     f0123606 <test_kfree_bestfirstfit+0x1428>
f01235ef:	83 ec 04             	sub    $0x4,%esp
f01235f2:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01235f7:	68 6e 07 00 00       	push   $0x76e
f01235fc:	68 3a b5 13 f0       	push   $0xf013b53a
f0123601:	e8 ff cb fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123606:	e8 86 97 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012360b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012360e:	e8 b5 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123613:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123616:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012361c:	83 ec 0c             	sub    $0xc,%esp
f012361f:	50                   	push   %eax
f0123620:	e8 20 45 fe ff       	call   f0107b45 <kfree>
f0123625:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123628:	e8 9b 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012362d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123630:	74 17                	je     f0123649 <test_kfree_bestfirstfit+0x146b>
f0123632:	83 ec 04             	sub    $0x4,%esp
f0123635:	68 54 b5 13 f0       	push   $0xf013b554
f012363a:	68 74 07 00 00       	push   $0x774
f012363f:	68 3a b5 13 f0       	push   $0xf013b53a
f0123644:	e8 bc cb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123649:	e8 43 97 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012364e:	89 c2                	mov    %eax,%edx
f0123650:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123653:	29 c2                	sub    %eax,%edx
f0123655:	89 d0                	mov    %edx,%eax
f0123657:	3d 00 03 00 00       	cmp    $0x300,%eax
f012365c:	74 17                	je     f0123675 <test_kfree_bestfirstfit+0x1497>
f012365e:	83 ec 04             	sub    $0x4,%esp
f0123661:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123666:	68 75 07 00 00       	push   $0x775
f012366b:	68 3a b5 13 f0       	push   $0xf013b53a
f0123670:	e8 90 cb fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123675:	e8 17 97 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012367a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012367d:	e8 46 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123682:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0123685:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012368b:	83 ec 0c             	sub    $0xc,%esp
f012368e:	50                   	push   %eax
f012368f:	e8 b1 44 fe ff       	call   f0107b45 <kfree>
f0123694:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123697:	e8 2c 07 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012369c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012369f:	74 17                	je     f01236b8 <test_kfree_bestfirstfit+0x14da>
f01236a1:	83 ec 04             	sub    $0x4,%esp
f01236a4:	68 54 b5 13 f0       	push   $0xf013b554
f01236a9:	68 7b 07 00 00       	push   $0x77b
f01236ae:	68 3a b5 13 f0       	push   $0xf013b53a
f01236b3:	e8 4d cb fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01236b8:	e8 d4 96 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01236bd:	89 c2                	mov    %eax,%edx
f01236bf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01236c2:	29 c2                	sub    %eax,%edx
f01236c4:	89 d0                	mov    %edx,%eax
f01236c6:	83 f8 01             	cmp    $0x1,%eax
f01236c9:	74 17                	je     f01236e2 <test_kfree_bestfirstfit+0x1504>
f01236cb:	83 ec 04             	sub    $0x4,%esp
f01236ce:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01236d3:	68 7c 07 00 00       	push   $0x77c
f01236d8:	68 3a b5 13 f0       	push   $0xf013b53a
f01236dd:	e8 23 cb fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01236e2:	e8 aa 96 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01236e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236ea:	e8 d9 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01236ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01236f2:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01236f8:	83 ec 0c             	sub    $0xc,%esp
f01236fb:	50                   	push   %eax
f01236fc:	e8 44 44 fe ff       	call   f0107b45 <kfree>
f0123701:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123704:	e8 bf 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123709:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012370c:	74 17                	je     f0123725 <test_kfree_bestfirstfit+0x1547>
f012370e:	83 ec 04             	sub    $0x4,%esp
f0123711:	68 54 b5 13 f0       	push   $0xf013b554
f0123716:	68 82 07 00 00       	push   $0x782
f012371b:	68 3a b5 13 f0       	push   $0xf013b53a
f0123720:	e8 e0 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123725:	e8 67 96 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012372a:	89 c2                	mov    %eax,%edx
f012372c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012372f:	29 c2                	sub    %eax,%edx
f0123731:	89 d0                	mov    %edx,%eax
f0123733:	83 f8 04             	cmp    $0x4,%eax
f0123736:	74 17                	je     f012374f <test_kfree_bestfirstfit+0x1571>
f0123738:	83 ec 04             	sub    $0x4,%esp
f012373b:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123740:	68 83 07 00 00       	push   $0x783
f0123745:	68 3a b5 13 f0       	push   $0xf013b53a
f012374a:	e8 b6 ca fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012374f:	e8 3d 96 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123754:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123757:	e8 6c 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012375c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012375f:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123765:	83 ec 0c             	sub    $0xc,%esp
f0123768:	50                   	push   %eax
f0123769:	e8 d7 43 fe ff       	call   f0107b45 <kfree>
f012376e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123771:	e8 52 06 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123776:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123779:	74 17                	je     f0123792 <test_kfree_bestfirstfit+0x15b4>
f012377b:	83 ec 04             	sub    $0x4,%esp
f012377e:	68 54 b5 13 f0       	push   $0xf013b554
f0123783:	68 89 07 00 00       	push   $0x789
f0123788:	68 3a b5 13 f0       	push   $0xf013b53a
f012378d:	e8 73 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123792:	e8 fa 95 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123797:	89 c2                	mov    %eax,%edx
f0123799:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012379c:	29 c2                	sub    %eax,%edx
f012379e:	89 d0                	mov    %edx,%eax
f01237a0:	3d 00 03 00 00       	cmp    $0x300,%eax
f01237a5:	74 17                	je     f01237be <test_kfree_bestfirstfit+0x15e0>
f01237a7:	83 ec 04             	sub    $0x4,%esp
f01237aa:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01237af:	68 8a 07 00 00       	push   $0x78a
f01237b4:	68 3a b5 13 f0       	push   $0xf013b53a
f01237b9:	e8 47 ca fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01237be:	e8 ce 95 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01237c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237c6:	e8 fd 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01237ce:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01237d4:	83 ec 0c             	sub    $0xc,%esp
f01237d7:	50                   	push   %eax
f01237d8:	e8 68 43 fe ff       	call   f0107b45 <kfree>
f01237dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237e0:	e8 e3 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01237e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01237e8:	74 17                	je     f0123801 <test_kfree_bestfirstfit+0x1623>
f01237ea:	83 ec 04             	sub    $0x4,%esp
f01237ed:	68 54 b5 13 f0       	push   $0xf013b554
f01237f2:	68 90 07 00 00       	push   $0x790
f01237f7:	68 3a b5 13 f0       	push   $0xf013b53a
f01237fc:	e8 04 ca fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123801:	e8 8b 95 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123806:	89 c2                	mov    %eax,%edx
f0123808:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012380b:	29 c2                	sub    %eax,%edx
f012380d:	89 d0                	mov    %edx,%eax
f012380f:	83 f8 01             	cmp    $0x1,%eax
f0123812:	74 17                	je     f012382b <test_kfree_bestfirstfit+0x164d>
f0123814:	83 ec 04             	sub    $0x4,%esp
f0123817:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012381c:	68 91 07 00 00       	push   $0x791
f0123821:	68 3a b5 13 f0       	push   $0xf013b53a
f0123826:	e8 da c9 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012382b:	e8 61 95 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123830:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123833:	e8 90 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123838:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f012383b:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123841:	83 ec 0c             	sub    $0xc,%esp
f0123844:	50                   	push   %eax
f0123845:	e8 fb 42 fe ff       	call   f0107b45 <kfree>
f012384a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012384d:	e8 76 05 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123852:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123855:	74 17                	je     f012386e <test_kfree_bestfirstfit+0x1690>
f0123857:	83 ec 04             	sub    $0x4,%esp
f012385a:	68 54 b5 13 f0       	push   $0xf013b554
f012385f:	68 97 07 00 00       	push   $0x797
f0123864:	68 3a b5 13 f0       	push   $0xf013b53a
f0123869:	e8 97 c9 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012386e:	e8 1e 95 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123873:	89 c2                	mov    %eax,%edx
f0123875:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123878:	29 c2                	sub    %eax,%edx
f012387a:	89 d0                	mov    %edx,%eax
f012387c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123881:	74 17                	je     f012389a <test_kfree_bestfirstfit+0x16bc>
f0123883:	83 ec 04             	sub    $0x4,%esp
f0123886:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012388b:	68 98 07 00 00       	push   $0x798
f0123890:	68 3a b5 13 f0       	push   $0xf013b53a
f0123895:	e8 6b c9 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f012389a:	e8 f2 94 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012389f:	89 c2                	mov    %eax,%edx
f01238a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01238a4:	39 c2                	cmp    %eax,%edx
f01238a6:	74 17                	je     f01238bf <test_kfree_bestfirstfit+0x16e1>
f01238a8:	83 ec 04             	sub    $0x4,%esp
f01238ab:	68 64 bd 13 f0       	push   $0xf013bd64
f01238b0:	68 9a 07 00 00       	push   $0x79a
f01238b5:	68 3a b5 13 f0       	push   $0xf013b53a
f01238ba:	e8 46 c9 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f01238bf:	83 ec 0c             	sub    $0xc,%esp
f01238c2:	68 98 bd 13 f0       	push   $0xf013bd98
f01238c7:	e8 42 d4 fd ff       	call   f0100d0e <cprintf>
f01238cc:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01238cf:	83 ec 0c             	sub    $0xc,%esp
f01238d2:	6a 03                	push   $0x3
f01238d4:	e8 58 99 fe ff       	call   f010d231 <sys_bypassPageFault>
f01238d9:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01238dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01238e3:	e9 82 00 00 00       	jmp    f012396a <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f01238e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01238eb:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01238f2:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01238f5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01238f8:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01238fb:	e8 1f 99 fe ff       	call   f010d21f <sys_rcr2>
f0123900:	89 c2                	mov    %eax,%edx
f0123902:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123905:	39 c2                	cmp    %eax,%edx
f0123907:	74 17                	je     f0123920 <test_kfree_bestfirstfit+0x1742>
f0123909:	83 ec 04             	sub    $0x4,%esp
f012390c:	68 a0 bd 13 f0       	push   $0xf013bda0
f0123911:	68 a9 07 00 00       	push   $0x7a9
f0123916:	68 3a b5 13 f0       	push   $0xf013b53a
f012391b:	e8 e5 c8 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123920:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123923:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012392a:	89 c2                	mov    %eax,%edx
f012392c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012392f:	01 d0                	add    %edx,%eax
f0123931:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123934:	e8 e6 98 fe ff       	call   f010d21f <sys_rcr2>
f0123939:	89 c2                	mov    %eax,%edx
f012393b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012393e:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123945:	89 c1                	mov    %eax,%ecx
f0123947:	8b 45 80             	mov    -0x80(%ebp),%eax
f012394a:	01 c8                	add    %ecx,%eax
f012394c:	39 c2                	cmp    %eax,%edx
f012394e:	74 17                	je     f0123967 <test_kfree_bestfirstfit+0x1789>
f0123950:	83 ec 04             	sub    $0x4,%esp
f0123953:	68 a0 bd 13 f0       	push   $0xf013bda0
f0123958:	68 ab 07 00 00       	push   $0x7ab
f012395d:	68 3a b5 13 f0       	push   $0xf013b53a
f0123962:	e8 9e c8 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123967:	ff 45 f4             	incl   -0xc(%ebp)
f012396a:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012396e:	0f 8e 74 ff ff ff    	jle    f01238e8 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123974:	83 ec 0c             	sub    $0xc,%esp
f0123977:	6a 00                	push   $0x0
f0123979:	e8 b3 98 fe ff       	call   f010d231 <sys_bypassPageFault>
f012397e:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123981:	83 ec 0c             	sub    $0xc,%esp
f0123984:	68 e5 bd 13 f0       	push   $0xf013bde5
f0123989:	e8 80 d3 fd ff       	call   f0100d0e <cprintf>
f012398e:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123991:	e8 fb 93 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123996:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123999:	e8 2a 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f012399e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01239a1:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01239a7:	83 ec 0c             	sub    $0xc,%esp
f01239aa:	50                   	push   %eax
f01239ab:	e8 95 41 fe ff       	call   f0107b45 <kfree>
f01239b0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01239b3:	e8 10 04 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f01239b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01239bb:	74 17                	je     f01239d4 <test_kfree_bestfirstfit+0x17f6>
f01239bd:	83 ec 04             	sub    $0x4,%esp
f01239c0:	68 54 b5 13 f0       	push   $0xf013b554
f01239c5:	68 b9 07 00 00       	push   $0x7b9
f01239ca:	68 3a b5 13 f0       	push   $0xf013b53a
f01239cf:	e8 31 c8 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01239d4:	e8 b8 93 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01239d9:	89 c2                	mov    %eax,%edx
f01239db:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01239de:	39 c2                	cmp    %eax,%edx
f01239e0:	74 17                	je     f01239f9 <test_kfree_bestfirstfit+0x181b>
f01239e2:	83 ec 04             	sub    $0x4,%esp
f01239e5:	68 ec bd 13 f0       	push   $0xf013bdec
f01239ea:	68 ba 07 00 00       	push   $0x7ba
f01239ef:	68 3a b5 13 f0       	push   $0xf013b53a
f01239f4:	e8 0c c8 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01239f9:	e8 93 93 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01239fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a01:	e8 c2 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a06:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123a09:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123a0f:	83 ec 0c             	sub    $0xc,%esp
f0123a12:	50                   	push   %eax
f0123a13:	e8 2d 41 fe ff       	call   f0107b45 <kfree>
f0123a18:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a1b:	e8 a8 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a20:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123a23:	74 17                	je     f0123a3c <test_kfree_bestfirstfit+0x185e>
f0123a25:	83 ec 04             	sub    $0x4,%esp
f0123a28:	68 54 b5 13 f0       	push   $0xf013b554
f0123a2d:	68 c0 07 00 00       	push   $0x7c0
f0123a32:	68 3a b5 13 f0       	push   $0xf013b53a
f0123a37:	e8 c9 c7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123a3c:	e8 50 93 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123a41:	89 c2                	mov    %eax,%edx
f0123a43:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123a46:	39 c2                	cmp    %eax,%edx
f0123a48:	74 17                	je     f0123a61 <test_kfree_bestfirstfit+0x1883>
f0123a4a:	83 ec 04             	sub    $0x4,%esp
f0123a4d:	68 ec bd 13 f0       	push   $0xf013bdec
f0123a52:	68 c1 07 00 00       	push   $0x7c1
f0123a57:	68 3a b5 13 f0       	push   $0xf013b53a
f0123a5c:	e8 a4 c7 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123a61:	e8 2b 93 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123a66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a69:	e8 5a 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a6e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123a71:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123a77:	83 ec 0c             	sub    $0xc,%esp
f0123a7a:	50                   	push   %eax
f0123a7b:	e8 c5 40 fe ff       	call   f0107b45 <kfree>
f0123a80:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a83:	e8 40 03 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123a88:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123a8b:	74 17                	je     f0123aa4 <test_kfree_bestfirstfit+0x18c6>
f0123a8d:	83 ec 04             	sub    $0x4,%esp
f0123a90:	68 54 b5 13 f0       	push   $0xf013b554
f0123a95:	68 c7 07 00 00       	push   $0x7c7
f0123a9a:	68 3a b5 13 f0       	push   $0xf013b53a
f0123a9f:	e8 61 c7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123aa4:	e8 e8 92 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123aa9:	89 c2                	mov    %eax,%edx
f0123aab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123aae:	39 c2                	cmp    %eax,%edx
f0123ab0:	74 17                	je     f0123ac9 <test_kfree_bestfirstfit+0x18eb>
f0123ab2:	83 ec 04             	sub    $0x4,%esp
f0123ab5:	68 ec bd 13 f0       	push   $0xf013bdec
f0123aba:	68 c8 07 00 00       	push   $0x7c8
f0123abf:	68 3a b5 13 f0       	push   $0xf013b53a
f0123ac4:	e8 3c c7 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123ac9:	e8 c3 92 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123ace:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ad1:	e8 f2 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ad6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123ad9:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123adf:	83 ec 0c             	sub    $0xc,%esp
f0123ae2:	50                   	push   %eax
f0123ae3:	e8 5d 40 fe ff       	call   f0107b45 <kfree>
f0123ae8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123aeb:	e8 d8 02 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123af0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123af3:	74 17                	je     f0123b0c <test_kfree_bestfirstfit+0x192e>
f0123af5:	83 ec 04             	sub    $0x4,%esp
f0123af8:	68 54 b5 13 f0       	push   $0xf013b554
f0123afd:	68 ce 07 00 00       	push   $0x7ce
f0123b02:	68 3a b5 13 f0       	push   $0xf013b53a
f0123b07:	e8 f9 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123b0c:	e8 80 92 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123b11:	89 c2                	mov    %eax,%edx
f0123b13:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b16:	39 c2                	cmp    %eax,%edx
f0123b18:	74 17                	je     f0123b31 <test_kfree_bestfirstfit+0x1953>
f0123b1a:	83 ec 04             	sub    $0x4,%esp
f0123b1d:	68 ec bd 13 f0       	push   $0xf013bdec
f0123b22:	68 cf 07 00 00       	push   $0x7cf
f0123b27:	68 3a b5 13 f0       	push   $0xf013b53a
f0123b2c:	e8 d4 c6 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f0123b31:	83 ec 0c             	sub    $0xc,%esp
f0123b34:	68 33 be 13 f0       	push   $0xf013be33
f0123b39:	e8 d0 d1 fd ff       	call   f0100d0e <cprintf>
f0123b3e:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123b41:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0123b48:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0123b4f:	eb 48                	jmp    f0123b99 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123b51:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123b54:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0123b59:	83 ec 04             	sub    $0x4,%esp
f0123b5c:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0123b62:	51                   	push   %ecx
f0123b63:	52                   	push   %edx
f0123b64:	50                   	push   %eax
f0123b65:	e8 47 2f fe ff       	call   f0106ab1 <get_page_table>
f0123b6a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123b6d:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123b73:	85 c0                	test   %eax,%eax
f0123b75:	75 17                	jne    f0123b8e <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0123b77:	83 ec 04             	sub    $0x4,%esp
f0123b7a:	68 3c be 13 f0       	push   $0xf013be3c
f0123b7f:	68 dd 07 00 00       	push   $0x7dd
f0123b84:	68 3a b5 13 f0       	push   $0xf013b53a
f0123b89:	e8 77 c6 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123b8e:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0123b95:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0123b99:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123b9d:	78 b2                	js     f0123b51 <test_kfree_bestfirstfit+0x1973>
f0123b9f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123ba3:	7f 09                	jg     f0123bae <test_kfree_bestfirstfit+0x19d0>
f0123ba5:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0123bac:	76 a3                	jbe    f0123b51 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0123bae:	83 ec 0c             	sub    $0xc,%esp
f0123bb1:	68 1e b7 13 f0       	push   $0xf013b71e
f0123bb6:	e8 53 d1 fd ff       	call   f0100d0e <cprintf>
f0123bbb:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0123bbe:	83 ec 0c             	sub    $0xc,%esp
f0123bc1:	68 a4 be 13 f0       	push   $0xf013bea4
f0123bc6:	e8 43 d1 fd ff       	call   f0100d0e <cprintf>
f0123bcb:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123bce:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123bd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123bd6:	5b                   	pop    %ebx
f0123bd7:	5f                   	pop    %edi
f0123bd8:	5d                   	pop    %ebp
f0123bd9:	c3                   	ret    

f0123bda <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0123bda:	55                   	push   %ebp
f0123bdb:	89 e5                	mov    %esp,%ebp
f0123bdd:	57                   	push   %edi
f0123bde:	56                   	push   %esi
f0123bdf:	53                   	push   %ebx
f0123be0:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0123be6:	83 ec 0c             	sub    $0xc,%esp
f0123be9:	68 7c b4 13 f0       	push   $0xf013b47c
f0123bee:	e8 1b d1 fd ff       	call   f0100d0e <cprintf>
f0123bf3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123bf6:	83 ec 0c             	sub    $0xc,%esp
f0123bf9:	68 ac b4 13 f0       	push   $0xf013b4ac
f0123bfe:	e8 0b d1 fd ff       	call   f0100d0e <cprintf>
f0123c03:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123c06:	83 ec 0c             	sub    $0xc,%esp
f0123c09:	68 7c b4 13 f0       	push   $0xf013b47c
f0123c0e:	e8 fb d0 fd ff       	call   f0100d0e <cprintf>
f0123c13:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123c16:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0123c1a:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123c1e:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123c24:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0123c2a:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123c31:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123c38:	e8 54 91 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123c3d:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123c40:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0123c46:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123c4b:	b8 00 00 00 00       	mov    $0x0,%eax
f0123c50:	89 d7                	mov    %edx,%edi
f0123c52:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123c54:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0123c5a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123c5f:	b8 00 00 00 00       	mov    $0x0,%eax
f0123c64:	89 d7                	mov    %edx,%edi
f0123c66:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123c68:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0123c6e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123c73:	b8 00 00 00 00       	mov    $0x0,%eax
f0123c78:	89 d7                	mov    %edx,%edi
f0123c7a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123c7c:	e8 10 91 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123c81:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c84:	e8 3f 01 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123c89:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123c8c:	83 ec 0c             	sub    $0xc,%esp
f0123c8f:	68 00 fc 1f 00       	push   $0x1ffc00
f0123c94:	e8 e1 3d fe ff       	call   f0107a7a <kmalloc>
f0123c99:	83 c4 10             	add    $0x10,%esp
f0123c9c:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ca2:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123ca8:	89 c1                	mov    %eax,%ecx
f0123caa:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0123cb1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123cb4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123cb9:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0123cbc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123cbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cc4:	f7 75 a0             	divl   -0x60(%ebp)
f0123cc7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123cca:	29 d0                	sub    %edx,%eax
f0123ccc:	89 c3                	mov    %eax,%ebx
f0123cce:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123cd5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123cda:	0f b6 d0             	movzbl %al,%edx
f0123cdd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123ce0:	01 d0                	add    %edx,%eax
f0123ce2:	48                   	dec    %eax
f0123ce3:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123ce6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123ce9:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cee:	f7 75 98             	divl   -0x68(%ebp)
f0123cf1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123cf4:	29 d0                	sub    %edx,%eax
f0123cf6:	01 c3                	add    %eax,%ebx
f0123cf8:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0123cff:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123d04:	0f b6 c0             	movzbl %al,%eax
f0123d07:	c1 e0 04             	shl    $0x4,%eax
f0123d0a:	89 c2                	mov    %eax,%edx
f0123d0c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123d0f:	01 d0                	add    %edx,%eax
f0123d11:	48                   	dec    %eax
f0123d12:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123d15:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123d18:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d1d:	f7 75 90             	divl   -0x70(%ebp)
f0123d20:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123d23:	29 d0                	sub    %edx,%eax
f0123d25:	01 d8                	add    %ebx,%eax
f0123d27:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123d2c:	39 c1                	cmp    %eax,%ecx
f0123d2e:	74 17                	je     f0123d47 <test_kheap_phys_addr+0x16d>
f0123d30:	83 ec 04             	sub    $0x4,%esp
f0123d33:	68 20 b6 13 f0       	push   $0xf013b620
f0123d38:	68 0a 08 00 00       	push   $0x80a
f0123d3d:	68 3a b5 13 f0       	push   $0xf013b53a
f0123d42:	e8 be c4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d47:	e8 7c 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123d4c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123d4f:	74 17                	je     f0123d68 <test_kheap_phys_addr+0x18e>
f0123d51:	83 ec 04             	sub    $0x4,%esp
f0123d54:	68 54 b5 13 f0       	push   $0xf013b554
f0123d59:	68 0b 08 00 00       	push   $0x80b
f0123d5e:	68 3a b5 13 f0       	push   $0xf013b53a
f0123d63:	e8 9d c4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123d68:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123d6b:	e8 21 90 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123d70:	29 c3                	sub    %eax,%ebx
f0123d72:	89 d8                	mov    %ebx,%eax
f0123d74:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123d79:	74 17                	je     f0123d92 <test_kheap_phys_addr+0x1b8>
f0123d7b:	83 ec 04             	sub    $0x4,%esp
f0123d7e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0123d83:	68 0c 08 00 00       	push   $0x80c
f0123d88:	68 3a b5 13 f0       	push   $0xf013b53a
f0123d8d:	e8 73 c4 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123d92:	e8 fa 8f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123d97:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d9a:	e8 29 00 fe ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123d9f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123da2:	83 ec 0c             	sub    $0xc,%esp
f0123da5:	68 00 fc 1f 00       	push   $0x1ffc00
f0123daa:	e8 cb 3c fe ff       	call   f0107a7a <kmalloc>
f0123daf:	83 c4 10             	add    $0x10,%esp
f0123db2:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123db8:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123dbe:	89 c1                	mov    %eax,%ecx
f0123dc0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123dc7:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123dca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123dcf:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123dd2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123dd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123dda:	f7 75 88             	divl   -0x78(%ebp)
f0123ddd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123de0:	29 d0                	sub    %edx,%eax
f0123de2:	89 c3                	mov    %eax,%ebx
f0123de4:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0123deb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123df0:	0f b6 d0             	movzbl %al,%edx
f0123df3:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123df6:	01 d0                	add    %edx,%eax
f0123df8:	48                   	dec    %eax
f0123df9:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0123dff:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123e05:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e0a:	f7 75 80             	divl   -0x80(%ebp)
f0123e0d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123e13:	29 d0                	sub    %edx,%eax
f0123e15:	01 c3                	add    %eax,%ebx
f0123e17:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0123e1e:	10 00 00 
f0123e21:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123e26:	0f b6 c0             	movzbl %al,%eax
f0123e29:	c1 e0 04             	shl    $0x4,%eax
f0123e2c:	89 c2                	mov    %eax,%edx
f0123e2e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123e34:	01 d0                	add    %edx,%eax
f0123e36:	48                   	dec    %eax
f0123e37:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0123e3d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123e43:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e48:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0123e4e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123e54:	29 d0                	sub    %edx,%eax
f0123e56:	01 d8                	add    %ebx,%eax
f0123e58:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123e5d:	39 c1                	cmp    %eax,%ecx
f0123e5f:	74 17                	je     f0123e78 <test_kheap_phys_addr+0x29e>
f0123e61:	83 ec 04             	sub    $0x4,%esp
f0123e64:	68 20 b6 13 f0       	push   $0xf013b620
f0123e69:	68 12 08 00 00       	push   $0x812
f0123e6e:	68 3a b5 13 f0       	push   $0xf013b53a
f0123e73:	e8 8d c3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e78:	e8 4b ff fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123e7d:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123e80:	74 17                	je     f0123e99 <test_kheap_phys_addr+0x2bf>
f0123e82:	83 ec 04             	sub    $0x4,%esp
f0123e85:	68 54 b5 13 f0       	push   $0xf013b554
f0123e8a:	68 13 08 00 00       	push   $0x813
f0123e8f:	68 3a b5 13 f0       	push   $0xf013b53a
f0123e94:	e8 6c c3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e99:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123e9c:	e8 f0 8e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123ea1:	29 c3                	sub    %eax,%ebx
f0123ea3:	89 d8                	mov    %ebx,%eax
f0123ea5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123eaa:	74 17                	je     f0123ec3 <test_kheap_phys_addr+0x2e9>
f0123eac:	83 ec 04             	sub    $0x4,%esp
f0123eaf:	68 bc b5 13 f0       	push   $0xf013b5bc
f0123eb4:	68 14 08 00 00       	push   $0x814
f0123eb9:	68 3a b5 13 f0       	push   $0xf013b53a
f0123ebe:	e8 42 c3 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123ec3:	e8 c9 8e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123ec8:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ecb:	e8 f8 fe fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123ed0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123ed3:	83 ec 0c             	sub    $0xc,%esp
f0123ed6:	68 00 08 00 00       	push   $0x800
f0123edb:	e8 9a 3b fe ff       	call   f0107a7a <kmalloc>
f0123ee0:	83 c4 10             	add    $0x10,%esp
f0123ee3:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ee9:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0123eef:	89 c1                	mov    %eax,%ecx
f0123ef1:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0123ef8:	10 00 00 
f0123efb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123f01:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123f06:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0123f0c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123f12:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f17:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0123f1d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123f23:	29 d0                	sub    %edx,%eax
f0123f25:	89 c3                	mov    %eax,%ebx
f0123f27:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123f2e:	10 00 00 
f0123f31:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123f36:	0f b6 d0             	movzbl %al,%edx
f0123f39:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123f3f:	01 d0                	add    %edx,%eax
f0123f41:	48                   	dec    %eax
f0123f42:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123f48:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123f4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f53:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123f59:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123f5f:	29 d0                	sub    %edx,%eax
f0123f61:	01 c3                	add    %eax,%ebx
f0123f63:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123f6a:	10 00 00 
f0123f6d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0123f72:	0f b6 c0             	movzbl %al,%eax
f0123f75:	c1 e0 04             	shl    $0x4,%eax
f0123f78:	89 c2                	mov    %eax,%edx
f0123f7a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0123f80:	01 d0                	add    %edx,%eax
f0123f82:	48                   	dec    %eax
f0123f83:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123f89:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123f8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f94:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123f9a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123fa0:	29 d0                	sub    %edx,%eax
f0123fa2:	01 d8                	add    %ebx,%eax
f0123fa4:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123fa9:	39 c1                	cmp    %eax,%ecx
f0123fab:	74 17                	je     f0123fc4 <test_kheap_phys_addr+0x3ea>
f0123fad:	83 ec 04             	sub    $0x4,%esp
f0123fb0:	68 20 b6 13 f0       	push   $0xf013b620
f0123fb5:	68 1a 08 00 00       	push   $0x81a
f0123fba:	68 3a b5 13 f0       	push   $0xf013b53a
f0123fbf:	e8 41 c2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123fc4:	e8 ff fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0123fc9:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123fcc:	74 17                	je     f0123fe5 <test_kheap_phys_addr+0x40b>
f0123fce:	83 ec 04             	sub    $0x4,%esp
f0123fd1:	68 54 b5 13 f0       	push   $0xf013b554
f0123fd6:	68 1b 08 00 00       	push   $0x81b
f0123fdb:	68 3a b5 13 f0       	push   $0xf013b53a
f0123fe0:	e8 20 c2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123fe5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123fe8:	e8 a4 8d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0123fed:	29 c3                	sub    %eax,%ebx
f0123fef:	89 d8                	mov    %ebx,%eax
f0123ff1:	83 f8 01             	cmp    $0x1,%eax
f0123ff4:	74 17                	je     f012400d <test_kheap_phys_addr+0x433>
f0123ff6:	83 ec 04             	sub    $0x4,%esp
f0123ff9:	68 bc b5 13 f0       	push   $0xf013b5bc
f0123ffe:	68 1c 08 00 00       	push   $0x81c
f0124003:	68 3a b5 13 f0       	push   $0xf013b53a
f0124008:	e8 f8 c1 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012400d:	e8 7f 8d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124012:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124015:	e8 ae fd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012401a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012401d:	83 ec 0c             	sub    $0xc,%esp
f0124020:	68 00 08 00 00       	push   $0x800
f0124025:	e8 50 3a fe ff       	call   f0107a7a <kmalloc>
f012402a:	83 c4 10             	add    $0x10,%esp
f012402d:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124033:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124039:	89 c1                	mov    %eax,%ecx
f012403b:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0124042:	10 00 00 
f0124045:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012404b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124050:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0124056:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012405c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124061:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0124067:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012406d:	29 d0                	sub    %edx,%eax
f012406f:	89 c3                	mov    %eax,%ebx
f0124071:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0124078:	10 00 00 
f012407b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124080:	0f b6 d0             	movzbl %al,%edx
f0124083:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124089:	01 d0                	add    %edx,%eax
f012408b:	48                   	dec    %eax
f012408c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0124092:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124098:	ba 00 00 00 00       	mov    $0x0,%edx
f012409d:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01240a3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01240a9:	29 d0                	sub    %edx,%eax
f01240ab:	01 c3                	add    %eax,%ebx
f01240ad:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01240b4:	10 00 00 
f01240b7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01240bc:	0f b6 c0             	movzbl %al,%eax
f01240bf:	c1 e0 04             	shl    $0x4,%eax
f01240c2:	89 c2                	mov    %eax,%edx
f01240c4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01240ca:	01 d0                	add    %edx,%eax
f01240cc:	48                   	dec    %eax
f01240cd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01240d3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01240d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01240de:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01240e4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01240ea:	29 d0                	sub    %edx,%eax
f01240ec:	01 d8                	add    %ebx,%eax
f01240ee:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01240f3:	39 c1                	cmp    %eax,%ecx
f01240f5:	74 17                	je     f012410e <test_kheap_phys_addr+0x534>
f01240f7:	83 ec 04             	sub    $0x4,%esp
f01240fa:	68 20 b6 13 f0       	push   $0xf013b620
f01240ff:	68 22 08 00 00       	push   $0x822
f0124104:	68 3a b5 13 f0       	push   $0xf013b53a
f0124109:	e8 f7 c0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012410e:	e8 b5 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124113:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124116:	74 17                	je     f012412f <test_kheap_phys_addr+0x555>
f0124118:	83 ec 04             	sub    $0x4,%esp
f012411b:	68 54 b5 13 f0       	push   $0xf013b554
f0124120:	68 23 08 00 00       	push   $0x823
f0124125:	68 3a b5 13 f0       	push   $0xf013b53a
f012412a:	e8 d6 c0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012412f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124132:	e8 5a 8c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124137:	29 c3                	sub    %eax,%ebx
f0124139:	89 d8                	mov    %ebx,%eax
f012413b:	83 f8 01             	cmp    $0x1,%eax
f012413e:	74 17                	je     f0124157 <test_kheap_phys_addr+0x57d>
f0124140:	83 ec 04             	sub    $0x4,%esp
f0124143:	68 bc b5 13 f0       	push   $0xf013b5bc
f0124148:	68 24 08 00 00       	push   $0x824
f012414d:	68 3a b5 13 f0       	push   $0xf013b53a
f0124152:	e8 ae c0 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124157:	e8 35 8c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012415c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012415f:	e8 64 fc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124164:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124167:	83 ec 0c             	sub    $0xc,%esp
f012416a:	68 00 1c 00 00       	push   $0x1c00
f012416f:	e8 06 39 fe ff       	call   f0107a7a <kmalloc>
f0124174:	83 c4 10             	add    $0x10,%esp
f0124177:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012417d:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0124183:	89 c1                	mov    %eax,%ecx
f0124185:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012418c:	10 00 00 
f012418f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124195:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012419a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01241a0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01241a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01241ab:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01241b1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01241b7:	29 d0                	sub    %edx,%eax
f01241b9:	89 c3                	mov    %eax,%ebx
f01241bb:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01241c2:	10 00 00 
f01241c5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01241ca:	0f b6 d0             	movzbl %al,%edx
f01241cd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01241d3:	01 d0                	add    %edx,%eax
f01241d5:	48                   	dec    %eax
f01241d6:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01241dc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01241e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01241e7:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01241ed:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01241f3:	29 d0                	sub    %edx,%eax
f01241f5:	01 c3                	add    %eax,%ebx
f01241f7:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01241fe:	10 00 00 
f0124201:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124206:	0f b6 c0             	movzbl %al,%eax
f0124209:	c1 e0 04             	shl    $0x4,%eax
f012420c:	89 c2                	mov    %eax,%edx
f012420e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124214:	01 d0                	add    %edx,%eax
f0124216:	48                   	dec    %eax
f0124217:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012421d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124223:	ba 00 00 00 00       	mov    $0x0,%edx
f0124228:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012422e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124234:	29 d0                	sub    %edx,%eax
f0124236:	01 d8                	add    %ebx,%eax
f0124238:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012423d:	39 c1                	cmp    %eax,%ecx
f012423f:	74 17                	je     f0124258 <test_kheap_phys_addr+0x67e>
f0124241:	83 ec 04             	sub    $0x4,%esp
f0124244:	68 20 b6 13 f0       	push   $0xf013b620
f0124249:	68 2a 08 00 00       	push   $0x82a
f012424e:	68 3a b5 13 f0       	push   $0xf013b53a
f0124253:	e8 ad bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124258:	e8 6b fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012425d:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124260:	74 17                	je     f0124279 <test_kheap_phys_addr+0x69f>
f0124262:	83 ec 04             	sub    $0x4,%esp
f0124265:	68 54 b5 13 f0       	push   $0xf013b554
f012426a:	68 2b 08 00 00       	push   $0x82b
f012426f:	68 3a b5 13 f0       	push   $0xf013b53a
f0124274:	e8 8c bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124279:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012427c:	e8 10 8b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124281:	29 c3                	sub    %eax,%ebx
f0124283:	89 d8                	mov    %ebx,%eax
f0124285:	83 f8 02             	cmp    $0x2,%eax
f0124288:	74 17                	je     f01242a1 <test_kheap_phys_addr+0x6c7>
f012428a:	83 ec 04             	sub    $0x4,%esp
f012428d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0124292:	68 2c 08 00 00       	push   $0x82c
f0124297:	68 3a b5 13 f0       	push   $0xf013b53a
f012429c:	e8 64 bf fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01242a1:	e8 eb 8a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01242a6:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242a9:	e8 1a fb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01242ae:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01242b1:	83 ec 0c             	sub    $0xc,%esp
f01242b4:	68 00 fc 2f 00       	push   $0x2ffc00
f01242b9:	e8 bc 37 fe ff       	call   f0107a7a <kmalloc>
f01242be:	83 c4 10             	add    $0x10,%esp
f01242c1:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01242c7:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01242cd:	89 c1                	mov    %eax,%ecx
f01242cf:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01242d6:	10 00 00 
f01242d9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01242df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01242e4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01242ea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01242f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01242f5:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01242fb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124301:	29 d0                	sub    %edx,%eax
f0124303:	89 c3                	mov    %eax,%ebx
f0124305:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012430c:	10 00 00 
f012430f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124314:	0f b6 d0             	movzbl %al,%edx
f0124317:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012431d:	01 d0                	add    %edx,%eax
f012431f:	48                   	dec    %eax
f0124320:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0124326:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012432c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124331:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0124337:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012433d:	29 d0                	sub    %edx,%eax
f012433f:	01 c3                	add    %eax,%ebx
f0124341:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0124348:	10 00 00 
f012434b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124350:	0f b6 c0             	movzbl %al,%eax
f0124353:	c1 e0 04             	shl    $0x4,%eax
f0124356:	89 c2                	mov    %eax,%edx
f0124358:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012435e:	01 d0                	add    %edx,%eax
f0124360:	48                   	dec    %eax
f0124361:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0124367:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012436d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124372:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0124378:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012437e:	29 d0                	sub    %edx,%eax
f0124380:	01 d8                	add    %ebx,%eax
f0124382:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124387:	39 c1                	cmp    %eax,%ecx
f0124389:	74 17                	je     f01243a2 <test_kheap_phys_addr+0x7c8>
f012438b:	83 ec 04             	sub    $0x4,%esp
f012438e:	68 20 b6 13 f0       	push   $0xf013b620
f0124393:	68 32 08 00 00       	push   $0x832
f0124398:	68 3a b5 13 f0       	push   $0xf013b53a
f012439d:	e8 63 be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243a2:	e8 21 fa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01243a7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01243aa:	74 17                	je     f01243c3 <test_kheap_phys_addr+0x7e9>
f01243ac:	83 ec 04             	sub    $0x4,%esp
f01243af:	68 54 b5 13 f0       	push   $0xf013b554
f01243b4:	68 33 08 00 00       	push   $0x833
f01243b9:	68 3a b5 13 f0       	push   $0xf013b53a
f01243be:	e8 42 be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01243c3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01243c6:	e8 c6 89 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01243cb:	29 c3                	sub    %eax,%ebx
f01243cd:	89 d8                	mov    %ebx,%eax
f01243cf:	3d 00 03 00 00       	cmp    $0x300,%eax
f01243d4:	74 17                	je     f01243ed <test_kheap_phys_addr+0x813>
f01243d6:	83 ec 04             	sub    $0x4,%esp
f01243d9:	68 bc b5 13 f0       	push   $0xf013b5bc
f01243de:	68 34 08 00 00       	push   $0x834
f01243e3:	68 3a b5 13 f0       	push   $0xf013b53a
f01243e8:	e8 18 be fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01243ed:	e8 9f 89 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01243f2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01243f5:	e8 ce f9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01243fa:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01243fd:	83 ec 0c             	sub    $0xc,%esp
f0124400:	68 00 fc 5f 00       	push   $0x5ffc00
f0124405:	e8 70 36 fe ff       	call   f0107a7a <kmalloc>
f012440a:	83 c4 10             	add    $0x10,%esp
f012440d:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124413:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124419:	89 c1                	mov    %eax,%ecx
f012441b:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0124422:	10 00 00 
f0124425:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012442b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124430:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0124436:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012443c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124441:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0124447:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012444d:	29 d0                	sub    %edx,%eax
f012444f:	89 c3                	mov    %eax,%ebx
f0124451:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124458:	10 00 00 
f012445b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124460:	0f b6 d0             	movzbl %al,%edx
f0124463:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124469:	01 d0                	add    %edx,%eax
f012446b:	48                   	dec    %eax
f012446c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0124472:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124478:	ba 00 00 00 00       	mov    $0x0,%edx
f012447d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0124483:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124489:	29 d0                	sub    %edx,%eax
f012448b:	01 c3                	add    %eax,%ebx
f012448d:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0124494:	10 00 00 
f0124497:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012449c:	0f b6 c0             	movzbl %al,%eax
f012449f:	c1 e0 04             	shl    $0x4,%eax
f01244a2:	89 c2                	mov    %eax,%edx
f01244a4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01244aa:	01 d0                	add    %edx,%eax
f01244ac:	48                   	dec    %eax
f01244ad:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01244b3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01244b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01244be:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01244c4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01244ca:	29 d0                	sub    %edx,%eax
f01244cc:	01 d8                	add    %ebx,%eax
f01244ce:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01244d3:	39 c1                	cmp    %eax,%ecx
f01244d5:	74 17                	je     f01244ee <test_kheap_phys_addr+0x914>
f01244d7:	83 ec 04             	sub    $0x4,%esp
f01244da:	68 20 b6 13 f0       	push   $0xf013b620
f01244df:	68 3a 08 00 00       	push   $0x83a
f01244e4:	68 3a b5 13 f0       	push   $0xf013b53a
f01244e9:	e8 17 bd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01244ee:	e8 d5 f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01244f3:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01244f6:	74 17                	je     f012450f <test_kheap_phys_addr+0x935>
f01244f8:	83 ec 04             	sub    $0x4,%esp
f01244fb:	68 54 b5 13 f0       	push   $0xf013b554
f0124500:	68 3b 08 00 00       	push   $0x83b
f0124505:	68 3a b5 13 f0       	push   $0xf013b53a
f012450a:	e8 f6 bc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012450f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124512:	e8 7a 88 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124517:	29 c3                	sub    %eax,%ebx
f0124519:	89 d8                	mov    %ebx,%eax
f012451b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124520:	74 17                	je     f0124539 <test_kheap_phys_addr+0x95f>
f0124522:	83 ec 04             	sub    $0x4,%esp
f0124525:	68 bc b5 13 f0       	push   $0xf013b5bc
f012452a:	68 3c 08 00 00       	push   $0x83c
f012452f:	68 3a b5 13 f0       	push   $0xf013b53a
f0124534:	e8 cc bc fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124539:	e8 53 88 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012453e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124541:	e8 82 f8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124546:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124549:	83 ec 0c             	sub    $0xc,%esp
f012454c:	68 00 38 00 00       	push   $0x3800
f0124551:	e8 24 35 fe ff       	call   f0107a7a <kmalloc>
f0124556:	83 c4 10             	add    $0x10,%esp
f0124559:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012455f:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124565:	89 c1                	mov    %eax,%ecx
f0124567:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012456e:	10 00 00 
f0124571:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124577:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012457c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0124582:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124588:	ba 00 00 00 00       	mov    $0x0,%edx
f012458d:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0124593:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124599:	29 d0                	sub    %edx,%eax
f012459b:	89 c3                	mov    %eax,%ebx
f012459d:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01245a4:	10 00 00 
f01245a7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01245ac:	0f b6 d0             	movzbl %al,%edx
f01245af:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01245b5:	01 d0                	add    %edx,%eax
f01245b7:	48                   	dec    %eax
f01245b8:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01245be:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01245c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01245c9:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01245cf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01245d5:	29 d0                	sub    %edx,%eax
f01245d7:	01 c3                	add    %eax,%ebx
f01245d9:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01245e0:	10 00 00 
f01245e3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01245e8:	0f b6 c0             	movzbl %al,%eax
f01245eb:	c1 e0 04             	shl    $0x4,%eax
f01245ee:	89 c2                	mov    %eax,%edx
f01245f0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01245f6:	01 d0                	add    %edx,%eax
f01245f8:	48                   	dec    %eax
f01245f9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01245ff:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124605:	ba 00 00 00 00       	mov    $0x0,%edx
f012460a:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124610:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124616:	29 d0                	sub    %edx,%eax
f0124618:	01 d8                	add    %ebx,%eax
f012461a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012461f:	39 c1                	cmp    %eax,%ecx
f0124621:	74 17                	je     f012463a <test_kheap_phys_addr+0xa60>
f0124623:	83 ec 04             	sub    $0x4,%esp
f0124626:	68 20 b6 13 f0       	push   $0xf013b620
f012462b:	68 42 08 00 00       	push   $0x842
f0124630:	68 3a b5 13 f0       	push   $0xf013b53a
f0124635:	e8 cb bb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012463a:	e8 89 f7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012463f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124642:	74 17                	je     f012465b <test_kheap_phys_addr+0xa81>
f0124644:	83 ec 04             	sub    $0x4,%esp
f0124647:	68 54 b5 13 f0       	push   $0xf013b554
f012464c:	68 43 08 00 00       	push   $0x843
f0124651:	68 3a b5 13 f0       	push   $0xf013b53a
f0124656:	e8 aa bb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012465b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012465e:	e8 2e 87 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124663:	29 c3                	sub    %eax,%ebx
f0124665:	89 d8                	mov    %ebx,%eax
f0124667:	83 f8 04             	cmp    $0x4,%eax
f012466a:	74 17                	je     f0124683 <test_kheap_phys_addr+0xaa9>
f012466c:	83 ec 04             	sub    $0x4,%esp
f012466f:	68 bc b5 13 f0       	push   $0xf013b5bc
f0124674:	68 44 08 00 00       	push   $0x844
f0124679:	68 3a b5 13 f0       	push   $0xf013b53a
f012467e:	e8 82 bb fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0124683:	89 e0                	mov    %esp,%eax
f0124685:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124687:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012468e:	10 00 00 
f0124691:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124697:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012469c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01246a2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01246a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01246ad:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01246b3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01246b9:	29 d0                	sub    %edx,%eax
f01246bb:	89 c1                	mov    %eax,%ecx
f01246bd:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01246c4:	10 00 00 
f01246c7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01246cc:	0f b6 d0             	movzbl %al,%edx
f01246cf:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01246d5:	01 d0                	add    %edx,%eax
f01246d7:	48                   	dec    %eax
f01246d8:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01246de:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01246e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01246e9:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01246ef:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01246f5:	29 d0                	sub    %edx,%eax
f01246f7:	01 c1                	add    %eax,%ecx
f01246f9:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124700:	10 00 00 
f0124703:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124708:	0f b6 c0             	movzbl %al,%eax
f012470b:	c1 e0 04             	shl    $0x4,%eax
f012470e:	89 c2                	mov    %eax,%edx
f0124710:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124716:	01 d0                	add    %edx,%eax
f0124718:	48                   	dec    %eax
f0124719:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012471f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124725:	ba 00 00 00 00       	mov    $0x0,%edx
f012472a:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124730:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124736:	29 d0                	sub    %edx,%eax
f0124738:	01 c8                	add    %ecx,%eax
f012473a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012473f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124745:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012474c:	10 00 00 
f012474f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124755:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012475a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124760:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124766:	ba 00 00 00 00       	mov    $0x0,%edx
f012476b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124771:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124777:	29 d0                	sub    %edx,%eax
f0124779:	89 c1                	mov    %eax,%ecx
f012477b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124782:	10 00 00 
f0124785:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012478a:	0f b6 d0             	movzbl %al,%edx
f012478d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124793:	01 d0                	add    %edx,%eax
f0124795:	48                   	dec    %eax
f0124796:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012479c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01247a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01247a7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01247ad:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01247b3:	29 d0                	sub    %edx,%eax
f01247b5:	01 c1                	add    %eax,%ecx
f01247b7:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01247be:	10 00 00 
f01247c1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01247c6:	0f b6 c0             	movzbl %al,%eax
f01247c9:	c1 e0 04             	shl    $0x4,%eax
f01247cc:	89 c2                	mov    %eax,%edx
f01247ce:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01247d4:	01 d0                	add    %edx,%eax
f01247d6:	48                   	dec    %eax
f01247d7:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01247dd:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01247e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01247e8:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01247ee:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01247f4:	29 d0                	sub    %edx,%eax
f01247f6:	01 c8                	add    %ecx,%eax
f01247f8:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01247fd:	c1 e8 0c             	shr    $0xc,%eax
f0124800:	89 c2                	mov    %eax,%edx
f0124802:	4a                   	dec    %edx
f0124803:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124809:	c1 e0 02             	shl    $0x2,%eax
f012480c:	8d 50 03             	lea    0x3(%eax),%edx
f012480f:	b8 10 00 00 00       	mov    $0x10,%eax
f0124814:	48                   	dec    %eax
f0124815:	01 d0                	add    %edx,%eax
f0124817:	bf 10 00 00 00       	mov    $0x10,%edi
f012481c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124821:	f7 f7                	div    %edi
f0124823:	6b c0 10             	imul   $0x10,%eax,%eax
f0124826:	29 c4                	sub    %eax,%esp
f0124828:	89 e0                	mov    %esp,%eax
f012482a:	83 c0 03             	add    $0x3,%eax
f012482d:	c1 e8 02             	shr    $0x2,%eax
f0124830:	c1 e0 02             	shl    $0x2,%eax
f0124833:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124839:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124840:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124847:	10 00 00 
f012484a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124850:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124855:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012485b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124861:	ba 00 00 00 00       	mov    $0x0,%edx
f0124866:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012486c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124872:	29 d0                	sub    %edx,%eax
f0124874:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124879:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012487c:	eb 29                	jmp    f01248a7 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f012487e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124881:	8d 43 01             	lea    0x1(%ebx),%eax
f0124884:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124887:	83 ec 0c             	sub    $0xc,%esp
f012488a:	ff 75 e0             	pushl  -0x20(%ebp)
f012488d:	e8 06 34 fe ff       	call   f0107c98 <kheap_physical_address>
f0124892:	83 c4 10             	add    $0x10,%esp
f0124895:	89 c2                	mov    %eax,%edx
f0124897:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012489d:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01248a0:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f01248a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01248aa:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01248b0:	72 cc                	jb     f012487e <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01248b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01248b5:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f01248bb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01248c2:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01248c9:	10 00 00 
f01248cc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01248d2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01248d7:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01248dd:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01248e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01248e8:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01248ee:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01248f4:	29 d0                	sub    %edx,%eax
f01248f6:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01248fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01248fe:	e9 ab 00 00 00       	jmp    f01249ae <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124903:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0124908:	83 ec 04             	sub    $0x4,%esp
f012490b:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124911:	52                   	push   %edx
f0124912:	ff 75 e0             	pushl  -0x20(%ebp)
f0124915:	50                   	push   %eax
f0124916:	e8 96 21 fe ff       	call   f0106ab1 <get_page_table>
f012491b:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012491e:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124924:	85 c0                	test   %eax,%eax
f0124926:	75 17                	jne    f012493f <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124928:	83 ec 04             	sub    $0x4,%esp
f012492b:	68 dc be 13 f0       	push   $0xf013bedc
f0124930:	68 59 08 00 00       	push   $0x859
f0124935:	68 3a b5 13 f0       	push   $0xf013b53a
f012493a:	e8 c6 b8 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012493f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124942:	c1 e8 0c             	shr    $0xc,%eax
f0124945:	25 ff 03 00 00       	and    $0x3ff,%eax
f012494a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012494d:	eb 4b                	jmp    f012499a <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f012494f:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124955:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124958:	c1 e2 02             	shl    $0x2,%edx
f012495b:	01 d0                	add    %edx,%eax
f012495d:	8b 00                	mov    (%eax),%eax
f012495f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124964:	89 c1                	mov    %eax,%ecx
f0124966:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012496c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012496f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124972:	39 c1                	cmp    %eax,%ecx
f0124974:	74 17                	je     f012498d <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124976:	83 ec 04             	sub    $0x4,%esp
f0124979:	68 35 bf 13 f0       	push   $0xf013bf35
f012497e:	68 60 08 00 00       	push   $0x860
f0124983:	68 3a b5 13 f0       	push   $0xf013b53a
f0124988:	e8 78 b8 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f012498d:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124994:	ff 45 dc             	incl   -0x24(%ebp)
f0124997:	ff 45 e4             	incl   -0x1c(%ebp)
f012499a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012499d:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f01249a3:	7d 09                	jge    f01249ae <test_kheap_phys_addr+0xdd4>
f01249a5:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01249ac:	7e a1                	jle    f012494f <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01249ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01249b1:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01249b7:	0f 82 46 ff ff ff    	jb     f0124903 <test_kheap_phys_addr+0xd29>
f01249bd:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01249bf:	83 ec 0c             	sub    $0xc,%esp
f01249c2:	68 54 bf 13 f0       	push   $0xf013bf54
f01249c7:	e8 42 c3 fd ff       	call   f0100d0e <cprintf>
f01249cc:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01249cf:	e8 bd 83 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01249d4:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01249da:	e8 e9 f3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01249df:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f01249e5:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01249eb:	83 ec 0c             	sub    $0xc,%esp
f01249ee:	50                   	push   %eax
f01249ef:	e8 51 31 fe ff       	call   f0107b45 <kfree>
f01249f4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01249f7:	e8 cc f3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01249fc:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124a02:	74 17                	je     f0124a1b <test_kheap_phys_addr+0xe41>
f0124a04:	83 ec 04             	sub    $0x4,%esp
f0124a07:	68 54 b5 13 f0       	push   $0xf013b554
f0124a0c:	68 6e 08 00 00       	push   $0x86e
f0124a11:	68 3a b5 13 f0       	push   $0xf013b53a
f0124a16:	e8 ea b7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124a1b:	e8 71 83 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124a20:	89 c2                	mov    %eax,%edx
f0124a22:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124a28:	29 c2                	sub    %eax,%edx
f0124a2a:	89 d0                	mov    %edx,%eax
f0124a2c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124a31:	74 17                	je     f0124a4a <test_kheap_phys_addr+0xe70>
f0124a33:	83 ec 04             	sub    $0x4,%esp
f0124a36:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0124a3b:	68 6f 08 00 00       	push   $0x86f
f0124a40:	68 3a b5 13 f0       	push   $0xf013b53a
f0124a45:	e8 bb b7 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124a4a:	e8 42 83 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124a4f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124a55:	e8 6e f3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124a5a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124a60:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124a66:	83 ec 0c             	sub    $0xc,%esp
f0124a69:	50                   	push   %eax
f0124a6a:	e8 d6 30 fe ff       	call   f0107b45 <kfree>
f0124a6f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a72:	e8 51 f3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124a77:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124a7d:	74 17                	je     f0124a96 <test_kheap_phys_addr+0xebc>
f0124a7f:	83 ec 04             	sub    $0x4,%esp
f0124a82:	68 54 b5 13 f0       	push   $0xf013b554
f0124a87:	68 75 08 00 00       	push   $0x875
f0124a8c:	68 3a b5 13 f0       	push   $0xf013b53a
f0124a91:	e8 6f b7 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124a96:	e8 f6 82 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124a9b:	89 c2                	mov    %eax,%edx
f0124a9d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124aa3:	29 c2                	sub    %eax,%edx
f0124aa5:	89 d0                	mov    %edx,%eax
f0124aa7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124aac:	74 17                	je     f0124ac5 <test_kheap_phys_addr+0xeeb>
f0124aae:	83 ec 04             	sub    $0x4,%esp
f0124ab1:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0124ab6:	68 76 08 00 00       	push   $0x876
f0124abb:	68 3a b5 13 f0       	push   $0xf013b53a
f0124ac0:	e8 40 b7 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124ac5:	e8 c7 82 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124aca:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ad0:	e8 f3 f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124ad5:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0124adb:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124ae1:	83 ec 0c             	sub    $0xc,%esp
f0124ae4:	50                   	push   %eax
f0124ae5:	e8 5b 30 fe ff       	call   f0107b45 <kfree>
f0124aea:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124aed:	e8 d6 f2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0124af2:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124af8:	74 17                	je     f0124b11 <test_kheap_phys_addr+0xf37>
f0124afa:	83 ec 04             	sub    $0x4,%esp
f0124afd:	68 54 b5 13 f0       	push   $0xf013b554
f0124b02:	68 7c 08 00 00       	push   $0x87c
f0124b07:	68 3a b5 13 f0       	push   $0xf013b53a
f0124b0c:	e8 f4 b6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124b11:	e8 7b 82 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0124b16:	89 c2                	mov    %eax,%edx
f0124b18:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124b1e:	29 c2                	sub    %eax,%edx
f0124b20:	89 d0                	mov    %edx,%eax
f0124b22:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124b27:	74 17                	je     f0124b40 <test_kheap_phys_addr+0xf66>
f0124b29:	83 ec 04             	sub    $0x4,%esp
f0124b2c:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0124b31:	68 7d 08 00 00       	push   $0x87d
f0124b36:	68 3a b5 13 f0       	push   $0xf013b53a
f0124b3b:	e8 c5 b6 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0124b40:	89 e0                	mov    %esp,%eax
f0124b42:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124b44:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0124b4b:	10 00 00 
f0124b4e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124b54:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b59:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0124b5f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124b65:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b6a:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0124b70:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124b76:	29 d0                	sub    %edx,%eax
f0124b78:	89 c1                	mov    %eax,%ecx
f0124b7a:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0124b81:	10 00 00 
f0124b84:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124b89:	0f b6 d0             	movzbl %al,%edx
f0124b8c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124b92:	01 d0                	add    %edx,%eax
f0124b94:	48                   	dec    %eax
f0124b95:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0124b9b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124ba1:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ba6:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0124bac:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124bb2:	29 d0                	sub    %edx,%eax
f0124bb4:	01 c1                	add    %eax,%ecx
f0124bb6:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124bbd:	10 00 00 
f0124bc0:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124bc5:	0f b6 c0             	movzbl %al,%eax
f0124bc8:	c1 e0 04             	shl    $0x4,%eax
f0124bcb:	89 c2                	mov    %eax,%edx
f0124bcd:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124bd3:	01 d0                	add    %edx,%eax
f0124bd5:	48                   	dec    %eax
f0124bd6:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124bdc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124be2:	ba 00 00 00 00       	mov    $0x0,%edx
f0124be7:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0124bed:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124bf3:	29 d0                	sub    %edx,%eax
f0124bf5:	01 c8                	add    %ecx,%eax
f0124bf7:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124bfc:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124c02:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0124c09:	10 00 00 
f0124c0c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124c12:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c17:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0124c1d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124c23:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c28:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0124c2e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124c34:	29 d0                	sub    %edx,%eax
f0124c36:	89 c1                	mov    %eax,%ecx
f0124c38:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0124c3f:	10 00 00 
f0124c42:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124c47:	0f b6 d0             	movzbl %al,%edx
f0124c4a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124c50:	01 d0                	add    %edx,%eax
f0124c52:	48                   	dec    %eax
f0124c53:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0124c59:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124c5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c64:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0124c6a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0124c70:	29 d0                	sub    %edx,%eax
f0124c72:	01 c1                	add    %eax,%ecx
f0124c74:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124c7b:	10 00 00 
f0124c7e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124c83:	0f b6 c0             	movzbl %al,%eax
f0124c86:	c1 e0 04             	shl    $0x4,%eax
f0124c89:	89 c2                	mov    %eax,%edx
f0124c8b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124c91:	01 d0                	add    %edx,%eax
f0124c93:	48                   	dec    %eax
f0124c94:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124c9a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124ca0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ca5:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124cab:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124cb1:	29 d0                	sub    %edx,%eax
f0124cb3:	01 c8                	add    %ecx,%eax
f0124cb5:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124cba:	c1 e8 0c             	shr    $0xc,%eax
f0124cbd:	89 c2                	mov    %eax,%edx
f0124cbf:	4a                   	dec    %edx
f0124cc0:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124cc6:	c1 e0 02             	shl    $0x2,%eax
f0124cc9:	8d 50 03             	lea    0x3(%eax),%edx
f0124ccc:	b8 10 00 00 00       	mov    $0x10,%eax
f0124cd1:	48                   	dec    %eax
f0124cd2:	01 d0                	add    %edx,%eax
f0124cd4:	bf 10 00 00 00       	mov    $0x10,%edi
f0124cd9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cde:	f7 f7                	div    %edi
f0124ce0:	6b c0 10             	imul   $0x10,%eax,%eax
f0124ce3:	29 c4                	sub    %eax,%esp
f0124ce5:	89 e0                	mov    %esp,%eax
f0124ce7:	83 c0 03             	add    $0x3,%eax
f0124cea:	c1 e8 02             	shr    $0x2,%eax
f0124ced:	c1 e0 02             	shl    $0x2,%eax
f0124cf0:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124cf6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124cfd:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124d04:	10 00 00 
f0124d07:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0124d0d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d12:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124d18:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124d1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d23:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0124d29:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124d2f:	29 d0                	sub    %edx,%eax
f0124d31:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124d36:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124d39:	eb 29                	jmp    f0124d64 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124d3b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124d3e:	8d 43 01             	lea    0x1(%ebx),%eax
f0124d41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124d44:	83 ec 0c             	sub    $0xc,%esp
f0124d47:	ff 75 d8             	pushl  -0x28(%ebp)
f0124d4a:	e8 49 2f fe ff       	call   f0107c98 <kheap_physical_address>
f0124d4f:	83 c4 10             	add    $0x10,%esp
f0124d52:	89 c2                	mov    %eax,%edx
f0124d54:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124d5a:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124d5d:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124d64:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124d67:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124d6d:	72 cc                	jb     f0124d3b <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124d6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124d72:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0124d78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124d7f:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0124d86:	10 00 00 
f0124d89:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0124d8f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d94:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0124d9a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124da0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124da5:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0124dab:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124db1:	29 d0                	sub    %edx,%eax
f0124db3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124db8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124dbb:	e9 ab 00 00 00       	jmp    f0124e6b <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124dc0:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0124dc5:	83 ec 04             	sub    $0x4,%esp
f0124dc8:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0124dce:	52                   	push   %edx
f0124dcf:	ff 75 d8             	pushl  -0x28(%ebp)
f0124dd2:	50                   	push   %eax
f0124dd3:	e8 d9 1c fe ff       	call   f0106ab1 <get_page_table>
f0124dd8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124ddb:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124de1:	85 c0                	test   %eax,%eax
f0124de3:	75 17                	jne    f0124dfc <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124de5:	83 ec 04             	sub    $0x4,%esp
f0124de8:	68 dc be 13 f0       	push   $0xf013bedc
f0124ded:	68 93 08 00 00       	push   $0x893
f0124df2:	68 3a b5 13 f0       	push   $0xf013b53a
f0124df7:	e8 09 b4 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124dfc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124dff:	c1 e8 0c             	shr    $0xc,%eax
f0124e02:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124e07:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0124e0a:	eb 4b                	jmp    f0124e57 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124e0c:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124e12:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124e15:	c1 e2 02             	shl    $0x2,%edx
f0124e18:	01 d0                	add    %edx,%eax
f0124e1a:	8b 00                	mov    (%eax),%eax
f0124e1c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124e21:	89 c1                	mov    %eax,%ecx
f0124e23:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0124e29:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124e2c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124e2f:	39 c1                	cmp    %eax,%ecx
f0124e31:	74 17                	je     f0124e4a <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124e33:	83 ec 04             	sub    $0x4,%esp
f0124e36:	68 35 bf 13 f0       	push   $0xf013bf35
f0124e3b:	68 9a 08 00 00       	push   $0x89a
f0124e40:	68 3a b5 13 f0       	push   $0xf013b53a
f0124e45:	e8 bb b3 fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0124e4a:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124e51:	ff 45 d4             	incl   -0x2c(%ebp)
f0124e54:	ff 45 e4             	incl   -0x1c(%ebp)
f0124e57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e5a:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0124e60:	7d 09                	jge    f0124e6b <test_kheap_phys_addr+0x1291>
f0124e62:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124e69:	7e a1                	jle    f0124e0c <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124e6b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124e6e:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124e74:	0f 82 46 ff ff ff    	jb     f0124dc0 <test_kheap_phys_addr+0x11e6>
f0124e7a:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124e7c:	83 ec 0c             	sub    $0xc,%esp
f0124e7f:	68 c5 b6 13 f0       	push   $0xf013b6c5
f0124e84:	e8 85 be fd ff       	call   f0100d0e <cprintf>
f0124e89:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124e8c:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124e93:	10 00 00 
f0124e96:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124e9c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ea1:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124ea7:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124ead:	ba 00 00 00 00       	mov    $0x0,%edx
f0124eb2:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124eb8:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0124ebe:	29 d0                	sub    %edx,%eax
f0124ec0:	89 c1                	mov    %eax,%ecx
f0124ec2:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124ec9:	10 00 00 
f0124ecc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124ed1:	0f b6 d0             	movzbl %al,%edx
f0124ed4:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0124eda:	01 d0                	add    %edx,%eax
f0124edc:	48                   	dec    %eax
f0124edd:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0124ee3:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124ee9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124eee:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0124ef4:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0124efa:	29 d0                	sub    %edx,%eax
f0124efc:	01 c1                	add    %eax,%ecx
f0124efe:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0124f05:	10 00 00 
f0124f08:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0124f0d:	0f b6 c0             	movzbl %al,%eax
f0124f10:	c1 e0 04             	shl    $0x4,%eax
f0124f13:	89 c2                	mov    %eax,%edx
f0124f15:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0124f1b:	01 d0                	add    %edx,%eax
f0124f1d:	48                   	dec    %eax
f0124f1e:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0124f24:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124f2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f2f:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0124f35:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124f3b:	29 d0                	sub    %edx,%eax
f0124f3d:	01 c8                	add    %ecx,%eax
f0124f3f:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0124f44:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0124f4a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124f51:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124f57:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0124f5a:	eb 0a                	jmp    f0124f66 <test_kheap_phys_addr+0x138c>
		{
			i++;
f0124f5c:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0124f5f:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0124f66:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0124f6d:	76 ed                	jbe    f0124f5c <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0124f6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124f72:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0124f78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124f7f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124f85:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124f88:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0124f8f:	e9 cc 00 00 00       	jmp    f0125060 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124f94:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0124f97:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0124f9c:	83 ec 04             	sub    $0x4,%esp
f0124f9f:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124fa5:	51                   	push   %ecx
f0124fa6:	52                   	push   %edx
f0124fa7:	50                   	push   %eax
f0124fa8:	e8 04 1b fe ff       	call   f0106ab1 <get_page_table>
f0124fad:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124fb0:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124fb6:	85 c0                	test   %eax,%eax
f0124fb8:	75 17                	jne    f0124fd1 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124fba:	83 ec 04             	sub    $0x4,%esp
f0124fbd:	68 dc be 13 f0       	push   $0xf013bedc
f0124fc2:	68 b6 08 00 00       	push   $0x8b6
f0124fc7:	68 3a b5 13 f0       	push   $0xf013b53a
f0124fcc:	e8 34 b2 fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124fd1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0124fd8:	eb 67                	jmp    f0125041 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0124fda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124fdd:	c1 e0 0c             	shl    $0xc,%eax
f0124fe0:	89 c2                	mov    %eax,%edx
f0124fe2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124fe8:	01 d0                	add    %edx,%eax
f0124fea:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0124ff0:	83 ec 0c             	sub    $0xc,%esp
f0124ff3:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0124ff9:	e8 9a 2c fe ff       	call   f0107c98 <kheap_physical_address>
f0124ffe:	83 c4 10             	add    $0x10,%esp
f0125001:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0125007:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f012500d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0125010:	c1 e2 02             	shl    $0x2,%edx
f0125013:	01 d0                	add    %edx,%eax
f0125015:	8b 00                	mov    (%eax),%eax
f0125017:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012501c:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0125022:	74 17                	je     f012503b <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0125024:	83 ec 04             	sub    $0x4,%esp
f0125027:	68 35 bf 13 f0       	push   $0xf013bf35
f012502c:	68 c0 08 00 00       	push   $0x8c0
f0125031:	68 3a b5 13 f0       	push   $0xf013b53a
f0125036:	e8 ca b1 fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012503b:	ff 45 cc             	incl   -0x34(%ebp)
f012503e:	ff 45 e4             	incl   -0x1c(%ebp)
f0125041:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125044:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f012504a:	7d 09                	jge    f0125055 <test_kheap_phys_addr+0x147b>
f012504c:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0125053:	7e 85                	jle    f0124fda <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0125055:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f012505c:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0125060:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0125064:	0f 88 2a ff ff ff    	js     f0124f94 <test_kheap_phys_addr+0x13ba>
f012506a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f012506e:	7f 0d                	jg     f012507d <test_kheap_phys_addr+0x14a3>
f0125070:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0125077:	0f 86 17 ff ff ff    	jbe    f0124f94 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012507d:	83 ec 0c             	sub    $0xc,%esp
f0125080:	68 1e b7 13 f0       	push   $0xf013b71e
f0125085:	e8 84 bc fd ff       	call   f0100d0e <cprintf>
f012508a:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f012508d:	83 ec 0c             	sub    $0xc,%esp
f0125090:	68 88 bf 13 f0       	push   $0xf013bf88
f0125095:	e8 74 bc fd ff       	call   f0100d0e <cprintf>
f012509a:	83 c4 10             	add    $0x10,%esp

	return 1;
f012509d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01250a2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01250a5:	5b                   	pop    %ebx
f01250a6:	5e                   	pop    %esi
f01250a7:	5f                   	pop    %edi
f01250a8:	5d                   	pop    %ebp
f01250a9:	c3                   	ret    

f01250aa <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f01250aa:	55                   	push   %ebp
f01250ab:	89 e5                	mov    %esp,%ebp
f01250ad:	57                   	push   %edi
f01250ae:	56                   	push   %esi
f01250af:	53                   	push   %ebx
f01250b0:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f01250b6:	89 e0                	mov    %esp,%eax
f01250b8:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f01250ba:	83 ec 0c             	sub    $0xc,%esp
f01250bd:	68 7c b4 13 f0       	push   $0xf013b47c
f01250c2:	e8 47 bc fd ff       	call   f0100d0e <cprintf>
f01250c7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01250ca:	83 ec 0c             	sub    $0xc,%esp
f01250cd:	68 ac b4 13 f0       	push   $0xf013b4ac
f01250d2:	e8 37 bc fd ff       	call   f0100d0e <cprintf>
f01250d7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01250da:	83 ec 0c             	sub    $0xc,%esp
f01250dd:	68 7c b4 13 f0       	push   $0xf013b47c
f01250e2:	e8 27 bc fd ff       	call   f0100d0e <cprintf>
f01250e7:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01250ea:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f01250ee:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01250f2:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01250f8:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01250fe:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125105:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012510c:	e8 80 7c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125111:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0125114:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012511a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012511f:	b8 00 00 00 00       	mov    $0x0,%eax
f0125124:	89 d7                	mov    %edx,%edi
f0125126:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125128:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f012512e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125133:	b8 00 00 00 00       	mov    $0x0,%eax
f0125138:	89 d7                	mov    %edx,%edi
f012513a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012513c:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0125142:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125147:	b8 00 00 00 00       	mov    $0x0,%eax
f012514c:	89 d7                	mov    %edx,%edi
f012514e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125150:	e8 3c 7c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125155:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125158:	e8 6b ec fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012515d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125160:	83 ec 0c             	sub    $0xc,%esp
f0125163:	68 00 fc 1f 00       	push   $0x1ffc00
f0125168:	e8 0d 29 fe ff       	call   f0107a7a <kmalloc>
f012516d:	83 c4 10             	add    $0x10,%esp
f0125170:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125176:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012517c:	89 c1                	mov    %eax,%ecx
f012517e:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0125185:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125188:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012518d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0125190:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125193:	ba 00 00 00 00       	mov    $0x0,%edx
f0125198:	f7 75 b4             	divl   -0x4c(%ebp)
f012519b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012519e:	29 d0                	sub    %edx,%eax
f01251a0:	89 c3                	mov    %eax,%ebx
f01251a2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01251a9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01251ae:	0f b6 d0             	movzbl %al,%edx
f01251b1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01251b4:	01 d0                	add    %edx,%eax
f01251b6:	48                   	dec    %eax
f01251b7:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01251ba:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01251bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01251c2:	f7 75 ac             	divl   -0x54(%ebp)
f01251c5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01251c8:	29 d0                	sub    %edx,%eax
f01251ca:	01 c3                	add    %eax,%ebx
f01251cc:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01251d3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01251d8:	0f b6 c0             	movzbl %al,%eax
f01251db:	c1 e0 04             	shl    $0x4,%eax
f01251de:	89 c2                	mov    %eax,%edx
f01251e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01251e3:	01 d0                	add    %edx,%eax
f01251e5:	48                   	dec    %eax
f01251e6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01251e9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01251ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01251f1:	f7 75 a4             	divl   -0x5c(%ebp)
f01251f4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01251f7:	29 d0                	sub    %edx,%eax
f01251f9:	01 d8                	add    %ebx,%eax
f01251fb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125200:	39 c1                	cmp    %eax,%ecx
f0125202:	74 17                	je     f012521b <test_kheap_virt_addr+0x171>
f0125204:	83 ec 04             	sub    $0x4,%esp
f0125207:	68 20 b6 13 f0       	push   $0xf013b620
f012520c:	68 ed 08 00 00       	push   $0x8ed
f0125211:	68 3a b5 13 f0       	push   $0xf013b53a
f0125216:	e8 ea af fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012521b:	e8 a8 eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125220:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125223:	74 17                	je     f012523c <test_kheap_virt_addr+0x192>
f0125225:	83 ec 04             	sub    $0x4,%esp
f0125228:	68 54 b5 13 f0       	push   $0xf013b554
f012522d:	68 ee 08 00 00       	push   $0x8ee
f0125232:	68 3a b5 13 f0       	push   $0xf013b53a
f0125237:	e8 c9 af fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012523c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012523f:	e8 4d 7b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125244:	29 c3                	sub    %eax,%ebx
f0125246:	89 d8                	mov    %ebx,%eax
f0125248:	3d 00 02 00 00       	cmp    $0x200,%eax
f012524d:	74 17                	je     f0125266 <test_kheap_virt_addr+0x1bc>
f012524f:	83 ec 04             	sub    $0x4,%esp
f0125252:	68 bc b5 13 f0       	push   $0xf013b5bc
f0125257:	68 ef 08 00 00       	push   $0x8ef
f012525c:	68 3a b5 13 f0       	push   $0xf013b53a
f0125261:	e8 9f af fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125266:	e8 26 7b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012526b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012526e:	e8 55 eb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125273:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125276:	83 ec 0c             	sub    $0xc,%esp
f0125279:	68 00 fc 1f 00       	push   $0x1ffc00
f012527e:	e8 f7 27 fe ff       	call   f0107a7a <kmalloc>
f0125283:	83 c4 10             	add    $0x10,%esp
f0125286:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012528c:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0125292:	89 c1                	mov    %eax,%ecx
f0125294:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012529b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012529e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252a3:	89 45 98             	mov    %eax,-0x68(%ebp)
f01252a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01252a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01252ae:	f7 75 9c             	divl   -0x64(%ebp)
f01252b1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01252b4:	29 d0                	sub    %edx,%eax
f01252b6:	89 c3                	mov    %eax,%ebx
f01252b8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01252bf:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01252c4:	0f b6 d0             	movzbl %al,%edx
f01252c7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01252ca:	01 d0                	add    %edx,%eax
f01252cc:	48                   	dec    %eax
f01252cd:	89 45 90             	mov    %eax,-0x70(%ebp)
f01252d0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01252d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01252d8:	f7 75 94             	divl   -0x6c(%ebp)
f01252db:	8b 45 90             	mov    -0x70(%ebp),%eax
f01252de:	29 d0                	sub    %edx,%eax
f01252e0:	01 c3                	add    %eax,%ebx
f01252e2:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01252e9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01252ee:	0f b6 c0             	movzbl %al,%eax
f01252f1:	c1 e0 04             	shl    $0x4,%eax
f01252f4:	89 c2                	mov    %eax,%edx
f01252f6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01252f9:	01 d0                	add    %edx,%eax
f01252fb:	48                   	dec    %eax
f01252fc:	89 45 88             	mov    %eax,-0x78(%ebp)
f01252ff:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125302:	ba 00 00 00 00       	mov    $0x0,%edx
f0125307:	f7 75 8c             	divl   -0x74(%ebp)
f012530a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012530d:	29 d0                	sub    %edx,%eax
f012530f:	01 d8                	add    %ebx,%eax
f0125311:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125316:	39 c1                	cmp    %eax,%ecx
f0125318:	74 17                	je     f0125331 <test_kheap_virt_addr+0x287>
f012531a:	83 ec 04             	sub    $0x4,%esp
f012531d:	68 20 b6 13 f0       	push   $0xf013b620
f0125322:	68 f5 08 00 00       	push   $0x8f5
f0125327:	68 3a b5 13 f0       	push   $0xf013b53a
f012532c:	e8 d4 ae fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125331:	e8 92 ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125336:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125339:	74 17                	je     f0125352 <test_kheap_virt_addr+0x2a8>
f012533b:	83 ec 04             	sub    $0x4,%esp
f012533e:	68 54 b5 13 f0       	push   $0xf013b554
f0125343:	68 f6 08 00 00       	push   $0x8f6
f0125348:	68 3a b5 13 f0       	push   $0xf013b53a
f012534d:	e8 b3 ae fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125352:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125355:	e8 37 7a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012535a:	29 c3                	sub    %eax,%ebx
f012535c:	89 d8                	mov    %ebx,%eax
f012535e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125363:	74 17                	je     f012537c <test_kheap_virt_addr+0x2d2>
f0125365:	83 ec 04             	sub    $0x4,%esp
f0125368:	68 bc b5 13 f0       	push   $0xf013b5bc
f012536d:	68 f7 08 00 00       	push   $0x8f7
f0125372:	68 3a b5 13 f0       	push   $0xf013b53a
f0125377:	e8 89 ae fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012537c:	e8 10 7a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125381:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125384:	e8 3f ea fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125389:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012538c:	83 ec 0c             	sub    $0xc,%esp
f012538f:	68 00 08 00 00       	push   $0x800
f0125394:	e8 e1 26 fe ff       	call   f0107a7a <kmalloc>
f0125399:	83 c4 10             	add    $0x10,%esp
f012539c:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01253a2:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01253a8:	89 c1                	mov    %eax,%ecx
f01253aa:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01253b1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01253b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253b9:	89 45 80             	mov    %eax,-0x80(%ebp)
f01253bc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01253bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01253c4:	f7 75 84             	divl   -0x7c(%ebp)
f01253c7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01253ca:	29 d0                	sub    %edx,%eax
f01253cc:	89 c3                	mov    %eax,%ebx
f01253ce:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01253d5:	10 00 00 
f01253d8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01253dd:	0f b6 d0             	movzbl %al,%edx
f01253e0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01253e6:	01 d0                	add    %edx,%eax
f01253e8:	48                   	dec    %eax
f01253e9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01253ef:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01253f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01253fa:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125400:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125406:	29 d0                	sub    %edx,%eax
f0125408:	01 c3                	add    %eax,%ebx
f012540a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125411:	10 00 00 
f0125414:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125419:	0f b6 c0             	movzbl %al,%eax
f012541c:	c1 e0 04             	shl    $0x4,%eax
f012541f:	89 c2                	mov    %eax,%edx
f0125421:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125427:	01 d0                	add    %edx,%eax
f0125429:	48                   	dec    %eax
f012542a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125430:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125436:	ba 00 00 00 00       	mov    $0x0,%edx
f012543b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125441:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125447:	29 d0                	sub    %edx,%eax
f0125449:	01 d8                	add    %ebx,%eax
f012544b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125450:	39 c1                	cmp    %eax,%ecx
f0125452:	74 17                	je     f012546b <test_kheap_virt_addr+0x3c1>
f0125454:	83 ec 04             	sub    $0x4,%esp
f0125457:	68 20 b6 13 f0       	push   $0xf013b620
f012545c:	68 fd 08 00 00       	push   $0x8fd
f0125461:	68 3a b5 13 f0       	push   $0xf013b53a
f0125466:	e8 9a ad fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012546b:	e8 58 e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125470:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125473:	74 17                	je     f012548c <test_kheap_virt_addr+0x3e2>
f0125475:	83 ec 04             	sub    $0x4,%esp
f0125478:	68 54 b5 13 f0       	push   $0xf013b554
f012547d:	68 fe 08 00 00       	push   $0x8fe
f0125482:	68 3a b5 13 f0       	push   $0xf013b53a
f0125487:	e8 79 ad fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012548c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012548f:	e8 fd 78 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125494:	29 c3                	sub    %eax,%ebx
f0125496:	89 d8                	mov    %ebx,%eax
f0125498:	83 f8 01             	cmp    $0x1,%eax
f012549b:	74 17                	je     f01254b4 <test_kheap_virt_addr+0x40a>
f012549d:	83 ec 04             	sub    $0x4,%esp
f01254a0:	68 bc b5 13 f0       	push   $0xf013b5bc
f01254a5:	68 ff 08 00 00       	push   $0x8ff
f01254aa:	68 3a b5 13 f0       	push   $0xf013b53a
f01254af:	e8 51 ad fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01254b4:	e8 d8 78 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01254b9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01254bc:	e8 07 e9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01254c1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01254c4:	83 ec 0c             	sub    $0xc,%esp
f01254c7:	68 00 08 00 00       	push   $0x800
f01254cc:	e8 a9 25 fe ff       	call   f0107a7a <kmalloc>
f01254d1:	83 c4 10             	add    $0x10,%esp
f01254d4:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01254da:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01254e0:	89 c1                	mov    %eax,%ecx
f01254e2:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01254e9:	10 00 00 
f01254ec:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01254f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01254f7:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01254fd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125503:	ba 00 00 00 00       	mov    $0x0,%edx
f0125508:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012550e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125514:	29 d0                	sub    %edx,%eax
f0125516:	89 c3                	mov    %eax,%ebx
f0125518:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012551f:	10 00 00 
f0125522:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125527:	0f b6 d0             	movzbl %al,%edx
f012552a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125530:	01 d0                	add    %edx,%eax
f0125532:	48                   	dec    %eax
f0125533:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125539:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012553f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125544:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012554a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125550:	29 d0                	sub    %edx,%eax
f0125552:	01 c3                	add    %eax,%ebx
f0125554:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012555b:	10 00 00 
f012555e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125563:	0f b6 c0             	movzbl %al,%eax
f0125566:	c1 e0 04             	shl    $0x4,%eax
f0125569:	89 c2                	mov    %eax,%edx
f012556b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125571:	01 d0                	add    %edx,%eax
f0125573:	48                   	dec    %eax
f0125574:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012557a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125580:	ba 00 00 00 00       	mov    $0x0,%edx
f0125585:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012558b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125591:	29 d0                	sub    %edx,%eax
f0125593:	01 d8                	add    %ebx,%eax
f0125595:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012559a:	39 c1                	cmp    %eax,%ecx
f012559c:	74 17                	je     f01255b5 <test_kheap_virt_addr+0x50b>
f012559e:	83 ec 04             	sub    $0x4,%esp
f01255a1:	68 20 b6 13 f0       	push   $0xf013b620
f01255a6:	68 05 09 00 00       	push   $0x905
f01255ab:	68 3a b5 13 f0       	push   $0xf013b53a
f01255b0:	e8 50 ac fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01255b5:	e8 0e e8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01255ba:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01255bd:	74 17                	je     f01255d6 <test_kheap_virt_addr+0x52c>
f01255bf:	83 ec 04             	sub    $0x4,%esp
f01255c2:	68 54 b5 13 f0       	push   $0xf013b554
f01255c7:	68 06 09 00 00       	push   $0x906
f01255cc:	68 3a b5 13 f0       	push   $0xf013b53a
f01255d1:	e8 2f ac fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01255d6:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01255d9:	e8 b3 77 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01255de:	29 c3                	sub    %eax,%ebx
f01255e0:	89 d8                	mov    %ebx,%eax
f01255e2:	83 f8 01             	cmp    $0x1,%eax
f01255e5:	74 17                	je     f01255fe <test_kheap_virt_addr+0x554>
f01255e7:	83 ec 04             	sub    $0x4,%esp
f01255ea:	68 bc b5 13 f0       	push   $0xf013b5bc
f01255ef:	68 07 09 00 00       	push   $0x907
f01255f4:	68 3a b5 13 f0       	push   $0xf013b53a
f01255f9:	e8 07 ac fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01255fe:	e8 8e 77 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125603:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125606:	e8 bd e7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012560b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012560e:	83 ec 0c             	sub    $0xc,%esp
f0125611:	68 00 1c 00 00       	push   $0x1c00
f0125616:	e8 5f 24 fe ff       	call   f0107a7a <kmalloc>
f012561b:	83 c4 10             	add    $0x10,%esp
f012561e:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125624:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f012562a:	89 c1                	mov    %eax,%ecx
f012562c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125633:	10 00 00 
f0125636:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012563c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125641:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125647:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012564d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125652:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125658:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012565e:	29 d0                	sub    %edx,%eax
f0125660:	89 c3                	mov    %eax,%ebx
f0125662:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125669:	10 00 00 
f012566c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125671:	0f b6 d0             	movzbl %al,%edx
f0125674:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012567a:	01 d0                	add    %edx,%eax
f012567c:	48                   	dec    %eax
f012567d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125683:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125689:	ba 00 00 00 00       	mov    $0x0,%edx
f012568e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125694:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012569a:	29 d0                	sub    %edx,%eax
f012569c:	01 c3                	add    %eax,%ebx
f012569e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01256a5:	10 00 00 
f01256a8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01256ad:	0f b6 c0             	movzbl %al,%eax
f01256b0:	c1 e0 04             	shl    $0x4,%eax
f01256b3:	89 c2                	mov    %eax,%edx
f01256b5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01256bb:	01 d0                	add    %edx,%eax
f01256bd:	48                   	dec    %eax
f01256be:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01256c4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01256ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01256cf:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01256d5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01256db:	29 d0                	sub    %edx,%eax
f01256dd:	01 d8                	add    %ebx,%eax
f01256df:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01256e4:	39 c1                	cmp    %eax,%ecx
f01256e6:	74 17                	je     f01256ff <test_kheap_virt_addr+0x655>
f01256e8:	83 ec 04             	sub    $0x4,%esp
f01256eb:	68 20 b6 13 f0       	push   $0xf013b620
f01256f0:	68 0d 09 00 00       	push   $0x90d
f01256f5:	68 3a b5 13 f0       	push   $0xf013b53a
f01256fa:	e8 06 ab fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01256ff:	e8 c4 e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125704:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125707:	74 17                	je     f0125720 <test_kheap_virt_addr+0x676>
f0125709:	83 ec 04             	sub    $0x4,%esp
f012570c:	68 54 b5 13 f0       	push   $0xf013b554
f0125711:	68 0e 09 00 00       	push   $0x90e
f0125716:	68 3a b5 13 f0       	push   $0xf013b53a
f012571b:	e8 e5 aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125720:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125723:	e8 69 76 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125728:	29 c3                	sub    %eax,%ebx
f012572a:	89 d8                	mov    %ebx,%eax
f012572c:	83 f8 02             	cmp    $0x2,%eax
f012572f:	74 17                	je     f0125748 <test_kheap_virt_addr+0x69e>
f0125731:	83 ec 04             	sub    $0x4,%esp
f0125734:	68 bc b5 13 f0       	push   $0xf013b5bc
f0125739:	68 0f 09 00 00       	push   $0x90f
f012573e:	68 3a b5 13 f0       	push   $0xf013b53a
f0125743:	e8 bd aa fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125748:	e8 44 76 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012574d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125750:	e8 73 e6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125755:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125758:	83 ec 0c             	sub    $0xc,%esp
f012575b:	68 00 fc 2f 00       	push   $0x2ffc00
f0125760:	e8 15 23 fe ff       	call   f0107a7a <kmalloc>
f0125765:	83 c4 10             	add    $0x10,%esp
f0125768:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012576e:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125774:	89 c1                	mov    %eax,%ecx
f0125776:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012577d:	10 00 00 
f0125780:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125786:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012578b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125791:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125797:	ba 00 00 00 00       	mov    $0x0,%edx
f012579c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01257a2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01257a8:	29 d0                	sub    %edx,%eax
f01257aa:	89 c3                	mov    %eax,%ebx
f01257ac:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01257b3:	10 00 00 
f01257b6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01257bb:	0f b6 d0             	movzbl %al,%edx
f01257be:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01257c4:	01 d0                	add    %edx,%eax
f01257c6:	48                   	dec    %eax
f01257c7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01257cd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01257d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01257d8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01257de:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01257e4:	29 d0                	sub    %edx,%eax
f01257e6:	01 c3                	add    %eax,%ebx
f01257e8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01257ef:	10 00 00 
f01257f2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01257f7:	0f b6 c0             	movzbl %al,%eax
f01257fa:	c1 e0 04             	shl    $0x4,%eax
f01257fd:	89 c2                	mov    %eax,%edx
f01257ff:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125805:	01 d0                	add    %edx,%eax
f0125807:	48                   	dec    %eax
f0125808:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012580e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125814:	ba 00 00 00 00       	mov    $0x0,%edx
f0125819:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012581f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125825:	29 d0                	sub    %edx,%eax
f0125827:	01 d8                	add    %ebx,%eax
f0125829:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012582e:	39 c1                	cmp    %eax,%ecx
f0125830:	74 17                	je     f0125849 <test_kheap_virt_addr+0x79f>
f0125832:	83 ec 04             	sub    $0x4,%esp
f0125835:	68 20 b6 13 f0       	push   $0xf013b620
f012583a:	68 15 09 00 00       	push   $0x915
f012583f:	68 3a b5 13 f0       	push   $0xf013b53a
f0125844:	e8 bc a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125849:	e8 7a e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012584e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125851:	74 17                	je     f012586a <test_kheap_virt_addr+0x7c0>
f0125853:	83 ec 04             	sub    $0x4,%esp
f0125856:	68 54 b5 13 f0       	push   $0xf013b554
f012585b:	68 16 09 00 00       	push   $0x916
f0125860:	68 3a b5 13 f0       	push   $0xf013b53a
f0125865:	e8 9b a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012586a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012586d:	e8 1f 75 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125872:	29 c3                	sub    %eax,%ebx
f0125874:	89 d8                	mov    %ebx,%eax
f0125876:	3d 00 03 00 00       	cmp    $0x300,%eax
f012587b:	74 17                	je     f0125894 <test_kheap_virt_addr+0x7ea>
f012587d:	83 ec 04             	sub    $0x4,%esp
f0125880:	68 bc b5 13 f0       	push   $0xf013b5bc
f0125885:	68 17 09 00 00       	push   $0x917
f012588a:	68 3a b5 13 f0       	push   $0xf013b53a
f012588f:	e8 71 a9 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125894:	e8 f8 74 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125899:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012589c:	e8 27 e5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01258a1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01258a4:	83 ec 0c             	sub    $0xc,%esp
f01258a7:	68 00 fc 5f 00       	push   $0x5ffc00
f01258ac:	e8 c9 21 fe ff       	call   f0107a7a <kmalloc>
f01258b1:	83 c4 10             	add    $0x10,%esp
f01258b4:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01258ba:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01258c0:	89 c1                	mov    %eax,%ecx
f01258c2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01258c9:	10 00 00 
f01258cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01258d2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01258d7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01258dd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01258e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01258e8:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01258ee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01258f4:	29 d0                	sub    %edx,%eax
f01258f6:	89 c3                	mov    %eax,%ebx
f01258f8:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01258ff:	10 00 00 
f0125902:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125907:	0f b6 d0             	movzbl %al,%edx
f012590a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125910:	01 d0                	add    %edx,%eax
f0125912:	48                   	dec    %eax
f0125913:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125919:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012591f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125924:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012592a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125930:	29 d0                	sub    %edx,%eax
f0125932:	01 c3                	add    %eax,%ebx
f0125934:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012593b:	10 00 00 
f012593e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125943:	0f b6 c0             	movzbl %al,%eax
f0125946:	c1 e0 04             	shl    $0x4,%eax
f0125949:	89 c2                	mov    %eax,%edx
f012594b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125951:	01 d0                	add    %edx,%eax
f0125953:	48                   	dec    %eax
f0125954:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012595a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125960:	ba 00 00 00 00       	mov    $0x0,%edx
f0125965:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012596b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125971:	29 d0                	sub    %edx,%eax
f0125973:	01 d8                	add    %ebx,%eax
f0125975:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012597a:	39 c1                	cmp    %eax,%ecx
f012597c:	74 17                	je     f0125995 <test_kheap_virt_addr+0x8eb>
f012597e:	83 ec 04             	sub    $0x4,%esp
f0125981:	68 20 b6 13 f0       	push   $0xf013b620
f0125986:	68 1d 09 00 00       	push   $0x91d
f012598b:	68 3a b5 13 f0       	push   $0xf013b53a
f0125990:	e8 70 a8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125995:	e8 2e e4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012599a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012599d:	74 17                	je     f01259b6 <test_kheap_virt_addr+0x90c>
f012599f:	83 ec 04             	sub    $0x4,%esp
f01259a2:	68 54 b5 13 f0       	push   $0xf013b554
f01259a7:	68 1e 09 00 00       	push   $0x91e
f01259ac:	68 3a b5 13 f0       	push   $0xf013b53a
f01259b1:	e8 4f a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01259b6:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01259b9:	e8 d3 73 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01259be:	29 c3                	sub    %eax,%ebx
f01259c0:	89 d8                	mov    %ebx,%eax
f01259c2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01259c7:	74 17                	je     f01259e0 <test_kheap_virt_addr+0x936>
f01259c9:	83 ec 04             	sub    $0x4,%esp
f01259cc:	68 bc b5 13 f0       	push   $0xf013b5bc
f01259d1:	68 1f 09 00 00       	push   $0x91f
f01259d6:	68 3a b5 13 f0       	push   $0xf013b53a
f01259db:	e8 25 a8 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01259e0:	e8 ac 73 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01259e5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259e8:	e8 db e3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01259ed:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01259f0:	83 ec 0c             	sub    $0xc,%esp
f01259f3:	68 00 38 00 00       	push   $0x3800
f01259f8:	e8 7d 20 fe ff       	call   f0107a7a <kmalloc>
f01259fd:	83 c4 10             	add    $0x10,%esp
f0125a00:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a06:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125a0c:	89 c1                	mov    %eax,%ecx
f0125a0e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125a15:	10 00 00 
f0125a18:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125a1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a23:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125a29:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125a2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a34:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125a3a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125a40:	29 d0                	sub    %edx,%eax
f0125a42:	89 c3                	mov    %eax,%ebx
f0125a44:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125a4b:	10 00 00 
f0125a4e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125a53:	0f b6 d0             	movzbl %al,%edx
f0125a56:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125a5c:	01 d0                	add    %edx,%eax
f0125a5e:	48                   	dec    %eax
f0125a5f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125a65:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125a6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a70:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125a76:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125a7c:	29 d0                	sub    %edx,%eax
f0125a7e:	01 c3                	add    %eax,%ebx
f0125a80:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125a87:	10 00 00 
f0125a8a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125a8f:	0f b6 c0             	movzbl %al,%eax
f0125a92:	c1 e0 04             	shl    $0x4,%eax
f0125a95:	89 c2                	mov    %eax,%edx
f0125a97:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0125a9d:	01 d0                	add    %edx,%eax
f0125a9f:	48                   	dec    %eax
f0125aa0:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125aa6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125aac:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ab1:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125ab7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0125abd:	29 d0                	sub    %edx,%eax
f0125abf:	01 d8                	add    %ebx,%eax
f0125ac1:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125ac6:	39 c1                	cmp    %eax,%ecx
f0125ac8:	74 17                	je     f0125ae1 <test_kheap_virt_addr+0xa37>
f0125aca:	83 ec 04             	sub    $0x4,%esp
f0125acd:	68 20 b6 13 f0       	push   $0xf013b620
f0125ad2:	68 25 09 00 00       	push   $0x925
f0125ad7:	68 3a b5 13 f0       	push   $0xf013b53a
f0125adc:	e8 24 a7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ae1:	e8 e2 e2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125ae6:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125ae9:	74 17                	je     f0125b02 <test_kheap_virt_addr+0xa58>
f0125aeb:	83 ec 04             	sub    $0x4,%esp
f0125aee:	68 54 b5 13 f0       	push   $0xf013b554
f0125af3:	68 26 09 00 00       	push   $0x926
f0125af8:	68 3a b5 13 f0       	push   $0xf013b53a
f0125afd:	e8 03 a7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b02:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125b05:	e8 87 72 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125b0a:	29 c3                	sub    %eax,%ebx
f0125b0c:	89 d8                	mov    %ebx,%eax
f0125b0e:	83 f8 04             	cmp    $0x4,%eax
f0125b11:	74 17                	je     f0125b2a <test_kheap_virt_addr+0xa80>
f0125b13:	83 ec 04             	sub    $0x4,%esp
f0125b16:	68 bc b5 13 f0       	push   $0xf013b5bc
f0125b1b:	68 27 09 00 00       	push   $0x927
f0125b20:	68 3a b5 13 f0       	push   $0xf013b53a
f0125b25:	e8 db a6 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0125b2a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125b31:	10 00 00 
f0125b34:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0125b3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b3f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0125b45:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125b4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b50:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0125b56:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125b5c:	29 d0                	sub    %edx,%eax
f0125b5e:	89 c1                	mov    %eax,%ecx
f0125b60:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0125b67:	10 00 00 
f0125b6a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125b6f:	0f b6 d0             	movzbl %al,%edx
f0125b72:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0125b78:	01 d0                	add    %edx,%eax
f0125b7a:	48                   	dec    %eax
f0125b7b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0125b81:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125b87:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b8c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0125b92:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0125b98:	29 d0                	sub    %edx,%eax
f0125b9a:	01 c1                	add    %eax,%ecx
f0125b9c:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125ba3:	10 00 00 
f0125ba6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125bab:	0f b6 c0             	movzbl %al,%eax
f0125bae:	c1 e0 04             	shl    $0x4,%eax
f0125bb1:	89 c2                	mov    %eax,%edx
f0125bb3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125bb9:	01 d0                	add    %edx,%eax
f0125bbb:	48                   	dec    %eax
f0125bbc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0125bc2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125bc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bcd:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0125bd3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125bd9:	29 d0                	sub    %edx,%eax
f0125bdb:	01 c1                	add    %eax,%ecx
f0125bdd:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0125be4:	10 00 00 
f0125be7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125bed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125bf2:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125bf8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125bfe:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c03:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0125c09:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125c0f:	29 d0                	sub    %edx,%eax
f0125c11:	29 c1                	sub    %eax,%ecx
f0125c13:	89 c8                	mov    %ecx,%eax
f0125c15:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125c1a:	c1 e8 0c             	shr    $0xc,%eax
f0125c1d:	89 c2                	mov    %eax,%edx
f0125c1f:	4a                   	dec    %edx
f0125c20:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125c26:	c1 e0 02             	shl    $0x2,%eax
f0125c29:	8d 50 03             	lea    0x3(%eax),%edx
f0125c2c:	b8 10 00 00 00       	mov    $0x10,%eax
f0125c31:	48                   	dec    %eax
f0125c32:	01 d0                	add    %edx,%eax
f0125c34:	bf 10 00 00 00       	mov    $0x10,%edi
f0125c39:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c3e:	f7 f7                	div    %edi
f0125c40:	6b c0 10             	imul   $0x10,%eax,%eax
f0125c43:	29 c4                	sub    %eax,%esp
f0125c45:	89 e0                	mov    %esp,%eax
f0125c47:	83 c0 03             	add    $0x3,%eax
f0125c4a:	c1 e8 02             	shr    $0x2,%eax
f0125c4d:	c1 e0 02             	shl    $0x2,%eax
f0125c50:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0125c56:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125c5d:	10 00 00 
f0125c60:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125c66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c6b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125c71:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125c77:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c7c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0125c82:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125c88:	29 d0                	sub    %edx,%eax
f0125c8a:	89 c1                	mov    %eax,%ecx
f0125c8c:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0125c93:	10 00 00 
f0125c96:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125c9b:	0f b6 d0             	movzbl %al,%edx
f0125c9e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125ca4:	01 d0                	add    %edx,%eax
f0125ca6:	48                   	dec    %eax
f0125ca7:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0125cad:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125cb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cb8:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0125cbe:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125cc4:	29 d0                	sub    %edx,%eax
f0125cc6:	01 c1                	add    %eax,%ecx
f0125cc8:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0125ccf:	10 00 00 
f0125cd2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125cd7:	0f b6 c0             	movzbl %al,%eax
f0125cda:	c1 e0 04             	shl    $0x4,%eax
f0125cdd:	89 c2                	mov    %eax,%edx
f0125cdf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125ce5:	01 d0                	add    %edx,%eax
f0125ce7:	48                   	dec    %eax
f0125ce8:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0125cee:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125cf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cf9:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0125cff:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125d05:	29 d0                	sub    %edx,%eax
f0125d07:	01 c1                	add    %eax,%ecx
f0125d09:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125d10:	10 00 00 
f0125d13:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0125d19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d1e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125d24:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125d2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d2f:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125d35:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0125d3b:	29 d0                	sub    %edx,%eax
f0125d3d:	29 c1                	sub    %eax,%ecx
f0125d3f:	89 c8                	mov    %ecx,%eax
f0125d41:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125d46:	c1 e8 0c             	shr    $0xc,%eax
f0125d49:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125d4f:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0125d56:	10 00 00 
f0125d59:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0125d5f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d64:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0125d6a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125d70:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d75:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0125d7b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0125d81:	29 d0                	sub    %edx,%eax
f0125d83:	89 c1                	mov    %eax,%ecx
f0125d85:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0125d8c:	10 00 00 
f0125d8f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125d94:	0f b6 d0             	movzbl %al,%edx
f0125d97:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0125d9d:	01 d0                	add    %edx,%eax
f0125d9f:	48                   	dec    %eax
f0125da0:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125da6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125dac:	ba 00 00 00 00       	mov    $0x0,%edx
f0125db1:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125db7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0125dbd:	29 d0                	sub    %edx,%eax
f0125dbf:	01 c1                	add    %eax,%ecx
f0125dc1:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125dc8:	10 00 00 
f0125dcb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0125dd0:	0f b6 c0             	movzbl %al,%eax
f0125dd3:	c1 e0 04             	shl    $0x4,%eax
f0125dd6:	89 c2                	mov    %eax,%edx
f0125dd8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0125dde:	01 d0                	add    %edx,%eax
f0125de0:	48                   	dec    %eax
f0125de1:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125de7:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125ded:	ba 00 00 00 00       	mov    $0x0,%edx
f0125df2:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125df8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0125dfe:	29 d0                	sub    %edx,%eax
f0125e00:	01 c8                	add    %ecx,%eax
f0125e02:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125e07:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0125e0d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125e14:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0125e1b:	10 00 00 
f0125e1e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125e24:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e29:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125e2f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125e35:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e3a:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0125e40:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125e46:	29 d0                	sub    %edx,%eax
f0125e48:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125e4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0125e50:	e9 21 01 00 00       	jmp    f0125f76 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125e55:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0125e5a:	83 ec 04             	sub    $0x4,%esp
f0125e5d:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125e63:	52                   	push   %edx
f0125e64:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125e67:	50                   	push   %eax
f0125e68:	e8 44 0c fe ff       	call   f0106ab1 <get_page_table>
f0125e6d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125e70:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125e76:	85 c0                	test   %eax,%eax
f0125e78:	75 17                	jne    f0125e91 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125e7a:	83 ec 04             	sub    $0x4,%esp
f0125e7d:	68 dc be 13 f0       	push   $0xf013bedc
f0125e82:	68 38 09 00 00       	push   $0x938
f0125e87:	68 3a b5 13 f0       	push   $0xf013b53a
f0125e8c:	e8 74 a3 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125e91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125e94:	c1 e8 0c             	shr    $0xc,%eax
f0125e97:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125e9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0125e9f:	e9 ba 00 00 00       	jmp    f0125f5e <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125ea4:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125eaa:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125ead:	c1 e2 02             	shl    $0x2,%edx
f0125eb0:	01 d0                	add    %edx,%eax
f0125eb2:	8b 00                	mov    (%eax),%eax
f0125eb4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125eb9:	89 c1                	mov    %eax,%ecx
f0125ebb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125ec1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125ec4:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125ec7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125ecd:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125ed0:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125ed3:	83 ec 0c             	sub    $0xc,%esp
f0125ed6:	50                   	push   %eax
f0125ed7:	e8 90 1d fe ff       	call   f0107c6c <kheap_virtual_address>
f0125edc:	83 c4 10             	add    $0x10,%esp
f0125edf:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0125ee5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0125eeb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0125eee:	74 61                	je     f0125f51 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0125ef0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125ef6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125ef9:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125efc:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0125f02:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0125f05:	c1 e1 02             	shl    $0x2,%ecx
f0125f08:	01 ca                	add    %ecx,%edx
f0125f0a:	8b 12                	mov    (%edx),%edx
f0125f0c:	89 d1                	mov    %edx,%ecx
f0125f0e:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0125f14:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125f17:	c1 e2 0c             	shl    $0xc,%edx
f0125f1a:	89 d3                	mov    %edx,%ebx
f0125f1c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125f1f:	01 da                	add    %ebx,%edx
f0125f21:	83 ec 0c             	sub    $0xc,%esp
f0125f24:	50                   	push   %eax
f0125f25:	51                   	push   %ecx
f0125f26:	52                   	push   %edx
f0125f27:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0125f2d:	68 d0 bf 13 f0       	push   $0xf013bfd0
f0125f32:	e8 d7 ad fd ff       	call   f0100d0e <cprintf>
f0125f37:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0125f3a:	83 ec 04             	sub    $0x4,%esp
f0125f3d:	68 13 c0 13 f0       	push   $0xf013c013
f0125f42:	68 42 09 00 00       	push   $0x942
f0125f47:	68 3a b5 13 f0       	push   $0xf013b53a
f0125f4c:	e8 b4 a2 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0125f51:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125f58:	ff 45 dc             	incl   -0x24(%ebp)
f0125f5b:	ff 45 e0             	incl   -0x20(%ebp)
f0125f5e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125f61:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0125f67:	7d 0d                	jge    f0125f76 <test_kheap_virt_addr+0xecc>
f0125f69:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0125f70:	0f 8e 2e ff ff ff    	jle    f0125ea4 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125f76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125f79:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0125f7f:	0f 82 d0 fe ff ff    	jb     f0125e55 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0125f85:	83 ec 0c             	sub    $0xc,%esp
f0125f88:	68 30 c0 13 f0       	push   $0xf013c030
f0125f8d:	e8 7c ad fd ff       	call   f0100d0e <cprintf>
f0125f92:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125f95:	e8 f7 6d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125f9a:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125fa0:	e8 23 de fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125fa5:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0125fab:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125fb1:	83 ec 0c             	sub    $0xc,%esp
f0125fb4:	50                   	push   %eax
f0125fb5:	e8 8b 1b fe ff       	call   f0107b45 <kfree>
f0125fba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125fbd:	e8 06 de fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0125fc2:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125fc8:	74 17                	je     f0125fe1 <test_kheap_virt_addr+0xf37>
f0125fca:	83 ec 04             	sub    $0x4,%esp
f0125fcd:	68 54 b5 13 f0       	push   $0xf013b554
f0125fd2:	68 50 09 00 00       	push   $0x950
f0125fd7:	68 3a b5 13 f0       	push   $0xf013b53a
f0125fdc:	e8 24 a2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125fe1:	e8 ab 6d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0125fe6:	89 c2                	mov    %eax,%edx
f0125fe8:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125fee:	29 c2                	sub    %eax,%edx
f0125ff0:	89 d0                	mov    %edx,%eax
f0125ff2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125ff7:	74 17                	je     f0126010 <test_kheap_virt_addr+0xf66>
f0125ff9:	83 ec 04             	sub    $0x4,%esp
f0125ffc:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0126001:	68 51 09 00 00       	push   $0x951
f0126006:	68 3a b5 13 f0       	push   $0xf013b53a
f012600b:	e8 f5 a1 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126010:	e8 7c 6d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126015:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012601b:	e8 a8 dd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126020:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0126026:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012602c:	83 ec 0c             	sub    $0xc,%esp
f012602f:	50                   	push   %eax
f0126030:	e8 10 1b fe ff       	call   f0107b45 <kfree>
f0126035:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126038:	e8 8b dd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012603d:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126043:	74 17                	je     f012605c <test_kheap_virt_addr+0xfb2>
f0126045:	83 ec 04             	sub    $0x4,%esp
f0126048:	68 54 b5 13 f0       	push   $0xf013b554
f012604d:	68 57 09 00 00       	push   $0x957
f0126052:	68 3a b5 13 f0       	push   $0xf013b53a
f0126057:	e8 a9 a1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012605c:	e8 30 6d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126061:	89 c2                	mov    %eax,%edx
f0126063:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126069:	29 c2                	sub    %eax,%edx
f012606b:	89 d0                	mov    %edx,%eax
f012606d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126072:	74 17                	je     f012608b <test_kheap_virt_addr+0xfe1>
f0126074:	83 ec 04             	sub    $0x4,%esp
f0126077:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012607c:	68 58 09 00 00       	push   $0x958
f0126081:	68 3a b5 13 f0       	push   $0xf013b53a
f0126086:	e8 7a a1 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012608b:	e8 01 6d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126090:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126096:	e8 2d dd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012609b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f01260a1:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01260a7:	83 ec 0c             	sub    $0xc,%esp
f01260aa:	50                   	push   %eax
f01260ab:	e8 95 1a fe ff       	call   f0107b45 <kfree>
f01260b0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260b3:	e8 10 dd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01260b8:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01260be:	74 17                	je     f01260d7 <test_kheap_virt_addr+0x102d>
f01260c0:	83 ec 04             	sub    $0x4,%esp
f01260c3:	68 54 b5 13 f0       	push   $0xf013b554
f01260c8:	68 5e 09 00 00       	push   $0x95e
f01260cd:	68 3a b5 13 f0       	push   $0xf013b53a
f01260d2:	e8 2e a1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01260d7:	e8 b5 6c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01260dc:	89 c2                	mov    %eax,%edx
f01260de:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01260e4:	29 c2                	sub    %eax,%edx
f01260e6:	89 d0                	mov    %edx,%eax
f01260e8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01260ed:	74 17                	je     f0126106 <test_kheap_virt_addr+0x105c>
f01260ef:	83 ec 04             	sub    $0x4,%esp
f01260f2:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01260f7:	68 5f 09 00 00       	push   $0x95f
f01260fc:	68 3a b5 13 f0       	push   $0xf013b53a
f0126101:	e8 ff a0 fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0126106:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012610d:	10 00 00 
f0126110:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126116:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012611b:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0126121:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126127:	ba 00 00 00 00       	mov    $0x0,%edx
f012612c:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0126132:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126138:	29 d0                	sub    %edx,%eax
f012613a:	89 c1                	mov    %eax,%ecx
f012613c:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0126143:	10 00 00 
f0126146:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012614b:	0f b6 d0             	movzbl %al,%edx
f012614e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126154:	01 d0                	add    %edx,%eax
f0126156:	48                   	dec    %eax
f0126157:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012615d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0126163:	ba 00 00 00 00       	mov    $0x0,%edx
f0126168:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012616e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0126174:	29 d0                	sub    %edx,%eax
f0126176:	01 c1                	add    %eax,%ecx
f0126178:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012617f:	10 00 00 
f0126182:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126187:	0f b6 c0             	movzbl %al,%eax
f012618a:	c1 e0 04             	shl    $0x4,%eax
f012618d:	89 c2                	mov    %eax,%edx
f012618f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0126195:	01 d0                	add    %edx,%eax
f0126197:	48                   	dec    %eax
f0126198:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012619e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01261a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01261a9:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01261af:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01261b5:	29 d0                	sub    %edx,%eax
f01261b7:	01 c8                	add    %ecx,%eax
f01261b9:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01261be:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f01261c4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f01261cb:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01261d2:	10 00 00 
f01261d5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01261db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01261e0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01261e6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01261ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01261f1:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01261f7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01261fd:	29 d0                	sub    %edx,%eax
f01261ff:	89 c1                	mov    %eax,%ecx
f0126201:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0126208:	10 00 00 
f012620b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126210:	0f b6 d0             	movzbl %al,%edx
f0126213:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0126219:	01 d0                	add    %edx,%eax
f012621b:	48                   	dec    %eax
f012621c:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0126222:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126228:	ba 00 00 00 00       	mov    $0x0,%edx
f012622d:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0126233:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126239:	29 d0                	sub    %edx,%eax
f012623b:	01 c1                	add    %eax,%ecx
f012623d:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0126244:	10 00 00 
f0126247:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012624c:	0f b6 c0             	movzbl %al,%eax
f012624f:	c1 e0 04             	shl    $0x4,%eax
f0126252:	89 c2                	mov    %eax,%edx
f0126254:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012625a:	01 d0                	add    %edx,%eax
f012625c:	48                   	dec    %eax
f012625d:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0126263:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126269:	ba 00 00 00 00       	mov    $0x0,%edx
f012626e:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0126274:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012627a:	29 d0                	sub    %edx,%eax
f012627c:	01 c1                	add    %eax,%ecx
f012627e:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0126285:	10 00 00 
f0126288:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012628e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126293:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0126299:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012629f:	ba 00 00 00 00       	mov    $0x0,%edx
f01262a4:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f01262aa:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01262b0:	29 d0                	sub    %edx,%eax
f01262b2:	29 c1                	sub    %eax,%ecx
f01262b4:	89 c8                	mov    %ecx,%eax
f01262b6:	05 00 40 00 00       	add    $0x4000,%eax
f01262bb:	c1 e8 0c             	shr    $0xc,%eax
f01262be:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01262c4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01262ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01262cd:	eb 41                	jmp    f0126310 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01262cf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01262d5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01262d8:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01262db:	83 ec 0c             	sub    $0xc,%esp
f01262de:	50                   	push   %eax
f01262df:	e8 88 19 fe ff       	call   f0107c6c <kheap_virtual_address>
f01262e4:	83 c4 10             	add    $0x10,%esp
f01262e7:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f01262ed:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f01262f4:	74 17                	je     f012630d <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f01262f6:	83 ec 04             	sub    $0x4,%esp
f01262f9:	68 13 c0 13 f0       	push   $0xf013c013
f01262fe:	68 70 09 00 00       	push   $0x970
f0126303:	68 3a b5 13 f0       	push   $0xf013b53a
f0126308:	e8 f8 9e fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012630d:	ff 45 d8             	incl   -0x28(%ebp)
f0126310:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126316:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f012631c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012631f:	39 c2                	cmp    %eax,%edx
f0126321:	77 ac                	ja     f01262cf <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126323:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126329:	05 00 04 00 00       	add    $0x400,%eax
f012632e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126331:	e9 83 00 00 00       	jmp    f01263b9 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126336:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012633c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012633f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126342:	83 ec 0c             	sub    $0xc,%esp
f0126345:	50                   	push   %eax
f0126346:	e8 21 19 fe ff       	call   f0107c6c <kheap_virtual_address>
f012634b:	83 c4 10             	add    $0x10,%esp
f012634e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0126354:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f012635b:	10 00 00 
f012635e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0126364:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126369:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012636f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126375:	ba 00 00 00 00       	mov    $0x0,%edx
f012637a:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0126380:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126386:	29 d0                	sub    %edx,%eax
f0126388:	89 c2                	mov    %eax,%edx
f012638a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012638d:	c1 e0 0c             	shl    $0xc,%eax
f0126390:	01 d0                	add    %edx,%eax
f0126392:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126397:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f012639d:	74 17                	je     f01263b6 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f012639f:	83 ec 04             	sub    $0x4,%esp
f01263a2:	68 13 c0 13 f0       	push   $0xf013c013
f01263a7:	68 7a 09 00 00       	push   $0x97a
f01263ac:	68 3a b5 13 f0       	push   $0xf013b53a
f01263b1:	e8 4f 9e fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01263b6:	ff 45 d8             	incl   -0x28(%ebp)
f01263b9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01263bf:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f01263c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01263c8:	39 c2                	cmp    %eax,%edx
f01263ca:	0f 87 66 ff ff ff    	ja     f0126336 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01263d0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01263d6:	05 04 07 00 00       	add    $0x704,%eax
f01263db:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01263de:	eb 41                	jmp    f0126421 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01263e0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01263e6:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01263e9:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01263ec:	83 ec 0c             	sub    $0xc,%esp
f01263ef:	50                   	push   %eax
f01263f0:	e8 77 18 fe ff       	call   f0107c6c <kheap_virtual_address>
f01263f5:	83 c4 10             	add    $0x10,%esp
f01263f8:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f01263fe:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0126405:	74 17                	je     f012641e <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0126407:	83 ec 04             	sub    $0x4,%esp
f012640a:	68 13 c0 13 f0       	push   $0xf013c013
f012640f:	68 83 09 00 00       	push   $0x983
f0126414:	68 3a b5 13 f0       	push   $0xf013b53a
f0126419:	e8 e7 9d fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012641e:	ff 45 d8             	incl   -0x28(%ebp)
f0126421:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126427:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f012642d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126430:	39 c2                	cmp    %eax,%edx
f0126432:	77 ac                	ja     f01263e0 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126434:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012643a:	05 04 0d 00 00       	add    $0xd04,%eax
f012643f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126442:	e9 83 00 00 00       	jmp    f01264ca <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126447:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012644d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126450:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126453:	83 ec 0c             	sub    $0xc,%esp
f0126456:	50                   	push   %eax
f0126457:	e8 10 18 fe ff       	call   f0107c6c <kheap_virtual_address>
f012645c:	83 c4 10             	add    $0x10,%esp
f012645f:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0126465:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f012646c:	10 00 00 
f012646f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0126475:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012647a:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0126480:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126486:	ba 00 00 00 00       	mov    $0x0,%edx
f012648b:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0126491:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126497:	29 d0                	sub    %edx,%eax
f0126499:	89 c2                	mov    %eax,%edx
f012649b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012649e:	c1 e0 0c             	shl    $0xc,%eax
f01264a1:	01 d0                	add    %edx,%eax
f01264a3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01264a8:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f01264ae:	74 17                	je     f01264c7 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f01264b0:	83 ec 04             	sub    $0x4,%esp
f01264b3:	68 13 c0 13 f0       	push   $0xf013c013
f01264b8:	68 8c 09 00 00       	push   $0x98c
f01264bd:	68 3a b5 13 f0       	push   $0xf013b53a
f01264c2:	e8 3e 9d fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01264c7:	ff 45 d8             	incl   -0x28(%ebp)
f01264ca:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01264d0:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f01264d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01264d9:	39 c2                	cmp    %eax,%edx
f01264db:	0f 87 66 ff ff ff    	ja     f0126447 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f01264e1:	83 ec 0c             	sub    $0xc,%esp
f01264e4:	68 c5 b6 13 f0       	push   $0xf013b6c5
f01264e9:	e8 20 a8 fd ff       	call   f0100d0e <cprintf>
f01264ee:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01264f1:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f01264f8:	eb 54                	jmp    f012654e <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f01264fa:	83 ec 0c             	sub    $0xc,%esp
f01264fd:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126500:	e8 67 17 fe ff       	call   f0107c6c <kheap_virtual_address>
f0126505:	83 c4 10             	add    $0x10,%esp
f0126508:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f012650e:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0126515:	74 30                	je     f0126547 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0126517:	83 ec 04             	sub    $0x4,%esp
f012651a:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126520:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126523:	68 61 c0 13 f0       	push   $0xf013c061
f0126528:	e8 e1 a7 fd ff       	call   f0100d0e <cprintf>
f012652d:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126530:	83 ec 04             	sub    $0x4,%esp
f0126533:	68 13 c0 13 f0       	push   $0xf013c013
f0126538:	68 9c 09 00 00       	push   $0x99c
f012653d:	68 3a b5 13 f0       	push   $0xf013b53a
f0126542:	e8 be 9c fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126547:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f012654e:	b8 bc 1e 88 00       	mov    $0x881ebc,%eax
f0126553:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0126556:	72 a2                	jb     f01264fa <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0126558:	83 ec 0c             	sub    $0xc,%esp
f012655b:	68 1e b7 13 f0       	push   $0xf013b71e
f0126560:	e8 a9 a7 fd ff       	call   f0100d0e <cprintf>
f0126565:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0126568:	83 ec 0c             	sub    $0xc,%esp
f012656b:	68 80 c0 13 f0       	push   $0xf013c080
f0126570:	e8 99 a7 fd ff       	call   f0100d0e <cprintf>
f0126575:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126578:	b8 01 00 00 00       	mov    $0x1,%eax
f012657d:	89 f4                	mov    %esi,%esp

}
f012657f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126582:	5b                   	pop    %ebx
f0126583:	5e                   	pop    %esi
f0126584:	5f                   	pop    %edi
f0126585:	5d                   	pop    %ebp
f0126586:	c3                   	ret    

f0126587 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0126587:	55                   	push   %ebp
f0126588:	89 e5                	mov    %esp,%ebp
f012658a:	57                   	push   %edi
f012658b:	56                   	push   %esi
f012658c:	53                   	push   %ebx
f012658d:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0126593:	a0 23 3d 19 f0       	mov    0xf0193d23,%al
f0126598:	84 c0                	test   %al,%al
f012659a:	74 56                	je     f01265f2 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f012659c:	c6 05 23 3d 19 f0 00 	movb   $0x0,0xf0193d23
		initFreeFrames = sys_calculate_free_frames() ;
f01265a3:	e8 e9 67 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01265a8:	a3 b8 1e 88 f0       	mov    %eax,0xf0881eb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f01265ad:	e8 16 d8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01265b2:	a3 b4 1e 88 f0       	mov    %eax,0xf0881eb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f01265b7:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01265bd:	bb dd c1 13 f0       	mov    $0xf013c1dd,%ebx
f01265c2:	ba 11 00 00 00       	mov    $0x11,%edx
f01265c7:	89 c7                	mov    %eax,%edi
f01265c9:	89 de                	mov    %ebx,%esi
f01265cb:	89 d1                	mov    %edx,%ecx
f01265cd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01265cf:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f01265d5:	b9 53 00 00 00       	mov    $0x53,%ecx
f01265da:	b0 00                	mov    $0x0,%al
f01265dc:	89 d7                	mov    %edx,%edi
f01265de:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f01265e0:	83 ec 0c             	sub    $0xc,%esp
f01265e3:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01265e9:	50                   	push   %eax
f01265ea:	e8 81 a7 fd ff       	call   f0100d70 <execute_command>
f01265ef:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f01265f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f01265f9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126600:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f0126605:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126608:	eb 2d                	jmp    f0126637 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f012660a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012660d:	05 5c 05 00 00       	add    $0x55c,%eax
f0126612:	83 ec 08             	sub    $0x8,%esp
f0126615:	68 c7 c0 13 f0       	push   $0xf013c0c7
f012661a:	50                   	push   %eax
f012661b:	e8 79 af 00 00       	call   f0131599 <strcmp>
f0126620:	83 c4 10             	add    $0x10,%esp
f0126623:	85 c0                	test   %eax,%eax
f0126625:	75 08                	jne    f012662f <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126627:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012662a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f012662d:	eb 2f                	jmp    f012665e <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012662f:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0126634:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126637:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012663b:	74 08                	je     f0126645 <test_three_creation_functions+0xbe>
f012663d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126640:	8b 40 44             	mov    0x44(%eax),%eax
f0126643:	eb 05                	jmp    f012664a <test_three_creation_functions+0xc3>
f0126645:	b8 00 00 00 00       	mov    $0x0,%eax
f012664a:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f012664f:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f0126654:	85 c0                	test   %eax,%eax
f0126656:	75 b2                	jne    f012660a <test_three_creation_functions+0x83>
f0126658:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012665c:	75 ac                	jne    f012660a <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f012665e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126661:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0126667:	85 c0                	test   %eax,%eax
f0126669:	74 17                	je     f0126682 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f012666b:	83 ec 04             	sub    $0x4,%esp
f012666e:	68 d0 c0 13 f0       	push   $0xf013c0d0
f0126673:	68 c6 09 00 00       	push   $0x9c6
f0126678:	68 3a b5 13 f0       	push   $0xf013b53a
f012667d:	e8 83 9b fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0126682:	83 ec 0c             	sub    $0xc,%esp
f0126685:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126688:	e8 7e 19 fe ff       	call   f010800b <env_page_ws_get_size>
f012668d:	83 c4 10             	add    $0x10,%esp
f0126690:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0126693:	e8 f9 66 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126698:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f012669b:	e8 28 d7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01266a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01266a3:	a1 b4 1e 88 f0       	mov    0xf0881eb4,%eax
f01266a8:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01266ab:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01266ae:	74 17                	je     f01266c7 <test_three_creation_functions+0x140>
f01266b0:	83 ec 04             	sub    $0x4,%esp
f01266b3:	68 54 b5 13 f0       	push   $0xf013b554
f01266b8:	68 cc 09 00 00       	push   $0x9cc
f01266bd:	68 3a b5 13 f0       	push   $0xf013b53a
f01266c2:	e8 3e 9b fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f01266c7:	a1 b8 1e 88 f0       	mov    0xf0881eb8,%eax
f01266cc:	2b 45 d8             	sub    -0x28(%ebp),%eax
f01266cf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01266d2:	83 c2 15             	add    $0x15,%edx
f01266d5:	39 d0                	cmp    %edx,%eax
f01266d7:	74 17                	je     f01266f0 <test_three_creation_functions+0x169>
f01266d9:	83 ec 04             	sub    $0x4,%esp
f01266dc:	68 bc b5 13 f0       	push   $0xf013b5bc
f01266e1:	68 ce 09 00 00       	push   $0x9ce
f01266e6:	68 3a b5 13 f0       	push   $0xf013b53a
f01266eb:	e8 15 9b fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f01266f0:	83 ec 0c             	sub    $0xc,%esp
f01266f3:	68 00 10 00 00       	push   $0x1000
f01266f8:	e8 7d 13 fe ff       	call   f0107a7a <kmalloc>
f01266fd:	83 c4 10             	add    $0x10,%esp
f0126700:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126703:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012670a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012670d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126712:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126715:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126718:	ba 00 00 00 00       	mov    $0x0,%edx
f012671d:	f7 75 cc             	divl   -0x34(%ebp)
f0126720:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126723:	29 d0                	sub    %edx,%eax
f0126725:	89 c1                	mov    %eax,%ecx
f0126727:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012672e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126733:	0f b6 d0             	movzbl %al,%edx
f0126736:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126739:	01 d0                	add    %edx,%eax
f012673b:	48                   	dec    %eax
f012673c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012673f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126742:	ba 00 00 00 00       	mov    $0x0,%edx
f0126747:	f7 75 c4             	divl   -0x3c(%ebp)
f012674a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012674d:	29 d0                	sub    %edx,%eax
f012674f:	01 c1                	add    %eax,%ecx
f0126751:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126758:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012675d:	0f b6 c0             	movzbl %al,%eax
f0126760:	c1 e0 04             	shl    $0x4,%eax
f0126763:	89 c2                	mov    %eax,%edx
f0126765:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126768:	01 d0                	add    %edx,%eax
f012676a:	48                   	dec    %eax
f012676b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012676e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126771:	ba 00 00 00 00       	mov    $0x0,%edx
f0126776:	f7 75 bc             	divl   -0x44(%ebp)
f0126779:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012677c:	29 d0                	sub    %edx,%eax
f012677e:	01 c8                	add    %ecx,%eax
f0126780:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126786:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126789:	39 c2                	cmp    %eax,%edx
f012678b:	74 17                	je     f01267a4 <test_three_creation_functions+0x21d>
f012678d:	83 ec 04             	sub    $0x4,%esp
f0126790:	68 20 c1 13 f0       	push   $0xf013c120
f0126795:	68 d2 09 00 00       	push   $0x9d2
f012679a:	68 3a b5 13 f0       	push   $0xf013b53a
f012679f:	e8 61 9a fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f01267a4:	83 ec 0c             	sub    $0xc,%esp
f01267a7:	68 90 c1 13 f0       	push   $0xf013c190
f01267ac:	e8 5d a5 fd ff       	call   f0100d0e <cprintf>
f01267b1:	83 c4 10             	add    $0x10,%esp

	return 1;
f01267b4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01267b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01267bc:	5b                   	pop    %ebx
f01267bd:	5e                   	pop    %esi
f01267be:	5f                   	pop    %edi
f01267bf:	5d                   	pop    %ebp
f01267c0:	c3                   	ret    

f01267c1 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f01267c1:	55                   	push   %ebp
f01267c2:	89 e5                	mov    %esp,%ebp
f01267c4:	57                   	push   %edi
f01267c5:	53                   	push   %ebx
f01267c6:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f01267cc:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01267d0:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01267d4:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01267da:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01267e0:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01267e7:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01267ee:	e8 9e 65 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01267f3:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01267f6:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01267fc:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126801:	b8 00 00 00 00       	mov    $0x0,%eax
f0126806:	89 d7                	mov    %edx,%edi
f0126808:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012680a:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126810:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126815:	b8 00 00 00 00       	mov    $0x0,%eax
f012681a:	89 d7                	mov    %edx,%edi
f012681c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012681e:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126824:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126829:	b8 00 00 00 00       	mov    $0x0,%eax
f012682e:	89 d7                	mov    %edx,%edi
f0126830:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126832:	e8 5a 65 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126837:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012683a:	e8 89 d5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012683f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126842:	83 ec 0c             	sub    $0xc,%esp
f0126845:	68 00 fc 1f 00       	push   $0x1ffc00
f012684a:	e8 2b 12 fe ff       	call   f0107a7a <kmalloc>
f012684f:	83 c4 10             	add    $0x10,%esp
f0126852:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126858:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012685e:	89 c1                	mov    %eax,%ecx
f0126860:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126867:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012686a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012686f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126872:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126875:	ba 00 00 00 00       	mov    $0x0,%edx
f012687a:	f7 75 c8             	divl   -0x38(%ebp)
f012687d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126880:	29 d0                	sub    %edx,%eax
f0126882:	89 c3                	mov    %eax,%ebx
f0126884:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012688b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126890:	0f b6 d0             	movzbl %al,%edx
f0126893:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126896:	01 d0                	add    %edx,%eax
f0126898:	48                   	dec    %eax
f0126899:	89 45 bc             	mov    %eax,-0x44(%ebp)
f012689c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012689f:	ba 00 00 00 00       	mov    $0x0,%edx
f01268a4:	f7 75 c0             	divl   -0x40(%ebp)
f01268a7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01268aa:	29 d0                	sub    %edx,%eax
f01268ac:	01 c3                	add    %eax,%ebx
f01268ae:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01268b5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01268ba:	0f b6 c0             	movzbl %al,%eax
f01268bd:	c1 e0 04             	shl    $0x4,%eax
f01268c0:	89 c2                	mov    %eax,%edx
f01268c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01268c5:	01 d0                	add    %edx,%eax
f01268c7:	48                   	dec    %eax
f01268c8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01268cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01268ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01268d3:	f7 75 b8             	divl   -0x48(%ebp)
f01268d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01268d9:	29 d0                	sub    %edx,%eax
f01268db:	01 d8                	add    %ebx,%eax
f01268dd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01268e2:	39 c1                	cmp    %eax,%ecx
f01268e4:	74 17                	je     f01268fd <test_kfreeall+0x13c>
f01268e6:	83 ec 04             	sub    $0x4,%esp
f01268e9:	68 20 b6 13 f0       	push   $0xf013b620
f01268ee:	68 f9 09 00 00       	push   $0x9f9
f01268f3:	68 3a b5 13 f0       	push   $0xf013b53a
f01268f8:	e8 08 99 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01268fd:	e8 c6 d4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126902:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126905:	74 17                	je     f012691e <test_kfreeall+0x15d>
f0126907:	83 ec 04             	sub    $0x4,%esp
f012690a:	68 54 b5 13 f0       	push   $0xf013b554
f012690f:	68 fa 09 00 00       	push   $0x9fa
f0126914:	68 3a b5 13 f0       	push   $0xf013b53a
f0126919:	e8 e7 98 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012691e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126921:	e8 6b 64 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126926:	29 c3                	sub    %eax,%ebx
f0126928:	89 d8                	mov    %ebx,%eax
f012692a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012692f:	74 17                	je     f0126948 <test_kfreeall+0x187>
f0126931:	83 ec 04             	sub    $0x4,%esp
f0126934:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126939:	68 fb 09 00 00       	push   $0x9fb
f012693e:	68 3a b5 13 f0       	push   $0xf013b53a
f0126943:	e8 bd 98 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126948:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f012694f:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126952:	e8 3a 64 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126957:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012695a:	e8 69 d4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012695f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126962:	83 ec 0c             	sub    $0xc,%esp
f0126965:	68 00 fc 1f 00       	push   $0x1ffc00
f012696a:	e8 0b 11 fe ff       	call   f0107a7a <kmalloc>
f012696f:	83 c4 10             	add    $0x10,%esp
f0126972:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126978:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012697e:	89 c1                	mov    %eax,%ecx
f0126980:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126987:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012698a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012698f:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126992:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126995:	ba 00 00 00 00       	mov    $0x0,%edx
f012699a:	f7 75 b0             	divl   -0x50(%ebp)
f012699d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01269a0:	29 d0                	sub    %edx,%eax
f01269a2:	89 c3                	mov    %eax,%ebx
f01269a4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01269ab:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01269b0:	0f b6 d0             	movzbl %al,%edx
f01269b3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01269b6:	01 d0                	add    %edx,%eax
f01269b8:	48                   	dec    %eax
f01269b9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01269bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01269bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01269c4:	f7 75 a8             	divl   -0x58(%ebp)
f01269c7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01269ca:	29 d0                	sub    %edx,%eax
f01269cc:	01 c3                	add    %eax,%ebx
f01269ce:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01269d5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01269da:	0f b6 c0             	movzbl %al,%eax
f01269dd:	c1 e0 04             	shl    $0x4,%eax
f01269e0:	89 c2                	mov    %eax,%edx
f01269e2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01269e5:	01 d0                	add    %edx,%eax
f01269e7:	48                   	dec    %eax
f01269e8:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01269eb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01269ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01269f3:	f7 75 a0             	divl   -0x60(%ebp)
f01269f6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01269f9:	29 d0                	sub    %edx,%eax
f01269fb:	01 d8                	add    %ebx,%eax
f01269fd:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126a02:	39 c1                	cmp    %eax,%ecx
f0126a04:	74 17                	je     f0126a1d <test_kfreeall+0x25c>
f0126a06:	83 ec 04             	sub    $0x4,%esp
f0126a09:	68 20 b6 13 f0       	push   $0xf013b620
f0126a0e:	68 02 0a 00 00       	push   $0xa02
f0126a13:	68 3a b5 13 f0       	push   $0xf013b53a
f0126a18:	e8 e8 97 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a1d:	e8 a6 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a22:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a25:	74 17                	je     f0126a3e <test_kfreeall+0x27d>
f0126a27:	83 ec 04             	sub    $0x4,%esp
f0126a2a:	68 54 b5 13 f0       	push   $0xf013b554
f0126a2f:	68 03 0a 00 00       	push   $0xa03
f0126a34:	68 3a b5 13 f0       	push   $0xf013b53a
f0126a39:	e8 c7 97 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a3e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a41:	e8 4b 63 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126a46:	29 c3                	sub    %eax,%ebx
f0126a48:	89 d8                	mov    %ebx,%eax
f0126a4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126a4f:	74 17                	je     f0126a68 <test_kfreeall+0x2a7>
f0126a51:	83 ec 04             	sub    $0x4,%esp
f0126a54:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126a59:	68 04 0a 00 00       	push   $0xa04
f0126a5e:	68 3a b5 13 f0       	push   $0xf013b53a
f0126a63:	e8 9d 97 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126a68:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126a6f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126a72:	e8 1a 63 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126a77:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a7a:	e8 49 d3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126a7f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126a82:	83 ec 0c             	sub    $0xc,%esp
f0126a85:	68 00 08 00 00       	push   $0x800
f0126a8a:	e8 eb 0f fe ff       	call   f0107a7a <kmalloc>
f0126a8f:	83 c4 10             	add    $0x10,%esp
f0126a92:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126a98:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126a9e:	89 c1                	mov    %eax,%ecx
f0126aa0:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126aa7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126aaa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126aaf:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126ab2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126ab5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126aba:	f7 75 98             	divl   -0x68(%ebp)
f0126abd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126ac0:	29 d0                	sub    %edx,%eax
f0126ac2:	89 c3                	mov    %eax,%ebx
f0126ac4:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126acb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126ad0:	0f b6 d0             	movzbl %al,%edx
f0126ad3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126ad6:	01 d0                	add    %edx,%eax
f0126ad8:	48                   	dec    %eax
f0126ad9:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126adc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126adf:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ae4:	f7 75 90             	divl   -0x70(%ebp)
f0126ae7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126aea:	29 d0                	sub    %edx,%eax
f0126aec:	01 c3                	add    %eax,%ebx
f0126aee:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126af5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126afa:	0f b6 c0             	movzbl %al,%eax
f0126afd:	c1 e0 04             	shl    $0x4,%eax
f0126b00:	89 c2                	mov    %eax,%edx
f0126b02:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126b05:	01 d0                	add    %edx,%eax
f0126b07:	48                   	dec    %eax
f0126b08:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126b0b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126b0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b13:	f7 75 88             	divl   -0x78(%ebp)
f0126b16:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126b19:	29 d0                	sub    %edx,%eax
f0126b1b:	01 d8                	add    %ebx,%eax
f0126b1d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126b22:	39 c1                	cmp    %eax,%ecx
f0126b24:	74 17                	je     f0126b3d <test_kfreeall+0x37c>
f0126b26:	83 ec 04             	sub    $0x4,%esp
f0126b29:	68 20 b6 13 f0       	push   $0xf013b620
f0126b2e:	68 0b 0a 00 00       	push   $0xa0b
f0126b33:	68 3a b5 13 f0       	push   $0xf013b53a
f0126b38:	e8 c8 96 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b3d:	e8 86 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126b42:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b45:	74 17                	je     f0126b5e <test_kfreeall+0x39d>
f0126b47:	83 ec 04             	sub    $0x4,%esp
f0126b4a:	68 54 b5 13 f0       	push   $0xf013b554
f0126b4f:	68 0c 0a 00 00       	push   $0xa0c
f0126b54:	68 3a b5 13 f0       	push   $0xf013b53a
f0126b59:	e8 a7 96 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b5e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126b61:	e8 2b 62 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126b66:	29 c3                	sub    %eax,%ebx
f0126b68:	89 d8                	mov    %ebx,%eax
f0126b6a:	83 f8 01             	cmp    $0x1,%eax
f0126b6d:	74 17                	je     f0126b86 <test_kfreeall+0x3c5>
f0126b6f:	83 ec 04             	sub    $0x4,%esp
f0126b72:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126b77:	68 0d 0a 00 00       	push   $0xa0d
f0126b7c:	68 3a b5 13 f0       	push   $0xf013b53a
f0126b81:	e8 7f 96 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126b86:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0126b8d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126b90:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126b96:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126b99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126ba0:	eb 0e                	jmp    f0126bb0 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126ba5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ba8:	01 d0                	add    %edx,%eax
f0126baa:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126bad:	ff 45 f4             	incl   -0xc(%ebp)
f0126bb0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126bb6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126bb9:	7f e7                	jg     f0126ba2 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126bbb:	e8 d1 61 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126bc0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126bc3:	e8 00 d2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126bc8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126bcb:	83 ec 0c             	sub    $0xc,%esp
f0126bce:	68 00 08 00 00       	push   $0x800
f0126bd3:	e8 a2 0e fe ff       	call   f0107a7a <kmalloc>
f0126bd8:	83 c4 10             	add    $0x10,%esp
f0126bdb:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126be1:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126be7:	89 c1                	mov    %eax,%ecx
f0126be9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0126bf0:	10 00 00 
f0126bf3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126bf9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126bfe:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126c04:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126c0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c0f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126c15:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126c1b:	29 d0                	sub    %edx,%eax
f0126c1d:	89 c3                	mov    %eax,%ebx
f0126c1f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126c26:	10 00 00 
f0126c29:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126c2e:	0f b6 d0             	movzbl %al,%edx
f0126c31:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126c37:	01 d0                	add    %edx,%eax
f0126c39:	48                   	dec    %eax
f0126c3a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0126c40:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126c46:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c4b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0126c51:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126c57:	29 d0                	sub    %edx,%eax
f0126c59:	01 c3                	add    %eax,%ebx
f0126c5b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0126c62:	10 00 00 
f0126c65:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126c6a:	0f b6 c0             	movzbl %al,%eax
f0126c6d:	c1 e0 04             	shl    $0x4,%eax
f0126c70:	89 c2                	mov    %eax,%edx
f0126c72:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126c78:	01 d0                	add    %edx,%eax
f0126c7a:	48                   	dec    %eax
f0126c7b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0126c81:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126c87:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c8c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0126c92:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126c98:	29 d0                	sub    %edx,%eax
f0126c9a:	01 d8                	add    %ebx,%eax
f0126c9c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126ca1:	39 c1                	cmp    %eax,%ecx
f0126ca3:	74 17                	je     f0126cbc <test_kfreeall+0x4fb>
f0126ca5:	83 ec 04             	sub    $0x4,%esp
f0126ca8:	68 20 b6 13 f0       	push   $0xf013b620
f0126cad:	68 19 0a 00 00       	push   $0xa19
f0126cb2:	68 3a b5 13 f0       	push   $0xf013b53a
f0126cb7:	e8 49 95 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126cbc:	e8 07 d1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126cc1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126cc4:	74 17                	je     f0126cdd <test_kfreeall+0x51c>
f0126cc6:	83 ec 04             	sub    $0x4,%esp
f0126cc9:	68 54 b5 13 f0       	push   $0xf013b554
f0126cce:	68 1a 0a 00 00       	push   $0xa1a
f0126cd3:	68 3a b5 13 f0       	push   $0xf013b53a
f0126cd8:	e8 28 95 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126cdd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126ce0:	e8 ac 60 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126ce5:	29 c3                	sub    %eax,%ebx
f0126ce7:	89 d8                	mov    %ebx,%eax
f0126ce9:	83 f8 01             	cmp    $0x1,%eax
f0126cec:	74 17                	je     f0126d05 <test_kfreeall+0x544>
f0126cee:	83 ec 04             	sub    $0x4,%esp
f0126cf1:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126cf6:	68 1b 0a 00 00       	push   $0xa1b
f0126cfb:	68 3a b5 13 f0       	push   $0xf013b53a
f0126d00:	e8 00 95 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126d05:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0126d0c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126d0f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126d15:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126d18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d1f:	eb 0e                	jmp    f0126d2f <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126d21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126d24:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126d27:	01 d0                	add    %edx,%eax
f0126d29:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126d2c:	ff 45 f4             	incl   -0xc(%ebp)
f0126d2f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126d35:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126d38:	7f e7                	jg     f0126d21 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126d3a:	e8 52 60 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126d3f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d42:	e8 81 d0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126d47:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126d4a:	83 ec 0c             	sub    $0xc,%esp
f0126d4d:	68 00 1c 00 00       	push   $0x1c00
f0126d52:	e8 23 0d fe ff       	call   f0107a7a <kmalloc>
f0126d57:	83 c4 10             	add    $0x10,%esp
f0126d5a:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126d60:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126d66:	89 c1                	mov    %eax,%ecx
f0126d68:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0126d6f:	10 00 00 
f0126d72:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126d78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d7d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0126d83:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126d89:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d8e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0126d94:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126d9a:	29 d0                	sub    %edx,%eax
f0126d9c:	89 c3                	mov    %eax,%ebx
f0126d9e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126da5:	10 00 00 
f0126da8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126dad:	0f b6 d0             	movzbl %al,%edx
f0126db0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126db6:	01 d0                	add    %edx,%eax
f0126db8:	48                   	dec    %eax
f0126db9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126dbf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126dc5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126dca:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126dd0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126dd6:	29 d0                	sub    %edx,%eax
f0126dd8:	01 c3                	add    %eax,%ebx
f0126dda:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0126de1:	10 00 00 
f0126de4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126de9:	0f b6 c0             	movzbl %al,%eax
f0126dec:	c1 e0 04             	shl    $0x4,%eax
f0126def:	89 c2                	mov    %eax,%edx
f0126df1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126df7:	01 d0                	add    %edx,%eax
f0126df9:	48                   	dec    %eax
f0126dfa:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0126e00:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126e06:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e0b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126e11:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126e17:	29 d0                	sub    %edx,%eax
f0126e19:	01 d8                	add    %ebx,%eax
f0126e1b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126e20:	39 c1                	cmp    %eax,%ecx
f0126e22:	74 17                	je     f0126e3b <test_kfreeall+0x67a>
f0126e24:	83 ec 04             	sub    $0x4,%esp
f0126e27:	68 20 b6 13 f0       	push   $0xf013b620
f0126e2c:	68 27 0a 00 00       	push   $0xa27
f0126e31:	68 3a b5 13 f0       	push   $0xf013b53a
f0126e36:	e8 ca 93 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e3b:	e8 88 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126e40:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e43:	74 17                	je     f0126e5c <test_kfreeall+0x69b>
f0126e45:	83 ec 04             	sub    $0x4,%esp
f0126e48:	68 54 b5 13 f0       	push   $0xf013b554
f0126e4d:	68 28 0a 00 00       	push   $0xa28
f0126e52:	68 3a b5 13 f0       	push   $0xf013b53a
f0126e57:	e8 a9 93 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e5c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126e5f:	e8 2d 5f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126e64:	29 c3                	sub    %eax,%ebx
f0126e66:	89 d8                	mov    %ebx,%eax
f0126e68:	83 f8 02             	cmp    $0x2,%eax
f0126e6b:	74 17                	je     f0126e84 <test_kfreeall+0x6c3>
f0126e6d:	83 ec 04             	sub    $0x4,%esp
f0126e70:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126e75:	68 29 0a 00 00       	push   $0xa29
f0126e7a:	68 3a b5 13 f0       	push   $0xf013b53a
f0126e7f:	e8 81 93 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126e84:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126e8b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126e8e:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126e94:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126e97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e9e:	eb 0e                	jmp    f0126eae <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0126ea0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126ea3:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ea6:	01 d0                	add    %edx,%eax
f0126ea8:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126eab:	ff 45 f4             	incl   -0xc(%ebp)
f0126eae:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126eb4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126eb7:	7f e7                	jg     f0126ea0 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126eb9:	e8 d3 5e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126ebe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ec1:	e8 02 cf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126ec6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126ec9:	83 ec 0c             	sub    $0xc,%esp
f0126ecc:	68 00 fc 2f 00       	push   $0x2ffc00
f0126ed1:	e8 a4 0b fe ff       	call   f0107a7a <kmalloc>
f0126ed6:	83 c4 10             	add    $0x10,%esp
f0126ed9:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126edf:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126ee5:	89 c1                	mov    %eax,%ecx
f0126ee7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0126eee:	10 00 00 
f0126ef1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126ef7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126efc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0126f02:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126f08:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f0d:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0126f13:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126f19:	29 d0                	sub    %edx,%eax
f0126f1b:	89 c3                	mov    %eax,%ebx
f0126f1d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126f24:	10 00 00 
f0126f27:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126f2c:	0f b6 d0             	movzbl %al,%edx
f0126f2f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126f35:	01 d0                	add    %edx,%eax
f0126f37:	48                   	dec    %eax
f0126f38:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0126f3e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126f44:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f49:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0126f4f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126f55:	29 d0                	sub    %edx,%eax
f0126f57:	01 c3                	add    %eax,%ebx
f0126f59:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0126f60:	10 00 00 
f0126f63:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0126f68:	0f b6 c0             	movzbl %al,%eax
f0126f6b:	c1 e0 04             	shl    $0x4,%eax
f0126f6e:	89 c2                	mov    %eax,%edx
f0126f70:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126f76:	01 d0                	add    %edx,%eax
f0126f78:	48                   	dec    %eax
f0126f79:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0126f7f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126f85:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f8a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0126f90:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126f96:	29 d0                	sub    %edx,%eax
f0126f98:	01 d8                	add    %ebx,%eax
f0126f9a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126f9f:	39 c1                	cmp    %eax,%ecx
f0126fa1:	74 17                	je     f0126fba <test_kfreeall+0x7f9>
f0126fa3:	83 ec 04             	sub    $0x4,%esp
f0126fa6:	68 20 b6 13 f0       	push   $0xf013b620
f0126fab:	68 35 0a 00 00       	push   $0xa35
f0126fb0:	68 3a b5 13 f0       	push   $0xf013b53a
f0126fb5:	e8 4b 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126fba:	e8 09 ce fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0126fbf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126fc2:	74 17                	je     f0126fdb <test_kfreeall+0x81a>
f0126fc4:	83 ec 04             	sub    $0x4,%esp
f0126fc7:	68 54 b5 13 f0       	push   $0xf013b554
f0126fcc:	68 36 0a 00 00       	push   $0xa36
f0126fd1:	68 3a b5 13 f0       	push   $0xf013b53a
f0126fd6:	e8 2a 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126fdb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126fde:	e8 ae 5d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0126fe3:	29 c3                	sub    %eax,%ebx
f0126fe5:	89 d8                	mov    %ebx,%eax
f0126fe7:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126fec:	74 17                	je     f0127005 <test_kfreeall+0x844>
f0126fee:	83 ec 04             	sub    $0x4,%esp
f0126ff1:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126ff6:	68 37 0a 00 00       	push   $0xa37
f0126ffb:	68 3a b5 13 f0       	push   $0xf013b53a
f0127000:	e8 00 92 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127005:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f012700c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012700f:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127015:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127018:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012701f:	eb 0e                	jmp    f012702f <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0127021:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127024:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127027:	01 d0                	add    %edx,%eax
f0127029:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012702c:	ff 45 f4             	incl   -0xc(%ebp)
f012702f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127035:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127038:	7f e7                	jg     f0127021 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012703a:	e8 52 5d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012703f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127042:	e8 81 cd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127047:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012704a:	83 ec 0c             	sub    $0xc,%esp
f012704d:	68 00 fc 5f 00       	push   $0x5ffc00
f0127052:	e8 23 0a fe ff       	call   f0107a7a <kmalloc>
f0127057:	83 c4 10             	add    $0x10,%esp
f012705a:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127060:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127066:	89 c1                	mov    %eax,%ecx
f0127068:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012706f:	10 00 00 
f0127072:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127078:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012707d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0127083:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127089:	ba 00 00 00 00       	mov    $0x0,%edx
f012708e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0127094:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012709a:	29 d0                	sub    %edx,%eax
f012709c:	89 c3                	mov    %eax,%ebx
f012709e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01270a5:	10 00 00 
f01270a8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01270ad:	0f b6 d0             	movzbl %al,%edx
f01270b0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01270b6:	01 d0                	add    %edx,%eax
f01270b8:	48                   	dec    %eax
f01270b9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01270bf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01270c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01270ca:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01270d0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01270d6:	29 d0                	sub    %edx,%eax
f01270d8:	01 c3                	add    %eax,%ebx
f01270da:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01270e1:	10 00 00 
f01270e4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01270e9:	0f b6 c0             	movzbl %al,%eax
f01270ec:	c1 e0 04             	shl    $0x4,%eax
f01270ef:	89 c2                	mov    %eax,%edx
f01270f1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01270f7:	01 d0                	add    %edx,%eax
f01270f9:	48                   	dec    %eax
f01270fa:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0127100:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127106:	ba 00 00 00 00       	mov    $0x0,%edx
f012710b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0127111:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127117:	29 d0                	sub    %edx,%eax
f0127119:	01 d8                	add    %ebx,%eax
f012711b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127120:	39 c1                	cmp    %eax,%ecx
f0127122:	74 17                	je     f012713b <test_kfreeall+0x97a>
f0127124:	83 ec 04             	sub    $0x4,%esp
f0127127:	68 20 b6 13 f0       	push   $0xf013b620
f012712c:	68 43 0a 00 00       	push   $0xa43
f0127131:	68 3a b5 13 f0       	push   $0xf013b53a
f0127136:	e8 ca 90 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012713b:	e8 88 cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127140:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127143:	74 17                	je     f012715c <test_kfreeall+0x99b>
f0127145:	83 ec 04             	sub    $0x4,%esp
f0127148:	68 54 b5 13 f0       	push   $0xf013b554
f012714d:	68 44 0a 00 00       	push   $0xa44
f0127152:	68 3a b5 13 f0       	push   $0xf013b53a
f0127157:	e8 a9 90 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012715c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012715f:	e8 2d 5c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127164:	29 c3                	sub    %eax,%ebx
f0127166:	89 d8                	mov    %ebx,%eax
f0127168:	3d 00 06 00 00       	cmp    $0x600,%eax
f012716d:	74 17                	je     f0127186 <test_kfreeall+0x9c5>
f012716f:	83 ec 04             	sub    $0x4,%esp
f0127172:	68 bc b5 13 f0       	push   $0xf013b5bc
f0127177:	68 45 0a 00 00       	push   $0xa45
f012717c:	68 3a b5 13 f0       	push   $0xf013b53a
f0127181:	e8 7f 90 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0127186:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f012718d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0127190:	e8 fc 5b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127195:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127198:	e8 2b cc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012719d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01271a0:	83 ec 0c             	sub    $0xc,%esp
f01271a3:	68 00 38 00 00       	push   $0x3800
f01271a8:	e8 cd 08 fe ff       	call   f0107a7a <kmalloc>
f01271ad:	83 c4 10             	add    $0x10,%esp
f01271b0:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01271b6:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01271bc:	89 c1                	mov    %eax,%ecx
f01271be:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01271c5:	10 00 00 
f01271c8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01271ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01271d3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01271d9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01271df:	ba 00 00 00 00       	mov    $0x0,%edx
f01271e4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01271ea:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01271f0:	29 d0                	sub    %edx,%eax
f01271f2:	89 c3                	mov    %eax,%ebx
f01271f4:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01271fb:	10 00 00 
f01271fe:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127203:	0f b6 d0             	movzbl %al,%edx
f0127206:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012720c:	01 d0                	add    %edx,%eax
f012720e:	48                   	dec    %eax
f012720f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0127215:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012721b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127220:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0127226:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012722c:	29 d0                	sub    %edx,%eax
f012722e:	01 c3                	add    %eax,%ebx
f0127230:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0127237:	10 00 00 
f012723a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012723f:	0f b6 c0             	movzbl %al,%eax
f0127242:	c1 e0 04             	shl    $0x4,%eax
f0127245:	89 c2                	mov    %eax,%edx
f0127247:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012724d:	01 d0                	add    %edx,%eax
f012724f:	48                   	dec    %eax
f0127250:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0127256:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012725c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127261:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0127267:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012726d:	29 d0                	sub    %edx,%eax
f012726f:	01 d8                	add    %ebx,%eax
f0127271:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0127276:	39 c1                	cmp    %eax,%ecx
f0127278:	74 17                	je     f0127291 <test_kfreeall+0xad0>
f012727a:	83 ec 04             	sub    $0x4,%esp
f012727d:	68 20 b6 13 f0       	push   $0xf013b620
f0127282:	68 4c 0a 00 00       	push   $0xa4c
f0127287:	68 3a b5 13 f0       	push   $0xf013b53a
f012728c:	e8 74 8f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127291:	e8 32 cb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127296:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127299:	74 17                	je     f01272b2 <test_kfreeall+0xaf1>
f012729b:	83 ec 04             	sub    $0x4,%esp
f012729e:	68 54 b5 13 f0       	push   $0xf013b554
f01272a3:	68 4d 0a 00 00       	push   $0xa4d
f01272a8:	68 3a b5 13 f0       	push   $0xf013b53a
f01272ad:	e8 53 8f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01272b2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01272b5:	e8 d7 5a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01272ba:	29 c3                	sub    %eax,%ebx
f01272bc:	89 d8                	mov    %ebx,%eax
f01272be:	83 f8 04             	cmp    $0x4,%eax
f01272c1:	74 17                	je     f01272da <test_kfreeall+0xb19>
f01272c3:	83 ec 04             	sub    $0x4,%esp
f01272c6:	68 bc b5 13 f0       	push   $0xf013b5bc
f01272cb:	68 4e 0a 00 00       	push   $0xa4e
f01272d0:	68 3a b5 13 f0       	push   $0xf013b53a
f01272d5:	e8 2b 8f fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01272da:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01272e1:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01272e4:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01272ea:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01272ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01272f4:	eb 0e                	jmp    f0127304 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f01272f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01272f9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01272fc:	01 d0                	add    %edx,%eax
f01272fe:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127301:	ff 45 f4             	incl   -0xc(%ebp)
f0127304:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012730a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012730d:	7f e7                	jg     f01272f6 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012730f:	e8 7d 5a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127314:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012731a:	e8 a9 ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012731f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0127325:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012732b:	83 ec 0c             	sub    $0xc,%esp
f012732e:	50                   	push   %eax
f012732f:	e8 11 08 fe ff       	call   f0107b45 <kfree>
f0127334:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127337:	e8 8c ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012733c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127342:	74 17                	je     f012735b <test_kfreeall+0xb9a>
f0127344:	83 ec 04             	sub    $0x4,%esp
f0127347:	68 54 b5 13 f0       	push   $0xf013b554
f012734c:	68 5d 0a 00 00       	push   $0xa5d
f0127351:	68 3a b5 13 f0       	push   $0xf013b53a
f0127356:	e8 aa 8e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012735b:	e8 31 5a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127360:	89 c2                	mov    %eax,%edx
f0127362:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127368:	29 c2                	sub    %eax,%edx
f012736a:	89 d0                	mov    %edx,%eax
f012736c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127371:	74 17                	je     f012738a <test_kfreeall+0xbc9>
f0127373:	83 ec 04             	sub    $0x4,%esp
f0127376:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012737b:	68 5e 0a 00 00       	push   $0xa5e
f0127380:	68 3a b5 13 f0       	push   $0xf013b53a
f0127385:	e8 7b 8e fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012738a:	e8 02 5a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012738f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127395:	e8 2e ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012739a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01273a0:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01273a6:	83 ec 0c             	sub    $0xc,%esp
f01273a9:	50                   	push   %eax
f01273aa:	e8 96 07 fe ff       	call   f0107b45 <kfree>
f01273af:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273b2:	e8 11 ca fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01273b7:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01273bd:	74 17                	je     f01273d6 <test_kfreeall+0xc15>
f01273bf:	83 ec 04             	sub    $0x4,%esp
f01273c2:	68 54 b5 13 f0       	push   $0xf013b554
f01273c7:	68 64 0a 00 00       	push   $0xa64
f01273cc:	68 3a b5 13 f0       	push   $0xf013b53a
f01273d1:	e8 2f 8e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01273d6:	e8 b6 59 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01273db:	89 c2                	mov    %eax,%edx
f01273dd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01273e3:	29 c2                	sub    %eax,%edx
f01273e5:	89 d0                	mov    %edx,%eax
f01273e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01273ec:	74 17                	je     f0127405 <test_kfreeall+0xc44>
f01273ee:	83 ec 04             	sub    $0x4,%esp
f01273f1:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01273f6:	68 65 0a 00 00       	push   $0xa65
f01273fb:	68 3a b5 13 f0       	push   $0xf013b53a
f0127400:	e8 00 8e fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127405:	e8 87 59 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012740a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127410:	e8 b3 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127415:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f012741b:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127421:	83 ec 0c             	sub    $0xc,%esp
f0127424:	50                   	push   %eax
f0127425:	e8 1b 07 fe ff       	call   f0107b45 <kfree>
f012742a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012742d:	e8 96 c9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127432:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127438:	74 17                	je     f0127451 <test_kfreeall+0xc90>
f012743a:	83 ec 04             	sub    $0x4,%esp
f012743d:	68 54 b5 13 f0       	push   $0xf013b554
f0127442:	68 6b 0a 00 00       	push   $0xa6b
f0127447:	68 3a b5 13 f0       	push   $0xf013b53a
f012744c:	e8 b4 8d fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0127451:	e8 3b 59 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127456:	89 c2                	mov    %eax,%edx
f0127458:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012745e:	29 c2                	sub    %eax,%edx
f0127460:	89 d0                	mov    %edx,%eax
f0127462:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127467:	74 17                	je     f0127480 <test_kfreeall+0xcbf>
f0127469:	83 ec 04             	sub    $0x4,%esp
f012746c:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0127471:	68 6c 0a 00 00       	push   $0xa6c
f0127476:	68 3a b5 13 f0       	push   $0xf013b53a
f012747b:	e8 85 8d fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0127480:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127486:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127489:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127490:	eb 1e                	jmp    f01274b0 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0127492:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127498:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012749b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012749e:	01 c8                	add    %ecx,%eax
f01274a0:	8a 00                	mov    (%eax),%al
f01274a2:	0f be c0             	movsbl %al,%eax
f01274a5:	01 d0                	add    %edx,%eax
f01274a7:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01274ad:	ff 45 f4             	incl   -0xc(%ebp)
f01274b0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01274b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01274b9:	7f d7                	jg     f0127492 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01274bb:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01274c1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01274c7:	01 c0                	add    %eax,%eax
f01274c9:	39 c2                	cmp    %eax,%edx
f01274cb:	74 17                	je     f01274e4 <test_kfreeall+0xd23>
f01274cd:	83 ec 04             	sub    $0x4,%esp
f01274d0:	68 20 bd 13 f0       	push   $0xf013bd20
f01274d5:	68 78 0a 00 00       	push   $0xa78
f01274da:	68 3a b5 13 f0       	push   $0xf013b53a
f01274df:	e8 21 8d fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01274e4:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01274ea:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01274ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01274f4:	eb 1e                	jmp    f0127514 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f01274f6:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01274fc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01274ff:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127502:	01 c8                	add    %ecx,%eax
f0127504:	8a 00                	mov    (%eax),%al
f0127506:	0f be c0             	movsbl %al,%eax
f0127509:	01 d0                	add    %edx,%eax
f012750b:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127511:	ff 45 f4             	incl   -0xc(%ebp)
f0127514:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012751a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012751d:	7f d7                	jg     f01274f6 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012751f:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127525:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012752b:	89 c1                	mov    %eax,%ecx
f012752d:	01 c9                	add    %ecx,%ecx
f012752f:	01 c8                	add    %ecx,%eax
f0127531:	39 c2                	cmp    %eax,%edx
f0127533:	74 17                	je     f012754c <test_kfreeall+0xd8b>
f0127535:	83 ec 04             	sub    $0x4,%esp
f0127538:	68 20 bd 13 f0       	push   $0xf013bd20
f012753d:	68 80 0a 00 00       	push   $0xa80
f0127542:	68 3a b5 13 f0       	push   $0xf013b53a
f0127547:	e8 b9 8c fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012754c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0127552:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127555:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012755c:	eb 1e                	jmp    f012757c <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f012755e:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0127564:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127567:	8b 45 80             	mov    -0x80(%ebp),%eax
f012756a:	01 c8                	add    %ecx,%eax
f012756c:	8a 00                	mov    (%eax),%al
f012756e:	0f be c0             	movsbl %al,%eax
f0127571:	01 d0                	add    %edx,%eax
f0127573:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127579:	ff 45 f4             	incl   -0xc(%ebp)
f012757c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127582:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127585:	7f d7                	jg     f012755e <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0127587:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012758d:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0127593:	c1 e2 02             	shl    $0x2,%edx
f0127596:	39 d0                	cmp    %edx,%eax
f0127598:	74 17                	je     f01275b1 <test_kfreeall+0xdf0>
f012759a:	83 ec 04             	sub    $0x4,%esp
f012759d:	68 20 bd 13 f0       	push   $0xf013bd20
f01275a2:	68 88 0a 00 00       	push   $0xa88
f01275a7:	68 3a b5 13 f0       	push   $0xf013b53a
f01275ac:	e8 54 8c fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01275b1:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01275b7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01275ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275c1:	eb 1e                	jmp    f01275e1 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f01275c3:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01275c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01275cc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01275cf:	01 c8                	add    %ecx,%eax
f01275d1:	8a 00                	mov    (%eax),%al
f01275d3:	0f be c0             	movsbl %al,%eax
f01275d6:	01 d0                	add    %edx,%eax
f01275d8:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01275de:	ff 45 f4             	incl   -0xc(%ebp)
f01275e1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01275e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01275ea:	7f d7                	jg     f01275c3 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01275ec:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01275f2:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01275f8:	89 d0                	mov    %edx,%eax
f01275fa:	c1 e0 02             	shl    $0x2,%eax
f01275fd:	01 d0                	add    %edx,%eax
f01275ff:	39 c1                	cmp    %eax,%ecx
f0127601:	74 17                	je     f012761a <test_kfreeall+0xe59>
f0127603:	83 ec 04             	sub    $0x4,%esp
f0127606:	68 20 bd 13 f0       	push   $0xf013bd20
f012760b:	68 90 0a 00 00       	push   $0xa90
f0127610:	68 3a b5 13 f0       	push   $0xf013b53a
f0127615:	e8 eb 8b fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012761a:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127620:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127623:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012762a:	eb 1e                	jmp    f012764a <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f012762c:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127632:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127635:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127638:	01 c8                	add    %ecx,%eax
f012763a:	8a 00                	mov    (%eax),%al
f012763c:	0f be c0             	movsbl %al,%eax
f012763f:	01 d0                	add    %edx,%eax
f0127641:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127647:	ff 45 f4             	incl   -0xc(%ebp)
f012764a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127650:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127653:	7f d7                	jg     f012762c <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127655:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012765b:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0127661:	89 d0                	mov    %edx,%eax
f0127663:	01 c0                	add    %eax,%eax
f0127665:	01 d0                	add    %edx,%eax
f0127667:	01 c0                	add    %eax,%eax
f0127669:	01 d0                	add    %edx,%eax
f012766b:	39 c1                	cmp    %eax,%ecx
f012766d:	74 17                	je     f0127686 <test_kfreeall+0xec5>
f012766f:	83 ec 04             	sub    $0x4,%esp
f0127672:	68 20 bd 13 f0       	push   $0xf013bd20
f0127677:	68 98 0a 00 00       	push   $0xa98
f012767c:	68 3a b5 13 f0       	push   $0xf013b53a
f0127681:	e8 7f 8b fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127686:	e8 06 57 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012768b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012768e:	e8 35 c7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127693:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0127696:	83 ec 0c             	sub    $0xc,%esp
f0127699:	68 00 50 00 00       	push   $0x5000
f012769e:	e8 d7 03 fe ff       	call   f0107a7a <kmalloc>
f01276a3:	83 c4 10             	add    $0x10,%esp
f01276a6:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01276ac:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01276b2:	89 c1                	mov    %eax,%ecx
f01276b4:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01276bb:	10 00 00 
f01276be:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01276c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01276c9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01276cf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01276d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01276da:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01276e0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01276e6:	29 d0                	sub    %edx,%eax
f01276e8:	89 c3                	mov    %eax,%ebx
f01276ea:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01276f1:	10 00 00 
f01276f4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01276f9:	0f b6 d0             	movzbl %al,%edx
f01276fc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127702:	01 d0                	add    %edx,%eax
f0127704:	48                   	dec    %eax
f0127705:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012770b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127711:	ba 00 00 00 00       	mov    $0x0,%edx
f0127716:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012771c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127722:	29 d0                	sub    %edx,%eax
f0127724:	01 c3                	add    %eax,%ebx
f0127726:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012772d:	10 00 00 
f0127730:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127735:	0f b6 c0             	movzbl %al,%eax
f0127738:	c1 e0 04             	shl    $0x4,%eax
f012773b:	89 c2                	mov    %eax,%edx
f012773d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127743:	01 d0                	add    %edx,%eax
f0127745:	48                   	dec    %eax
f0127746:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012774c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127752:	ba 00 00 00 00       	mov    $0x0,%edx
f0127757:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012775d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127763:	29 d0                	sub    %edx,%eax
f0127765:	01 d8                	add    %ebx,%eax
f0127767:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012776c:	39 c1                	cmp    %eax,%ecx
f012776e:	74 17                	je     f0127787 <test_kfreeall+0xfc6>
f0127770:	83 ec 04             	sub    $0x4,%esp
f0127773:	68 20 b6 13 f0       	push   $0xf013b620
f0127778:	68 a1 0a 00 00       	push   $0xaa1
f012777d:	68 3a b5 13 f0       	push   $0xf013b53a
f0127782:	e8 7e 8a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127787:	e8 3c c6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012778c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012778f:	74 17                	je     f01277a8 <test_kfreeall+0xfe7>
f0127791:	83 ec 04             	sub    $0x4,%esp
f0127794:	68 54 b5 13 f0       	push   $0xf013b554
f0127799:	68 a2 0a 00 00       	push   $0xaa2
f012779e:	68 3a b5 13 f0       	push   $0xf013b53a
f01277a3:	e8 5d 8a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01277a8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01277ab:	e8 e1 55 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01277b0:	29 c3                	sub    %eax,%ebx
f01277b2:	89 d8                	mov    %ebx,%eax
f01277b4:	83 f8 05             	cmp    $0x5,%eax
f01277b7:	74 17                	je     f01277d0 <test_kfreeall+0x100f>
f01277b9:	83 ec 04             	sub    $0x4,%esp
f01277bc:	68 bc b5 13 f0       	push   $0xf013b5bc
f01277c1:	68 a3 0a 00 00       	push   $0xaa3
f01277c6:	68 3a b5 13 f0       	push   $0xf013b53a
f01277cb:	e8 35 8a fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01277d0:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01277d7:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01277da:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01277e0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01277e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01277ea:	eb 0e                	jmp    f01277fa <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f01277ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01277ef:	8b 45 80             	mov    -0x80(%ebp),%eax
f01277f2:	01 d0                	add    %edx,%eax
f01277f4:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01277f7:	ff 45 f4             	incl   -0xc(%ebp)
f01277fa:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127800:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127803:	7f e7                	jg     f01277ec <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127805:	e8 87 55 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012780a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012780d:	e8 b6 c5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127812:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127815:	83 ec 0c             	sub    $0xc,%esp
f0127818:	68 00 00 10 00       	push   $0x100000
f012781d:	e8 58 02 fe ff       	call   f0107a7a <kmalloc>
f0127822:	83 c4 10             	add    $0x10,%esp
f0127825:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012782b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127831:	89 c1                	mov    %eax,%ecx
f0127833:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012783a:	10 00 00 
f012783d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127843:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127848:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012784e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127854:	ba 00 00 00 00       	mov    $0x0,%edx
f0127859:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012785f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127865:	29 d0                	sub    %edx,%eax
f0127867:	89 c3                	mov    %eax,%ebx
f0127869:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127870:	10 00 00 
f0127873:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127878:	0f b6 d0             	movzbl %al,%edx
f012787b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0127881:	01 d0                	add    %edx,%eax
f0127883:	48                   	dec    %eax
f0127884:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012788a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127890:	ba 00 00 00 00       	mov    $0x0,%edx
f0127895:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012789b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01278a1:	29 d0                	sub    %edx,%eax
f01278a3:	01 c3                	add    %eax,%ebx
f01278a5:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01278ac:	10 00 00 
f01278af:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01278b4:	0f b6 c0             	movzbl %al,%eax
f01278b7:	c1 e0 04             	shl    $0x4,%eax
f01278ba:	89 c2                	mov    %eax,%edx
f01278bc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01278c2:	01 d0                	add    %edx,%eax
f01278c4:	48                   	dec    %eax
f01278c5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01278cb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01278d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01278d6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01278dc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01278e2:	29 d0                	sub    %edx,%eax
f01278e4:	01 d8                	add    %ebx,%eax
f01278e6:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01278eb:	39 c1                	cmp    %eax,%ecx
f01278ed:	74 17                	je     f0127906 <test_kfreeall+0x1145>
f01278ef:	83 ec 04             	sub    $0x4,%esp
f01278f2:	68 20 b6 13 f0       	push   $0xf013b620
f01278f7:	68 af 0a 00 00       	push   $0xaaf
f01278fc:	68 3a b5 13 f0       	push   $0xf013b53a
f0127901:	e8 ff 88 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127906:	e8 bd c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012790b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012790e:	74 17                	je     f0127927 <test_kfreeall+0x1166>
f0127910:	83 ec 04             	sub    $0x4,%esp
f0127913:	68 54 b5 13 f0       	push   $0xf013b554
f0127918:	68 b0 0a 00 00       	push   $0xab0
f012791d:	68 3a b5 13 f0       	push   $0xf013b53a
f0127922:	e8 de 88 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127927:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012792a:	e8 62 54 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012792f:	29 c3                	sub    %eax,%ebx
f0127931:	89 d8                	mov    %ebx,%eax
f0127933:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127938:	74 17                	je     f0127951 <test_kfreeall+0x1190>
f012793a:	83 ec 04             	sub    $0x4,%esp
f012793d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0127942:	68 b1 0a 00 00       	push   $0xab1
f0127947:	68 3a b5 13 f0       	push   $0xf013b53a
f012794c:	e8 b4 88 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127951:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127958:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012795b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127961:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127964:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012796b:	eb 0e                	jmp    f012797b <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f012796d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127970:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127973:	01 d0                	add    %edx,%eax
f0127975:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127978:	ff 45 f4             	incl   -0xc(%ebp)
f012797b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127981:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127984:	7f e7                	jg     f012796d <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127986:	e8 06 54 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012798b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012798e:	e8 35 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127993:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127996:	e8 48 03 fe ff       	call   f0107ce3 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012799b:	e8 28 c4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01279a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01279a3:	74 17                	je     f01279bc <test_kfreeall+0x11fb>
f01279a5:	83 ec 04             	sub    $0x4,%esp
f01279a8:	68 54 b5 13 f0       	push   $0xf013b554
f01279ad:	68 c1 0a 00 00       	push   $0xac1
f01279b2:	68 3a b5 13 f0       	push   $0xf013b53a
f01279b7:	e8 49 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01279bc:	e8 d0 53 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01279c1:	89 c2                	mov    %eax,%edx
f01279c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01279c6:	89 d1                	mov    %edx,%ecx
f01279c8:	29 c1                	sub    %eax,%ecx
f01279ca:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01279d1:	10 00 00 
f01279d4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01279da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01279df:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01279e5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01279eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01279f0:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01279f6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01279fc:	29 d0                	sub    %edx,%eax
f01279fe:	89 c3                	mov    %eax,%ebx
f0127a00:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127a07:	10 00 00 
f0127a0a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127a0f:	0f b6 d0             	movzbl %al,%edx
f0127a12:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127a18:	01 d0                	add    %edx,%eax
f0127a1a:	48                   	dec    %eax
f0127a1b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127a21:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127a27:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a2c:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127a32:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127a38:	29 d0                	sub    %edx,%eax
f0127a3a:	01 c3                	add    %eax,%ebx
f0127a3c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127a43:	10 00 00 
f0127a46:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127a4b:	0f b6 c0             	movzbl %al,%eax
f0127a4e:	c1 e0 04             	shl    $0x4,%eax
f0127a51:	89 c2                	mov    %eax,%edx
f0127a53:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127a59:	01 d0                	add    %edx,%eax
f0127a5b:	48                   	dec    %eax
f0127a5c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127a62:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127a68:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a6d:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127a73:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127a79:	29 d0                	sub    %edx,%eax
f0127a7b:	01 d8                	add    %ebx,%eax
f0127a7d:	05 00 40 00 00       	add    $0x4000,%eax
f0127a82:	c1 e8 0c             	shr    $0xc,%eax
f0127a85:	05 0d 04 00 00       	add    $0x40d,%eax
f0127a8a:	39 c1                	cmp    %eax,%ecx
f0127a8c:	74 17                	je     f0127aa5 <test_kfreeall+0x12e4>
f0127a8e:	83 ec 04             	sub    $0x4,%esp
f0127a91:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0127a96:	68 c2 0a 00 00       	push   $0xac2
f0127a9b:	68 3a b5 13 f0       	push   $0xf013b53a
f0127aa0:	e8 60 87 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127aa5:	83 ec 0c             	sub    $0xc,%esp
f0127aa8:	6a 03                	push   $0x3
f0127aaa:	e8 82 57 fe ff       	call   f010d231 <sys_bypassPageFault>
f0127aaf:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127ab2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ab9:	e9 82 00 00 00       	jmp    f0127b40 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0127abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127ac1:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127ac8:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0127acb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127ace:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127ad1:	e8 49 57 fe ff       	call   f010d21f <sys_rcr2>
f0127ad6:	89 c2                	mov    %eax,%edx
f0127ad8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127adb:	39 c2                	cmp    %eax,%edx
f0127add:	74 17                	je     f0127af6 <test_kfreeall+0x1335>
f0127adf:	83 ec 04             	sub    $0x4,%esp
f0127ae2:	68 a0 bd 13 f0       	push   $0xf013bda0
f0127ae7:	68 d0 0a 00 00       	push   $0xad0
f0127aec:	68 3a b5 13 f0       	push   $0xf013b53a
f0127af1:	e8 0f 87 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0127af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127af9:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127b00:	89 c2                	mov    %eax,%edx
f0127b02:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127b05:	01 d0                	add    %edx,%eax
f0127b07:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127b0a:	e8 10 57 fe ff       	call   f010d21f <sys_rcr2>
f0127b0f:	89 c2                	mov    %eax,%edx
f0127b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127b14:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127b1b:	89 c1                	mov    %eax,%ecx
f0127b1d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127b20:	01 c8                	add    %ecx,%eax
f0127b22:	39 c2                	cmp    %eax,%edx
f0127b24:	74 17                	je     f0127b3d <test_kfreeall+0x137c>
f0127b26:	83 ec 04             	sub    $0x4,%esp
f0127b29:	68 a0 bd 13 f0       	push   $0xf013bda0
f0127b2e:	68 d2 0a 00 00       	push   $0xad2
f0127b33:	68 3a b5 13 f0       	push   $0xf013b53a
f0127b38:	e8 c8 86 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0127b3d:	ff 45 f4             	incl   -0xc(%ebp)
f0127b40:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0127b44:	0f 8e 74 ff ff ff    	jle    f0127abe <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127b4a:	83 ec 0c             	sub    $0xc,%esp
f0127b4d:	6a 00                	push   $0x0
f0127b4f:	e8 dd 56 fe ff       	call   f010d231 <sys_bypassPageFault>
f0127b54:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127b57:	e8 35 52 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127b5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b5f:	e8 64 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127b64:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0127b67:	83 ec 0c             	sub    $0xc,%esp
f0127b6a:	68 00 00 40 00       	push   $0x400000
f0127b6f:	e8 06 ff fd ff       	call   f0107a7a <kmalloc>
f0127b74:	83 c4 10             	add    $0x10,%esp
f0127b77:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127b7d:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0127b83:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0127b88:	74 17                	je     f0127ba1 <test_kfreeall+0x13e0>
f0127b8a:	83 ec 04             	sub    $0x4,%esp
f0127b8d:	68 44 c2 13 f0       	push   $0xf013c244
f0127b92:	68 de 0a 00 00       	push   $0xade
f0127b97:	68 3a b5 13 f0       	push   $0xf013b53a
f0127b9c:	e8 64 86 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ba1:	e8 22 c2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ba6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ba9:	74 17                	je     f0127bc2 <test_kfreeall+0x1401>
f0127bab:	83 ec 04             	sub    $0x4,%esp
f0127bae:	68 54 b5 13 f0       	push   $0xf013b554
f0127bb3:	68 df 0a 00 00       	push   $0xadf
f0127bb8:	68 3a b5 13 f0       	push   $0xf013b53a
f0127bbd:	e8 43 86 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127bc2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127bc5:	e8 c7 51 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127bca:	29 c3                	sub    %eax,%ebx
f0127bcc:	89 d8                	mov    %ebx,%eax
f0127bce:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127bd3:	74 17                	je     f0127bec <test_kfreeall+0x142b>
f0127bd5:	83 ec 04             	sub    $0x4,%esp
f0127bd8:	68 bc b5 13 f0       	push   $0xf013b5bc
f0127bdd:	68 e0 0a 00 00       	push   $0xae0
f0127be2:	68 3a b5 13 f0       	push   $0xf013b53a
f0127be7:	e8 19 86 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127bec:	e8 a0 51 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127bf1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bf4:	e8 cf c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127bf9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0127bfc:	83 ec 0c             	sub    $0xc,%esp
f0127bff:	68 00 30 00 00       	push   $0x3000
f0127c04:	e8 71 fe fd ff       	call   f0107a7a <kmalloc>
f0127c09:	83 c4 10             	add    $0x10,%esp
f0127c0c:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127c12:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127c18:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0127c1d:	74 17                	je     f0127c36 <test_kfreeall+0x1475>
f0127c1f:	83 ec 04             	sub    $0x4,%esp
f0127c22:	68 44 c2 13 f0       	push   $0xf013c244
f0127c27:	68 e6 0a 00 00       	push   $0xae6
f0127c2c:	68 3a b5 13 f0       	push   $0xf013b53a
f0127c31:	e8 cf 85 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c36:	e8 8d c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127c3b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127c3e:	74 17                	je     f0127c57 <test_kfreeall+0x1496>
f0127c40:	83 ec 04             	sub    $0x4,%esp
f0127c43:	68 54 b5 13 f0       	push   $0xf013b554
f0127c48:	68 e7 0a 00 00       	push   $0xae7
f0127c4d:	68 3a b5 13 f0       	push   $0xf013b53a
f0127c52:	e8 ae 85 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c57:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127c5a:	e8 32 51 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127c5f:	29 c3                	sub    %eax,%ebx
f0127c61:	89 d8                	mov    %ebx,%eax
f0127c63:	83 f8 03             	cmp    $0x3,%eax
f0127c66:	74 17                	je     f0127c7f <test_kfreeall+0x14be>
f0127c68:	83 ec 04             	sub    $0x4,%esp
f0127c6b:	68 bc b5 13 f0       	push   $0xf013b5bc
f0127c70:	68 e8 0a 00 00       	push   $0xae8
f0127c75:	68 3a b5 13 f0       	push   $0xf013b53a
f0127c7a:	e8 86 85 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0127c7f:	e8 0d 51 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127c84:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c87:	e8 3c c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127c8c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0127c8f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127c95:	83 ec 0c             	sub    $0xc,%esp
f0127c98:	50                   	push   %eax
f0127c99:	e8 a7 fe fd ff       	call   f0107b45 <kfree>
f0127c9e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ca1:	e8 22 c1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127ca6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ca9:	74 17                	je     f0127cc2 <test_kfreeall+0x1501>
f0127cab:	83 ec 04             	sub    $0x4,%esp
f0127cae:	68 54 b5 13 f0       	push   $0xf013b554
f0127cb3:	68 f2 0a 00 00       	push   $0xaf2
f0127cb8:	68 3a b5 13 f0       	push   $0xf013b53a
f0127cbd:	e8 43 85 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127cc2:	e8 ca 50 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127cc7:	89 c2                	mov    %eax,%edx
f0127cc9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127ccc:	29 c2                	sub    %eax,%edx
f0127cce:	89 d0                	mov    %edx,%eax
f0127cd0:	83 f8 03             	cmp    $0x3,%eax
f0127cd3:	74 17                	je     f0127cec <test_kfreeall+0x152b>
f0127cd5:	83 ec 04             	sub    $0x4,%esp
f0127cd8:	68 ec bd 13 f0       	push   $0xf013bdec
f0127cdd:	68 f3 0a 00 00       	push   $0xaf3
f0127ce2:	68 3a b5 13 f0       	push   $0xf013b53a
f0127ce7:	e8 19 85 fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127cec:	e8 a0 50 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127cf1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127cf4:	e8 cf c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127cf9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0127cfc:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127d02:	83 ec 0c             	sub    $0xc,%esp
f0127d05:	50                   	push   %eax
f0127d06:	e8 3a fe fd ff       	call   f0107b45 <kfree>
f0127d0b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d0e:	e8 b5 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d13:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127d16:	74 17                	je     f0127d2f <test_kfreeall+0x156e>
f0127d18:	83 ec 04             	sub    $0x4,%esp
f0127d1b:	68 54 b5 13 f0       	push   $0xf013b554
f0127d20:	68 fc 0a 00 00       	push   $0xafc
f0127d25:	68 3a b5 13 f0       	push   $0xf013b53a
f0127d2a:	e8 d6 84 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127d2f:	e8 5d 50 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127d34:	89 c2                	mov    %eax,%edx
f0127d36:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127d39:	39 c2                	cmp    %eax,%edx
f0127d3b:	74 17                	je     f0127d54 <test_kfreeall+0x1593>
f0127d3d:	83 ec 04             	sub    $0x4,%esp
f0127d40:	68 ec bd 13 f0       	push   $0xf013bdec
f0127d45:	68 fd 0a 00 00       	push   $0xafd
f0127d4a:	68 3a b5 13 f0       	push   $0xf013b53a
f0127d4f:	e8 b1 84 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127d54:	e8 38 50 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127d59:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d5c:	e8 67 c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d61:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0127d64:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127d6a:	83 ec 0c             	sub    $0xc,%esp
f0127d6d:	50                   	push   %eax
f0127d6e:	e8 d2 fd fd ff       	call   f0107b45 <kfree>
f0127d73:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d76:	e8 4d c0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127d7b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127d7e:	74 17                	je     f0127d97 <test_kfreeall+0x15d6>
f0127d80:	83 ec 04             	sub    $0x4,%esp
f0127d83:	68 54 b5 13 f0       	push   $0xf013b554
f0127d88:	68 03 0b 00 00       	push   $0xb03
f0127d8d:	68 3a b5 13 f0       	push   $0xf013b53a
f0127d92:	e8 6e 84 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127d97:	e8 f5 4f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127d9c:	89 c2                	mov    %eax,%edx
f0127d9e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127da1:	39 c2                	cmp    %eax,%edx
f0127da3:	74 17                	je     f0127dbc <test_kfreeall+0x15fb>
f0127da5:	83 ec 04             	sub    $0x4,%esp
f0127da8:	68 ec bd 13 f0       	push   $0xf013bdec
f0127dad:	68 04 0b 00 00       	push   $0xb04
f0127db2:	68 3a b5 13 f0       	push   $0xf013b53a
f0127db7:	e8 49 84 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127dbc:	e8 d0 4f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127dc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127dc4:	e8 ff bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127dc9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0127dcc:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127dd2:	83 ec 0c             	sub    $0xc,%esp
f0127dd5:	50                   	push   %eax
f0127dd6:	e8 6a fd fd ff       	call   f0107b45 <kfree>
f0127ddb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127dde:	e8 e5 bf fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127de3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127de6:	74 17                	je     f0127dff <test_kfreeall+0x163e>
f0127de8:	83 ec 04             	sub    $0x4,%esp
f0127deb:	68 54 b5 13 f0       	push   $0xf013b554
f0127df0:	68 0a 0b 00 00       	push   $0xb0a
f0127df5:	68 3a b5 13 f0       	push   $0xf013b53a
f0127dfa:	e8 06 84 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127dff:	e8 8d 4f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127e04:	89 c2                	mov    %eax,%edx
f0127e06:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127e09:	39 c2                	cmp    %eax,%edx
f0127e0b:	74 17                	je     f0127e24 <test_kfreeall+0x1663>
f0127e0d:	83 ec 04             	sub    $0x4,%esp
f0127e10:	68 ec bd 13 f0       	push   $0xf013bdec
f0127e15:	68 0b 0b 00 00       	push   $0xb0b
f0127e1a:	68 3a b5 13 f0       	push   $0xf013b53a
f0127e1f:	e8 e1 83 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127e24:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0127e2b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127e32:	eb 48                	jmp    f0127e7c <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127e34:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127e37:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0127e3c:	83 ec 04             	sub    $0x4,%esp
f0127e3f:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127e45:	51                   	push   %ecx
f0127e46:	52                   	push   %edx
f0127e47:	50                   	push   %eax
f0127e48:	e8 64 ec fd ff       	call   f0106ab1 <get_page_table>
f0127e4d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0127e50:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127e56:	85 c0                	test   %eax,%eax
f0127e58:	75 17                	jne    f0127e71 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127e5a:	83 ec 04             	sub    $0x4,%esp
f0127e5d:	68 3c be 13 f0       	push   $0xf013be3c
f0127e62:	68 18 0b 00 00       	push   $0xb18
f0127e67:	68 3a b5 13 f0       	push   $0xf013b53a
f0127e6c:	e8 94 83 fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127e71:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127e78:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127e7c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127e80:	78 b2                	js     f0127e34 <test_kfreeall+0x1673>
f0127e82:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127e86:	7f 09                	jg     f0127e91 <test_kfreeall+0x16d0>
f0127e88:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0127e8f:	76 a3                	jbe    f0127e34 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127e91:	83 ec 0c             	sub    $0xc,%esp
f0127e94:	68 98 c2 13 f0       	push   $0xf013c298
f0127e99:	e8 70 8e fd ff       	call   f0100d0e <cprintf>
f0127e9e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127ea1:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127ea6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127ea9:	5b                   	pop    %ebx
f0127eaa:	5f                   	pop    %edi
f0127eab:	5d                   	pop    %ebp
f0127eac:	c3                   	ret    

f0127ead <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0127ead:	55                   	push   %ebp
f0127eae:	89 e5                	mov    %esp,%ebp
f0127eb0:	57                   	push   %edi
f0127eb1:	53                   	push   %ebx
f0127eb2:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127eb8:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127ebc:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127ec0:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127ec6:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127ecc:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127ed3:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127eda:	e8 b2 4e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127edf:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127ee2:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0127ee8:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127eed:	b8 00 00 00 00       	mov    $0x0,%eax
f0127ef2:	89 d7                	mov    %edx,%edi
f0127ef4:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127ef6:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0127efc:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127f01:	b8 00 00 00 00       	mov    $0x0,%eax
f0127f06:	89 d7                	mov    %edx,%edi
f0127f08:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127f0a:	e8 82 4e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127f0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f12:	e8 b1 be fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127f17:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127f1a:	83 ec 0c             	sub    $0xc,%esp
f0127f1d:	68 00 fc 1f 00       	push   $0x1ffc00
f0127f22:	e8 53 fb fd ff       	call   f0107a7a <kmalloc>
f0127f27:	83 c4 10             	add    $0x10,%esp
f0127f2a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f30:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0127f36:	89 c1                	mov    %eax,%ecx
f0127f38:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127f3f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127f42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127f47:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127f4a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f52:	f7 75 d4             	divl   -0x2c(%ebp)
f0127f55:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f58:	29 d0                	sub    %edx,%eax
f0127f5a:	89 c3                	mov    %eax,%ebx
f0127f5c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127f63:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127f68:	0f b6 d0             	movzbl %al,%edx
f0127f6b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127f6e:	01 d0                	add    %edx,%eax
f0127f70:	48                   	dec    %eax
f0127f71:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127f74:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127f77:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f7c:	f7 75 cc             	divl   -0x34(%ebp)
f0127f7f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127f82:	29 d0                	sub    %edx,%eax
f0127f84:	01 c3                	add    %eax,%ebx
f0127f86:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127f8d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0127f92:	0f b6 c0             	movzbl %al,%eax
f0127f95:	c1 e0 04             	shl    $0x4,%eax
f0127f98:	89 c2                	mov    %eax,%edx
f0127f9a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127f9d:	01 d0                	add    %edx,%eax
f0127f9f:	48                   	dec    %eax
f0127fa0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127fa3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127fa6:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fab:	f7 75 c4             	divl   -0x3c(%ebp)
f0127fae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127fb1:	29 d0                	sub    %edx,%eax
f0127fb3:	01 d8                	add    %ebx,%eax
f0127fb5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127fba:	39 c1                	cmp    %eax,%ecx
f0127fbc:	74 17                	je     f0127fd5 <test_kexpand+0x128>
f0127fbe:	83 ec 04             	sub    $0x4,%esp
f0127fc1:	68 20 b6 13 f0       	push   $0xf013b620
f0127fc6:	68 43 0b 00 00       	push   $0xb43
f0127fcb:	68 3a b5 13 f0       	push   $0xf013b53a
f0127fd0:	e8 30 82 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127fd5:	e8 ee bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0127fda:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127fdd:	74 17                	je     f0127ff6 <test_kexpand+0x149>
f0127fdf:	83 ec 04             	sub    $0x4,%esp
f0127fe2:	68 54 b5 13 f0       	push   $0xf013b554
f0127fe7:	68 44 0b 00 00       	push   $0xb44
f0127fec:	68 3a b5 13 f0       	push   $0xf013b53a
f0127ff1:	e8 0f 82 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127ff6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127ff9:	e8 93 4d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0127ffe:	29 c3                	sub    %eax,%ebx
f0128000:	89 d8                	mov    %ebx,%eax
f0128002:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128007:	74 17                	je     f0128020 <test_kexpand+0x173>
f0128009:	83 ec 04             	sub    $0x4,%esp
f012800c:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128011:	68 45 0b 00 00       	push   $0xb45
f0128016:	68 3a b5 13 f0       	push   $0xf013b53a
f012801b:	e8 e5 81 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128020:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0128027:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012802a:	e8 62 4d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012802f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128032:	e8 91 bd fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128037:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012803a:	83 ec 0c             	sub    $0xc,%esp
f012803d:	68 00 fc 1f 00       	push   $0x1ffc00
f0128042:	e8 33 fa fd ff       	call   f0107a7a <kmalloc>
f0128047:	83 c4 10             	add    $0x10,%esp
f012804a:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128050:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128056:	89 c1                	mov    %eax,%ecx
f0128058:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012805f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128062:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128067:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012806a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012806d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128072:	f7 75 bc             	divl   -0x44(%ebp)
f0128075:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128078:	29 d0                	sub    %edx,%eax
f012807a:	89 c3                	mov    %eax,%ebx
f012807c:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128083:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128088:	0f b6 d0             	movzbl %al,%edx
f012808b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012808e:	01 d0                	add    %edx,%eax
f0128090:	48                   	dec    %eax
f0128091:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128094:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128097:	ba 00 00 00 00       	mov    $0x0,%edx
f012809c:	f7 75 b4             	divl   -0x4c(%ebp)
f012809f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01280a2:	29 d0                	sub    %edx,%eax
f01280a4:	01 c3                	add    %eax,%ebx
f01280a6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01280ad:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01280b2:	0f b6 c0             	movzbl %al,%eax
f01280b5:	c1 e0 04             	shl    $0x4,%eax
f01280b8:	89 c2                	mov    %eax,%edx
f01280ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01280bd:	01 d0                	add    %edx,%eax
f01280bf:	48                   	dec    %eax
f01280c0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01280c3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01280c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01280cb:	f7 75 ac             	divl   -0x54(%ebp)
f01280ce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01280d1:	29 d0                	sub    %edx,%eax
f01280d3:	01 d8                	add    %ebx,%eax
f01280d5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01280da:	39 c1                	cmp    %eax,%ecx
f01280dc:	74 17                	je     f01280f5 <test_kexpand+0x248>
f01280de:	83 ec 04             	sub    $0x4,%esp
f01280e1:	68 20 b6 13 f0       	push   $0xf013b620
f01280e6:	68 4c 0b 00 00       	push   $0xb4c
f01280eb:	68 3a b5 13 f0       	push   $0xf013b53a
f01280f0:	e8 10 81 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01280f5:	e8 ce bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01280fa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01280fd:	74 17                	je     f0128116 <test_kexpand+0x269>
f01280ff:	83 ec 04             	sub    $0x4,%esp
f0128102:	68 54 b5 13 f0       	push   $0xf013b554
f0128107:	68 4d 0b 00 00       	push   $0xb4d
f012810c:	68 3a b5 13 f0       	push   $0xf013b53a
f0128111:	e8 ef 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128116:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128119:	e8 73 4c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012811e:	29 c3                	sub    %eax,%ebx
f0128120:	89 d8                	mov    %ebx,%eax
f0128122:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128127:	74 17                	je     f0128140 <test_kexpand+0x293>
f0128129:	83 ec 04             	sub    $0x4,%esp
f012812c:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128131:	68 4e 0b 00 00       	push   $0xb4e
f0128136:	68 3a b5 13 f0       	push   $0xf013b53a
f012813b:	e8 c5 80 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128140:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0128147:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012814a:	e8 42 4c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012814f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128152:	e8 71 bc fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128157:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012815a:	83 ec 0c             	sub    $0xc,%esp
f012815d:	68 00 08 00 00       	push   $0x800
f0128162:	e8 13 f9 fd ff       	call   f0107a7a <kmalloc>
f0128167:	83 c4 10             	add    $0x10,%esp
f012816a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128170:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0128176:	89 c1                	mov    %eax,%ecx
f0128178:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012817f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128182:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128187:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012818a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012818d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128192:	f7 75 a4             	divl   -0x5c(%ebp)
f0128195:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128198:	29 d0                	sub    %edx,%eax
f012819a:	89 c3                	mov    %eax,%ebx
f012819c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01281a3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01281a8:	0f b6 d0             	movzbl %al,%edx
f01281ab:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01281ae:	01 d0                	add    %edx,%eax
f01281b0:	48                   	dec    %eax
f01281b1:	89 45 98             	mov    %eax,-0x68(%ebp)
f01281b4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01281b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01281bc:	f7 75 9c             	divl   -0x64(%ebp)
f01281bf:	8b 45 98             	mov    -0x68(%ebp),%eax
f01281c2:	29 d0                	sub    %edx,%eax
f01281c4:	01 c3                	add    %eax,%ebx
f01281c6:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01281cd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01281d2:	0f b6 c0             	movzbl %al,%eax
f01281d5:	c1 e0 04             	shl    $0x4,%eax
f01281d8:	89 c2                	mov    %eax,%edx
f01281da:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01281dd:	01 d0                	add    %edx,%eax
f01281df:	48                   	dec    %eax
f01281e0:	89 45 90             	mov    %eax,-0x70(%ebp)
f01281e3:	8b 45 90             	mov    -0x70(%ebp),%eax
f01281e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01281eb:	f7 75 94             	divl   -0x6c(%ebp)
f01281ee:	8b 45 90             	mov    -0x70(%ebp),%eax
f01281f1:	29 d0                	sub    %edx,%eax
f01281f3:	01 d8                	add    %ebx,%eax
f01281f5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01281fa:	39 c1                	cmp    %eax,%ecx
f01281fc:	74 17                	je     f0128215 <test_kexpand+0x368>
f01281fe:	83 ec 04             	sub    $0x4,%esp
f0128201:	68 20 b6 13 f0       	push   $0xf013b620
f0128206:	68 55 0b 00 00       	push   $0xb55
f012820b:	68 3a b5 13 f0       	push   $0xf013b53a
f0128210:	e8 f0 7f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128215:	e8 ae bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012821a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012821d:	74 17                	je     f0128236 <test_kexpand+0x389>
f012821f:	83 ec 04             	sub    $0x4,%esp
f0128222:	68 54 b5 13 f0       	push   $0xf013b554
f0128227:	68 56 0b 00 00       	push   $0xb56
f012822c:	68 3a b5 13 f0       	push   $0xf013b53a
f0128231:	e8 cf 7f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128236:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128239:	e8 53 4b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012823e:	29 c3                	sub    %eax,%ebx
f0128240:	89 d8                	mov    %ebx,%eax
f0128242:	83 f8 01             	cmp    $0x1,%eax
f0128245:	74 17                	je     f012825e <test_kexpand+0x3b1>
f0128247:	83 ec 04             	sub    $0x4,%esp
f012824a:	68 bc b5 13 f0       	push   $0xf013b5bc
f012824f:	68 57 0b 00 00       	push   $0xb57
f0128254:	68 3a b5 13 f0       	push   $0xf013b53a
f0128259:	e8 a7 7f fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012825e:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0128265:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128268:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012826e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128271:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128278:	eb 0e                	jmp    f0128288 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f012827a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012827d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128280:	01 d0                	add    %edx,%eax
f0128282:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128285:	ff 45 f4             	incl   -0xc(%ebp)
f0128288:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012828e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128291:	7f e7                	jg     f012827a <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128293:	e8 f9 4a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128298:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012829b:	e8 28 bb fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01282a0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01282a3:	83 ec 0c             	sub    $0xc,%esp
f01282a6:	68 00 08 00 00       	push   $0x800
f01282ab:	e8 ca f7 fd ff       	call   f0107a7a <kmalloc>
f01282b0:	83 c4 10             	add    $0x10,%esp
f01282b3:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01282b9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01282bf:	89 c1                	mov    %eax,%ecx
f01282c1:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01282c8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01282cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01282d0:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01282d3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01282d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01282db:	f7 75 88             	divl   -0x78(%ebp)
f01282de:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01282e1:	29 d0                	sub    %edx,%eax
f01282e3:	89 c3                	mov    %eax,%ebx
f01282e5:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01282ec:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01282f1:	0f b6 d0             	movzbl %al,%edx
f01282f4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01282f7:	01 d0                	add    %edx,%eax
f01282f9:	48                   	dec    %eax
f01282fa:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128300:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128306:	ba 00 00 00 00       	mov    $0x0,%edx
f012830b:	f7 75 80             	divl   -0x80(%ebp)
f012830e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128314:	29 d0                	sub    %edx,%eax
f0128316:	01 c3                	add    %eax,%ebx
f0128318:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012831f:	10 00 00 
f0128322:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128327:	0f b6 c0             	movzbl %al,%eax
f012832a:	c1 e0 04             	shl    $0x4,%eax
f012832d:	89 c2                	mov    %eax,%edx
f012832f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128335:	01 d0                	add    %edx,%eax
f0128337:	48                   	dec    %eax
f0128338:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012833e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128344:	ba 00 00 00 00       	mov    $0x0,%edx
f0128349:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012834f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128355:	29 d0                	sub    %edx,%eax
f0128357:	01 d8                	add    %ebx,%eax
f0128359:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012835e:	39 c1                	cmp    %eax,%ecx
f0128360:	74 17                	je     f0128379 <test_kexpand+0x4cc>
f0128362:	83 ec 04             	sub    $0x4,%esp
f0128365:	68 20 b6 13 f0       	push   $0xf013b620
f012836a:	68 63 0b 00 00       	push   $0xb63
f012836f:	68 3a b5 13 f0       	push   $0xf013b53a
f0128374:	e8 8c 7e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128379:	e8 4a ba fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012837e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128381:	74 17                	je     f012839a <test_kexpand+0x4ed>
f0128383:	83 ec 04             	sub    $0x4,%esp
f0128386:	68 54 b5 13 f0       	push   $0xf013b554
f012838b:	68 64 0b 00 00       	push   $0xb64
f0128390:	68 3a b5 13 f0       	push   $0xf013b53a
f0128395:	e8 6b 7e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012839a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012839d:	e8 ef 49 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01283a2:	29 c3                	sub    %eax,%ebx
f01283a4:	89 d8                	mov    %ebx,%eax
f01283a6:	83 f8 01             	cmp    $0x1,%eax
f01283a9:	74 17                	je     f01283c2 <test_kexpand+0x515>
f01283ab:	83 ec 04             	sub    $0x4,%esp
f01283ae:	68 bc b5 13 f0       	push   $0xf013b5bc
f01283b3:	68 65 0b 00 00       	push   $0xb65
f01283b8:	68 3a b5 13 f0       	push   $0xf013b53a
f01283bd:	e8 43 7e fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01283c2:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01283c9:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01283cc:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01283d2:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01283d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01283dc:	eb 0e                	jmp    f01283ec <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f01283de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01283e1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01283e4:	01 d0                	add    %edx,%eax
f01283e6:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01283e9:	ff 45 f4             	incl   -0xc(%ebp)
f01283ec:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01283f2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01283f5:	7f e7                	jg     f01283de <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01283f7:	e8 95 49 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01283fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283ff:	e8 c4 b9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128404:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128407:	83 ec 0c             	sub    $0xc,%esp
f012840a:	68 00 1c 00 00       	push   $0x1c00
f012840f:	e8 66 f6 fd ff       	call   f0107a7a <kmalloc>
f0128414:	83 c4 10             	add    $0x10,%esp
f0128417:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012841d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128423:	89 c1                	mov    %eax,%ecx
f0128425:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012842c:	10 00 00 
f012842f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128435:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012843a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128440:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128446:	ba 00 00 00 00       	mov    $0x0,%edx
f012844b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128451:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128457:	29 d0                	sub    %edx,%eax
f0128459:	89 c3                	mov    %eax,%ebx
f012845b:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128462:	10 00 00 
f0128465:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012846a:	0f b6 d0             	movzbl %al,%edx
f012846d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128473:	01 d0                	add    %edx,%eax
f0128475:	48                   	dec    %eax
f0128476:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012847c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128482:	ba 00 00 00 00       	mov    $0x0,%edx
f0128487:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012848d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128493:	29 d0                	sub    %edx,%eax
f0128495:	01 c3                	add    %eax,%ebx
f0128497:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012849e:	10 00 00 
f01284a1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01284a6:	0f b6 c0             	movzbl %al,%eax
f01284a9:	c1 e0 04             	shl    $0x4,%eax
f01284ac:	89 c2                	mov    %eax,%edx
f01284ae:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01284b4:	01 d0                	add    %edx,%eax
f01284b6:	48                   	dec    %eax
f01284b7:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01284bd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01284c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01284c8:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01284ce:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01284d4:	29 d0                	sub    %edx,%eax
f01284d6:	01 d8                	add    %ebx,%eax
f01284d8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01284dd:	39 c1                	cmp    %eax,%ecx
f01284df:	74 17                	je     f01284f8 <test_kexpand+0x64b>
f01284e1:	83 ec 04             	sub    $0x4,%esp
f01284e4:	68 20 b6 13 f0       	push   $0xf013b620
f01284e9:	68 71 0b 00 00       	push   $0xb71
f01284ee:	68 3a b5 13 f0       	push   $0xf013b53a
f01284f3:	e8 0d 7d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01284f8:	e8 cb b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01284fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128500:	74 17                	je     f0128519 <test_kexpand+0x66c>
f0128502:	83 ec 04             	sub    $0x4,%esp
f0128505:	68 54 b5 13 f0       	push   $0xf013b554
f012850a:	68 72 0b 00 00       	push   $0xb72
f012850f:	68 3a b5 13 f0       	push   $0xf013b53a
f0128514:	e8 ec 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128519:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012851c:	e8 70 48 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128521:	29 c3                	sub    %eax,%ebx
f0128523:	89 d8                	mov    %ebx,%eax
f0128525:	83 f8 02             	cmp    $0x2,%eax
f0128528:	74 17                	je     f0128541 <test_kexpand+0x694>
f012852a:	83 ec 04             	sub    $0x4,%esp
f012852d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128532:	68 73 0b 00 00       	push   $0xb73
f0128537:	68 3a b5 13 f0       	push   $0xf013b53a
f012853c:	e8 c4 7c fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128541:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0128548:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012854b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128551:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128554:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012855b:	eb 0e                	jmp    f012856b <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f012855d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128560:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128563:	01 d0                	add    %edx,%eax
f0128565:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128568:	ff 45 f4             	incl   -0xc(%ebp)
f012856b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0128571:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128574:	7f e7                	jg     f012855d <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128576:	e8 16 48 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012857b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012857e:	e8 45 b8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128583:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128586:	83 ec 0c             	sub    $0xc,%esp
f0128589:	68 00 fc 2f 00       	push   $0x2ffc00
f012858e:	e8 e7 f4 fd ff       	call   f0107a7a <kmalloc>
f0128593:	83 c4 10             	add    $0x10,%esp
f0128596:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012859c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01285a2:	89 c1                	mov    %eax,%ecx
f01285a4:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01285ab:	10 00 00 
f01285ae:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01285b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01285b9:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01285bf:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01285c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01285ca:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01285d0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01285d6:	29 d0                	sub    %edx,%eax
f01285d8:	89 c3                	mov    %eax,%ebx
f01285da:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01285e1:	10 00 00 
f01285e4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01285e9:	0f b6 d0             	movzbl %al,%edx
f01285ec:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01285f2:	01 d0                	add    %edx,%eax
f01285f4:	48                   	dec    %eax
f01285f5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01285fb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128601:	ba 00 00 00 00       	mov    $0x0,%edx
f0128606:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012860c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128612:	29 d0                	sub    %edx,%eax
f0128614:	01 c3                	add    %eax,%ebx
f0128616:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012861d:	10 00 00 
f0128620:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128625:	0f b6 c0             	movzbl %al,%eax
f0128628:	c1 e0 04             	shl    $0x4,%eax
f012862b:	89 c2                	mov    %eax,%edx
f012862d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128633:	01 d0                	add    %edx,%eax
f0128635:	48                   	dec    %eax
f0128636:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012863c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128642:	ba 00 00 00 00       	mov    $0x0,%edx
f0128647:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012864d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128653:	29 d0                	sub    %edx,%eax
f0128655:	01 d8                	add    %ebx,%eax
f0128657:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012865c:	39 c1                	cmp    %eax,%ecx
f012865e:	74 17                	je     f0128677 <test_kexpand+0x7ca>
f0128660:	83 ec 04             	sub    $0x4,%esp
f0128663:	68 20 b6 13 f0       	push   $0xf013b620
f0128668:	68 7f 0b 00 00       	push   $0xb7f
f012866d:	68 3a b5 13 f0       	push   $0xf013b53a
f0128672:	e8 8e 7b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128677:	e8 4c b7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012867c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012867f:	74 17                	je     f0128698 <test_kexpand+0x7eb>
f0128681:	83 ec 04             	sub    $0x4,%esp
f0128684:	68 54 b5 13 f0       	push   $0xf013b554
f0128689:	68 80 0b 00 00       	push   $0xb80
f012868e:	68 3a b5 13 f0       	push   $0xf013b53a
f0128693:	e8 6d 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128698:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012869b:	e8 f1 46 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01286a0:	29 c3                	sub    %eax,%ebx
f01286a2:	89 d8                	mov    %ebx,%eax
f01286a4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01286a9:	74 17                	je     f01286c2 <test_kexpand+0x815>
f01286ab:	83 ec 04             	sub    $0x4,%esp
f01286ae:	68 bc b5 13 f0       	push   $0xf013b5bc
f01286b3:	68 81 0b 00 00       	push   $0xb81
f01286b8:	68 3a b5 13 f0       	push   $0xf013b53a
f01286bd:	e8 43 7b fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01286c2:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f01286c9:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01286cc:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01286d2:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01286d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01286dc:	eb 0e                	jmp    f01286ec <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f01286de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01286e1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01286e4:	01 d0                	add    %edx,%eax
f01286e6:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01286e9:	ff 45 f4             	incl   -0xc(%ebp)
f01286ec:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01286f2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01286f5:	7f e7                	jg     f01286de <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01286f7:	e8 95 46 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01286fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286ff:	e8 c4 b6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128704:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128707:	83 ec 0c             	sub    $0xc,%esp
f012870a:	68 00 00 60 00       	push   $0x600000
f012870f:	e8 66 f3 fd ff       	call   f0107a7a <kmalloc>
f0128714:	83 c4 10             	add    $0x10,%esp
f0128717:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012871d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128723:	89 c1                	mov    %eax,%ecx
f0128725:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012872c:	10 00 00 
f012872f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128735:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012873a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128740:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128746:	ba 00 00 00 00       	mov    $0x0,%edx
f012874b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128751:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128757:	29 d0                	sub    %edx,%eax
f0128759:	89 c3                	mov    %eax,%ebx
f012875b:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128762:	10 00 00 
f0128765:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012876a:	0f b6 d0             	movzbl %al,%edx
f012876d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128773:	01 d0                	add    %edx,%eax
f0128775:	48                   	dec    %eax
f0128776:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012877c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128782:	ba 00 00 00 00       	mov    $0x0,%edx
f0128787:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012878d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128793:	29 d0                	sub    %edx,%eax
f0128795:	01 c3                	add    %eax,%ebx
f0128797:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012879e:	10 00 00 
f01287a1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01287a6:	0f b6 c0             	movzbl %al,%eax
f01287a9:	c1 e0 04             	shl    $0x4,%eax
f01287ac:	89 c2                	mov    %eax,%edx
f01287ae:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01287b4:	01 d0                	add    %edx,%eax
f01287b6:	48                   	dec    %eax
f01287b7:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01287bd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01287c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01287c8:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01287ce:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01287d4:	29 d0                	sub    %edx,%eax
f01287d6:	01 d8                	add    %ebx,%eax
f01287d8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01287dd:	39 c1                	cmp    %eax,%ecx
f01287df:	74 17                	je     f01287f8 <test_kexpand+0x94b>
f01287e1:	83 ec 04             	sub    $0x4,%esp
f01287e4:	68 20 b6 13 f0       	push   $0xf013b620
f01287e9:	68 8d 0b 00 00       	push   $0xb8d
f01287ee:	68 3a b5 13 f0       	push   $0xf013b53a
f01287f3:	e8 0d 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287f8:	e8 cb b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01287fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128800:	74 17                	je     f0128819 <test_kexpand+0x96c>
f0128802:	83 ec 04             	sub    $0x4,%esp
f0128805:	68 54 b5 13 f0       	push   $0xf013b554
f012880a:	68 8e 0b 00 00       	push   $0xb8e
f012880f:	68 3a b5 13 f0       	push   $0xf013b53a
f0128814:	e8 ec 79 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128819:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012881c:	e8 70 45 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128821:	29 c3                	sub    %eax,%ebx
f0128823:	89 d8                	mov    %ebx,%eax
f0128825:	3d 00 06 00 00       	cmp    $0x600,%eax
f012882a:	74 17                	je     f0128843 <test_kexpand+0x996>
f012882c:	83 ec 04             	sub    $0x4,%esp
f012882f:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128834:	68 8f 0b 00 00       	push   $0xb8f
f0128839:	68 3a b5 13 f0       	push   $0xf013b53a
f012883e:	e8 c2 79 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128843:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f012884a:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012884d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128853:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128859:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128860:	eb 1a                	jmp    f012887c <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128862:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128865:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012886c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128872:	01 c2                	add    %eax,%edx
f0128874:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128877:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128879:	ff 45 f4             	incl   -0xc(%ebp)
f012887c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128882:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128885:	7d db                	jge    f0128862 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128887:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f012888e:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0128891:	e8 fb 44 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128896:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128899:	e8 2a b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012889e:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f01288a1:	83 ec 0c             	sub    $0xc,%esp
f01288a4:	68 00 00 70 00       	push   $0x700000
f01288a9:	e8 6f f4 fd ff       	call   f0107d1d <kexpand>
f01288ae:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01288b1:	e8 12 b5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01288b6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288b9:	74 19                	je     f01288d4 <test_kexpand+0xa27>
f01288bb:	68 d4 c2 13 f0       	push   $0xf013c2d4
f01288c0:	68 05 c3 13 f0       	push   $0xf013c305
f01288c5:	68 a0 0b 00 00       	push   $0xba0
f01288ca:	68 3a b5 13 f0       	push   $0xf013b53a
f01288cf:	e8 31 79 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f01288d4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01288d7:	e8 b5 44 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01288dc:	29 c3                	sub    %eax,%ebx
f01288de:	89 d8                	mov    %ebx,%eax
f01288e0:	3d 00 01 00 00       	cmp    $0x100,%eax
f01288e5:	74 19                	je     f0128900 <test_kexpand+0xa53>
f01288e7:	68 1c c3 13 f0       	push   $0xf013c31c
f01288ec:	68 05 c3 13 f0       	push   $0xf013c305
f01288f1:	68 a1 0b 00 00       	push   $0xba1
f01288f6:	68 3a b5 13 f0       	push   $0xf013b53a
f01288fb:	e8 05 79 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128900:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128906:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128909:	eb 1a                	jmp    f0128925 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f012890b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012890e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128915:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012891b:	01 c2                	add    %eax,%edx
f012891d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128920:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128922:	ff 45 f4             	incl   -0xc(%ebp)
f0128925:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128928:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f012892e:	7c db                	jl     f012890b <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128930:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128937:	eb 37                	jmp    f0128970 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128939:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012893c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128943:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128949:	01 d0                	add    %edx,%eax
f012894b:	8b 10                	mov    (%eax),%edx
f012894d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128950:	39 c2                	cmp    %eax,%edx
f0128952:	74 19                	je     f012896d <test_kexpand+0xac0>
f0128954:	68 4c c3 13 f0       	push   $0xf013c34c
f0128959:	68 05 c3 13 f0       	push   $0xf013c305
f012895e:	68 ad 0b 00 00       	push   $0xbad
f0128963:	68 3a b5 13 f0       	push   $0xf013b53a
f0128968:	e8 98 78 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f012896d:	ff 45 f4             	incl   -0xc(%ebp)
f0128970:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128973:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128979:	7c be                	jl     f0128939 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012897b:	e8 11 44 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128980:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128983:	e8 40 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128988:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f012898b:	83 ec 0c             	sub    $0xc,%esp
f012898e:	68 00 00 a0 00       	push   $0xa00000
f0128993:	e8 85 f3 fd ff       	call   f0107d1d <kexpand>
f0128998:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012899b:	e8 28 b4 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289a0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289a3:	74 19                	je     f01289be <test_kexpand+0xb11>
f01289a5:	68 d4 c2 13 f0       	push   $0xf013c2d4
f01289aa:	68 05 c3 13 f0       	push   $0xf013c305
f01289af:	68 b8 0b 00 00       	push   $0xbb8
f01289b4:	68 3a b5 13 f0       	push   $0xf013b53a
f01289b9:	e8 47 78 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f01289be:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01289c1:	e8 cb 43 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01289c6:	29 c3                	sub    %eax,%ebx
f01289c8:	89 d8                	mov    %ebx,%eax
f01289ca:	3d 00 03 00 00       	cmp    $0x300,%eax
f01289cf:	74 19                	je     f01289ea <test_kexpand+0xb3d>
f01289d1:	68 58 c3 13 f0       	push   $0xf013c358
f01289d6:	68 05 c3 13 f0       	push   $0xf013c305
f01289db:	68 b9 0b 00 00       	push   $0xbb9
f01289e0:	68 3a b5 13 f0       	push   $0xf013b53a
f01289e5:	e8 1b 78 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01289ea:	e8 a2 43 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01289ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289f2:	e8 d1 b3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01289f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01289fa:	83 ec 0c             	sub    $0xc,%esp
f01289fd:	68 00 00 40 00       	push   $0x400000
f0128a02:	e8 73 f0 fd ff       	call   f0107a7a <kmalloc>
f0128a07:	83 c4 10             	add    $0x10,%esp
f0128a0a:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128a10:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128a16:	89 c1                	mov    %eax,%ecx
f0128a18:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128a1f:	10 00 00 
f0128a22:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128a28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128a2d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128a33:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128a39:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a3e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128a44:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128a4a:	29 d0                	sub    %edx,%eax
f0128a4c:	89 c3                	mov    %eax,%ebx
f0128a4e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128a55:	10 00 00 
f0128a58:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128a5d:	0f b6 d0             	movzbl %al,%edx
f0128a60:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128a66:	01 d0                	add    %edx,%eax
f0128a68:	48                   	dec    %eax
f0128a69:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128a6f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128a75:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a7a:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128a80:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128a86:	29 d0                	sub    %edx,%eax
f0128a88:	01 c3                	add    %eax,%ebx
f0128a8a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128a91:	10 00 00 
f0128a94:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128a99:	0f b6 c0             	movzbl %al,%eax
f0128a9c:	c1 e0 04             	shl    $0x4,%eax
f0128a9f:	89 c2                	mov    %eax,%edx
f0128aa1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128aa7:	01 d0                	add    %edx,%eax
f0128aa9:	48                   	dec    %eax
f0128aaa:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128ab0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128ab6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128abb:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128ac1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128ac7:	29 d0                	sub    %edx,%eax
f0128ac9:	01 d8                	add    %ebx,%eax
f0128acb:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0128ad0:	39 c1                	cmp    %eax,%ecx
f0128ad2:	74 17                	je     f0128aeb <test_kexpand+0xc3e>
f0128ad4:	83 ec 04             	sub    $0x4,%esp
f0128ad7:	68 88 c3 13 f0       	push   $0xf013c388
f0128adc:	68 c4 0b 00 00       	push   $0xbc4
f0128ae1:	68 3a b5 13 f0       	push   $0xf013b53a
f0128ae6:	e8 1a 77 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128aeb:	e8 d8 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128af0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128af3:	74 17                	je     f0128b0c <test_kexpand+0xc5f>
f0128af5:	83 ec 04             	sub    $0x4,%esp
f0128af8:	68 54 b5 13 f0       	push   $0xf013b554
f0128afd:	68 c5 0b 00 00       	push   $0xbc5
f0128b02:	68 3a b5 13 f0       	push   $0xf013b53a
f0128b07:	e8 f9 76 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b0c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128b0f:	e8 7d 42 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128b14:	29 c3                	sub    %eax,%ebx
f0128b16:	89 d8                	mov    %ebx,%eax
f0128b18:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128b1d:	74 17                	je     f0128b36 <test_kexpand+0xc89>
f0128b1f:	83 ec 04             	sub    $0x4,%esp
f0128b22:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128b27:	68 c6 0b 00 00       	push   $0xbc6
f0128b2c:	68 3a b5 13 f0       	push   $0xf013b53a
f0128b31:	e8 cf 76 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128b36:	e8 56 42 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128b3b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b3e:	e8 85 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b43:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128b46:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128b4c:	83 ec 0c             	sub    $0xc,%esp
f0128b4f:	50                   	push   %eax
f0128b50:	e8 f0 ef fd ff       	call   f0107b45 <kfree>
f0128b55:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b58:	e8 6b b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128b5d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b60:	74 17                	je     f0128b79 <test_kexpand+0xccc>
f0128b62:	83 ec 04             	sub    $0x4,%esp
f0128b65:	68 54 b5 13 f0       	push   $0xf013b554
f0128b6a:	68 cf 0b 00 00       	push   $0xbcf
f0128b6f:	68 3a b5 13 f0       	push   $0xf013b53a
f0128b74:	e8 8c 76 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128b79:	e8 13 42 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128b7e:	89 c2                	mov    %eax,%edx
f0128b80:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128b83:	29 c2                	sub    %eax,%edx
f0128b85:	89 d0                	mov    %edx,%eax
f0128b87:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0128b8c:	74 17                	je     f0128ba5 <test_kexpand+0xcf8>
f0128b8e:	83 ec 04             	sub    $0x4,%esp
f0128b91:	68 ec bd 13 f0       	push   $0xf013bdec
f0128b96:	68 d0 0b 00 00       	push   $0xbd0
f0128b9b:	68 3a b5 13 f0       	push   $0xf013b53a
f0128ba0:	e8 60 76 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128ba5:	e8 e7 41 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128baa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bad:	e8 16 b2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128bb2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0128bb5:	83 ec 0c             	sub    $0xc,%esp
f0128bb8:	68 00 50 40 00       	push   $0x405000
f0128bbd:	e8 5b f1 fd ff       	call   f0107d1d <kexpand>
f0128bc2:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128bc5:	e8 fe b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128bca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128bcd:	74 19                	je     f0128be8 <test_kexpand+0xd3b>
f0128bcf:	68 d4 c2 13 f0       	push   $0xf013c2d4
f0128bd4:	68 05 c3 13 f0       	push   $0xf013c305
f0128bd9:	68 da 0b 00 00       	push   $0xbda
f0128bde:	68 3a b5 13 f0       	push   $0xf013b53a
f0128be3:	e8 1d 76 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0128be8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128beb:	e8 a1 41 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128bf0:	29 c3                	sub    %eax,%ebx
f0128bf2:	89 d8                	mov    %ebx,%eax
f0128bf4:	83 f8 05             	cmp    $0x5,%eax
f0128bf7:	74 19                	je     f0128c12 <test_kexpand+0xd65>
f0128bf9:	68 b0 c3 13 f0       	push   $0xf013c3b0
f0128bfe:	68 05 c3 13 f0       	push   $0xf013c305
f0128c03:	68 db 0b 00 00       	push   $0xbdb
f0128c08:	68 3a b5 13 f0       	push   $0xf013b53a
f0128c0d:	e8 f3 75 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128c12:	83 ec 0c             	sub    $0xc,%esp
f0128c15:	68 98 c2 13 f0       	push   $0xf013c298
f0128c1a:	e8 ef 80 fd ff       	call   f0100d0e <cprintf>
f0128c1f:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128c22:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128c27:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128c2a:	5b                   	pop    %ebx
f0128c2b:	5f                   	pop    %edi
f0128c2c:	5d                   	pop    %ebp
f0128c2d:	c3                   	ret    

f0128c2e <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0128c2e:	55                   	push   %ebp
f0128c2f:	89 e5                	mov    %esp,%ebp
f0128c31:	57                   	push   %edi
f0128c32:	53                   	push   %ebx
f0128c33:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0128c39:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128c3d:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128c41:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0128c47:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128c4d:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128c54:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128c5b:	e8 31 41 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128c60:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128c63:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0128c69:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128c6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0128c73:	89 d7                	mov    %edx,%edi
f0128c75:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0128c77:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0128c7d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128c82:	b8 00 00 00 00       	mov    $0x0,%eax
f0128c87:	89 d7                	mov    %edx,%edi
f0128c89:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128c8b:	e8 01 41 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128c90:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c93:	e8 30 b1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128c98:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128c9b:	83 ec 0c             	sub    $0xc,%esp
f0128c9e:	68 00 fc 1f 00       	push   $0x1ffc00
f0128ca3:	e8 d2 ed fd ff       	call   f0107a7a <kmalloc>
f0128ca8:	83 c4 10             	add    $0x10,%esp
f0128cab:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128cb1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128cb7:	89 c1                	mov    %eax,%ecx
f0128cb9:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128cc0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128cc3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128cc8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128ccb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128cce:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cd3:	f7 75 d4             	divl   -0x2c(%ebp)
f0128cd6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128cd9:	29 d0                	sub    %edx,%eax
f0128cdb:	89 c3                	mov    %eax,%ebx
f0128cdd:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128ce4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128ce9:	0f b6 d0             	movzbl %al,%edx
f0128cec:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128cef:	01 d0                	add    %edx,%eax
f0128cf1:	48                   	dec    %eax
f0128cf2:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128cf5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128cf8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cfd:	f7 75 cc             	divl   -0x34(%ebp)
f0128d00:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128d03:	29 d0                	sub    %edx,%eax
f0128d05:	01 c3                	add    %eax,%ebx
f0128d07:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128d0e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128d13:	0f b6 c0             	movzbl %al,%eax
f0128d16:	c1 e0 04             	shl    $0x4,%eax
f0128d19:	89 c2                	mov    %eax,%edx
f0128d1b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128d1e:	01 d0                	add    %edx,%eax
f0128d20:	48                   	dec    %eax
f0128d21:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128d24:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128d27:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d2c:	f7 75 c4             	divl   -0x3c(%ebp)
f0128d2f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128d32:	29 d0                	sub    %edx,%eax
f0128d34:	01 d8                	add    %ebx,%eax
f0128d36:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128d3b:	39 c1                	cmp    %eax,%ecx
f0128d3d:	74 17                	je     f0128d56 <test_kshrink+0x128>
f0128d3f:	83 ec 04             	sub    $0x4,%esp
f0128d42:	68 20 b6 13 f0       	push   $0xf013b620
f0128d47:	68 01 0c 00 00       	push   $0xc01
f0128d4c:	68 3a b5 13 f0       	push   $0xf013b53a
f0128d51:	e8 af 74 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d56:	e8 6d b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128d5b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d5e:	74 17                	je     f0128d77 <test_kshrink+0x149>
f0128d60:	83 ec 04             	sub    $0x4,%esp
f0128d63:	68 54 b5 13 f0       	push   $0xf013b554
f0128d68:	68 02 0c 00 00       	push   $0xc02
f0128d6d:	68 3a b5 13 f0       	push   $0xf013b53a
f0128d72:	e8 8e 74 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d77:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d7a:	e8 12 40 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128d7f:	29 c3                	sub    %eax,%ebx
f0128d81:	89 d8                	mov    %ebx,%eax
f0128d83:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128d88:	74 17                	je     f0128da1 <test_kshrink+0x173>
f0128d8a:	83 ec 04             	sub    $0x4,%esp
f0128d8d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128d92:	68 03 0c 00 00       	push   $0xc03
f0128d97:	68 3a b5 13 f0       	push   $0xf013b53a
f0128d9c:	e8 64 74 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128da1:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128da8:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128dab:	e8 e1 3f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128db0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128db3:	e8 10 b0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128db8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128dbb:	83 ec 0c             	sub    $0xc,%esp
f0128dbe:	68 00 fc 1f 00       	push   $0x1ffc00
f0128dc3:	e8 b2 ec fd ff       	call   f0107a7a <kmalloc>
f0128dc8:	83 c4 10             	add    $0x10,%esp
f0128dcb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128dd1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128dd7:	89 c1                	mov    %eax,%ecx
f0128dd9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128de0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128de3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128de8:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128deb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128dee:	ba 00 00 00 00       	mov    $0x0,%edx
f0128df3:	f7 75 bc             	divl   -0x44(%ebp)
f0128df6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128df9:	29 d0                	sub    %edx,%eax
f0128dfb:	89 c3                	mov    %eax,%ebx
f0128dfd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128e04:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128e09:	0f b6 d0             	movzbl %al,%edx
f0128e0c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128e0f:	01 d0                	add    %edx,%eax
f0128e11:	48                   	dec    %eax
f0128e12:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128e15:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128e18:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e1d:	f7 75 b4             	divl   -0x4c(%ebp)
f0128e20:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128e23:	29 d0                	sub    %edx,%eax
f0128e25:	01 c3                	add    %eax,%ebx
f0128e27:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128e2e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128e33:	0f b6 c0             	movzbl %al,%eax
f0128e36:	c1 e0 04             	shl    $0x4,%eax
f0128e39:	89 c2                	mov    %eax,%edx
f0128e3b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128e3e:	01 d0                	add    %edx,%eax
f0128e40:	48                   	dec    %eax
f0128e41:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128e44:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128e47:	ba 00 00 00 00       	mov    $0x0,%edx
f0128e4c:	f7 75 ac             	divl   -0x54(%ebp)
f0128e4f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128e52:	29 d0                	sub    %edx,%eax
f0128e54:	01 d8                	add    %ebx,%eax
f0128e56:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128e5b:	39 c1                	cmp    %eax,%ecx
f0128e5d:	74 17                	je     f0128e76 <test_kshrink+0x248>
f0128e5f:	83 ec 04             	sub    $0x4,%esp
f0128e62:	68 20 b6 13 f0       	push   $0xf013b620
f0128e67:	68 0a 0c 00 00       	push   $0xc0a
f0128e6c:	68 3a b5 13 f0       	push   $0xf013b53a
f0128e71:	e8 8f 73 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e76:	e8 4d af fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128e7b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e7e:	74 17                	je     f0128e97 <test_kshrink+0x269>
f0128e80:	83 ec 04             	sub    $0x4,%esp
f0128e83:	68 54 b5 13 f0       	push   $0xf013b554
f0128e88:	68 0b 0c 00 00       	push   $0xc0b
f0128e8d:	68 3a b5 13 f0       	push   $0xf013b53a
f0128e92:	e8 6e 73 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e97:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e9a:	e8 f2 3e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128e9f:	29 c3                	sub    %eax,%ebx
f0128ea1:	89 d8                	mov    %ebx,%eax
f0128ea3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128ea8:	74 17                	je     f0128ec1 <test_kshrink+0x293>
f0128eaa:	83 ec 04             	sub    $0x4,%esp
f0128ead:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128eb2:	68 0c 0c 00 00       	push   $0xc0c
f0128eb7:	68 3a b5 13 f0       	push   $0xf013b53a
f0128ebc:	e8 44 73 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128ec1:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128ec8:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128ecb:	e8 c1 3e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128ed0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ed3:	e8 f0 ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128ed8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128edb:	83 ec 0c             	sub    $0xc,%esp
f0128ede:	68 00 08 00 00       	push   $0x800
f0128ee3:	e8 92 eb fd ff       	call   f0107a7a <kmalloc>
f0128ee8:	83 c4 10             	add    $0x10,%esp
f0128eeb:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ef1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128ef7:	89 c1                	mov    %eax,%ecx
f0128ef9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128f00:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128f03:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128f08:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128f0b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128f0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f13:	f7 75 a4             	divl   -0x5c(%ebp)
f0128f16:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128f19:	29 d0                	sub    %edx,%eax
f0128f1b:	89 c3                	mov    %eax,%ebx
f0128f1d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128f24:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128f29:	0f b6 d0             	movzbl %al,%edx
f0128f2c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128f2f:	01 d0                	add    %edx,%eax
f0128f31:	48                   	dec    %eax
f0128f32:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128f35:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128f38:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f3d:	f7 75 9c             	divl   -0x64(%ebp)
f0128f40:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128f43:	29 d0                	sub    %edx,%eax
f0128f45:	01 c3                	add    %eax,%ebx
f0128f47:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128f4e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0128f53:	0f b6 c0             	movzbl %al,%eax
f0128f56:	c1 e0 04             	shl    $0x4,%eax
f0128f59:	89 c2                	mov    %eax,%edx
f0128f5b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128f5e:	01 d0                	add    %edx,%eax
f0128f60:	48                   	dec    %eax
f0128f61:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128f64:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128f67:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f6c:	f7 75 94             	divl   -0x6c(%ebp)
f0128f6f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128f72:	29 d0                	sub    %edx,%eax
f0128f74:	01 d8                	add    %ebx,%eax
f0128f76:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128f7b:	39 c1                	cmp    %eax,%ecx
f0128f7d:	74 17                	je     f0128f96 <test_kshrink+0x368>
f0128f7f:	83 ec 04             	sub    $0x4,%esp
f0128f82:	68 20 b6 13 f0       	push   $0xf013b620
f0128f87:	68 13 0c 00 00       	push   $0xc13
f0128f8c:	68 3a b5 13 f0       	push   $0xf013b53a
f0128f91:	e8 6f 72 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f96:	e8 2d ae fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0128f9b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f9e:	74 17                	je     f0128fb7 <test_kshrink+0x389>
f0128fa0:	83 ec 04             	sub    $0x4,%esp
f0128fa3:	68 54 b5 13 f0       	push   $0xf013b554
f0128fa8:	68 14 0c 00 00       	push   $0xc14
f0128fad:	68 3a b5 13 f0       	push   $0xf013b53a
f0128fb2:	e8 4e 72 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128fb7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128fba:	e8 d2 3d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0128fbf:	29 c3                	sub    %eax,%ebx
f0128fc1:	89 d8                	mov    %ebx,%eax
f0128fc3:	83 f8 01             	cmp    $0x1,%eax
f0128fc6:	74 17                	je     f0128fdf <test_kshrink+0x3b1>
f0128fc8:	83 ec 04             	sub    $0x4,%esp
f0128fcb:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128fd0:	68 15 0c 00 00       	push   $0xc15
f0128fd5:	68 3a b5 13 f0       	push   $0xf013b53a
f0128fda:	e8 26 72 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128fdf:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0128fe6:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128fe9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128fef:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128ff2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ff9:	eb 0e                	jmp    f0129009 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0128ffb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ffe:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129001:	01 d0                	add    %edx,%eax
f0129003:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129006:	ff 45 f4             	incl   -0xc(%ebp)
f0129009:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012900f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129012:	7f e7                	jg     f0128ffb <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129014:	e8 78 3d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129019:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012901c:	e8 a7 ad fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129021:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129024:	83 ec 0c             	sub    $0xc,%esp
f0129027:	68 00 08 00 00       	push   $0x800
f012902c:	e8 49 ea fd ff       	call   f0107a7a <kmalloc>
f0129031:	83 c4 10             	add    $0x10,%esp
f0129034:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012903a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129040:	89 c1                	mov    %eax,%ecx
f0129042:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0129049:	8b 45 88             	mov    -0x78(%ebp),%eax
f012904c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129051:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0129054:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129057:	ba 00 00 00 00       	mov    $0x0,%edx
f012905c:	f7 75 88             	divl   -0x78(%ebp)
f012905f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129062:	29 d0                	sub    %edx,%eax
f0129064:	89 c3                	mov    %eax,%ebx
f0129066:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012906d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129072:	0f b6 d0             	movzbl %al,%edx
f0129075:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129078:	01 d0                	add    %edx,%eax
f012907a:	48                   	dec    %eax
f012907b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129081:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129087:	ba 00 00 00 00       	mov    $0x0,%edx
f012908c:	f7 75 80             	divl   -0x80(%ebp)
f012908f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129095:	29 d0                	sub    %edx,%eax
f0129097:	01 c3                	add    %eax,%ebx
f0129099:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01290a0:	10 00 00 
f01290a3:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01290a8:	0f b6 c0             	movzbl %al,%eax
f01290ab:	c1 e0 04             	shl    $0x4,%eax
f01290ae:	89 c2                	mov    %eax,%edx
f01290b0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01290b6:	01 d0                	add    %edx,%eax
f01290b8:	48                   	dec    %eax
f01290b9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01290bf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01290c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01290ca:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01290d0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01290d6:	29 d0                	sub    %edx,%eax
f01290d8:	01 d8                	add    %ebx,%eax
f01290da:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01290df:	39 c1                	cmp    %eax,%ecx
f01290e1:	74 17                	je     f01290fa <test_kshrink+0x4cc>
f01290e3:	83 ec 04             	sub    $0x4,%esp
f01290e6:	68 20 b6 13 f0       	push   $0xf013b620
f01290eb:	68 21 0c 00 00       	push   $0xc21
f01290f0:	68 3a b5 13 f0       	push   $0xf013b53a
f01290f5:	e8 0b 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01290fa:	e8 c9 ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01290ff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129102:	74 17                	je     f012911b <test_kshrink+0x4ed>
f0129104:	83 ec 04             	sub    $0x4,%esp
f0129107:	68 54 b5 13 f0       	push   $0xf013b554
f012910c:	68 22 0c 00 00       	push   $0xc22
f0129111:	68 3a b5 13 f0       	push   $0xf013b53a
f0129116:	e8 ea 70 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012911b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012911e:	e8 6e 3c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129123:	29 c3                	sub    %eax,%ebx
f0129125:	89 d8                	mov    %ebx,%eax
f0129127:	83 f8 01             	cmp    $0x1,%eax
f012912a:	74 17                	je     f0129143 <test_kshrink+0x515>
f012912c:	83 ec 04             	sub    $0x4,%esp
f012912f:	68 bc b5 13 f0       	push   $0xf013b5bc
f0129134:	68 23 0c 00 00       	push   $0xc23
f0129139:	68 3a b5 13 f0       	push   $0xf013b53a
f012913e:	e8 c2 70 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129143:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f012914a:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012914d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0129153:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129156:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012915d:	eb 0e                	jmp    f012916d <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f012915f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129162:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129165:	01 d0                	add    %edx,%eax
f0129167:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012916a:	ff 45 f4             	incl   -0xc(%ebp)
f012916d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129173:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129176:	7f e7                	jg     f012915f <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129178:	e8 14 3c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012917d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129180:	e8 43 ac fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129185:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129188:	83 ec 0c             	sub    $0xc,%esp
f012918b:	68 00 1c 00 00       	push   $0x1c00
f0129190:	e8 e5 e8 fd ff       	call   f0107a7a <kmalloc>
f0129195:	83 c4 10             	add    $0x10,%esp
f0129198:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012919e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01291a4:	89 c1                	mov    %eax,%ecx
f01291a6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01291ad:	10 00 00 
f01291b0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01291b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01291bb:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01291c1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01291c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01291cc:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01291d2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01291d8:	29 d0                	sub    %edx,%eax
f01291da:	89 c3                	mov    %eax,%ebx
f01291dc:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01291e3:	10 00 00 
f01291e6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01291eb:	0f b6 d0             	movzbl %al,%edx
f01291ee:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01291f4:	01 d0                	add    %edx,%eax
f01291f6:	48                   	dec    %eax
f01291f7:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01291fd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129203:	ba 00 00 00 00       	mov    $0x0,%edx
f0129208:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012920e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0129214:	29 d0                	sub    %edx,%eax
f0129216:	01 c3                	add    %eax,%ebx
f0129218:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012921f:	10 00 00 
f0129222:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129227:	0f b6 c0             	movzbl %al,%eax
f012922a:	c1 e0 04             	shl    $0x4,%eax
f012922d:	89 c2                	mov    %eax,%edx
f012922f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129235:	01 d0                	add    %edx,%eax
f0129237:	48                   	dec    %eax
f0129238:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012923e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129244:	ba 00 00 00 00       	mov    $0x0,%edx
f0129249:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012924f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129255:	29 d0                	sub    %edx,%eax
f0129257:	01 d8                	add    %ebx,%eax
f0129259:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012925e:	39 c1                	cmp    %eax,%ecx
f0129260:	74 17                	je     f0129279 <test_kshrink+0x64b>
f0129262:	83 ec 04             	sub    $0x4,%esp
f0129265:	68 20 b6 13 f0       	push   $0xf013b620
f012926a:	68 2f 0c 00 00       	push   $0xc2f
f012926f:	68 3a b5 13 f0       	push   $0xf013b53a
f0129274:	e8 8c 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129279:	e8 4a ab fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012927e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129281:	74 17                	je     f012929a <test_kshrink+0x66c>
f0129283:	83 ec 04             	sub    $0x4,%esp
f0129286:	68 54 b5 13 f0       	push   $0xf013b554
f012928b:	68 30 0c 00 00       	push   $0xc30
f0129290:	68 3a b5 13 f0       	push   $0xf013b53a
f0129295:	e8 6b 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012929a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012929d:	e8 ef 3a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01292a2:	29 c3                	sub    %eax,%ebx
f01292a4:	89 d8                	mov    %ebx,%eax
f01292a6:	83 f8 02             	cmp    $0x2,%eax
f01292a9:	74 17                	je     f01292c2 <test_kshrink+0x694>
f01292ab:	83 ec 04             	sub    $0x4,%esp
f01292ae:	68 bc b5 13 f0       	push   $0xf013b5bc
f01292b3:	68 31 0c 00 00       	push   $0xc31
f01292b8:	68 3a b5 13 f0       	push   $0xf013b53a
f01292bd:	e8 43 6f fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01292c2:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01292c9:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01292cc:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01292d2:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01292d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01292dc:	eb 0e                	jmp    f01292ec <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f01292de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01292e1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01292e4:	01 d0                	add    %edx,%eax
f01292e6:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01292e9:	ff 45 f4             	incl   -0xc(%ebp)
f01292ec:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01292f2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01292f5:	7f e7                	jg     f01292de <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01292f7:	e8 95 3a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01292fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292ff:	e8 c4 aa fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129304:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0129307:	83 ec 0c             	sub    $0xc,%esp
f012930a:	68 00 fc 2f 00       	push   $0x2ffc00
f012930f:	e8 66 e7 fd ff       	call   f0107a7a <kmalloc>
f0129314:	83 c4 10             	add    $0x10,%esp
f0129317:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012931d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129323:	89 c1                	mov    %eax,%ecx
f0129325:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012932c:	10 00 00 
f012932f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129335:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012933a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0129340:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129346:	ba 00 00 00 00       	mov    $0x0,%edx
f012934b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0129351:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129357:	29 d0                	sub    %edx,%eax
f0129359:	89 c3                	mov    %eax,%ebx
f012935b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129362:	10 00 00 
f0129365:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012936a:	0f b6 d0             	movzbl %al,%edx
f012936d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129373:	01 d0                	add    %edx,%eax
f0129375:	48                   	dec    %eax
f0129376:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012937c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129382:	ba 00 00 00 00       	mov    $0x0,%edx
f0129387:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012938d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129393:	29 d0                	sub    %edx,%eax
f0129395:	01 c3                	add    %eax,%ebx
f0129397:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012939e:	10 00 00 
f01293a1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01293a6:	0f b6 c0             	movzbl %al,%eax
f01293a9:	c1 e0 04             	shl    $0x4,%eax
f01293ac:	89 c2                	mov    %eax,%edx
f01293ae:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01293b4:	01 d0                	add    %edx,%eax
f01293b6:	48                   	dec    %eax
f01293b7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01293bd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01293c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01293c8:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01293ce:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01293d4:	29 d0                	sub    %edx,%eax
f01293d6:	01 d8                	add    %ebx,%eax
f01293d8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01293dd:	39 c1                	cmp    %eax,%ecx
f01293df:	74 17                	je     f01293f8 <test_kshrink+0x7ca>
f01293e1:	83 ec 04             	sub    $0x4,%esp
f01293e4:	68 20 b6 13 f0       	push   $0xf013b620
f01293e9:	68 3d 0c 00 00       	push   $0xc3d
f01293ee:	68 3a b5 13 f0       	push   $0xf013b53a
f01293f3:	e8 0d 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01293f8:	e8 cb a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01293fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129400:	74 17                	je     f0129419 <test_kshrink+0x7eb>
f0129402:	83 ec 04             	sub    $0x4,%esp
f0129405:	68 54 b5 13 f0       	push   $0xf013b554
f012940a:	68 3e 0c 00 00       	push   $0xc3e
f012940f:	68 3a b5 13 f0       	push   $0xf013b53a
f0129414:	e8 ec 6d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129419:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012941c:	e8 70 39 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129421:	29 c3                	sub    %eax,%ebx
f0129423:	89 d8                	mov    %ebx,%eax
f0129425:	3d 00 03 00 00       	cmp    $0x300,%eax
f012942a:	74 17                	je     f0129443 <test_kshrink+0x815>
f012942c:	83 ec 04             	sub    $0x4,%esp
f012942f:	68 bc b5 13 f0       	push   $0xf013b5bc
f0129434:	68 3f 0c 00 00       	push   $0xc3f
f0129439:	68 3a b5 13 f0       	push   $0xf013b53a
f012943e:	e8 c2 6d fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129443:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f012944a:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012944d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129453:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012945d:	eb 0e                	jmp    f012946d <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f012945f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129462:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129465:	01 d0                	add    %edx,%eax
f0129467:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012946a:	ff 45 f4             	incl   -0xc(%ebp)
f012946d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129473:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129476:	7f e7                	jg     f012945f <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129478:	e8 14 39 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012947d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129480:	e8 43 a9 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129485:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0129488:	83 ec 0c             	sub    $0xc,%esp
f012948b:	68 00 00 60 00       	push   $0x600000
f0129490:	e8 e5 e5 fd ff       	call   f0107a7a <kmalloc>
f0129495:	83 c4 10             	add    $0x10,%esp
f0129498:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012949e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01294a4:	89 c1                	mov    %eax,%ecx
f01294a6:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01294ad:	10 00 00 
f01294b0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01294b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01294bb:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01294c1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01294c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01294cc:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01294d2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01294d8:	29 d0                	sub    %edx,%eax
f01294da:	89 c3                	mov    %eax,%ebx
f01294dc:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01294e3:	10 00 00 
f01294e6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01294eb:	0f b6 d0             	movzbl %al,%edx
f01294ee:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01294f4:	01 d0                	add    %edx,%eax
f01294f6:	48                   	dec    %eax
f01294f7:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01294fd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129503:	ba 00 00 00 00       	mov    $0x0,%edx
f0129508:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012950e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129514:	29 d0                	sub    %edx,%eax
f0129516:	01 c3                	add    %eax,%ebx
f0129518:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012951f:	10 00 00 
f0129522:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129527:	0f b6 c0             	movzbl %al,%eax
f012952a:	c1 e0 04             	shl    $0x4,%eax
f012952d:	89 c2                	mov    %eax,%edx
f012952f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129535:	01 d0                	add    %edx,%eax
f0129537:	48                   	dec    %eax
f0129538:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012953e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129544:	ba 00 00 00 00       	mov    $0x0,%edx
f0129549:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012954f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129555:	29 d0                	sub    %edx,%eax
f0129557:	01 d8                	add    %ebx,%eax
f0129559:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012955e:	39 c1                	cmp    %eax,%ecx
f0129560:	74 17                	je     f0129579 <test_kshrink+0x94b>
f0129562:	83 ec 04             	sub    $0x4,%esp
f0129565:	68 20 b6 13 f0       	push   $0xf013b620
f012956a:	68 4b 0c 00 00       	push   $0xc4b
f012956f:	68 3a b5 13 f0       	push   $0xf013b53a
f0129574:	e8 8c 6c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129579:	e8 4a a8 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012957e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129581:	74 17                	je     f012959a <test_kshrink+0x96c>
f0129583:	83 ec 04             	sub    $0x4,%esp
f0129586:	68 54 b5 13 f0       	push   $0xf013b554
f012958b:	68 4c 0c 00 00       	push   $0xc4c
f0129590:	68 3a b5 13 f0       	push   $0xf013b53a
f0129595:	e8 6b 6c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012959a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012959d:	e8 ef 37 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01295a2:	29 c3                	sub    %eax,%ebx
f01295a4:	89 d8                	mov    %ebx,%eax
f01295a6:	3d 00 06 00 00       	cmp    $0x600,%eax
f01295ab:	74 17                	je     f01295c4 <test_kshrink+0x996>
f01295ad:	83 ec 04             	sub    $0x4,%esp
f01295b0:	68 bc b5 13 f0       	push   $0xf013b5bc
f01295b5:	68 4d 0c 00 00       	push   $0xc4d
f01295ba:	68 3a b5 13 f0       	push   $0xf013b53a
f01295bf:	e8 41 6c fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01295c4:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f01295cb:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01295ce:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01295d4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01295da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01295e1:	eb 1a                	jmp    f01295fd <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f01295e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01295e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01295ed:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01295f3:	01 c2                	add    %eax,%edx
f01295f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01295f8:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01295fa:	ff 45 f4             	incl   -0xc(%ebp)
f01295fd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129603:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129606:	7d db                	jge    f01295e3 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129608:	e8 84 37 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012960d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129610:	e8 b3 a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129615:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129618:	83 ec 0c             	sub    $0xc,%esp
f012961b:	68 00 00 50 00       	push   $0x500000
f0129620:	e8 db e6 fd ff       	call   f0107d00 <kshrink>
f0129625:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129628:	e8 9b a7 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012962d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129630:	74 19                	je     f012964b <test_kshrink+0xa1d>
f0129632:	68 d4 c2 13 f0       	push   $0xf013c2d4
f0129637:	68 05 c3 13 f0       	push   $0xf013c305
f012963c:	68 5d 0c 00 00       	push   $0xc5d
f0129641:	68 3a b5 13 f0       	push   $0xf013b53a
f0129646:	e8 ba 6b fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f012964b:	e8 41 37 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129650:	89 c2                	mov    %eax,%edx
f0129652:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129655:	29 c2                	sub    %eax,%edx
f0129657:	89 d0                	mov    %edx,%eax
f0129659:	3d 00 01 00 00       	cmp    $0x100,%eax
f012965e:	74 19                	je     f0129679 <test_kshrink+0xa4b>
f0129660:	68 e0 c3 13 f0       	push   $0xf013c3e0
f0129665:	68 05 c3 13 f0       	push   $0xf013c305
f012966a:	68 5e 0c 00 00       	push   $0xc5e
f012966f:	68 3a b5 13 f0       	push   $0xf013b53a
f0129674:	e8 8c 6b fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0129679:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0129680:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129683:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012968a:	eb 37                	jmp    f01296c3 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f012968c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012968f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129696:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012969c:	01 d0                	add    %edx,%eax
f012969e:	8b 10                	mov    (%eax),%edx
f01296a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01296a3:	39 c2                	cmp    %eax,%edx
f01296a5:	74 19                	je     f01296c0 <test_kshrink+0xa92>
f01296a7:	68 10 c4 13 f0       	push   $0xf013c410
f01296ac:	68 05 c3 13 f0       	push   $0xf013c305
f01296b1:	68 66 0c 00 00       	push   $0xc66
f01296b6:	68 3a b5 13 f0       	push   $0xf013b53a
f01296bb:	e8 45 6b fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01296c0:	ff 45 f4             	incl   -0xc(%ebp)
f01296c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01296c6:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01296cc:	7e be                	jle    f012968c <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01296ce:	83 ec 0c             	sub    $0xc,%esp
f01296d1:	6a 03                	push   $0x3
f01296d3:	e8 59 3b fe ff       	call   f010d231 <sys_bypassPageFault>
f01296d8:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f01296db:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01296e1:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f01296e4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01296e7:	05 00 00 50 00       	add    $0x500000,%eax
f01296ec:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f01296ef:	e8 2b 3b fe ff       	call   f010d21f <sys_rcr2>
f01296f4:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01296f7:	81 c2 00 00 50 00    	add    $0x500000,%edx
f01296fd:	39 d0                	cmp    %edx,%eax
f01296ff:	74 19                	je     f012971a <test_kshrink+0xaec>
f0129701:	68 1c c4 13 f0       	push   $0xf013c41c
f0129706:	68 05 c3 13 f0       	push   $0xf013c305
f012970b:	68 6f 0c 00 00       	push   $0xc6f
f0129710:	68 3a b5 13 f0       	push   $0xf013b53a
f0129715:	e8 eb 6a fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f012971a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012971d:	05 00 10 50 00       	add    $0x501000,%eax
f0129722:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129725:	e8 f5 3a fe ff       	call   f010d21f <sys_rcr2>
f012972a:	8b 55 8c             	mov    -0x74(%ebp),%edx
f012972d:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129733:	39 d0                	cmp    %edx,%eax
f0129735:	74 19                	je     f0129750 <test_kshrink+0xb22>
f0129737:	68 44 c4 13 f0       	push   $0xf013c444
f012973c:	68 05 c3 13 f0       	push   $0xf013c305
f0129741:	68 72 0c 00 00       	push   $0xc72
f0129746:	68 3a b5 13 f0       	push   $0xf013b53a
f012974b:	e8 b5 6a fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f0129750:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129753:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0129758:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f012975b:	e8 bf 3a fe ff       	call   f010d21f <sys_rcr2>
f0129760:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129763:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0129769:	39 d0                	cmp    %edx,%eax
f012976b:	74 19                	je     f0129786 <test_kshrink+0xb58>
f012976d:	68 70 c4 13 f0       	push   $0xf013c470
f0129772:	68 05 c3 13 f0       	push   $0xf013c305
f0129777:	68 75 0c 00 00       	push   $0xc75
f012977c:	68 3a b5 13 f0       	push   $0xf013b53a
f0129781:	e8 7f 6a fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129786:	83 ec 0c             	sub    $0xc,%esp
f0129789:	6a 00                	push   $0x0
f012978b:	e8 a1 3a fe ff       	call   f010d231 <sys_bypassPageFault>
f0129790:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129793:	e8 f9 35 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129798:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012979b:	e8 28 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01297a0:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f01297a3:	83 ec 0c             	sub    $0xc,%esp
f01297a6:	68 00 00 20 00       	push   $0x200000
f01297ab:	e8 50 e5 fd ff       	call   f0107d00 <kshrink>
f01297b0:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01297b3:	e8 10 a6 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01297b8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01297bb:	74 19                	je     f01297d6 <test_kshrink+0xba8>
f01297bd:	68 d4 c2 13 f0       	push   $0xf013c2d4
f01297c2:	68 05 c3 13 f0       	push   $0xf013c305
f01297c7:	68 82 0c 00 00       	push   $0xc82
f01297cc:	68 3a b5 13 f0       	push   $0xf013b53a
f01297d1:	e8 2f 6a fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01297d6:	e8 b6 35 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01297db:	89 c2                	mov    %eax,%edx
f01297dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01297e0:	29 c2                	sub    %eax,%edx
f01297e2:	89 d0                	mov    %edx,%eax
f01297e4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01297e9:	74 19                	je     f0129804 <test_kshrink+0xbd6>
f01297eb:	68 9c c4 13 f0       	push   $0xf013c49c
f01297f0:	68 05 c3 13 f0       	push   $0xf013c305
f01297f5:	68 83 0c 00 00       	push   $0xc83
f01297fa:	68 3a b5 13 f0       	push   $0xf013b53a
f01297ff:	e8 01 6a fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129804:	e8 88 35 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129809:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012980c:	e8 b7 a5 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129811:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129814:	83 ec 0c             	sub    $0xc,%esp
f0129817:	68 00 00 40 00       	push   $0x400000
f012981c:	e8 59 e2 fd ff       	call   f0107a7a <kmalloc>
f0129821:	83 c4 10             	add    $0x10,%esp
f0129824:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f012982a:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129831:	10 00 00 
f0129834:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012983a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012983f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129845:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012984b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129850:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129856:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012985c:	29 d0                	sub    %edx,%eax
f012985e:	89 c1                	mov    %eax,%ecx
f0129860:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129867:	10 00 00 
f012986a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012986f:	0f b6 d0             	movzbl %al,%edx
f0129872:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129878:	01 d0                	add    %edx,%eax
f012987a:	48                   	dec    %eax
f012987b:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129881:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129887:	ba 00 00 00 00       	mov    $0x0,%edx
f012988c:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129892:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129898:	29 d0                	sub    %edx,%eax
f012989a:	01 c1                	add    %eax,%ecx
f012989c:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01298a3:	10 00 00 
f01298a6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01298ab:	0f b6 c0             	movzbl %al,%eax
f01298ae:	c1 e0 04             	shl    $0x4,%eax
f01298b1:	89 c2                	mov    %eax,%edx
f01298b3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01298b9:	01 d0                	add    %edx,%eax
f01298bb:	48                   	dec    %eax
f01298bc:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01298c2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01298c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01298cd:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01298d3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01298d9:	29 d0                	sub    %edx,%eax
f01298db:	01 c8                	add    %ecx,%eax
f01298dd:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f01298e3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01298e9:	83 ec 04             	sub    $0x4,%esp
f01298ec:	52                   	push   %edx
f01298ed:	50                   	push   %eax
f01298ee:	68 cc c4 13 f0       	push   $0xf013c4cc
f01298f3:	e8 16 74 fd ff       	call   f0100d0e <cprintf>
f01298f8:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f01298fb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129901:	89 c1                	mov    %eax,%ecx
f0129903:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f012990a:	10 00 00 
f012990d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129913:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129918:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012991e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129924:	ba 00 00 00 00       	mov    $0x0,%edx
f0129929:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012992f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129935:	29 d0                	sub    %edx,%eax
f0129937:	89 c3                	mov    %eax,%ebx
f0129939:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129940:	10 00 00 
f0129943:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129948:	0f b6 d0             	movzbl %al,%edx
f012994b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129951:	01 d0                	add    %edx,%eax
f0129953:	48                   	dec    %eax
f0129954:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012995a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129960:	ba 00 00 00 00       	mov    $0x0,%edx
f0129965:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012996b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129971:	29 d0                	sub    %edx,%eax
f0129973:	01 c3                	add    %eax,%ebx
f0129975:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012997c:	10 00 00 
f012997f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129984:	0f b6 c0             	movzbl %al,%eax
f0129987:	c1 e0 04             	shl    $0x4,%eax
f012998a:	89 c2                	mov    %eax,%edx
f012998c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129992:	01 d0                	add    %edx,%eax
f0129994:	48                   	dec    %eax
f0129995:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012999b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01299a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01299a6:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01299ac:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01299b2:	29 d0                	sub    %edx,%eax
f01299b4:	01 d8                	add    %ebx,%eax
f01299b6:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f01299bb:	39 c1                	cmp    %eax,%ecx
f01299bd:	74 17                	je     f01299d6 <test_kshrink+0xda8>
f01299bf:	83 ec 04             	sub    $0x4,%esp
f01299c2:	68 e8 c4 13 f0       	push   $0xf013c4e8
f01299c7:	68 8e 0c 00 00       	push   $0xc8e
f01299cc:	68 3a b5 13 f0       	push   $0xf013b53a
f01299d1:	e8 2f 68 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01299d6:	e8 ed a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f01299db:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01299de:	74 17                	je     f01299f7 <test_kshrink+0xdc9>
f01299e0:	83 ec 04             	sub    $0x4,%esp
f01299e3:	68 54 b5 13 f0       	push   $0xf013b554
f01299e8:	68 8f 0c 00 00       	push   $0xc8f
f01299ed:	68 3a b5 13 f0       	push   $0xf013b53a
f01299f2:	e8 0e 68 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01299f7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01299fa:	e8 92 33 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f01299ff:	29 c3                	sub    %eax,%ebx
f0129a01:	89 d8                	mov    %ebx,%eax
f0129a03:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129a08:	74 17                	je     f0129a21 <test_kshrink+0xdf3>
f0129a0a:	83 ec 04             	sub    $0x4,%esp
f0129a0d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0129a12:	68 90 0c 00 00       	push   $0xc90
f0129a17:	68 3a b5 13 f0       	push   $0xf013b53a
f0129a1c:	e8 e4 67 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129a21:	e8 6b 33 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129a26:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a29:	e8 9a a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129a31:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129a37:	83 ec 0c             	sub    $0xc,%esp
f0129a3a:	50                   	push   %eax
f0129a3b:	e8 05 e1 fd ff       	call   f0107b45 <kfree>
f0129a40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a43:	e8 80 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a48:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129a4b:	74 17                	je     f0129a64 <test_kshrink+0xe36>
f0129a4d:	83 ec 04             	sub    $0x4,%esp
f0129a50:	68 54 b5 13 f0       	push   $0xf013b554
f0129a55:	68 9a 0c 00 00       	push   $0xc9a
f0129a5a:	68 3a b5 13 f0       	push   $0xf013b53a
f0129a5f:	e8 a1 67 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129a64:	e8 28 33 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129a69:	89 c2                	mov    %eax,%edx
f0129a6b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129a6e:	29 c2                	sub    %eax,%edx
f0129a70:	89 d0                	mov    %edx,%eax
f0129a72:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129a77:	74 17                	je     f0129a90 <test_kshrink+0xe62>
f0129a79:	83 ec 04             	sub    $0x4,%esp
f0129a7c:	68 ec bd 13 f0       	push   $0xf013bdec
f0129a81:	68 9b 0c 00 00       	push   $0xc9b
f0129a86:	68 3a b5 13 f0       	push   $0xf013b53a
f0129a8b:	e8 75 67 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129a90:	e8 fc 32 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129a95:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a98:	e8 2b a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129a9d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129aa0:	83 ec 0c             	sub    $0xc,%esp
f0129aa3:	68 00 b0 3f 00       	push   $0x3fb000
f0129aa8:	e8 53 e2 fd ff       	call   f0107d00 <kshrink>
f0129aad:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129ab0:	e8 13 a3 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129ab5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129ab8:	74 19                	je     f0129ad3 <test_kshrink+0xea5>
f0129aba:	68 d4 c2 13 f0       	push   $0xf013c2d4
f0129abf:	68 05 c3 13 f0       	push   $0xf013c305
f0129ac4:	68 a5 0c 00 00       	push   $0xca5
f0129ac9:	68 3a b5 13 f0       	push   $0xf013b53a
f0129ace:	e8 32 67 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129ad3:	e8 b9 32 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129ad8:	89 c2                	mov    %eax,%edx
f0129ada:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129add:	29 c2                	sub    %eax,%edx
f0129adf:	89 d0                	mov    %edx,%eax
f0129ae1:	83 f8 05             	cmp    $0x5,%eax
f0129ae4:	74 19                	je     f0129aff <test_kshrink+0xed1>
f0129ae6:	68 3c c5 13 f0       	push   $0xf013c53c
f0129aeb:	68 05 c3 13 f0       	push   $0xf013c305
f0129af0:	68 a6 0c 00 00       	push   $0xca6
f0129af5:	68 3a b5 13 f0       	push   $0xf013b53a
f0129afa:	e8 06 67 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129aff:	83 ec 0c             	sub    $0xc,%esp
f0129b02:	68 98 c2 13 f0       	push   $0xf013c298
f0129b07:	e8 02 72 fd ff       	call   f0100d0e <cprintf>
f0129b0c:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129b0f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129b14:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129b17:	5b                   	pop    %ebx
f0129b18:	5f                   	pop    %edi
f0129b19:	5d                   	pop    %ebp
f0129b1a:	c3                   	ret    

f0129b1b <test_kfreelast>:


int test_kfreelast()
{
f0129b1b:	55                   	push   %ebp
f0129b1c:	89 e5                	mov    %esp,%ebp
f0129b1e:	57                   	push   %edi
f0129b1f:	53                   	push   %ebx
f0129b20:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129b26:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0129b2a:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0129b2e:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129b34:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0129b3a:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129b41:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129b48:	e8 44 32 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129b4d:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0129b50:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0129b56:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129b5b:	b8 00 00 00 00       	mov    $0x0,%eax
f0129b60:	89 d7                	mov    %edx,%edi
f0129b62:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0129b64:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0129b6a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129b6f:	b8 00 00 00 00       	mov    $0x0,%eax
f0129b74:	89 d7                	mov    %edx,%edi
f0129b76:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0129b78:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0129b7e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129b83:	b8 00 00 00 00       	mov    $0x0,%eax
f0129b88:	89 d7                	mov    %edx,%edi
f0129b8a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129b8c:	e8 00 32 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129b91:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b94:	e8 2f a2 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129b99:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129b9c:	83 ec 0c             	sub    $0xc,%esp
f0129b9f:	68 00 fc 1f 00       	push   $0x1ffc00
f0129ba4:	e8 d1 de fd ff       	call   f0107a7a <kmalloc>
f0129ba9:	83 c4 10             	add    $0x10,%esp
f0129bac:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129bb2:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129bb8:	89 c1                	mov    %eax,%ecx
f0129bba:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0129bc1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129bc4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129bc9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0129bcc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129bcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bd4:	f7 75 cc             	divl   -0x34(%ebp)
f0129bd7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129bda:	29 d0                	sub    %edx,%eax
f0129bdc:	89 c3                	mov    %eax,%ebx
f0129bde:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129be5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129bea:	0f b6 d0             	movzbl %al,%edx
f0129bed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129bf0:	01 d0                	add    %edx,%eax
f0129bf2:	48                   	dec    %eax
f0129bf3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129bf6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129bf9:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bfe:	f7 75 c4             	divl   -0x3c(%ebp)
f0129c01:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129c04:	29 d0                	sub    %edx,%eax
f0129c06:	01 c3                	add    %eax,%ebx
f0129c08:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129c0f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129c14:	0f b6 c0             	movzbl %al,%eax
f0129c17:	c1 e0 04             	shl    $0x4,%eax
f0129c1a:	89 c2                	mov    %eax,%edx
f0129c1c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129c1f:	01 d0                	add    %edx,%eax
f0129c21:	48                   	dec    %eax
f0129c22:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129c25:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129c28:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c2d:	f7 75 bc             	divl   -0x44(%ebp)
f0129c30:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129c33:	29 d0                	sub    %edx,%eax
f0129c35:	01 d8                	add    %ebx,%eax
f0129c37:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129c3c:	39 c1                	cmp    %eax,%ecx
f0129c3e:	74 17                	je     f0129c57 <test_kfreelast+0x13c>
f0129c40:	83 ec 04             	sub    $0x4,%esp
f0129c43:	68 20 b6 13 f0       	push   $0xf013b620
f0129c48:	68 ca 0c 00 00       	push   $0xcca
f0129c4d:	68 3a b5 13 f0       	push   $0xf013b53a
f0129c52:	e8 ae 65 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129c57:	e8 6c a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129c5c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c5f:	74 17                	je     f0129c78 <test_kfreelast+0x15d>
f0129c61:	83 ec 04             	sub    $0x4,%esp
f0129c64:	68 54 b5 13 f0       	push   $0xf013b554
f0129c69:	68 cb 0c 00 00       	push   $0xccb
f0129c6e:	68 3a b5 13 f0       	push   $0xf013b53a
f0129c73:	e8 8d 65 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129c78:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129c7b:	e8 11 31 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129c80:	29 c3                	sub    %eax,%ebx
f0129c82:	89 d8                	mov    %ebx,%eax
f0129c84:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129c89:	74 17                	je     f0129ca2 <test_kfreelast+0x187>
f0129c8b:	83 ec 04             	sub    $0x4,%esp
f0129c8e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0129c93:	68 cc 0c 00 00       	push   $0xccc
f0129c98:	68 3a b5 13 f0       	push   $0xf013b53a
f0129c9d:	e8 63 65 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129ca2:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0129ca9:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129cac:	e8 e0 30 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129cb1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cb4:	e8 0f a1 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129cb9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129cbc:	83 ec 0c             	sub    $0xc,%esp
f0129cbf:	68 00 fc 1f 00       	push   $0x1ffc00
f0129cc4:	e8 b1 dd fd ff       	call   f0107a7a <kmalloc>
f0129cc9:	83 c4 10             	add    $0x10,%esp
f0129ccc:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129cd2:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129cd8:	89 c1                	mov    %eax,%ecx
f0129cda:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129ce1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129ce4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129ce9:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129cec:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129cef:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cf4:	f7 75 b4             	divl   -0x4c(%ebp)
f0129cf7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129cfa:	29 d0                	sub    %edx,%eax
f0129cfc:	89 c3                	mov    %eax,%ebx
f0129cfe:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129d05:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129d0a:	0f b6 d0             	movzbl %al,%edx
f0129d0d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129d10:	01 d0                	add    %edx,%eax
f0129d12:	48                   	dec    %eax
f0129d13:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129d16:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129d19:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d1e:	f7 75 ac             	divl   -0x54(%ebp)
f0129d21:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129d24:	29 d0                	sub    %edx,%eax
f0129d26:	01 c3                	add    %eax,%ebx
f0129d28:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129d2f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129d34:	0f b6 c0             	movzbl %al,%eax
f0129d37:	c1 e0 04             	shl    $0x4,%eax
f0129d3a:	89 c2                	mov    %eax,%edx
f0129d3c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0129d3f:	01 d0                	add    %edx,%eax
f0129d41:	48                   	dec    %eax
f0129d42:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129d45:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129d48:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d4d:	f7 75 a4             	divl   -0x5c(%ebp)
f0129d50:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129d53:	29 d0                	sub    %edx,%eax
f0129d55:	01 d8                	add    %ebx,%eax
f0129d57:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129d5c:	39 c1                	cmp    %eax,%ecx
f0129d5e:	74 17                	je     f0129d77 <test_kfreelast+0x25c>
f0129d60:	83 ec 04             	sub    $0x4,%esp
f0129d63:	68 20 b6 13 f0       	push   $0xf013b620
f0129d68:	68 d3 0c 00 00       	push   $0xcd3
f0129d6d:	68 3a b5 13 f0       	push   $0xf013b53a
f0129d72:	e8 8e 64 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129d77:	e8 4c a0 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129d7c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d7f:	74 17                	je     f0129d98 <test_kfreelast+0x27d>
f0129d81:	83 ec 04             	sub    $0x4,%esp
f0129d84:	68 54 b5 13 f0       	push   $0xf013b554
f0129d89:	68 d4 0c 00 00       	push   $0xcd4
f0129d8e:	68 3a b5 13 f0       	push   $0xf013b53a
f0129d93:	e8 6d 64 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129d98:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129d9b:	e8 f1 2f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129da0:	29 c3                	sub    %eax,%ebx
f0129da2:	89 d8                	mov    %ebx,%eax
f0129da4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129da9:	74 17                	je     f0129dc2 <test_kfreelast+0x2a7>
f0129dab:	83 ec 04             	sub    $0x4,%esp
f0129dae:	68 bc b5 13 f0       	push   $0xf013b5bc
f0129db3:	68 d5 0c 00 00       	push   $0xcd5
f0129db8:	68 3a b5 13 f0       	push   $0xf013b53a
f0129dbd:	e8 43 64 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129dc2:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0129dc9:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129dcc:	e8 c0 2f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129dd1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129dd4:	e8 ef 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129dd9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129ddc:	83 ec 0c             	sub    $0xc,%esp
f0129ddf:	68 00 08 00 00       	push   $0x800
f0129de4:	e8 91 dc fd ff       	call   f0107a7a <kmalloc>
f0129de9:	83 c4 10             	add    $0x10,%esp
f0129dec:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129df2:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129df8:	89 c1                	mov    %eax,%ecx
f0129dfa:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129e01:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129e04:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e09:	89 45 98             	mov    %eax,-0x68(%ebp)
f0129e0c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129e0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e14:	f7 75 9c             	divl   -0x64(%ebp)
f0129e17:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129e1a:	29 d0                	sub    %edx,%eax
f0129e1c:	89 c3                	mov    %eax,%ebx
f0129e1e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129e25:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129e2a:	0f b6 d0             	movzbl %al,%edx
f0129e2d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129e30:	01 d0                	add    %edx,%eax
f0129e32:	48                   	dec    %eax
f0129e33:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129e36:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129e39:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e3e:	f7 75 94             	divl   -0x6c(%ebp)
f0129e41:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129e44:	29 d0                	sub    %edx,%eax
f0129e46:	01 c3                	add    %eax,%ebx
f0129e48:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0129e4f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129e54:	0f b6 c0             	movzbl %al,%eax
f0129e57:	c1 e0 04             	shl    $0x4,%eax
f0129e5a:	89 c2                	mov    %eax,%edx
f0129e5c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129e5f:	01 d0                	add    %edx,%eax
f0129e61:	48                   	dec    %eax
f0129e62:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129e65:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129e68:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e6d:	f7 75 8c             	divl   -0x74(%ebp)
f0129e70:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129e73:	29 d0                	sub    %edx,%eax
f0129e75:	01 d8                	add    %ebx,%eax
f0129e77:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129e7c:	39 c1                	cmp    %eax,%ecx
f0129e7e:	74 17                	je     f0129e97 <test_kfreelast+0x37c>
f0129e80:	83 ec 04             	sub    $0x4,%esp
f0129e83:	68 20 b6 13 f0       	push   $0xf013b620
f0129e88:	68 dc 0c 00 00       	push   $0xcdc
f0129e8d:	68 3a b5 13 f0       	push   $0xf013b53a
f0129e92:	e8 6e 63 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e97:	e8 2c 9f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129e9c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e9f:	74 17                	je     f0129eb8 <test_kfreelast+0x39d>
f0129ea1:	83 ec 04             	sub    $0x4,%esp
f0129ea4:	68 54 b5 13 f0       	push   $0xf013b554
f0129ea9:	68 dd 0c 00 00       	push   $0xcdd
f0129eae:	68 3a b5 13 f0       	push   $0xf013b53a
f0129eb3:	e8 4d 63 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129eb8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129ebb:	e8 d1 2e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129ec0:	29 c3                	sub    %eax,%ebx
f0129ec2:	89 d8                	mov    %ebx,%eax
f0129ec4:	83 f8 01             	cmp    $0x1,%eax
f0129ec7:	74 17                	je     f0129ee0 <test_kfreelast+0x3c5>
f0129ec9:	83 ec 04             	sub    $0x4,%esp
f0129ecc:	68 bc b5 13 f0       	push   $0xf013b5bc
f0129ed1:	68 de 0c 00 00       	push   $0xcde
f0129ed6:	68 3a b5 13 f0       	push   $0xf013b53a
f0129edb:	e8 25 63 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129ee0:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0129ee7:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129eea:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129ef0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129ef3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129efa:	eb 0e                	jmp    f0129f0a <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f0129efc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129eff:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129f02:	01 d0                	add    %edx,%eax
f0129f04:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129f07:	ff 45 f4             	incl   -0xc(%ebp)
f0129f0a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129f10:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129f13:	7f e7                	jg     f0129efc <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f15:	e8 77 2e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f0129f1a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f1d:	e8 a6 9e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f0129f22:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129f25:	83 ec 0c             	sub    $0xc,%esp
f0129f28:	68 00 08 00 00       	push   $0x800
f0129f2d:	e8 48 db fd ff       	call   f0107a7a <kmalloc>
f0129f32:	83 c4 10             	add    $0x10,%esp
f0129f35:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129f3b:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129f41:	89 c1                	mov    %eax,%ecx
f0129f43:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129f4a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129f4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129f52:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129f58:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129f5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f63:	f7 75 80             	divl   -0x80(%ebp)
f0129f66:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129f6c:	29 d0                	sub    %edx,%eax
f0129f6e:	89 c3                	mov    %eax,%ebx
f0129f70:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129f77:	10 00 00 
f0129f7a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129f7f:	0f b6 d0             	movzbl %al,%edx
f0129f82:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129f88:	01 d0                	add    %edx,%eax
f0129f8a:	48                   	dec    %eax
f0129f8b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129f91:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129f97:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f9c:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129fa2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129fa8:	29 d0                	sub    %edx,%eax
f0129faa:	01 c3                	add    %eax,%ebx
f0129fac:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129fb3:	10 00 00 
f0129fb6:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0129fbb:	0f b6 c0             	movzbl %al,%eax
f0129fbe:	c1 e0 04             	shl    $0x4,%eax
f0129fc1:	89 c2                	mov    %eax,%edx
f0129fc3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129fc9:	01 d0                	add    %edx,%eax
f0129fcb:	48                   	dec    %eax
f0129fcc:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129fd2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129fd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fdd:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0129fe3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129fe9:	29 d0                	sub    %edx,%eax
f0129feb:	01 d8                	add    %ebx,%eax
f0129fed:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129ff2:	39 c1                	cmp    %eax,%ecx
f0129ff4:	74 17                	je     f012a00d <test_kfreelast+0x4f2>
f0129ff6:	83 ec 04             	sub    $0x4,%esp
f0129ff9:	68 20 b6 13 f0       	push   $0xf013b620
f0129ffe:	68 ea 0c 00 00       	push   $0xcea
f012a003:	68 3a b5 13 f0       	push   $0xf013b53a
f012a008:	e8 f8 61 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a00d:	e8 b6 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a012:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a015:	74 17                	je     f012a02e <test_kfreelast+0x513>
f012a017:	83 ec 04             	sub    $0x4,%esp
f012a01a:	68 54 b5 13 f0       	push   $0xf013b554
f012a01f:	68 eb 0c 00 00       	push   $0xceb
f012a024:	68 3a b5 13 f0       	push   $0xf013b53a
f012a029:	e8 d7 61 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a02e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a031:	e8 5b 2d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a036:	29 c3                	sub    %eax,%ebx
f012a038:	89 d8                	mov    %ebx,%eax
f012a03a:	83 f8 01             	cmp    $0x1,%eax
f012a03d:	74 17                	je     f012a056 <test_kfreelast+0x53b>
f012a03f:	83 ec 04             	sub    $0x4,%esp
f012a042:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a047:	68 ec 0c 00 00       	push   $0xcec
f012a04c:	68 3a b5 13 f0       	push   $0xf013b53a
f012a051:	e8 af 61 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a056:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a05d:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a060:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a066:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a069:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a070:	eb 0e                	jmp    f012a080 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a072:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a075:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a078:	01 d0                	add    %edx,%eax
f012a07a:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a07d:	ff 45 f4             	incl   -0xc(%ebp)
f012a080:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a086:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a089:	7f e7                	jg     f012a072 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a08b:	e8 01 2d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a090:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a093:	e8 30 9d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a098:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a09b:	83 ec 0c             	sub    $0xc,%esp
f012a09e:	68 00 1c 00 00       	push   $0x1c00
f012a0a3:	e8 d2 d9 fd ff       	call   f0107a7a <kmalloc>
f012a0a8:	83 c4 10             	add    $0x10,%esp
f012a0ab:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a0b1:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a0b7:	89 c1                	mov    %eax,%ecx
f012a0b9:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a0c0:	10 00 00 
f012a0c3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a0c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a0ce:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a0d4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a0da:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0df:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a0e5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a0eb:	29 d0                	sub    %edx,%eax
f012a0ed:	89 c3                	mov    %eax,%ebx
f012a0ef:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a0f6:	10 00 00 
f012a0f9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a0fe:	0f b6 d0             	movzbl %al,%edx
f012a101:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a107:	01 d0                	add    %edx,%eax
f012a109:	48                   	dec    %eax
f012a10a:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a110:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a116:	ba 00 00 00 00       	mov    $0x0,%edx
f012a11b:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a121:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a127:	29 d0                	sub    %edx,%eax
f012a129:	01 c3                	add    %eax,%ebx
f012a12b:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a132:	10 00 00 
f012a135:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a13a:	0f b6 c0             	movzbl %al,%eax
f012a13d:	c1 e0 04             	shl    $0x4,%eax
f012a140:	89 c2                	mov    %eax,%edx
f012a142:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a148:	01 d0                	add    %edx,%eax
f012a14a:	48                   	dec    %eax
f012a14b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a151:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a157:	ba 00 00 00 00       	mov    $0x0,%edx
f012a15c:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a162:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a168:	29 d0                	sub    %edx,%eax
f012a16a:	01 d8                	add    %ebx,%eax
f012a16c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a171:	39 c1                	cmp    %eax,%ecx
f012a173:	74 17                	je     f012a18c <test_kfreelast+0x671>
f012a175:	83 ec 04             	sub    $0x4,%esp
f012a178:	68 20 b6 13 f0       	push   $0xf013b620
f012a17d:	68 f8 0c 00 00       	push   $0xcf8
f012a182:	68 3a b5 13 f0       	push   $0xf013b53a
f012a187:	e8 79 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a18c:	e8 37 9c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a191:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a194:	74 17                	je     f012a1ad <test_kfreelast+0x692>
f012a196:	83 ec 04             	sub    $0x4,%esp
f012a199:	68 54 b5 13 f0       	push   $0xf013b554
f012a19e:	68 f9 0c 00 00       	push   $0xcf9
f012a1a3:	68 3a b5 13 f0       	push   $0xf013b53a
f012a1a8:	e8 58 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a1ad:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a1b0:	e8 dc 2b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a1b5:	29 c3                	sub    %eax,%ebx
f012a1b7:	89 d8                	mov    %ebx,%eax
f012a1b9:	83 f8 02             	cmp    $0x2,%eax
f012a1bc:	74 17                	je     f012a1d5 <test_kfreelast+0x6ba>
f012a1be:	83 ec 04             	sub    $0x4,%esp
f012a1c1:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a1c6:	68 fa 0c 00 00       	push   $0xcfa
f012a1cb:	68 3a b5 13 f0       	push   $0xf013b53a
f012a1d0:	e8 30 60 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a1d5:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a1dc:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a1df:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a1e5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a1e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a1ef:	eb 0e                	jmp    f012a1ff <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a1f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a1f4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a1f7:	01 d0                	add    %edx,%eax
f012a1f9:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a1fc:	ff 45 f4             	incl   -0xc(%ebp)
f012a1ff:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a205:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a208:	7f e7                	jg     f012a1f1 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a20a:	e8 82 2b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a20f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a212:	e8 b1 9b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a217:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a21a:	83 ec 0c             	sub    $0xc,%esp
f012a21d:	68 00 fc 2f 00       	push   $0x2ffc00
f012a222:	e8 53 d8 fd ff       	call   f0107a7a <kmalloc>
f012a227:	83 c4 10             	add    $0x10,%esp
f012a22a:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a230:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a236:	89 c1                	mov    %eax,%ecx
f012a238:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a23f:	10 00 00 
f012a242:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a248:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a24d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a253:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a259:	ba 00 00 00 00       	mov    $0x0,%edx
f012a25e:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a264:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a26a:	29 d0                	sub    %edx,%eax
f012a26c:	89 c3                	mov    %eax,%ebx
f012a26e:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a275:	10 00 00 
f012a278:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a27d:	0f b6 d0             	movzbl %al,%edx
f012a280:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a286:	01 d0                	add    %edx,%eax
f012a288:	48                   	dec    %eax
f012a289:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a28f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a295:	ba 00 00 00 00       	mov    $0x0,%edx
f012a29a:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a2a0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a2a6:	29 d0                	sub    %edx,%eax
f012a2a8:	01 c3                	add    %eax,%ebx
f012a2aa:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a2b1:	10 00 00 
f012a2b4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a2b9:	0f b6 c0             	movzbl %al,%eax
f012a2bc:	c1 e0 04             	shl    $0x4,%eax
f012a2bf:	89 c2                	mov    %eax,%edx
f012a2c1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a2c7:	01 d0                	add    %edx,%eax
f012a2c9:	48                   	dec    %eax
f012a2ca:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a2d0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a2d6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2db:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a2e1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a2e7:	29 d0                	sub    %edx,%eax
f012a2e9:	01 d8                	add    %ebx,%eax
f012a2eb:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a2f0:	39 c1                	cmp    %eax,%ecx
f012a2f2:	74 17                	je     f012a30b <test_kfreelast+0x7f0>
f012a2f4:	83 ec 04             	sub    $0x4,%esp
f012a2f7:	68 20 b6 13 f0       	push   $0xf013b620
f012a2fc:	68 06 0d 00 00       	push   $0xd06
f012a301:	68 3a b5 13 f0       	push   $0xf013b53a
f012a306:	e8 fa 5e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a30b:	e8 b8 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a310:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a313:	74 17                	je     f012a32c <test_kfreelast+0x811>
f012a315:	83 ec 04             	sub    $0x4,%esp
f012a318:	68 54 b5 13 f0       	push   $0xf013b554
f012a31d:	68 07 0d 00 00       	push   $0xd07
f012a322:	68 3a b5 13 f0       	push   $0xf013b53a
f012a327:	e8 d9 5e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a32c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a32f:	e8 5d 2a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a334:	29 c3                	sub    %eax,%ebx
f012a336:	89 d8                	mov    %ebx,%eax
f012a338:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a33d:	74 17                	je     f012a356 <test_kfreelast+0x83b>
f012a33f:	83 ec 04             	sub    $0x4,%esp
f012a342:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a347:	68 08 0d 00 00       	push   $0xd08
f012a34c:	68 3a b5 13 f0       	push   $0xf013b53a
f012a351:	e8 af 5e fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a356:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a35d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a360:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a366:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a369:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a370:	eb 0e                	jmp    f012a380 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a372:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a375:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a378:	01 d0                	add    %edx,%eax
f012a37a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a37d:	ff 45 f4             	incl   -0xc(%ebp)
f012a380:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a386:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a389:	7f e7                	jg     f012a372 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a38b:	e8 01 2a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a390:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a393:	e8 30 9a fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a398:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a39b:	83 ec 0c             	sub    $0xc,%esp
f012a39e:	68 00 fc 5f 00       	push   $0x5ffc00
f012a3a3:	e8 d2 d6 fd ff       	call   f0107a7a <kmalloc>
f012a3a8:	83 c4 10             	add    $0x10,%esp
f012a3ab:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a3b1:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a3b7:	89 c1                	mov    %eax,%ecx
f012a3b9:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a3c0:	10 00 00 
f012a3c3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a3c9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a3ce:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a3d4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a3da:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3df:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a3e5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a3eb:	29 d0                	sub    %edx,%eax
f012a3ed:	89 c3                	mov    %eax,%ebx
f012a3ef:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a3f6:	10 00 00 
f012a3f9:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a3fe:	0f b6 d0             	movzbl %al,%edx
f012a401:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a407:	01 d0                	add    %edx,%eax
f012a409:	48                   	dec    %eax
f012a40a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a410:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a416:	ba 00 00 00 00       	mov    $0x0,%edx
f012a41b:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a421:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a427:	29 d0                	sub    %edx,%eax
f012a429:	01 c3                	add    %eax,%ebx
f012a42b:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a432:	10 00 00 
f012a435:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a43a:	0f b6 c0             	movzbl %al,%eax
f012a43d:	c1 e0 04             	shl    $0x4,%eax
f012a440:	89 c2                	mov    %eax,%edx
f012a442:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a448:	01 d0                	add    %edx,%eax
f012a44a:	48                   	dec    %eax
f012a44b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a451:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a457:	ba 00 00 00 00       	mov    $0x0,%edx
f012a45c:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a462:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a468:	29 d0                	sub    %edx,%eax
f012a46a:	01 d8                	add    %ebx,%eax
f012a46c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a471:	39 c1                	cmp    %eax,%ecx
f012a473:	74 17                	je     f012a48c <test_kfreelast+0x971>
f012a475:	83 ec 04             	sub    $0x4,%esp
f012a478:	68 20 b6 13 f0       	push   $0xf013b620
f012a47d:	68 14 0d 00 00       	push   $0xd14
f012a482:	68 3a b5 13 f0       	push   $0xf013b53a
f012a487:	e8 79 5d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a48c:	e8 37 99 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a491:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a494:	74 17                	je     f012a4ad <test_kfreelast+0x992>
f012a496:	83 ec 04             	sub    $0x4,%esp
f012a499:	68 54 b5 13 f0       	push   $0xf013b554
f012a49e:	68 15 0d 00 00       	push   $0xd15
f012a4a3:	68 3a b5 13 f0       	push   $0xf013b53a
f012a4a8:	e8 58 5d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a4ad:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a4b0:	e8 dc 28 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a4b5:	29 c3                	sub    %eax,%ebx
f012a4b7:	89 d8                	mov    %ebx,%eax
f012a4b9:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a4be:	74 17                	je     f012a4d7 <test_kfreelast+0x9bc>
f012a4c0:	83 ec 04             	sub    $0x4,%esp
f012a4c3:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a4c8:	68 16 0d 00 00       	push   $0xd16
f012a4cd:	68 3a b5 13 f0       	push   $0xf013b53a
f012a4d2:	e8 2e 5d fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012a4d7:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012a4de:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a4e1:	e8 ab 28 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a4e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4e9:	e8 da 98 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a4ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012a4f1:	83 ec 0c             	sub    $0xc,%esp
f012a4f4:	68 00 38 00 00       	push   $0x3800
f012a4f9:	e8 7c d5 fd ff       	call   f0107a7a <kmalloc>
f012a4fe:	83 c4 10             	add    $0x10,%esp
f012a501:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a507:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a50d:	89 c1                	mov    %eax,%ecx
f012a50f:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012a516:	10 00 00 
f012a519:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a51f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a524:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012a52a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a530:	ba 00 00 00 00       	mov    $0x0,%edx
f012a535:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012a53b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012a541:	29 d0                	sub    %edx,%eax
f012a543:	89 c3                	mov    %eax,%ebx
f012a545:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012a54c:	10 00 00 
f012a54f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a554:	0f b6 d0             	movzbl %al,%edx
f012a557:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012a55d:	01 d0                	add    %edx,%eax
f012a55f:	48                   	dec    %eax
f012a560:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012a566:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a56c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a571:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012a577:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012a57d:	29 d0                	sub    %edx,%eax
f012a57f:	01 c3                	add    %eax,%ebx
f012a581:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012a588:	10 00 00 
f012a58b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012a590:	0f b6 c0             	movzbl %al,%eax
f012a593:	c1 e0 04             	shl    $0x4,%eax
f012a596:	89 c2                	mov    %eax,%edx
f012a598:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012a59e:	01 d0                	add    %edx,%eax
f012a5a0:	48                   	dec    %eax
f012a5a1:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012a5a7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a5ad:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5b2:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012a5b8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012a5be:	29 d0                	sub    %edx,%eax
f012a5c0:	01 d8                	add    %ebx,%eax
f012a5c2:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012a5c7:	39 c1                	cmp    %eax,%ecx
f012a5c9:	74 17                	je     f012a5e2 <test_kfreelast+0xac7>
f012a5cb:	83 ec 04             	sub    $0x4,%esp
f012a5ce:	68 20 b6 13 f0       	push   $0xf013b620
f012a5d3:	68 1d 0d 00 00       	push   $0xd1d
f012a5d8:	68 3a b5 13 f0       	push   $0xf013b53a
f012a5dd:	e8 23 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a5e2:	e8 e1 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a5e7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5ea:	74 17                	je     f012a603 <test_kfreelast+0xae8>
f012a5ec:	83 ec 04             	sub    $0x4,%esp
f012a5ef:	68 54 b5 13 f0       	push   $0xf013b554
f012a5f4:	68 1e 0d 00 00       	push   $0xd1e
f012a5f9:	68 3a b5 13 f0       	push   $0xf013b53a
f012a5fe:	e8 02 5c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a603:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a606:	e8 86 27 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a60b:	29 c3                	sub    %eax,%ebx
f012a60d:	89 d8                	mov    %ebx,%eax
f012a60f:	83 f8 04             	cmp    $0x4,%eax
f012a612:	74 17                	je     f012a62b <test_kfreelast+0xb10>
f012a614:	83 ec 04             	sub    $0x4,%esp
f012a617:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a61c:	68 1f 0d 00 00       	push   $0xd1f
f012a621:	68 3a b5 13 f0       	push   $0xf013b53a
f012a626:	e8 da 5b fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012a62b:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012a632:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012a635:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a63b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a63e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a645:	eb 0e                	jmp    f012a655 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012a647:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a64a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a64d:	01 d0                	add    %edx,%eax
f012a64f:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a652:	ff 45 f4             	incl   -0xc(%ebp)
f012a655:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a65b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a65e:	7f e7                	jg     f012a647 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012a660:	e8 2c 27 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a665:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012a66b:	e8 58 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a670:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012a676:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a67c:	83 ec 0c             	sub    $0xc,%esp
f012a67f:	50                   	push   %eax
f012a680:	e8 c0 d4 fd ff       	call   f0107b45 <kfree>
f012a685:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a688:	e8 3b 97 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a68d:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a693:	74 17                	je     f012a6ac <test_kfreelast+0xb91>
f012a695:	83 ec 04             	sub    $0x4,%esp
f012a698:	68 54 b5 13 f0       	push   $0xf013b554
f012a69d:	68 2e 0d 00 00       	push   $0xd2e
f012a6a2:	68 3a b5 13 f0       	push   $0xf013b53a
f012a6a7:	e8 59 5b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012a6ac:	e8 e0 26 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a6b1:	89 c2                	mov    %eax,%edx
f012a6b3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a6b9:	29 c2                	sub    %eax,%edx
f012a6bb:	89 d0                	mov    %edx,%eax
f012a6bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a6c2:	74 17                	je     f012a6db <test_kfreelast+0xbc0>
f012a6c4:	83 ec 04             	sub    $0x4,%esp
f012a6c7:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012a6cc:	68 2f 0d 00 00       	push   $0xd2f
f012a6d1:	68 3a b5 13 f0       	push   $0xf013b53a
f012a6d6:	e8 2a 5b fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a6db:	e8 b1 26 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a6e0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a6e6:	e8 dd 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a6eb:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012a6f1:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a6f7:	83 ec 0c             	sub    $0xc,%esp
f012a6fa:	50                   	push   %eax
f012a6fb:	e8 45 d4 fd ff       	call   f0107b45 <kfree>
f012a700:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a703:	e8 c0 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a708:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a70e:	74 17                	je     f012a727 <test_kfreelast+0xc0c>
f012a710:	83 ec 04             	sub    $0x4,%esp
f012a713:	68 54 b5 13 f0       	push   $0xf013b554
f012a718:	68 35 0d 00 00       	push   $0xd35
f012a71d:	68 3a b5 13 f0       	push   $0xf013b53a
f012a722:	e8 de 5a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012a727:	e8 65 26 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a72c:	89 c2                	mov    %eax,%edx
f012a72e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a734:	29 c2                	sub    %eax,%edx
f012a736:	89 d0                	mov    %edx,%eax
f012a738:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a73d:	74 17                	je     f012a756 <test_kfreelast+0xc3b>
f012a73f:	83 ec 04             	sub    $0x4,%esp
f012a742:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012a747:	68 36 0d 00 00       	push   $0xd36
f012a74c:	68 3a b5 13 f0       	push   $0xf013b53a
f012a751:	e8 af 5a fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a756:	e8 36 26 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a75b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a761:	e8 62 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a766:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012a76c:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a772:	83 ec 0c             	sub    $0xc,%esp
f012a775:	50                   	push   %eax
f012a776:	e8 ca d3 fd ff       	call   f0107b45 <kfree>
f012a77b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a77e:	e8 45 96 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a783:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012a789:	74 17                	je     f012a7a2 <test_kfreelast+0xc87>
f012a78b:	83 ec 04             	sub    $0x4,%esp
f012a78e:	68 54 b5 13 f0       	push   $0xf013b554
f012a793:	68 3c 0d 00 00       	push   $0xd3c
f012a798:	68 3a b5 13 f0       	push   $0xf013b53a
f012a79d:	e8 63 5a fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012a7a2:	e8 ea 25 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a7a7:	89 c2                	mov    %eax,%edx
f012a7a9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012a7af:	29 c2                	sub    %eax,%edx
f012a7b1:	89 d0                	mov    %edx,%eax
f012a7b3:	3d 00 06 00 00       	cmp    $0x600,%eax
f012a7b8:	74 17                	je     f012a7d1 <test_kfreelast+0xcb6>
f012a7ba:	83 ec 04             	sub    $0x4,%esp
f012a7bd:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012a7c2:	68 3d 0d 00 00       	push   $0xd3d
f012a7c7:	68 3a b5 13 f0       	push   $0xf013b53a
f012a7cc:	e8 34 5a fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012a7d1:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a7d7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a7da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7e1:	eb 1e                	jmp    f012a801 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012a7e3:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a7e9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a7ec:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a7ef:	01 c8                	add    %ecx,%eax
f012a7f1:	8a 00                	mov    (%eax),%al
f012a7f3:	0f be c0             	movsbl %al,%eax
f012a7f6:	01 d0                	add    %edx,%eax
f012a7f8:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a7fe:	ff 45 f4             	incl   -0xc(%ebp)
f012a801:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a807:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a80a:	7f d7                	jg     f012a7e3 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012a80c:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012a812:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a818:	01 c0                	add    %eax,%eax
f012a81a:	39 c2                	cmp    %eax,%edx
f012a81c:	74 17                	je     f012a835 <test_kfreelast+0xd1a>
f012a81e:	83 ec 04             	sub    $0x4,%esp
f012a821:	68 20 bd 13 f0       	push   $0xf013bd20
f012a826:	68 48 0d 00 00       	push   $0xd48
f012a82b:	68 3a b5 13 f0       	push   $0xf013b53a
f012a830:	e8 d0 59 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012a835:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a83b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a83e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a845:	eb 1e                	jmp    f012a865 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012a847:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a84d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a850:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a853:	01 c8                	add    %ecx,%eax
f012a855:	8a 00                	mov    (%eax),%al
f012a857:	0f be c0             	movsbl %al,%eax
f012a85a:	01 d0                	add    %edx,%eax
f012a85c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a862:	ff 45 f4             	incl   -0xc(%ebp)
f012a865:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a86b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a86e:	7f d7                	jg     f012a847 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012a870:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012a876:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a87c:	89 c1                	mov    %eax,%ecx
f012a87e:	01 c9                	add    %ecx,%ecx
f012a880:	01 c8                	add    %ecx,%eax
f012a882:	39 c2                	cmp    %eax,%edx
f012a884:	74 17                	je     f012a89d <test_kfreelast+0xd82>
f012a886:	83 ec 04             	sub    $0x4,%esp
f012a889:	68 20 bd 13 f0       	push   $0xf013bd20
f012a88e:	68 50 0d 00 00       	push   $0xd50
f012a893:	68 3a b5 13 f0       	push   $0xf013b53a
f012a898:	e8 68 59 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012a89d:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a8a3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a8a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8ad:	eb 1e                	jmp    f012a8cd <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a8af:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a8b5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a8b8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8bb:	01 c8                	add    %ecx,%eax
f012a8bd:	8a 00                	mov    (%eax),%al
f012a8bf:	0f be c0             	movsbl %al,%eax
f012a8c2:	01 d0                	add    %edx,%eax
f012a8c4:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a8ca:	ff 45 f4             	incl   -0xc(%ebp)
f012a8cd:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a8d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a8d6:	7f d7                	jg     f012a8af <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a8d8:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a8de:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a8e4:	c1 e2 02             	shl    $0x2,%edx
f012a8e7:	39 d0                	cmp    %edx,%eax
f012a8e9:	74 17                	je     f012a902 <test_kfreelast+0xde7>
f012a8eb:	83 ec 04             	sub    $0x4,%esp
f012a8ee:	68 20 bd 13 f0       	push   $0xf013bd20
f012a8f3:	68 58 0d 00 00       	push   $0xd58
f012a8f8:	68 3a b5 13 f0       	push   $0xf013b53a
f012a8fd:	e8 03 59 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012a902:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a908:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a90b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a912:	eb 1e                	jmp    f012a932 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012a914:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012a91a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a91d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a920:	01 c8                	add    %ecx,%eax
f012a922:	8a 00                	mov    (%eax),%al
f012a924:	0f be c0             	movsbl %al,%eax
f012a927:	01 d0                	add    %edx,%eax
f012a929:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a92f:	ff 45 f4             	incl   -0xc(%ebp)
f012a932:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a938:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a93b:	7f d7                	jg     f012a914 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012a93d:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012a943:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012a949:	89 d0                	mov    %edx,%eax
f012a94b:	c1 e0 02             	shl    $0x2,%eax
f012a94e:	01 d0                	add    %edx,%eax
f012a950:	39 c1                	cmp    %eax,%ecx
f012a952:	74 17                	je     f012a96b <test_kfreelast+0xe50>
f012a954:	83 ec 04             	sub    $0x4,%esp
f012a957:	68 20 bd 13 f0       	push   $0xf013bd20
f012a95c:	68 60 0d 00 00       	push   $0xd60
f012a961:	68 3a b5 13 f0       	push   $0xf013b53a
f012a966:	e8 9a 58 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012a96b:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a971:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a974:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a97b:	eb 1e                	jmp    f012a99b <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012a97d:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012a983:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a986:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a989:	01 c8                	add    %ecx,%eax
f012a98b:	8a 00                	mov    (%eax),%al
f012a98d:	0f be c0             	movsbl %al,%eax
f012a990:	01 d0                	add    %edx,%eax
f012a992:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a998:	ff 45 f4             	incl   -0xc(%ebp)
f012a99b:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a9a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a9a4:	7f d7                	jg     f012a97d <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012a9a6:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012a9ac:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012a9b2:	89 d0                	mov    %edx,%eax
f012a9b4:	01 c0                	add    %eax,%eax
f012a9b6:	01 d0                	add    %edx,%eax
f012a9b8:	01 c0                	add    %eax,%eax
f012a9ba:	01 d0                	add    %edx,%eax
f012a9bc:	39 c1                	cmp    %eax,%ecx
f012a9be:	74 17                	je     f012a9d7 <test_kfreelast+0xebc>
f012a9c0:	83 ec 04             	sub    $0x4,%esp
f012a9c3:	68 20 bd 13 f0       	push   $0xf013bd20
f012a9c8:	68 68 0d 00 00       	push   $0xd68
f012a9cd:	68 3a b5 13 f0       	push   $0xf013b53a
f012a9d2:	e8 2e 58 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a9d7:	e8 b5 23 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012a9dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a9df:	e8 e4 93 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012a9e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012a9e7:	83 ec 0c             	sub    $0xc,%esp
f012a9ea:	68 00 50 00 00       	push   $0x5000
f012a9ef:	e8 86 d0 fd ff       	call   f0107a7a <kmalloc>
f012a9f4:	83 c4 10             	add    $0x10,%esp
f012a9f7:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a9fd:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012aa03:	89 c1                	mov    %eax,%ecx
f012aa05:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012aa0c:	10 00 00 
f012aa0f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012aa15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aa1a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012aa20:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012aa26:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa2b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012aa31:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012aa37:	29 d0                	sub    %edx,%eax
f012aa39:	89 c3                	mov    %eax,%ebx
f012aa3b:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012aa42:	10 00 00 
f012aa45:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012aa4a:	0f b6 d0             	movzbl %al,%edx
f012aa4d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012aa53:	01 d0                	add    %edx,%eax
f012aa55:	48                   	dec    %eax
f012aa56:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012aa5c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012aa62:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa67:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012aa6d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012aa73:	29 d0                	sub    %edx,%eax
f012aa75:	01 c3                	add    %eax,%ebx
f012aa77:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012aa7e:	10 00 00 
f012aa81:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012aa86:	0f b6 c0             	movzbl %al,%eax
f012aa89:	c1 e0 04             	shl    $0x4,%eax
f012aa8c:	89 c2                	mov    %eax,%edx
f012aa8e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012aa94:	01 d0                	add    %edx,%eax
f012aa96:	48                   	dec    %eax
f012aa97:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012aa9d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012aaa3:	ba 00 00 00 00       	mov    $0x0,%edx
f012aaa8:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012aaae:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012aab4:	29 d0                	sub    %edx,%eax
f012aab6:	01 d8                	add    %ebx,%eax
f012aab8:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012aabd:	39 c1                	cmp    %eax,%ecx
f012aabf:	74 17                	je     f012aad8 <test_kfreelast+0xfbd>
f012aac1:	83 ec 04             	sub    $0x4,%esp
f012aac4:	68 20 b6 13 f0       	push   $0xf013b620
f012aac9:	68 71 0d 00 00       	push   $0xd71
f012aace:	68 3a b5 13 f0       	push   $0xf013b53a
f012aad3:	e8 2d 57 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012aad8:	e8 eb 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aadd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aae0:	74 17                	je     f012aaf9 <test_kfreelast+0xfde>
f012aae2:	83 ec 04             	sub    $0x4,%esp
f012aae5:	68 54 b5 13 f0       	push   $0xf013b554
f012aaea:	68 72 0d 00 00       	push   $0xd72
f012aaef:	68 3a b5 13 f0       	push   $0xf013b53a
f012aaf4:	e8 0c 57 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012aaf9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aafc:	e8 90 22 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ab01:	29 c3                	sub    %eax,%ebx
f012ab03:	89 d8                	mov    %ebx,%eax
f012ab05:	83 f8 05             	cmp    $0x5,%eax
f012ab08:	74 17                	je     f012ab21 <test_kfreelast+0x1006>
f012ab0a:	83 ec 04             	sub    $0x4,%esp
f012ab0d:	68 bc b5 13 f0       	push   $0xf013b5bc
f012ab12:	68 73 0d 00 00       	push   $0xd73
f012ab17:	68 3a b5 13 f0       	push   $0xf013b53a
f012ab1c:	e8 e4 56 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012ab21:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012ab28:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012ab2b:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ab31:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012ab34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab3b:	eb 0e                	jmp    f012ab4b <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012ab3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ab40:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab43:	01 d0                	add    %edx,%eax
f012ab45:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012ab48:	ff 45 f4             	incl   -0xc(%ebp)
f012ab4b:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012ab51:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ab54:	7f e7                	jg     f012ab3d <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012ab56:	e8 36 22 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ab5b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab5e:	e8 65 92 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ab63:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012ab66:	83 ec 0c             	sub    $0xc,%esp
f012ab69:	68 00 00 10 00       	push   $0x100000
f012ab6e:	e8 07 cf fd ff       	call   f0107a7a <kmalloc>
f012ab73:	83 c4 10             	add    $0x10,%esp
f012ab76:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ab7c:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ab82:	89 c1                	mov    %eax,%ecx
f012ab84:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012ab8b:	10 00 00 
f012ab8e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ab94:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ab99:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012ab9f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012aba5:	ba 00 00 00 00       	mov    $0x0,%edx
f012abaa:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012abb0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012abb6:	29 d0                	sub    %edx,%eax
f012abb8:	89 c3                	mov    %eax,%ebx
f012abba:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012abc1:	10 00 00 
f012abc4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012abc9:	0f b6 d0             	movzbl %al,%edx
f012abcc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012abd2:	01 d0                	add    %edx,%eax
f012abd4:	48                   	dec    %eax
f012abd5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012abdb:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012abe1:	ba 00 00 00 00       	mov    $0x0,%edx
f012abe6:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012abec:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012abf2:	29 d0                	sub    %edx,%eax
f012abf4:	01 c3                	add    %eax,%ebx
f012abf6:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012abfd:	10 00 00 
f012ac00:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012ac05:	0f b6 c0             	movzbl %al,%eax
f012ac08:	c1 e0 04             	shl    $0x4,%eax
f012ac0b:	89 c2                	mov    %eax,%edx
f012ac0d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ac13:	01 d0                	add    %edx,%eax
f012ac15:	48                   	dec    %eax
f012ac16:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012ac1c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ac22:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac27:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012ac2d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ac33:	29 d0                	sub    %edx,%eax
f012ac35:	01 d8                	add    %ebx,%eax
f012ac37:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012ac3c:	39 c1                	cmp    %eax,%ecx
f012ac3e:	74 17                	je     f012ac57 <test_kfreelast+0x113c>
f012ac40:	83 ec 04             	sub    $0x4,%esp
f012ac43:	68 20 b6 13 f0       	push   $0xf013b620
f012ac48:	68 7f 0d 00 00       	push   $0xd7f
f012ac4d:	68 3a b5 13 f0       	push   $0xf013b53a
f012ac52:	e8 ae 55 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ac57:	e8 6c 91 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ac5c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac5f:	74 17                	je     f012ac78 <test_kfreelast+0x115d>
f012ac61:	83 ec 04             	sub    $0x4,%esp
f012ac64:	68 54 b5 13 f0       	push   $0xf013b554
f012ac69:	68 80 0d 00 00       	push   $0xd80
f012ac6e:	68 3a b5 13 f0       	push   $0xf013b53a
f012ac73:	e8 8d 55 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ac78:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ac7b:	e8 11 21 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ac80:	29 c3                	sub    %eax,%ebx
f012ac82:	89 d8                	mov    %ebx,%eax
f012ac84:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ac89:	74 17                	je     f012aca2 <test_kfreelast+0x1187>
f012ac8b:	83 ec 04             	sub    $0x4,%esp
f012ac8e:	68 bc b5 13 f0       	push   $0xf013b5bc
f012ac93:	68 81 0d 00 00       	push   $0xd81
f012ac98:	68 3a b5 13 f0       	push   $0xf013b53a
f012ac9d:	e8 63 55 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012aca2:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012aca9:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012acac:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012acb2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012acb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012acbc:	eb 0e                	jmp    f012accc <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012acbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012acc1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012acc4:	01 d0                	add    %edx,%eax
f012acc6:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012acc9:	ff 45 f4             	incl   -0xc(%ebp)
f012accc:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012acd2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012acd5:	7f e7                	jg     f012acbe <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012acd7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012acde:	e8 ae 20 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ace3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ace6:	e8 dd 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aceb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012acee:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012acf4:	83 ec 0c             	sub    $0xc,%esp
f012acf7:	50                   	push   %eax
f012acf8:	e8 48 ce fd ff       	call   f0107b45 <kfree>
f012acfd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ad00:	e8 c3 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad05:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad08:	74 17                	je     f012ad21 <test_kfreelast+0x1206>
f012ad0a:	83 ec 04             	sub    $0x4,%esp
f012ad0d:	68 54 b5 13 f0       	push   $0xf013b554
f012ad12:	68 91 0d 00 00       	push   $0xd91
f012ad17:	68 3a b5 13 f0       	push   $0xf013b53a
f012ad1c:	e8 e4 54 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012ad21:	e8 6b 20 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ad26:	89 c2                	mov    %eax,%edx
f012ad28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ad2b:	29 c2                	sub    %eax,%edx
f012ad2d:	89 d0                	mov    %edx,%eax
f012ad2f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ad34:	74 17                	je     f012ad4d <test_kfreelast+0x1232>
f012ad36:	83 ec 04             	sub    $0x4,%esp
f012ad39:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012ad3e:	68 92 0d 00 00       	push   $0xd92
f012ad43:	68 3a b5 13 f0       	push   $0xf013b53a
f012ad48:	e8 b8 54 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012ad4d:	e8 3f 20 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ad52:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad55:	e8 6e 90 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ad5a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012ad5d:	83 ec 0c             	sub    $0xc,%esp
f012ad60:	68 00 78 00 00       	push   $0x7800
f012ad65:	e8 10 cd fd ff       	call   f0107a7a <kmalloc>
f012ad6a:	83 c4 10             	add    $0x10,%esp
f012ad6d:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012ad73:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012ad79:	89 c1                	mov    %eax,%ecx
f012ad7b:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012ad82:	10 00 00 
f012ad85:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ad8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ad90:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012ad96:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012ad9c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ada1:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012ada7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012adad:	29 d0                	sub    %edx,%eax
f012adaf:	89 c3                	mov    %eax,%ebx
f012adb1:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012adb8:	10 00 00 
f012adbb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012adc0:	0f b6 d0             	movzbl %al,%edx
f012adc3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012adc9:	01 d0                	add    %edx,%eax
f012adcb:	48                   	dec    %eax
f012adcc:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012add2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012add8:	ba 00 00 00 00       	mov    $0x0,%edx
f012addd:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012ade3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ade9:	29 d0                	sub    %edx,%eax
f012adeb:	01 c3                	add    %eax,%ebx
f012aded:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012adf4:	10 00 00 
f012adf7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012adfc:	0f b6 c0             	movzbl %al,%eax
f012adff:	c1 e0 04             	shl    $0x4,%eax
f012ae02:	89 c2                	mov    %eax,%edx
f012ae04:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ae0a:	01 d0                	add    %edx,%eax
f012ae0c:	48                   	dec    %eax
f012ae0d:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012ae13:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ae19:	ba 00 00 00 00       	mov    $0x0,%edx
f012ae1e:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012ae24:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ae2a:	29 d0                	sub    %edx,%eax
f012ae2c:	01 d8                	add    %ebx,%eax
f012ae2e:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012ae33:	39 c1                	cmp    %eax,%ecx
f012ae35:	74 17                	je     f012ae4e <test_kfreelast+0x1333>
f012ae37:	83 ec 04             	sub    $0x4,%esp
f012ae3a:	68 20 b6 13 f0       	push   $0xf013b620
f012ae3f:	68 9b 0d 00 00       	push   $0xd9b
f012ae44:	68 3a b5 13 f0       	push   $0xf013b53a
f012ae49:	e8 b7 53 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ae4e:	e8 75 8f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ae53:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae56:	74 17                	je     f012ae6f <test_kfreelast+0x1354>
f012ae58:	83 ec 04             	sub    $0x4,%esp
f012ae5b:	68 54 b5 13 f0       	push   $0xf013b554
f012ae60:	68 9c 0d 00 00       	push   $0xd9c
f012ae65:	68 3a b5 13 f0       	push   $0xf013b53a
f012ae6a:	e8 96 53 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ae6f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ae72:	e8 1a 1f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ae77:	29 c3                	sub    %eax,%ebx
f012ae79:	89 d8                	mov    %ebx,%eax
f012ae7b:	83 f8 08             	cmp    $0x8,%eax
f012ae7e:	74 17                	je     f012ae97 <test_kfreelast+0x137c>
f012ae80:	83 ec 04             	sub    $0x4,%esp
f012ae83:	68 bc b5 13 f0       	push   $0xf013b5bc
f012ae88:	68 9d 0d 00 00       	push   $0xd9d
f012ae8d:	68 3a b5 13 f0       	push   $0xf013b53a
f012ae92:	e8 6e 53 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012ae97:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012ae9e:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012aea1:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012aea7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012aeaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aeb1:	eb 0e                	jmp    f012aec1 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012aeb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aeb6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aeb9:	01 d0                	add    %edx,%eax
f012aebb:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012aebe:	ff 45 f4             	incl   -0xc(%ebp)
f012aec1:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012aec7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aeca:	7f e7                	jg     f012aeb3 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012aecc:	e8 c0 1e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012aed1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aed4:	e8 ef 8e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012aed9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012aedc:	83 ec 0c             	sub    $0xc,%esp
f012aedf:	68 00 00 10 00       	push   $0x100000
f012aee4:	e8 91 cb fd ff       	call   f0107a7a <kmalloc>
f012aee9:	83 c4 10             	add    $0x10,%esp
f012aeec:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012aef2:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012aef8:	89 c1                	mov    %eax,%ecx
f012aefa:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012af01:	10 00 00 
f012af04:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012af0a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012af0f:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012af15:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012af1b:	ba 00 00 00 00       	mov    $0x0,%edx
f012af20:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012af26:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012af2c:	29 d0                	sub    %edx,%eax
f012af2e:	89 c3                	mov    %eax,%ebx
f012af30:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012af37:	10 00 00 
f012af3a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012af3f:	0f b6 d0             	movzbl %al,%edx
f012af42:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012af48:	01 d0                	add    %edx,%eax
f012af4a:	48                   	dec    %eax
f012af4b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012af51:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012af57:	ba 00 00 00 00       	mov    $0x0,%edx
f012af5c:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012af62:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012af68:	29 d0                	sub    %edx,%eax
f012af6a:	01 c3                	add    %eax,%ebx
f012af6c:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012af73:	10 00 00 
f012af76:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012af7b:	0f b6 c0             	movzbl %al,%eax
f012af7e:	c1 e0 04             	shl    $0x4,%eax
f012af81:	89 c2                	mov    %eax,%edx
f012af83:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012af89:	01 d0                	add    %edx,%eax
f012af8b:	48                   	dec    %eax
f012af8c:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012af92:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012af98:	ba 00 00 00 00       	mov    $0x0,%edx
f012af9d:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012afa3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012afa9:	29 d0                	sub    %edx,%eax
f012afab:	01 d8                	add    %ebx,%eax
f012afad:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012afb2:	39 c1                	cmp    %eax,%ecx
f012afb4:	74 17                	je     f012afcd <test_kfreelast+0x14b2>
f012afb6:	83 ec 04             	sub    $0x4,%esp
f012afb9:	68 20 b6 13 f0       	push   $0xf013b620
f012afbe:	68 a9 0d 00 00       	push   $0xda9
f012afc3:	68 3a b5 13 f0       	push   $0xf013b53a
f012afc8:	e8 38 52 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012afcd:	e8 f6 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012afd2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012afd5:	74 17                	je     f012afee <test_kfreelast+0x14d3>
f012afd7:	83 ec 04             	sub    $0x4,%esp
f012afda:	68 54 b5 13 f0       	push   $0xf013b554
f012afdf:	68 aa 0d 00 00       	push   $0xdaa
f012afe4:	68 3a b5 13 f0       	push   $0xf013b53a
f012afe9:	e8 17 52 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012afee:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aff1:	e8 9b 1d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012aff6:	29 c3                	sub    %eax,%ebx
f012aff8:	89 d8                	mov    %ebx,%eax
f012affa:	3d 00 01 00 00       	cmp    $0x100,%eax
f012afff:	74 17                	je     f012b018 <test_kfreelast+0x14fd>
f012b001:	83 ec 04             	sub    $0x4,%esp
f012b004:	68 bc b5 13 f0       	push   $0xf013b5bc
f012b009:	68 ab 0d 00 00       	push   $0xdab
f012b00e:	68 3a b5 13 f0       	push   $0xf013b53a
f012b013:	e8 ed 51 fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b018:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b01f:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b022:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b028:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b02b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b032:	eb 0e                	jmp    f012b042 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b034:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b037:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b03a:	01 d0                	add    %edx,%eax
f012b03c:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b03f:	ff 45 f4             	incl   -0xc(%ebp)
f012b042:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b048:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b04b:	7f e7                	jg     f012b034 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b04d:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b051:	83 ec 08             	sub    $0x8,%esp
f012b054:	ff 75 f0             	pushl  -0x10(%ebp)
f012b057:	68 6c c5 13 f0       	push   $0xf013c56c
f012b05c:	e8 ad 5c fd ff       	call   f0100d0e <cprintf>
f012b061:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b064:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b06b:	e8 21 1d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b070:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b073:	e8 50 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b078:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b07b:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b081:	83 ec 0c             	sub    $0xc,%esp
f012b084:	50                   	push   %eax
f012b085:	e8 bb ca fd ff       	call   f0107b45 <kfree>
f012b08a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b08d:	e8 36 8d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b092:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b095:	74 1d                	je     f012b0b4 <test_kfreelast+0x1599>
f012b097:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b09b:	75 17                	jne    f012b0b4 <test_kfreelast+0x1599>
f012b09d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0a4:	83 ec 0c             	sub    $0xc,%esp
f012b0a7:	68 94 c5 13 f0       	push   $0xf013c594
f012b0ac:	e8 5d 5c fd ff       	call   f0100d0e <cprintf>
f012b0b1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b0b4:	e8 d8 1c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b0b9:	89 c2                	mov    %eax,%edx
f012b0bb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b0be:	29 c2                	sub    %eax,%edx
f012b0c0:	89 d0                	mov    %edx,%eax
f012b0c2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b0c7:	74 1d                	je     f012b0e6 <test_kfreelast+0x15cb>
f012b0c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0cd:	75 17                	jne    f012b0e6 <test_kfreelast+0x15cb>
f012b0cf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0d6:	83 ec 0c             	sub    $0xc,%esp
f012b0d9:	68 00 c6 13 f0       	push   $0xf013c600
f012b0de:	e8 2b 5c fd ff       	call   f0100d0e <cprintf>
f012b0e3:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b0e6:	e8 a6 1c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b0eb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0ee:	e8 d5 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b0f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b0f6:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b0fc:	83 ec 0c             	sub    $0xc,%esp
f012b0ff:	50                   	push   %eax
f012b100:	e8 40 ca fd ff       	call   f0107b45 <kfree>
f012b105:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b108:	e8 bb 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b10d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b110:	74 1d                	je     f012b12f <test_kfreelast+0x1614>
f012b112:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b116:	75 17                	jne    f012b12f <test_kfreelast+0x1614>
f012b118:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b11f:	83 ec 0c             	sub    $0xc,%esp
f012b122:	68 94 c5 13 f0       	push   $0xf013c594
f012b127:	e8 e2 5b fd ff       	call   f0100d0e <cprintf>
f012b12c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b12f:	e8 5d 1c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b134:	89 c2                	mov    %eax,%edx
f012b136:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b139:	29 c2                	sub    %eax,%edx
f012b13b:	89 d0                	mov    %edx,%eax
f012b13d:	83 f8 08             	cmp    $0x8,%eax
f012b140:	74 1d                	je     f012b15f <test_kfreelast+0x1644>
f012b142:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b146:	75 17                	jne    f012b15f <test_kfreelast+0x1644>
f012b148:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b14f:	83 ec 0c             	sub    $0xc,%esp
f012b152:	68 00 c6 13 f0       	push   $0xf013c600
f012b157:	e8 b2 5b fd ff       	call   f0100d0e <cprintf>
f012b15c:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b15f:	e8 2d 1c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b164:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b167:	e8 5c 8c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b16c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b16f:	83 ec 0c             	sub    $0xc,%esp
f012b172:	68 00 28 00 00       	push   $0x2800
f012b177:	e8 fe c8 fd ff       	call   f0107a7a <kmalloc>
f012b17c:	83 c4 10             	add    $0x10,%esp
f012b17f:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b185:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b18b:	89 c1                	mov    %eax,%ecx
f012b18d:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b194:	10 00 00 
f012b197:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b19d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b1a2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b1a8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b1ae:	ba 00 00 00 00       	mov    $0x0,%edx
f012b1b3:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b1b9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b1bf:	29 d0                	sub    %edx,%eax
f012b1c1:	89 c3                	mov    %eax,%ebx
f012b1c3:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b1ca:	10 00 00 
f012b1cd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b1d2:	0f b6 d0             	movzbl %al,%edx
f012b1d5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b1db:	01 d0                	add    %edx,%eax
f012b1dd:	48                   	dec    %eax
f012b1de:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b1e4:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b1ea:	ba 00 00 00 00       	mov    $0x0,%edx
f012b1ef:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b1f5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b1fb:	29 d0                	sub    %edx,%eax
f012b1fd:	01 c3                	add    %eax,%ebx
f012b1ff:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b206:	10 00 00 
f012b209:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b20e:	0f b6 c0             	movzbl %al,%eax
f012b211:	c1 e0 04             	shl    $0x4,%eax
f012b214:	89 c2                	mov    %eax,%edx
f012b216:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b21c:	01 d0                	add    %edx,%eax
f012b21e:	48                   	dec    %eax
f012b21f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b225:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b22b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b230:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b236:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b23c:	29 d0                	sub    %edx,%eax
f012b23e:	01 d8                	add    %ebx,%eax
f012b240:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b245:	39 c1                	cmp    %eax,%ecx
f012b247:	74 1d                	je     f012b266 <test_kfreelast+0x174b>
f012b249:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b24d:	75 17                	jne    f012b266 <test_kfreelast+0x174b>
f012b24f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b256:	83 ec 0c             	sub    $0xc,%esp
f012b259:	68 38 c6 13 f0       	push   $0xf013c638
f012b25e:	e8 ab 5a fd ff       	call   f0100d0e <cprintf>
f012b263:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b266:	e8 5d 8b fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b26b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b26e:	74 1d                	je     f012b28d <test_kfreelast+0x1772>
f012b270:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b274:	75 17                	jne    f012b28d <test_kfreelast+0x1772>
f012b276:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b27d:	83 ec 0c             	sub    $0xc,%esp
f012b280:	68 94 c5 13 f0       	push   $0xf013c594
f012b285:	e8 84 5a fd ff       	call   f0100d0e <cprintf>
f012b28a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b28d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b290:	e8 fc 1a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b295:	29 c3                	sub    %eax,%ebx
f012b297:	89 d8                	mov    %ebx,%eax
f012b299:	83 f8 03             	cmp    $0x3,%eax
f012b29c:	74 1d                	je     f012b2bb <test_kfreelast+0x17a0>
f012b29e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2a2:	75 17                	jne    f012b2bb <test_kfreelast+0x17a0>
f012b2a4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2ab:	83 ec 0c             	sub    $0xc,%esp
f012b2ae:	68 a0 c6 13 f0       	push   $0xf013c6a0
f012b2b3:	e8 56 5a fd ff       	call   f0100d0e <cprintf>
f012b2b8:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b2bb:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b2c2:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b2c5:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b2cb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b2ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b2d5:	eb 0e                	jmp    f012b2e5 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b2d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b2da:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b2dd:	01 d0                	add    %edx,%eax
f012b2df:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b2e2:	ff 45 f4             	incl   -0xc(%ebp)
f012b2e5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b2eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b2ee:	7f e7                	jg     f012b2d7 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b2f0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2f4:	75 17                	jne    f012b30d <test_kfreelast+0x17f2>
f012b2f6:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b2fa:	83 ec 08             	sub    $0x8,%esp
f012b2fd:	ff 75 f0             	pushl  -0x10(%ebp)
f012b300:	68 6c c5 13 f0       	push   $0xf013c56c
f012b305:	e8 04 5a fd ff       	call   f0100d0e <cprintf>
f012b30a:	83 c4 10             	add    $0x10,%esp
f012b30d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b314:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b31a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b31d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b324:	eb 1e                	jmp    f012b344 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b326:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b32c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b32f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b332:	01 c8                	add    %ecx,%eax
f012b334:	8a 00                	mov    (%eax),%al
f012b336:	0f be c0             	movsbl %al,%eax
f012b339:	01 d0                	add    %edx,%eax
f012b33b:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b341:	ff 45 f4             	incl   -0xc(%ebp)
f012b344:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b34a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b34d:	7f d7                	jg     f012b326 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b34f:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b355:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b35b:	89 d0                	mov    %edx,%eax
f012b35d:	01 c0                	add    %eax,%eax
f012b35f:	01 d0                	add    %edx,%eax
f012b361:	c1 e0 02             	shl    $0x2,%eax
f012b364:	39 c1                	cmp    %eax,%ecx
f012b366:	74 1d                	je     f012b385 <test_kfreelast+0x186a>
f012b368:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b36c:	75 17                	jne    f012b385 <test_kfreelast+0x186a>
f012b36e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b375:	83 ec 0c             	sub    $0xc,%esp
f012b378:	68 e4 c6 13 f0       	push   $0xf013c6e4
f012b37d:	e8 8c 59 fd ff       	call   f0100d0e <cprintf>
f012b382:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b385:	83 ec 0c             	sub    $0xc,%esp
f012b388:	6a 03                	push   $0x3
f012b38a:	e8 a2 1e fe ff       	call   f010d231 <sys_bypassPageFault>
f012b38f:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b392:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b398:	05 00 30 00 00       	add    $0x3000,%eax
f012b39d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b3a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b3a7:	eb 3c                	jmp    f012b3e5 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b3a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b3ac:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b3af:	01 d0                	add    %edx,%eax
f012b3b1:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b3b4:	e8 66 1e fe ff       	call   f010d21f <sys_rcr2>
f012b3b9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b3bc:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b3bf:	01 ca                	add    %ecx,%edx
f012b3c1:	39 d0                	cmp    %edx,%eax
f012b3c3:	74 1d                	je     f012b3e2 <test_kfreelast+0x18c7>
f012b3c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3c9:	75 17                	jne    f012b3e2 <test_kfreelast+0x18c7>
f012b3cb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3d2:	83 ec 0c             	sub    $0xc,%esp
f012b3d5:	68 18 c7 13 f0       	push   $0xf013c718
f012b3da:	e8 2f 59 fd ff       	call   f0100d0e <cprintf>
f012b3df:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b3e2:	ff 45 f4             	incl   -0xc(%ebp)
f012b3e5:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b3ec:	7e bb                	jle    f012b3a9 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b3ee:	83 ec 0c             	sub    $0xc,%esp
f012b3f1:	6a 00                	push   $0x0
f012b3f3:	e8 39 1e fe ff       	call   f010d231 <sys_bypassPageFault>
f012b3f8:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b3fb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3ff:	75 17                	jne    f012b418 <test_kfreelast+0x18fd>
f012b401:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b405:	83 ec 08             	sub    $0x8,%esp
f012b408:	ff 75 f0             	pushl  -0x10(%ebp)
f012b40b:	68 6c c5 13 f0       	push   $0xf013c56c
f012b410:	e8 f9 58 fd ff       	call   f0100d0e <cprintf>
f012b415:	83 c4 10             	add    $0x10,%esp
f012b418:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b41f:	e8 6d 19 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b424:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b427:	e8 9c 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b42c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b42f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b435:	83 ec 0c             	sub    $0xc,%esp
f012b438:	50                   	push   %eax
f012b439:	e8 07 c7 fd ff       	call   f0107b45 <kfree>
f012b43e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b441:	e8 82 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b446:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b449:	74 1d                	je     f012b468 <test_kfreelast+0x194d>
f012b44b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b44f:	75 17                	jne    f012b468 <test_kfreelast+0x194d>
f012b451:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b458:	83 ec 0c             	sub    $0xc,%esp
f012b45b:	68 94 c5 13 f0       	push   $0xf013c594
f012b460:	e8 a9 58 fd ff       	call   f0100d0e <cprintf>
f012b465:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b468:	e8 24 19 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b46d:	89 c2                	mov    %eax,%edx
f012b46f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b472:	29 c2                	sub    %eax,%edx
f012b474:	89 d0                	mov    %edx,%eax
f012b476:	83 f8 03             	cmp    $0x3,%eax
f012b479:	74 1d                	je     f012b498 <test_kfreelast+0x197d>
f012b47b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b47f:	75 17                	jne    f012b498 <test_kfreelast+0x197d>
f012b481:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b488:	83 ec 0c             	sub    $0xc,%esp
f012b48b:	68 00 c6 13 f0       	push   $0xf013c600
f012b490:	e8 79 58 fd ff       	call   f0100d0e <cprintf>
f012b495:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012b498:	e8 f4 18 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b49d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b4a0:	e8 23 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b4a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012b4a8:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012b4ae:	83 ec 0c             	sub    $0xc,%esp
f012b4b1:	50                   	push   %eax
f012b4b2:	e8 8e c6 fd ff       	call   f0107b45 <kfree>
f012b4b7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b4ba:	e8 09 89 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b4bf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b4c2:	74 1d                	je     f012b4e1 <test_kfreelast+0x19c6>
f012b4c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4c8:	75 17                	jne    f012b4e1 <test_kfreelast+0x19c6>
f012b4ca:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4d1:	83 ec 0c             	sub    $0xc,%esp
f012b4d4:	68 94 c5 13 f0       	push   $0xf013c594
f012b4d9:	e8 30 58 fd ff       	call   f0100d0e <cprintf>
f012b4de:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b4e1:	e8 ab 18 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b4e6:	89 c2                	mov    %eax,%edx
f012b4e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b4eb:	29 c2                	sub    %eax,%edx
f012b4ed:	89 d0                	mov    %edx,%eax
f012b4ef:	83 f8 04             	cmp    $0x4,%eax
f012b4f2:	74 1d                	je     f012b511 <test_kfreelast+0x19f6>
f012b4f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4f8:	75 17                	jne    f012b511 <test_kfreelast+0x19f6>
f012b4fa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b501:	83 ec 0c             	sub    $0xc,%esp
f012b504:	68 00 c6 13 f0       	push   $0xf013c600
f012b509:	e8 00 58 fd ff       	call   f0100d0e <cprintf>
f012b50e:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b511:	e8 7b 18 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b516:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b519:	e8 aa 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b51e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b521:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b527:	83 ec 0c             	sub    $0xc,%esp
f012b52a:	50                   	push   %eax
f012b52b:	e8 15 c6 fd ff       	call   f0107b45 <kfree>
f012b530:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b533:	e8 90 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b538:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b53b:	74 1d                	je     f012b55a <test_kfreelast+0x1a3f>
f012b53d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b541:	75 17                	jne    f012b55a <test_kfreelast+0x1a3f>
f012b543:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b54a:	83 ec 0c             	sub    $0xc,%esp
f012b54d:	68 94 c5 13 f0       	push   $0xf013c594
f012b552:	e8 b7 57 fd ff       	call   f0100d0e <cprintf>
f012b557:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b55a:	e8 32 18 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b55f:	89 c2                	mov    %eax,%edx
f012b561:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b564:	29 c2                	sub    %eax,%edx
f012b566:	89 d0                	mov    %edx,%eax
f012b568:	83 f8 05             	cmp    $0x5,%eax
f012b56b:	74 1d                	je     f012b58a <test_kfreelast+0x1a6f>
f012b56d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b571:	75 17                	jne    f012b58a <test_kfreelast+0x1a6f>
f012b573:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b57a:	83 ec 0c             	sub    $0xc,%esp
f012b57d:	68 00 c6 13 f0       	push   $0xf013c600
f012b582:	e8 87 57 fd ff       	call   f0100d0e <cprintf>
f012b587:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b58a:	e8 02 18 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b58f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b592:	e8 31 88 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b597:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012b59a:	83 ec 0c             	sub    $0xc,%esp
f012b59d:	68 00 c8 00 00       	push   $0xc800
f012b5a2:	e8 d3 c4 fd ff       	call   f0107a7a <kmalloc>
f012b5a7:	83 c4 10             	add    $0x10,%esp
f012b5aa:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b5b0:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b5b6:	89 c1                	mov    %eax,%ecx
f012b5b8:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012b5bf:	10 00 00 
f012b5c2:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012b5c8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b5cd:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012b5d3:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b5d9:	ba 00 00 00 00       	mov    $0x0,%edx
f012b5de:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012b5e4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012b5ea:	29 d0                	sub    %edx,%eax
f012b5ec:	89 c3                	mov    %eax,%ebx
f012b5ee:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012b5f5:	10 00 00 
f012b5f8:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b5fd:	0f b6 d0             	movzbl %al,%edx
f012b600:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012b606:	01 d0                	add    %edx,%eax
f012b608:	48                   	dec    %eax
f012b609:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012b60f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b615:	ba 00 00 00 00       	mov    $0x0,%edx
f012b61a:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012b620:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012b626:	29 d0                	sub    %edx,%eax
f012b628:	01 c3                	add    %eax,%ebx
f012b62a:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012b631:	10 00 00 
f012b634:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b639:	0f b6 c0             	movzbl %al,%eax
f012b63c:	c1 e0 04             	shl    $0x4,%eax
f012b63f:	89 c2                	mov    %eax,%edx
f012b641:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012b647:	01 d0                	add    %edx,%eax
f012b649:	48                   	dec    %eax
f012b64a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012b650:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b656:	ba 00 00 00 00       	mov    $0x0,%edx
f012b65b:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012b661:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b667:	29 d0                	sub    %edx,%eax
f012b669:	01 d8                	add    %ebx,%eax
f012b66b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012b670:	39 c1                	cmp    %eax,%ecx
f012b672:	74 1d                	je     f012b691 <test_kfreelast+0x1b76>
f012b674:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b678:	75 17                	jne    f012b691 <test_kfreelast+0x1b76>
f012b67a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b681:	83 ec 0c             	sub    $0xc,%esp
f012b684:	68 38 c6 13 f0       	push   $0xf013c638
f012b689:	e8 80 56 fd ff       	call   f0100d0e <cprintf>
f012b68e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b691:	e8 32 87 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b696:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b699:	74 1d                	je     f012b6b8 <test_kfreelast+0x1b9d>
f012b69b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b69f:	75 17                	jne    f012b6b8 <test_kfreelast+0x1b9d>
f012b6a1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6a8:	83 ec 0c             	sub    $0xc,%esp
f012b6ab:	68 94 c5 13 f0       	push   $0xf013c594
f012b6b0:	e8 59 56 fd ff       	call   f0100d0e <cprintf>
f012b6b5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b6b8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b6bb:	e8 d1 16 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b6c0:	29 c3                	sub    %eax,%ebx
f012b6c2:	89 d8                	mov    %ebx,%eax
f012b6c4:	83 f8 0d             	cmp    $0xd,%eax
f012b6c7:	74 1d                	je     f012b6e6 <test_kfreelast+0x1bcb>
f012b6c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6cd:	75 17                	jne    f012b6e6 <test_kfreelast+0x1bcb>
f012b6cf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6d6:	83 ec 0c             	sub    $0xc,%esp
f012b6d9:	68 a0 c6 13 f0       	push   $0xf013c6a0
f012b6de:	e8 2b 56 fd ff       	call   f0100d0e <cprintf>
f012b6e3:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012b6e6:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012b6ed:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012b6f0:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b6f6:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012b6f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b700:	eb 0e                	jmp    f012b710 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012b702:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b705:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b708:	01 d0                	add    %edx,%eax
f012b70a:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012b70d:	ff 45 f4             	incl   -0xc(%ebp)
f012b710:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012b716:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b719:	7f e7                	jg     f012b702 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b71b:	e8 71 16 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b720:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b723:	e8 a0 86 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b728:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012b72b:	83 ec 0c             	sub    $0xc,%esp
f012b72e:	68 00 fc 2f 00       	push   $0x2ffc00
f012b733:	e8 42 c3 fd ff       	call   f0107a7a <kmalloc>
f012b738:	83 c4 10             	add    $0x10,%esp
f012b73b:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b741:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b747:	89 c1                	mov    %eax,%ecx
f012b749:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012b750:	10 00 00 
f012b753:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b759:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b75e:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012b764:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b76a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b76f:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012b775:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b77b:	29 d0                	sub    %edx,%eax
f012b77d:	89 c3                	mov    %eax,%ebx
f012b77f:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012b786:	10 00 00 
f012b789:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b78e:	0f b6 d0             	movzbl %al,%edx
f012b791:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b797:	01 d0                	add    %edx,%eax
f012b799:	48                   	dec    %eax
f012b79a:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012b7a0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b7a6:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7ab:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012b7b1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b7b7:	29 d0                	sub    %edx,%eax
f012b7b9:	01 c3                	add    %eax,%ebx
f012b7bb:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012b7c2:	10 00 00 
f012b7c5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012b7ca:	0f b6 c0             	movzbl %al,%eax
f012b7cd:	c1 e0 04             	shl    $0x4,%eax
f012b7d0:	89 c2                	mov    %eax,%edx
f012b7d2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b7d8:	01 d0                	add    %edx,%eax
f012b7da:	48                   	dec    %eax
f012b7db:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012b7e1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b7e7:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7ec:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012b7f2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b7f8:	29 d0                	sub    %edx,%eax
f012b7fa:	01 d8                	add    %ebx,%eax
f012b7fc:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012b801:	39 c1                	cmp    %eax,%ecx
f012b803:	74 1d                	je     f012b822 <test_kfreelast+0x1d07>
f012b805:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b809:	75 17                	jne    f012b822 <test_kfreelast+0x1d07>
f012b80b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b812:	83 ec 0c             	sub    $0xc,%esp
f012b815:	68 38 c6 13 f0       	push   $0xf013c638
f012b81a:	e8 ef 54 fd ff       	call   f0100d0e <cprintf>
f012b81f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b822:	e8 a1 85 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b827:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b82a:	74 1d                	je     f012b849 <test_kfreelast+0x1d2e>
f012b82c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b830:	75 17                	jne    f012b849 <test_kfreelast+0x1d2e>
f012b832:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b839:	83 ec 0c             	sub    $0xc,%esp
f012b83c:	68 94 c5 13 f0       	push   $0xf013c594
f012b841:	e8 c8 54 fd ff       	call   f0100d0e <cprintf>
f012b846:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b849:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b84c:	e8 40 15 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b851:	29 c3                	sub    %eax,%ebx
f012b853:	89 d8                	mov    %ebx,%eax
f012b855:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b85a:	74 1d                	je     f012b879 <test_kfreelast+0x1d5e>
f012b85c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b860:	75 17                	jne    f012b879 <test_kfreelast+0x1d5e>
f012b862:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b869:	83 ec 0c             	sub    $0xc,%esp
f012b86c:	68 a0 c6 13 f0       	push   $0xf013c6a0
f012b871:	e8 98 54 fd ff       	call   f0100d0e <cprintf>
f012b876:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012b879:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012b880:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012b883:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b889:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b88c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b893:	eb 0e                	jmp    f012b8a3 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012b895:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b898:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b89b:	01 d0                	add    %edx,%eax
f012b89d:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b8a0:	ff 45 f4             	incl   -0xc(%ebp)
f012b8a3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b8a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b8ac:	7f e7                	jg     f012b895 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b8ae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8b2:	75 17                	jne    f012b8cb <test_kfreelast+0x1db0>
f012b8b4:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b8b8:	83 ec 08             	sub    $0x8,%esp
f012b8bb:	ff 75 f0             	pushl  -0x10(%ebp)
f012b8be:	68 6c c5 13 f0       	push   $0xf013c56c
f012b8c3:	e8 46 54 fd ff       	call   f0100d0e <cprintf>
f012b8c8:	83 c4 10             	add    $0x10,%esp
f012b8cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b8d2:	e8 ba 14 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b8d7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b8da:	e8 e9 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8df:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b8e2:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b8e8:	83 ec 0c             	sub    $0xc,%esp
f012b8eb:	50                   	push   %eax
f012b8ec:	e8 54 c2 fd ff       	call   f0107b45 <kfree>
f012b8f1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b8f4:	e8 cf 84 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012b8f9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b8fc:	74 1d                	je     f012b91b <test_kfreelast+0x1e00>
f012b8fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b902:	75 17                	jne    f012b91b <test_kfreelast+0x1e00>
f012b904:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b90b:	83 ec 0c             	sub    $0xc,%esp
f012b90e:	68 94 c5 13 f0       	push   $0xf013c594
f012b913:	e8 f6 53 fd ff       	call   f0100d0e <cprintf>
f012b918:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b91b:	e8 71 14 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012b920:	89 c2                	mov    %eax,%edx
f012b922:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b925:	29 c2                	sub    %eax,%edx
f012b927:	89 d0                	mov    %edx,%eax
f012b929:	83 f8 0d             	cmp    $0xd,%eax
f012b92c:	74 1d                	je     f012b94b <test_kfreelast+0x1e30>
f012b92e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b932:	75 17                	jne    f012b94b <test_kfreelast+0x1e30>
f012b934:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b93b:	83 ec 0c             	sub    $0xc,%esp
f012b93e:	68 00 c6 13 f0       	push   $0xf013c600
f012b943:	e8 c6 53 fd ff       	call   f0100d0e <cprintf>
f012b948:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b94b:	83 ec 0c             	sub    $0xc,%esp
f012b94e:	6a 03                	push   $0x3
f012b950:	e8 dc 18 fe ff       	call   f010d231 <sys_bypassPageFault>
f012b955:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012b958:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b95e:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012b961:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b968:	eb 3c                	jmp    f012b9a6 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012b96a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b96d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b970:	01 d0                	add    %edx,%eax
f012b972:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b975:	e8 a5 18 fe ff       	call   f010d21f <sys_rcr2>
f012b97a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b97d:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b980:	01 ca                	add    %ecx,%edx
f012b982:	39 d0                	cmp    %edx,%eax
f012b984:	74 1d                	je     f012b9a3 <test_kfreelast+0x1e88>
f012b986:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b98a:	75 17                	jne    f012b9a3 <test_kfreelast+0x1e88>
f012b98c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b993:	83 ec 0c             	sub    $0xc,%esp
f012b996:	68 18 c7 13 f0       	push   $0xf013c718
f012b99b:	e8 6e 53 fd ff       	call   f0100d0e <cprintf>
f012b9a0:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012b9a3:	ff 45 f4             	incl   -0xc(%ebp)
f012b9a6:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012b9ad:	7e bb                	jle    f012b96a <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b9af:	83 ec 0c             	sub    $0xc,%esp
f012b9b2:	6a 00                	push   $0x0
f012b9b4:	e8 78 18 fe ff       	call   f010d231 <sys_bypassPageFault>
f012b9b9:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012b9bc:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b9c2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b9c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b9cc:	eb 1e                	jmp    f012b9ec <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012b9ce:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012b9d4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b9d7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b9da:	01 c8                	add    %ecx,%eax
f012b9dc:	8a 00                	mov    (%eax),%al
f012b9de:	0f be c0             	movsbl %al,%eax
f012b9e1:	01 d0                	add    %edx,%eax
f012b9e3:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b9e9:	ff 45 f4             	incl   -0xc(%ebp)
f012b9ec:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b9f2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b9f5:	7f d7                	jg     f012b9ce <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b9f7:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012b9fd:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012ba03:	89 d0                	mov    %edx,%eax
f012ba05:	01 c0                	add    %eax,%eax
f012ba07:	01 d0                	add    %edx,%eax
f012ba09:	01 c0                	add    %eax,%eax
f012ba0b:	01 d0                	add    %edx,%eax
f012ba0d:	01 c0                	add    %eax,%eax
f012ba0f:	39 c1                	cmp    %eax,%ecx
f012ba11:	74 1d                	je     f012ba30 <test_kfreelast+0x1f15>
f012ba13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba17:	75 17                	jne    f012ba30 <test_kfreelast+0x1f15>
f012ba19:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba20:	83 ec 0c             	sub    $0xc,%esp
f012ba23:	68 e4 c6 13 f0       	push   $0xf013c6e4
f012ba28:	e8 e1 52 fd ff       	call   f0100d0e <cprintf>
f012ba2d:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ba30:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba34:	75 17                	jne    f012ba4d <test_kfreelast+0x1f32>
f012ba36:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012ba3a:	83 ec 08             	sub    $0x8,%esp
f012ba3d:	ff 75 f0             	pushl  -0x10(%ebp)
f012ba40:	68 6c c5 13 f0       	push   $0xf013c56c
f012ba45:	e8 c4 52 fd ff       	call   f0100d0e <cprintf>
f012ba4a:	83 c4 10             	add    $0x10,%esp
f012ba4d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012ba54:	e8 38 13 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ba59:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba5c:	e8 67 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012ba64:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012ba6a:	83 ec 0c             	sub    $0xc,%esp
f012ba6d:	50                   	push   %eax
f012ba6e:	e8 d2 c0 fd ff       	call   f0107b45 <kfree>
f012ba73:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba76:	e8 4d 83 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ba7b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba7e:	74 1d                	je     f012ba9d <test_kfreelast+0x1f82>
f012ba80:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba84:	75 17                	jne    f012ba9d <test_kfreelast+0x1f82>
f012ba86:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba8d:	83 ec 0c             	sub    $0xc,%esp
f012ba90:	68 94 c5 13 f0       	push   $0xf013c594
f012ba95:	e8 74 52 fd ff       	call   f0100d0e <cprintf>
f012ba9a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba9d:	e8 ef 12 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012baa2:	89 c2                	mov    %eax,%edx
f012baa4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012baa7:	29 c2                	sub    %eax,%edx
f012baa9:	89 d0                	mov    %edx,%eax
f012baab:	83 f8 02             	cmp    $0x2,%eax
f012baae:	74 1d                	je     f012bacd <test_kfreelast+0x1fb2>
f012bab0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bab4:	75 17                	jne    f012bacd <test_kfreelast+0x1fb2>
f012bab6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012babd:	83 ec 0c             	sub    $0xc,%esp
f012bac0:	68 00 c6 13 f0       	push   $0xf013c600
f012bac5:	e8 44 52 fd ff       	call   f0100d0e <cprintf>
f012baca:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bacd:	e8 bf 12 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bad2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bad5:	e8 ee 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bada:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012badd:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bae3:	83 ec 0c             	sub    $0xc,%esp
f012bae6:	50                   	push   %eax
f012bae7:	e8 59 c0 fd ff       	call   f0107b45 <kfree>
f012baec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012baef:	e8 d4 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012baf4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012baf7:	74 1d                	je     f012bb16 <test_kfreelast+0x1ffb>
f012baf9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bafd:	75 17                	jne    f012bb16 <test_kfreelast+0x1ffb>
f012baff:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb06:	83 ec 0c             	sub    $0xc,%esp
f012bb09:	68 94 c5 13 f0       	push   $0xf013c594
f012bb0e:	e8 fb 51 fd ff       	call   f0100d0e <cprintf>
f012bb13:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bb16:	e8 76 12 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bb1b:	89 c2                	mov    %eax,%edx
f012bb1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bb20:	29 c2                	sub    %eax,%edx
f012bb22:	89 d0                	mov    %edx,%eax
f012bb24:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bb29:	74 1d                	je     f012bb48 <test_kfreelast+0x202d>
f012bb2b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb2f:	75 17                	jne    f012bb48 <test_kfreelast+0x202d>
f012bb31:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb38:	83 ec 0c             	sub    $0xc,%esp
f012bb3b:	68 00 c6 13 f0       	push   $0xf013c600
f012bb40:	e8 c9 51 fd ff       	call   f0100d0e <cprintf>
f012bb45:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bb48:	e8 44 12 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bb4d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb50:	e8 73 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012bb58:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012bb5e:	83 ec 0c             	sub    $0xc,%esp
f012bb61:	50                   	push   %eax
f012bb62:	e8 de bf fd ff       	call   f0107b45 <kfree>
f012bb67:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bb6a:	e8 59 82 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bb6f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bb72:	74 1d                	je     f012bb91 <test_kfreelast+0x2076>
f012bb74:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb78:	75 17                	jne    f012bb91 <test_kfreelast+0x2076>
f012bb7a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb81:	83 ec 0c             	sub    $0xc,%esp
f012bb84:	68 94 c5 13 f0       	push   $0xf013c594
f012bb89:	e8 80 51 fd ff       	call   f0100d0e <cprintf>
f012bb8e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bb91:	e8 fb 11 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bb96:	89 c2                	mov    %eax,%edx
f012bb98:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bb9b:	29 c2                	sub    %eax,%edx
f012bb9d:	89 d0                	mov    %edx,%eax
f012bb9f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bba4:	74 1d                	je     f012bbc3 <test_kfreelast+0x20a8>
f012bba6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbaa:	75 17                	jne    f012bbc3 <test_kfreelast+0x20a8>
f012bbac:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbb3:	83 ec 0c             	sub    $0xc,%esp
f012bbb6:	68 00 c6 13 f0       	push   $0xf013c600
f012bbbb:	e8 4e 51 fd ff       	call   f0100d0e <cprintf>
f012bbc0:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bbc3:	e8 c9 11 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bbc8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bbcb:	e8 f8 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bbd0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012bbd3:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012bbd9:	83 ec 0c             	sub    $0xc,%esp
f012bbdc:	50                   	push   %eax
f012bbdd:	e8 63 bf fd ff       	call   f0107b45 <kfree>
f012bbe2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bbe5:	e8 de 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bbea:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bbed:	74 1d                	je     f012bc0c <test_kfreelast+0x20f1>
f012bbef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbf3:	75 17                	jne    f012bc0c <test_kfreelast+0x20f1>
f012bbf5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbfc:	83 ec 0c             	sub    $0xc,%esp
f012bbff:	68 94 c5 13 f0       	push   $0xf013c594
f012bc04:	e8 05 51 fd ff       	call   f0100d0e <cprintf>
f012bc09:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bc0c:	e8 80 11 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bc11:	89 c2                	mov    %eax,%edx
f012bc13:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bc16:	29 c2                	sub    %eax,%edx
f012bc18:	89 d0                	mov    %edx,%eax
f012bc1a:	83 f8 01             	cmp    $0x1,%eax
f012bc1d:	74 1d                	je     f012bc3c <test_kfreelast+0x2121>
f012bc1f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc23:	75 17                	jne    f012bc3c <test_kfreelast+0x2121>
f012bc25:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc2c:	83 ec 0c             	sub    $0xc,%esp
f012bc2f:	68 00 c6 13 f0       	push   $0xf013c600
f012bc34:	e8 d5 50 fd ff       	call   f0100d0e <cprintf>
f012bc39:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012bc3c:	e8 50 11 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bc41:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc44:	e8 7f 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc49:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012bc4c:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012bc52:	83 ec 0c             	sub    $0xc,%esp
f012bc55:	50                   	push   %eax
f012bc56:	e8 ea be fd ff       	call   f0107b45 <kfree>
f012bc5b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc5e:	e8 65 81 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bc63:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc66:	74 1d                	je     f012bc85 <test_kfreelast+0x216a>
f012bc68:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc6c:	75 17                	jne    f012bc85 <test_kfreelast+0x216a>
f012bc6e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc75:	83 ec 0c             	sub    $0xc,%esp
f012bc78:	68 94 c5 13 f0       	push   $0xf013c594
f012bc7d:	e8 8c 50 fd ff       	call   f0100d0e <cprintf>
f012bc82:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bc85:	e8 07 11 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bc8a:	89 c2                	mov    %eax,%edx
f012bc8c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bc8f:	29 c2                	sub    %eax,%edx
f012bc91:	89 d0                	mov    %edx,%eax
f012bc93:	83 f8 01             	cmp    $0x1,%eax
f012bc96:	74 1d                	je     f012bcb5 <test_kfreelast+0x219a>
f012bc98:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc9c:	75 17                	jne    f012bcb5 <test_kfreelast+0x219a>
f012bc9e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bca5:	83 ec 0c             	sub    $0xc,%esp
f012bca8:	68 00 c6 13 f0       	push   $0xf013c600
f012bcad:	e8 5c 50 fd ff       	call   f0100d0e <cprintf>
f012bcb2:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012bcb5:	e8 d7 10 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bcba:	89 c2                	mov    %eax,%edx
f012bcbc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bcbf:	39 c2                	cmp    %eax,%edx
f012bcc1:	74 1d                	je     f012bce0 <test_kfreelast+0x21c5>
f012bcc3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bcc7:	75 17                	jne    f012bce0 <test_kfreelast+0x21c5>
f012bcc9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcd0:	83 ec 0c             	sub    $0xc,%esp
f012bcd3:	68 60 c7 13 f0       	push   $0xf013c760
f012bcd8:	e8 31 50 fd ff       	call   f0100d0e <cprintf>
f012bcdd:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012bce0:	83 ec 0c             	sub    $0xc,%esp
f012bce3:	6a 03                	push   $0x3
f012bce5:	e8 47 15 fe ff       	call   f010d231 <sys_bypassPageFault>
f012bcea:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012bced:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bcf4:	e9 8e 00 00 00       	jmp    f012bd87 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012bcf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bcfc:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012bd03:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012bd06:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bd09:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bd0c:	e8 0e 15 fe ff       	call   f010d21f <sys_rcr2>
f012bd11:	89 c2                	mov    %eax,%edx
f012bd13:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bd16:	39 c2                	cmp    %eax,%edx
f012bd18:	74 1d                	je     f012bd37 <test_kfreelast+0x221c>
f012bd1a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd1e:	75 17                	jne    f012bd37 <test_kfreelast+0x221c>
f012bd20:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd27:	83 ec 0c             	sub    $0xc,%esp
f012bd2a:	68 18 c7 13 f0       	push   $0xf013c718
f012bd2f:	e8 da 4f fd ff       	call   f0100d0e <cprintf>
f012bd34:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012bd37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bd3a:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012bd41:	89 c2                	mov    %eax,%edx
f012bd43:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bd46:	01 d0                	add    %edx,%eax
f012bd48:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bd4b:	e8 cf 14 fe ff       	call   f010d21f <sys_rcr2>
f012bd50:	89 c2                	mov    %eax,%edx
f012bd52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012bd55:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012bd5c:	89 c1                	mov    %eax,%ecx
f012bd5e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bd61:	01 c8                	add    %ecx,%eax
f012bd63:	39 c2                	cmp    %eax,%edx
f012bd65:	74 1d                	je     f012bd84 <test_kfreelast+0x2269>
f012bd67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd6b:	75 17                	jne    f012bd84 <test_kfreelast+0x2269>
f012bd6d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd74:	83 ec 0c             	sub    $0xc,%esp
f012bd77:	68 18 c7 13 f0       	push   $0xf013c718
f012bd7c:	e8 8d 4f fd ff       	call   f0100d0e <cprintf>
f012bd81:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012bd84:	ff 45 f4             	incl   -0xc(%ebp)
f012bd87:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012bd8b:	0f 8e 68 ff ff ff    	jle    f012bcf9 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bd91:	83 ec 0c             	sub    $0xc,%esp
f012bd94:	6a 00                	push   $0x0
f012bd96:	e8 96 14 fe ff       	call   f010d231 <sys_bypassPageFault>
f012bd9b:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012bd9e:	e8 ee 0f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bda3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bda6:	e8 1d 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bdab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012bdae:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012bdb4:	83 ec 0c             	sub    $0xc,%esp
f012bdb7:	50                   	push   %eax
f012bdb8:	e8 88 bd fd ff       	call   f0107b45 <kfree>
f012bdbd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bdc0:	e8 03 80 fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bdc5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bdc8:	74 1d                	je     f012bde7 <test_kfreelast+0x22cc>
f012bdca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bdce:	75 17                	jne    f012bde7 <test_kfreelast+0x22cc>
f012bdd0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdd7:	83 ec 0c             	sub    $0xc,%esp
f012bdda:	68 94 c5 13 f0       	push   $0xf013c594
f012bddf:	e8 2a 4f fd ff       	call   f0100d0e <cprintf>
f012bde4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bde7:	e8 a5 0f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bdec:	89 c2                	mov    %eax,%edx
f012bdee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bdf1:	39 c2                	cmp    %eax,%edx
f012bdf3:	74 1d                	je     f012be12 <test_kfreelast+0x22f7>
f012bdf5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bdf9:	75 17                	jne    f012be12 <test_kfreelast+0x22f7>
f012bdfb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be02:	83 ec 0c             	sub    $0xc,%esp
f012be05:	68 98 c7 13 f0       	push   $0xf013c798
f012be0a:	e8 ff 4e fd ff       	call   f0100d0e <cprintf>
f012be0f:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012be12:	e8 7a 0f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012be17:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012be1a:	e8 a9 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012be1f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012be22:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012be28:	83 ec 0c             	sub    $0xc,%esp
f012be2b:	50                   	push   %eax
f012be2c:	e8 14 bd fd ff       	call   f0107b45 <kfree>
f012be31:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012be34:	e8 8f 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012be39:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012be3c:	74 1d                	je     f012be5b <test_kfreelast+0x2340>
f012be3e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be42:	75 17                	jne    f012be5b <test_kfreelast+0x2340>
f012be44:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be4b:	83 ec 0c             	sub    $0xc,%esp
f012be4e:	68 94 c5 13 f0       	push   $0xf013c594
f012be53:	e8 b6 4e fd ff       	call   f0100d0e <cprintf>
f012be58:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012be5b:	e8 31 0f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012be60:	89 c2                	mov    %eax,%edx
f012be62:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012be65:	39 c2                	cmp    %eax,%edx
f012be67:	74 1d                	je     f012be86 <test_kfreelast+0x236b>
f012be69:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be6d:	75 17                	jne    f012be86 <test_kfreelast+0x236b>
f012be6f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be76:	83 ec 0c             	sub    $0xc,%esp
f012be79:	68 98 c7 13 f0       	push   $0xf013c798
f012be7e:	e8 8b 4e fd ff       	call   f0100d0e <cprintf>
f012be83:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012be86:	e8 06 0f fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012be8b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012be8e:	e8 35 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012be93:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012be96:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012be9c:	83 ec 0c             	sub    $0xc,%esp
f012be9f:	50                   	push   %eax
f012bea0:	e8 a0 bc fd ff       	call   f0107b45 <kfree>
f012bea5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bea8:	e8 1b 7f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bead:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012beb0:	74 1d                	je     f012becf <test_kfreelast+0x23b4>
f012beb2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012beb6:	75 17                	jne    f012becf <test_kfreelast+0x23b4>
f012beb8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bebf:	83 ec 0c             	sub    $0xc,%esp
f012bec2:	68 94 c5 13 f0       	push   $0xf013c594
f012bec7:	e8 42 4e fd ff       	call   f0100d0e <cprintf>
f012becc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012becf:	e8 bd 0e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bed4:	89 c2                	mov    %eax,%edx
f012bed6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bed9:	39 c2                	cmp    %eax,%edx
f012bedb:	74 1d                	je     f012befa <test_kfreelast+0x23df>
f012bedd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bee1:	75 17                	jne    f012befa <test_kfreelast+0x23df>
f012bee3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012beea:	83 ec 0c             	sub    $0xc,%esp
f012beed:	68 98 c7 13 f0       	push   $0xf013c798
f012bef2:	e8 17 4e fd ff       	call   f0100d0e <cprintf>
f012bef7:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012befa:	e8 92 0e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012beff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bf02:	e8 c1 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bf07:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012bf0a:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012bf10:	83 ec 0c             	sub    $0xc,%esp
f012bf13:	50                   	push   %eax
f012bf14:	e8 2c bc fd ff       	call   f0107b45 <kfree>
f012bf19:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bf1c:	e8 a7 7e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012bf21:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bf24:	74 1d                	je     f012bf43 <test_kfreelast+0x2428>
f012bf26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf2a:	75 17                	jne    f012bf43 <test_kfreelast+0x2428>
f012bf2c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf33:	83 ec 0c             	sub    $0xc,%esp
f012bf36:	68 94 c5 13 f0       	push   $0xf013c594
f012bf3b:	e8 ce 4d fd ff       	call   f0100d0e <cprintf>
f012bf40:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012bf43:	e8 49 0e fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012bf48:	89 c2                	mov    %eax,%edx
f012bf4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bf4d:	39 c2                	cmp    %eax,%edx
f012bf4f:	74 1d                	je     f012bf6e <test_kfreelast+0x2453>
f012bf51:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf55:	75 17                	jne    f012bf6e <test_kfreelast+0x2453>
f012bf57:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf5e:	83 ec 0c             	sub    $0xc,%esp
f012bf61:	68 98 c7 13 f0       	push   $0xf013c798
f012bf66:	e8 a3 4d fd ff       	call   f0100d0e <cprintf>
f012bf6b:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bf6e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf72:	75 17                	jne    f012bf8b <test_kfreelast+0x2470>
f012bf74:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012bf78:	83 ec 08             	sub    $0x8,%esp
f012bf7b:	ff 75 f0             	pushl  -0x10(%ebp)
f012bf7e:	68 6c c5 13 f0       	push   $0xf013c56c
f012bf83:	e8 86 4d fd ff       	call   f0100d0e <cprintf>
f012bf88:	83 c4 10             	add    $0x10,%esp
f012bf8b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012bf92:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012bf97:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012bf9a:	5b                   	pop    %ebx
f012bf9b:	5f                   	pop    %edi
f012bf9c:	5d                   	pop    %ebp
f012bf9d:	c3                   	ret    

f012bf9e <test_krealloc>:

int test_krealloc() {
f012bf9e:	55                   	push   %ebp
f012bf9f:	89 e5                	mov    %esp,%ebp
f012bfa1:	57                   	push   %edi
f012bfa2:	53                   	push   %ebx
f012bfa3:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012bfa9:	83 ec 0c             	sub    $0xc,%esp
f012bfac:	68 7c b4 13 f0       	push   $0xf013b47c
f012bfb1:	e8 58 4d fd ff       	call   f0100d0e <cprintf>
f012bfb6:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012bfb9:	83 ec 0c             	sub    $0xc,%esp
f012bfbc:	68 ac b4 13 f0       	push   $0xf013b4ac
f012bfc1:	e8 48 4d fd ff       	call   f0100d0e <cprintf>
f012bfc6:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012bfc9:	83 ec 0c             	sub    $0xc,%esp
f012bfcc:	68 7c b4 13 f0       	push   $0xf013b47c
f012bfd1:	e8 38 4d fd ff       	call   f0100d0e <cprintf>
f012bfd6:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012bfd9:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012bfdd:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012bfe1:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012bfe7:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012bfed:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012bff4:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012bffb:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c001:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c006:	b8 00 00 00 00       	mov    $0x0,%eax
f012c00b:	89 d7                	mov    %edx,%edi
f012c00d:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c00f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c016:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c01c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c021:	b8 00 00 00 00       	mov    $0x0,%eax
f012c026:	89 d7                	mov    %edx,%edi
f012c028:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c02a:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c030:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c035:	b8 00 00 00 00       	mov    $0x0,%eax
f012c03a:	89 d7                	mov    %edx,%edi
f012c03c:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c03e:	e8 4e 0d fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c043:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c046:	83 ec 08             	sub    $0x8,%esp
f012c049:	68 00 fc 0f 00       	push   $0xffc00
f012c04e:	6a 00                	push   $0x0
f012c050:	e8 e5 bc fd ff       	call   f0107d3a <krealloc>
f012c055:	83 c4 10             	add    $0x10,%esp
f012c058:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c05e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c064:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c069:	77 17                	ja     f012c082 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c06b:	83 ec 04             	sub    $0x4,%esp
f012c06e:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c073:	68 e2 0e 00 00       	push   $0xee2
f012c078:	68 3a b5 13 f0       	push   $0xf013b53a
f012c07d:	e8 83 41 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c082:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c088:	89 c1                	mov    %eax,%ecx
f012c08a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c091:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c094:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c099:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c09c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c09f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0a4:	f7 75 b4             	divl   -0x4c(%ebp)
f012c0a7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c0aa:	29 d0                	sub    %edx,%eax
f012c0ac:	89 c3                	mov    %eax,%ebx
f012c0ae:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c0b5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c0ba:	0f b6 d0             	movzbl %al,%edx
f012c0bd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c0c0:	01 d0                	add    %edx,%eax
f012c0c2:	48                   	dec    %eax
f012c0c3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c0c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c0c9:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0ce:	f7 75 ac             	divl   -0x54(%ebp)
f012c0d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c0d4:	29 d0                	sub    %edx,%eax
f012c0d6:	01 c3                	add    %eax,%ebx
f012c0d8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c0df:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c0e4:	0f b6 c0             	movzbl %al,%eax
f012c0e7:	c1 e0 04             	shl    $0x4,%eax
f012c0ea:	89 c2                	mov    %eax,%edx
f012c0ec:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c0ef:	01 d0                	add    %edx,%eax
f012c0f1:	48                   	dec    %eax
f012c0f2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c0f5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c0f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0fd:	f7 75 a4             	divl   -0x5c(%ebp)
f012c100:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c103:	29 d0                	sub    %edx,%eax
f012c105:	01 d8                	add    %ebx,%eax
f012c107:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c10c:	39 c1                	cmp    %eax,%ecx
f012c10e:	74 17                	je     f012c127 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c110:	83 ec 04             	sub    $0x4,%esp
f012c113:	68 1c c8 13 f0       	push   $0xf013c81c
f012c118:	68 e4 0e 00 00       	push   $0xee4
f012c11d:	68 3a b5 13 f0       	push   $0xf013b53a
f012c122:	e8 de 40 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c127:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c12a:	e8 62 0c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c12f:	29 c3                	sub    %eax,%ebx
f012c131:	89 d8                	mov    %ebx,%eax
f012c133:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c138:	74 17                	je     f012c151 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c13a:	83 ec 04             	sub    $0x4,%esp
f012c13d:	68 4e c8 13 f0       	push   $0xf013c84e
f012c142:	68 e7 0e 00 00       	push   $0xee7
f012c147:	68 3a b5 13 f0       	push   $0xf013b53a
f012c14c:	e8 b4 40 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c151:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c158:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c15b:	e8 31 0c fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c160:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c163:	83 ec 08             	sub    $0x8,%esp
f012c166:	68 00 fc 0f 00       	push   $0xffc00
f012c16b:	6a 00                	push   $0x0
f012c16d:	e8 c8 bb fd ff       	call   f0107d3a <krealloc>
f012c172:	83 c4 10             	add    $0x10,%esp
f012c175:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c17b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c181:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c186:	77 17                	ja     f012c19f <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c188:	83 ec 04             	sub    $0x4,%esp
f012c18b:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c190:	68 ef 0e 00 00       	push   $0xeef
f012c195:	68 3a b5 13 f0       	push   $0xf013b53a
f012c19a:	e8 66 40 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c19f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c1a5:	89 c1                	mov    %eax,%ecx
f012c1a7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c1ae:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c1b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c1b6:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c1b9:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c1bc:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1c1:	f7 75 9c             	divl   -0x64(%ebp)
f012c1c4:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c1c7:	29 d0                	sub    %edx,%eax
f012c1c9:	89 c3                	mov    %eax,%ebx
f012c1cb:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c1d2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c1d7:	0f b6 d0             	movzbl %al,%edx
f012c1da:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c1dd:	01 d0                	add    %edx,%eax
f012c1df:	48                   	dec    %eax
f012c1e0:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c1e3:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c1e6:	ba 00 00 00 00       	mov    $0x0,%edx
f012c1eb:	f7 75 94             	divl   -0x6c(%ebp)
f012c1ee:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c1f1:	29 d0                	sub    %edx,%eax
f012c1f3:	01 c3                	add    %eax,%ebx
f012c1f5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c1fc:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c201:	0f b6 c0             	movzbl %al,%eax
f012c204:	c1 e0 04             	shl    $0x4,%eax
f012c207:	89 c2                	mov    %eax,%edx
f012c209:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c20c:	01 d0                	add    %edx,%eax
f012c20e:	48                   	dec    %eax
f012c20f:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c212:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c215:	ba 00 00 00 00       	mov    $0x0,%edx
f012c21a:	f7 75 8c             	divl   -0x74(%ebp)
f012c21d:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c220:	29 d0                	sub    %edx,%eax
f012c222:	01 d8                	add    %ebx,%eax
f012c224:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c229:	39 c1                	cmp    %eax,%ecx
f012c22b:	74 17                	je     f012c244 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c22d:	83 ec 04             	sub    $0x4,%esp
f012c230:	68 1c c8 13 f0       	push   $0xf013c81c
f012c235:	68 f1 0e 00 00       	push   $0xef1
f012c23a:	68 3a b5 13 f0       	push   $0xf013b53a
f012c23f:	e8 c1 3f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c244:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c247:	e8 45 0b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c24c:	29 c3                	sub    %eax,%ebx
f012c24e:	89 d8                	mov    %ebx,%eax
f012c250:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c255:	74 17                	je     f012c26e <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c257:	83 ec 04             	sub    $0x4,%esp
f012c25a:	68 4e c8 13 f0       	push   $0xf013c84e
f012c25f:	68 f3 0e 00 00       	push   $0xef3
f012c264:	68 3a b5 13 f0       	push   $0xf013b53a
f012c269:	e8 97 3f fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c26e:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c275:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c278:	e8 14 0b fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c27d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c280:	83 ec 08             	sub    $0x8,%esp
f012c283:	68 00 fc 0f 00       	push   $0xffc00
f012c288:	6a 00                	push   $0x0
f012c28a:	e8 ab ba fd ff       	call   f0107d3a <krealloc>
f012c28f:	83 c4 10             	add    $0x10,%esp
f012c292:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c298:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c29e:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c2a3:	77 17                	ja     f012c2bc <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c2a5:	83 ec 04             	sub    $0x4,%esp
f012c2a8:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c2ad:	68 fb 0e 00 00       	push   $0xefb
f012c2b2:	68 3a b5 13 f0       	push   $0xf013b53a
f012c2b7:	e8 49 3f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c2bc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c2c2:	89 c1                	mov    %eax,%ecx
f012c2c4:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c2cb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c2ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c2d3:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c2d6:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c2d9:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2de:	f7 75 84             	divl   -0x7c(%ebp)
f012c2e1:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c2e4:	29 d0                	sub    %edx,%eax
f012c2e6:	89 c3                	mov    %eax,%ebx
f012c2e8:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c2ef:	10 00 00 
f012c2f2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c2f7:	0f b6 d0             	movzbl %al,%edx
f012c2fa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c300:	01 d0                	add    %edx,%eax
f012c302:	48                   	dec    %eax
f012c303:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c309:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c30f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c314:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c31a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c320:	29 d0                	sub    %edx,%eax
f012c322:	01 c3                	add    %eax,%ebx
f012c324:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c32b:	10 00 00 
f012c32e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c333:	0f b6 c0             	movzbl %al,%eax
f012c336:	c1 e0 04             	shl    $0x4,%eax
f012c339:	89 c2                	mov    %eax,%edx
f012c33b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c341:	01 d0                	add    %edx,%eax
f012c343:	48                   	dec    %eax
f012c344:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c34a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c350:	ba 00 00 00 00       	mov    $0x0,%edx
f012c355:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c35b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c361:	29 d0                	sub    %edx,%eax
f012c363:	01 d8                	add    %ebx,%eax
f012c365:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c36a:	39 c1                	cmp    %eax,%ecx
f012c36c:	74 17                	je     f012c385 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c36e:	83 ec 04             	sub    $0x4,%esp
f012c371:	68 1c c8 13 f0       	push   $0xf013c81c
f012c376:	68 fd 0e 00 00       	push   $0xefd
f012c37b:	68 3a b5 13 f0       	push   $0xf013b53a
f012c380:	e8 80 3e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c385:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c388:	e8 04 0a fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c38d:	29 c3                	sub    %eax,%ebx
f012c38f:	89 d8                	mov    %ebx,%eax
f012c391:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c396:	74 17                	je     f012c3af <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c398:	83 ec 04             	sub    $0x4,%esp
f012c39b:	68 4e c8 13 f0       	push   $0xf013c84e
f012c3a0:	68 ff 0e 00 00       	push   $0xeff
f012c3a5:	68 3a b5 13 f0       	push   $0xf013b53a
f012c3aa:	e8 56 3e fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c3af:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c3b6:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c3b9:	e8 d3 09 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c3c1:	83 ec 08             	sub    $0x8,%esp
f012c3c4:	68 00 fc 0f 00       	push   $0xffc00
f012c3c9:	6a 00                	push   $0x0
f012c3cb:	e8 6a b9 fd ff       	call   f0107d3a <krealloc>
f012c3d0:	83 c4 10             	add    $0x10,%esp
f012c3d3:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c3d9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c3df:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c3e4:	77 17                	ja     f012c3fd <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c3e6:	83 ec 04             	sub    $0x4,%esp
f012c3e9:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c3ee:	68 06 0f 00 00       	push   $0xf06
f012c3f3:	68 3a b5 13 f0       	push   $0xf013b53a
f012c3f8:	e8 08 3e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c3fd:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c403:	89 c1                	mov    %eax,%ecx
f012c405:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c40c:	10 00 00 
f012c40f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c415:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c41a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c420:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c426:	ba 00 00 00 00       	mov    $0x0,%edx
f012c42b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c431:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c437:	29 d0                	sub    %edx,%eax
f012c439:	89 c3                	mov    %eax,%ebx
f012c43b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c442:	10 00 00 
f012c445:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c44a:	0f b6 d0             	movzbl %al,%edx
f012c44d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c453:	01 d0                	add    %edx,%eax
f012c455:	48                   	dec    %eax
f012c456:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c45c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c462:	ba 00 00 00 00       	mov    $0x0,%edx
f012c467:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c46d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c473:	29 d0                	sub    %edx,%eax
f012c475:	01 c3                	add    %eax,%ebx
f012c477:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c47e:	10 00 00 
f012c481:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c486:	0f b6 c0             	movzbl %al,%eax
f012c489:	c1 e0 04             	shl    $0x4,%eax
f012c48c:	89 c2                	mov    %eax,%edx
f012c48e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c494:	01 d0                	add    %edx,%eax
f012c496:	48                   	dec    %eax
f012c497:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c49d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c4a3:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4a8:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c4ae:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c4b4:	29 d0                	sub    %edx,%eax
f012c4b6:	01 d8                	add    %ebx,%eax
f012c4b8:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c4bd:	39 c1                	cmp    %eax,%ecx
f012c4bf:	74 17                	je     f012c4d8 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012c4c1:	83 ec 04             	sub    $0x4,%esp
f012c4c4:	68 1c c8 13 f0       	push   $0xf013c81c
f012c4c9:	68 08 0f 00 00       	push   $0xf08
f012c4ce:	68 3a b5 13 f0       	push   $0xf013b53a
f012c4d3:	e8 2d 3d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c4d8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c4db:	e8 b1 08 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c4e0:	29 c3                	sub    %eax,%ebx
f012c4e2:	89 d8                	mov    %ebx,%eax
f012c4e4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c4e9:	74 17                	je     f012c502 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012c4eb:	83 ec 04             	sub    $0x4,%esp
f012c4ee:	68 4e c8 13 f0       	push   $0xf013c84e
f012c4f3:	68 0a 0f 00 00       	push   $0xf0a
f012c4f8:	68 3a b5 13 f0       	push   $0xf013b53a
f012c4fd:	e8 03 3d fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c502:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012c509:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c50c:	e8 80 08 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c511:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c514:	83 ec 08             	sub    $0x8,%esp
f012c517:	68 00 fc 1f 00       	push   $0x1ffc00
f012c51c:	6a 00                	push   $0x0
f012c51e:	e8 17 b8 fd ff       	call   f0107d3a <krealloc>
f012c523:	83 c4 10             	add    $0x10,%esp
f012c526:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c52c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c532:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c537:	77 17                	ja     f012c550 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c539:	83 ec 04             	sub    $0x4,%esp
f012c53c:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c541:	68 11 0f 00 00       	push   $0xf11
f012c546:	68 3a b5 13 f0       	push   $0xf013b53a
f012c54b:	e8 b5 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c550:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c556:	89 c1                	mov    %eax,%ecx
f012c558:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c55f:	10 00 00 
f012c562:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c568:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c56d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c573:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c579:	ba 00 00 00 00       	mov    $0x0,%edx
f012c57e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c584:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c58a:	29 d0                	sub    %edx,%eax
f012c58c:	89 c3                	mov    %eax,%ebx
f012c58e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c595:	10 00 00 
f012c598:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c59d:	0f b6 d0             	movzbl %al,%edx
f012c5a0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c5a6:	01 d0                	add    %edx,%eax
f012c5a8:	48                   	dec    %eax
f012c5a9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c5af:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c5b5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5ba:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c5c0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c5c6:	29 d0                	sub    %edx,%eax
f012c5c8:	01 c3                	add    %eax,%ebx
f012c5ca:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c5d1:	10 00 00 
f012c5d4:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c5d9:	0f b6 c0             	movzbl %al,%eax
f012c5dc:	c1 e0 04             	shl    $0x4,%eax
f012c5df:	89 c2                	mov    %eax,%edx
f012c5e1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c5e7:	01 d0                	add    %edx,%eax
f012c5e9:	48                   	dec    %eax
f012c5ea:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c5f0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c5f6:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5fb:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c601:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c607:	29 d0                	sub    %edx,%eax
f012c609:	01 d8                	add    %ebx,%eax
f012c60b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c610:	39 c1                	cmp    %eax,%ecx
f012c612:	74 17                	je     f012c62b <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012c614:	83 ec 04             	sub    $0x4,%esp
f012c617:	68 1c c8 13 f0       	push   $0xf013c81c
f012c61c:	68 13 0f 00 00       	push   $0xf13
f012c621:	68 3a b5 13 f0       	push   $0xf013b53a
f012c626:	e8 da 3b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c62b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c62e:	e8 5e 07 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c633:	29 c3                	sub    %eax,%ebx
f012c635:	89 d8                	mov    %ebx,%eax
f012c637:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c63c:	74 17                	je     f012c655 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012c63e:	83 ec 04             	sub    $0x4,%esp
f012c641:	68 4e c8 13 f0       	push   $0xf013c84e
f012c646:	68 15 0f 00 00       	push   $0xf15
f012c64b:	68 3a b5 13 f0       	push   $0xf013b53a
f012c650:	e8 b0 3b fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c655:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012c65c:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c65f:	e8 2d 07 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c664:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c667:	83 ec 08             	sub    $0x8,%esp
f012c66a:	68 00 fc 1f 00       	push   $0x1ffc00
f012c66f:	6a 00                	push   $0x0
f012c671:	e8 c4 b6 fd ff       	call   f0107d3a <krealloc>
f012c676:	83 c4 10             	add    $0x10,%esp
f012c679:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c67f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c685:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c68a:	77 17                	ja     f012c6a3 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c68c:	83 ec 04             	sub    $0x4,%esp
f012c68f:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c694:	68 1c 0f 00 00       	push   $0xf1c
f012c699:	68 3a b5 13 f0       	push   $0xf013b53a
f012c69e:	e8 62 3b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c6a3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c6a9:	89 c1                	mov    %eax,%ecx
f012c6ab:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c6b2:	10 00 00 
f012c6b5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c6bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c6c0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c6c6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c6cc:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6d1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c6d7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c6dd:	29 d0                	sub    %edx,%eax
f012c6df:	89 c3                	mov    %eax,%ebx
f012c6e1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012c6e8:	10 00 00 
f012c6eb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c6f0:	0f b6 d0             	movzbl %al,%edx
f012c6f3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012c6f9:	01 d0                	add    %edx,%eax
f012c6fb:	48                   	dec    %eax
f012c6fc:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012c702:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c708:	ba 00 00 00 00       	mov    $0x0,%edx
f012c70d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012c713:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c719:	29 d0                	sub    %edx,%eax
f012c71b:	01 c3                	add    %eax,%ebx
f012c71d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012c724:	10 00 00 
f012c727:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c72c:	0f b6 c0             	movzbl %al,%eax
f012c72f:	c1 e0 04             	shl    $0x4,%eax
f012c732:	89 c2                	mov    %eax,%edx
f012c734:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c73a:	01 d0                	add    %edx,%eax
f012c73c:	48                   	dec    %eax
f012c73d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012c743:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c749:	ba 00 00 00 00       	mov    $0x0,%edx
f012c74e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012c754:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c75a:	29 d0                	sub    %edx,%eax
f012c75c:	01 d8                	add    %ebx,%eax
f012c75e:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c763:	39 c1                	cmp    %eax,%ecx
f012c765:	74 17                	je     f012c77e <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012c767:	83 ec 04             	sub    $0x4,%esp
f012c76a:	68 1c c8 13 f0       	push   $0xf013c81c
f012c76f:	68 1e 0f 00 00       	push   $0xf1e
f012c774:	68 3a b5 13 f0       	push   $0xf013b53a
f012c779:	e8 87 3a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c77e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c781:	e8 0b 06 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c786:	29 c3                	sub    %eax,%ebx
f012c788:	89 d8                	mov    %ebx,%eax
f012c78a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c78f:	74 17                	je     f012c7a8 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012c791:	83 ec 04             	sub    $0x4,%esp
f012c794:	68 4e c8 13 f0       	push   $0xf013c84e
f012c799:	68 20 0f 00 00       	push   $0xf20
f012c79e:	68 3a b5 13 f0       	push   $0xf013b53a
f012c7a3:	e8 5d 3a fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c7a8:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012c7af:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c7b2:	e8 da 05 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c7b7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c7ba:	83 ec 08             	sub    $0x8,%esp
f012c7bd:	68 00 fc 2f 00       	push   $0x2ffc00
f012c7c2:	6a 00                	push   $0x0
f012c7c4:	e8 71 b5 fd ff       	call   f0107d3a <krealloc>
f012c7c9:	83 c4 10             	add    $0x10,%esp
f012c7cc:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c7d2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c7d8:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c7dd:	77 17                	ja     f012c7f6 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c7df:	83 ec 04             	sub    $0x4,%esp
f012c7e2:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c7e7:	68 27 0f 00 00       	push   $0xf27
f012c7ec:	68 3a b5 13 f0       	push   $0xf013b53a
f012c7f1:	e8 0f 3a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c7f6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c7fc:	89 c1                	mov    %eax,%ecx
f012c7fe:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012c805:	10 00 00 
f012c808:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c80e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c813:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012c819:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c81f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c824:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012c82a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c830:	29 d0                	sub    %edx,%eax
f012c832:	89 c3                	mov    %eax,%ebx
f012c834:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012c83b:	10 00 00 
f012c83e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c843:	0f b6 d0             	movzbl %al,%edx
f012c846:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012c84c:	01 d0                	add    %edx,%eax
f012c84e:	48                   	dec    %eax
f012c84f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012c855:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c85b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c860:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012c866:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012c86c:	29 d0                	sub    %edx,%eax
f012c86e:	01 c3                	add    %eax,%ebx
f012c870:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012c877:	10 00 00 
f012c87a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c87f:	0f b6 c0             	movzbl %al,%eax
f012c882:	c1 e0 04             	shl    $0x4,%eax
f012c885:	89 c2                	mov    %eax,%edx
f012c887:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012c88d:	01 d0                	add    %edx,%eax
f012c88f:	48                   	dec    %eax
f012c890:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012c896:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c89c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8a1:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c8a7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c8ad:	29 d0                	sub    %edx,%eax
f012c8af:	01 d8                	add    %ebx,%eax
f012c8b1:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c8b6:	39 c1                	cmp    %eax,%ecx
f012c8b8:	74 17                	je     f012c8d1 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c8ba:	83 ec 04             	sub    $0x4,%esp
f012c8bd:	68 1c c8 13 f0       	push   $0xf013c81c
f012c8c2:	68 29 0f 00 00       	push   $0xf29
f012c8c7:	68 3a b5 13 f0       	push   $0xf013b53a
f012c8cc:	e8 34 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c8d1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c8d4:	e8 b8 04 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c8d9:	29 c3                	sub    %eax,%ebx
f012c8db:	89 d8                	mov    %ebx,%eax
f012c8dd:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c8e2:	74 17                	je     f012c8fb <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c8e4:	83 ec 04             	sub    $0x4,%esp
f012c8e7:	68 84 b9 13 f0       	push   $0xf013b984
f012c8ec:	68 2b 0f 00 00       	push   $0xf2b
f012c8f1:	68 3a b5 13 f0       	push   $0xf013b53a
f012c8f6:	e8 0a 39 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c8fb:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012c902:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c905:	e8 87 04 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012c90a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c90d:	83 ec 08             	sub    $0x8,%esp
f012c910:	68 00 fc 2f 00       	push   $0x2ffc00
f012c915:	6a 00                	push   $0x0
f012c917:	e8 1e b4 fd ff       	call   f0107d3a <krealloc>
f012c91c:	83 c4 10             	add    $0x10,%esp
f012c91f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c925:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c92b:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c930:	77 17                	ja     f012c949 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c932:	83 ec 04             	sub    $0x4,%esp
f012c935:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c93a:	68 32 0f 00 00       	push   $0xf32
f012c93f:	68 3a b5 13 f0       	push   $0xf013b53a
f012c944:	e8 bc 38 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c949:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c94f:	89 c1                	mov    %eax,%ecx
f012c951:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012c958:	10 00 00 
f012c95b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012c961:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c966:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012c96c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c972:	ba 00 00 00 00       	mov    $0x0,%edx
f012c977:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012c97d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c983:	29 d0                	sub    %edx,%eax
f012c985:	89 c3                	mov    %eax,%ebx
f012c987:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012c98e:	10 00 00 
f012c991:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c996:	0f b6 d0             	movzbl %al,%edx
f012c999:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012c99f:	01 d0                	add    %edx,%eax
f012c9a1:	48                   	dec    %eax
f012c9a2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012c9a8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c9ae:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9b3:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012c9b9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c9bf:	29 d0                	sub    %edx,%eax
f012c9c1:	01 c3                	add    %eax,%ebx
f012c9c3:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012c9ca:	10 00 00 
f012c9cd:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012c9d2:	0f b6 c0             	movzbl %al,%eax
f012c9d5:	c1 e0 04             	shl    $0x4,%eax
f012c9d8:	89 c2                	mov    %eax,%edx
f012c9da:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012c9e0:	01 d0                	add    %edx,%eax
f012c9e2:	48                   	dec    %eax
f012c9e3:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012c9e9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c9ef:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9f4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012c9fa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ca00:	29 d0                	sub    %edx,%eax
f012ca02:	01 d8                	add    %ebx,%eax
f012ca04:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012ca09:	39 c1                	cmp    %eax,%ecx
f012ca0b:	74 17                	je     f012ca24 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012ca0d:	83 ec 04             	sub    $0x4,%esp
f012ca10:	68 1c c8 13 f0       	push   $0xf013c81c
f012ca15:	68 34 0f 00 00       	push   $0xf34
f012ca1a:	68 3a b5 13 f0       	push   $0xf013b53a
f012ca1f:	e8 e1 37 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ca24:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ca27:	e8 65 03 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ca2c:	29 c3                	sub    %eax,%ebx
f012ca2e:	89 d8                	mov    %ebx,%eax
f012ca30:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ca35:	74 17                	je     f012ca4e <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012ca37:	83 ec 04             	sub    $0x4,%esp
f012ca3a:	68 4e c8 13 f0       	push   $0xf013c84e
f012ca3f:	68 36 0f 00 00       	push   $0xf36
f012ca44:	68 3a b5 13 f0       	push   $0xf013b53a
f012ca49:	e8 b7 37 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ca4e:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012ca55:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012ca58:	e8 34 03 fe ff       	call   f010cd91 <sys_calculate_free_frames>
f012ca5d:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012ca60:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012ca67:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012ca6a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ca70:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012ca76:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ca7c:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012ca7f:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012ca81:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012ca87:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ca8d:	01 c2                	add    %eax,%edx
f012ca8f:	8a 45 ce             	mov    -0x32(%ebp),%al
f012ca92:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ca94:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ca9a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012caa0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012caa7:	eb 11                	jmp    f012caba <test_krealloc+0xb1c>
			ptr[i] = 2;
f012caa9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012caac:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cab2:	01 d0                	add    %edx,%eax
f012cab4:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cab7:	ff 45 f4             	incl   -0xc(%ebp)
f012caba:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cac0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012cac3:	7d e4                	jge    f012caa9 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012cac5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cacb:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012cad1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cad7:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012cadd:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cae3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012caea:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012caf0:	01 d0                	add    %edx,%eax
f012caf2:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012caf8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cafe:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cb04:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012cb0b:	eb 1b                	jmp    f012cb28 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012cb0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012cb10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cb17:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cb1d:	01 d0                	add    %edx,%eax
f012cb1f:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cb25:	ff 45 f0             	incl   -0x10(%ebp)
f012cb28:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cb2e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012cb31:	7d da                	jge    f012cb0d <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cb33:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb39:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cb3f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012cb46:	eb 17                	jmp    f012cb5f <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012cb48:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012cb4b:	01 c0                	add    %eax,%eax
f012cb4d:	89 c2                	mov    %eax,%edx
f012cb4f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cb55:	01 d0                	add    %edx,%eax
f012cb57:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cb5c:	ff 45 ec             	incl   -0x14(%ebp)
f012cb5f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cb65:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012cb68:	7d de                	jge    f012cb48 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012cb6a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cb70:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012cb76:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cb7c:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012cb81:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012cb87:	01 c0                	add    %eax,%eax
f012cb89:	89 c2                	mov    %eax,%edx
f012cb8b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cb91:	01 d0                	add    %edx,%eax
f012cb93:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012cb98:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cb9e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012cba4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012cbab:	eb 49                	jmp    f012cbf6 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012cbad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cbb0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cbb7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbbd:	01 d0                	add    %edx,%eax
f012cbbf:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012cbc2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cbc5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cbcc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbd2:	01 d0                	add    %edx,%eax
f012cbd4:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012cbda:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cbdd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cbe4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cbea:	01 d0                	add    %edx,%eax
f012cbec:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012cbf3:	ff 45 e8             	incl   -0x18(%ebp)
f012cbf6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbfc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012cbff:	7d ac                	jge    f012cbad <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012cc01:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cc07:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012cc0d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc13:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012cc16:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc1c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012cc22:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc28:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012cc2f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cc35:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc3c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc42:	01 d0                	add    %edx,%eax
f012cc44:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012cc47:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cc4d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc54:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc5a:	01 d0                	add    %edx,%eax
f012cc5c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012cc62:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cc68:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cc6f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cc75:	01 d0                	add    %edx,%eax
f012cc77:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012cc7e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cc84:	8a 00                	mov    (%eax),%al
f012cc86:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012cc89:	75 17                	jne    f012cca2 <test_krealloc+0xd04>
f012cc8b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012cc91:	89 c2                	mov    %eax,%edx
f012cc93:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cc99:	01 d0                	add    %edx,%eax
f012cc9b:	8a 00                	mov    (%eax),%al
f012cc9d:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012cca0:	74 17                	je     f012ccb9 <test_krealloc+0xd1b>
			panic(
f012cca2:	83 ec 04             	sub    $0x4,%esp
f012cca5:	68 6c c8 13 f0       	push   $0xf013c86c
f012ccaa:	68 79 0f 00 00       	push   $0xf79
f012ccaf:	68 3a b5 13 f0       	push   $0xf013b53a
f012ccb4:	e8 4c 35 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ccb9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ccbf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ccc5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cccb:	8a 00                	mov    (%eax),%al
f012cccd:	3c 02                	cmp    $0x2,%al
f012cccf:	75 16                	jne    f012cce7 <test_krealloc+0xd49>
f012ccd1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ccd7:	89 c2                	mov    %eax,%edx
f012ccd9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ccdf:	01 d0                	add    %edx,%eax
f012cce1:	8a 00                	mov    (%eax),%al
f012cce3:	3c 02                	cmp    $0x2,%al
f012cce5:	74 20                	je     f012cd07 <test_krealloc+0xd69>
			panic(
f012cce7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cced:	8a 00                	mov    (%eax),%al
f012ccef:	0f be c0             	movsbl %al,%eax
f012ccf2:	50                   	push   %eax
f012ccf3:	68 ac c8 13 f0       	push   $0xf013c8ac
f012ccf8:	68 7f 0f 00 00       	push   $0xf7f
f012ccfd:	68 3a b5 13 f0       	push   $0xf013b53a
f012cd02:	e8 fe 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012cd07:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cd0d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012cd13:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cd19:	8b 00                	mov    (%eax),%eax
f012cd1b:	83 f8 03             	cmp    $0x3,%eax
f012cd1e:	75 1c                	jne    f012cd3c <test_krealloc+0xd9e>
f012cd20:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012cd26:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cd2d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cd33:	01 d0                	add    %edx,%eax
f012cd35:	8b 00                	mov    (%eax),%eax
f012cd37:	83 f8 03             	cmp    $0x3,%eax
f012cd3a:	74 17                	je     f012cd53 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012cd3c:	83 ec 04             	sub    $0x4,%esp
f012cd3f:	68 f8 c8 13 f0       	push   $0xf013c8f8
f012cd44:	68 83 0f 00 00       	push   $0xf83
f012cd49:	68 3a b5 13 f0       	push   $0xf013b53a
f012cd4e:	e8 b2 34 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012cd53:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cd59:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012cd5f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cd65:	8b 00                	mov    (%eax),%eax
f012cd67:	83 f8 04             	cmp    $0x4,%eax
f012cd6a:	75 1c                	jne    f012cd88 <test_krealloc+0xdea>
f012cd6c:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012cd72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cd79:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012cd7f:	01 d0                	add    %edx,%eax
f012cd81:	8b 00                	mov    (%eax),%eax
f012cd83:	83 f8 04             	cmp    $0x4,%eax
f012cd86:	74 17                	je     f012cd9f <test_krealloc+0xe01>
			panic(
f012cd88:	83 ec 04             	sub    $0x4,%esp
f012cd8b:	68 6c c8 13 f0       	push   $0xf013c86c
f012cd90:	68 88 0f 00 00       	push   $0xf88
f012cd95:	68 3a b5 13 f0       	push   $0xf013b53a
f012cd9a:	e8 66 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012cd9f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cda5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012cdab:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cdb1:	66 8b 00             	mov    (%eax),%ax
f012cdb4:	66 83 f8 05          	cmp    $0x5,%ax
f012cdb8:	75 1b                	jne    f012cdd5 <test_krealloc+0xe37>
f012cdba:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cdc0:	01 c0                	add    %eax,%eax
f012cdc2:	89 c2                	mov    %eax,%edx
f012cdc4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cdca:	01 d0                	add    %edx,%eax
f012cdcc:	66 8b 00             	mov    (%eax),%ax
f012cdcf:	66 83 f8 05          	cmp    $0x5,%ax
f012cdd3:	74 17                	je     f012cdec <test_krealloc+0xe4e>
			panic(
f012cdd5:	83 ec 04             	sub    $0x4,%esp
f012cdd8:	68 6c c8 13 f0       	push   $0xf013c86c
f012cddd:	68 8d 0f 00 00       	push   $0xf8d
f012cde2:	68 3a b5 13 f0       	push   $0xf013b53a
f012cde7:	e8 19 34 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012cdec:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cdf2:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012cdf8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cdfe:	66 8b 00             	mov    (%eax),%ax
f012ce01:	66 83 f8 06          	cmp    $0x6,%ax
f012ce05:	75 1b                	jne    f012ce22 <test_krealloc+0xe84>
f012ce07:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012ce0d:	01 c0                	add    %eax,%eax
f012ce0f:	89 c2                	mov    %eax,%edx
f012ce11:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ce17:	01 d0                	add    %edx,%eax
f012ce19:	66 8b 00             	mov    (%eax),%ax
f012ce1c:	66 83 f8 06          	cmp    $0x6,%ax
f012ce20:	74 17                	je     f012ce39 <test_krealloc+0xe9b>
			panic(
f012ce22:	83 ec 04             	sub    $0x4,%esp
f012ce25:	68 6c c8 13 f0       	push   $0xf013c86c
f012ce2a:	68 92 0f 00 00       	push   $0xf92
f012ce2f:	68 3a b5 13 f0       	push   $0xf013b53a
f012ce34:	e8 cc 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ce39:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ce3f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ce45:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce4b:	8a 00                	mov    (%eax),%al
f012ce4d:	3c 07                	cmp    $0x7,%al
f012ce4f:	75 1b                	jne    f012ce6c <test_krealloc+0xece>
f012ce51:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ce57:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ce5e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce64:	01 d0                	add    %edx,%eax
f012ce66:	8a 00                	mov    (%eax),%al
f012ce68:	3c 07                	cmp    $0x7,%al
f012ce6a:	74 17                	je     f012ce83 <test_krealloc+0xee5>
			panic(
f012ce6c:	83 ec 04             	sub    $0x4,%esp
f012ce6f:	68 6c c8 13 f0       	push   $0xf013c86c
f012ce74:	68 97 0f 00 00       	push   $0xf97
f012ce79:	68 3a b5 13 f0       	push   $0xf013b53a
f012ce7e:	e8 82 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012ce83:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce89:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ce8d:	66 83 f8 07          	cmp    $0x7,%ax
f012ce91:	75 1f                	jne    f012ceb2 <test_krealloc+0xf14>
f012ce93:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ce99:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cea0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cea6:	01 d0                	add    %edx,%eax
f012cea8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ceac:	66 83 f8 07          	cmp    $0x7,%ax
f012ceb0:	74 17                	je     f012cec9 <test_krealloc+0xf2b>
			panic(
f012ceb2:	83 ec 04             	sub    $0x4,%esp
f012ceb5:	68 6c c8 13 f0       	push   $0xf013c86c
f012ceba:	68 9a 0f 00 00       	push   $0xf9a
f012cebf:	68 3a b5 13 f0       	push   $0xf013b53a
f012cec4:	e8 3c 33 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012cec9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cecf:	8b 40 04             	mov    0x4(%eax),%eax
f012ced2:	83 f8 07             	cmp    $0x7,%eax
f012ced5:	75 1d                	jne    f012cef4 <test_krealloc+0xf56>
f012ced7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cedd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cee4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ceea:	01 d0                	add    %edx,%eax
f012ceec:	8b 40 04             	mov    0x4(%eax),%eax
f012ceef:	83 f8 07             	cmp    $0x7,%eax
f012cef2:	74 17                	je     f012cf0b <test_krealloc+0xf6d>
			panic(
f012cef4:	83 ec 04             	sub    $0x4,%esp
f012cef7:	68 6c c8 13 f0       	push   $0xf013c86c
f012cefc:	68 9d 0f 00 00       	push   $0xf9d
f012cf01:	68 3a b5 13 f0       	push   $0xf013b53a
f012cf06:	e8 fa 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012cf0b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cf11:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012cf17:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cf1d:	8a 00                	mov    (%eax),%al
f012cf1f:	3c 08                	cmp    $0x8,%al
f012cf21:	75 1b                	jne    f012cf3e <test_krealloc+0xfa0>
f012cf23:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cf29:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cf30:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cf36:	01 d0                	add    %edx,%eax
f012cf38:	8a 00                	mov    (%eax),%al
f012cf3a:	3c 08                	cmp    $0x8,%al
f012cf3c:	74 17                	je     f012cf55 <test_krealloc+0xfb7>
			panic(
f012cf3e:	83 ec 04             	sub    $0x4,%esp
f012cf41:	68 6c c8 13 f0       	push   $0xf013c86c
f012cf46:	68 a2 0f 00 00       	push   $0xfa2
f012cf4b:	68 3a b5 13 f0       	push   $0xf013b53a
f012cf50:	e8 b0 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012cf55:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cf5b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cf5f:	66 83 f8 08          	cmp    $0x8,%ax
f012cf63:	75 1f                	jne    f012cf84 <test_krealloc+0xfe6>
f012cf65:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cf6b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cf72:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cf78:	01 d0                	add    %edx,%eax
f012cf7a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cf7e:	66 83 f8 08          	cmp    $0x8,%ax
f012cf82:	74 17                	je     f012cf9b <test_krealloc+0xffd>
			panic(
f012cf84:	83 ec 04             	sub    $0x4,%esp
f012cf87:	68 6c c8 13 f0       	push   $0xf013c86c
f012cf8c:	68 a5 0f 00 00       	push   $0xfa5
f012cf91:	68 3a b5 13 f0       	push   $0xf013b53a
f012cf96:	e8 6a 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012cf9b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cfa1:	8b 40 04             	mov    0x4(%eax),%eax
f012cfa4:	83 f8 08             	cmp    $0x8,%eax
f012cfa7:	75 1d                	jne    f012cfc6 <test_krealloc+0x1028>
f012cfa9:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012cfaf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cfb6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cfbc:	01 d0                	add    %edx,%eax
f012cfbe:	8b 40 04             	mov    0x4(%eax),%eax
f012cfc1:	83 f8 08             	cmp    $0x8,%eax
f012cfc4:	74 17                	je     f012cfdd <test_krealloc+0x103f>
			panic(
f012cfc6:	83 ec 04             	sub    $0x4,%esp
f012cfc9:	68 6c c8 13 f0       	push   $0xf013c86c
f012cfce:	68 a8 0f 00 00       	push   $0xfa8
f012cfd3:	68 3a b5 13 f0       	push   $0xf013b53a
f012cfd8:	e8 28 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012cfdd:	e8 af fd fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012cfe2:	89 c2                	mov    %eax,%edx
f012cfe4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cfe7:	39 c2                	cmp    %eax,%edx
f012cfe9:	74 17                	je     f012d002 <test_krealloc+0x1064>
			panic(
f012cfeb:	83 ec 04             	sub    $0x4,%esp
f012cfee:	68 2c c9 13 f0       	push   $0xf013c92c
f012cff3:	68 ac 0f 00 00       	push   $0xfac
f012cff8:	68 3a b5 13 f0       	push   $0xf013b53a
f012cffd:	e8 03 32 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d002:	83 ec 0c             	sub    $0xc,%esp
f012d005:	68 78 c9 13 f0       	push   $0xf013c978
f012d00a:	e8 ff 3c fd ff       	call   f0100d0e <cprintf>
f012d00f:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d012:	e8 7a fd fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d017:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d01a:	e8 a9 6d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d01f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d025:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d02b:	83 ec 08             	sub    $0x8,%esp
f012d02e:	6a 00                	push   $0x0
f012d030:	50                   	push   %eax
f012d031:	e8 04 ad fd ff       	call   f0107d3a <krealloc>
f012d036:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d039:	e8 8a 6d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d03e:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d044:	74 17                	je     f012d05d <test_krealloc+0x10bf>
			panic(
f012d046:	83 ec 04             	sub    $0x4,%esp
f012d049:	68 9c c9 13 f0       	push   $0xf013c99c
f012d04e:	68 b9 0f 00 00       	push   $0xfb9
f012d053:	68 3a b5 13 f0       	push   $0xf013b53a
f012d058:	e8 a8 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d05d:	e8 2f fd fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d062:	89 c2                	mov    %eax,%edx
f012d064:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d067:	29 c2                	sub    %eax,%edx
f012d069:	89 d0                	mov    %edx,%eax
f012d06b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d070:	74 17                	je     f012d089 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d072:	83 ec 04             	sub    $0x4,%esp
f012d075:	68 10 ca 13 f0       	push   $0xf013ca10
f012d07a:	68 bb 0f 00 00       	push   $0xfbb
f012d07f:	68 3a b5 13 f0       	push   $0xf013b53a
f012d084:	e8 7c 31 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d089:	e8 03 fd fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d08e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d091:	e8 32 6d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d096:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d09c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d0a2:	83 ec 08             	sub    $0x8,%esp
f012d0a5:	6a 00                	push   $0x0
f012d0a7:	50                   	push   %eax
f012d0a8:	e8 8d ac fd ff       	call   f0107d3a <krealloc>
f012d0ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d0b0:	e8 13 6d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d0b5:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d0bb:	74 17                	je     f012d0d4 <test_krealloc+0x1136>
			panic(
f012d0bd:	83 ec 04             	sub    $0x4,%esp
f012d0c0:	68 9c c9 13 f0       	push   $0xf013c99c
f012d0c5:	68 c4 0f 00 00       	push   $0xfc4
f012d0ca:	68 3a b5 13 f0       	push   $0xf013b53a
f012d0cf:	e8 31 31 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d0d4:	e8 b8 fc fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d0d9:	89 c2                	mov    %eax,%edx
f012d0db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d0de:	29 c2                	sub    %eax,%edx
f012d0e0:	89 d0                	mov    %edx,%eax
f012d0e2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d0e7:	74 17                	je     f012d100 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d0e9:	83 ec 04             	sub    $0x4,%esp
f012d0ec:	68 10 ca 13 f0       	push   $0xf013ca10
f012d0f1:	68 c6 0f 00 00       	push   $0xfc6
f012d0f6:	68 3a b5 13 f0       	push   $0xf013b53a
f012d0fb:	e8 05 31 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d100:	e8 8c fc fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d105:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d108:	e8 bb 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d10d:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d113:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d119:	83 ec 08             	sub    $0x8,%esp
f012d11c:	6a 00                	push   $0x0
f012d11e:	50                   	push   %eax
f012d11f:	e8 16 ac fd ff       	call   f0107d3a <krealloc>
f012d124:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d127:	e8 9c 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d12c:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d132:	74 17                	je     f012d14b <test_krealloc+0x11ad>
			panic(
f012d134:	83 ec 04             	sub    $0x4,%esp
f012d137:	68 54 b5 13 f0       	push   $0xf013b554
f012d13c:	68 ce 0f 00 00       	push   $0xfce
f012d141:	68 3a b5 13 f0       	push   $0xf013b53a
f012d146:	e8 ba 30 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d14b:	e8 41 fc fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d150:	89 c2                	mov    %eax,%edx
f012d152:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d155:	29 c2                	sub    %eax,%edx
f012d157:	89 d0                	mov    %edx,%eax
f012d159:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d15e:	74 17                	je     f012d177 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d160:	83 ec 04             	sub    $0x4,%esp
f012d163:	68 10 ca 13 f0       	push   $0xf013ca10
f012d168:	68 d0 0f 00 00       	push   $0xfd0
f012d16d:	68 3a b5 13 f0       	push   $0xf013b53a
f012d172:	e8 8e 30 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d177:	e8 15 fc fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d17c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d17f:	e8 44 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d184:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d18a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d190:	83 ec 08             	sub    $0x8,%esp
f012d193:	6a 00                	push   $0x0
f012d195:	50                   	push   %eax
f012d196:	e8 9f ab fd ff       	call   f0107d3a <krealloc>
f012d19b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d19e:	e8 25 6c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012d1a3:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d1a9:	74 17                	je     f012d1c2 <test_krealloc+0x1224>
			panic(
f012d1ab:	83 ec 04             	sub    $0x4,%esp
f012d1ae:	68 9c c9 13 f0       	push   $0xf013c99c
f012d1b3:	68 d8 0f 00 00       	push   $0xfd8
f012d1b8:	68 3a b5 13 f0       	push   $0xf013b53a
f012d1bd:	e8 43 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d1c2:	e8 ca fb fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d1c7:	89 c2                	mov    %eax,%edx
f012d1c9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d1cc:	29 c2                	sub    %eax,%edx
f012d1ce:	89 d0                	mov    %edx,%eax
f012d1d0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d1d5:	74 17                	je     f012d1ee <test_krealloc+0x1250>
			panic(
f012d1d7:	83 ec 04             	sub    $0x4,%esp
f012d1da:	68 44 ca 13 f0       	push   $0xf013ca44
f012d1df:	68 db 0f 00 00       	push   $0xfdb
f012d1e4:	68 3a b5 13 f0       	push   $0xf013b53a
f012d1e9:	e8 17 30 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d1ee:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d1f5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d1fc:	eb 48                	jmp    f012d246 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d1fe:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d201:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012d206:	83 ec 04             	sub    $0x4,%esp
f012d209:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d20f:	51                   	push   %ecx
f012d210:	52                   	push   %edx
f012d211:	50                   	push   %eax
f012d212:	e8 9a 98 fd ff       	call   f0106ab1 <get_page_table>
f012d217:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d21a:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d220:	85 c0                	test   %eax,%eax
f012d222:	75 17                	jne    f012d23b <test_krealloc+0x129d>
					panic(
f012d224:	83 ec 04             	sub    $0x4,%esp
f012d227:	68 3c be 13 f0       	push   $0xf013be3c
f012d22c:	68 e7 0f 00 00       	push   $0xfe7
f012d231:	68 3a b5 13 f0       	push   $0xf013b53a
f012d236:	e8 ca 2f fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d23b:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d242:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d246:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d24a:	78 b2                	js     f012d1fe <test_krealloc+0x1260>
f012d24c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d250:	7f 09                	jg     f012d25b <test_krealloc+0x12bd>
f012d252:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d259:	76 a3                	jbe    f012d1fe <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d25b:	83 ec 0c             	sub    $0xc,%esp
f012d25e:	68 83 ca 13 f0       	push   $0xf013ca83
f012d263:	e8 a6 3a fd ff       	call   f0100d0e <cprintf>
f012d268:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d26b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d271:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d277:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d27e:	eb 21                	jmp    f012d2a1 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d280:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d286:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d289:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d28f:	01 c8                	add    %ecx,%eax
f012d291:	8a 00                	mov    (%eax),%al
f012d293:	0f be c0             	movsbl %al,%eax
f012d296:	01 d0                	add    %edx,%eax
f012d298:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d29e:	ff 45 dc             	incl   -0x24(%ebp)
f012d2a1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d2a7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d2aa:	7d d4                	jge    f012d280 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d2ac:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d2b2:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d2b8:	42                   	inc    %edx
f012d2b9:	01 d2                	add    %edx,%edx
f012d2bb:	39 d0                	cmp    %edx,%eax
f012d2bd:	74 17                	je     f012d2d6 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d2bf:	83 ec 04             	sub    $0x4,%esp
f012d2c2:	68 8c ca 13 f0       	push   $0xf013ca8c
f012d2c7:	68 f9 0f 00 00       	push   $0xff9
f012d2cc:	68 3a b5 13 f0       	push   $0xf013b53a
f012d2d1:	e8 2f 2f fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d2d6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d2dc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d2e2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d2e9:	eb 25                	jmp    f012d310 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d2eb:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d2f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d2f4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d2fb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d301:	01 c8                	add    %ecx,%eax
f012d303:	8b 00                	mov    (%eax),%eax
f012d305:	01 d0                	add    %edx,%eax
f012d307:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d30d:	ff 45 dc             	incl   -0x24(%ebp)
f012d310:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d316:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d319:	7d d0                	jge    f012d2eb <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d31b:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d321:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d327:	42                   	inc    %edx
f012d328:	c1 e2 02             	shl    $0x2,%edx
f012d32b:	39 d0                	cmp    %edx,%eax
f012d32d:	74 17                	je     f012d346 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d32f:	83 ec 04             	sub    $0x4,%esp
f012d332:	68 8c ca 13 f0       	push   $0xf013ca8c
f012d337:	68 03 10 00 00       	push   $0x1003
f012d33c:	68 3a b5 13 f0       	push   $0xf013b53a
f012d341:	e8 bf 2e fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d346:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d34c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d352:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d359:	eb 24                	jmp    f012d37f <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d35b:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d361:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d364:	01 c0                	add    %eax,%eax
f012d366:	89 c1                	mov    %eax,%ecx
f012d368:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d36e:	01 c8                	add    %ecx,%eax
f012d370:	66 8b 00             	mov    (%eax),%ax
f012d373:	98                   	cwtl   
f012d374:	01 d0                	add    %edx,%eax
f012d376:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d37c:	ff 45 dc             	incl   -0x24(%ebp)
f012d37f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d385:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d388:	7d d1                	jge    f012d35b <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d38a:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d390:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d396:	8d 48 01             	lea    0x1(%eax),%ecx
f012d399:	89 c8                	mov    %ecx,%eax
f012d39b:	c1 e0 02             	shl    $0x2,%eax
f012d39e:	01 c8                	add    %ecx,%eax
f012d3a0:	39 c2                	cmp    %eax,%edx
f012d3a2:	74 17                	je     f012d3bb <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d3a4:	83 ec 04             	sub    $0x4,%esp
f012d3a7:	68 8c ca 13 f0       	push   $0xf013ca8c
f012d3ac:	68 0d 10 00 00       	push   $0x100d
f012d3b1:	68 3a b5 13 f0       	push   $0xf013b53a
f012d3b6:	e8 4a 2e fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d3bb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d3c1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d3c7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d3ce:	eb 70                	jmp    f012d440 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d3d0:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d3d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d3d9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d3e0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3e6:	01 c8                	add    %ecx,%eax
f012d3e8:	8a 00                	mov    (%eax),%al
f012d3ea:	0f be c0             	movsbl %al,%eax
f012d3ed:	01 d0                	add    %edx,%eax
f012d3ef:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d3f5:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d3fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d3fe:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d405:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d40b:	01 c8                	add    %ecx,%eax
f012d40d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d411:	98                   	cwtl   
f012d412:	01 d0                	add    %edx,%eax
f012d414:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d41a:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d420:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d423:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d42a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d430:	01 c8                	add    %ecx,%eax
f012d432:	8b 40 04             	mov    0x4(%eax),%eax
f012d435:	01 d0                	add    %edx,%eax
f012d437:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d43d:	ff 45 dc             	incl   -0x24(%ebp)
f012d440:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d446:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d449:	7d 85                	jge    f012d3d0 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d44b:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d451:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d457:	8d 50 01             	lea    0x1(%eax),%edx
f012d45a:	89 d0                	mov    %edx,%eax
f012d45c:	01 c0                	add    %eax,%eax
f012d45e:	01 d0                	add    %edx,%eax
f012d460:	01 c0                	add    %eax,%eax
f012d462:	01 d0                	add    %edx,%eax
f012d464:	39 c1                	cmp    %eax,%ecx
f012d466:	75 3a                	jne    f012d4a2 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d468:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d46e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d474:	8d 50 01             	lea    0x1(%eax),%edx
f012d477:	89 d0                	mov    %edx,%eax
f012d479:	01 c0                	add    %eax,%eax
f012d47b:	01 d0                	add    %edx,%eax
f012d47d:	01 c0                	add    %eax,%eax
f012d47f:	01 d0                	add    %edx,%eax
f012d481:	39 c1                	cmp    %eax,%ecx
f012d483:	75 1d                	jne    f012d4a2 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d485:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012d48b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d491:	8d 50 01             	lea    0x1(%eax),%edx
f012d494:	89 d0                	mov    %edx,%eax
f012d496:	01 c0                	add    %eax,%eax
f012d498:	01 d0                	add    %edx,%eax
f012d49a:	01 c0                	add    %eax,%eax
f012d49c:	01 d0                	add    %edx,%eax
f012d49e:	39 c1                	cmp    %eax,%ecx
f012d4a0:	74 17                	je     f012d4b9 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012d4a2:	83 ec 04             	sub    $0x4,%esp
f012d4a5:	68 8c ca 13 f0       	push   $0xf013ca8c
f012d4aa:	68 1b 10 00 00       	push   $0x101b
f012d4af:	68 3a b5 13 f0       	push   $0xf013b53a
f012d4b4:	e8 4c 2d fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d4b9:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012d4c0:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d4c3:	e8 c9 f8 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d4c8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d4cb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d4d1:	83 ec 08             	sub    $0x8,%esp
f012d4d4:	68 00 3c 00 00       	push   $0x3c00
f012d4d9:	50                   	push   %eax
f012d4da:	e8 5b a8 fd ff       	call   f0107d3a <krealloc>
f012d4df:	83 c4 10             	add    $0x10,%esp
f012d4e2:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d4e8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d4ee:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d4f3:	77 17                	ja     f012d50c <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d4f5:	83 ec 04             	sub    $0x4,%esp
f012d4f8:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012d4fd:	68 27 10 00 00       	push   $0x1027
f012d502:	68 3a b5 13 f0       	push   $0xf013b53a
f012d507:	e8 f9 2c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d50c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d512:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d518:	74 17                	je     f012d531 <test_krealloc+0x1593>
			panic(
f012d51a:	83 ec 04             	sub    $0x4,%esp
f012d51d:	68 c4 ca 13 f0       	push   $0xf013cac4
f012d522:	68 2a 10 00 00       	push   $0x102a
f012d527:	68 3a b5 13 f0       	push   $0xf013b53a
f012d52c:	e8 d4 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d531:	e8 5b f8 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d536:	89 c2                	mov    %eax,%edx
f012d538:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d53b:	39 c2                	cmp    %eax,%edx
f012d53d:	74 17                	je     f012d556 <test_krealloc+0x15b8>
			panic(
f012d53f:	83 ec 04             	sub    $0x4,%esp
f012d542:	68 30 cb 13 f0       	push   $0xf013cb30
f012d547:	68 2d 10 00 00       	push   $0x102d
f012d54c:	68 3a b5 13 f0       	push   $0xf013b53a
f012d551:	e8 af 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d556:	e8 36 f8 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d55b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d55e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d564:	83 ec 08             	sub    $0x8,%esp
f012d567:	68 00 fc 0f 00       	push   $0xffc00
f012d56c:	50                   	push   %eax
f012d56d:	e8 c8 a7 fd ff       	call   f0107d3a <krealloc>
f012d572:	83 c4 10             	add    $0x10,%esp
f012d575:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d57b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d581:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d586:	77 17                	ja     f012d59f <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d588:	83 ec 04             	sub    $0x4,%esp
f012d58b:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012d590:	68 33 10 00 00       	push   $0x1033
f012d595:	68 3a b5 13 f0       	push   $0xf013b53a
f012d59a:	e8 66 2c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d59f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d5a5:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d5ab:	74 17                	je     f012d5c4 <test_krealloc+0x1626>
			panic(
f012d5ad:	83 ec 04             	sub    $0x4,%esp
f012d5b0:	68 c4 ca 13 f0       	push   $0xf013cac4
f012d5b5:	68 36 10 00 00       	push   $0x1036
f012d5ba:	68 3a b5 13 f0       	push   $0xf013b53a
f012d5bf:	e8 41 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d5c4:	e8 c8 f7 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d5c9:	89 c2                	mov    %eax,%edx
f012d5cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d5ce:	39 c2                	cmp    %eax,%edx
f012d5d0:	74 17                	je     f012d5e9 <test_krealloc+0x164b>
			panic(
f012d5d2:	83 ec 04             	sub    $0x4,%esp
f012d5d5:	68 30 cb 13 f0       	push   $0xf013cb30
f012d5da:	68 39 10 00 00       	push   $0x1039
f012d5df:	68 3a b5 13 f0       	push   $0xf013b53a
f012d5e4:	e8 1c 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d5e9:	e8 a3 f7 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d5ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d5f1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d5f7:	83 ec 08             	sub    $0x8,%esp
f012d5fa:	68 00 fc 0f 00       	push   $0xffc00
f012d5ff:	50                   	push   %eax
f012d600:	e8 35 a7 fd ff       	call   f0107d3a <krealloc>
f012d605:	83 c4 10             	add    $0x10,%esp
f012d608:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d60e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d614:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d619:	77 17                	ja     f012d632 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d61b:	83 ec 04             	sub    $0x4,%esp
f012d61e:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012d623:	68 3f 10 00 00       	push   $0x103f
f012d628:	68 3a b5 13 f0       	push   $0xf013b53a
f012d62d:	e8 d3 2b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d632:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d638:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d63e:	74 17                	je     f012d657 <test_krealloc+0x16b9>
			panic(
f012d640:	83 ec 04             	sub    $0x4,%esp
f012d643:	68 c4 ca 13 f0       	push   $0xf013cac4
f012d648:	68 42 10 00 00       	push   $0x1042
f012d64d:	68 3a b5 13 f0       	push   $0xf013b53a
f012d652:	e8 ae 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d657:	e8 35 f7 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d65c:	89 c2                	mov    %eax,%edx
f012d65e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d661:	39 c2                	cmp    %eax,%edx
f012d663:	74 17                	je     f012d67c <test_krealloc+0x16de>
			panic(
f012d665:	83 ec 04             	sub    $0x4,%esp
f012d668:	68 30 cb 13 f0       	push   $0xf013cb30
f012d66d:	68 45 10 00 00       	push   $0x1045
f012d672:	68 3a b5 13 f0       	push   $0xf013b53a
f012d677:	e8 89 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d67c:	e8 10 f7 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d681:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d684:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d68a:	83 ec 08             	sub    $0x8,%esp
f012d68d:	68 00 fc 0f 00       	push   $0xffc00
f012d692:	50                   	push   %eax
f012d693:	e8 a2 a6 fd ff       	call   f0107d3a <krealloc>
f012d698:	83 c4 10             	add    $0x10,%esp
f012d69b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d6a1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012d6a7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d6ac:	77 17                	ja     f012d6c5 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d6ae:	83 ec 04             	sub    $0x4,%esp
f012d6b1:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012d6b6:	68 4d 10 00 00       	push   $0x104d
f012d6bb:	68 3a b5 13 f0       	push   $0xf013b53a
f012d6c0:	e8 40 2b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012d6c5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d6cb:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012d6d1:	74 17                	je     f012d6ea <test_krealloc+0x174c>
			panic(
f012d6d3:	83 ec 04             	sub    $0x4,%esp
f012d6d6:	68 74 cb 13 f0       	push   $0xf013cb74
f012d6db:	68 50 10 00 00       	push   $0x1050
f012d6e0:	68 3a b5 13 f0       	push   $0xf013b53a
f012d6e5:	e8 1b 2b fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d6ea:	e8 a2 f6 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d6ef:	89 c2                	mov    %eax,%edx
f012d6f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d6f4:	39 c2                	cmp    %eax,%edx
f012d6f6:	74 17                	je     f012d70f <test_krealloc+0x1771>
			panic(
f012d6f8:	83 ec 04             	sub    $0x4,%esp
f012d6fb:	68 30 cb 13 f0       	push   $0xf013cb30
f012d700:	68 53 10 00 00       	push   $0x1053
f012d705:	68 3a b5 13 f0       	push   $0xf013b53a
f012d70a:	e8 f6 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d70f:	83 ec 0c             	sub    $0xc,%esp
f012d712:	68 53 bd 13 f0       	push   $0xf013bd53
f012d717:	e8 f2 35 fd ff       	call   f0100d0e <cprintf>
f012d71c:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d71f:	e8 6d f6 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d724:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012d727:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d72d:	83 ec 08             	sub    $0x8,%esp
f012d730:	68 00 18 10 00       	push   $0x101800
f012d735:	50                   	push   %eax
f012d736:	e8 ff a5 fd ff       	call   f0107d3a <krealloc>
f012d73b:	83 c4 10             	add    $0x10,%esp
f012d73e:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d741:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d744:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d749:	77 17                	ja     f012d762 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d74b:	83 ec 04             	sub    $0x4,%esp
f012d74e:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012d753:	68 5c 10 00 00       	push   $0x105c
f012d758:	68 3a b5 13 f0       	push   $0xf013b53a
f012d75d:	e8 a3 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012d762:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d768:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d76b:	74 17                	je     f012d784 <test_krealloc+0x17e6>
			panic(
f012d76d:	83 ec 04             	sub    $0x4,%esp
f012d770:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012d775:	68 5f 10 00 00       	push   $0x105f
f012d77a:	68 3a b5 13 f0       	push   $0xf013b53a
f012d77f:	e8 81 2a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d784:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d787:	e8 05 f6 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d78c:	29 c3                	sub    %eax,%ebx
f012d78e:	89 d8                	mov    %ebx,%eax
f012d790:	83 f8 02             	cmp    $0x2,%eax
f012d793:	74 17                	je     f012d7ac <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d795:	83 ec 04             	sub    $0x4,%esp
f012d798:	68 50 cc 13 f0       	push   $0xf013cc50
f012d79d:	68 61 10 00 00       	push   $0x1061
f012d7a2:	68 3a b5 13 f0       	push   $0xf013b53a
f012d7a7:	e8 59 2a fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d7ac:	e8 e0 f5 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d7b1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d7b4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d7ba:	83 ec 08             	sub    $0x8,%esp
f012d7bd:	68 00 fc 3f 00       	push   $0x3ffc00
f012d7c2:	50                   	push   %eax
f012d7c3:	e8 72 a5 fd ff       	call   f0107d3a <krealloc>
f012d7c8:	83 c4 10             	add    $0x10,%esp
f012d7cb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d7ce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d7d1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d7d6:	77 17                	ja     f012d7ef <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d7d8:	83 ec 04             	sub    $0x4,%esp
f012d7db:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012d7e0:	68 67 10 00 00       	push   $0x1067
f012d7e5:	68 3a b5 13 f0       	push   $0xf013b53a
f012d7ea:	e8 16 2a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012d7ef:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d7f5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d7f8:	74 17                	je     f012d811 <test_krealloc+0x1873>
			panic(
f012d7fa:	83 ec 04             	sub    $0x4,%esp
f012d7fd:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012d802:	68 6a 10 00 00       	push   $0x106a
f012d807:	68 3a b5 13 f0       	push   $0xf013b53a
f012d80c:	e8 f4 29 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d811:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d814:	e8 78 f5 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d819:	29 c3                	sub    %eax,%ebx
f012d81b:	89 d8                	mov    %ebx,%eax
f012d81d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d822:	74 17                	je     f012d83b <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012d824:	83 ec 04             	sub    $0x4,%esp
f012d827:	68 50 cc 13 f0       	push   $0xf013cc50
f012d82c:	68 6d 10 00 00       	push   $0x106d
f012d831:	68 3a b5 13 f0       	push   $0xf013b53a
f012d836:	e8 ca 29 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012d83b:	83 ec 0c             	sub    $0xc,%esp
f012d83e:	68 98 bd 13 f0       	push   $0xf013bd98
f012d843:	e8 c6 34 fd ff       	call   f0100d0e <cprintf>
f012d848:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d84b:	e8 41 f5 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d850:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d853:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d859:	83 ec 08             	sub    $0x8,%esp
f012d85c:	68 00 fc 9f 00       	push   $0x9ffc00
f012d861:	50                   	push   %eax
f012d862:	e8 d3 a4 fd ff       	call   f0107d3a <krealloc>
f012d867:	83 c4 10             	add    $0x10,%esp
f012d86a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d86d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d870:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d875:	77 17                	ja     f012d88e <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d877:	83 ec 04             	sub    $0x4,%esp
f012d87a:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012d87f:	68 78 10 00 00       	push   $0x1078
f012d884:	68 3a b5 13 f0       	push   $0xf013b53a
f012d889:	e8 77 29 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012d88e:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012d895:	10 00 00 
f012d898:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012d89e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d8a3:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d8a9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d8af:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8b4:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d8ba:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d8c0:	29 d0                	sub    %edx,%eax
f012d8c2:	89 c1                	mov    %eax,%ecx
f012d8c4:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d8cb:	10 00 00 
f012d8ce:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012d8d3:	0f b6 d0             	movzbl %al,%edx
f012d8d6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d8dc:	01 d0                	add    %edx,%eax
f012d8de:	48                   	dec    %eax
f012d8df:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d8e5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d8eb:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8f0:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012d8f6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d8fc:	29 d0                	sub    %edx,%eax
f012d8fe:	01 c1                	add    %eax,%ecx
f012d900:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012d907:	10 00 00 
f012d90a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012d90f:	0f b6 c0             	movzbl %al,%eax
f012d912:	c1 e0 04             	shl    $0x4,%eax
f012d915:	89 c2                	mov    %eax,%edx
f012d917:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012d91d:	01 d0                	add    %edx,%eax
f012d91f:	48                   	dec    %eax
f012d920:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012d926:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d92c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d931:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012d937:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d93d:	29 d0                	sub    %edx,%eax
f012d93f:	01 c8                	add    %ecx,%eax
f012d941:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012d947:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d94a:	39 c2                	cmp    %eax,%edx
f012d94c:	74 18                	je     f012d966 <test_krealloc+0x19c8>
			panic(
f012d94e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d951:	50                   	push   %eax
f012d952:	68 84 cc 13 f0       	push   $0xf013cc84
f012d957:	68 7c 10 00 00       	push   $0x107c
f012d95c:	68 3a b5 13 f0       	push   $0xf013b53a
f012d961:	e8 9f 28 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d966:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d96c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d96f:	75 17                	jne    f012d988 <test_krealloc+0x19ea>
			panic(
f012d971:	83 ec 04             	sub    $0x4,%esp
f012d974:	68 c8 cc 13 f0       	push   $0xf013ccc8
f012d979:	68 7f 10 00 00       	push   $0x107f
f012d97e:	68 3a b5 13 f0       	push   $0xf013b53a
f012d983:	e8 7d 28 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d988:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d98b:	e8 01 f4 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d990:	29 c3                	sub    %eax,%ebx
f012d992:	89 d8                	mov    %ebx,%eax
f012d994:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d999:	74 17                	je     f012d9b2 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012d99b:	83 ec 04             	sub    $0x4,%esp
f012d99e:	68 50 cc 13 f0       	push   $0xf013cc50
f012d9a3:	68 82 10 00 00       	push   $0x1082
f012d9a8:	68 3a b5 13 f0       	push   $0xf013b53a
f012d9ad:	e8 53 28 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012d9b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d9b5:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012d9bb:	e8 d1 f3 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012d9c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012d9c3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d9c9:	83 ec 08             	sub    $0x8,%esp
f012d9cc:	68 00 fc 5f 00       	push   $0x5ffc00
f012d9d1:	50                   	push   %eax
f012d9d2:	e8 63 a3 fd ff       	call   f0107d3a <krealloc>
f012d9d7:	83 c4 10             	add    $0x10,%esp
f012d9da:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d9dd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d9e0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d9e5:	77 17                	ja     f012d9fe <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d9e7:	83 ec 04             	sub    $0x4,%esp
f012d9ea:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012d9ef:	68 8b 10 00 00       	push   $0x108b
f012d9f4:	68 3a b5 13 f0       	push   $0xf013b53a
f012d9f9:	e8 07 28 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012d9fe:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012da04:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012da07:	74 17                	je     f012da20 <test_krealloc+0x1a82>
			panic(
f012da09:	83 ec 04             	sub    $0x4,%esp
f012da0c:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012da11:	68 8e 10 00 00       	push   $0x108e
f012da16:	68 3a b5 13 f0       	push   $0xf013b53a
f012da1b:	e8 e5 27 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012da20:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012da23:	e8 69 f3 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012da28:	29 c3                	sub    %eax,%ebx
f012da2a:	89 d8                	mov    %ebx,%eax
f012da2c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012da31:	74 17                	je     f012da4a <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012da33:	83 ec 04             	sub    $0x4,%esp
f012da36:	68 50 cc 13 f0       	push   $0xf013cc50
f012da3b:	68 91 10 00 00       	push   $0x1091
f012da40:	68 3a b5 13 f0       	push   $0xf013b53a
f012da45:	e8 bb 27 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012da4a:	e8 42 f3 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012da4f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012da52:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012da58:	83 ec 08             	sub    $0x8,%esp
f012da5b:	68 00 fc 3f 01       	push   $0x13ffc00
f012da60:	50                   	push   %eax
f012da61:	e8 d4 a2 fd ff       	call   f0107d3a <krealloc>
f012da66:	83 c4 10             	add    $0x10,%esp
f012da69:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012da6c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012da6f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012da74:	77 17                	ja     f012da8d <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da76:	83 ec 04             	sub    $0x4,%esp
f012da79:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012da7e:	68 98 10 00 00       	push   $0x1098
f012da83:	68 3a b5 13 f0       	push   $0xf013b53a
f012da88:	e8 78 27 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012da8d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012da93:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012da96:	75 17                	jne    f012daaf <test_krealloc+0x1b11>
			panic(
f012da98:	83 ec 04             	sub    $0x4,%esp
f012da9b:	68 c8 cc 13 f0       	push   $0xf013ccc8
f012daa0:	68 9b 10 00 00       	push   $0x109b
f012daa5:	68 3a b5 13 f0       	push   $0xf013b53a
f012daaa:	e8 56 27 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012daaf:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012dab6:	10 00 00 
f012dab9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012dabf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dac4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012daca:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dad0:	ba 00 00 00 00       	mov    $0x0,%edx
f012dad5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012dadb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012dae1:	29 d0                	sub    %edx,%eax
f012dae3:	89 c1                	mov    %eax,%ecx
f012dae5:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012daec:	10 00 00 
f012daef:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012daf4:	0f b6 d0             	movzbl %al,%edx
f012daf7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012dafd:	01 d0                	add    %edx,%eax
f012daff:	48                   	dec    %eax
f012db00:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012db06:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012db0c:	ba 00 00 00 00       	mov    $0x0,%edx
f012db11:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012db17:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012db1d:	29 d0                	sub    %edx,%eax
f012db1f:	01 c1                	add    %eax,%ecx
f012db21:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012db28:	10 00 00 
f012db2b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012db30:	0f b6 c0             	movzbl %al,%eax
f012db33:	c1 e0 04             	shl    $0x4,%eax
f012db36:	89 c2                	mov    %eax,%edx
f012db38:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012db3e:	01 d0                	add    %edx,%eax
f012db40:	48                   	dec    %eax
f012db41:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012db47:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012db4d:	ba 00 00 00 00       	mov    $0x0,%edx
f012db52:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012db58:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012db5e:	29 d0                	sub    %edx,%eax
f012db60:	01 c8                	add    %ecx,%eax
f012db62:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012db68:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db6b:	39 c2                	cmp    %eax,%edx
f012db6d:	74 17                	je     f012db86 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012db6f:	83 ec 04             	sub    $0x4,%esp
f012db72:	68 4c cd 13 f0       	push   $0xf013cd4c
f012db77:	68 9d 10 00 00       	push   $0x109d
f012db7c:	68 3a b5 13 f0       	push   $0xf013b53a
f012db81:	e8 7f 26 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012db86:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012db89:	e8 03 f2 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012db8e:	29 c3                	sub    %eax,%ebx
f012db90:	89 d8                	mov    %ebx,%eax
f012db92:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012db97:	74 17                	je     f012dbb0 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012db99:	83 ec 04             	sub    $0x4,%esp
f012db9c:	68 50 cc 13 f0       	push   $0xf013cc50
f012dba1:	68 a0 10 00 00       	push   $0x10a0
f012dba6:	68 3a b5 13 f0       	push   $0xf013b53a
f012dbab:	e8 55 26 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012dbb0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dbb3:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012dbb9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dbbf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012dbc5:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012dbcc:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dbcf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dbd6:	eb 21                	jmp    f012dbf9 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012dbd8:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dbde:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012dbe1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012dbe7:	01 c8                	add    %ecx,%eax
f012dbe9:	8a 00                	mov    (%eax),%al
f012dbeb:	0f be c0             	movsbl %al,%eax
f012dbee:	01 d0                	add    %edx,%eax
f012dbf0:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dbf6:	ff 45 d8             	incl   -0x28(%ebp)
f012dbf9:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dbff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dc02:	7d d4                	jge    f012dbd8 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012dc04:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012dc0a:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012dc10:	42                   	inc    %edx
f012dc11:	01 d2                	add    %edx,%edx
f012dc13:	39 d0                	cmp    %edx,%eax
f012dc15:	74 17                	je     f012dc2e <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012dc17:	83 ec 04             	sub    $0x4,%esp
f012dc1a:	68 80 cd 13 f0       	push   $0xf013cd80
f012dc1f:	68 ae 10 00 00       	push   $0x10ae
f012dc24:	68 3a b5 13 f0       	push   $0xf013b53a
f012dc29:	e8 d7 25 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012dc2e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dc34:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012dc3a:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012dc41:	00 00 00 
		sums[1] = 0;
f012dc44:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012dc4b:	00 00 00 
		sums[2] = 0;
f012dc4e:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012dc55:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012dc58:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dc5f:	eb 70                	jmp    f012dcd1 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012dc61:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dc67:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dc6a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012dc71:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc77:	01 c8                	add    %ecx,%eax
f012dc79:	8a 00                	mov    (%eax),%al
f012dc7b:	0f be c0             	movsbl %al,%eax
f012dc7e:	01 d0                	add    %edx,%eax
f012dc80:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012dc86:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012dc8c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dc8f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012dc96:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc9c:	01 c8                	add    %ecx,%eax
f012dc9e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dca2:	98                   	cwtl   
f012dca3:	01 d0                	add    %edx,%eax
f012dca5:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012dcab:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012dcb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dcb4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012dcbb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dcc1:	01 c8                	add    %ecx,%eax
f012dcc3:	8b 40 04             	mov    0x4(%eax),%eax
f012dcc6:	01 d0                	add    %edx,%eax
f012dcc8:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012dcce:	ff 45 d8             	incl   -0x28(%ebp)
f012dcd1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012dcd7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dcda:	7d 85                	jge    f012dc61 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012dcdc:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012dce2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012dce8:	8d 50 01             	lea    0x1(%eax),%edx
f012dceb:	89 d0                	mov    %edx,%eax
f012dced:	01 c0                	add    %eax,%eax
f012dcef:	01 d0                	add    %edx,%eax
f012dcf1:	01 c0                	add    %eax,%eax
f012dcf3:	01 d0                	add    %edx,%eax
f012dcf5:	39 c1                	cmp    %eax,%ecx
f012dcf7:	75 3a                	jne    f012dd33 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012dcf9:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012dcff:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012dd05:	8d 50 01             	lea    0x1(%eax),%edx
f012dd08:	89 d0                	mov    %edx,%eax
f012dd0a:	01 c0                	add    %eax,%eax
f012dd0c:	01 d0                	add    %edx,%eax
f012dd0e:	01 c0                	add    %eax,%eax
f012dd10:	01 d0                	add    %edx,%eax
f012dd12:	39 c1                	cmp    %eax,%ecx
f012dd14:	75 1d                	jne    f012dd33 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012dd16:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012dd1c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012dd22:	8d 50 01             	lea    0x1(%eax),%edx
f012dd25:	89 d0                	mov    %edx,%eax
f012dd27:	01 c0                	add    %eax,%eax
f012dd29:	01 d0                	add    %edx,%eax
f012dd2b:	01 c0                	add    %eax,%eax
f012dd2d:	01 d0                	add    %edx,%eax
f012dd2f:	39 c1                	cmp    %eax,%ecx
f012dd31:	74 17                	je     f012dd4a <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012dd33:	83 ec 04             	sub    $0x4,%esp
f012dd36:	68 80 cd 13 f0       	push   $0xf013cd80
f012dd3b:	68 c0 10 00 00       	push   $0x10c0
f012dd40:	68 3a b5 13 f0       	push   $0xf013b53a
f012dd45:	e8 bb 24 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012dd4a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dd50:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012dd56:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012dd5d:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012dd60:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dd67:	eb 24                	jmp    f012dd8d <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012dd69:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dd6f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012dd72:	01 c0                	add    %eax,%eax
f012dd74:	89 c1                	mov    %eax,%ecx
f012dd76:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dd7c:	01 c8                	add    %ecx,%eax
f012dd7e:	66 8b 00             	mov    (%eax),%ax
f012dd81:	98                   	cwtl   
f012dd82:	01 d0                	add    %edx,%eax
f012dd84:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012dd8a:	ff 45 d8             	incl   -0x28(%ebp)
f012dd8d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012dd93:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dd96:	7d d1                	jge    f012dd69 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012dd98:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012dd9e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012dda4:	8d 48 01             	lea    0x1(%eax),%ecx
f012dda7:	89 c8                	mov    %ecx,%eax
f012dda9:	c1 e0 02             	shl    $0x2,%eax
f012ddac:	01 c8                	add    %ecx,%eax
f012ddae:	39 c2                	cmp    %eax,%edx
f012ddb0:	74 17                	je     f012ddc9 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012ddb2:	83 ec 04             	sub    $0x4,%esp
f012ddb5:	68 80 cd 13 f0       	push   $0xf013cd80
f012ddba:	68 ca 10 00 00       	push   $0x10ca
f012ddbf:	68 3a b5 13 f0       	push   $0xf013b53a
f012ddc4:	e8 3c 24 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012ddc9:	e8 c3 ef fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012ddce:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ddd1:	e8 f2 5f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ddd6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012dddc:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dde2:	83 ec 08             	sub    $0x8,%esp
f012dde5:	6a 00                	push   $0x0
f012dde7:	50                   	push   %eax
f012dde8:	e8 4d 9f fd ff       	call   f0107d3a <krealloc>
f012dded:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ddf0:	e8 d3 5f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012ddf5:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ddfb:	74 17                	je     f012de14 <test_krealloc+0x1e76>
			panic(
f012ddfd:	83 ec 04             	sub    $0x4,%esp
f012de00:	68 54 b5 13 f0       	push   $0xf013b554
f012de05:	68 d2 10 00 00       	push   $0x10d2
f012de0a:	68 3a b5 13 f0       	push   $0xf013b53a
f012de0f:	e8 f1 23 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012de14:	e8 78 ef fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012de19:	89 c2                	mov    %eax,%edx
f012de1b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012de1e:	29 c2                	sub    %eax,%edx
f012de20:	89 d0                	mov    %edx,%eax
f012de22:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012de27:	74 17                	je     f012de40 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012de29:	83 ec 04             	sub    $0x4,%esp
f012de2c:	68 10 ca 13 f0       	push   $0xf013ca10
f012de31:	68 d4 10 00 00       	push   $0x10d4
f012de36:	68 3a b5 13 f0       	push   $0xf013b53a
f012de3b:	e8 c5 23 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012de40:	e8 4c ef fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012de45:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012de48:	e8 7b 5f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012de4d:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012de53:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012de59:	83 ec 0c             	sub    $0xc,%esp
f012de5c:	50                   	push   %eax
f012de5d:	e8 e3 9c fd ff       	call   f0107b45 <kfree>
f012de62:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012de65:	e8 5e 5f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012de6a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012de70:	74 17                	je     f012de89 <test_krealloc+0x1eeb>
			panic(
f012de72:	83 ec 04             	sub    $0x4,%esp
f012de75:	68 54 b5 13 f0       	push   $0xf013b554
f012de7a:	68 dc 10 00 00       	push   $0x10dc
f012de7f:	68 3a b5 13 f0       	push   $0xf013b53a
f012de84:	e8 7c 23 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012de89:	e8 03 ef fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012de8e:	89 c2                	mov    %eax,%edx
f012de90:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012de93:	29 c2                	sub    %eax,%edx
f012de95:	89 d0                	mov    %edx,%eax
f012de97:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012de9c:	74 17                	je     f012deb5 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012de9e:	83 ec 04             	sub    $0x4,%esp
f012dea1:	68 10 ca 13 f0       	push   $0xf013ca10
f012dea6:	68 de 10 00 00       	push   $0x10de
f012deab:	68 3a b5 13 f0       	push   $0xf013b53a
f012deb0:	e8 50 23 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012deb5:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012debc:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012dec3:	eb 48                	jmp    f012df0d <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012dec5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012dec8:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012decd:	83 ec 04             	sub    $0x4,%esp
f012ded0:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012ded6:	51                   	push   %ecx
f012ded7:	52                   	push   %edx
f012ded8:	50                   	push   %eax
f012ded9:	e8 d3 8b fd ff       	call   f0106ab1 <get_page_table>
f012dede:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012dee1:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012dee7:	85 c0                	test   %eax,%eax
f012dee9:	75 17                	jne    f012df02 <test_krealloc+0x1f64>
					panic(
f012deeb:	83 ec 04             	sub    $0x4,%esp
f012deee:	68 3c be 13 f0       	push   $0xf013be3c
f012def3:	68 eb 10 00 00       	push   $0x10eb
f012def8:	68 3a b5 13 f0       	push   $0xf013b53a
f012defd:	e8 03 23 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012df02:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012df09:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012df0d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012df11:	78 b2                	js     f012dec5 <test_krealloc+0x1f27>
f012df13:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012df17:	7f 09                	jg     f012df22 <test_krealloc+0x1f84>
f012df19:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012df20:	76 a3                	jbe    f012dec5 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012df22:	83 ec 0c             	sub    $0xc,%esp
f012df25:	68 1e b7 13 f0       	push   $0xf013b71e
f012df2a:	e8 df 2d fd ff       	call   f0100d0e <cprintf>
f012df2f:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012df32:	83 ec 0c             	sub    $0xc,%esp
f012df35:	68 ac cd 13 f0       	push   $0xf013cdac
f012df3a:	e8 cf 2d fd ff       	call   f0100d0e <cprintf>
f012df3f:	83 c4 10             	add    $0x10,%esp
	return 0;
f012df42:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012df47:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012df4a:	5b                   	pop    %ebx
f012df4b:	5f                   	pop    %edi
f012df4c:	5d                   	pop    %ebp
f012df4d:	c3                   	ret    

f012df4e <test_krealloc_BF>:


int test_krealloc_BF() {
f012df4e:	55                   	push   %ebp
f012df4f:	89 e5                	mov    %esp,%ebp
f012df51:	57                   	push   %edi
f012df52:	53                   	push   %ebx
f012df53:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012df59:	83 ec 0c             	sub    $0xc,%esp
f012df5c:	68 7c b4 13 f0       	push   $0xf013b47c
f012df61:	e8 a8 2d fd ff       	call   f0100d0e <cprintf>
f012df66:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012df69:	83 ec 0c             	sub    $0xc,%esp
f012df6c:	68 ac b4 13 f0       	push   $0xf013b4ac
f012df71:	e8 98 2d fd ff       	call   f0100d0e <cprintf>
f012df76:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012df79:	83 ec 0c             	sub    $0xc,%esp
f012df7c:	68 7c b4 13 f0       	push   $0xf013b47c
f012df81:	e8 88 2d fd ff       	call   f0100d0e <cprintf>
f012df86:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012df89:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012df8d:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012df91:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012df97:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012df9d:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012dfa4:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012dfab:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012dfb1:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dfb6:	b8 00 00 00 00       	mov    $0x0,%eax
f012dfbb:	89 d7                	mov    %edx,%edi
f012dfbd:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012dfbf:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012dfc6:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012dfcc:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dfd1:	b8 00 00 00 00       	mov    $0x0,%eax
f012dfd6:	89 d7                	mov    %edx,%edi
f012dfd8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012dfda:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012dfe0:	b9 14 00 00 00       	mov    $0x14,%ecx
f012dfe5:	b8 00 00 00 00       	mov    $0x0,%eax
f012dfea:	89 d7                	mov    %edx,%edi
f012dfec:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012dfee:	e8 9e ed fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012dff3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012dff6:	83 ec 08             	sub    $0x8,%esp
f012dff9:	68 00 fc 0f 00       	push   $0xffc00
f012dffe:	6a 00                	push   $0x0
f012e000:	e8 35 9d fd ff       	call   f0107d3a <krealloc>
f012e005:	83 c4 10             	add    $0x10,%esp
f012e008:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e00e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e014:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e019:	77 17                	ja     f012e032 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e01b:	83 ec 04             	sub    $0x4,%esp
f012e01e:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e023:	68 1a 11 00 00       	push   $0x111a
f012e028:	68 3a b5 13 f0       	push   $0xf013b53a
f012e02d:	e8 d3 21 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e032:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e038:	89 c1                	mov    %eax,%ecx
f012e03a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e041:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e044:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e049:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e04c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e04f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e054:	f7 75 b4             	divl   -0x4c(%ebp)
f012e057:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e05a:	29 d0                	sub    %edx,%eax
f012e05c:	89 c3                	mov    %eax,%ebx
f012e05e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e065:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e06a:	0f b6 d0             	movzbl %al,%edx
f012e06d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e070:	01 d0                	add    %edx,%eax
f012e072:	48                   	dec    %eax
f012e073:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e076:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e079:	ba 00 00 00 00       	mov    $0x0,%edx
f012e07e:	f7 75 ac             	divl   -0x54(%ebp)
f012e081:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e084:	29 d0                	sub    %edx,%eax
f012e086:	01 c3                	add    %eax,%ebx
f012e088:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e08f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e094:	0f b6 c0             	movzbl %al,%eax
f012e097:	c1 e0 04             	shl    $0x4,%eax
f012e09a:	89 c2                	mov    %eax,%edx
f012e09c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e09f:	01 d0                	add    %edx,%eax
f012e0a1:	48                   	dec    %eax
f012e0a2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e0a5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e0a8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0ad:	f7 75 a4             	divl   -0x5c(%ebp)
f012e0b0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e0b3:	29 d0                	sub    %edx,%eax
f012e0b5:	01 d8                	add    %ebx,%eax
f012e0b7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e0bc:	39 c1                	cmp    %eax,%ecx
f012e0be:	74 17                	je     f012e0d7 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e0c0:	83 ec 04             	sub    $0x4,%esp
f012e0c3:	68 1c c8 13 f0       	push   $0xf013c81c
f012e0c8:	68 1c 11 00 00       	push   $0x111c
f012e0cd:	68 3a b5 13 f0       	push   $0xf013b53a
f012e0d2:	e8 2e 21 fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e0d7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e0da:	e8 b2 ec fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e0df:	29 c3                	sub    %eax,%ebx
f012e0e1:	89 d8                	mov    %ebx,%eax
f012e0e3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e0e8:	74 17                	je     f012e101 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e0ea:	83 ec 04             	sub    $0x4,%esp
f012e0ed:	68 4e c8 13 f0       	push   $0xf013c84e
f012e0f2:	68 1f 11 00 00       	push   $0x111f
f012e0f7:	68 3a b5 13 f0       	push   $0xf013b53a
f012e0fc:	e8 04 21 fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e101:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e108:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e10b:	e8 81 ec fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e110:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e113:	83 ec 08             	sub    $0x8,%esp
f012e116:	68 00 fc 0f 00       	push   $0xffc00
f012e11b:	6a 00                	push   $0x0
f012e11d:	e8 18 9c fd ff       	call   f0107d3a <krealloc>
f012e122:	83 c4 10             	add    $0x10,%esp
f012e125:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e12b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e131:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e136:	77 17                	ja     f012e14f <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e138:	83 ec 04             	sub    $0x4,%esp
f012e13b:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e140:	68 27 11 00 00       	push   $0x1127
f012e145:	68 3a b5 13 f0       	push   $0xf013b53a
f012e14a:	e8 b6 20 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e14f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e155:	89 c1                	mov    %eax,%ecx
f012e157:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e15e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e161:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e166:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e169:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e16c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e171:	f7 75 9c             	divl   -0x64(%ebp)
f012e174:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e177:	29 d0                	sub    %edx,%eax
f012e179:	89 c3                	mov    %eax,%ebx
f012e17b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e182:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e187:	0f b6 d0             	movzbl %al,%edx
f012e18a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e18d:	01 d0                	add    %edx,%eax
f012e18f:	48                   	dec    %eax
f012e190:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e193:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e196:	ba 00 00 00 00       	mov    $0x0,%edx
f012e19b:	f7 75 94             	divl   -0x6c(%ebp)
f012e19e:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e1a1:	29 d0                	sub    %edx,%eax
f012e1a3:	01 c3                	add    %eax,%ebx
f012e1a5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e1ac:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e1b1:	0f b6 c0             	movzbl %al,%eax
f012e1b4:	c1 e0 04             	shl    $0x4,%eax
f012e1b7:	89 c2                	mov    %eax,%edx
f012e1b9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e1bc:	01 d0                	add    %edx,%eax
f012e1be:	48                   	dec    %eax
f012e1bf:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e1c2:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e1c5:	ba 00 00 00 00       	mov    $0x0,%edx
f012e1ca:	f7 75 8c             	divl   -0x74(%ebp)
f012e1cd:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e1d0:	29 d0                	sub    %edx,%eax
f012e1d2:	01 d8                	add    %ebx,%eax
f012e1d4:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e1d9:	39 c1                	cmp    %eax,%ecx
f012e1db:	74 17                	je     f012e1f4 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e1dd:	83 ec 04             	sub    $0x4,%esp
f012e1e0:	68 1c c8 13 f0       	push   $0xf013c81c
f012e1e5:	68 29 11 00 00       	push   $0x1129
f012e1ea:	68 3a b5 13 f0       	push   $0xf013b53a
f012e1ef:	e8 11 20 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e1f4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e1f7:	e8 95 eb fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e1fc:	29 c3                	sub    %eax,%ebx
f012e1fe:	89 d8                	mov    %ebx,%eax
f012e200:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e205:	74 17                	je     f012e21e <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e207:	83 ec 04             	sub    $0x4,%esp
f012e20a:	68 4e c8 13 f0       	push   $0xf013c84e
f012e20f:	68 2b 11 00 00       	push   $0x112b
f012e214:	68 3a b5 13 f0       	push   $0xf013b53a
f012e219:	e8 e7 1f fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e21e:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e225:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e228:	e8 64 eb fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e22d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e230:	83 ec 08             	sub    $0x8,%esp
f012e233:	68 00 fc 0f 00       	push   $0xffc00
f012e238:	6a 00                	push   $0x0
f012e23a:	e8 fb 9a fd ff       	call   f0107d3a <krealloc>
f012e23f:	83 c4 10             	add    $0x10,%esp
f012e242:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e248:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e24e:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e253:	77 17                	ja     f012e26c <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e255:	83 ec 04             	sub    $0x4,%esp
f012e258:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e25d:	68 33 11 00 00       	push   $0x1133
f012e262:	68 3a b5 13 f0       	push   $0xf013b53a
f012e267:	e8 99 1f fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e26c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e272:	89 c1                	mov    %eax,%ecx
f012e274:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e27b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e27e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e283:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e286:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e289:	ba 00 00 00 00       	mov    $0x0,%edx
f012e28e:	f7 75 84             	divl   -0x7c(%ebp)
f012e291:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e294:	29 d0                	sub    %edx,%eax
f012e296:	89 c3                	mov    %eax,%ebx
f012e298:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e29f:	10 00 00 
f012e2a2:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e2a7:	0f b6 d0             	movzbl %al,%edx
f012e2aa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e2b0:	01 d0                	add    %edx,%eax
f012e2b2:	48                   	dec    %eax
f012e2b3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e2b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e2bf:	ba 00 00 00 00       	mov    $0x0,%edx
f012e2c4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e2ca:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e2d0:	29 d0                	sub    %edx,%eax
f012e2d2:	01 c3                	add    %eax,%ebx
f012e2d4:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e2db:	10 00 00 
f012e2de:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e2e3:	0f b6 c0             	movzbl %al,%eax
f012e2e6:	c1 e0 04             	shl    $0x4,%eax
f012e2e9:	89 c2                	mov    %eax,%edx
f012e2eb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e2f1:	01 d0                	add    %edx,%eax
f012e2f3:	48                   	dec    %eax
f012e2f4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e2fa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e300:	ba 00 00 00 00       	mov    $0x0,%edx
f012e305:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e30b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e311:	29 d0                	sub    %edx,%eax
f012e313:	01 d8                	add    %ebx,%eax
f012e315:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e31a:	39 c1                	cmp    %eax,%ecx
f012e31c:	74 17                	je     f012e335 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e31e:	83 ec 04             	sub    $0x4,%esp
f012e321:	68 1c c8 13 f0       	push   $0xf013c81c
f012e326:	68 35 11 00 00       	push   $0x1135
f012e32b:	68 3a b5 13 f0       	push   $0xf013b53a
f012e330:	e8 d0 1e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e335:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e338:	e8 54 ea fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e33d:	29 c3                	sub    %eax,%ebx
f012e33f:	89 d8                	mov    %ebx,%eax
f012e341:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e346:	74 17                	je     f012e35f <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e348:	83 ec 04             	sub    $0x4,%esp
f012e34b:	68 4e c8 13 f0       	push   $0xf013c84e
f012e350:	68 37 11 00 00       	push   $0x1137
f012e355:	68 3a b5 13 f0       	push   $0xf013b53a
f012e35a:	e8 a6 1e fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e35f:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e366:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e369:	e8 23 ea fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e371:	83 ec 08             	sub    $0x8,%esp
f012e374:	68 00 fc 0f 00       	push   $0xffc00
f012e379:	6a 00                	push   $0x0
f012e37b:	e8 ba 99 fd ff       	call   f0107d3a <krealloc>
f012e380:	83 c4 10             	add    $0x10,%esp
f012e383:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e389:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e38f:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e394:	77 17                	ja     f012e3ad <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e396:	83 ec 04             	sub    $0x4,%esp
f012e399:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e39e:	68 3e 11 00 00       	push   $0x113e
f012e3a3:	68 3a b5 13 f0       	push   $0xf013b53a
f012e3a8:	e8 58 1e fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e3ad:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e3b3:	89 c1                	mov    %eax,%ecx
f012e3b5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e3bc:	10 00 00 
f012e3bf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e3c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e3ca:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e3d0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e3d6:	ba 00 00 00 00       	mov    $0x0,%edx
f012e3db:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e3e1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e3e7:	29 d0                	sub    %edx,%eax
f012e3e9:	89 c3                	mov    %eax,%ebx
f012e3eb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e3f2:	10 00 00 
f012e3f5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e3fa:	0f b6 d0             	movzbl %al,%edx
f012e3fd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e403:	01 d0                	add    %edx,%eax
f012e405:	48                   	dec    %eax
f012e406:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e40c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e412:	ba 00 00 00 00       	mov    $0x0,%edx
f012e417:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e41d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e423:	29 d0                	sub    %edx,%eax
f012e425:	01 c3                	add    %eax,%ebx
f012e427:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e42e:	10 00 00 
f012e431:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e436:	0f b6 c0             	movzbl %al,%eax
f012e439:	c1 e0 04             	shl    $0x4,%eax
f012e43c:	89 c2                	mov    %eax,%edx
f012e43e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e444:	01 d0                	add    %edx,%eax
f012e446:	48                   	dec    %eax
f012e447:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e44d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e453:	ba 00 00 00 00       	mov    $0x0,%edx
f012e458:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e45e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e464:	29 d0                	sub    %edx,%eax
f012e466:	01 d8                	add    %ebx,%eax
f012e468:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e46d:	39 c1                	cmp    %eax,%ecx
f012e46f:	74 17                	je     f012e488 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e471:	83 ec 04             	sub    $0x4,%esp
f012e474:	68 1c c8 13 f0       	push   $0xf013c81c
f012e479:	68 40 11 00 00       	push   $0x1140
f012e47e:	68 3a b5 13 f0       	push   $0xf013b53a
f012e483:	e8 7d 1d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e488:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e48b:	e8 01 e9 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e490:	29 c3                	sub    %eax,%ebx
f012e492:	89 d8                	mov    %ebx,%eax
f012e494:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e499:	74 17                	je     f012e4b2 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012e49b:	83 ec 04             	sub    $0x4,%esp
f012e49e:	68 4e c8 13 f0       	push   $0xf013c84e
f012e4a3:	68 42 11 00 00       	push   $0x1142
f012e4a8:	68 3a b5 13 f0       	push   $0xf013b53a
f012e4ad:	e8 53 1d fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e4b2:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012e4b9:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e4bc:	e8 d0 e8 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e4c1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012e4c4:	83 ec 08             	sub    $0x8,%esp
f012e4c7:	68 00 fc 1f 00       	push   $0x1ffc00
f012e4cc:	6a 00                	push   $0x0
f012e4ce:	e8 67 98 fd ff       	call   f0107d3a <krealloc>
f012e4d3:	83 c4 10             	add    $0x10,%esp
f012e4d6:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012e4dc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e4e2:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012e4e7:	77 17                	ja     f012e500 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e4e9:	83 ec 04             	sub    $0x4,%esp
f012e4ec:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e4f1:	68 49 11 00 00       	push   $0x1149
f012e4f6:	68 3a b5 13 f0       	push   $0xf013b53a
f012e4fb:	e8 05 1d fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012e500:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e506:	89 c1                	mov    %eax,%ecx
f012e508:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012e50f:	10 00 00 
f012e512:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012e518:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e51d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012e523:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e529:	ba 00 00 00 00       	mov    $0x0,%edx
f012e52e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012e534:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012e53a:	29 d0                	sub    %edx,%eax
f012e53c:	89 c3                	mov    %eax,%ebx
f012e53e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012e545:	10 00 00 
f012e548:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e54d:	0f b6 d0             	movzbl %al,%edx
f012e550:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012e556:	01 d0                	add    %edx,%eax
f012e558:	48                   	dec    %eax
f012e559:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012e55f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e565:	ba 00 00 00 00       	mov    $0x0,%edx
f012e56a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012e570:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012e576:	29 d0                	sub    %edx,%eax
f012e578:	01 c3                	add    %eax,%ebx
f012e57a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012e581:	10 00 00 
f012e584:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e589:	0f b6 c0             	movzbl %al,%eax
f012e58c:	c1 e0 04             	shl    $0x4,%eax
f012e58f:	89 c2                	mov    %eax,%edx
f012e591:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012e597:	01 d0                	add    %edx,%eax
f012e599:	48                   	dec    %eax
f012e59a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012e5a0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e5a6:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5ab:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012e5b1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012e5b7:	29 d0                	sub    %edx,%eax
f012e5b9:	01 d8                	add    %ebx,%eax
f012e5bb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012e5c0:	39 c1                	cmp    %eax,%ecx
f012e5c2:	74 17                	je     f012e5db <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012e5c4:	83 ec 04             	sub    $0x4,%esp
f012e5c7:	68 1c c8 13 f0       	push   $0xf013c81c
f012e5cc:	68 4b 11 00 00       	push   $0x114b
f012e5d1:	68 3a b5 13 f0       	push   $0xf013b53a
f012e5d6:	e8 2a 1c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e5db:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e5de:	e8 ae e7 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e5e3:	29 c3                	sub    %eax,%ebx
f012e5e5:	89 d8                	mov    %ebx,%eax
f012e5e7:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e5ec:	74 17                	je     f012e605 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012e5ee:	83 ec 04             	sub    $0x4,%esp
f012e5f1:	68 4e c8 13 f0       	push   $0xf013c84e
f012e5f6:	68 4d 11 00 00       	push   $0x114d
f012e5fb:	68 3a b5 13 f0       	push   $0xf013b53a
f012e600:	e8 00 1c fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e605:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012e60c:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012e60f:	e8 7d e7 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e614:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012e617:	83 ec 08             	sub    $0x8,%esp
f012e61a:	68 00 fc 1f 00       	push   $0x1ffc00
f012e61f:	6a 00                	push   $0x0
f012e621:	e8 14 97 fd ff       	call   f0107d3a <krealloc>
f012e626:	83 c4 10             	add    $0x10,%esp
f012e629:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012e62f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e635:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012e63a:	77 17                	ja     f012e653 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e63c:	83 ec 04             	sub    $0x4,%esp
f012e63f:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e644:	68 54 11 00 00       	push   $0x1154
f012e649:	68 3a b5 13 f0       	push   $0xf013b53a
f012e64e:	e8 b2 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012e653:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e659:	89 c1                	mov    %eax,%ecx
f012e65b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012e662:	10 00 00 
f012e665:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012e66b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e670:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012e676:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e67c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e681:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012e687:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012e68d:	29 d0                	sub    %edx,%eax
f012e68f:	89 c3                	mov    %eax,%ebx
f012e691:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012e698:	10 00 00 
f012e69b:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e6a0:	0f b6 d0             	movzbl %al,%edx
f012e6a3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012e6a9:	01 d0                	add    %edx,%eax
f012e6ab:	48                   	dec    %eax
f012e6ac:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012e6b2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e6b8:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6bd:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012e6c3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012e6c9:	29 d0                	sub    %edx,%eax
f012e6cb:	01 c3                	add    %eax,%ebx
f012e6cd:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012e6d4:	10 00 00 
f012e6d7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e6dc:	0f b6 c0             	movzbl %al,%eax
f012e6df:	c1 e0 04             	shl    $0x4,%eax
f012e6e2:	89 c2                	mov    %eax,%edx
f012e6e4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012e6ea:	01 d0                	add    %edx,%eax
f012e6ec:	48                   	dec    %eax
f012e6ed:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012e6f3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e6f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6fe:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012e704:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012e70a:	29 d0                	sub    %edx,%eax
f012e70c:	01 d8                	add    %ebx,%eax
f012e70e:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012e713:	39 c1                	cmp    %eax,%ecx
f012e715:	74 17                	je     f012e72e <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012e717:	83 ec 04             	sub    $0x4,%esp
f012e71a:	68 1c c8 13 f0       	push   $0xf013c81c
f012e71f:	68 56 11 00 00       	push   $0x1156
f012e724:	68 3a b5 13 f0       	push   $0xf013b53a
f012e729:	e8 d7 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012e72e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e731:	e8 5b e6 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e736:	29 c3                	sub    %eax,%ebx
f012e738:	89 d8                	mov    %ebx,%eax
f012e73a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e73f:	74 17                	je     f012e758 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012e741:	83 ec 04             	sub    $0x4,%esp
f012e744:	68 4e c8 13 f0       	push   $0xf013c84e
f012e749:	68 58 11 00 00       	push   $0x1158
f012e74e:	68 3a b5 13 f0       	push   $0xf013b53a
f012e753:	e8 ad 1a fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012e758:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012e75f:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e762:	e8 2a e6 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e767:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012e76a:	83 ec 08             	sub    $0x8,%esp
f012e76d:	68 00 fc 2f 00       	push   $0x2ffc00
f012e772:	6a 00                	push   $0x0
f012e774:	e8 c1 95 fd ff       	call   f0107d3a <krealloc>
f012e779:	83 c4 10             	add    $0x10,%esp
f012e77c:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012e782:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e788:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012e78d:	77 17                	ja     f012e7a6 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e78f:	83 ec 04             	sub    $0x4,%esp
f012e792:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e797:	68 5f 11 00 00       	push   $0x115f
f012e79c:	68 3a b5 13 f0       	push   $0xf013b53a
f012e7a1:	e8 5f 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012e7a6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e7ac:	89 c1                	mov    %eax,%ecx
f012e7ae:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012e7b5:	10 00 00 
f012e7b8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012e7be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e7c3:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012e7c9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e7cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7d4:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012e7da:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012e7e0:	29 d0                	sub    %edx,%eax
f012e7e2:	89 c3                	mov    %eax,%ebx
f012e7e4:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012e7eb:	10 00 00 
f012e7ee:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e7f3:	0f b6 d0             	movzbl %al,%edx
f012e7f6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012e7fc:	01 d0                	add    %edx,%eax
f012e7fe:	48                   	dec    %eax
f012e7ff:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012e805:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e80b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e810:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012e816:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012e81c:	29 d0                	sub    %edx,%eax
f012e81e:	01 c3                	add    %eax,%ebx
f012e820:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012e827:	10 00 00 
f012e82a:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e82f:	0f b6 c0             	movzbl %al,%eax
f012e832:	c1 e0 04             	shl    $0x4,%eax
f012e835:	89 c2                	mov    %eax,%edx
f012e837:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012e83d:	01 d0                	add    %edx,%eax
f012e83f:	48                   	dec    %eax
f012e840:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012e846:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e84c:	ba 00 00 00 00       	mov    $0x0,%edx
f012e851:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012e857:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012e85d:	29 d0                	sub    %edx,%eax
f012e85f:	01 d8                	add    %ebx,%eax
f012e861:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012e866:	39 c1                	cmp    %eax,%ecx
f012e868:	74 17                	je     f012e881 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012e86a:	83 ec 04             	sub    $0x4,%esp
f012e86d:	68 1c c8 13 f0       	push   $0xf013c81c
f012e872:	68 61 11 00 00       	push   $0x1161
f012e877:	68 3a b5 13 f0       	push   $0xf013b53a
f012e87c:	e8 84 19 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e881:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e884:	e8 08 e5 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e889:	29 c3                	sub    %eax,%ebx
f012e88b:	89 d8                	mov    %ebx,%eax
f012e88d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e892:	74 17                	je     f012e8ab <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012e894:	83 ec 04             	sub    $0x4,%esp
f012e897:	68 84 b9 13 f0       	push   $0xf013b984
f012e89c:	68 63 11 00 00       	push   $0x1163
f012e8a1:	68 3a b5 13 f0       	push   $0xf013b53a
f012e8a6:	e8 5a 19 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e8ab:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e8b2:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e8b5:	e8 d7 e4 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e8ba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e8bd:	83 ec 08             	sub    $0x8,%esp
f012e8c0:	68 00 fc 2f 00       	push   $0x2ffc00
f012e8c5:	6a 00                	push   $0x0
f012e8c7:	e8 6e 94 fd ff       	call   f0107d3a <krealloc>
f012e8cc:	83 c4 10             	add    $0x10,%esp
f012e8cf:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e8d5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e8db:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e8e0:	77 17                	ja     f012e8f9 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e8e2:	83 ec 04             	sub    $0x4,%esp
f012e8e5:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e8ea:	68 6a 11 00 00       	push   $0x116a
f012e8ef:	68 3a b5 13 f0       	push   $0xf013b53a
f012e8f4:	e8 0c 19 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012e8f9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e8ff:	89 c1                	mov    %eax,%ecx
f012e901:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012e908:	10 00 00 
f012e90b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012e911:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e916:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012e91c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e922:	ba 00 00 00 00       	mov    $0x0,%edx
f012e927:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012e92d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e933:	29 d0                	sub    %edx,%eax
f012e935:	89 c3                	mov    %eax,%ebx
f012e937:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012e93e:	10 00 00 
f012e941:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e946:	0f b6 d0             	movzbl %al,%edx
f012e949:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012e94f:	01 d0                	add    %edx,%eax
f012e951:	48                   	dec    %eax
f012e952:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012e958:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e95e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e963:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012e969:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e96f:	29 d0                	sub    %edx,%eax
f012e971:	01 c3                	add    %eax,%ebx
f012e973:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012e97a:	10 00 00 
f012e97d:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012e982:	0f b6 c0             	movzbl %al,%eax
f012e985:	c1 e0 04             	shl    $0x4,%eax
f012e988:	89 c2                	mov    %eax,%edx
f012e98a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012e990:	01 d0                	add    %edx,%eax
f012e992:	48                   	dec    %eax
f012e993:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012e999:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e99f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9a4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012e9aa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e9b0:	29 d0                	sub    %edx,%eax
f012e9b2:	01 d8                	add    %ebx,%eax
f012e9b4:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012e9b9:	39 c1                	cmp    %eax,%ecx
f012e9bb:	74 17                	je     f012e9d4 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012e9bd:	83 ec 04             	sub    $0x4,%esp
f012e9c0:	68 1c c8 13 f0       	push   $0xf013c81c
f012e9c5:	68 6c 11 00 00       	push   $0x116c
f012e9ca:	68 3a b5 13 f0       	push   $0xf013b53a
f012e9cf:	e8 31 18 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e9d4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e9d7:	e8 b5 e3 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012e9dc:	29 c3                	sub    %eax,%ebx
f012e9de:	89 d8                	mov    %ebx,%eax
f012e9e0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e9e5:	74 17                	je     f012e9fe <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012e9e7:	83 ec 04             	sub    $0x4,%esp
f012e9ea:	68 4e c8 13 f0       	push   $0xf013c84e
f012e9ef:	68 6e 11 00 00       	push   $0x116e
f012e9f4:	68 3a b5 13 f0       	push   $0xf013b53a
f012e9f9:	e8 07 18 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e9fe:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012ea05:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012ea08:	e8 84 e3 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012ea0d:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012ea10:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012ea17:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012ea1a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ea20:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012ea26:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ea2c:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012ea2f:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012ea31:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012ea37:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ea3d:	01 c2                	add    %eax,%edx
f012ea3f:	8a 45 ce             	mov    -0x32(%ebp),%al
f012ea42:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ea44:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ea4a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ea50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ea57:	eb 11                	jmp    f012ea6a <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012ea59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ea5c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ea62:	01 d0                	add    %edx,%eax
f012ea64:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ea67:	ff 45 f4             	incl   -0xc(%ebp)
f012ea6a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ea70:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ea73:	7d e4                	jge    f012ea59 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012ea75:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012ea7b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012ea81:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ea87:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012ea8d:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012ea93:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ea9a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eaa0:	01 d0                	add    %edx,%eax
f012eaa2:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012eaa8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eaae:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012eab4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012eabb:	eb 1b                	jmp    f012ead8 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012eabd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012eac0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012eac7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012eacd:	01 d0                	add    %edx,%eax
f012eacf:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ead5:	ff 45 f0             	incl   -0x10(%ebp)
f012ead8:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012eade:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012eae1:	7d da                	jge    f012eabd <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012eae3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eae9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012eaef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012eaf6:	eb 17                	jmp    f012eb0f <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012eaf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012eafb:	01 c0                	add    %eax,%eax
f012eafd:	89 c2                	mov    %eax,%edx
f012eaff:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eb05:	01 d0                	add    %edx,%eax
f012eb07:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012eb0c:	ff 45 ec             	incl   -0x14(%ebp)
f012eb0f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012eb15:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012eb18:	7d de                	jge    f012eaf8 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012eb1a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eb20:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012eb26:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eb2c:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012eb31:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012eb37:	01 c0                	add    %eax,%eax
f012eb39:	89 c2                	mov    %eax,%edx
f012eb3b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012eb41:	01 d0                	add    %edx,%eax
f012eb43:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012eb48:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eb4e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012eb54:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012eb5b:	eb 49                	jmp    f012eba6 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012eb5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012eb60:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eb67:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb6d:	01 d0                	add    %edx,%eax
f012eb6f:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012eb72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012eb75:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eb7c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb82:	01 d0                	add    %edx,%eax
f012eb84:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012eb8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012eb8d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eb94:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb9a:	01 d0                	add    %edx,%eax
f012eb9c:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012eba3:	ff 45 e8             	incl   -0x18(%ebp)
f012eba6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ebac:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ebaf:	7d ac                	jge    f012eb5d <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012ebb1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ebb7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012ebbd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebc3:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ebc6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebcc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012ebd2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebd8:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ebdf:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ebe5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ebec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ebf2:	01 d0                	add    %edx,%eax
f012ebf4:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ebf7:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ebfd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec04:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec0a:	01 d0                	add    %edx,%eax
f012ec0c:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ec12:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ec18:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ec1f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ec25:	01 d0                	add    %edx,%eax
f012ec27:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ec2e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ec34:	8a 00                	mov    (%eax),%al
f012ec36:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012ec39:	75 17                	jne    f012ec52 <test_krealloc_BF+0xd04>
f012ec3b:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012ec41:	89 c2                	mov    %eax,%edx
f012ec43:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ec49:	01 d0                	add    %edx,%eax
f012ec4b:	8a 00                	mov    (%eax),%al
f012ec4d:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ec50:	74 17                	je     f012ec69 <test_krealloc_BF+0xd1b>
			panic(
f012ec52:	83 ec 04             	sub    $0x4,%esp
f012ec55:	68 6c c8 13 f0       	push   $0xf013c86c
f012ec5a:	68 b1 11 00 00       	push   $0x11b1
f012ec5f:	68 3a b5 13 f0       	push   $0xf013b53a
f012ec64:	e8 9c 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012ec69:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ec6f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012ec75:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ec7b:	8a 00                	mov    (%eax),%al
f012ec7d:	3c 02                	cmp    $0x2,%al
f012ec7f:	75 16                	jne    f012ec97 <test_krealloc_BF+0xd49>
f012ec81:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ec87:	89 c2                	mov    %eax,%edx
f012ec89:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ec8f:	01 d0                	add    %edx,%eax
f012ec91:	8a 00                	mov    (%eax),%al
f012ec93:	3c 02                	cmp    $0x2,%al
f012ec95:	74 20                	je     f012ecb7 <test_krealloc_BF+0xd69>
			panic(
f012ec97:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ec9d:	8a 00                	mov    (%eax),%al
f012ec9f:	0f be c0             	movsbl %al,%eax
f012eca2:	50                   	push   %eax
f012eca3:	68 ac c8 13 f0       	push   $0xf013c8ac
f012eca8:	68 b7 11 00 00       	push   $0x11b7
f012ecad:	68 3a b5 13 f0       	push   $0xf013b53a
f012ecb2:	e8 4e 15 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ecb7:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012ecbd:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ecc3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ecc9:	8b 00                	mov    (%eax),%eax
f012eccb:	83 f8 03             	cmp    $0x3,%eax
f012ecce:	75 1c                	jne    f012ecec <test_krealloc_BF+0xd9e>
f012ecd0:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012ecd6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ecdd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ece3:	01 d0                	add    %edx,%eax
f012ece5:	8b 00                	mov    (%eax),%eax
f012ece7:	83 f8 03             	cmp    $0x3,%eax
f012ecea:	74 17                	je     f012ed03 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012ecec:	83 ec 04             	sub    $0x4,%esp
f012ecef:	68 f8 c8 13 f0       	push   $0xf013c8f8
f012ecf4:	68 bb 11 00 00       	push   $0x11bb
f012ecf9:	68 3a b5 13 f0       	push   $0xf013b53a
f012ecfe:	e8 02 15 fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ed03:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ed09:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ed0f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ed15:	8b 00                	mov    (%eax),%eax
f012ed17:	83 f8 04             	cmp    $0x4,%eax
f012ed1a:	75 1c                	jne    f012ed38 <test_krealloc_BF+0xdea>
f012ed1c:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ed22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ed29:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ed2f:	01 d0                	add    %edx,%eax
f012ed31:	8b 00                	mov    (%eax),%eax
f012ed33:	83 f8 04             	cmp    $0x4,%eax
f012ed36:	74 17                	je     f012ed4f <test_krealloc_BF+0xe01>
			panic(
f012ed38:	83 ec 04             	sub    $0x4,%esp
f012ed3b:	68 6c c8 13 f0       	push   $0xf013c86c
f012ed40:	68 c0 11 00 00       	push   $0x11c0
f012ed45:	68 3a b5 13 f0       	push   $0xf013b53a
f012ed4a:	e8 b6 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012ed4f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ed55:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012ed5b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ed61:	66 8b 00             	mov    (%eax),%ax
f012ed64:	66 83 f8 05          	cmp    $0x5,%ax
f012ed68:	75 1b                	jne    f012ed85 <test_krealloc_BF+0xe37>
f012ed6a:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ed70:	01 c0                	add    %eax,%eax
f012ed72:	89 c2                	mov    %eax,%edx
f012ed74:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ed7a:	01 d0                	add    %edx,%eax
f012ed7c:	66 8b 00             	mov    (%eax),%ax
f012ed7f:	66 83 f8 05          	cmp    $0x5,%ax
f012ed83:	74 17                	je     f012ed9c <test_krealloc_BF+0xe4e>
			panic(
f012ed85:	83 ec 04             	sub    $0x4,%esp
f012ed88:	68 6c c8 13 f0       	push   $0xf013c86c
f012ed8d:	68 c5 11 00 00       	push   $0x11c5
f012ed92:	68 3a b5 13 f0       	push   $0xf013b53a
f012ed97:	e8 69 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012ed9c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012eda2:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012eda8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012edae:	66 8b 00             	mov    (%eax),%ax
f012edb1:	66 83 f8 06          	cmp    $0x6,%ax
f012edb5:	75 1b                	jne    f012edd2 <test_krealloc_BF+0xe84>
f012edb7:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012edbd:	01 c0                	add    %eax,%eax
f012edbf:	89 c2                	mov    %eax,%edx
f012edc1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012edc7:	01 d0                	add    %edx,%eax
f012edc9:	66 8b 00             	mov    (%eax),%ax
f012edcc:	66 83 f8 06          	cmp    $0x6,%ax
f012edd0:	74 17                	je     f012ede9 <test_krealloc_BF+0xe9b>
			panic(
f012edd2:	83 ec 04             	sub    $0x4,%esp
f012edd5:	68 6c c8 13 f0       	push   $0xf013c86c
f012edda:	68 ca 11 00 00       	push   $0x11ca
f012eddf:	68 3a b5 13 f0       	push   $0xf013b53a
f012ede4:	e8 1c 14 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ede9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012edef:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012edf5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012edfb:	8a 00                	mov    (%eax),%al
f012edfd:	3c 07                	cmp    $0x7,%al
f012edff:	75 1b                	jne    f012ee1c <test_krealloc_BF+0xece>
f012ee01:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ee07:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ee0e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ee14:	01 d0                	add    %edx,%eax
f012ee16:	8a 00                	mov    (%eax),%al
f012ee18:	3c 07                	cmp    $0x7,%al
f012ee1a:	74 17                	je     f012ee33 <test_krealloc_BF+0xee5>
			panic(
f012ee1c:	83 ec 04             	sub    $0x4,%esp
f012ee1f:	68 6c c8 13 f0       	push   $0xf013c86c
f012ee24:	68 cf 11 00 00       	push   $0x11cf
f012ee29:	68 3a b5 13 f0       	push   $0xf013b53a
f012ee2e:	e8 d2 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012ee33:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ee39:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ee3d:	66 83 f8 07          	cmp    $0x7,%ax
f012ee41:	75 1f                	jne    f012ee62 <test_krealloc_BF+0xf14>
f012ee43:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ee49:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ee50:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ee56:	01 d0                	add    %edx,%eax
f012ee58:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ee5c:	66 83 f8 07          	cmp    $0x7,%ax
f012ee60:	74 17                	je     f012ee79 <test_krealloc_BF+0xf2b>
			panic(
f012ee62:	83 ec 04             	sub    $0x4,%esp
f012ee65:	68 6c c8 13 f0       	push   $0xf013c86c
f012ee6a:	68 d2 11 00 00       	push   $0x11d2
f012ee6f:	68 3a b5 13 f0       	push   $0xf013b53a
f012ee74:	e8 8c 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ee79:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ee7f:	8b 40 04             	mov    0x4(%eax),%eax
f012ee82:	83 f8 07             	cmp    $0x7,%eax
f012ee85:	75 1d                	jne    f012eea4 <test_krealloc_BF+0xf56>
f012ee87:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ee8d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ee94:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ee9a:	01 d0                	add    %edx,%eax
f012ee9c:	8b 40 04             	mov    0x4(%eax),%eax
f012ee9f:	83 f8 07             	cmp    $0x7,%eax
f012eea2:	74 17                	je     f012eebb <test_krealloc_BF+0xf6d>
			panic(
f012eea4:	83 ec 04             	sub    $0x4,%esp
f012eea7:	68 6c c8 13 f0       	push   $0xf013c86c
f012eeac:	68 d5 11 00 00       	push   $0x11d5
f012eeb1:	68 3a b5 13 f0       	push   $0xf013b53a
f012eeb6:	e8 4a 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012eebb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eec1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012eec7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eecd:	8a 00                	mov    (%eax),%al
f012eecf:	3c 08                	cmp    $0x8,%al
f012eed1:	75 1b                	jne    f012eeee <test_krealloc_BF+0xfa0>
f012eed3:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012eed9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012eee0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eee6:	01 d0                	add    %edx,%eax
f012eee8:	8a 00                	mov    (%eax),%al
f012eeea:	3c 08                	cmp    $0x8,%al
f012eeec:	74 17                	je     f012ef05 <test_krealloc_BF+0xfb7>
			panic(
f012eeee:	83 ec 04             	sub    $0x4,%esp
f012eef1:	68 6c c8 13 f0       	push   $0xf013c86c
f012eef6:	68 da 11 00 00       	push   $0x11da
f012eefb:	68 3a b5 13 f0       	push   $0xf013b53a
f012ef00:	e8 00 13 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ef05:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef0b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ef0f:	66 83 f8 08          	cmp    $0x8,%ax
f012ef13:	75 1f                	jne    f012ef34 <test_krealloc_BF+0xfe6>
f012ef15:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ef1b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ef22:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef28:	01 d0                	add    %edx,%eax
f012ef2a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ef2e:	66 83 f8 08          	cmp    $0x8,%ax
f012ef32:	74 17                	je     f012ef4b <test_krealloc_BF+0xffd>
			panic(
f012ef34:	83 ec 04             	sub    $0x4,%esp
f012ef37:	68 6c c8 13 f0       	push   $0xf013c86c
f012ef3c:	68 dd 11 00 00       	push   $0x11dd
f012ef41:	68 3a b5 13 f0       	push   $0xf013b53a
f012ef46:	e8 ba 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012ef4b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef51:	8b 40 04             	mov    0x4(%eax),%eax
f012ef54:	83 f8 08             	cmp    $0x8,%eax
f012ef57:	75 1d                	jne    f012ef76 <test_krealloc_BF+0x1028>
f012ef59:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ef5f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ef66:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef6c:	01 d0                	add    %edx,%eax
f012ef6e:	8b 40 04             	mov    0x4(%eax),%eax
f012ef71:	83 f8 08             	cmp    $0x8,%eax
f012ef74:	74 17                	je     f012ef8d <test_krealloc_BF+0x103f>
			panic(
f012ef76:	83 ec 04             	sub    $0x4,%esp
f012ef79:	68 6c c8 13 f0       	push   $0xf013c86c
f012ef7e:	68 e0 11 00 00       	push   $0x11e0
f012ef83:	68 3a b5 13 f0       	push   $0xf013b53a
f012ef88:	e8 78 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ef8d:	e8 ff dd fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012ef92:	89 c2                	mov    %eax,%edx
f012ef94:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ef97:	39 c2                	cmp    %eax,%edx
f012ef99:	74 17                	je     f012efb2 <test_krealloc_BF+0x1064>
			panic(
f012ef9b:	83 ec 04             	sub    $0x4,%esp
f012ef9e:	68 2c c9 13 f0       	push   $0xf013c92c
f012efa3:	68 e4 11 00 00       	push   $0x11e4
f012efa8:	68 3a b5 13 f0       	push   $0xf013b53a
f012efad:	e8 53 12 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012efb2:	83 ec 0c             	sub    $0xc,%esp
f012efb5:	68 78 c9 13 f0       	push   $0xf013c978
f012efba:	e8 4f 1d fd ff       	call   f0100d0e <cprintf>
f012efbf:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012efc2:	e8 ca dd fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012efc7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012efca:	e8 f9 4d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012efcf:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012efd5:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012efdb:	83 ec 08             	sub    $0x8,%esp
f012efde:	6a 00                	push   $0x0
f012efe0:	50                   	push   %eax
f012efe1:	e8 54 8d fd ff       	call   f0107d3a <krealloc>
f012efe6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012efe9:	e8 da 4d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012efee:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012eff4:	74 17                	je     f012f00d <test_krealloc_BF+0x10bf>
			panic(
f012eff6:	83 ec 04             	sub    $0x4,%esp
f012eff9:	68 9c c9 13 f0       	push   $0xf013c99c
f012effe:	68 f1 11 00 00       	push   $0x11f1
f012f003:	68 3a b5 13 f0       	push   $0xf013b53a
f012f008:	e8 f8 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f00d:	e8 7f dd fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f012:	89 c2                	mov    %eax,%edx
f012f014:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f017:	29 c2                	sub    %eax,%edx
f012f019:	89 d0                	mov    %edx,%eax
f012f01b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f020:	74 17                	je     f012f039 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f022:	83 ec 04             	sub    $0x4,%esp
f012f025:	68 10 ca 13 f0       	push   $0xf013ca10
f012f02a:	68 f3 11 00 00       	push   $0x11f3
f012f02f:	68 3a b5 13 f0       	push   $0xf013b53a
f012f034:	e8 cc 11 fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f039:	e8 53 dd fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f03e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f041:	e8 82 4d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f046:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f04c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f052:	83 ec 08             	sub    $0x8,%esp
f012f055:	6a 00                	push   $0x0
f012f057:	50                   	push   %eax
f012f058:	e8 dd 8c fd ff       	call   f0107d3a <krealloc>
f012f05d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f060:	e8 63 4d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f065:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f06b:	74 17                	je     f012f084 <test_krealloc_BF+0x1136>
			panic(
f012f06d:	83 ec 04             	sub    $0x4,%esp
f012f070:	68 9c c9 13 f0       	push   $0xf013c99c
f012f075:	68 fc 11 00 00       	push   $0x11fc
f012f07a:	68 3a b5 13 f0       	push   $0xf013b53a
f012f07f:	e8 81 11 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f084:	e8 08 dd fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f089:	89 c2                	mov    %eax,%edx
f012f08b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f08e:	29 c2                	sub    %eax,%edx
f012f090:	89 d0                	mov    %edx,%eax
f012f092:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f097:	74 17                	je     f012f0b0 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f099:	83 ec 04             	sub    $0x4,%esp
f012f09c:	68 10 ca 13 f0       	push   $0xf013ca10
f012f0a1:	68 fe 11 00 00       	push   $0x11fe
f012f0a6:	68 3a b5 13 f0       	push   $0xf013b53a
f012f0ab:	e8 55 11 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f0b0:	e8 dc dc fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f0b5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f0b8:	e8 0b 4d fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f0bd:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f0c3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f0c9:	83 ec 08             	sub    $0x8,%esp
f012f0cc:	6a 00                	push   $0x0
f012f0ce:	50                   	push   %eax
f012f0cf:	e8 66 8c fd ff       	call   f0107d3a <krealloc>
f012f0d4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f0d7:	e8 ec 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f0dc:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f0e2:	74 17                	je     f012f0fb <test_krealloc_BF+0x11ad>
			panic(
f012f0e4:	83 ec 04             	sub    $0x4,%esp
f012f0e7:	68 54 b5 13 f0       	push   $0xf013b554
f012f0ec:	68 06 12 00 00       	push   $0x1206
f012f0f1:	68 3a b5 13 f0       	push   $0xf013b53a
f012f0f6:	e8 0a 11 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f0fb:	e8 91 dc fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f100:	89 c2                	mov    %eax,%edx
f012f102:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f105:	29 c2                	sub    %eax,%edx
f012f107:	89 d0                	mov    %edx,%eax
f012f109:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f10e:	74 17                	je     f012f127 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f110:	83 ec 04             	sub    $0x4,%esp
f012f113:	68 10 ca 13 f0       	push   $0xf013ca10
f012f118:	68 08 12 00 00       	push   $0x1208
f012f11d:	68 3a b5 13 f0       	push   $0xf013b53a
f012f122:	e8 de 10 fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f127:	e8 65 dc fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f12c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f12f:	e8 94 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f134:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f13a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f140:	83 ec 08             	sub    $0x8,%esp
f012f143:	6a 00                	push   $0x0
f012f145:	50                   	push   %eax
f012f146:	e8 ef 8b fd ff       	call   f0107d3a <krealloc>
f012f14b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f14e:	e8 75 4c fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012f153:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f159:	74 17                	je     f012f172 <test_krealloc_BF+0x1224>
			panic(
f012f15b:	83 ec 04             	sub    $0x4,%esp
f012f15e:	68 9c c9 13 f0       	push   $0xf013c99c
f012f163:	68 10 12 00 00       	push   $0x1210
f012f168:	68 3a b5 13 f0       	push   $0xf013b53a
f012f16d:	e8 93 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f172:	e8 1a dc fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f177:	89 c2                	mov    %eax,%edx
f012f179:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f17c:	29 c2                	sub    %eax,%edx
f012f17e:	89 d0                	mov    %edx,%eax
f012f180:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f185:	74 17                	je     f012f19e <test_krealloc_BF+0x1250>
			panic(
f012f187:	83 ec 04             	sub    $0x4,%esp
f012f18a:	68 44 ca 13 f0       	push   $0xf013ca44
f012f18f:	68 13 12 00 00       	push   $0x1213
f012f194:	68 3a b5 13 f0       	push   $0xf013b53a
f012f199:	e8 67 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f19e:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f1a5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f1ac:	eb 48                	jmp    f012f1f6 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f1ae:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f1b1:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012f1b6:	83 ec 04             	sub    $0x4,%esp
f012f1b9:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f1bf:	51                   	push   %ecx
f012f1c0:	52                   	push   %edx
f012f1c1:	50                   	push   %eax
f012f1c2:	e8 ea 78 fd ff       	call   f0106ab1 <get_page_table>
f012f1c7:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f1ca:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f1d0:	85 c0                	test   %eax,%eax
f012f1d2:	75 17                	jne    f012f1eb <test_krealloc_BF+0x129d>
					panic(
f012f1d4:	83 ec 04             	sub    $0x4,%esp
f012f1d7:	68 3c be 13 f0       	push   $0xf013be3c
f012f1dc:	68 1f 12 00 00       	push   $0x121f
f012f1e1:	68 3a b5 13 f0       	push   $0xf013b53a
f012f1e6:	e8 1a 10 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f1eb:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f1f2:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f1f6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f1fa:	78 b2                	js     f012f1ae <test_krealloc_BF+0x1260>
f012f1fc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f200:	7f 09                	jg     f012f20b <test_krealloc_BF+0x12bd>
f012f202:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f209:	76 a3                	jbe    f012f1ae <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f20b:	83 ec 0c             	sub    $0xc,%esp
f012f20e:	68 83 ca 13 f0       	push   $0xf013ca83
f012f213:	e8 f6 1a fd ff       	call   f0100d0e <cprintf>
f012f218:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f21b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f221:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f227:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f22e:	eb 21                	jmp    f012f251 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f230:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f236:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f239:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f23f:	01 c8                	add    %ecx,%eax
f012f241:	8a 00                	mov    (%eax),%al
f012f243:	0f be c0             	movsbl %al,%eax
f012f246:	01 d0                	add    %edx,%eax
f012f248:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f24e:	ff 45 dc             	incl   -0x24(%ebp)
f012f251:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f257:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f25a:	7d d4                	jge    f012f230 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f25c:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f262:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f268:	42                   	inc    %edx
f012f269:	01 d2                	add    %edx,%edx
f012f26b:	39 d0                	cmp    %edx,%eax
f012f26d:	74 17                	je     f012f286 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f26f:	83 ec 04             	sub    $0x4,%esp
f012f272:	68 8c ca 13 f0       	push   $0xf013ca8c
f012f277:	68 31 12 00 00       	push   $0x1231
f012f27c:	68 3a b5 13 f0       	push   $0xf013b53a
f012f281:	e8 7f 0f fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f286:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f28c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f292:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f299:	eb 25                	jmp    f012f2c0 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f29b:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f2a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f2a4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f2ab:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f2b1:	01 c8                	add    %ecx,%eax
f012f2b3:	8b 00                	mov    (%eax),%eax
f012f2b5:	01 d0                	add    %edx,%eax
f012f2b7:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f2bd:	ff 45 dc             	incl   -0x24(%ebp)
f012f2c0:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f2c6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f2c9:	7d d0                	jge    f012f29b <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f2cb:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f2d1:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f2d7:	42                   	inc    %edx
f012f2d8:	c1 e2 02             	shl    $0x2,%edx
f012f2db:	39 d0                	cmp    %edx,%eax
f012f2dd:	74 17                	je     f012f2f6 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f2df:	83 ec 04             	sub    $0x4,%esp
f012f2e2:	68 8c ca 13 f0       	push   $0xf013ca8c
f012f2e7:	68 3b 12 00 00       	push   $0x123b
f012f2ec:	68 3a b5 13 f0       	push   $0xf013b53a
f012f2f1:	e8 0f 0f fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f2f6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f2fc:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f302:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f309:	eb 24                	jmp    f012f32f <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f30b:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f311:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f314:	01 c0                	add    %eax,%eax
f012f316:	89 c1                	mov    %eax,%ecx
f012f318:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f31e:	01 c8                	add    %ecx,%eax
f012f320:	66 8b 00             	mov    (%eax),%ax
f012f323:	98                   	cwtl   
f012f324:	01 d0                	add    %edx,%eax
f012f326:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f32c:	ff 45 dc             	incl   -0x24(%ebp)
f012f32f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f335:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f338:	7d d1                	jge    f012f30b <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f33a:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f340:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f346:	8d 48 01             	lea    0x1(%eax),%ecx
f012f349:	89 c8                	mov    %ecx,%eax
f012f34b:	c1 e0 02             	shl    $0x2,%eax
f012f34e:	01 c8                	add    %ecx,%eax
f012f350:	39 c2                	cmp    %eax,%edx
f012f352:	74 17                	je     f012f36b <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f354:	83 ec 04             	sub    $0x4,%esp
f012f357:	68 8c ca 13 f0       	push   $0xf013ca8c
f012f35c:	68 45 12 00 00       	push   $0x1245
f012f361:	68 3a b5 13 f0       	push   $0xf013b53a
f012f366:	e8 9a 0e fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f36b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f371:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f377:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f37e:	eb 70                	jmp    f012f3f0 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f380:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f386:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f389:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f390:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f396:	01 c8                	add    %ecx,%eax
f012f398:	8a 00                	mov    (%eax),%al
f012f39a:	0f be c0             	movsbl %al,%eax
f012f39d:	01 d0                	add    %edx,%eax
f012f39f:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f3a5:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f3ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f3ae:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f3b5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3bb:	01 c8                	add    %ecx,%eax
f012f3bd:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f3c1:	98                   	cwtl   
f012f3c2:	01 d0                	add    %edx,%eax
f012f3c4:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f3ca:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f3d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f3d3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f3da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3e0:	01 c8                	add    %ecx,%eax
f012f3e2:	8b 40 04             	mov    0x4(%eax),%eax
f012f3e5:	01 d0                	add    %edx,%eax
f012f3e7:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f3ed:	ff 45 dc             	incl   -0x24(%ebp)
f012f3f0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f3f6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f3f9:	7d 85                	jge    f012f380 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f3fb:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f401:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f407:	8d 50 01             	lea    0x1(%eax),%edx
f012f40a:	89 d0                	mov    %edx,%eax
f012f40c:	01 c0                	add    %eax,%eax
f012f40e:	01 d0                	add    %edx,%eax
f012f410:	01 c0                	add    %eax,%eax
f012f412:	01 d0                	add    %edx,%eax
f012f414:	39 c1                	cmp    %eax,%ecx
f012f416:	75 3a                	jne    f012f452 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f418:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f41e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f424:	8d 50 01             	lea    0x1(%eax),%edx
f012f427:	89 d0                	mov    %edx,%eax
f012f429:	01 c0                	add    %eax,%eax
f012f42b:	01 d0                	add    %edx,%eax
f012f42d:	01 c0                	add    %eax,%eax
f012f42f:	01 d0                	add    %edx,%eax
f012f431:	39 c1                	cmp    %eax,%ecx
f012f433:	75 1d                	jne    f012f452 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f435:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f43b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f441:	8d 50 01             	lea    0x1(%eax),%edx
f012f444:	89 d0                	mov    %edx,%eax
f012f446:	01 c0                	add    %eax,%eax
f012f448:	01 d0                	add    %edx,%eax
f012f44a:	01 c0                	add    %eax,%eax
f012f44c:	01 d0                	add    %edx,%eax
f012f44e:	39 c1                	cmp    %eax,%ecx
f012f450:	74 17                	je     f012f469 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f452:	83 ec 04             	sub    $0x4,%esp
f012f455:	68 8c ca 13 f0       	push   $0xf013ca8c
f012f45a:	68 53 12 00 00       	push   $0x1253
f012f45f:	68 3a b5 13 f0       	push   $0xf013b53a
f012f464:	e8 9c 0d fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f469:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f470:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f473:	e8 19 d9 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f478:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f47b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f481:	83 ec 08             	sub    $0x8,%esp
f012f484:	68 00 3c 00 00       	push   $0x3c00
f012f489:	50                   	push   %eax
f012f48a:	e8 ab 88 fd ff       	call   f0107d3a <krealloc>
f012f48f:	83 c4 10             	add    $0x10,%esp
f012f492:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f498:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f49e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f4a3:	77 17                	ja     f012f4bc <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f4a5:	83 ec 04             	sub    $0x4,%esp
f012f4a8:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012f4ad:	68 5f 12 00 00       	push   $0x125f
f012f4b2:	68 3a b5 13 f0       	push   $0xf013b53a
f012f4b7:	e8 49 0d fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f4bc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f4c2:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f4c8:	74 17                	je     f012f4e1 <test_krealloc_BF+0x1593>
			panic(
f012f4ca:	83 ec 04             	sub    $0x4,%esp
f012f4cd:	68 c4 ca 13 f0       	push   $0xf013cac4
f012f4d2:	68 62 12 00 00       	push   $0x1262
f012f4d7:	68 3a b5 13 f0       	push   $0xf013b53a
f012f4dc:	e8 24 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f4e1:	e8 ab d8 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f4e6:	89 c2                	mov    %eax,%edx
f012f4e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f4eb:	39 c2                	cmp    %eax,%edx
f012f4ed:	74 17                	je     f012f506 <test_krealloc_BF+0x15b8>
			panic(
f012f4ef:	83 ec 04             	sub    $0x4,%esp
f012f4f2:	68 30 cb 13 f0       	push   $0xf013cb30
f012f4f7:	68 65 12 00 00       	push   $0x1265
f012f4fc:	68 3a b5 13 f0       	push   $0xf013b53a
f012f501:	e8 ff 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f506:	e8 86 d8 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f50b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012f50e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f514:	83 ec 08             	sub    $0x8,%esp
f012f517:	68 00 fc 0f 00       	push   $0xffc00
f012f51c:	50                   	push   %eax
f012f51d:	e8 18 88 fd ff       	call   f0107d3a <krealloc>
f012f522:	83 c4 10             	add    $0x10,%esp
f012f525:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f52b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f531:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f536:	77 17                	ja     f012f54f <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f538:	83 ec 04             	sub    $0x4,%esp
f012f53b:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012f540:	68 6b 12 00 00       	push   $0x126b
f012f545:	68 3a b5 13 f0       	push   $0xf013b53a
f012f54a:	e8 b6 0c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f54f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f555:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f55b:	74 17                	je     f012f574 <test_krealloc_BF+0x1626>
			panic(
f012f55d:	83 ec 04             	sub    $0x4,%esp
f012f560:	68 c4 ca 13 f0       	push   $0xf013cac4
f012f565:	68 6e 12 00 00       	push   $0x126e
f012f56a:	68 3a b5 13 f0       	push   $0xf013b53a
f012f56f:	e8 91 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f574:	e8 18 d8 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f579:	89 c2                	mov    %eax,%edx
f012f57b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f57e:	39 c2                	cmp    %eax,%edx
f012f580:	74 17                	je     f012f599 <test_krealloc_BF+0x164b>
			panic(
f012f582:	83 ec 04             	sub    $0x4,%esp
f012f585:	68 30 cb 13 f0       	push   $0xf013cb30
f012f58a:	68 71 12 00 00       	push   $0x1271
f012f58f:	68 3a b5 13 f0       	push   $0xf013b53a
f012f594:	e8 6c 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f599:	e8 f3 d7 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f59e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012f5a1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f5a7:	83 ec 08             	sub    $0x8,%esp
f012f5aa:	68 00 fc 0f 00       	push   $0xffc00
f012f5af:	50                   	push   %eax
f012f5b0:	e8 85 87 fd ff       	call   f0107d3a <krealloc>
f012f5b5:	83 c4 10             	add    $0x10,%esp
f012f5b8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f5be:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f5c4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f5c9:	77 17                	ja     f012f5e2 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f5cb:	83 ec 04             	sub    $0x4,%esp
f012f5ce:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012f5d3:	68 77 12 00 00       	push   $0x1277
f012f5d8:	68 3a b5 13 f0       	push   $0xf013b53a
f012f5dd:	e8 23 0c fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f5e2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f5e8:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f5ee:	74 17                	je     f012f607 <test_krealloc_BF+0x16b9>
			panic(
f012f5f0:	83 ec 04             	sub    $0x4,%esp
f012f5f3:	68 c4 ca 13 f0       	push   $0xf013cac4
f012f5f8:	68 7a 12 00 00       	push   $0x127a
f012f5fd:	68 3a b5 13 f0       	push   $0xf013b53a
f012f602:	e8 fe 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f607:	e8 85 d7 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f60c:	89 c2                	mov    %eax,%edx
f012f60e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f611:	39 c2                	cmp    %eax,%edx
f012f613:	74 17                	je     f012f62c <test_krealloc_BF+0x16de>
			panic(
f012f615:	83 ec 04             	sub    $0x4,%esp
f012f618:	68 30 cb 13 f0       	push   $0xf013cb30
f012f61d:	68 7d 12 00 00       	push   $0x127d
f012f622:	68 3a b5 13 f0       	push   $0xf013b53a
f012f627:	e8 d9 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012f62c:	e8 60 d7 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f631:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012f634:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f63a:	83 ec 08             	sub    $0x8,%esp
f012f63d:	68 00 fc 0f 00       	push   $0xffc00
f012f642:	50                   	push   %eax
f012f643:	e8 f2 86 fd ff       	call   f0107d3a <krealloc>
f012f648:	83 c4 10             	add    $0x10,%esp
f012f64b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f651:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012f657:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f65c:	77 17                	ja     f012f675 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f65e:	83 ec 04             	sub    $0x4,%esp
f012f661:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012f666:	68 85 12 00 00       	push   $0x1285
f012f66b:	68 3a b5 13 f0       	push   $0xf013b53a
f012f670:	e8 90 0b fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012f675:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f67b:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012f681:	74 17                	je     f012f69a <test_krealloc_BF+0x174c>
			panic(
f012f683:	83 ec 04             	sub    $0x4,%esp
f012f686:	68 74 cb 13 f0       	push   $0xf013cb74
f012f68b:	68 88 12 00 00       	push   $0x1288
f012f690:	68 3a b5 13 f0       	push   $0xf013b53a
f012f695:	e8 6b 0b fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012f69a:	e8 f2 d6 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f69f:	89 c2                	mov    %eax,%edx
f012f6a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f6a4:	39 c2                	cmp    %eax,%edx
f012f6a6:	74 17                	je     f012f6bf <test_krealloc_BF+0x1771>
			panic(
f012f6a8:	83 ec 04             	sub    $0x4,%esp
f012f6ab:	68 30 cb 13 f0       	push   $0xf013cb30
f012f6b0:	68 8b 12 00 00       	push   $0x128b
f012f6b5:	68 3a b5 13 f0       	push   $0xf013b53a
f012f6ba:	e8 46 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012f6bf:	83 ec 0c             	sub    $0xc,%esp
f012f6c2:	68 53 bd 13 f0       	push   $0xf013bd53
f012f6c7:	e8 42 16 fd ff       	call   f0100d0e <cprintf>
f012f6cc:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012f6cf:	e8 bd d6 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f6d4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012f6d7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f6dd:	83 ec 08             	sub    $0x8,%esp
f012f6e0:	68 00 18 10 00       	push   $0x101800
f012f6e5:	50                   	push   %eax
f012f6e6:	e8 4f 86 fd ff       	call   f0107d3a <krealloc>
f012f6eb:	83 c4 10             	add    $0x10,%esp
f012f6ee:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f6f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f6f4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f6f9:	77 17                	ja     f012f712 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f6fb:	83 ec 04             	sub    $0x4,%esp
f012f6fe:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012f703:	68 93 12 00 00       	push   $0x1293
f012f708:	68 3a b5 13 f0       	push   $0xf013b53a
f012f70d:	e8 f3 0a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012f712:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f718:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f71b:	74 17                	je     f012f734 <test_krealloc_BF+0x17e6>
			panic(
f012f71d:	83 ec 04             	sub    $0x4,%esp
f012f720:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012f725:	68 96 12 00 00       	push   $0x1296
f012f72a:	68 3a b5 13 f0       	push   $0xf013b53a
f012f72f:	e8 d1 0a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012f734:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f737:	e8 55 d6 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f73c:	29 c3                	sub    %eax,%ebx
f012f73e:	89 d8                	mov    %ebx,%eax
f012f740:	83 f8 02             	cmp    $0x2,%eax
f012f743:	74 17                	je     f012f75c <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012f745:	83 ec 04             	sub    $0x4,%esp
f012f748:	68 50 cc 13 f0       	push   $0xf013cc50
f012f74d:	68 98 12 00 00       	push   $0x1298
f012f752:	68 3a b5 13 f0       	push   $0xf013b53a
f012f757:	e8 a9 0a fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012f75c:	e8 30 d6 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f761:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012f764:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f76a:	83 ec 08             	sub    $0x8,%esp
f012f76d:	68 00 fc 3f 00       	push   $0x3ffc00
f012f772:	50                   	push   %eax
f012f773:	e8 c2 85 fd ff       	call   f0107d3a <krealloc>
f012f778:	83 c4 10             	add    $0x10,%esp
f012f77b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f77e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f781:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f786:	77 17                	ja     f012f79f <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f788:	83 ec 04             	sub    $0x4,%esp
f012f78b:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012f790:	68 9e 12 00 00       	push   $0x129e
f012f795:	68 3a b5 13 f0       	push   $0xf013b53a
f012f79a:	e8 66 0a fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012f79f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f7a5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f7a8:	74 17                	je     f012f7c1 <test_krealloc_BF+0x1873>
			panic(
f012f7aa:	83 ec 04             	sub    $0x4,%esp
f012f7ad:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012f7b2:	68 a1 12 00 00       	push   $0x12a1
f012f7b7:	68 3a b5 13 f0       	push   $0xf013b53a
f012f7bc:	e8 44 0a fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012f7c1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f7c4:	e8 c8 d5 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f7c9:	29 c3                	sub    %eax,%ebx
f012f7cb:	89 d8                	mov    %ebx,%eax
f012f7cd:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f7d2:	74 17                	je     f012f7eb <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012f7d4:	83 ec 04             	sub    $0x4,%esp
f012f7d7:	68 50 cc 13 f0       	push   $0xf013cc50
f012f7dc:	68 a4 12 00 00       	push   $0x12a4
f012f7e1:	68 3a b5 13 f0       	push   $0xf013b53a
f012f7e6:	e8 1a 0a fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012f7eb:	83 ec 0c             	sub    $0xc,%esp
f012f7ee:	68 98 bd 13 f0       	push   $0xf013bd98
f012f7f3:	e8 16 15 fd ff       	call   f0100d0e <cprintf>
f012f7f8:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f7fb:	e8 91 d5 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f800:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012f803:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f809:	83 ec 08             	sub    $0x8,%esp
f012f80c:	68 00 fc 9f 00       	push   $0x9ffc00
f012f811:	50                   	push   %eax
f012f812:	e8 23 85 fd ff       	call   f0107d3a <krealloc>
f012f817:	83 c4 10             	add    $0x10,%esp
f012f81a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f81d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f820:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f825:	77 17                	ja     f012f83e <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f827:	83 ec 04             	sub    $0x4,%esp
f012f82a:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012f82f:	68 af 12 00 00       	push   $0x12af
f012f834:	68 3a b5 13 f0       	push   $0xf013b53a
f012f839:	e8 c7 09 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012f83e:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012f845:	10 00 00 
f012f848:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012f84e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f853:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012f859:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f85f:	ba 00 00 00 00       	mov    $0x0,%edx
f012f864:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012f86a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012f870:	29 d0                	sub    %edx,%eax
f012f872:	89 c1                	mov    %eax,%ecx
f012f874:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012f87b:	10 00 00 
f012f87e:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012f883:	0f b6 d0             	movzbl %al,%edx
f012f886:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012f88c:	01 d0                	add    %edx,%eax
f012f88e:	48                   	dec    %eax
f012f88f:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012f895:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f89b:	ba 00 00 00 00       	mov    $0x0,%edx
f012f8a0:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f8a6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f8ac:	29 d0                	sub    %edx,%eax
f012f8ae:	01 c1                	add    %eax,%ecx
f012f8b0:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f8b7:	10 00 00 
f012f8ba:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012f8bf:	0f b6 c0             	movzbl %al,%eax
f012f8c2:	c1 e0 04             	shl    $0x4,%eax
f012f8c5:	89 c2                	mov    %eax,%edx
f012f8c7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f8cd:	01 d0                	add    %edx,%eax
f012f8cf:	48                   	dec    %eax
f012f8d0:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f8d6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f8dc:	ba 00 00 00 00       	mov    $0x0,%edx
f012f8e1:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f8e7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f8ed:	29 d0                	sub    %edx,%eax
f012f8ef:	01 c8                	add    %ecx,%eax
f012f8f1:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012f8f7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f8fa:	39 c2                	cmp    %eax,%edx
f012f8fc:	74 18                	je     f012f916 <test_krealloc_BF+0x19c8>
			panic(
f012f8fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f901:	50                   	push   %eax
f012f902:	68 84 cc 13 f0       	push   $0xf013cc84
f012f907:	68 b3 12 00 00       	push   $0x12b3
f012f90c:	68 3a b5 13 f0       	push   $0xf013b53a
f012f911:	e8 ef 08 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012f916:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f91c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f91f:	75 17                	jne    f012f938 <test_krealloc_BF+0x19ea>
			panic(
f012f921:	83 ec 04             	sub    $0x4,%esp
f012f924:	68 c8 cc 13 f0       	push   $0xf013ccc8
f012f929:	68 b6 12 00 00       	push   $0x12b6
f012f92e:	68 3a b5 13 f0       	push   $0xf013b53a
f012f933:	e8 cd 08 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012f938:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f93b:	e8 51 d4 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f940:	29 c3                	sub    %eax,%ebx
f012f942:	89 d8                	mov    %ebx,%eax
f012f944:	3d 00 06 00 00       	cmp    $0x600,%eax
f012f949:	74 17                	je     f012f962 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012f94b:	83 ec 04             	sub    $0x4,%esp
f012f94e:	68 50 cc 13 f0       	push   $0xf013cc50
f012f953:	68 b9 12 00 00       	push   $0x12b9
f012f958:	68 3a b5 13 f0       	push   $0xf013b53a
f012f95d:	e8 a3 08 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012f962:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f965:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012f96b:	e8 21 d4 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012f970:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012f973:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f979:	83 ec 08             	sub    $0x8,%esp
f012f97c:	68 00 fc 3f 00       	push   $0x3ffc00
f012f981:	50                   	push   %eax
f012f982:	e8 b3 83 fd ff       	call   f0107d3a <krealloc>
f012f987:	83 c4 10             	add    $0x10,%esp
f012f98a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f98d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f990:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f995:	77 17                	ja     f012f9ae <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f997:	83 ec 04             	sub    $0x4,%esp
f012f99a:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012f99f:	68 c2 12 00 00       	push   $0x12c2
f012f9a4:	68 3a b5 13 f0       	push   $0xf013b53a
f012f9a9:	e8 57 08 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012f9ae:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f9b4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f9b7:	75 17                	jne    f012f9d0 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f9b9:	83 ec 04             	sub    $0x4,%esp
f012f9bc:	68 c8 cc 13 f0       	push   $0xf013ccc8
f012f9c1:	68 c4 12 00 00       	push   $0x12c4
f012f9c6:	68 3a b5 13 f0       	push   $0xf013b53a
f012f9cb:	e8 35 08 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012f9d0:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012f9d7:	10 00 00 
f012f9da:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012f9e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f9e5:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012f9eb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f9f1:	ba 00 00 00 00       	mov    $0x0,%edx
f012f9f6:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012f9fc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012fa02:	29 d0                	sub    %edx,%eax
f012fa04:	89 c1                	mov    %eax,%ecx
f012fa06:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012fa0d:	10 00 00 
f012fa10:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012fa15:	0f b6 d0             	movzbl %al,%edx
f012fa18:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012fa1e:	01 d0                	add    %edx,%eax
f012fa20:	48                   	dec    %eax
f012fa21:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012fa27:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fa2d:	ba 00 00 00 00       	mov    $0x0,%edx
f012fa32:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012fa38:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012fa3e:	29 d0                	sub    %edx,%eax
f012fa40:	01 c1                	add    %eax,%ecx
f012fa42:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012fa49:	10 00 00 
f012fa4c:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012fa51:	0f b6 c0             	movzbl %al,%eax
f012fa54:	c1 e0 04             	shl    $0x4,%eax
f012fa57:	89 c2                	mov    %eax,%edx
f012fa59:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012fa5f:	01 d0                	add    %edx,%eax
f012fa61:	48                   	dec    %eax
f012fa62:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012fa68:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fa6e:	ba 00 00 00 00       	mov    $0x0,%edx
f012fa73:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012fa79:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fa7f:	29 d0                	sub    %edx,%eax
f012fa81:	01 c8                	add    %ecx,%eax
f012fa83:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012fa89:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fa8c:	39 c2                	cmp    %eax,%edx
f012fa8e:	74 17                	je     f012faa7 <test_krealloc_BF+0x1b59>
f012fa90:	83 ec 04             	sub    $0x4,%esp
f012fa93:	68 1c c8 13 f0       	push   $0xf013c81c
f012fa98:	68 c5 12 00 00       	push   $0x12c5
f012fa9d:	68 3a b5 13 f0       	push   $0xf013b53a
f012faa2:	e8 5e 07 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012faa7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012faaa:	e8 e2 d2 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012faaf:	29 c3                	sub    %eax,%ebx
f012fab1:	89 d8                	mov    %ebx,%eax
f012fab3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012fab8:	74 17                	je     f012fad1 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012faba:	83 ec 04             	sub    $0x4,%esp
f012fabd:	68 50 cc 13 f0       	push   $0xf013cc50
f012fac2:	68 c9 12 00 00       	push   $0x12c9
f012fac7:	68 3a b5 13 f0       	push   $0xf013b53a
f012facc:	e8 34 07 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f012fad1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fad4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fada:	e8 b2 d2 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012fadf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012fae2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fae8:	83 ec 08             	sub    $0x8,%esp
f012faeb:	68 00 fc 3f 01       	push   $0x13ffc00
f012faf0:	50                   	push   %eax
f012faf1:	e8 44 82 fd ff       	call   f0107d3a <krealloc>
f012faf6:	83 c4 10             	add    $0x10,%esp
f012faf9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fafc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012faff:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fb04:	77 17                	ja     f012fb1d <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fb06:	83 ec 04             	sub    $0x4,%esp
f012fb09:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012fb0e:	68 cf 12 00 00       	push   $0x12cf
f012fb13:	68 3a b5 13 f0       	push   $0xf013b53a
f012fb18:	e8 e8 06 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012fb1d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fb23:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fb26:	75 17                	jne    f012fb3f <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012fb28:	83 ec 04             	sub    $0x4,%esp
f012fb2b:	68 c8 cc 13 f0       	push   $0xf013ccc8
f012fb30:	68 d1 12 00 00       	push   $0x12d1
f012fb35:	68 3a b5 13 f0       	push   $0xf013b53a
f012fb3a:	e8 c6 06 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012fb3f:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012fb46:	10 00 00 
f012fb49:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012fb4f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fb54:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012fb5a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fb60:	ba 00 00 00 00       	mov    $0x0,%edx
f012fb65:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012fb6b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012fb71:	29 d0                	sub    %edx,%eax
f012fb73:	89 c1                	mov    %eax,%ecx
f012fb75:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012fb7c:	10 00 00 
f012fb7f:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012fb84:	0f b6 d0             	movzbl %al,%edx
f012fb87:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012fb8d:	01 d0                	add    %edx,%eax
f012fb8f:	48                   	dec    %eax
f012fb90:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012fb96:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fb9c:	ba 00 00 00 00       	mov    $0x0,%edx
f012fba1:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012fba7:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012fbad:	29 d0                	sub    %edx,%eax
f012fbaf:	01 c1                	add    %eax,%ecx
f012fbb1:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012fbb8:	10 00 00 
f012fbbb:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f012fbc0:	0f b6 c0             	movzbl %al,%eax
f012fbc3:	c1 e0 04             	shl    $0x4,%eax
f012fbc6:	89 c2                	mov    %eax,%edx
f012fbc8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012fbce:	01 d0                	add    %edx,%eax
f012fbd0:	48                   	dec    %eax
f012fbd1:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012fbd7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fbdd:	ba 00 00 00 00       	mov    $0x0,%edx
f012fbe2:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012fbe8:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012fbee:	29 d0                	sub    %edx,%eax
f012fbf0:	01 c8                	add    %ecx,%eax
f012fbf2:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012fbf8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fbfb:	39 c2                	cmp    %eax,%edx
f012fbfd:	74 17                	je     f012fc16 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012fbff:	83 ec 04             	sub    $0x4,%esp
f012fc02:	68 e8 cd 13 f0       	push   $0xf013cde8
f012fc07:	68 d3 12 00 00       	push   $0x12d3
f012fc0c:	68 3a b5 13 f0       	push   $0xf013b53a
f012fc11:	e8 ef 05 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012fc16:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fc19:	e8 73 d1 fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012fc1e:	29 c3                	sub    %eax,%ebx
f012fc20:	89 d8                	mov    %ebx,%eax
f012fc22:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012fc27:	74 17                	je     f012fc40 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012fc29:	83 ec 04             	sub    $0x4,%esp
f012fc2c:	68 50 cc 13 f0       	push   $0xf013cc50
f012fc31:	68 d6 12 00 00       	push   $0x12d6
f012fc36:	68 3a b5 13 f0       	push   $0xf013b53a
f012fc3b:	e8 c5 05 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012fc40:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc43:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012fc49:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fc4f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012fc55:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fc5c:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fc5f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fc66:	eb 21                	jmp    f012fc89 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012fc68:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fc6e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012fc71:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012fc77:	01 c8                	add    %ecx,%eax
f012fc79:	8a 00                	mov    (%eax),%al
f012fc7b:	0f be c0             	movsbl %al,%eax
f012fc7e:	01 d0                	add    %edx,%eax
f012fc80:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012fc86:	ff 45 d8             	incl   -0x28(%ebp)
f012fc89:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012fc8f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fc92:	7d d4                	jge    f012fc68 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012fc94:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012fc9a:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012fca0:	42                   	inc    %edx
f012fca1:	01 d2                	add    %edx,%edx
f012fca3:	39 d0                	cmp    %edx,%eax
f012fca5:	74 17                	je     f012fcbe <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012fca7:	83 ec 04             	sub    $0x4,%esp
f012fcaa:	68 80 cd 13 f0       	push   $0xf013cd80
f012fcaf:	68 e4 12 00 00       	push   $0x12e4
f012fcb4:	68 3a b5 13 f0       	push   $0xf013b53a
f012fcb9:	e8 47 05 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012fcbe:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fcc4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012fcca:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fcd1:	00 00 00 
		sums[1] = 0;
f012fcd4:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012fcdb:	00 00 00 
		sums[2] = 0;
f012fcde:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012fce5:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fce8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fcef:	eb 70                	jmp    f012fd61 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012fcf1:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fcf7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fcfa:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fd01:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fd07:	01 c8                	add    %ecx,%eax
f012fd09:	8a 00                	mov    (%eax),%al
f012fd0b:	0f be c0             	movsbl %al,%eax
f012fd0e:	01 d0                	add    %edx,%eax
f012fd10:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012fd16:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012fd1c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fd1f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fd26:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fd2c:	01 c8                	add    %ecx,%eax
f012fd2e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012fd32:	98                   	cwtl   
f012fd33:	01 d0                	add    %edx,%eax
f012fd35:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012fd3b:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012fd41:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fd44:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012fd4b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012fd51:	01 c8                	add    %ecx,%eax
f012fd53:	8b 40 04             	mov    0x4(%eax),%eax
f012fd56:	01 d0                	add    %edx,%eax
f012fd58:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012fd5e:	ff 45 d8             	incl   -0x28(%ebp)
f012fd61:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fd67:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fd6a:	7d 85                	jge    f012fcf1 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012fd6c:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012fd72:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fd78:	8d 50 01             	lea    0x1(%eax),%edx
f012fd7b:	89 d0                	mov    %edx,%eax
f012fd7d:	01 c0                	add    %eax,%eax
f012fd7f:	01 d0                	add    %edx,%eax
f012fd81:	01 c0                	add    %eax,%eax
f012fd83:	01 d0                	add    %edx,%eax
f012fd85:	39 c1                	cmp    %eax,%ecx
f012fd87:	75 3a                	jne    f012fdc3 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012fd89:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012fd8f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fd95:	8d 50 01             	lea    0x1(%eax),%edx
f012fd98:	89 d0                	mov    %edx,%eax
f012fd9a:	01 c0                	add    %eax,%eax
f012fd9c:	01 d0                	add    %edx,%eax
f012fd9e:	01 c0                	add    %eax,%eax
f012fda0:	01 d0                	add    %edx,%eax
f012fda2:	39 c1                	cmp    %eax,%ecx
f012fda4:	75 1d                	jne    f012fdc3 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012fda6:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012fdac:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fdb2:	8d 50 01             	lea    0x1(%eax),%edx
f012fdb5:	89 d0                	mov    %edx,%eax
f012fdb7:	01 c0                	add    %eax,%eax
f012fdb9:	01 d0                	add    %edx,%eax
f012fdbb:	01 c0                	add    %eax,%eax
f012fdbd:	01 d0                	add    %edx,%eax
f012fdbf:	39 c1                	cmp    %eax,%ecx
f012fdc1:	74 17                	je     f012fdda <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012fdc3:	83 ec 04             	sub    $0x4,%esp
f012fdc6:	68 80 cd 13 f0       	push   $0xf013cd80
f012fdcb:	68 f6 12 00 00       	push   $0x12f6
f012fdd0:	68 3a b5 13 f0       	push   $0xf013b53a
f012fdd5:	e8 2b 04 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012fdda:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fde0:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012fde6:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012fded:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012fdf0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012fdf7:	eb 24                	jmp    f012fe1d <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012fdf9:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fdff:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fe02:	01 c0                	add    %eax,%eax
f012fe04:	89 c1                	mov    %eax,%ecx
f012fe06:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012fe0c:	01 c8                	add    %ecx,%eax
f012fe0e:	66 8b 00             	mov    (%eax),%ax
f012fe11:	98                   	cwtl   
f012fe12:	01 d0                	add    %edx,%eax
f012fe14:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012fe1a:	ff 45 d8             	incl   -0x28(%ebp)
f012fe1d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012fe23:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012fe26:	7d d1                	jge    f012fdf9 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012fe28:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012fe2e:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012fe34:	8d 48 01             	lea    0x1(%eax),%ecx
f012fe37:	89 c8                	mov    %ecx,%eax
f012fe39:	c1 e0 02             	shl    $0x2,%eax
f012fe3c:	01 c8                	add    %ecx,%eax
f012fe3e:	39 c2                	cmp    %eax,%edx
f012fe40:	74 17                	je     f012fe59 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012fe42:	83 ec 04             	sub    $0x4,%esp
f012fe45:	68 80 cd 13 f0       	push   $0xf013cd80
f012fe4a:	68 00 13 00 00       	push   $0x1300
f012fe4f:	68 3a b5 13 f0       	push   $0xf013b53a
f012fe54:	e8 ac 03 fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012fe59:	e8 33 cf fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012fe5e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012fe61:	e8 62 3f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fe66:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012fe6c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fe72:	83 ec 08             	sub    $0x8,%esp
f012fe75:	6a 00                	push   $0x0
f012fe77:	50                   	push   %eax
f012fe78:	e8 bd 7e fd ff       	call   f0107d3a <krealloc>
f012fe7d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012fe80:	e8 43 3f fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fe85:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012fe8b:	74 17                	je     f012fea4 <test_krealloc_BF+0x1f56>
			panic(
f012fe8d:	83 ec 04             	sub    $0x4,%esp
f012fe90:	68 54 b5 13 f0       	push   $0xf013b554
f012fe95:	68 08 13 00 00       	push   $0x1308
f012fe9a:	68 3a b5 13 f0       	push   $0xf013b53a
f012fe9f:	e8 61 03 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012fea4:	e8 e8 ce fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012fea9:	89 c2                	mov    %eax,%edx
f012feab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012feae:	29 c2                	sub    %eax,%edx
f012feb0:	89 d0                	mov    %edx,%eax
f012feb2:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012feb7:	74 17                	je     f012fed0 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012feb9:	83 ec 04             	sub    $0x4,%esp
f012febc:	68 10 ca 13 f0       	push   $0xf013ca10
f012fec1:	68 0a 13 00 00       	push   $0x130a
f012fec6:	68 3a b5 13 f0       	push   $0xf013b53a
f012fecb:	e8 35 03 fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012fed0:	e8 bc ce fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012fed5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012fed8:	e8 eb 3e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fedd:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012fee3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fee9:	83 ec 0c             	sub    $0xc,%esp
f012feec:	50                   	push   %eax
f012feed:	e8 53 7c fd ff       	call   f0107b45 <kfree>
f012fef2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012fef5:	e8 ce 3e fd ff       	call   f0103dc8 <pf_calculate_free_frames>
f012fefa:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ff00:	74 17                	je     f012ff19 <test_krealloc_BF+0x1fcb>
			panic(
f012ff02:	83 ec 04             	sub    $0x4,%esp
f012ff05:	68 54 b5 13 f0       	push   $0xf013b554
f012ff0a:	68 12 13 00 00       	push   $0x1312
f012ff0f:	68 3a b5 13 f0       	push   $0xf013b53a
f012ff14:	e8 ec 02 fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012ff19:	e8 73 ce fd ff       	call   f010cd91 <sys_calculate_free_frames>
f012ff1e:	89 c2                	mov    %eax,%edx
f012ff20:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ff23:	29 c2                	sub    %eax,%edx
f012ff25:	89 d0                	mov    %edx,%eax
f012ff27:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012ff2c:	74 17                	je     f012ff45 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012ff2e:	83 ec 04             	sub    $0x4,%esp
f012ff31:	68 10 ca 13 f0       	push   $0xf013ca10
f012ff36:	68 14 13 00 00       	push   $0x1314
f012ff3b:	68 3a b5 13 f0       	push   $0xf013b53a
f012ff40:	e8 c0 02 fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ff45:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012ff4c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012ff53:	eb 48                	jmp    f012ff9d <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ff55:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012ff58:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f012ff5d:	83 ec 04             	sub    $0x4,%esp
f012ff60:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012ff66:	51                   	push   %ecx
f012ff67:	52                   	push   %edx
f012ff68:	50                   	push   %eax
f012ff69:	e8 43 6b fd ff       	call   f0106ab1 <get_page_table>
f012ff6e:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ff71:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ff77:	85 c0                	test   %eax,%eax
f012ff79:	75 17                	jne    f012ff92 <test_krealloc_BF+0x2044>
					panic(
f012ff7b:	83 ec 04             	sub    $0x4,%esp
f012ff7e:	68 3c be 13 f0       	push   $0xf013be3c
f012ff83:	68 21 13 00 00       	push   $0x1321
f012ff88:	68 3a b5 13 f0       	push   $0xf013b53a
f012ff8d:	e8 73 02 fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ff92:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012ff99:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012ff9d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012ffa1:	78 b2                	js     f012ff55 <test_krealloc_BF+0x2007>
f012ffa3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012ffa7:	7f 09                	jg     f012ffb2 <test_krealloc_BF+0x2064>
f012ffa9:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012ffb0:	76 a3                	jbe    f012ff55 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012ffb2:	83 ec 0c             	sub    $0xc,%esp
f012ffb5:	68 1e b7 13 f0       	push   $0xf013b71e
f012ffba:	e8 4f 0d fd ff       	call   f0100d0e <cprintf>
f012ffbf:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012ffc2:	83 ec 0c             	sub    $0xc,%esp
f012ffc5:	68 20 ce 13 f0       	push   $0xf013ce20
f012ffca:	e8 3f 0d fd ff       	call   f0100d0e <cprintf>
f012ffcf:	83 c4 10             	add    $0x10,%esp
	return 0;
f012ffd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012ffd7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012ffda:	5b                   	pop    %ebx
f012ffdb:	5f                   	pop    %edi
f012ffdc:	5d                   	pop    %ebp
f012ffdd:	c3                   	ret    

f012ffde <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012ffde:	55                   	push   %ebp
f012ffdf:	89 e5                	mov    %esp,%ebp
f012ffe1:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f012ffe4:	a1 04 1d 88 f0       	mov    0xf0881d04,%eax
f012ffe9:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f012ffee:	74 17                	je     f0130007 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f012fff0:	83 ec 04             	sub    $0x4,%esp
f012fff3:	68 60 ce 13 f0       	push   $0xf013ce60
f012fff8:	68 39 13 00 00       	push   $0x1339
f012fffd:	68 3a b5 13 f0       	push   $0xf013b53a
f0130002:	e8 fe 01 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f0130007:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f013000c:	8b 15 04 1d 88 f0    	mov    0xf0881d04,%edx
f0130012:	4a                   	dec    %edx
f0130013:	39 d0                	cmp    %edx,%eax
f0130015:	74 17                	je     f013002e <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f0130017:	83 ec 04             	sub    $0x4,%esp
f013001a:	68 b4 ce 13 f0       	push   $0xf013ceb4
f013001f:	68 3f 13 00 00       	push   $0x133f
f0130024:	68 3a b5 13 f0       	push   $0xf013b53a
f0130029:	e8 d7 01 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f013002e:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0130033:	85 c0                	test   %eax,%eax
f0130035:	74 17                	je     f013004e <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f0130037:	83 ec 04             	sub    $0x4,%esp
f013003a:	68 f0 ce 13 f0       	push   $0xf013cef0
f013003f:	68 45 13 00 00       	push   $0x1345
f0130044:	68 3a b5 13 f0       	push   $0xf013b53a
f0130049:	e8 b7 01 fd ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f013004e:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0130053:	83 f8 01             	cmp    $0x1,%eax
f0130056:	74 17                	je     f013006f <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f0130058:	83 ec 04             	sub    $0x4,%esp
f013005b:	68 28 cf 13 f0       	push   $0xf013cf28
f0130060:	68 4b 13 00 00       	push   $0x134b
f0130065:	68 3a b5 13 f0       	push   $0xf013b53a
f013006a:	e8 96 01 fd ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f013006f:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0130074:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f0130077:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013007b:	74 66                	je     f01300e3 <test_initialize_dyn_block_system+0x105>
f013007d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130080:	8b 48 0c             	mov    0xc(%eax),%ecx
f0130083:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f013008a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013008d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0130092:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0130095:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130098:	ba 00 00 00 00       	mov    $0x0,%edx
f013009d:	f7 75 ec             	divl   -0x14(%ebp)
f01300a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01300a3:	29 d0                	sub    %edx,%eax
f01300a5:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f01300aa:	29 c2                	sub    %eax,%edx
f01300ac:	89 d0                	mov    %edx,%eax
f01300ae:	39 c1                	cmp    %eax,%ecx
f01300b0:	75 31                	jne    f01300e3 <test_initialize_dyn_block_system+0x105>
f01300b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300b5:	8b 48 08             	mov    0x8(%eax),%ecx
f01300b8:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01300bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01300c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01300c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01300ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01300cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01300d2:	f7 75 e4             	divl   -0x1c(%ebp)
f01300d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01300d8:	29 d0                	sub    %edx,%eax
f01300da:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01300df:	39 c1                	cmp    %eax,%ecx
f01300e1:	74 17                	je     f01300fa <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f01300e3:	83 ec 04             	sub    $0x4,%esp
f01300e6:	68 60 cf 13 f0       	push   $0xf013cf60
f01300eb:	68 52 13 00 00       	push   $0x1352
f01300f0:	68 3a b5 13 f0       	push   $0xf013b53a
f01300f5:	e8 0b 01 fd ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01300fa:	8b 45 14             	mov    0x14(%ebp),%eax
f01300fd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130100:	74 17                	je     f0130119 <test_initialize_dyn_block_system+0x13b>
f0130102:	83 ec 04             	sub    $0x4,%esp
f0130105:	68 54 b5 13 f0       	push   $0xf013b554
f013010a:	68 56 13 00 00       	push   $0x1356
f013010f:	68 3a b5 13 f0       	push   $0xf013b53a
f0130114:	e8 ec 00 fd ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f0130119:	8b 45 08             	mov    0x8(%ebp),%eax
f013011c:	2b 45 10             	sub    0x10(%ebp),%eax
f013011f:	3d a0 00 00 00       	cmp    $0xa0,%eax
f0130124:	74 1b                	je     f0130141 <test_initialize_dyn_block_system+0x163>
f0130126:	8b 45 08             	mov    0x8(%ebp),%eax
f0130129:	2b 45 10             	sub    0x10(%ebp),%eax
f013012c:	50                   	push   %eax
f013012d:	68 9c cf 13 f0       	push   $0xf013cf9c
f0130132:	68 57 13 00 00       	push   $0x1357
f0130137:	68 3a b5 13 f0       	push   $0xf013b53a
f013013c:	e8 c4 00 fd ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f0130141:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f0130148:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f013014d:	83 ec 04             	sub    $0x4,%esp
f0130150:	6a 00                	push   $0x0
f0130152:	ff 75 f4             	pushl  -0xc(%ebp)
f0130155:	50                   	push   %eax
f0130156:	e8 e9 5f fe ff       	call   f0116144 <CB>
f013015b:	83 c4 10             	add    $0x10,%esp
f013015e:	83 f8 01             	cmp    $0x1,%eax
f0130161:	75 35                	jne    f0130198 <test_initialize_dyn_block_system+0x1ba>
f0130163:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0130168:	83 ec 04             	sub    $0x4,%esp
f013016b:	6a 01                	push   $0x1
f013016d:	ff 75 f4             	pushl  -0xc(%ebp)
f0130170:	50                   	push   %eax
f0130171:	e8 ce 5f fe ff       	call   f0116144 <CB>
f0130176:	83 c4 10             	add    $0x10,%esp
f0130179:	83 f8 01             	cmp    $0x1,%eax
f013017c:	75 1a                	jne    f0130198 <test_initialize_dyn_block_system+0x1ba>
f013017e:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0130183:	83 ec 04             	sub    $0x4,%esp
f0130186:	6a 02                	push   $0x2
f0130188:	ff 75 f4             	pushl  -0xc(%ebp)
f013018b:	50                   	push   %eax
f013018c:	e8 b3 5f fe ff       	call   f0116144 <CB>
f0130191:	83 c4 10             	add    $0x10,%esp
f0130194:	85 c0                	test   %eax,%eax
f0130196:	74 17                	je     f01301af <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f0130198:	83 ec 04             	sub    $0x4,%esp
f013019b:	68 e0 cf 13 f0       	push   $0xf013cfe0
f01301a0:	68 5f 13 00 00       	push   $0x135f
f01301a5:	68 3a b5 13 f0       	push   $0xf013b53a
f01301aa:	e8 56 00 fd ff       	call   f0100205 <_panic>

			a+=4096;
f01301af:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f01301b6:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01301bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01301c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01301c5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01301c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01301cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01301d0:	f7 75 dc             	divl   -0x24(%ebp)
f01301d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01301d6:	29 d0                	sub    %edx,%eax
f01301d8:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01301dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01301e0:	74 05                	je     f01301e7 <test_initialize_dyn_block_system+0x209>
				break;
		}
f01301e2:	e9 61 ff ff ff       	jmp    f0130148 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f01301e7:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f01301e8:	83 ec 0c             	sub    $0xc,%esp
f01301eb:	68 40 d0 13 f0       	push   $0xf013d040
f01301f0:	e8 19 0b fd ff       	call   f0100d0e <cprintf>
f01301f5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01301f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01301fd:	c9                   	leave  
f01301fe:	c3                   	ret    

f01301ff <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f01301ff:	55                   	push   %ebp
f0130200:	89 e5                	mov    %esp,%ebp
f0130202:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130205:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130209:	77 07                	ja     f0130212 <nearest_pow2_ceil+0x13>
f013020b:	b8 01 00 00 00       	mov    $0x1,%eax
f0130210:	eb 20                	jmp    f0130232 <nearest_pow2_ceil+0x33>
    int power = 2;
f0130212:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130219:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f013021c:	eb 08                	jmp    f0130226 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f013021e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130221:	01 c0                	add    %eax,%eax
f0130223:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f0130226:	d1 6d 08             	shrl   0x8(%ebp)
f0130229:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013022d:	75 ef                	jne    f013021e <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f013022f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130232:	c9                   	leave  
f0130233:	c3                   	ret    

f0130234 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f0130234:	55                   	push   %ebp
f0130235:	89 e5                	mov    %esp,%ebp
f0130237:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f013023a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013023e:	77 07                	ja     f0130247 <log2_ceil+0x13>
f0130240:	b8 01 00 00 00       	mov    $0x1,%eax
f0130245:	eb 1b                	jmp    f0130262 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f0130247:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f013024e:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130251:	eb 03                	jmp    f0130256 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f0130253:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f0130256:	d1 6d 08             	shrl   0x8(%ebp)
f0130259:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013025d:	75 f4                	jne    f0130253 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f013025f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130262:	c9                   	leave  
f0130263:	c3                   	ret    

f0130264 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f0130264:	55                   	push   %ebp
f0130265:	89 e5                	mov    %esp,%ebp
f0130267:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f013026a:	8b 45 08             	mov    0x8(%ebp),%eax
f013026d:	8b 00                	mov    (%eax),%eax
f013026f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f0130272:	8b 45 08             	mov    0x8(%ebp),%eax
f0130275:	8b 00                	mov    (%eax),%eax
f0130277:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f013027a:	eb 52                	jmp    f01302ce <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f013027c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013027f:	8b 00                	mov    (%eax),%eax
f0130281:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f0130284:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130287:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013028a:	75 12                	jne    f013029e <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f013028c:	83 ec 0c             	sub    $0xc,%esp
f013028f:	68 98 d0 13 f0       	push   $0xf013d098
f0130294:	e8 75 0a fd ff       	call   f0100d0e <cprintf>
f0130299:	83 c4 10             	add    $0x10,%esp
			break;
f013029c:	eb 3f                	jmp    f01302dd <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f013029e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01302a2:	74 38                	je     f01302dc <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f01302a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302a7:	8b 00                	mov    (%eax),%eax
f01302a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f01302ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01302af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01302b2:	75 12                	jne    f01302c6 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f01302b4:	83 ec 0c             	sub    $0xc,%esp
f01302b7:	68 b4 d0 13 f0       	push   $0xf013d0b4
f01302bc:	e8 4d 0a fd ff       	call   f0100d0e <cprintf>
f01302c1:	83 c4 10             	add    $0x10,%esp
			break;
f01302c4:	eb 17                	jmp    f01302dd <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f01302c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302c9:	8b 00                	mov    (%eax),%eax
f01302cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f01302ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01302d2:	74 09                	je     f01302dd <detect_loop_in_FrameInfo_list+0x79>
f01302d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01302d8:	75 a2                	jne    f013027c <detect_loop_in_FrameInfo_list+0x18>
f01302da:	eb 01                	jmp    f01302dd <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f01302dc:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f01302dd:	83 ec 0c             	sub    $0xc,%esp
f01302e0:	68 cb d0 13 f0       	push   $0xf013d0cb
f01302e5:	e8 24 0a fd ff       	call   f0100d0e <cprintf>
f01302ea:	83 c4 10             	add    $0x10,%esp
}
f01302ed:	90                   	nop
f01302ee:	c9                   	leave  
f01302ef:	c3                   	ret    

f01302f0 <scarce_memory>:

void scarce_memory()
{
f01302f0:	55                   	push   %ebp
f01302f1:	89 e5                	mov    %esp,%ebp
f01302f3:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f01302f6:	a1 f0 1c 88 f0       	mov    0xf0881cf0,%eax
f01302fb:	ba 64 00 00 00       	mov    $0x64,%edx
f0130300:	29 c2                	sub    %eax,%edx
f0130302:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0130307:	0f af c2             	imul   %edx,%eax
f013030a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013030f:	f7 e2                	mul    %edx
f0130311:	89 d0                	mov    %edx,%eax
f0130313:	c1 e8 05             	shr    $0x5,%eax
f0130316:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f0130319:	a1 f0 1c 88 f0       	mov    0xf0881cf0,%eax
f013031e:	ba 64 00 00 00       	mov    $0x64,%edx
f0130323:	29 c2                	sub    %eax,%edx
f0130325:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f013032a:	89 d1                	mov    %edx,%ecx
f013032c:	0f af c8             	imul   %eax,%ecx
f013032f:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130334:	f7 e1                	mul    %ecx
f0130336:	c1 ea 05             	shr    $0x5,%edx
f0130339:	89 d0                	mov    %edx,%eax
f013033b:	c1 e0 02             	shl    $0x2,%eax
f013033e:	01 d0                	add    %edx,%eax
f0130340:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130347:	01 d0                	add    %edx,%eax
f0130349:	c1 e0 02             	shl    $0x2,%eax
f013034c:	29 c1                	sub    %eax,%ecx
f013034e:	89 ca                	mov    %ecx,%edx
f0130350:	85 d2                	test   %edx,%edx
f0130352:	74 03                	je     f0130357 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f0130354:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f0130357:	8b 15 10 1d 88 f0    	mov    0xf0881d10,%edx
f013035d:	a1 24 1d 88 f0       	mov    0xf0881d24,%eax
f0130362:	29 c2                	sub    %eax,%edx
f0130364:	89 d0                	mov    %edx,%eax
f0130366:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f0130369:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013036c:	2b 45 ec             	sub    -0x14(%ebp),%eax
f013036f:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f0130372:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130379:	eb 12                	jmp    f013038d <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f013037b:	83 ec 0c             	sub    $0xc,%esp
f013037e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0130381:	50                   	push   %eax
f0130382:	e8 6b 65 fd ff       	call   f01068f2 <allocate_frame>
f0130387:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f013038a:	ff 45 f0             	incl   -0x10(%ebp)
f013038d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130390:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0130393:	76 e6                	jbe    f013037b <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f0130395:	90                   	nop
f0130396:	c9                   	leave  
f0130397:	c3                   	ret    

f0130398 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f0130398:	55                   	push   %ebp
f0130399:	89 e5                	mov    %esp,%ebp
f013039b:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f013039e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f01303a5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f01303ac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f01303b3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01303b7:	0f 85 d0 01 00 00    	jne    f013058d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01303bd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01303c4:	e9 de 00 00 00       	jmp    f01304a7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f01303c9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01303d0:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01303d5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01303d8:	c1 e2 04             	shl    $0x4,%edx
f01303db:	01 d0                	add    %edx,%eax
f01303dd:	8b 00                	mov    (%eax),%eax
f01303df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01303e2:	e9 85 00 00 00       	jmp    f013046c <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f01303e7:	83 ec 0c             	sub    $0xc,%esp
f01303ea:	ff 75 e4             	pushl  -0x1c(%ebp)
f01303ed:	e8 19 7c fd ff       	call   f010800b <env_page_ws_get_size>
f01303f2:	83 c4 10             	add    $0x10,%esp
f01303f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01303f8:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01303fd:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130403:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130406:	0f af c2             	imul   %edx,%eax
f0130409:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f013040e:	f7 e2                	mul    %edx
f0130410:	89 d0                	mov    %edx,%eax
f0130412:	c1 e8 05             	shr    $0x5,%eax
f0130415:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130418:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013041d:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130423:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130426:	89 d1                	mov    %edx,%ecx
f0130428:	0f af c8             	imul   %eax,%ecx
f013042b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130430:	f7 e1                	mul    %ecx
f0130432:	c1 ea 05             	shr    $0x5,%edx
f0130435:	89 d0                	mov    %edx,%eax
f0130437:	c1 e0 02             	shl    $0x2,%eax
f013043a:	01 d0                	add    %edx,%eax
f013043c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130443:	01 d0                	add    %edx,%eax
f0130445:	c1 e0 02             	shl    $0x2,%eax
f0130448:	29 c1                	sub    %eax,%ecx
f013044a:	89 ca                	mov    %ecx,%edx
f013044c:	85 d2                	test   %edx,%edx
f013044e:	74 03                	je     f0130453 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f0130450:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f0130453:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130456:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0130459:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f013045e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130461:	c1 e2 04             	shl    $0x4,%edx
f0130464:	01 d0                	add    %edx,%eax
f0130466:	8b 40 08             	mov    0x8(%eax),%eax
f0130469:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013046c:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0130471:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130474:	c1 e2 04             	shl    $0x4,%edx
f0130477:	01 d0                	add    %edx,%eax
f0130479:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013047d:	74 08                	je     f0130487 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f013047f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130482:	8b 52 44             	mov    0x44(%edx),%edx
f0130485:	eb 05                	jmp    f013048c <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f0130487:	ba 00 00 00 00       	mov    $0x0,%edx
f013048c:	89 50 08             	mov    %edx,0x8(%eax)
f013048f:	8b 40 08             	mov    0x8(%eax),%eax
f0130492:	85 c0                	test   %eax,%eax
f0130494:	0f 85 4d ff ff ff    	jne    f01303e7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f013049a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013049e:	0f 85 43 ff ff ff    	jne    f01303e7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f01304a4:	ff 45 e8             	incl   -0x18(%ebp)
f01304a7:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01304ac:	0f b6 c0             	movzbl %al,%eax
f01304af:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01304b2:	0f 8f 11 ff ff ff    	jg     f01303c9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f01304b8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01304bf:	a1 f4 1c 88 f0       	mov    0xf0881cf4,%eax
f01304c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01304c7:	eb 19                	jmp    f01304e2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f01304c9:	83 ec 0c             	sub    $0xc,%esp
f01304cc:	ff 75 dc             	pushl  -0x24(%ebp)
f01304cf:	e8 37 7b fd ff       	call   f010800b <env_page_ws_get_size>
f01304d4:	83 c4 10             	add    $0x10,%esp
f01304d7:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f01304da:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f01304df:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01304e2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01304e6:	74 08                	je     f01304f0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f01304e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01304eb:	8b 40 44             	mov    0x44(%eax),%eax
f01304ee:	eb 05                	jmp    f01304f5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f01304f0:	b8 00 00 00 00       	mov    $0x0,%eax
f01304f5:	a3 fc 1c 88 f0       	mov    %eax,0xf0881cfc
f01304fa:	a1 fc 1c 88 f0       	mov    0xf0881cfc,%eax
f01304ff:	85 c0                	test   %eax,%eax
f0130501:	75 c6                	jne    f01304c9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130503:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130507:	75 c0                	jne    f01304c9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f0130509:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013050e:	85 c0                	test   %eax,%eax
f0130510:	0f 84 ec 00 00 00    	je     f0130602 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130516:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013051b:	83 ec 0c             	sub    $0xc,%esp
f013051e:	50                   	push   %eax
f013051f:	e8 e7 7a fd ff       	call   f010800b <env_page_ws_get_size>
f0130524:	83 c4 10             	add    $0x10,%esp
f0130527:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f013052a:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013052f:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130535:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130538:	0f af c2             	imul   %edx,%eax
f013053b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130540:	f7 e2                	mul    %edx
f0130542:	89 d0                	mov    %edx,%eax
f0130544:	c1 e8 05             	shr    $0x5,%eax
f0130547:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f013054a:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f013054f:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130555:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130558:	89 d1                	mov    %edx,%ecx
f013055a:	0f af c8             	imul   %eax,%ecx
f013055d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130562:	f7 e1                	mul    %ecx
f0130564:	c1 ea 05             	shr    $0x5,%edx
f0130567:	89 d0                	mov    %edx,%eax
f0130569:	c1 e0 02             	shl    $0x2,%eax
f013056c:	01 d0                	add    %edx,%eax
f013056e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130575:	01 d0                	add    %edx,%eax
f0130577:	c1 e0 02             	shl    $0x2,%eax
f013057a:	29 c1                	sub    %eax,%ecx
f013057c:	89 ca                	mov    %ecx,%edx
f013057e:	85 d2                	test   %edx,%edx
f0130580:	74 03                	je     f0130585 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f0130582:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130585:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130588:	89 45 ec             	mov    %eax,-0x14(%ebp)
f013058b:	eb 75                	jmp    f0130602 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f013058d:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0130592:	83 ec 0c             	sub    $0xc,%esp
f0130595:	50                   	push   %eax
f0130596:	e8 70 7a fd ff       	call   f010800b <env_page_ws_get_size>
f013059b:	83 c4 10             	add    $0x10,%esp
f013059e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01305a1:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01305a6:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01305ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01305af:	0f af c2             	imul   %edx,%eax
f01305b2:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01305b7:	f7 e2                	mul    %edx
f01305b9:	89 d0                	mov    %edx,%eax
f01305bb:	c1 e8 05             	shr    $0x5,%eax
f01305be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01305c1:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01305c6:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01305cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01305cf:	89 d1                	mov    %edx,%ecx
f01305d1:	0f af c8             	imul   %eax,%ecx
f01305d4:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01305d9:	f7 e1                	mul    %ecx
f01305db:	c1 ea 05             	shr    $0x5,%edx
f01305de:	89 d0                	mov    %edx,%eax
f01305e0:	c1 e0 02             	shl    $0x2,%eax
f01305e3:	01 d0                	add    %edx,%eax
f01305e5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01305ec:	01 d0                	add    %edx,%eax
f01305ee:	c1 e0 02             	shl    $0x2,%eax
f01305f1:	29 c1                	sub    %eax,%ecx
f01305f3:	89 ca                	mov    %ecx,%edx
f01305f5:	85 d2                	test   %edx,%edx
f01305f7:	74 03                	je     f01305fc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f01305f9:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f01305fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01305ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130602:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130605:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130608:	01 c2                	add    %eax,%edx
f013060a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013060d:	01 d0                	add    %edx,%eax
}
f013060f:	c9                   	leave  
f0130610:	c3                   	ret    

f0130611 <schenv>:


void schenv()
{
f0130611:	55                   	push   %ebp
f0130612:	89 e5                	mov    %esp,%ebp
f0130614:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130617:	c6 05 a8 1d 88 f0 00 	movb   $0x0,0xf0881da8
	__ne = NULL;
f013061e:	c7 05 38 1d 88 f0 00 	movl   $0x0,0xf0881d38
f0130625:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130628:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013062f:	eb 3f                	jmp    f0130670 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130631:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0130636:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130639:	c1 e2 04             	shl    $0x4,%edx
f013063c:	01 d0                	add    %edx,%eax
f013063e:	83 ec 0c             	sub    $0xc,%esp
f0130641:	50                   	push   %eax
f0130642:	e8 3e 3e fd ff       	call   f0104485 <queue_size>
f0130647:	83 c4 10             	add    $0x10,%esp
f013064a:	85 c0                	test   %eax,%eax
f013064c:	74 1f                	je     f013066d <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f013064e:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0130653:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130656:	c1 e2 04             	shl    $0x4,%edx
f0130659:	01 d0                	add    %edx,%eax
f013065b:	8b 40 04             	mov    0x4(%eax),%eax
f013065e:	a3 38 1d 88 f0       	mov    %eax,0xf0881d38
			__nl = i;
f0130663:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130666:	a2 a8 1d 88 f0       	mov    %al,0xf0881da8
			break;
f013066b:	eb 10                	jmp    f013067d <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f013066d:	ff 45 f4             	incl   -0xc(%ebp)
f0130670:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f0130675:	0f b6 c0             	movzbl %al,%eax
f0130678:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013067b:	7f b4                	jg     f0130631 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f013067d:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0130682:	85 c0                	test   %eax,%eax
f0130684:	0f 84 86 00 00 00    	je     f0130710 <schenv+0xff>
	{
		if (__ne != NULL)
f013068a:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f013068f:	85 c0                	test   %eax,%eax
f0130691:	74 4b                	je     f01306de <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0130693:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f0130698:	0f b6 c0             	movzbl %al,%eax
f013069b:	8d 50 01             	lea    0x1(%eax),%edx
f013069e:	a0 a8 1d 88 f0       	mov    0xf0881da8,%al
f01306a3:	0f b6 c0             	movzbl %al,%eax
f01306a6:	39 c2                	cmp    %eax,%edx
f01306a8:	7d 66                	jge    f0130710 <schenv+0xff>
			{
				__ne = curenv;
f01306aa:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01306af:	a3 38 1d 88 f0       	mov    %eax,0xf0881d38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01306b4:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f01306b9:	0f b6 c0             	movzbl %al,%eax
f01306bc:	8a 15 80 1d 88 f0    	mov    0xf0881d80,%dl
f01306c2:	0f b6 d2             	movzbl %dl,%edx
f01306c5:	4a                   	dec    %edx
f01306c6:	39 d0                	cmp    %edx,%eax
f01306c8:	7d 08                	jge    f01306d2 <schenv+0xc1>
f01306ca:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f01306cf:	40                   	inc    %eax
f01306d0:	eb 05                	jmp    f01306d7 <schenv+0xc6>
f01306d2:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f01306d7:	a2 a8 1d 88 f0       	mov    %al,0xf0881da8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f01306dc:	eb 32                	jmp    f0130710 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f01306de:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f01306e3:	a3 38 1d 88 f0       	mov    %eax,0xf0881d38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f01306e8:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f01306ed:	0f b6 c0             	movzbl %al,%eax
f01306f0:	8a 15 80 1d 88 f0    	mov    0xf0881d80,%dl
f01306f6:	0f b6 d2             	movzbl %dl,%edx
f01306f9:	4a                   	dec    %edx
f01306fa:	39 d0                	cmp    %edx,%eax
f01306fc:	7d 08                	jge    f0130706 <schenv+0xf5>
f01306fe:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f0130703:	40                   	inc    %eax
f0130704:	eb 05                	jmp    f013070b <schenv+0xfa>
f0130706:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f013070b:	a2 a8 1d 88 f0       	mov    %al,0xf0881da8
		}
	}
}
f0130710:	90                   	nop
f0130711:	c9                   	leave  
f0130712:	c3                   	ret    

f0130713 <chksch>:

void chksch(uint8 onoff)
{
f0130713:	55                   	push   %ebp
f0130714:	89 e5                	mov    %esp,%ebp
f0130716:	83 ec 04             	sub    $0x4,%esp
f0130719:	8b 45 08             	mov    0x8(%ebp),%eax
f013071c:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f013071f:	c7 05 94 1d 88 f0 00 	movl   $0x0,0xf0881d94
f0130726:	00 00 00 
	__ne = NULL;
f0130729:	c7 05 38 1d 88 f0 00 	movl   $0x0,0xf0881d38
f0130730:	00 00 00 
	__pl = 0 ;
f0130733:	c6 05 e0 1c 88 f0 00 	movb   $0x0,0xf0881ce0
	__nl = 0 ;
f013073a:	c6 05 a8 1d 88 f0 00 	movb   $0x0,0xf0881da8
	__chkstatus = onoff;
f0130741:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130744:	a2 34 1d 88 f0       	mov    %al,0xf0881d34
}
f0130749:	90                   	nop
f013074a:	c9                   	leave  
f013074b:	c3                   	ret    

f013074c <chk1>:
void chk1()
{
f013074c:	55                   	push   %ebp
f013074d:	89 e5                	mov    %esp,%ebp
f013074f:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130752:	a0 34 1d 88 f0       	mov    0xf0881d34,%al
f0130757:	84 c0                	test   %al,%al
f0130759:	74 2b                	je     f0130786 <chk1+0x3a>
		return ;
	__pe = curenv;
f013075b:	a1 f4 13 88 f0       	mov    0xf08813f4,%eax
f0130760:	a3 94 1d 88 f0       	mov    %eax,0xf0881d94
	__pl = __nl ;
f0130765:	a0 a8 1d 88 f0       	mov    0xf0881da8,%al
f013076a:	a2 e0 1c 88 f0       	mov    %al,0xf0881ce0
	if (__pe == NULL)
f013076f:	a1 94 1d 88 f0       	mov    0xf0881d94,%eax
f0130774:	85 c0                	test   %eax,%eax
f0130776:	75 07                	jne    f013077f <chk1+0x33>
	{
		__pl = 0;
f0130778:	c6 05 e0 1c 88 f0 00 	movb   $0x0,0xf0881ce0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f013077f:	e8 8d fe ff ff       	call   f0130611 <schenv>
f0130784:	eb 01                	jmp    f0130787 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130786:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0130787:	c9                   	leave  
f0130788:	c3                   	ret    

f0130789 <chk2>:
void chk2(struct Env* __se)
{
f0130789:	55                   	push   %ebp
f013078a:	89 e5                	mov    %esp,%ebp
f013078c:	53                   	push   %ebx
f013078d:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0130790:	a0 34 1d 88 f0       	mov    0xf0881d34,%al
f0130795:	84 c0                	test   %al,%al
f0130797:	0f 84 43 02 00 00    	je     f01309e0 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f013079d:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f01307a2:	39 45 08             	cmp    %eax,0x8(%ebp)
f01307a5:	74 19                	je     f01307c0 <chk2+0x37>
f01307a7:	68 e5 d0 13 f0       	push   $0xf013d0e5
f01307ac:	68 f2 d0 13 f0       	push   $0xf013d0f2
f01307b1:	68 c0 00 00 00       	push   $0xc0
f01307b6:	68 07 d1 13 f0       	push   $0xf013d107
f01307bb:	e8 fb fa fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f01307c0:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f01307c5:	85 c0                	test   %eax,%eax
f01307c7:	0f 84 25 01 00 00    	je     f01308f2 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f01307cd:	8b 15 2c 1d 88 f0    	mov    0xf0881d2c,%edx
f01307d3:	a0 a8 1d 88 f0       	mov    0xf0881da8,%al
f01307d8:	0f b6 c0             	movzbl %al,%eax
f01307db:	01 d0                	add    %edx,%eax
f01307dd:	8a 00                	mov    (%eax),%al
f01307df:	0f b6 d8             	movzbl %al,%ebx
f01307e2:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01307e7:	99                   	cltd   
f01307e8:	f7 fb                	idiv   %ebx
f01307ea:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01307f0:	8b 15 2c 1d 88 f0    	mov    0xf0881d2c,%edx
f01307f6:	a0 a8 1d 88 f0       	mov    0xf0881da8,%al
f01307fb:	0f b6 c0             	movzbl %al,%eax
f01307fe:	01 d0                	add    %edx,%eax
f0130800:	8a 00                	mov    (%eax),%al
f0130802:	0f b6 d8             	movzbl %al,%ebx
f0130805:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f013080a:	99                   	cltd   
f013080b:	f7 fb                	idiv   %ebx
f013080d:	89 c3                	mov    %eax,%ebx
f013080f:	89 c8                	mov    %ecx,%eax
f0130811:	99                   	cltd   
f0130812:	f7 fb                	idiv   %ebx
f0130814:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130818:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013081c:	83 e0 01             	and    $0x1,%eax
f013081f:	66 85 c0             	test   %ax,%ax
f0130822:	74 07                	je     f013082b <chk2+0xa2>
f0130824:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130828:	40                   	inc    %eax
f0130829:	eb 04                	jmp    f013082f <chk2+0xa6>
f013082b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f013082f:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130833:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130837:	89 d0                	mov    %edx,%eax
f0130839:	c1 e0 02             	shl    $0x2,%eax
f013083c:	01 d0                	add    %edx,%eax
f013083e:	01 c0                	add    %eax,%eax
f0130840:	01 d0                	add    %edx,%eax
f0130842:	c1 e0 02             	shl    $0x2,%eax
f0130845:	01 d0                	add    %edx,%eax
f0130847:	01 c0                	add    %eax,%eax
f0130849:	89 c1                	mov    %eax,%ecx
f013084b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130850:	f7 e9                	imul   %ecx
f0130852:	c1 fa 05             	sar    $0x5,%edx
f0130855:	89 c8                	mov    %ecx,%eax
f0130857:	c1 f8 1f             	sar    $0x1f,%eax
f013085a:	29 c2                	sub    %eax,%edx
f013085c:	89 d0                	mov    %edx,%eax
f013085e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130862:	e8 ef 3a fd ff       	call   f0104356 <kclock_read_cnt0>
f0130867:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f013086b:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f013086f:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130873:	76 0a                	jbe    f013087f <chk2+0xf6>
f0130875:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130879:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f013087d:	76 19                	jbe    f0130898 <chk2+0x10f>
f013087f:	68 20 d1 13 f0       	push   $0xf013d120
f0130884:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130889:	68 ca 00 00 00       	push   $0xca
f013088e:	68 07 d1 13 f0       	push   $0xf013d107
f0130893:	e8 23 fa fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130898:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013089f:	eb 44                	jmp    f01308e5 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f01308a1:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f01308a6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01308a9:	89 c2                	mov    %eax,%edx
f01308ab:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f01308b0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01308b3:	c1 e1 04             	shl    $0x4,%ecx
f01308b6:	01 c8                	add    %ecx,%eax
f01308b8:	83 ec 08             	sub    $0x8,%esp
f01308bb:	52                   	push   %edx
f01308bc:	50                   	push   %eax
f01308bd:	e8 dd 3d fd ff       	call   f010469f <find_env_in_queue>
f01308c2:	83 c4 10             	add    $0x10,%esp
f01308c5:	85 c0                	test   %eax,%eax
f01308c7:	74 19                	je     f01308e2 <chk2+0x159>
f01308c9:	68 44 d1 13 f0       	push   $0xf013d144
f01308ce:	68 f2 d0 13 f0       	push   $0xf013d0f2
f01308d3:	68 ce 00 00 00       	push   $0xce
f01308d8:	68 07 d1 13 f0       	push   $0xf013d107
f01308dd:	e8 d9 f9 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f01308e2:	ff 45 f4             	incl   -0xc(%ebp)
f01308e5:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01308ea:	0f b6 c0             	movzbl %al,%eax
f01308ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01308f0:	7f af                	jg     f01308a1 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f01308f2:	a1 94 1d 88 f0       	mov    0xf0881d94,%eax
f01308f7:	85 c0                	test   %eax,%eax
f01308f9:	0f 84 e2 00 00 00    	je     f01309e1 <chk2+0x258>
f01308ff:	8b 15 94 1d 88 f0    	mov    0xf0881d94,%edx
f0130905:	a1 38 1d 88 f0       	mov    0xf0881d38,%eax
f013090a:	39 c2                	cmp    %eax,%edx
f013090c:	0f 84 cf 00 00 00    	je     f01309e1 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130912:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f0130917:	0f b6 c0             	movzbl %al,%eax
f013091a:	8a 15 80 1d 88 f0    	mov    0xf0881d80,%dl
f0130920:	0f b6 d2             	movzbl %dl,%edx
f0130923:	4a                   	dec    %edx
f0130924:	39 d0                	cmp    %edx,%eax
f0130926:	74 08                	je     f0130930 <chk2+0x1a7>
f0130928:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f013092d:	40                   	inc    %eax
f013092e:	eb 05                	jmp    f0130935 <chk2+0x1ac>
f0130930:	a0 e0 1c 88 f0       	mov    0xf0881ce0,%al
f0130935:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130938:	a1 94 1d 88 f0       	mov    0xf0881d94,%eax
f013093d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130940:	89 c2                	mov    %eax,%edx
f0130942:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f0130947:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f013094b:	c1 e1 04             	shl    $0x4,%ecx
f013094e:	01 c8                	add    %ecx,%eax
f0130950:	83 ec 08             	sub    $0x8,%esp
f0130953:	52                   	push   %edx
f0130954:	50                   	push   %eax
f0130955:	e8 45 3d fd ff       	call   f010469f <find_env_in_queue>
f013095a:	83 c4 10             	add    $0x10,%esp
f013095d:	85 c0                	test   %eax,%eax
f013095f:	75 19                	jne    f013097a <chk2+0x1f1>
f0130961:	68 84 d1 13 f0       	push   $0xf013d184
f0130966:	68 f2 d0 13 f0       	push   $0xf013d0f2
f013096b:	68 d4 00 00 00       	push   $0xd4
f0130970:	68 07 d1 13 f0       	push   $0xf013d107
f0130975:	e8 41 f9 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f013097a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130981:	eb 4e                	jmp    f01309d1 <chk2+0x248>
		{
			if (i == __tl) continue;
f0130983:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130987:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013098a:	74 41                	je     f01309cd <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f013098c:	a1 94 1d 88 f0       	mov    0xf0881d94,%eax
f0130991:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130994:	89 c2                	mov    %eax,%edx
f0130996:	a1 e8 1c 88 f0       	mov    0xf0881ce8,%eax
f013099b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f013099e:	c1 e1 04             	shl    $0x4,%ecx
f01309a1:	01 c8                	add    %ecx,%eax
f01309a3:	83 ec 08             	sub    $0x8,%esp
f01309a6:	52                   	push   %edx
f01309a7:	50                   	push   %eax
f01309a8:	e8 f2 3c fd ff       	call   f010469f <find_env_in_queue>
f01309ad:	83 c4 10             	add    $0x10,%esp
f01309b0:	85 c0                	test   %eax,%eax
f01309b2:	74 1a                	je     f01309ce <chk2+0x245>
f01309b4:	68 c8 d1 13 f0       	push   $0xf013d1c8
f01309b9:	68 f2 d0 13 f0       	push   $0xf013d0f2
f01309be:	68 d8 00 00 00       	push   $0xd8
f01309c3:	68 07 d1 13 f0       	push   $0xf013d107
f01309c8:	e8 ee f8 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f01309cd:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f01309ce:	ff 45 f0             	incl   -0x10(%ebp)
f01309d1:	a0 80 1d 88 f0       	mov    0xf0881d80,%al
f01309d6:	0f b6 c0             	movzbl %al,%eax
f01309d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01309dc:	7f a5                	jg     f0130983 <chk2+0x1fa>
f01309de:	eb 01                	jmp    f01309e1 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f01309e0:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f01309e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01309e4:	c9                   	leave  
f01309e5:	c3                   	ret    

f01309e6 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f01309e6:	55                   	push   %ebp
f01309e7:	89 e5                	mov    %esp,%ebp
f01309e9:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f01309ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01309f3:	eb 40                	jmp    f0130a35 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f01309f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01309f8:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f01309fe:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0130a03:	83 ec 08             	sub    $0x8,%esp
f0130a06:	52                   	push   %edx
f0130a07:	50                   	push   %eax
f0130a08:	e8 9b 01 00 00       	call   f0130ba8 <check_va2pa>
f0130a0d:	83 c4 10             	add    $0x10,%esp
f0130a10:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130a13:	74 19                	je     f0130a2e <check_boot_pgdir+0x48>
f0130a15:	68 08 d2 13 f0       	push   $0xf013d208
f0130a1a:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130a1f:	68 fa 00 00 00       	push   $0xfa
f0130a24:	68 07 d1 13 f0       	push   $0xf013d107
f0130a29:	e8 d7 f7 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130a2e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130a38:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130a3e:	a1 78 1d 88 f0       	mov    0xf0881d78,%eax
f0130a43:	39 c2                	cmp    %eax,%edx
f0130a45:	72 ae                	jb     f01309f5 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130a47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130a4e:	eb 74                	jmp    f0130ac4 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130a53:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130a59:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0130a5e:	83 ec 08             	sub    $0x8,%esp
f0130a61:	52                   	push   %edx
f0130a62:	50                   	push   %eax
f0130a63:	e8 40 01 00 00       	call   f0130ba8 <check_va2pa>
f0130a68:	83 c4 10             	add    $0x10,%esp
f0130a6b:	c7 45 f0 00 b0 18 f0 	movl   $0xf018b000,-0x10(%ebp)
f0130a72:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130a79:	77 17                	ja     f0130a92 <check_boot_pgdir+0xac>
f0130a7b:	ff 75 f0             	pushl  -0x10(%ebp)
f0130a7e:	68 40 d2 13 f0       	push   $0xf013d240
f0130a83:	68 04 01 00 00       	push   $0x104
f0130a88:	68 07 d1 13 f0       	push   $0xf013d107
f0130a8d:	e8 73 f7 fc ff       	call   f0100205 <_panic>
f0130a92:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130a95:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0130a9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130a9e:	01 ca                	add    %ecx,%edx
f0130aa0:	39 d0                	cmp    %edx,%eax
f0130aa2:	74 19                	je     f0130abd <check_boot_pgdir+0xd7>
f0130aa4:	68 74 d2 13 f0       	push   $0xf013d274
f0130aa9:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130aae:	68 04 01 00 00       	push   $0x104
f0130ab3:	68 07 d1 13 f0       	push   $0xf013d107
f0130ab8:	e8 48 f7 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130abd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130ac4:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0130acb:	76 83                	jbe    f0130a50 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130acd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130ad4:	e9 af 00 00 00       	jmp    f0130b88 <check_boot_pgdir+0x1a2>
		switch (i) {
f0130ad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130adc:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130ae1:	74 11                	je     f0130af4 <check_boot_pgdir+0x10e>
f0130ae3:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130ae8:	72 36                	jb     f0130b20 <check_boot_pgdir+0x13a>
f0130aea:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0130aef:	83 f8 02             	cmp    $0x2,%eax
f0130af2:	77 2c                	ja     f0130b20 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130af4:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0130af9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130afc:	c1 e2 02             	shl    $0x2,%edx
f0130aff:	01 d0                	add    %edx,%eax
f0130b01:	8b 00                	mov    (%eax),%eax
f0130b03:	85 c0                	test   %eax,%eax
f0130b05:	75 7a                	jne    f0130b81 <check_boot_pgdir+0x19b>
f0130b07:	68 f6 d2 13 f0       	push   $0xf013d2f6
f0130b0c:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130b11:	68 0f 01 00 00       	push   $0x10f
f0130b16:	68 07 d1 13 f0       	push   $0xf013d107
f0130b1b:	e8 e5 f6 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0130b20:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130b27:	76 2c                	jbe    f0130b55 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0130b29:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0130b2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130b31:	c1 e2 02             	shl    $0x2,%edx
f0130b34:	01 d0                	add    %edx,%eax
f0130b36:	8b 00                	mov    (%eax),%eax
f0130b38:	85 c0                	test   %eax,%eax
f0130b3a:	75 48                	jne    f0130b84 <check_boot_pgdir+0x19e>
f0130b3c:	68 f6 d2 13 f0       	push   $0xf013d2f6
f0130b41:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130b46:	68 13 01 00 00       	push   $0x113
f0130b4b:	68 07 d1 13 f0       	push   $0xf013d107
f0130b50:	e8 b0 f6 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0130b55:	a1 7c 1d 88 f0       	mov    0xf0881d7c,%eax
f0130b5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130b5d:	c1 e2 02             	shl    $0x2,%edx
f0130b60:	01 d0                	add    %edx,%eax
f0130b62:	8b 00                	mov    (%eax),%eax
f0130b64:	85 c0                	test   %eax,%eax
f0130b66:	74 1c                	je     f0130b84 <check_boot_pgdir+0x19e>
f0130b68:	68 0c d3 13 f0       	push   $0xf013d30c
f0130b6d:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130b72:	68 15 01 00 00       	push   $0x115
f0130b77:	68 07 d1 13 f0       	push   $0xf013d107
f0130b7c:	e8 84 f6 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0130b81:	90                   	nop
f0130b82:	eb 01                	jmp    f0130b85 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0130b84:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0130b85:	ff 45 f4             	incl   -0xc(%ebp)
f0130b88:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0130b8f:	0f 86 44 ff ff ff    	jbe    f0130ad9 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0130b95:	83 ec 0c             	sub    $0xc,%esp
f0130b98:	68 28 d3 13 f0       	push   $0xf013d328
f0130b9d:	e8 6c 01 fd ff       	call   f0100d0e <cprintf>
f0130ba2:	83 c4 10             	add    $0x10,%esp
}
f0130ba5:	90                   	nop
f0130ba6:	c9                   	leave  
f0130ba7:	c3                   	ret    

f0130ba8 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0130ba8:	55                   	push   %ebp
f0130ba9:	89 e5                	mov    %esp,%ebp
f0130bab:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0130bae:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130bb1:	c1 e8 16             	shr    $0x16,%eax
f0130bb4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130bbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bbe:	01 d0                	add    %edx,%eax
f0130bc0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0130bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bc6:	8b 00                	mov    (%eax),%eax
f0130bc8:	83 e0 01             	and    $0x1,%eax
f0130bcb:	85 c0                	test   %eax,%eax
f0130bcd:	75 0a                	jne    f0130bd9 <check_va2pa+0x31>
		return ~0;
f0130bcf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130bd4:	e9 87 00 00 00       	jmp    f0130c60 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0130bd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bdc:	8b 00                	mov    (%eax),%eax
f0130bde:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0130be3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130be6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130be9:	c1 e8 0c             	shr    $0xc,%eax
f0130bec:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130bef:	a1 10 1d 88 f0       	mov    0xf0881d10,%eax
f0130bf4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130bf7:	72 17                	jb     f0130c10 <check_va2pa+0x68>
f0130bf9:	ff 75 f0             	pushl  -0x10(%ebp)
f0130bfc:	68 48 d3 13 f0       	push   $0xf013d348
f0130c01:	68 2b 01 00 00       	push   $0x12b
f0130c06:	68 07 d1 13 f0       	push   $0xf013d107
f0130c0b:	e8 f5 f5 fc ff       	call   f0100205 <_panic>
f0130c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130c13:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130c18:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0130c1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c1e:	c1 e8 0c             	shr    $0xc,%eax
f0130c21:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130c26:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130c2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130c30:	01 d0                	add    %edx,%eax
f0130c32:	8b 00                	mov    (%eax),%eax
f0130c34:	83 e0 01             	and    $0x1,%eax
f0130c37:	85 c0                	test   %eax,%eax
f0130c39:	75 07                	jne    f0130c42 <check_va2pa+0x9a>
		return ~0;
f0130c3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130c40:	eb 1e                	jmp    f0130c60 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0130c42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c45:	c1 e8 0c             	shr    $0xc,%eax
f0130c48:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130c4d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130c54:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130c57:	01 d0                	add    %edx,%eax
f0130c59:	8b 00                	mov    (%eax),%eax
f0130c5b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0130c60:	c9                   	leave  
f0130c61:	c3                   	ret    

f0130c62 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0130c62:	55                   	push   %ebp
f0130c63:	89 e5                	mov    %esp,%ebp
f0130c65:	53                   	push   %ebx
f0130c66:	83 ec 14             	sub    $0x14,%esp
f0130c69:	8b 45 10             	mov    0x10(%ebp),%eax
f0130c6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130c6f:	8b 45 14             	mov    0x14(%ebp),%eax
f0130c72:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0130c75:	8b 45 18             	mov    0x18(%ebp),%eax
f0130c78:	ba 00 00 00 00       	mov    $0x0,%edx
f0130c7d:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130c80:	77 55                	ja     f0130cd7 <printnum+0x75>
f0130c82:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0130c85:	72 05                	jb     f0130c8c <printnum+0x2a>
f0130c87:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130c8a:	77 4b                	ja     f0130cd7 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0130c8c:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0130c8f:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0130c92:	8b 45 18             	mov    0x18(%ebp),%eax
f0130c95:	ba 00 00 00 00       	mov    $0x0,%edx
f0130c9a:	52                   	push   %edx
f0130c9b:	50                   	push   %eax
f0130c9c:	ff 75 f4             	pushl  -0xc(%ebp)
f0130c9f:	ff 75 f0             	pushl  -0x10(%ebp)
f0130ca2:	e8 09 28 00 00       	call   f01334b0 <__udivdi3>
f0130ca7:	83 c4 10             	add    $0x10,%esp
f0130caa:	83 ec 04             	sub    $0x4,%esp
f0130cad:	ff 75 20             	pushl  0x20(%ebp)
f0130cb0:	53                   	push   %ebx
f0130cb1:	ff 75 18             	pushl  0x18(%ebp)
f0130cb4:	52                   	push   %edx
f0130cb5:	50                   	push   %eax
f0130cb6:	ff 75 0c             	pushl  0xc(%ebp)
f0130cb9:	ff 75 08             	pushl  0x8(%ebp)
f0130cbc:	e8 a1 ff ff ff       	call   f0130c62 <printnum>
f0130cc1:	83 c4 20             	add    $0x20,%esp
f0130cc4:	eb 1a                	jmp    f0130ce0 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130cc6:	83 ec 08             	sub    $0x8,%esp
f0130cc9:	ff 75 0c             	pushl  0xc(%ebp)
f0130ccc:	ff 75 20             	pushl  0x20(%ebp)
f0130ccf:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cd2:	ff d0                	call   *%eax
f0130cd4:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130cd7:	ff 4d 1c             	decl   0x1c(%ebp)
f0130cda:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0130cde:	7f e6                	jg     f0130cc6 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0130ce0:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130ce3:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130ceb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130cee:	53                   	push   %ebx
f0130cef:	51                   	push   %ecx
f0130cf0:	52                   	push   %edx
f0130cf1:	50                   	push   %eax
f0130cf2:	e8 c9 28 00 00       	call   f01335c0 <__umoddi3>
f0130cf7:	83 c4 10             	add    $0x10,%esp
f0130cfa:	05 94 d5 13 f0       	add    $0xf013d594,%eax
f0130cff:	8a 00                	mov    (%eax),%al
f0130d01:	0f be c0             	movsbl %al,%eax
f0130d04:	83 ec 08             	sub    $0x8,%esp
f0130d07:	ff 75 0c             	pushl  0xc(%ebp)
f0130d0a:	50                   	push   %eax
f0130d0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d0e:	ff d0                	call   *%eax
f0130d10:	83 c4 10             	add    $0x10,%esp
}
f0130d13:	90                   	nop
f0130d14:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130d17:	c9                   	leave  
f0130d18:	c3                   	ret    

f0130d19 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0130d19:	55                   	push   %ebp
f0130d1a:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130d1c:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130d20:	7e 1c                	jle    f0130d3e <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130d22:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d25:	8b 00                	mov    (%eax),%eax
f0130d27:	8d 50 08             	lea    0x8(%eax),%edx
f0130d2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d2d:	89 10                	mov    %edx,(%eax)
f0130d2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d32:	8b 00                	mov    (%eax),%eax
f0130d34:	83 e8 08             	sub    $0x8,%eax
f0130d37:	8b 50 04             	mov    0x4(%eax),%edx
f0130d3a:	8b 00                	mov    (%eax),%eax
f0130d3c:	eb 40                	jmp    f0130d7e <getuint+0x65>
	else if (lflag)
f0130d3e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130d42:	74 1e                	je     f0130d62 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0130d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d47:	8b 00                	mov    (%eax),%eax
f0130d49:	8d 50 04             	lea    0x4(%eax),%edx
f0130d4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d4f:	89 10                	mov    %edx,(%eax)
f0130d51:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d54:	8b 00                	mov    (%eax),%eax
f0130d56:	83 e8 04             	sub    $0x4,%eax
f0130d59:	8b 00                	mov    (%eax),%eax
f0130d5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0130d60:	eb 1c                	jmp    f0130d7e <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0130d62:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d65:	8b 00                	mov    (%eax),%eax
f0130d67:	8d 50 04             	lea    0x4(%eax),%edx
f0130d6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d6d:	89 10                	mov    %edx,(%eax)
f0130d6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d72:	8b 00                	mov    (%eax),%eax
f0130d74:	83 e8 04             	sub    $0x4,%eax
f0130d77:	8b 00                	mov    (%eax),%eax
f0130d79:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0130d7e:	5d                   	pop    %ebp
f0130d7f:	c3                   	ret    

f0130d80 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0130d80:	55                   	push   %ebp
f0130d81:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0130d83:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130d87:	7e 1c                	jle    f0130da5 <getint+0x25>
		return va_arg(*ap, long long);
f0130d89:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d8c:	8b 00                	mov    (%eax),%eax
f0130d8e:	8d 50 08             	lea    0x8(%eax),%edx
f0130d91:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d94:	89 10                	mov    %edx,(%eax)
f0130d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d99:	8b 00                	mov    (%eax),%eax
f0130d9b:	83 e8 08             	sub    $0x8,%eax
f0130d9e:	8b 50 04             	mov    0x4(%eax),%edx
f0130da1:	8b 00                	mov    (%eax),%eax
f0130da3:	eb 38                	jmp    f0130ddd <getint+0x5d>
	else if (lflag)
f0130da5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130da9:	74 1a                	je     f0130dc5 <getint+0x45>
		return va_arg(*ap, long);
f0130dab:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dae:	8b 00                	mov    (%eax),%eax
f0130db0:	8d 50 04             	lea    0x4(%eax),%edx
f0130db3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130db6:	89 10                	mov    %edx,(%eax)
f0130db8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dbb:	8b 00                	mov    (%eax),%eax
f0130dbd:	83 e8 04             	sub    $0x4,%eax
f0130dc0:	8b 00                	mov    (%eax),%eax
f0130dc2:	99                   	cltd   
f0130dc3:	eb 18                	jmp    f0130ddd <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130dc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dc8:	8b 00                	mov    (%eax),%eax
f0130dca:	8d 50 04             	lea    0x4(%eax),%edx
f0130dcd:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dd0:	89 10                	mov    %edx,(%eax)
f0130dd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dd5:	8b 00                	mov    (%eax),%eax
f0130dd7:	83 e8 04             	sub    $0x4,%eax
f0130dda:	8b 00                	mov    (%eax),%eax
f0130ddc:	99                   	cltd   
}
f0130ddd:	5d                   	pop    %ebp
f0130dde:	c3                   	ret    

f0130ddf <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0130ddf:	55                   	push   %ebp
f0130de0:	89 e5                	mov    %esp,%ebp
f0130de2:	56                   	push   %esi
f0130de3:	53                   	push   %ebx
f0130de4:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130de7:	eb 17                	jmp    f0130e00 <vprintfmt+0x21>
			if (ch == '\0')
f0130de9:	85 db                	test   %ebx,%ebx
f0130deb:	0f 84 af 03 00 00    	je     f01311a0 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0130df1:	83 ec 08             	sub    $0x8,%esp
f0130df4:	ff 75 0c             	pushl  0xc(%ebp)
f0130df7:	53                   	push   %ebx
f0130df8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dfb:	ff d0                	call   *%eax
f0130dfd:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130e00:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e03:	8d 50 01             	lea    0x1(%eax),%edx
f0130e06:	89 55 10             	mov    %edx,0x10(%ebp)
f0130e09:	8a 00                	mov    (%eax),%al
f0130e0b:	0f b6 d8             	movzbl %al,%ebx
f0130e0e:	83 fb 25             	cmp    $0x25,%ebx
f0130e11:	75 d6                	jne    f0130de9 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130e13:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130e17:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0130e1e:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130e25:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0130e2c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130e33:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e36:	8d 50 01             	lea    0x1(%eax),%edx
f0130e39:	89 55 10             	mov    %edx,0x10(%ebp)
f0130e3c:	8a 00                	mov    (%eax),%al
f0130e3e:	0f b6 d8             	movzbl %al,%ebx
f0130e41:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0130e44:	83 f8 55             	cmp    $0x55,%eax
f0130e47:	0f 87 2b 03 00 00    	ja     f0131178 <vprintfmt+0x399>
f0130e4d:	8b 04 85 b8 d5 13 f0 	mov    -0xfec2a48(,%eax,4),%eax
f0130e54:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0130e56:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0130e5a:	eb d7                	jmp    f0130e33 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0130e5c:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0130e60:	eb d1                	jmp    f0130e33 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130e62:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0130e69:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130e6c:	89 d0                	mov    %edx,%eax
f0130e6e:	c1 e0 02             	shl    $0x2,%eax
f0130e71:	01 d0                	add    %edx,%eax
f0130e73:	01 c0                	add    %eax,%eax
f0130e75:	01 d8                	add    %ebx,%eax
f0130e77:	83 e8 30             	sub    $0x30,%eax
f0130e7a:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0130e7d:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e80:	8a 00                	mov    (%eax),%al
f0130e82:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0130e85:	83 fb 2f             	cmp    $0x2f,%ebx
f0130e88:	7e 3e                	jle    f0130ec8 <vprintfmt+0xe9>
f0130e8a:	83 fb 39             	cmp    $0x39,%ebx
f0130e8d:	7f 39                	jg     f0130ec8 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0130e8f:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0130e92:	eb d5                	jmp    f0130e69 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0130e94:	8b 45 14             	mov    0x14(%ebp),%eax
f0130e97:	83 c0 04             	add    $0x4,%eax
f0130e9a:	89 45 14             	mov    %eax,0x14(%ebp)
f0130e9d:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ea0:	83 e8 04             	sub    $0x4,%eax
f0130ea3:	8b 00                	mov    (%eax),%eax
f0130ea5:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130ea8:	eb 1f                	jmp    f0130ec9 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0130eaa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130eae:	79 83                	jns    f0130e33 <vprintfmt+0x54>
				width = 0;
f0130eb0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0130eb7:	e9 77 ff ff ff       	jmp    f0130e33 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0130ebc:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0130ec3:	e9 6b ff ff ff       	jmp    f0130e33 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130ec8:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0130ec9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130ecd:	0f 89 60 ff ff ff    	jns    f0130e33 <vprintfmt+0x54>
				width = precision, precision = -1;
f0130ed3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130ed6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130ed9:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0130ee0:	e9 4e ff ff ff       	jmp    f0130e33 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0130ee5:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0130ee8:	e9 46 ff ff ff       	jmp    f0130e33 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0130eed:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ef0:	83 c0 04             	add    $0x4,%eax
f0130ef3:	89 45 14             	mov    %eax,0x14(%ebp)
f0130ef6:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ef9:	83 e8 04             	sub    $0x4,%eax
f0130efc:	8b 00                	mov    (%eax),%eax
f0130efe:	83 ec 08             	sub    $0x8,%esp
f0130f01:	ff 75 0c             	pushl  0xc(%ebp)
f0130f04:	50                   	push   %eax
f0130f05:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f08:	ff d0                	call   *%eax
f0130f0a:	83 c4 10             	add    $0x10,%esp
			break;
f0130f0d:	e9 89 02 00 00       	jmp    f013119b <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0130f12:	8b 45 14             	mov    0x14(%ebp),%eax
f0130f15:	83 c0 04             	add    $0x4,%eax
f0130f18:	89 45 14             	mov    %eax,0x14(%ebp)
f0130f1b:	8b 45 14             	mov    0x14(%ebp),%eax
f0130f1e:	83 e8 04             	sub    $0x4,%eax
f0130f21:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0130f23:	85 db                	test   %ebx,%ebx
f0130f25:	79 02                	jns    f0130f29 <vprintfmt+0x14a>
				err = -err;
f0130f27:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0130f29:	83 fb 64             	cmp    $0x64,%ebx
f0130f2c:	7f 0b                	jg     f0130f39 <vprintfmt+0x15a>
f0130f2e:	8b 34 9d 00 d4 13 f0 	mov    -0xfec2c00(,%ebx,4),%esi
f0130f35:	85 f6                	test   %esi,%esi
f0130f37:	75 19                	jne    f0130f52 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0130f39:	53                   	push   %ebx
f0130f3a:	68 a5 d5 13 f0       	push   $0xf013d5a5
f0130f3f:	ff 75 0c             	pushl  0xc(%ebp)
f0130f42:	ff 75 08             	pushl  0x8(%ebp)
f0130f45:	e8 5e 02 00 00       	call   f01311a8 <printfmt>
f0130f4a:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0130f4d:	e9 49 02 00 00       	jmp    f013119b <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0130f52:	56                   	push   %esi
f0130f53:	68 ae d5 13 f0       	push   $0xf013d5ae
f0130f58:	ff 75 0c             	pushl  0xc(%ebp)
f0130f5b:	ff 75 08             	pushl  0x8(%ebp)
f0130f5e:	e8 45 02 00 00       	call   f01311a8 <printfmt>
f0130f63:	83 c4 10             	add    $0x10,%esp
			break;
f0130f66:	e9 30 02 00 00       	jmp    f013119b <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0130f6b:	8b 45 14             	mov    0x14(%ebp),%eax
f0130f6e:	83 c0 04             	add    $0x4,%eax
f0130f71:	89 45 14             	mov    %eax,0x14(%ebp)
f0130f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0130f77:	83 e8 04             	sub    $0x4,%eax
f0130f7a:	8b 30                	mov    (%eax),%esi
f0130f7c:	85 f6                	test   %esi,%esi
f0130f7e:	75 05                	jne    f0130f85 <vprintfmt+0x1a6>
				p = "(null)";
f0130f80:	be b1 d5 13 f0       	mov    $0xf013d5b1,%esi
			if (width > 0 && padc != '-')
f0130f85:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130f89:	7e 6d                	jle    f0130ff8 <vprintfmt+0x219>
f0130f8b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0130f8f:	74 67                	je     f0130ff8 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0130f91:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130f94:	83 ec 08             	sub    $0x8,%esp
f0130f97:	50                   	push   %eax
f0130f98:	56                   	push   %esi
f0130f99:	e8 12 05 00 00       	call   f01314b0 <strnlen>
f0130f9e:	83 c4 10             	add    $0x10,%esp
f0130fa1:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0130fa4:	eb 16                	jmp    f0130fbc <vprintfmt+0x1dd>
					putch(padc, putdat);
f0130fa6:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0130faa:	83 ec 08             	sub    $0x8,%esp
f0130fad:	ff 75 0c             	pushl  0xc(%ebp)
f0130fb0:	50                   	push   %eax
f0130fb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fb4:	ff d0                	call   *%eax
f0130fb6:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0130fb9:	ff 4d e4             	decl   -0x1c(%ebp)
f0130fbc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130fc0:	7f e4                	jg     f0130fa6 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130fc2:	eb 34                	jmp    f0130ff8 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0130fc4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130fc8:	74 1c                	je     f0130fe6 <vprintfmt+0x207>
f0130fca:	83 fb 1f             	cmp    $0x1f,%ebx
f0130fcd:	7e 05                	jle    f0130fd4 <vprintfmt+0x1f5>
f0130fcf:	83 fb 7e             	cmp    $0x7e,%ebx
f0130fd2:	7e 12                	jle    f0130fe6 <vprintfmt+0x207>
					putch('?', putdat);
f0130fd4:	83 ec 08             	sub    $0x8,%esp
f0130fd7:	ff 75 0c             	pushl  0xc(%ebp)
f0130fda:	6a 3f                	push   $0x3f
f0130fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fdf:	ff d0                	call   *%eax
f0130fe1:	83 c4 10             	add    $0x10,%esp
f0130fe4:	eb 0f                	jmp    f0130ff5 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0130fe6:	83 ec 08             	sub    $0x8,%esp
f0130fe9:	ff 75 0c             	pushl  0xc(%ebp)
f0130fec:	53                   	push   %ebx
f0130fed:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ff0:	ff d0                	call   *%eax
f0130ff2:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130ff5:	ff 4d e4             	decl   -0x1c(%ebp)
f0130ff8:	89 f0                	mov    %esi,%eax
f0130ffa:	8d 70 01             	lea    0x1(%eax),%esi
f0130ffd:	8a 00                	mov    (%eax),%al
f0130fff:	0f be d8             	movsbl %al,%ebx
f0131002:	85 db                	test   %ebx,%ebx
f0131004:	74 24                	je     f013102a <vprintfmt+0x24b>
f0131006:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f013100a:	78 b8                	js     f0130fc4 <vprintfmt+0x1e5>
f013100c:	ff 4d e0             	decl   -0x20(%ebp)
f013100f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131013:	79 af                	jns    f0130fc4 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0131015:	eb 13                	jmp    f013102a <vprintfmt+0x24b>
				putch(' ', putdat);
f0131017:	83 ec 08             	sub    $0x8,%esp
f013101a:	ff 75 0c             	pushl  0xc(%ebp)
f013101d:	6a 20                	push   $0x20
f013101f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131022:	ff d0                	call   *%eax
f0131024:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0131027:	ff 4d e4             	decl   -0x1c(%ebp)
f013102a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013102e:	7f e7                	jg     f0131017 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0131030:	e9 66 01 00 00       	jmp    f013119b <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0131035:	83 ec 08             	sub    $0x8,%esp
f0131038:	ff 75 e8             	pushl  -0x18(%ebp)
f013103b:	8d 45 14             	lea    0x14(%ebp),%eax
f013103e:	50                   	push   %eax
f013103f:	e8 3c fd ff ff       	call   f0130d80 <getint>
f0131044:	83 c4 10             	add    $0x10,%esp
f0131047:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013104a:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f013104d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131050:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131053:	85 d2                	test   %edx,%edx
f0131055:	79 23                	jns    f013107a <vprintfmt+0x29b>
				putch('-', putdat);
f0131057:	83 ec 08             	sub    $0x8,%esp
f013105a:	ff 75 0c             	pushl  0xc(%ebp)
f013105d:	6a 2d                	push   $0x2d
f013105f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131062:	ff d0                	call   *%eax
f0131064:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0131067:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013106a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013106d:	f7 d8                	neg    %eax
f013106f:	83 d2 00             	adc    $0x0,%edx
f0131072:	f7 da                	neg    %edx
f0131074:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131077:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f013107a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0131081:	e9 bc 00 00 00       	jmp    f0131142 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0131086:	83 ec 08             	sub    $0x8,%esp
f0131089:	ff 75 e8             	pushl  -0x18(%ebp)
f013108c:	8d 45 14             	lea    0x14(%ebp),%eax
f013108f:	50                   	push   %eax
f0131090:	e8 84 fc ff ff       	call   f0130d19 <getuint>
f0131095:	83 c4 10             	add    $0x10,%esp
f0131098:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013109b:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f013109e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01310a5:	e9 98 00 00 00       	jmp    f0131142 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f01310aa:	83 ec 08             	sub    $0x8,%esp
f01310ad:	ff 75 0c             	pushl  0xc(%ebp)
f01310b0:	6a 58                	push   $0x58
f01310b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01310b5:	ff d0                	call   *%eax
f01310b7:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01310ba:	83 ec 08             	sub    $0x8,%esp
f01310bd:	ff 75 0c             	pushl  0xc(%ebp)
f01310c0:	6a 58                	push   $0x58
f01310c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01310c5:	ff d0                	call   *%eax
f01310c7:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01310ca:	83 ec 08             	sub    $0x8,%esp
f01310cd:	ff 75 0c             	pushl  0xc(%ebp)
f01310d0:	6a 58                	push   $0x58
f01310d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01310d5:	ff d0                	call   *%eax
f01310d7:	83 c4 10             	add    $0x10,%esp
			break;
f01310da:	e9 bc 00 00 00       	jmp    f013119b <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f01310df:	83 ec 08             	sub    $0x8,%esp
f01310e2:	ff 75 0c             	pushl  0xc(%ebp)
f01310e5:	6a 30                	push   $0x30
f01310e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01310ea:	ff d0                	call   *%eax
f01310ec:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f01310ef:	83 ec 08             	sub    $0x8,%esp
f01310f2:	ff 75 0c             	pushl  0xc(%ebp)
f01310f5:	6a 78                	push   $0x78
f01310f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01310fa:	ff d0                	call   *%eax
f01310fc:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f01310ff:	8b 45 14             	mov    0x14(%ebp),%eax
f0131102:	83 c0 04             	add    $0x4,%eax
f0131105:	89 45 14             	mov    %eax,0x14(%ebp)
f0131108:	8b 45 14             	mov    0x14(%ebp),%eax
f013110b:	83 e8 04             	sub    $0x4,%eax
f013110e:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0131110:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131113:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f013111a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0131121:	eb 1f                	jmp    f0131142 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0131123:	83 ec 08             	sub    $0x8,%esp
f0131126:	ff 75 e8             	pushl  -0x18(%ebp)
f0131129:	8d 45 14             	lea    0x14(%ebp),%eax
f013112c:	50                   	push   %eax
f013112d:	e8 e7 fb ff ff       	call   f0130d19 <getuint>
f0131132:	83 c4 10             	add    $0x10,%esp
f0131135:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131138:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f013113b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0131142:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0131146:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131149:	83 ec 04             	sub    $0x4,%esp
f013114c:	52                   	push   %edx
f013114d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0131150:	50                   	push   %eax
f0131151:	ff 75 f4             	pushl  -0xc(%ebp)
f0131154:	ff 75 f0             	pushl  -0x10(%ebp)
f0131157:	ff 75 0c             	pushl  0xc(%ebp)
f013115a:	ff 75 08             	pushl  0x8(%ebp)
f013115d:	e8 00 fb ff ff       	call   f0130c62 <printnum>
f0131162:	83 c4 20             	add    $0x20,%esp
			break;
f0131165:	eb 34                	jmp    f013119b <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0131167:	83 ec 08             	sub    $0x8,%esp
f013116a:	ff 75 0c             	pushl  0xc(%ebp)
f013116d:	53                   	push   %ebx
f013116e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131171:	ff d0                	call   *%eax
f0131173:	83 c4 10             	add    $0x10,%esp
			break;
f0131176:	eb 23                	jmp    f013119b <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0131178:	83 ec 08             	sub    $0x8,%esp
f013117b:	ff 75 0c             	pushl  0xc(%ebp)
f013117e:	6a 25                	push   $0x25
f0131180:	8b 45 08             	mov    0x8(%ebp),%eax
f0131183:	ff d0                	call   *%eax
f0131185:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0131188:	ff 4d 10             	decl   0x10(%ebp)
f013118b:	eb 03                	jmp    f0131190 <vprintfmt+0x3b1>
f013118d:	ff 4d 10             	decl   0x10(%ebp)
f0131190:	8b 45 10             	mov    0x10(%ebp),%eax
f0131193:	48                   	dec    %eax
f0131194:	8a 00                	mov    (%eax),%al
f0131196:	3c 25                	cmp    $0x25,%al
f0131198:	75 f3                	jne    f013118d <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f013119a:	90                   	nop
		}
	}
f013119b:	e9 47 fc ff ff       	jmp    f0130de7 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f01311a0:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f01311a1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01311a4:	5b                   	pop    %ebx
f01311a5:	5e                   	pop    %esi
f01311a6:	5d                   	pop    %ebp
f01311a7:	c3                   	ret    

f01311a8 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01311a8:	55                   	push   %ebp
f01311a9:	89 e5                	mov    %esp,%ebp
f01311ab:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01311ae:	8d 45 10             	lea    0x10(%ebp),%eax
f01311b1:	83 c0 04             	add    $0x4,%eax
f01311b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f01311b7:	8b 45 10             	mov    0x10(%ebp),%eax
f01311ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01311bd:	50                   	push   %eax
f01311be:	ff 75 0c             	pushl  0xc(%ebp)
f01311c1:	ff 75 08             	pushl  0x8(%ebp)
f01311c4:	e8 16 fc ff ff       	call   f0130ddf <vprintfmt>
f01311c9:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01311cc:	90                   	nop
f01311cd:	c9                   	leave  
f01311ce:	c3                   	ret    

f01311cf <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f01311cf:	55                   	push   %ebp
f01311d0:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f01311d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311d5:	8b 40 08             	mov    0x8(%eax),%eax
f01311d8:	8d 50 01             	lea    0x1(%eax),%edx
f01311db:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311de:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f01311e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311e4:	8b 10                	mov    (%eax),%edx
f01311e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311e9:	8b 40 04             	mov    0x4(%eax),%eax
f01311ec:	39 c2                	cmp    %eax,%edx
f01311ee:	73 12                	jae    f0131202 <sprintputch+0x33>
		*b->buf++ = ch;
f01311f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311f3:	8b 00                	mov    (%eax),%eax
f01311f5:	8d 48 01             	lea    0x1(%eax),%ecx
f01311f8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01311fb:	89 0a                	mov    %ecx,(%edx)
f01311fd:	8b 55 08             	mov    0x8(%ebp),%edx
f0131200:	88 10                	mov    %dl,(%eax)
}
f0131202:	90                   	nop
f0131203:	5d                   	pop    %ebp
f0131204:	c3                   	ret    

f0131205 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0131205:	55                   	push   %ebp
f0131206:	89 e5                	mov    %esp,%ebp
f0131208:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f013120b:	8b 45 08             	mov    0x8(%ebp),%eax
f013120e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131211:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131214:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131217:	8b 45 08             	mov    0x8(%ebp),%eax
f013121a:	01 d0                	add    %edx,%eax
f013121c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013121f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0131226:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013122a:	74 06                	je     f0131232 <vsnprintf+0x2d>
f013122c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131230:	7f 07                	jg     f0131239 <vsnprintf+0x34>
		return -E_INVAL;
f0131232:	b8 03 00 00 00       	mov    $0x3,%eax
f0131237:	eb 20                	jmp    f0131259 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0131239:	ff 75 14             	pushl  0x14(%ebp)
f013123c:	ff 75 10             	pushl  0x10(%ebp)
f013123f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0131242:	50                   	push   %eax
f0131243:	68 cf 11 13 f0       	push   $0xf01311cf
f0131248:	e8 92 fb ff ff       	call   f0130ddf <vprintfmt>
f013124d:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0131250:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131253:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0131256:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0131259:	c9                   	leave  
f013125a:	c3                   	ret    

f013125b <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f013125b:	55                   	push   %ebp
f013125c:	89 e5                	mov    %esp,%ebp
f013125e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0131261:	8d 45 10             	lea    0x10(%ebp),%eax
f0131264:	83 c0 04             	add    $0x4,%eax
f0131267:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f013126a:	8b 45 10             	mov    0x10(%ebp),%eax
f013126d:	ff 75 f4             	pushl  -0xc(%ebp)
f0131270:	50                   	push   %eax
f0131271:	ff 75 0c             	pushl  0xc(%ebp)
f0131274:	ff 75 08             	pushl  0x8(%ebp)
f0131277:	e8 89 ff ff ff       	call   f0131205 <vsnprintf>
f013127c:	83 c4 10             	add    $0x10,%esp
f013127f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0131282:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0131285:	c9                   	leave  
f0131286:	c3                   	ret    

f0131287 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0131287:	55                   	push   %ebp
f0131288:	89 e5                	mov    %esp,%ebp
f013128a:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f013128d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131291:	74 13                	je     f01312a6 <readline+0x1f>
		cprintf("%s", prompt);
f0131293:	83 ec 08             	sub    $0x8,%esp
f0131296:	ff 75 08             	pushl  0x8(%ebp)
f0131299:	68 10 d7 13 f0       	push   $0xf013d710
f013129e:	e8 6b fa fc ff       	call   f0100d0e <cprintf>
f01312a3:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01312a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01312ad:	83 ec 0c             	sub    $0xc,%esp
f01312b0:	6a 00                	push   $0x0
f01312b2:	e8 04 fa fc ff       	call   f0100cbb <iscons>
f01312b7:	83 c4 10             	add    $0x10,%esp
f01312ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01312bd:	e8 e0 f9 fc ff       	call   f0100ca2 <getchar>
f01312c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01312c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01312c9:	79 22                	jns    f01312ed <readline+0x66>
			if (c != -E_EOF)
f01312cb:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01312cf:	0f 84 ad 00 00 00    	je     f0131382 <readline+0xfb>
				cprintf("read error: %e\n", c);
f01312d5:	83 ec 08             	sub    $0x8,%esp
f01312d8:	ff 75 ec             	pushl  -0x14(%ebp)
f01312db:	68 13 d7 13 f0       	push   $0xf013d713
f01312e0:	e8 29 fa fc ff       	call   f0100d0e <cprintf>
f01312e5:	83 c4 10             	add    $0x10,%esp
			return;
f01312e8:	e9 95 00 00 00       	jmp    f0131382 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01312ed:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01312f1:	7e 34                	jle    f0131327 <readline+0xa0>
f01312f3:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01312fa:	7f 2b                	jg     f0131327 <readline+0xa0>
			if (echoing)
f01312fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131300:	74 0e                	je     f0131310 <readline+0x89>
				cputchar(c);
f0131302:	83 ec 0c             	sub    $0xc,%esp
f0131305:	ff 75 ec             	pushl  -0x14(%ebp)
f0131308:	e8 7e f9 fc ff       	call   f0100c8b <cputchar>
f013130d:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131310:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131313:	8d 50 01             	lea    0x1(%eax),%edx
f0131316:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131319:	89 c2                	mov    %eax,%edx
f013131b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013131e:	01 d0                	add    %edx,%eax
f0131320:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131323:	88 10                	mov    %dl,(%eax)
f0131325:	eb 56                	jmp    f013137d <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0131327:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f013132b:	75 1f                	jne    f013134c <readline+0xc5>
f013132d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131331:	7e 19                	jle    f013134c <readline+0xc5>
			if (echoing)
f0131333:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131337:	74 0e                	je     f0131347 <readline+0xc0>
				cputchar(c);
f0131339:	83 ec 0c             	sub    $0xc,%esp
f013133c:	ff 75 ec             	pushl  -0x14(%ebp)
f013133f:	e8 47 f9 fc ff       	call   f0100c8b <cputchar>
f0131344:	83 c4 10             	add    $0x10,%esp

			i--;
f0131347:	ff 4d f4             	decl   -0xc(%ebp)
f013134a:	eb 31                	jmp    f013137d <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f013134c:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131350:	74 0a                	je     f013135c <readline+0xd5>
f0131352:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0131356:	0f 85 61 ff ff ff    	jne    f01312bd <readline+0x36>
			if (echoing)
f013135c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131360:	74 0e                	je     f0131370 <readline+0xe9>
				cputchar(c);
f0131362:	83 ec 0c             	sub    $0xc,%esp
f0131365:	ff 75 ec             	pushl  -0x14(%ebp)
f0131368:	e8 1e f9 fc ff       	call   f0100c8b <cputchar>
f013136d:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0131370:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131373:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131376:	01 d0                	add    %edx,%eax
f0131378:	c6 00 00             	movb   $0x0,(%eax)
			return;
f013137b:	eb 06                	jmp    f0131383 <readline+0xfc>
		}
	}
f013137d:	e9 3b ff ff ff       	jmp    f01312bd <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0131382:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0131383:	c9                   	leave  
f0131384:	c3                   	ret    

f0131385 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0131385:	55                   	push   %ebp
f0131386:	89 e5                	mov    %esp,%ebp
f0131388:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f013138b:	e8 82 bb fd ff       	call   f010cf12 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0131390:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131394:	74 13                	je     f01313a9 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0131396:	83 ec 08             	sub    $0x8,%esp
f0131399:	ff 75 08             	pushl  0x8(%ebp)
f013139c:	68 10 d7 13 f0       	push   $0xf013d710
f01313a1:	e8 68 f9 fc ff       	call   f0100d0e <cprintf>
f01313a6:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01313a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01313b0:	83 ec 0c             	sub    $0xc,%esp
f01313b3:	6a 00                	push   $0x0
f01313b5:	e8 01 f9 fc ff       	call   f0100cbb <iscons>
f01313ba:	83 c4 10             	add    $0x10,%esp
f01313bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01313c0:	e8 dd f8 fc ff       	call   f0100ca2 <getchar>
f01313c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01313c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01313cc:	79 23                	jns    f01313f1 <atomic_readline+0x6c>
			if (c != -E_EOF)
f01313ce:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01313d2:	74 13                	je     f01313e7 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f01313d4:	83 ec 08             	sub    $0x8,%esp
f01313d7:	ff 75 ec             	pushl  -0x14(%ebp)
f01313da:	68 13 d7 13 f0       	push   $0xf013d713
f01313df:	e8 2a f9 fc ff       	call   f0100d0e <cprintf>
f01313e4:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f01313e7:	e8 40 bb fd ff       	call   f010cf2c <sys_enable_interrupt>
			return;
f01313ec:	e9 9a 00 00 00       	jmp    f013148b <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01313f1:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01313f5:	7e 34                	jle    f013142b <atomic_readline+0xa6>
f01313f7:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01313fe:	7f 2b                	jg     f013142b <atomic_readline+0xa6>
			if (echoing)
f0131400:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131404:	74 0e                	je     f0131414 <atomic_readline+0x8f>
				cputchar(c);
f0131406:	83 ec 0c             	sub    $0xc,%esp
f0131409:	ff 75 ec             	pushl  -0x14(%ebp)
f013140c:	e8 7a f8 fc ff       	call   f0100c8b <cputchar>
f0131411:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131414:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131417:	8d 50 01             	lea    0x1(%eax),%edx
f013141a:	89 55 f4             	mov    %edx,-0xc(%ebp)
f013141d:	89 c2                	mov    %eax,%edx
f013141f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131422:	01 d0                	add    %edx,%eax
f0131424:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131427:	88 10                	mov    %dl,(%eax)
f0131429:	eb 5b                	jmp    f0131486 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f013142b:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f013142f:	75 1f                	jne    f0131450 <atomic_readline+0xcb>
f0131431:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131435:	7e 19                	jle    f0131450 <atomic_readline+0xcb>
			if (echoing)
f0131437:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013143b:	74 0e                	je     f013144b <atomic_readline+0xc6>
				cputchar(c);
f013143d:	83 ec 0c             	sub    $0xc,%esp
f0131440:	ff 75 ec             	pushl  -0x14(%ebp)
f0131443:	e8 43 f8 fc ff       	call   f0100c8b <cputchar>
f0131448:	83 c4 10             	add    $0x10,%esp
			i--;
f013144b:	ff 4d f4             	decl   -0xc(%ebp)
f013144e:	eb 36                	jmp    f0131486 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0131450:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131454:	74 0a                	je     f0131460 <atomic_readline+0xdb>
f0131456:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f013145a:	0f 85 60 ff ff ff    	jne    f01313c0 <atomic_readline+0x3b>
			if (echoing)
f0131460:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131464:	74 0e                	je     f0131474 <atomic_readline+0xef>
				cputchar(c);
f0131466:	83 ec 0c             	sub    $0xc,%esp
f0131469:	ff 75 ec             	pushl  -0x14(%ebp)
f013146c:	e8 1a f8 fc ff       	call   f0100c8b <cputchar>
f0131471:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0131474:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131477:	8b 45 0c             	mov    0xc(%ebp),%eax
f013147a:	01 d0                	add    %edx,%eax
f013147c:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f013147f:	e8 a8 ba fd ff       	call   f010cf2c <sys_enable_interrupt>
			return;
f0131484:	eb 05                	jmp    f013148b <atomic_readline+0x106>
		}
	}
f0131486:	e9 35 ff ff ff       	jmp    f01313c0 <atomic_readline+0x3b>
}
f013148b:	c9                   	leave  
f013148c:	c3                   	ret    

f013148d <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f013148d:	55                   	push   %ebp
f013148e:	89 e5                	mov    %esp,%ebp
f0131490:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0131493:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013149a:	eb 06                	jmp    f01314a2 <strlen+0x15>
		n++;
f013149c:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f013149f:	ff 45 08             	incl   0x8(%ebp)
f01314a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01314a5:	8a 00                	mov    (%eax),%al
f01314a7:	84 c0                	test   %al,%al
f01314a9:	75 f1                	jne    f013149c <strlen+0xf>
		n++;
	return n;
f01314ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01314ae:	c9                   	leave  
f01314af:	c3                   	ret    

f01314b0 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01314b0:	55                   	push   %ebp
f01314b1:	89 e5                	mov    %esp,%ebp
f01314b3:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01314b6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01314bd:	eb 09                	jmp    f01314c8 <strnlen+0x18>
		n++;
f01314bf:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01314c2:	ff 45 08             	incl   0x8(%ebp)
f01314c5:	ff 4d 0c             	decl   0xc(%ebp)
f01314c8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01314cc:	74 09                	je     f01314d7 <strnlen+0x27>
f01314ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01314d1:	8a 00                	mov    (%eax),%al
f01314d3:	84 c0                	test   %al,%al
f01314d5:	75 e8                	jne    f01314bf <strnlen+0xf>
		n++;
	return n;
f01314d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01314da:	c9                   	leave  
f01314db:	c3                   	ret    

f01314dc <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01314dc:	55                   	push   %ebp
f01314dd:	89 e5                	mov    %esp,%ebp
f01314df:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f01314e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01314e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f01314e8:	90                   	nop
f01314e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01314ec:	8d 50 01             	lea    0x1(%eax),%edx
f01314ef:	89 55 08             	mov    %edx,0x8(%ebp)
f01314f2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01314f5:	8d 4a 01             	lea    0x1(%edx),%ecx
f01314f8:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01314fb:	8a 12                	mov    (%edx),%dl
f01314fd:	88 10                	mov    %dl,(%eax)
f01314ff:	8a 00                	mov    (%eax),%al
f0131501:	84 c0                	test   %al,%al
f0131503:	75 e4                	jne    f01314e9 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131505:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131508:	c9                   	leave  
f0131509:	c3                   	ret    

f013150a <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f013150a:	55                   	push   %ebp
f013150b:	89 e5                	mov    %esp,%ebp
f013150d:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131510:	8b 45 08             	mov    0x8(%ebp),%eax
f0131513:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0131516:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013151d:	eb 1f                	jmp    f013153e <strncpy+0x34>
		*dst++ = *src;
f013151f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131522:	8d 50 01             	lea    0x1(%eax),%edx
f0131525:	89 55 08             	mov    %edx,0x8(%ebp)
f0131528:	8b 55 0c             	mov    0xc(%ebp),%edx
f013152b:	8a 12                	mov    (%edx),%dl
f013152d:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f013152f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131532:	8a 00                	mov    (%eax),%al
f0131534:	84 c0                	test   %al,%al
f0131536:	74 03                	je     f013153b <strncpy+0x31>
			src++;
f0131538:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f013153b:	ff 45 fc             	incl   -0x4(%ebp)
f013153e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131541:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131544:	72 d9                	jb     f013151f <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0131546:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131549:	c9                   	leave  
f013154a:	c3                   	ret    

f013154b <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f013154b:	55                   	push   %ebp
f013154c:	89 e5                	mov    %esp,%ebp
f013154e:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0131551:	8b 45 08             	mov    0x8(%ebp),%eax
f0131554:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0131557:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013155b:	74 30                	je     f013158d <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f013155d:	eb 16                	jmp    f0131575 <strlcpy+0x2a>
			*dst++ = *src++;
f013155f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131562:	8d 50 01             	lea    0x1(%eax),%edx
f0131565:	89 55 08             	mov    %edx,0x8(%ebp)
f0131568:	8b 55 0c             	mov    0xc(%ebp),%edx
f013156b:	8d 4a 01             	lea    0x1(%edx),%ecx
f013156e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131571:	8a 12                	mov    (%edx),%dl
f0131573:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0131575:	ff 4d 10             	decl   0x10(%ebp)
f0131578:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013157c:	74 09                	je     f0131587 <strlcpy+0x3c>
f013157e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131581:	8a 00                	mov    (%eax),%al
f0131583:	84 c0                	test   %al,%al
f0131585:	75 d8                	jne    f013155f <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0131587:	8b 45 08             	mov    0x8(%ebp),%eax
f013158a:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f013158d:	8b 55 08             	mov    0x8(%ebp),%edx
f0131590:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131593:	29 c2                	sub    %eax,%edx
f0131595:	89 d0                	mov    %edx,%eax
}
f0131597:	c9                   	leave  
f0131598:	c3                   	ret    

f0131599 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0131599:	55                   	push   %ebp
f013159a:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f013159c:	eb 06                	jmp    f01315a4 <strcmp+0xb>
		p++, q++;
f013159e:	ff 45 08             	incl   0x8(%ebp)
f01315a1:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01315a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01315a7:	8a 00                	mov    (%eax),%al
f01315a9:	84 c0                	test   %al,%al
f01315ab:	74 0e                	je     f01315bb <strcmp+0x22>
f01315ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01315b0:	8a 10                	mov    (%eax),%dl
f01315b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01315b5:	8a 00                	mov    (%eax),%al
f01315b7:	38 c2                	cmp    %al,%dl
f01315b9:	74 e3                	je     f013159e <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01315bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01315be:	8a 00                	mov    (%eax),%al
f01315c0:	0f b6 d0             	movzbl %al,%edx
f01315c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01315c6:	8a 00                	mov    (%eax),%al
f01315c8:	0f b6 c0             	movzbl %al,%eax
f01315cb:	29 c2                	sub    %eax,%edx
f01315cd:	89 d0                	mov    %edx,%eax
}
f01315cf:	5d                   	pop    %ebp
f01315d0:	c3                   	ret    

f01315d1 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01315d1:	55                   	push   %ebp
f01315d2:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01315d4:	eb 09                	jmp    f01315df <strncmp+0xe>
		n--, p++, q++;
f01315d6:	ff 4d 10             	decl   0x10(%ebp)
f01315d9:	ff 45 08             	incl   0x8(%ebp)
f01315dc:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f01315df:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01315e3:	74 17                	je     f01315fc <strncmp+0x2b>
f01315e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01315e8:	8a 00                	mov    (%eax),%al
f01315ea:	84 c0                	test   %al,%al
f01315ec:	74 0e                	je     f01315fc <strncmp+0x2b>
f01315ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01315f1:	8a 10                	mov    (%eax),%dl
f01315f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01315f6:	8a 00                	mov    (%eax),%al
f01315f8:	38 c2                	cmp    %al,%dl
f01315fa:	74 da                	je     f01315d6 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f01315fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131600:	75 07                	jne    f0131609 <strncmp+0x38>
		return 0;
f0131602:	b8 00 00 00 00       	mov    $0x0,%eax
f0131607:	eb 14                	jmp    f013161d <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131609:	8b 45 08             	mov    0x8(%ebp),%eax
f013160c:	8a 00                	mov    (%eax),%al
f013160e:	0f b6 d0             	movzbl %al,%edx
f0131611:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131614:	8a 00                	mov    (%eax),%al
f0131616:	0f b6 c0             	movzbl %al,%eax
f0131619:	29 c2                	sub    %eax,%edx
f013161b:	89 d0                	mov    %edx,%eax
}
f013161d:	5d                   	pop    %ebp
f013161e:	c3                   	ret    

f013161f <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f013161f:	55                   	push   %ebp
f0131620:	89 e5                	mov    %esp,%ebp
f0131622:	83 ec 04             	sub    $0x4,%esp
f0131625:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131628:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f013162b:	eb 12                	jmp    f013163f <strchr+0x20>
		if (*s == c)
f013162d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131630:	8a 00                	mov    (%eax),%al
f0131632:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131635:	75 05                	jne    f013163c <strchr+0x1d>
			return (char *) s;
f0131637:	8b 45 08             	mov    0x8(%ebp),%eax
f013163a:	eb 11                	jmp    f013164d <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f013163c:	ff 45 08             	incl   0x8(%ebp)
f013163f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131642:	8a 00                	mov    (%eax),%al
f0131644:	84 c0                	test   %al,%al
f0131646:	75 e5                	jne    f013162d <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0131648:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013164d:	c9                   	leave  
f013164e:	c3                   	ret    

f013164f <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f013164f:	55                   	push   %ebp
f0131650:	89 e5                	mov    %esp,%ebp
f0131652:	83 ec 04             	sub    $0x4,%esp
f0131655:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131658:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f013165b:	eb 0d                	jmp    f013166a <strfind+0x1b>
		if (*s == c)
f013165d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131660:	8a 00                	mov    (%eax),%al
f0131662:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131665:	74 0e                	je     f0131675 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0131667:	ff 45 08             	incl   0x8(%ebp)
f013166a:	8b 45 08             	mov    0x8(%ebp),%eax
f013166d:	8a 00                	mov    (%eax),%al
f013166f:	84 c0                	test   %al,%al
f0131671:	75 ea                	jne    f013165d <strfind+0xe>
f0131673:	eb 01                	jmp    f0131676 <strfind+0x27>
		if (*s == c)
			break;
f0131675:	90                   	nop
	return (char *) s;
f0131676:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131679:	c9                   	leave  
f013167a:	c3                   	ret    

f013167b <memset>:


void *
memset(void *v, int c, uint32 n)
{
f013167b:	55                   	push   %ebp
f013167c:	89 e5                	mov    %esp,%ebp
f013167e:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0131681:	8b 45 08             	mov    0x8(%ebp),%eax
f0131684:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0131687:	8b 45 10             	mov    0x10(%ebp),%eax
f013168a:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f013168d:	eb 0e                	jmp    f013169d <memset+0x22>
		*p++ = c;
f013168f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131692:	8d 50 01             	lea    0x1(%eax),%edx
f0131695:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131698:	8b 55 0c             	mov    0xc(%ebp),%edx
f013169b:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f013169d:	ff 4d f8             	decl   -0x8(%ebp)
f01316a0:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01316a4:	79 e9                	jns    f013168f <memset+0x14>
		*p++ = c;

	return v;
f01316a6:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01316a9:	c9                   	leave  
f01316aa:	c3                   	ret    

f01316ab <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f01316ab:	55                   	push   %ebp
f01316ac:	89 e5                	mov    %esp,%ebp
f01316ae:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01316b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01316b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01316ba:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f01316bd:	eb 16                	jmp    f01316d5 <memcpy+0x2a>
		*d++ = *s++;
f01316bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01316c2:	8d 50 01             	lea    0x1(%eax),%edx
f01316c5:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01316c8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01316cb:	8d 4a 01             	lea    0x1(%edx),%ecx
f01316ce:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01316d1:	8a 12                	mov    (%edx),%dl
f01316d3:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f01316d5:	8b 45 10             	mov    0x10(%ebp),%eax
f01316d8:	8d 50 ff             	lea    -0x1(%eax),%edx
f01316db:	89 55 10             	mov    %edx,0x10(%ebp)
f01316de:	85 c0                	test   %eax,%eax
f01316e0:	75 dd                	jne    f01316bf <memcpy+0x14>
		*d++ = *s++;

	return dst;
f01316e2:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01316e5:	c9                   	leave  
f01316e6:	c3                   	ret    

f01316e7 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f01316e7:	55                   	push   %ebp
f01316e8:	89 e5                	mov    %esp,%ebp
f01316ea:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01316ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01316f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01316f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01316f6:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f01316f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01316fc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01316ff:	73 50                	jae    f0131751 <memmove+0x6a>
f0131701:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131704:	8b 45 10             	mov    0x10(%ebp),%eax
f0131707:	01 d0                	add    %edx,%eax
f0131709:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f013170c:	76 43                	jbe    f0131751 <memmove+0x6a>
		s += n;
f013170e:	8b 45 10             	mov    0x10(%ebp),%eax
f0131711:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131714:	8b 45 10             	mov    0x10(%ebp),%eax
f0131717:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f013171a:	eb 10                	jmp    f013172c <memmove+0x45>
			*--d = *--s;
f013171c:	ff 4d f8             	decl   -0x8(%ebp)
f013171f:	ff 4d fc             	decl   -0x4(%ebp)
f0131722:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131725:	8a 10                	mov    (%eax),%dl
f0131727:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013172a:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f013172c:	8b 45 10             	mov    0x10(%ebp),%eax
f013172f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131732:	89 55 10             	mov    %edx,0x10(%ebp)
f0131735:	85 c0                	test   %eax,%eax
f0131737:	75 e3                	jne    f013171c <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0131739:	eb 23                	jmp    f013175e <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f013173b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013173e:	8d 50 01             	lea    0x1(%eax),%edx
f0131741:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131744:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131747:	8d 4a 01             	lea    0x1(%edx),%ecx
f013174a:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f013174d:	8a 12                	mov    (%edx),%dl
f013174f:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131751:	8b 45 10             	mov    0x10(%ebp),%eax
f0131754:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131757:	89 55 10             	mov    %edx,0x10(%ebp)
f013175a:	85 c0                	test   %eax,%eax
f013175c:	75 dd                	jne    f013173b <memmove+0x54>
			*d++ = *s++;

	return dst;
f013175e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131761:	c9                   	leave  
f0131762:	c3                   	ret    

f0131763 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131763:	55                   	push   %ebp
f0131764:	89 e5                	mov    %esp,%ebp
f0131766:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0131769:	8b 45 08             	mov    0x8(%ebp),%eax
f013176c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f013176f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131772:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131775:	eb 2a                	jmp    f01317a1 <memcmp+0x3e>
		if (*s1 != *s2)
f0131777:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013177a:	8a 10                	mov    (%eax),%dl
f013177c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013177f:	8a 00                	mov    (%eax),%al
f0131781:	38 c2                	cmp    %al,%dl
f0131783:	74 16                	je     f013179b <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131785:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131788:	8a 00                	mov    (%eax),%al
f013178a:	0f b6 d0             	movzbl %al,%edx
f013178d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131790:	8a 00                	mov    (%eax),%al
f0131792:	0f b6 c0             	movzbl %al,%eax
f0131795:	29 c2                	sub    %eax,%edx
f0131797:	89 d0                	mov    %edx,%eax
f0131799:	eb 18                	jmp    f01317b3 <memcmp+0x50>
		s1++, s2++;
f013179b:	ff 45 fc             	incl   -0x4(%ebp)
f013179e:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f01317a1:	8b 45 10             	mov    0x10(%ebp),%eax
f01317a4:	8d 50 ff             	lea    -0x1(%eax),%edx
f01317a7:	89 55 10             	mov    %edx,0x10(%ebp)
f01317aa:	85 c0                	test   %eax,%eax
f01317ac:	75 c9                	jne    f0131777 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01317ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01317b3:	c9                   	leave  
f01317b4:	c3                   	ret    

f01317b5 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f01317b5:	55                   	push   %ebp
f01317b6:	89 e5                	mov    %esp,%ebp
f01317b8:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f01317bb:	8b 55 08             	mov    0x8(%ebp),%edx
f01317be:	8b 45 10             	mov    0x10(%ebp),%eax
f01317c1:	01 d0                	add    %edx,%eax
f01317c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f01317c6:	eb 15                	jmp    f01317dd <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f01317c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01317cb:	8a 00                	mov    (%eax),%al
f01317cd:	0f b6 d0             	movzbl %al,%edx
f01317d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317d3:	0f b6 c0             	movzbl %al,%eax
f01317d6:	39 c2                	cmp    %eax,%edx
f01317d8:	74 0d                	je     f01317e7 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01317da:	ff 45 08             	incl   0x8(%ebp)
f01317dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01317e0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f01317e3:	72 e3                	jb     f01317c8 <memfind+0x13>
f01317e5:	eb 01                	jmp    f01317e8 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f01317e7:	90                   	nop
	return (void *) s;
f01317e8:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01317eb:	c9                   	leave  
f01317ec:	c3                   	ret    

f01317ed <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f01317ed:	55                   	push   %ebp
f01317ee:	89 e5                	mov    %esp,%ebp
f01317f0:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f01317f3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f01317fa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131801:	eb 03                	jmp    f0131806 <strtol+0x19>
		s++;
f0131803:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131806:	8b 45 08             	mov    0x8(%ebp),%eax
f0131809:	8a 00                	mov    (%eax),%al
f013180b:	3c 20                	cmp    $0x20,%al
f013180d:	74 f4                	je     f0131803 <strtol+0x16>
f013180f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131812:	8a 00                	mov    (%eax),%al
f0131814:	3c 09                	cmp    $0x9,%al
f0131816:	74 eb                	je     f0131803 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131818:	8b 45 08             	mov    0x8(%ebp),%eax
f013181b:	8a 00                	mov    (%eax),%al
f013181d:	3c 2b                	cmp    $0x2b,%al
f013181f:	75 05                	jne    f0131826 <strtol+0x39>
		s++;
f0131821:	ff 45 08             	incl   0x8(%ebp)
f0131824:	eb 13                	jmp    f0131839 <strtol+0x4c>
	else if (*s == '-')
f0131826:	8b 45 08             	mov    0x8(%ebp),%eax
f0131829:	8a 00                	mov    (%eax),%al
f013182b:	3c 2d                	cmp    $0x2d,%al
f013182d:	75 0a                	jne    f0131839 <strtol+0x4c>
		s++, neg = 1;
f013182f:	ff 45 08             	incl   0x8(%ebp)
f0131832:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131839:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013183d:	74 06                	je     f0131845 <strtol+0x58>
f013183f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131843:	75 20                	jne    f0131865 <strtol+0x78>
f0131845:	8b 45 08             	mov    0x8(%ebp),%eax
f0131848:	8a 00                	mov    (%eax),%al
f013184a:	3c 30                	cmp    $0x30,%al
f013184c:	75 17                	jne    f0131865 <strtol+0x78>
f013184e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131851:	40                   	inc    %eax
f0131852:	8a 00                	mov    (%eax),%al
f0131854:	3c 78                	cmp    $0x78,%al
f0131856:	75 0d                	jne    f0131865 <strtol+0x78>
		s += 2, base = 16;
f0131858:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f013185c:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131863:	eb 28                	jmp    f013188d <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131865:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131869:	75 15                	jne    f0131880 <strtol+0x93>
f013186b:	8b 45 08             	mov    0x8(%ebp),%eax
f013186e:	8a 00                	mov    (%eax),%al
f0131870:	3c 30                	cmp    $0x30,%al
f0131872:	75 0c                	jne    f0131880 <strtol+0x93>
		s++, base = 8;
f0131874:	ff 45 08             	incl   0x8(%ebp)
f0131877:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f013187e:	eb 0d                	jmp    f013188d <strtol+0xa0>
	else if (base == 0)
f0131880:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131884:	75 07                	jne    f013188d <strtol+0xa0>
		base = 10;
f0131886:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f013188d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131890:	8a 00                	mov    (%eax),%al
f0131892:	3c 2f                	cmp    $0x2f,%al
f0131894:	7e 19                	jle    f01318af <strtol+0xc2>
f0131896:	8b 45 08             	mov    0x8(%ebp),%eax
f0131899:	8a 00                	mov    (%eax),%al
f013189b:	3c 39                	cmp    $0x39,%al
f013189d:	7f 10                	jg     f01318af <strtol+0xc2>
			dig = *s - '0';
f013189f:	8b 45 08             	mov    0x8(%ebp),%eax
f01318a2:	8a 00                	mov    (%eax),%al
f01318a4:	0f be c0             	movsbl %al,%eax
f01318a7:	83 e8 30             	sub    $0x30,%eax
f01318aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01318ad:	eb 42                	jmp    f01318f1 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f01318af:	8b 45 08             	mov    0x8(%ebp),%eax
f01318b2:	8a 00                	mov    (%eax),%al
f01318b4:	3c 60                	cmp    $0x60,%al
f01318b6:	7e 19                	jle    f01318d1 <strtol+0xe4>
f01318b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01318bb:	8a 00                	mov    (%eax),%al
f01318bd:	3c 7a                	cmp    $0x7a,%al
f01318bf:	7f 10                	jg     f01318d1 <strtol+0xe4>
			dig = *s - 'a' + 10;
f01318c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01318c4:	8a 00                	mov    (%eax),%al
f01318c6:	0f be c0             	movsbl %al,%eax
f01318c9:	83 e8 57             	sub    $0x57,%eax
f01318cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01318cf:	eb 20                	jmp    f01318f1 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f01318d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01318d4:	8a 00                	mov    (%eax),%al
f01318d6:	3c 40                	cmp    $0x40,%al
f01318d8:	7e 39                	jle    f0131913 <strtol+0x126>
f01318da:	8b 45 08             	mov    0x8(%ebp),%eax
f01318dd:	8a 00                	mov    (%eax),%al
f01318df:	3c 5a                	cmp    $0x5a,%al
f01318e1:	7f 30                	jg     f0131913 <strtol+0x126>
			dig = *s - 'A' + 10;
f01318e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01318e6:	8a 00                	mov    (%eax),%al
f01318e8:	0f be c0             	movsbl %al,%eax
f01318eb:	83 e8 37             	sub    $0x37,%eax
f01318ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f01318f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318f4:	3b 45 10             	cmp    0x10(%ebp),%eax
f01318f7:	7d 19                	jge    f0131912 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f01318f9:	ff 45 08             	incl   0x8(%ebp)
f01318fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01318ff:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131903:	89 c2                	mov    %eax,%edx
f0131905:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131908:	01 d0                	add    %edx,%eax
f013190a:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f013190d:	e9 7b ff ff ff       	jmp    f013188d <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131912:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131913:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131917:	74 08                	je     f0131921 <strtol+0x134>
		*endptr = (char *) s;
f0131919:	8b 45 0c             	mov    0xc(%ebp),%eax
f013191c:	8b 55 08             	mov    0x8(%ebp),%edx
f013191f:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131921:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131925:	74 07                	je     f013192e <strtol+0x141>
f0131927:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013192a:	f7 d8                	neg    %eax
f013192c:	eb 03                	jmp    f0131931 <strtol+0x144>
f013192e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131931:	c9                   	leave  
f0131932:	c3                   	ret    

f0131933 <ltostr>:

void
ltostr(long value, char *str)
{
f0131933:	55                   	push   %ebp
f0131934:	89 e5                	mov    %esp,%ebp
f0131936:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131939:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131940:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131947:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013194b:	79 13                	jns    f0131960 <ltostr+0x2d>
	{
		neg = 1;
f013194d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131954:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131957:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f013195a:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f013195d:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131960:	8b 45 08             	mov    0x8(%ebp),%eax
f0131963:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131968:	99                   	cltd   
f0131969:	f7 f9                	idiv   %ecx
f013196b:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f013196e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131971:	8d 50 01             	lea    0x1(%eax),%edx
f0131974:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131977:	89 c2                	mov    %eax,%edx
f0131979:	8b 45 0c             	mov    0xc(%ebp),%eax
f013197c:	01 d0                	add    %edx,%eax
f013197e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131981:	83 c2 30             	add    $0x30,%edx
f0131984:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131986:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131989:	b8 67 66 66 66       	mov    $0x66666667,%eax
f013198e:	f7 e9                	imul   %ecx
f0131990:	c1 fa 02             	sar    $0x2,%edx
f0131993:	89 c8                	mov    %ecx,%eax
f0131995:	c1 f8 1f             	sar    $0x1f,%eax
f0131998:	29 c2                	sub    %eax,%edx
f013199a:	89 d0                	mov    %edx,%eax
f013199c:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f013199f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01319a2:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01319a7:	f7 e9                	imul   %ecx
f01319a9:	c1 fa 02             	sar    $0x2,%edx
f01319ac:	89 c8                	mov    %ecx,%eax
f01319ae:	c1 f8 1f             	sar    $0x1f,%eax
f01319b1:	29 c2                	sub    %eax,%edx
f01319b3:	89 d0                	mov    %edx,%eax
f01319b5:	c1 e0 02             	shl    $0x2,%eax
f01319b8:	01 d0                	add    %edx,%eax
f01319ba:	01 c0                	add    %eax,%eax
f01319bc:	29 c1                	sub    %eax,%ecx
f01319be:	89 ca                	mov    %ecx,%edx
f01319c0:	85 d2                	test   %edx,%edx
f01319c2:	75 9c                	jne    f0131960 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f01319c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f01319cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01319ce:	48                   	dec    %eax
f01319cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f01319d2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01319d6:	74 3d                	je     f0131a15 <ltostr+0xe2>
		start = 1 ;
f01319d8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f01319df:	eb 34                	jmp    f0131a15 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f01319e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01319e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01319e7:	01 d0                	add    %edx,%eax
f01319e9:	8a 00                	mov    (%eax),%al
f01319eb:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f01319ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01319f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01319f4:	01 c2                	add    %eax,%edx
f01319f6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01319f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01319fc:	01 c8                	add    %ecx,%eax
f01319fe:	8a 00                	mov    (%eax),%al
f0131a00:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131a02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131a05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a08:	01 c2                	add    %eax,%edx
f0131a0a:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131a0d:	88 02                	mov    %al,(%edx)
		start++ ;
f0131a0f:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131a12:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a18:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131a1b:	7c c4                	jl     f01319e1 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131a1d:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131a20:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a23:	01 d0                	add    %edx,%eax
f0131a25:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131a28:	90                   	nop
f0131a29:	c9                   	leave  
f0131a2a:	c3                   	ret    

f0131a2b <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131a2b:	55                   	push   %ebp
f0131a2c:	89 e5                	mov    %esp,%ebp
f0131a2e:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131a31:	ff 75 08             	pushl  0x8(%ebp)
f0131a34:	e8 54 fa ff ff       	call   f013148d <strlen>
f0131a39:	83 c4 04             	add    $0x4,%esp
f0131a3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131a3f:	ff 75 0c             	pushl  0xc(%ebp)
f0131a42:	e8 46 fa ff ff       	call   f013148d <strlen>
f0131a47:	83 c4 04             	add    $0x4,%esp
f0131a4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131a4d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131a54:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a5b:	eb 17                	jmp    f0131a74 <strcconcat+0x49>
		final[s] = str1[s] ;
f0131a5d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131a60:	8b 45 10             	mov    0x10(%ebp),%eax
f0131a63:	01 c2                	add    %eax,%edx
f0131a65:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a6b:	01 c8                	add    %ecx,%eax
f0131a6d:	8a 00                	mov    (%eax),%al
f0131a6f:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131a71:	ff 45 fc             	incl   -0x4(%ebp)
f0131a74:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131a77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131a7a:	7c e1                	jl     f0131a5d <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131a7c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131a83:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0131a8a:	eb 1f                	jmp    f0131aab <strcconcat+0x80>
		final[s++] = str2[i] ;
f0131a8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131a8f:	8d 50 01             	lea    0x1(%eax),%edx
f0131a92:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131a95:	89 c2                	mov    %eax,%edx
f0131a97:	8b 45 10             	mov    0x10(%ebp),%eax
f0131a9a:	01 c2                	add    %eax,%edx
f0131a9c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131a9f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131aa2:	01 c8                	add    %ecx,%eax
f0131aa4:	8a 00                	mov    (%eax),%al
f0131aa6:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131aa8:	ff 45 f8             	incl   -0x8(%ebp)
f0131aab:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131aae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131ab1:	7c d9                	jl     f0131a8c <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131ab3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131ab6:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ab9:	01 d0                	add    %edx,%eax
f0131abb:	c6 00 00             	movb   $0x0,(%eax)
}
f0131abe:	90                   	nop
f0131abf:	c9                   	leave  
f0131ac0:	c3                   	ret    

f0131ac1 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0131ac1:	55                   	push   %ebp
f0131ac2:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131ac4:	8b 45 14             	mov    0x14(%ebp),%eax
f0131ac7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0131acd:	8b 45 14             	mov    0x14(%ebp),%eax
f0131ad0:	8b 00                	mov    (%eax),%eax
f0131ad2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131ad9:	8b 45 10             	mov    0x10(%ebp),%eax
f0131adc:	01 d0                	add    %edx,%eax
f0131ade:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131ae4:	eb 0c                	jmp    f0131af2 <strsplit+0x31>
			*string++ = 0;
f0131ae6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ae9:	8d 50 01             	lea    0x1(%eax),%edx
f0131aec:	89 55 08             	mov    %edx,0x8(%ebp)
f0131aef:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131af5:	8a 00                	mov    (%eax),%al
f0131af7:	84 c0                	test   %al,%al
f0131af9:	74 18                	je     f0131b13 <strsplit+0x52>
f0131afb:	8b 45 08             	mov    0x8(%ebp),%eax
f0131afe:	8a 00                	mov    (%eax),%al
f0131b00:	0f be c0             	movsbl %al,%eax
f0131b03:	50                   	push   %eax
f0131b04:	ff 75 0c             	pushl  0xc(%ebp)
f0131b07:	e8 13 fb ff ff       	call   f013161f <strchr>
f0131b0c:	83 c4 08             	add    $0x8,%esp
f0131b0f:	85 c0                	test   %eax,%eax
f0131b11:	75 d3                	jne    f0131ae6 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131b13:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b16:	8a 00                	mov    (%eax),%al
f0131b18:	84 c0                	test   %al,%al
f0131b1a:	74 5a                	je     f0131b76 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0131b1c:	8b 45 14             	mov    0x14(%ebp),%eax
f0131b1f:	8b 00                	mov    (%eax),%eax
f0131b21:	83 f8 0f             	cmp    $0xf,%eax
f0131b24:	75 07                	jne    f0131b2d <strsplit+0x6c>
		{
			return 0;
f0131b26:	b8 00 00 00 00       	mov    $0x0,%eax
f0131b2b:	eb 66                	jmp    f0131b93 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0131b2d:	8b 45 14             	mov    0x14(%ebp),%eax
f0131b30:	8b 00                	mov    (%eax),%eax
f0131b32:	8d 48 01             	lea    0x1(%eax),%ecx
f0131b35:	8b 55 14             	mov    0x14(%ebp),%edx
f0131b38:	89 0a                	mov    %ecx,(%edx)
f0131b3a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131b41:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b44:	01 c2                	add    %eax,%edx
f0131b46:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b49:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131b4b:	eb 03                	jmp    f0131b50 <strsplit+0x8f>
			string++;
f0131b4d:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0131b50:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b53:	8a 00                	mov    (%eax),%al
f0131b55:	84 c0                	test   %al,%al
f0131b57:	74 8b                	je     f0131ae4 <strsplit+0x23>
f0131b59:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b5c:	8a 00                	mov    (%eax),%al
f0131b5e:	0f be c0             	movsbl %al,%eax
f0131b61:	50                   	push   %eax
f0131b62:	ff 75 0c             	pushl  0xc(%ebp)
f0131b65:	e8 b5 fa ff ff       	call   f013161f <strchr>
f0131b6a:	83 c4 08             	add    $0x8,%esp
f0131b6d:	85 c0                	test   %eax,%eax
f0131b6f:	74 dc                	je     f0131b4d <strsplit+0x8c>
			string++;
	}
f0131b71:	e9 6e ff ff ff       	jmp    f0131ae4 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0131b76:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0131b77:	8b 45 14             	mov    0x14(%ebp),%eax
f0131b7a:	8b 00                	mov    (%eax),%eax
f0131b7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131b83:	8b 45 10             	mov    0x10(%ebp),%eax
f0131b86:	01 d0                	add    %edx,%eax
f0131b88:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0131b8e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0131b93:	c9                   	leave  
f0131b94:	c3                   	ret    

f0131b95 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0131b95:	55                   	push   %ebp
f0131b96:	89 e5                	mov    %esp,%ebp
f0131b98:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0131b9b:	90                   	nop
f0131b9c:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131ba3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ba6:	89 c2                	mov    %eax,%edx
f0131ba8:	ec                   	in     (%dx),%al
f0131ba9:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0131bac:	8a 45 f7             	mov    -0x9(%ebp),%al
f0131baf:	0f b6 c0             	movzbl %al,%eax
f0131bb2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131bb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131bb8:	25 c0 00 00 00       	and    $0xc0,%eax
f0131bbd:	83 f8 40             	cmp    $0x40,%eax
f0131bc0:	75 da                	jne    f0131b9c <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0131bc2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131bc6:	74 11                	je     f0131bd9 <ide_wait_ready+0x44>
f0131bc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131bcb:	83 e0 21             	and    $0x21,%eax
f0131bce:	85 c0                	test   %eax,%eax
f0131bd0:	74 07                	je     f0131bd9 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0131bd2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131bd7:	eb 05                	jmp    f0131bde <ide_wait_ready+0x49>
	}
	return 0;
f0131bd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131bde:	c9                   	leave  
f0131bdf:	c3                   	ret    

f0131be0 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0131be0:	55                   	push   %ebp
f0131be1:	89 e5                	mov    %esp,%ebp
f0131be3:	57                   	push   %edi
f0131be4:	53                   	push   %ebx
f0131be5:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0131be8:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131bef:	76 16                	jbe    f0131c07 <ide_read+0x27>
f0131bf1:	68 23 d7 13 f0       	push   $0xf013d723
f0131bf6:	68 30 d7 13 f0       	push   $0xf013d730
f0131bfb:	6a 25                	push   $0x25
f0131bfd:	68 45 d7 13 f0       	push   $0xf013d745
f0131c02:	e8 fe e5 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f0131c07:	83 ec 0c             	sub    $0xc,%esp
f0131c0a:	6a 00                	push   $0x0
f0131c0c:	e8 84 ff ff ff       	call   f0131b95 <ide_wait_ready>
f0131c11:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131c14:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c17:	0f b6 c0             	movzbl %al,%eax
f0131c1a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131c21:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131c24:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131c27:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131c2a:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131c2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c2e:	0f b6 c0             	movzbl %al,%eax
f0131c31:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131c38:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131c3b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131c3e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131c41:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131c42:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c45:	c1 e8 08             	shr    $0x8,%eax
f0131c48:	0f b6 c0             	movzbl %al,%eax
f0131c4b:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131c52:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131c55:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131c58:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131c5b:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131c5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c5f:	c1 e8 10             	shr    $0x10,%eax
f0131c62:	0f b6 c0             	movzbl %al,%eax
f0131c65:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131c6c:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131c6f:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131c72:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131c75:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131c76:	a1 ac 1c 88 f0       	mov    0xf0881cac,%eax
f0131c7b:	83 e0 01             	and    $0x1,%eax
f0131c7e:	c1 e0 04             	shl    $0x4,%eax
f0131c81:	88 c2                	mov    %al,%dl
f0131c83:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c86:	c1 e8 18             	shr    $0x18,%eax
f0131c89:	83 e0 0f             	and    $0xf,%eax
f0131c8c:	09 d0                	or     %edx,%eax
f0131c8e:	83 c8 e0             	or     $0xffffffe0,%eax
f0131c91:	0f b6 c0             	movzbl %al,%eax
f0131c94:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131c9b:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131c9e:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131ca1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131ca4:	ee                   	out    %al,(%dx)
f0131ca5:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131cac:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0131cb0:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131cb3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131cb6:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131cb7:	eb 55                	jmp    f0131d0e <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131cb9:	83 ec 0c             	sub    $0xc,%esp
f0131cbc:	6a 01                	push   $0x1
f0131cbe:	e8 d2 fe ff ff       	call   f0131b95 <ide_wait_ready>
f0131cc3:	83 c4 10             	add    $0x10,%esp
f0131cc6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131cc9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131ccd:	79 05                	jns    f0131cd4 <ide_read+0xf4>
			return r;
f0131ccf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131cd2:	eb 45                	jmp    f0131d19 <ide_read+0x139>
f0131cd4:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131cde:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131ce1:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131ce8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ceb:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131cee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131cf1:	89 cb                	mov    %ecx,%ebx
f0131cf3:	89 df                	mov    %ebx,%edi
f0131cf5:	89 c1                	mov    %eax,%ecx
f0131cf7:	fc                   	cld    
f0131cf8:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0131cfa:	89 c8                	mov    %ecx,%eax
f0131cfc:	89 fb                	mov    %edi,%ebx
f0131cfe:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131d01:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131d04:	ff 4d 10             	decl   0x10(%ebp)
f0131d07:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131d0e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131d12:	75 a5                	jne    f0131cb9 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131d14:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131d19:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131d1c:	5b                   	pop    %ebx
f0131d1d:	5f                   	pop    %edi
f0131d1e:	5d                   	pop    %ebp
f0131d1f:	c3                   	ret    

f0131d20 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0131d20:	55                   	push   %ebp
f0131d21:	89 e5                	mov    %esp,%ebp
f0131d23:	56                   	push   %esi
f0131d24:	53                   	push   %ebx
f0131d25:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131d28:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131d2f:	76 16                	jbe    f0131d47 <ide_write+0x27>
f0131d31:	68 23 d7 13 f0       	push   $0xf013d723
f0131d36:	68 30 d7 13 f0       	push   $0xf013d730
f0131d3b:	6a 3e                	push   $0x3e
f0131d3d:	68 45 d7 13 f0       	push   $0xf013d745
f0131d42:	e8 be e4 fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0131d47:	83 ec 0c             	sub    $0xc,%esp
f0131d4a:	6a 00                	push   $0x0
f0131d4c:	e8 44 fe ff ff       	call   f0131b95 <ide_wait_ready>
f0131d51:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0131d54:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d57:	0f b6 c0             	movzbl %al,%eax
f0131d5a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131d61:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131d64:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131d67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131d6a:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0131d6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d6e:	0f b6 c0             	movzbl %al,%eax
f0131d71:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131d78:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0131d7b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0131d7e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131d81:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0131d82:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d85:	c1 e8 08             	shr    $0x8,%eax
f0131d88:	0f b6 c0             	movzbl %al,%eax
f0131d8b:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0131d92:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0131d95:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0131d98:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131d9b:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0131d9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d9f:	c1 e8 10             	shr    $0x10,%eax
f0131da2:	0f b6 c0             	movzbl %al,%eax
f0131da5:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0131dac:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131daf:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131db2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131db5:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131db6:	a1 ac 1c 88 f0       	mov    0xf0881cac,%eax
f0131dbb:	83 e0 01             	and    $0x1,%eax
f0131dbe:	c1 e0 04             	shl    $0x4,%eax
f0131dc1:	88 c2                	mov    %al,%dl
f0131dc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dc6:	c1 e8 18             	shr    $0x18,%eax
f0131dc9:	83 e0 0f             	and    $0xf,%eax
f0131dcc:	09 d0                	or     %edx,%eax
f0131dce:	83 c8 e0             	or     $0xffffffe0,%eax
f0131dd1:	0f b6 c0             	movzbl %al,%eax
f0131dd4:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0131ddb:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0131dde:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131de1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131de4:	ee                   	out    %al,(%dx)
f0131de5:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0131dec:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0131df0:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131df3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131df6:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131df7:	eb 55                	jmp    f0131e4e <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0131df9:	83 ec 0c             	sub    $0xc,%esp
f0131dfc:	6a 01                	push   $0x1
f0131dfe:	e8 92 fd ff ff       	call   f0131b95 <ide_wait_ready>
f0131e03:	83 c4 10             	add    $0x10,%esp
f0131e06:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0131e09:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131e0d:	79 05                	jns    f0131e14 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0131e0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131e12:	eb 45                	jmp    f0131e59 <ide_write+0x139>
f0131e14:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0131e1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e1e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131e21:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131e28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131e2b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0131e2e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131e31:	89 cb                	mov    %ecx,%ebx
f0131e33:	89 de                	mov    %ebx,%esi
f0131e35:	89 c1                	mov    %eax,%ecx
f0131e37:	fc                   	cld    
f0131e38:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0131e3a:	89 c8                	mov    %ecx,%eax
f0131e3c:	89 f3                	mov    %esi,%ebx
f0131e3e:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131e41:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131e44:	ff 4d 10             	decl   0x10(%ebp)
f0131e47:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0131e4e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131e52:	75 a5                	jne    f0131df9 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0131e54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131e59:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0131e5c:	5b                   	pop    %ebx
f0131e5d:	5e                   	pop    %esi
f0131e5e:	5d                   	pop    %ebp
f0131e5f:	c3                   	ret    

f0131e60 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0131e60:	55                   	push   %ebp
f0131e61:	89 e5                	mov    %esp,%ebp
f0131e63:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0131e66:	83 ec 0c             	sub    $0xc,%esp
f0131e69:	68 50 d7 13 f0       	push   $0xf013d750
f0131e6e:	e8 9b ee fc ff       	call   f0100d0e <cprintf>
f0131e73:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0131e76:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0131e7d:	83 ec 0c             	sub    $0xc,%esp
f0131e80:	68 7c d7 13 f0       	push   $0xf013d77c
f0131e85:	e8 84 ee fc ff       	call   f0100d0e <cprintf>
f0131e8a:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0131e8d:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131e91:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0131e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e99:	eb 56                	jmp    f0131ef1 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131e9b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131e9f:	74 1c                	je     f0131ebd <print_mem_block_lists+0x5d>
f0131ea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ea4:	8b 50 08             	mov    0x8(%eax),%edx
f0131ea7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131eaa:	8b 48 08             	mov    0x8(%eax),%ecx
f0131ead:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131eb0:	8b 40 0c             	mov    0xc(%eax),%eax
f0131eb3:	01 c8                	add    %ecx,%eax
f0131eb5:	39 c2                	cmp    %eax,%edx
f0131eb7:	73 04                	jae    f0131ebd <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0131eb9:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ec0:	8b 50 08             	mov    0x8(%eax),%edx
f0131ec3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ec6:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ec9:	01 c2                	add    %eax,%edx
f0131ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ece:	8b 40 08             	mov    0x8(%eax),%eax
f0131ed1:	83 ec 04             	sub    $0x4,%esp
f0131ed4:	52                   	push   %edx
f0131ed5:	50                   	push   %eax
f0131ed6:	68 91 d7 13 f0       	push   $0xf013d791
f0131edb:	e8 2e ee fc ff       	call   f0100d0e <cprintf>
f0131ee0:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ee6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0131ee9:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0131eee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131ef1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131ef5:	74 07                	je     f0131efe <print_mem_block_lists+0x9e>
f0131ef7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131efa:	8b 00                	mov    (%eax),%eax
f0131efc:	eb 05                	jmp    f0131f03 <print_mem_block_lists+0xa3>
f0131efe:	b8 00 00 00 00       	mov    $0x0,%eax
f0131f03:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0131f08:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0131f0d:	85 c0                	test   %eax,%eax
f0131f0f:	75 8a                	jne    f0131e9b <print_mem_block_lists+0x3b>
f0131f11:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f15:	75 84                	jne    f0131e9b <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0131f17:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131f1b:	75 10                	jne    f0131f2d <print_mem_block_lists+0xcd>
f0131f1d:	83 ec 0c             	sub    $0xc,%esp
f0131f20:	68 a0 d7 13 f0       	push   $0xf013d7a0
f0131f25:	e8 e4 ed fc ff       	call   f0100d0e <cprintf>
f0131f2a:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0131f2d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0131f34:	83 ec 0c             	sub    $0xc,%esp
f0131f37:	68 c4 d7 13 f0       	push   $0xf013d7c4
f0131f3c:	e8 cd ed fc ff       	call   f0100d0e <cprintf>
f0131f41:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0131f44:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131f48:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f0131f4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131f50:	eb 56                	jmp    f0131fa8 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0131f52:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131f56:	74 1c                	je     f0131f74 <print_mem_block_lists+0x114>
f0131f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f5b:	8b 50 08             	mov    0x8(%eax),%edx
f0131f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f61:	8b 48 08             	mov    0x8(%eax),%ecx
f0131f64:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131f67:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f6a:	01 c8                	add    %ecx,%eax
f0131f6c:	39 c2                	cmp    %eax,%edx
f0131f6e:	73 04                	jae    f0131f74 <print_mem_block_lists+0x114>
			sorted = 0 ;
f0131f70:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0131f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f77:	8b 50 08             	mov    0x8(%eax),%edx
f0131f7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f7d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f80:	01 c2                	add    %eax,%edx
f0131f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f85:	8b 40 08             	mov    0x8(%eax),%eax
f0131f88:	83 ec 04             	sub    $0x4,%esp
f0131f8b:	52                   	push   %edx
f0131f8c:	50                   	push   %eax
f0131f8d:	68 91 d7 13 f0       	push   $0xf013d791
f0131f92:	e8 77 ed fc ff       	call   f0100d0e <cprintf>
f0131f97:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131fa0:	a1 d0 1c 88 f0       	mov    0xf0881cd0,%eax
f0131fa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131fa8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131fac:	74 07                	je     f0131fb5 <print_mem_block_lists+0x155>
f0131fae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fb1:	8b 00                	mov    (%eax),%eax
f0131fb3:	eb 05                	jmp    f0131fba <print_mem_block_lists+0x15a>
f0131fb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0131fba:	a3 d0 1c 88 f0       	mov    %eax,0xf0881cd0
f0131fbf:	a1 d0 1c 88 f0       	mov    0xf0881cd0,%eax
f0131fc4:	85 c0                	test   %eax,%eax
f0131fc6:	75 8a                	jne    f0131f52 <print_mem_block_lists+0xf2>
f0131fc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131fcc:	75 84                	jne    f0131f52 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0131fce:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131fd2:	75 10                	jne    f0131fe4 <print_mem_block_lists+0x184>
f0131fd4:	83 ec 0c             	sub    $0xc,%esp
f0131fd7:	68 dc d7 13 f0       	push   $0xf013d7dc
f0131fdc:	e8 2d ed fc ff       	call   f0100d0e <cprintf>
f0131fe1:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0131fe4:	83 ec 0c             	sub    $0xc,%esp
f0131fe7:	68 50 d7 13 f0       	push   $0xf013d750
f0131fec:	e8 1d ed fc ff       	call   f0100d0e <cprintf>
f0131ff1:	83 c4 10             	add    $0x10,%esp

}
f0131ff4:	90                   	nop
f0131ff5:	c9                   	leave  
f0131ff6:	c3                   	ret    

f0131ff7 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0131ff7:	55                   	push   %ebp
f0131ff8:	89 e5                	mov    %esp,%ebp
f0131ffa:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0131ffd:	c7 05 98 1d 88 f0 00 	movl   $0x0,0xf0881d98
f0132004:	00 00 00 
f0132007:	c7 05 9c 1d 88 f0 00 	movl   $0x0,0xf0881d9c
f013200e:	00 00 00 
f0132011:	c7 05 a4 1d 88 f0 00 	movl   $0x0,0xf0881da4
f0132018:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f013201b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0132022:	e9 9e 00 00 00       	jmp    f01320c5 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0132027:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f013202c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013202f:	c1 e2 04             	shl    $0x4,%edx
f0132032:	01 d0                	add    %edx,%eax
f0132034:	85 c0                	test   %eax,%eax
f0132036:	75 14                	jne    f013204c <initialize_MemBlocksList+0x55>
f0132038:	83 ec 04             	sub    $0x4,%esp
f013203b:	68 04 d8 13 f0       	push   $0xf013d804
f0132040:	6a 46                	push   $0x46
f0132042:	68 27 d8 13 f0       	push   $0xf013d827
f0132047:	e8 b9 e1 fc ff       	call   f0100205 <_panic>
f013204c:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f0132051:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132054:	c1 e2 04             	shl    $0x4,%edx
f0132057:	01 d0                	add    %edx,%eax
f0132059:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f013205f:	89 10                	mov    %edx,(%eax)
f0132061:	8b 00                	mov    (%eax),%eax
f0132063:	85 c0                	test   %eax,%eax
f0132065:	74 18                	je     f013207f <initialize_MemBlocksList+0x88>
f0132067:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f013206c:	8b 15 d8 1c 88 f0    	mov    0xf0881cd8,%edx
f0132072:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0132075:	c1 e1 04             	shl    $0x4,%ecx
f0132078:	01 ca                	add    %ecx,%edx
f013207a:	89 50 04             	mov    %edx,0x4(%eax)
f013207d:	eb 12                	jmp    f0132091 <initialize_MemBlocksList+0x9a>
f013207f:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f0132084:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132087:	c1 e2 04             	shl    $0x4,%edx
f013208a:	01 d0                	add    %edx,%eax
f013208c:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132091:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f0132096:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132099:	c1 e2 04             	shl    $0x4,%edx
f013209c:	01 d0                	add    %edx,%eax
f013209e:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f01320a3:	a1 d8 1c 88 f0       	mov    0xf0881cd8,%eax
f01320a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01320ab:	c1 e2 04             	shl    $0x4,%edx
f01320ae:	01 d0                	add    %edx,%eax
f01320b0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01320b7:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f01320bc:	40                   	inc    %eax
f01320bd:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f01320c2:	ff 45 f4             	incl   -0xc(%ebp)
f01320c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320c8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01320cb:	0f 82 56 ff ff ff    	jb     f0132027 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f01320d1:	90                   	nop
f01320d2:	c9                   	leave  
f01320d3:	c3                   	ret    

f01320d4 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f01320d4:	55                   	push   %ebp
f01320d5:	89 e5                	mov    %esp,%ebp
f01320d7:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01320da:	8b 45 08             	mov    0x8(%ebp),%eax
f01320dd:	8b 00                	mov    (%eax),%eax
f01320df:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01320e2:	eb 19                	jmp    f01320fd <find_block+0x29>
	{
		if(va==point->sva)
f01320e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01320e7:	8b 40 08             	mov    0x8(%eax),%eax
f01320ea:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01320ed:	75 05                	jne    f01320f4 <find_block+0x20>
		   return point;
f01320ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01320f2:	eb 36                	jmp    f013212a <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f01320f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01320f7:	8b 40 08             	mov    0x8(%eax),%eax
f01320fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01320fd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132101:	74 07                	je     f013210a <find_block+0x36>
f0132103:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132106:	8b 00                	mov    (%eax),%eax
f0132108:	eb 05                	jmp    f013210f <find_block+0x3b>
f013210a:	b8 00 00 00 00       	mov    $0x0,%eax
f013210f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132112:	89 42 08             	mov    %eax,0x8(%edx)
f0132115:	8b 45 08             	mov    0x8(%ebp),%eax
f0132118:	8b 40 08             	mov    0x8(%eax),%eax
f013211b:	85 c0                	test   %eax,%eax
f013211d:	75 c5                	jne    f01320e4 <find_block+0x10>
f013211f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132123:	75 bf                	jne    f01320e4 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0132125:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013212a:	c9                   	leave  
f013212b:	c3                   	ret    

f013212c <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f013212c:	55                   	push   %ebp
f013212d:	89 e5                	mov    %esp,%ebp
f013212f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0132132:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f0132137:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f013213a:	a1 cc 1c 88 f0       	mov    0xf0881ccc,%eax
f013213f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0132142:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132145:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0132148:	74 24                	je     f013216e <insert_sorted_allocList+0x42>
f013214a:	8b 45 08             	mov    0x8(%ebp),%eax
f013214d:	8b 50 08             	mov    0x8(%eax),%edx
f0132150:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132153:	8b 40 08             	mov    0x8(%eax),%eax
f0132156:	39 c2                	cmp    %eax,%edx
f0132158:	76 14                	jbe    f013216e <insert_sorted_allocList+0x42>
f013215a:	8b 45 08             	mov    0x8(%ebp),%eax
f013215d:	8b 50 08             	mov    0x8(%eax),%edx
f0132160:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132163:	8b 40 08             	mov    0x8(%eax),%eax
f0132166:	39 c2                	cmp    %eax,%edx
f0132168:	0f 82 60 01 00 00    	jb     f01322ce <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f013216e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132172:	75 65                	jne    f01321d9 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0132174:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132178:	75 14                	jne    f013218e <insert_sorted_allocList+0x62>
f013217a:	83 ec 04             	sub    $0x4,%esp
f013217d:	68 04 d8 13 f0       	push   $0xf013d804
f0132182:	6a 6b                	push   $0x6b
f0132184:	68 27 d8 13 f0       	push   $0xf013d827
f0132189:	e8 77 e0 fc ff       	call   f0100205 <_panic>
f013218e:	8b 15 c8 1c 88 f0    	mov    0xf0881cc8,%edx
f0132194:	8b 45 08             	mov    0x8(%ebp),%eax
f0132197:	89 10                	mov    %edx,(%eax)
f0132199:	8b 45 08             	mov    0x8(%ebp),%eax
f013219c:	8b 00                	mov    (%eax),%eax
f013219e:	85 c0                	test   %eax,%eax
f01321a0:	74 0d                	je     f01321af <insert_sorted_allocList+0x83>
f01321a2:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f01321a7:	8b 55 08             	mov    0x8(%ebp),%edx
f01321aa:	89 50 04             	mov    %edx,0x4(%eax)
f01321ad:	eb 08                	jmp    f01321b7 <insert_sorted_allocList+0x8b>
f01321af:	8b 45 08             	mov    0x8(%ebp),%eax
f01321b2:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f01321b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01321ba:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f01321bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01321c2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01321c9:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01321ce:	40                   	inc    %eax
f01321cf:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01321d4:	e9 dc 01 00 00       	jmp    f01323b5 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f01321d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01321dc:	8b 50 08             	mov    0x8(%eax),%edx
f01321df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321e2:	8b 40 08             	mov    0x8(%eax),%eax
f01321e5:	39 c2                	cmp    %eax,%edx
f01321e7:	77 6c                	ja     f0132255 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f01321e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01321ed:	74 06                	je     f01321f5 <insert_sorted_allocList+0xc9>
f01321ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01321f3:	75 14                	jne    f0132209 <insert_sorted_allocList+0xdd>
f01321f5:	83 ec 04             	sub    $0x4,%esp
f01321f8:	68 40 d8 13 f0       	push   $0xf013d840
f01321fd:	6a 6f                	push   $0x6f
f01321ff:	68 27 d8 13 f0       	push   $0xf013d827
f0132204:	e8 fc df fc ff       	call   f0100205 <_panic>
f0132209:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013220c:	8b 50 04             	mov    0x4(%eax),%edx
f013220f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132212:	89 50 04             	mov    %edx,0x4(%eax)
f0132215:	8b 45 08             	mov    0x8(%ebp),%eax
f0132218:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013221b:	89 10                	mov    %edx,(%eax)
f013221d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132220:	8b 40 04             	mov    0x4(%eax),%eax
f0132223:	85 c0                	test   %eax,%eax
f0132225:	74 0d                	je     f0132234 <insert_sorted_allocList+0x108>
f0132227:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013222a:	8b 40 04             	mov    0x4(%eax),%eax
f013222d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132230:	89 10                	mov    %edx,(%eax)
f0132232:	eb 08                	jmp    f013223c <insert_sorted_allocList+0x110>
f0132234:	8b 45 08             	mov    0x8(%ebp),%eax
f0132237:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f013223c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013223f:	8b 55 08             	mov    0x8(%ebp),%edx
f0132242:	89 50 04             	mov    %edx,0x4(%eax)
f0132245:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f013224a:	40                   	inc    %eax
f013224b:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0132250:	e9 60 01 00 00       	jmp    f01323b5 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0132255:	8b 45 08             	mov    0x8(%ebp),%eax
f0132258:	8b 50 08             	mov    0x8(%eax),%edx
f013225b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013225e:	8b 40 08             	mov    0x8(%eax),%eax
f0132261:	39 c2                	cmp    %eax,%edx
f0132263:	0f 82 4c 01 00 00    	jb     f01323b5 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0132269:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013226d:	75 14                	jne    f0132283 <insert_sorted_allocList+0x157>
f013226f:	83 ec 04             	sub    $0x4,%esp
f0132272:	68 78 d8 13 f0       	push   $0xf013d878
f0132277:	6a 73                	push   $0x73
f0132279:	68 27 d8 13 f0       	push   $0xf013d827
f013227e:	e8 82 df fc ff       	call   f0100205 <_panic>
f0132283:	8b 15 cc 1c 88 f0    	mov    0xf0881ccc,%edx
f0132289:	8b 45 08             	mov    0x8(%ebp),%eax
f013228c:	89 50 04             	mov    %edx,0x4(%eax)
f013228f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132292:	8b 40 04             	mov    0x4(%eax),%eax
f0132295:	85 c0                	test   %eax,%eax
f0132297:	74 0c                	je     f01322a5 <insert_sorted_allocList+0x179>
f0132299:	a1 cc 1c 88 f0       	mov    0xf0881ccc,%eax
f013229e:	8b 55 08             	mov    0x8(%ebp),%edx
f01322a1:	89 10                	mov    %edx,(%eax)
f01322a3:	eb 08                	jmp    f01322ad <insert_sorted_allocList+0x181>
f01322a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01322a8:	a3 c8 1c 88 f0       	mov    %eax,0xf0881cc8
f01322ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01322b0:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f01322b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01322b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01322be:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f01322c3:	40                   	inc    %eax
f01322c4:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01322c9:	e9 e7 00 00 00       	jmp    f01323b5 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f01322ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f01322d4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f01322db:	a1 c8 1c 88 f0       	mov    0xf0881cc8,%eax
f01322e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01322e3:	e9 9d 00 00 00       	jmp    f0132385 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f01322e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322eb:	8b 00                	mov    (%eax),%eax
f01322ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f01322f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01322f3:	8b 50 08             	mov    0x8(%eax),%edx
f01322f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322f9:	8b 40 08             	mov    0x8(%eax),%eax
f01322fc:	39 c2                	cmp    %eax,%edx
f01322fe:	76 7d                	jbe    f013237d <insert_sorted_allocList+0x251>
f0132300:	8b 45 08             	mov    0x8(%ebp),%eax
f0132303:	8b 50 08             	mov    0x8(%eax),%edx
f0132306:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132309:	8b 40 08             	mov    0x8(%eax),%eax
f013230c:	39 c2                	cmp    %eax,%edx
f013230e:	73 6d                	jae    f013237d <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0132310:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132314:	74 06                	je     f013231c <insert_sorted_allocList+0x1f0>
f0132316:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013231a:	75 14                	jne    f0132330 <insert_sorted_allocList+0x204>
f013231c:	83 ec 04             	sub    $0x4,%esp
f013231f:	68 9c d8 13 f0       	push   $0xf013d89c
f0132324:	6a 7f                	push   $0x7f
f0132326:	68 27 d8 13 f0       	push   $0xf013d827
f013232b:	e8 d5 de fc ff       	call   f0100205 <_panic>
f0132330:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132333:	8b 10                	mov    (%eax),%edx
f0132335:	8b 45 08             	mov    0x8(%ebp),%eax
f0132338:	89 10                	mov    %edx,(%eax)
f013233a:	8b 45 08             	mov    0x8(%ebp),%eax
f013233d:	8b 00                	mov    (%eax),%eax
f013233f:	85 c0                	test   %eax,%eax
f0132341:	74 0b                	je     f013234e <insert_sorted_allocList+0x222>
f0132343:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132346:	8b 00                	mov    (%eax),%eax
f0132348:	8b 55 08             	mov    0x8(%ebp),%edx
f013234b:	89 50 04             	mov    %edx,0x4(%eax)
f013234e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132351:	8b 55 08             	mov    0x8(%ebp),%edx
f0132354:	89 10                	mov    %edx,(%eax)
f0132356:	8b 45 08             	mov    0x8(%ebp),%eax
f0132359:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013235c:	89 50 04             	mov    %edx,0x4(%eax)
f013235f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132362:	8b 00                	mov    (%eax),%eax
f0132364:	85 c0                	test   %eax,%eax
f0132366:	75 08                	jne    f0132370 <insert_sorted_allocList+0x244>
f0132368:	8b 45 08             	mov    0x8(%ebp),%eax
f013236b:	a3 cc 1c 88 f0       	mov    %eax,0xf0881ccc
f0132370:	a1 d4 1c 88 f0       	mov    0xf0881cd4,%eax
f0132375:	40                   	inc    %eax
f0132376:	a3 d4 1c 88 f0       	mov    %eax,0xf0881cd4
				break;
f013237b:	eb 39                	jmp    f01323b6 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f013237d:	a1 d0 1c 88 f0       	mov    0xf0881cd0,%eax
f0132382:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132385:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132389:	74 07                	je     f0132392 <insert_sorted_allocList+0x266>
f013238b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013238e:	8b 00                	mov    (%eax),%eax
f0132390:	eb 05                	jmp    f0132397 <insert_sorted_allocList+0x26b>
f0132392:	b8 00 00 00 00       	mov    $0x0,%eax
f0132397:	a3 d0 1c 88 f0       	mov    %eax,0xf0881cd0
f013239c:	a1 d0 1c 88 f0       	mov    0xf0881cd0,%eax
f01323a1:	85 c0                	test   %eax,%eax
f01323a3:	0f 85 3f ff ff ff    	jne    f01322e8 <insert_sorted_allocList+0x1bc>
f01323a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01323ad:	0f 85 35 ff ff ff    	jne    f01322e8 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01323b3:	eb 01                	jmp    f01323b6 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01323b5:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f01323b6:	90                   	nop
f01323b7:	c9                   	leave  
f01323b8:	c3                   	ret    

f01323b9 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f01323b9:	55                   	push   %ebp
f01323ba:	89 e5                	mov    %esp,%ebp
f01323bc:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01323bf:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f01323c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01323c7:	e9 85 01 00 00       	jmp    f0132551 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f01323cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323cf:	8b 40 0c             	mov    0xc(%eax),%eax
f01323d2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323d5:	0f 82 6e 01 00 00    	jb     f0132549 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f01323db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323de:	8b 40 0c             	mov    0xc(%eax),%eax
f01323e1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323e4:	0f 85 8a 00 00 00    	jne    f0132474 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f01323ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01323ee:	75 17                	jne    f0132407 <alloc_block_FF+0x4e>
f01323f0:	83 ec 04             	sub    $0x4,%esp
f01323f3:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01323f8:	68 93 00 00 00       	push   $0x93
f01323fd:	68 27 d8 13 f0       	push   $0xf013d827
f0132402:	e8 fe dd fc ff       	call   f0100205 <_panic>
f0132407:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013240a:	8b 00                	mov    (%eax),%eax
f013240c:	85 c0                	test   %eax,%eax
f013240e:	74 10                	je     f0132420 <alloc_block_FF+0x67>
f0132410:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132413:	8b 00                	mov    (%eax),%eax
f0132415:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132418:	8b 52 04             	mov    0x4(%edx),%edx
f013241b:	89 50 04             	mov    %edx,0x4(%eax)
f013241e:	eb 0b                	jmp    f013242b <alloc_block_FF+0x72>
f0132420:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132423:	8b 40 04             	mov    0x4(%eax),%eax
f0132426:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f013242b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013242e:	8b 40 04             	mov    0x4(%eax),%eax
f0132431:	85 c0                	test   %eax,%eax
f0132433:	74 0f                	je     f0132444 <alloc_block_FF+0x8b>
f0132435:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132438:	8b 40 04             	mov    0x4(%eax),%eax
f013243b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013243e:	8b 12                	mov    (%edx),%edx
f0132440:	89 10                	mov    %edx,(%eax)
f0132442:	eb 0a                	jmp    f013244e <alloc_block_FF+0x95>
f0132444:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132447:	8b 00                	mov    (%eax),%eax
f0132449:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f013244e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132451:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132457:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013245a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132461:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132466:	48                   	dec    %eax
f0132467:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
			   return  point;
f013246c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013246f:	e9 10 01 00 00       	jmp    f0132584 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0132474:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132477:	8b 40 0c             	mov    0xc(%eax),%eax
f013247a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013247d:	0f 86 c6 00 00 00    	jbe    f0132549 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132483:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132488:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f013248b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013248e:	8b 50 08             	mov    0x8(%eax),%edx
f0132491:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132494:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0132497:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013249a:	8b 55 08             	mov    0x8(%ebp),%edx
f013249d:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01324a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01324a4:	75 17                	jne    f01324bd <alloc_block_FF+0x104>
f01324a6:	83 ec 04             	sub    $0x4,%esp
f01324a9:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01324ae:	68 9b 00 00 00       	push   $0x9b
f01324b3:	68 27 d8 13 f0       	push   $0xf013d827
f01324b8:	e8 48 dd fc ff       	call   f0100205 <_panic>
f01324bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324c0:	8b 00                	mov    (%eax),%eax
f01324c2:	85 c0                	test   %eax,%eax
f01324c4:	74 10                	je     f01324d6 <alloc_block_FF+0x11d>
f01324c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324c9:	8b 00                	mov    (%eax),%eax
f01324cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01324ce:	8b 52 04             	mov    0x4(%edx),%edx
f01324d1:	89 50 04             	mov    %edx,0x4(%eax)
f01324d4:	eb 0b                	jmp    f01324e1 <alloc_block_FF+0x128>
f01324d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324d9:	8b 40 04             	mov    0x4(%eax),%eax
f01324dc:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01324e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324e4:	8b 40 04             	mov    0x4(%eax),%eax
f01324e7:	85 c0                	test   %eax,%eax
f01324e9:	74 0f                	je     f01324fa <alloc_block_FF+0x141>
f01324eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324ee:	8b 40 04             	mov    0x4(%eax),%eax
f01324f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01324f4:	8b 12                	mov    (%edx),%edx
f01324f6:	89 10                	mov    %edx,(%eax)
f01324f8:	eb 0a                	jmp    f0132504 <alloc_block_FF+0x14b>
f01324fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324fd:	8b 00                	mov    (%eax),%eax
f01324ff:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132504:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132507:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013250d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132510:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132517:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f013251c:	48                   	dec    %eax
f013251d:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
			   point->sva += size;
f0132522:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132525:	8b 50 08             	mov    0x8(%eax),%edx
f0132528:	8b 45 08             	mov    0x8(%ebp),%eax
f013252b:	01 c2                	add    %eax,%edx
f013252d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132530:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0132533:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132536:	8b 40 0c             	mov    0xc(%eax),%eax
f0132539:	2b 45 08             	sub    0x8(%ebp),%eax
f013253c:	89 c2                	mov    %eax,%edx
f013253e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132541:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0132544:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132547:	eb 3b                	jmp    f0132584 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0132549:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f013254e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132551:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132555:	74 07                	je     f013255e <alloc_block_FF+0x1a5>
f0132557:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013255a:	8b 00                	mov    (%eax),%eax
f013255c:	eb 05                	jmp    f0132563 <alloc_block_FF+0x1aa>
f013255e:	b8 00 00 00 00       	mov    $0x0,%eax
f0132563:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0132568:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f013256d:	85 c0                	test   %eax,%eax
f013256f:	0f 85 57 fe ff ff    	jne    f01323cc <alloc_block_FF+0x13>
f0132575:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132579:	0f 85 4d fe ff ff    	jne    f01323cc <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f013257f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132584:	c9                   	leave  
f0132585:	c3                   	ret    

f0132586 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0132586:	55                   	push   %ebp
f0132587:	89 e5                	mov    %esp,%ebp
f0132589:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f013258c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0132593:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132598:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013259b:	e9 df 00 00 00       	jmp    f013267f <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f01325a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325a3:	8b 40 0c             	mov    0xc(%eax),%eax
f01325a6:	3b 45 08             	cmp    0x8(%ebp),%eax
f01325a9:	0f 82 c8 00 00 00    	jb     f0132677 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f01325af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325b2:	8b 40 0c             	mov    0xc(%eax),%eax
f01325b5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01325b8:	0f 85 8a 00 00 00    	jne    f0132648 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f01325be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01325c2:	75 17                	jne    f01325db <alloc_block_BF+0x55>
f01325c4:	83 ec 04             	sub    $0x4,%esp
f01325c7:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01325cc:	68 b7 00 00 00       	push   $0xb7
f01325d1:	68 27 d8 13 f0       	push   $0xf013d827
f01325d6:	e8 2a dc fc ff       	call   f0100205 <_panic>
f01325db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325de:	8b 00                	mov    (%eax),%eax
f01325e0:	85 c0                	test   %eax,%eax
f01325e2:	74 10                	je     f01325f4 <alloc_block_BF+0x6e>
f01325e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325e7:	8b 00                	mov    (%eax),%eax
f01325e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01325ec:	8b 52 04             	mov    0x4(%edx),%edx
f01325ef:	89 50 04             	mov    %edx,0x4(%eax)
f01325f2:	eb 0b                	jmp    f01325ff <alloc_block_BF+0x79>
f01325f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01325f7:	8b 40 04             	mov    0x4(%eax),%eax
f01325fa:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f01325ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132602:	8b 40 04             	mov    0x4(%eax),%eax
f0132605:	85 c0                	test   %eax,%eax
f0132607:	74 0f                	je     f0132618 <alloc_block_BF+0x92>
f0132609:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013260c:	8b 40 04             	mov    0x4(%eax),%eax
f013260f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132612:	8b 12                	mov    (%edx),%edx
f0132614:	89 10                	mov    %edx,(%eax)
f0132616:	eb 0a                	jmp    f0132622 <alloc_block_BF+0x9c>
f0132618:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013261b:	8b 00                	mov    (%eax),%eax
f013261d:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132622:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132625:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013262b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013262e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132635:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f013263a:	48                   	dec    %eax
f013263b:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
			   return currentMemBlock;
f0132640:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132643:	e9 4d 01 00 00       	jmp    f0132795 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0132648:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013264b:	8b 40 0c             	mov    0xc(%eax),%eax
f013264e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132651:	76 24                	jbe    f0132677 <alloc_block_BF+0xf1>
f0132653:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132656:	8b 40 0c             	mov    0xc(%eax),%eax
f0132659:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013265c:	73 19                	jae    f0132677 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f013265e:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0132665:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132668:	8b 40 0c             	mov    0xc(%eax),%eax
f013266b:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f013266e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132671:	8b 40 08             	mov    0x8(%eax),%eax
f0132674:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0132677:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f013267c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013267f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132683:	74 07                	je     f013268c <alloc_block_BF+0x106>
f0132685:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132688:	8b 00                	mov    (%eax),%eax
f013268a:	eb 05                	jmp    f0132691 <alloc_block_BF+0x10b>
f013268c:	b8 00 00 00 00       	mov    $0x0,%eax
f0132691:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0132696:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f013269b:	85 c0                	test   %eax,%eax
f013269d:	0f 85 fd fe ff ff    	jne    f01325a0 <alloc_block_BF+0x1a>
f01326a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01326a7:	0f 85 f3 fe ff ff    	jne    f01325a0 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f01326ad:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01326b1:	0f 84 d9 00 00 00    	je     f0132790 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f01326b7:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f01326bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f01326bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01326c2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01326c5:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f01326c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01326cb:	8b 55 08             	mov    0x8(%ebp),%edx
f01326ce:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f01326d1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01326d5:	75 17                	jne    f01326ee <alloc_block_BF+0x168>
f01326d7:	83 ec 04             	sub    $0x4,%esp
f01326da:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01326df:	68 c7 00 00 00       	push   $0xc7
f01326e4:	68 27 d8 13 f0       	push   $0xf013d827
f01326e9:	e8 17 db fc ff       	call   f0100205 <_panic>
f01326ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01326f1:	8b 00                	mov    (%eax),%eax
f01326f3:	85 c0                	test   %eax,%eax
f01326f5:	74 10                	je     f0132707 <alloc_block_BF+0x181>
f01326f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01326fa:	8b 00                	mov    (%eax),%eax
f01326fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01326ff:	8b 52 04             	mov    0x4(%edx),%edx
f0132702:	89 50 04             	mov    %edx,0x4(%eax)
f0132705:	eb 0b                	jmp    f0132712 <alloc_block_BF+0x18c>
f0132707:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013270a:	8b 40 04             	mov    0x4(%eax),%eax
f013270d:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132712:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132715:	8b 40 04             	mov    0x4(%eax),%eax
f0132718:	85 c0                	test   %eax,%eax
f013271a:	74 0f                	je     f013272b <alloc_block_BF+0x1a5>
f013271c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013271f:	8b 40 04             	mov    0x4(%eax),%eax
f0132722:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132725:	8b 12                	mov    (%edx),%edx
f0132727:	89 10                	mov    %edx,(%eax)
f0132729:	eb 0a                	jmp    f0132735 <alloc_block_BF+0x1af>
f013272b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013272e:	8b 00                	mov    (%eax),%eax
f0132730:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132735:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132738:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013273e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132741:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132748:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f013274d:	48                   	dec    %eax
f013274e:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0132753:	83 ec 08             	sub    $0x8,%esp
f0132756:	ff 75 ec             	pushl  -0x14(%ebp)
f0132759:	68 64 1d 88 f0       	push   $0xf0881d64
f013275e:	e8 71 f9 ff ff       	call   f01320d4 <find_block>
f0132763:	83 c4 10             	add    $0x10,%esp
f0132766:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0132769:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013276c:	8b 50 08             	mov    0x8(%eax),%edx
f013276f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132772:	01 c2                	add    %eax,%edx
f0132774:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132777:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f013277a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013277d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132780:	2b 45 08             	sub    0x8(%ebp),%eax
f0132783:	89 c2                	mov    %eax,%edx
f0132785:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132788:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f013278b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013278e:	eb 05                	jmp    f0132795 <alloc_block_BF+0x20f>
	}
	return NULL;
f0132790:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132795:	c9                   	leave  
f0132796:	c3                   	ret    

f0132797 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0132797:	55                   	push   %ebp
f0132798:	89 e5                	mov    %esp,%ebp
f013279a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f013279d:	a1 b0 1c 88 f0       	mov    0xf0881cb0,%eax
f01327a2:	85 c0                	test   %eax,%eax
f01327a4:	0f 85 de 01 00 00    	jne    f0132988 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01327aa:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f01327af:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01327b2:	e9 9e 01 00 00       	jmp    f0132955 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f01327b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327ba:	8b 40 0c             	mov    0xc(%eax),%eax
f01327bd:	3b 45 08             	cmp    0x8(%ebp),%eax
f01327c0:	0f 82 87 01 00 00    	jb     f013294d <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f01327c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327c9:	8b 40 0c             	mov    0xc(%eax),%eax
f01327cc:	3b 45 08             	cmp    0x8(%ebp),%eax
f01327cf:	0f 85 95 00 00 00    	jne    f013286a <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f01327d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01327d9:	75 17                	jne    f01327f2 <alloc_block_NF+0x5b>
f01327db:	83 ec 04             	sub    $0x4,%esp
f01327de:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01327e3:	68 e0 00 00 00       	push   $0xe0
f01327e8:	68 27 d8 13 f0       	push   $0xf013d827
f01327ed:	e8 13 da fc ff       	call   f0100205 <_panic>
f01327f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327f5:	8b 00                	mov    (%eax),%eax
f01327f7:	85 c0                	test   %eax,%eax
f01327f9:	74 10                	je     f013280b <alloc_block_NF+0x74>
f01327fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327fe:	8b 00                	mov    (%eax),%eax
f0132800:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132803:	8b 52 04             	mov    0x4(%edx),%edx
f0132806:	89 50 04             	mov    %edx,0x4(%eax)
f0132809:	eb 0b                	jmp    f0132816 <alloc_block_NF+0x7f>
f013280b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013280e:	8b 40 04             	mov    0x4(%eax),%eax
f0132811:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132816:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132819:	8b 40 04             	mov    0x4(%eax),%eax
f013281c:	85 c0                	test   %eax,%eax
f013281e:	74 0f                	je     f013282f <alloc_block_NF+0x98>
f0132820:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132823:	8b 40 04             	mov    0x4(%eax),%eax
f0132826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132829:	8b 12                	mov    (%edx),%edx
f013282b:	89 10                	mov    %edx,(%eax)
f013282d:	eb 0a                	jmp    f0132839 <alloc_block_NF+0xa2>
f013282f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132832:	8b 00                	mov    (%eax),%eax
f0132834:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132839:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013283c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132842:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132845:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013284c:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132851:	48                   	dec    %eax
f0132852:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
				   svaOfNF = point->sva;
f0132857:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013285a:	8b 40 08             	mov    0x8(%eax),%eax
f013285d:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
				   return  point;
f0132862:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132865:	e9 f8 04 00 00       	jmp    f0132d62 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f013286a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013286d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132870:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132873:	0f 86 d4 00 00 00    	jbe    f013294d <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132879:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f013287e:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0132881:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132884:	8b 50 08             	mov    0x8(%eax),%edx
f0132887:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013288a:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f013288d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132890:	8b 55 08             	mov    0x8(%ebp),%edx
f0132893:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132896:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013289a:	75 17                	jne    f01328b3 <alloc_block_NF+0x11c>
f013289c:	83 ec 04             	sub    $0x4,%esp
f013289f:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01328a4:	68 e9 00 00 00       	push   $0xe9
f01328a9:	68 27 d8 13 f0       	push   $0xf013d827
f01328ae:	e8 52 d9 fc ff       	call   f0100205 <_panic>
f01328b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328b6:	8b 00                	mov    (%eax),%eax
f01328b8:	85 c0                	test   %eax,%eax
f01328ba:	74 10                	je     f01328cc <alloc_block_NF+0x135>
f01328bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328bf:	8b 00                	mov    (%eax),%eax
f01328c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01328c4:	8b 52 04             	mov    0x4(%edx),%edx
f01328c7:	89 50 04             	mov    %edx,0x4(%eax)
f01328ca:	eb 0b                	jmp    f01328d7 <alloc_block_NF+0x140>
f01328cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328cf:	8b 40 04             	mov    0x4(%eax),%eax
f01328d2:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01328d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328da:	8b 40 04             	mov    0x4(%eax),%eax
f01328dd:	85 c0                	test   %eax,%eax
f01328df:	74 0f                	je     f01328f0 <alloc_block_NF+0x159>
f01328e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328e4:	8b 40 04             	mov    0x4(%eax),%eax
f01328e7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01328ea:	8b 12                	mov    (%edx),%edx
f01328ec:	89 10                	mov    %edx,(%eax)
f01328ee:	eb 0a                	jmp    f01328fa <alloc_block_NF+0x163>
f01328f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328f3:	8b 00                	mov    (%eax),%eax
f01328f5:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f01328fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132903:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132906:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013290d:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132912:	48                   	dec    %eax
f0132913:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
				   svaOfNF = ReturnedBlock->sva;
f0132918:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013291b:	8b 40 08             	mov    0x8(%eax),%eax
f013291e:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
				   point->sva += size;
f0132923:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132926:	8b 50 08             	mov    0x8(%eax),%edx
f0132929:	8b 45 08             	mov    0x8(%ebp),%eax
f013292c:	01 c2                	add    %eax,%edx
f013292e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132931:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132934:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132937:	8b 40 0c             	mov    0xc(%eax),%eax
f013293a:	2b 45 08             	sub    0x8(%ebp),%eax
f013293d:	89 c2                	mov    %eax,%edx
f013293f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132942:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f0132945:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132948:	e9 15 04 00 00       	jmp    f0132d62 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f013294d:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132952:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132955:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132959:	74 07                	je     f0132962 <alloc_block_NF+0x1cb>
f013295b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013295e:	8b 00                	mov    (%eax),%eax
f0132960:	eb 05                	jmp    f0132967 <alloc_block_NF+0x1d0>
f0132962:	b8 00 00 00 00       	mov    $0x0,%eax
f0132967:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f013296c:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132971:	85 c0                	test   %eax,%eax
f0132973:	0f 85 3e fe ff ff    	jne    f01327b7 <alloc_block_NF+0x20>
f0132979:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013297d:	0f 85 34 fe ff ff    	jne    f01327b7 <alloc_block_NF+0x20>
f0132983:	e9 d5 03 00 00       	jmp    f0132d5d <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132988:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f013298d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132990:	e9 b1 01 00 00       	jmp    f0132b46 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0132995:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132998:	8b 50 08             	mov    0x8(%eax),%edx
f013299b:	a1 b0 1c 88 f0       	mov    0xf0881cb0,%eax
f01329a0:	39 c2                	cmp    %eax,%edx
f01329a2:	0f 82 96 01 00 00    	jb     f0132b3e <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f01329a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01329ae:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329b1:	0f 82 87 01 00 00    	jb     f0132b3e <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f01329b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329ba:	8b 40 0c             	mov    0xc(%eax),%eax
f01329bd:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329c0:	0f 85 95 00 00 00    	jne    f0132a5b <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f01329c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01329ca:	75 17                	jne    f01329e3 <alloc_block_NF+0x24c>
f01329cc:	83 ec 04             	sub    $0x4,%esp
f01329cf:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01329d4:	68 fc 00 00 00       	push   $0xfc
f01329d9:	68 27 d8 13 f0       	push   $0xf013d827
f01329de:	e8 22 d8 fc ff       	call   f0100205 <_panic>
f01329e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329e6:	8b 00                	mov    (%eax),%eax
f01329e8:	85 c0                	test   %eax,%eax
f01329ea:	74 10                	je     f01329fc <alloc_block_NF+0x265>
f01329ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329ef:	8b 00                	mov    (%eax),%eax
f01329f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01329f4:	8b 52 04             	mov    0x4(%edx),%edx
f01329f7:	89 50 04             	mov    %edx,0x4(%eax)
f01329fa:	eb 0b                	jmp    f0132a07 <alloc_block_NF+0x270>
f01329fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329ff:	8b 40 04             	mov    0x4(%eax),%eax
f0132a02:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a0a:	8b 40 04             	mov    0x4(%eax),%eax
f0132a0d:	85 c0                	test   %eax,%eax
f0132a0f:	74 0f                	je     f0132a20 <alloc_block_NF+0x289>
f0132a11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a14:	8b 40 04             	mov    0x4(%eax),%eax
f0132a17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132a1a:	8b 12                	mov    (%edx),%edx
f0132a1c:	89 10                	mov    %edx,(%eax)
f0132a1e:	eb 0a                	jmp    f0132a2a <alloc_block_NF+0x293>
f0132a20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a23:	8b 00                	mov    (%eax),%eax
f0132a25:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132a2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a2d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a36:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a3d:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132a42:	48                   	dec    %eax
f0132a43:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					   svaOfNF = point->sva;
f0132a48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a4b:	8b 40 08             	mov    0x8(%eax),%eax
f0132a4e:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
					   return  point;
f0132a53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a56:	e9 07 03 00 00       	jmp    f0132d62 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a5e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a61:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132a64:	0f 86 d4 00 00 00    	jbe    f0132b3e <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132a6a:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132a6f:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132a72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a75:	8b 50 08             	mov    0x8(%eax),%edx
f0132a78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a7b:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a81:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a84:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132a87:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132a8b:	75 17                	jne    f0132aa4 <alloc_block_NF+0x30d>
f0132a8d:	83 ec 04             	sub    $0x4,%esp
f0132a90:	68 d0 d8 13 f0       	push   $0xf013d8d0
f0132a95:	68 04 01 00 00       	push   $0x104
f0132a9a:	68 27 d8 13 f0       	push   $0xf013d827
f0132a9f:	e8 61 d7 fc ff       	call   f0100205 <_panic>
f0132aa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132aa7:	8b 00                	mov    (%eax),%eax
f0132aa9:	85 c0                	test   %eax,%eax
f0132aab:	74 10                	je     f0132abd <alloc_block_NF+0x326>
f0132aad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ab0:	8b 00                	mov    (%eax),%eax
f0132ab2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132ab5:	8b 52 04             	mov    0x4(%edx),%edx
f0132ab8:	89 50 04             	mov    %edx,0x4(%eax)
f0132abb:	eb 0b                	jmp    f0132ac8 <alloc_block_NF+0x331>
f0132abd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ac0:	8b 40 04             	mov    0x4(%eax),%eax
f0132ac3:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132ac8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132acb:	8b 40 04             	mov    0x4(%eax),%eax
f0132ace:	85 c0                	test   %eax,%eax
f0132ad0:	74 0f                	je     f0132ae1 <alloc_block_NF+0x34a>
f0132ad2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ad5:	8b 40 04             	mov    0x4(%eax),%eax
f0132ad8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132adb:	8b 12                	mov    (%edx),%edx
f0132add:	89 10                	mov    %edx,(%eax)
f0132adf:	eb 0a                	jmp    f0132aeb <alloc_block_NF+0x354>
f0132ae1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ae4:	8b 00                	mov    (%eax),%eax
f0132ae6:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132aeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132aee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132af4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132af7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132afe:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132b03:	48                   	dec    %eax
f0132b04:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					   svaOfNF = ReturnedBlock->sva;
f0132b09:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b0c:	8b 40 08             	mov    0x8(%eax),%eax
f0132b0f:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
					   point->sva += size;
f0132b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b17:	8b 50 08             	mov    0x8(%eax),%edx
f0132b1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b1d:	01 c2                	add    %eax,%edx
f0132b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b22:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132b25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b28:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b2b:	2b 45 08             	sub    0x8(%ebp),%eax
f0132b2e:	89 c2                	mov    %eax,%edx
f0132b30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b33:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132b36:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b39:	e9 24 02 00 00       	jmp    f0132d62 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132b3e:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132b43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132b46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b4a:	74 07                	je     f0132b53 <alloc_block_NF+0x3bc>
f0132b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b4f:	8b 00                	mov    (%eax),%eax
f0132b51:	eb 05                	jmp    f0132b58 <alloc_block_NF+0x3c1>
f0132b53:	b8 00 00 00 00       	mov    $0x0,%eax
f0132b58:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0132b5d:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132b62:	85 c0                	test   %eax,%eax
f0132b64:	0f 85 2b fe ff ff    	jne    f0132995 <alloc_block_NF+0x1fe>
f0132b6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b6e:	0f 85 21 fe ff ff    	jne    f0132995 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132b74:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132b79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132b7c:	e9 ae 01 00 00       	jmp    f0132d2f <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0132b81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b84:	8b 50 08             	mov    0x8(%eax),%edx
f0132b87:	a1 b0 1c 88 f0       	mov    0xf0881cb0,%eax
f0132b8c:	39 c2                	cmp    %eax,%edx
f0132b8e:	0f 83 93 01 00 00    	jae    f0132d27 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0132b94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b97:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b9a:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132b9d:	0f 82 84 01 00 00    	jb     f0132d27 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0132ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ba6:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ba9:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132bac:	0f 85 95 00 00 00    	jne    f0132c47 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132bb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132bb6:	75 17                	jne    f0132bcf <alloc_block_NF+0x438>
f0132bb8:	83 ec 04             	sub    $0x4,%esp
f0132bbb:	68 d0 d8 13 f0       	push   $0xf013d8d0
f0132bc0:	68 14 01 00 00       	push   $0x114
f0132bc5:	68 27 d8 13 f0       	push   $0xf013d827
f0132bca:	e8 36 d6 fc ff       	call   f0100205 <_panic>
f0132bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bd2:	8b 00                	mov    (%eax),%eax
f0132bd4:	85 c0                	test   %eax,%eax
f0132bd6:	74 10                	je     f0132be8 <alloc_block_NF+0x451>
f0132bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bdb:	8b 00                	mov    (%eax),%eax
f0132bdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132be0:	8b 52 04             	mov    0x4(%edx),%edx
f0132be3:	89 50 04             	mov    %edx,0x4(%eax)
f0132be6:	eb 0b                	jmp    f0132bf3 <alloc_block_NF+0x45c>
f0132be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132beb:	8b 40 04             	mov    0x4(%eax),%eax
f0132bee:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bf6:	8b 40 04             	mov    0x4(%eax),%eax
f0132bf9:	85 c0                	test   %eax,%eax
f0132bfb:	74 0f                	je     f0132c0c <alloc_block_NF+0x475>
f0132bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c00:	8b 40 04             	mov    0x4(%eax),%eax
f0132c03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132c06:	8b 12                	mov    (%edx),%edx
f0132c08:	89 10                	mov    %edx,(%eax)
f0132c0a:	eb 0a                	jmp    f0132c16 <alloc_block_NF+0x47f>
f0132c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c0f:	8b 00                	mov    (%eax),%eax
f0132c11:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132c16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c19:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132c1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c22:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c29:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132c2e:	48                   	dec    %eax
f0132c2f:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					   svaOfNF = point->sva;
f0132c34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c37:	8b 40 08             	mov    0x8(%eax),%eax
f0132c3a:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
					   return  point;
f0132c3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c42:	e9 1b 01 00 00       	jmp    f0132d62 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f0132c47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c4a:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c4d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132c50:	0f 86 d1 00 00 00    	jbe    f0132d27 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0132c56:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132c5b:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f0132c5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c61:	8b 50 08             	mov    0x8(%eax),%edx
f0132c64:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132c67:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f0132c6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132c6d:	8b 55 08             	mov    0x8(%ebp),%edx
f0132c70:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0132c73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132c77:	75 17                	jne    f0132c90 <alloc_block_NF+0x4f9>
f0132c79:	83 ec 04             	sub    $0x4,%esp
f0132c7c:	68 d0 d8 13 f0       	push   $0xf013d8d0
f0132c81:	68 1c 01 00 00       	push   $0x11c
f0132c86:	68 27 d8 13 f0       	push   $0xf013d827
f0132c8b:	e8 75 d5 fc ff       	call   f0100205 <_panic>
f0132c90:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132c93:	8b 00                	mov    (%eax),%eax
f0132c95:	85 c0                	test   %eax,%eax
f0132c97:	74 10                	je     f0132ca9 <alloc_block_NF+0x512>
f0132c99:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132c9c:	8b 00                	mov    (%eax),%eax
f0132c9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132ca1:	8b 52 04             	mov    0x4(%edx),%edx
f0132ca4:	89 50 04             	mov    %edx,0x4(%eax)
f0132ca7:	eb 0b                	jmp    f0132cb4 <alloc_block_NF+0x51d>
f0132ca9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cac:	8b 40 04             	mov    0x4(%eax),%eax
f0132caf:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132cb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cb7:	8b 40 04             	mov    0x4(%eax),%eax
f0132cba:	85 c0                	test   %eax,%eax
f0132cbc:	74 0f                	je     f0132ccd <alloc_block_NF+0x536>
f0132cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cc1:	8b 40 04             	mov    0x4(%eax),%eax
f0132cc4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132cc7:	8b 12                	mov    (%edx),%edx
f0132cc9:	89 10                	mov    %edx,(%eax)
f0132ccb:	eb 0a                	jmp    f0132cd7 <alloc_block_NF+0x540>
f0132ccd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cd0:	8b 00                	mov    (%eax),%eax
f0132cd2:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132cd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cda:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ce0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ce3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132cea:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132cef:	48                   	dec    %eax
f0132cf0:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					   svaOfNF = ReturnedBlock->sva;
f0132cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132cf8:	8b 40 08             	mov    0x8(%eax),%eax
f0132cfb:	a3 b0 1c 88 f0       	mov    %eax,0xf0881cb0
					   point->sva += size;
f0132d00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d03:	8b 50 08             	mov    0x8(%eax),%edx
f0132d06:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d09:	01 c2                	add    %eax,%edx
f0132d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d0e:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132d11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d14:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d17:	2b 45 08             	sub    0x8(%ebp),%eax
f0132d1a:	89 c2                	mov    %eax,%edx
f0132d1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d1f:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132d22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d25:	eb 3b                	jmp    f0132d62 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132d27:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132d2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132d2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132d33:	74 07                	je     f0132d3c <alloc_block_NF+0x5a5>
f0132d35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d38:	8b 00                	mov    (%eax),%eax
f0132d3a:	eb 05                	jmp    f0132d41 <alloc_block_NF+0x5aa>
f0132d3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0132d41:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0132d46:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0132d4b:	85 c0                	test   %eax,%eax
f0132d4d:	0f 85 2e fe ff ff    	jne    f0132b81 <alloc_block_NF+0x3ea>
f0132d53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132d57:	0f 85 24 fe ff ff    	jne    f0132b81 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f0132d5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132d62:	c9                   	leave  
f0132d63:	c3                   	ret    

f0132d64 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132d64:	55                   	push   %ebp
f0132d65:	89 e5                	mov    %esp,%ebp
f0132d67:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f0132d6a:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132d6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0132d72:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f0132d77:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f0132d7a:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132d7f:	85 c0                	test   %eax,%eax
f0132d81:	74 14                	je     f0132d97 <insert_sorted_with_merge_freeList+0x33>
f0132d83:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d86:	8b 50 08             	mov    0x8(%eax),%edx
f0132d89:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132d8c:	8b 40 08             	mov    0x8(%eax),%eax
f0132d8f:	39 c2                	cmp    %eax,%edx
f0132d91:	0f 87 9b 01 00 00    	ja     f0132f32 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0132d97:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132d9b:	75 17                	jne    f0132db4 <insert_sorted_with_merge_freeList+0x50>
f0132d9d:	83 ec 04             	sub    $0x4,%esp
f0132da0:	68 04 d8 13 f0       	push   $0xf013d804
f0132da5:	68 38 01 00 00       	push   $0x138
f0132daa:	68 27 d8 13 f0       	push   $0xf013d827
f0132daf:	e8 51 d4 fc ff       	call   f0100205 <_panic>
f0132db4:	8b 15 64 1d 88 f0    	mov    0xf0881d64,%edx
f0132dba:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dbd:	89 10                	mov    %edx,(%eax)
f0132dbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dc2:	8b 00                	mov    (%eax),%eax
f0132dc4:	85 c0                	test   %eax,%eax
f0132dc6:	74 0d                	je     f0132dd5 <insert_sorted_with_merge_freeList+0x71>
f0132dc8:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f0132dcd:	8b 55 08             	mov    0x8(%ebp),%edx
f0132dd0:	89 50 04             	mov    %edx,0x4(%eax)
f0132dd3:	eb 08                	jmp    f0132ddd <insert_sorted_with_merge_freeList+0x79>
f0132dd5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dd8:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132ddd:	8b 45 08             	mov    0x8(%ebp),%eax
f0132de0:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132de5:	8b 45 08             	mov    0x8(%ebp),%eax
f0132de8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132def:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132df4:	40                   	inc    %eax
f0132df5:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132dfa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132dfe:	0f 84 a8 06 00 00    	je     f01334ac <insert_sorted_with_merge_freeList+0x748>
f0132e04:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e07:	8b 50 08             	mov    0x8(%eax),%edx
f0132e0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e0d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e10:	01 c2                	add    %eax,%edx
f0132e12:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e15:	8b 40 08             	mov    0x8(%eax),%eax
f0132e18:	39 c2                	cmp    %eax,%edx
f0132e1a:	0f 85 8c 06 00 00    	jne    f01334ac <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0132e20:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e23:	8b 50 0c             	mov    0xc(%eax),%edx
f0132e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e29:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e2c:	01 c2                	add    %eax,%edx
f0132e2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e31:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132e34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132e38:	75 17                	jne    f0132e51 <insert_sorted_with_merge_freeList+0xed>
f0132e3a:	83 ec 04             	sub    $0x4,%esp
f0132e3d:	68 d0 d8 13 f0       	push   $0xf013d8d0
f0132e42:	68 3c 01 00 00       	push   $0x13c
f0132e47:	68 27 d8 13 f0       	push   $0xf013d827
f0132e4c:	e8 b4 d3 fc ff       	call   f0100205 <_panic>
f0132e51:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e54:	8b 00                	mov    (%eax),%eax
f0132e56:	85 c0                	test   %eax,%eax
f0132e58:	74 10                	je     f0132e6a <insert_sorted_with_merge_freeList+0x106>
f0132e5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e5d:	8b 00                	mov    (%eax),%eax
f0132e5f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132e62:	8b 52 04             	mov    0x4(%edx),%edx
f0132e65:	89 50 04             	mov    %edx,0x4(%eax)
f0132e68:	eb 0b                	jmp    f0132e75 <insert_sorted_with_merge_freeList+0x111>
f0132e6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e6d:	8b 40 04             	mov    0x4(%eax),%eax
f0132e70:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0132e75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e78:	8b 40 04             	mov    0x4(%eax),%eax
f0132e7b:	85 c0                	test   %eax,%eax
f0132e7d:	74 0f                	je     f0132e8e <insert_sorted_with_merge_freeList+0x12a>
f0132e7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e82:	8b 40 04             	mov    0x4(%eax),%eax
f0132e85:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132e88:	8b 12                	mov    (%edx),%edx
f0132e8a:	89 10                	mov    %edx,(%eax)
f0132e8c:	eb 0a                	jmp    f0132e98 <insert_sorted_with_merge_freeList+0x134>
f0132e8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e91:	8b 00                	mov    (%eax),%eax
f0132e93:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0132e98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ea1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ea4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132eab:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0132eb0:	48                   	dec    %eax
f0132eb1:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
			head->size = 0;
f0132eb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132eb9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0132ec0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ec3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0132eca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132ece:	75 17                	jne    f0132ee7 <insert_sorted_with_merge_freeList+0x183>
f0132ed0:	83 ec 04             	sub    $0x4,%esp
f0132ed3:	68 04 d8 13 f0       	push   $0xf013d804
f0132ed8:	68 3f 01 00 00       	push   $0x13f
f0132edd:	68 27 d8 13 f0       	push   $0xf013d827
f0132ee2:	e8 1e d3 fc ff       	call   f0100205 <_panic>
f0132ee7:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f0132eed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ef0:	89 10                	mov    %edx,(%eax)
f0132ef2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ef5:	8b 00                	mov    (%eax),%eax
f0132ef7:	85 c0                	test   %eax,%eax
f0132ef9:	74 0d                	je     f0132f08 <insert_sorted_with_merge_freeList+0x1a4>
f0132efb:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132f00:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132f03:	89 50 04             	mov    %edx,0x4(%eax)
f0132f06:	eb 08                	jmp    f0132f10 <insert_sorted_with_merge_freeList+0x1ac>
f0132f08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f0b:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132f10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f13:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132f18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f1b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f22:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132f27:	40                   	inc    %eax
f0132f28:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132f2d:	e9 7a 05 00 00       	jmp    f01334ac <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0132f32:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f35:	8b 50 08             	mov    0x8(%eax),%edx
f0132f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f3b:	8b 40 08             	mov    0x8(%eax),%eax
f0132f3e:	39 c2                	cmp    %eax,%edx
f0132f40:	0f 82 14 01 00 00    	jb     f013305a <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0132f46:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f49:	8b 50 08             	mov    0x8(%eax),%edx
f0132f4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f4f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f52:	01 c2                	add    %eax,%edx
f0132f54:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f57:	8b 40 08             	mov    0x8(%eax),%eax
f0132f5a:	39 c2                	cmp    %eax,%edx
f0132f5c:	0f 85 90 00 00 00    	jne    f0132ff2 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0132f62:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f65:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f68:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f6b:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f6e:	01 c2                	add    %eax,%edx
f0132f70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f73:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0132f76:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f79:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0132f80:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f83:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132f8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132f8e:	75 17                	jne    f0132fa7 <insert_sorted_with_merge_freeList+0x243>
f0132f90:	83 ec 04             	sub    $0x4,%esp
f0132f93:	68 04 d8 13 f0       	push   $0xf013d804
f0132f98:	68 49 01 00 00       	push   $0x149
f0132f9d:	68 27 d8 13 f0       	push   $0xf013d827
f0132fa2:	e8 5e d2 fc ff       	call   f0100205 <_panic>
f0132fa7:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f0132fad:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fb0:	89 10                	mov    %edx,(%eax)
f0132fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fb5:	8b 00                	mov    (%eax),%eax
f0132fb7:	85 c0                	test   %eax,%eax
f0132fb9:	74 0d                	je     f0132fc8 <insert_sorted_with_merge_freeList+0x264>
f0132fbb:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f0132fc0:	8b 55 08             	mov    0x8(%ebp),%edx
f0132fc3:	89 50 04             	mov    %edx,0x4(%eax)
f0132fc6:	eb 08                	jmp    f0132fd0 <insert_sorted_with_merge_freeList+0x26c>
f0132fc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fcb:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f0132fd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fd3:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0132fd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fdb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132fe2:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0132fe7:	40                   	inc    %eax
f0132fe8:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132fed:	e9 bb 04 00 00       	jmp    f01334ad <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0132ff2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132ff6:	75 17                	jne    f013300f <insert_sorted_with_merge_freeList+0x2ab>
f0132ff8:	83 ec 04             	sub    $0x4,%esp
f0132ffb:	68 78 d8 13 f0       	push   $0xf013d878
f0133000:	68 4c 01 00 00       	push   $0x14c
f0133005:	68 27 d8 13 f0       	push   $0xf013d827
f013300a:	e8 f6 d1 fc ff       	call   f0100205 <_panic>
f013300f:	8b 15 68 1d 88 f0    	mov    0xf0881d68,%edx
f0133015:	8b 45 08             	mov    0x8(%ebp),%eax
f0133018:	89 50 04             	mov    %edx,0x4(%eax)
f013301b:	8b 45 08             	mov    0x8(%ebp),%eax
f013301e:	8b 40 04             	mov    0x4(%eax),%eax
f0133021:	85 c0                	test   %eax,%eax
f0133023:	74 0c                	je     f0133031 <insert_sorted_with_merge_freeList+0x2cd>
f0133025:	a1 68 1d 88 f0       	mov    0xf0881d68,%eax
f013302a:	8b 55 08             	mov    0x8(%ebp),%edx
f013302d:	89 10                	mov    %edx,(%eax)
f013302f:	eb 08                	jmp    f0133039 <insert_sorted_with_merge_freeList+0x2d5>
f0133031:	8b 45 08             	mov    0x8(%ebp),%eax
f0133034:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0133039:	8b 45 08             	mov    0x8(%ebp),%eax
f013303c:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0133041:	8b 45 08             	mov    0x8(%ebp),%eax
f0133044:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013304a:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f013304f:	40                   	inc    %eax
f0133050:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133055:	e9 53 04 00 00       	jmp    f01334ad <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f013305a:	a1 64 1d 88 f0       	mov    0xf0881d64,%eax
f013305f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133062:	e9 15 04 00 00       	jmp    f013347c <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0133067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013306a:	8b 00                	mov    (%eax),%eax
f013306c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f013306f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133072:	8b 50 08             	mov    0x8(%eax),%edx
f0133075:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133078:	8b 40 08             	mov    0x8(%eax),%eax
f013307b:	39 c2                	cmp    %eax,%edx
f013307d:	0f 86 f1 03 00 00    	jbe    f0133474 <insert_sorted_with_merge_freeList+0x710>
f0133083:	8b 45 08             	mov    0x8(%ebp),%eax
f0133086:	8b 50 08             	mov    0x8(%eax),%edx
f0133089:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013308c:	8b 40 08             	mov    0x8(%eax),%eax
f013308f:	39 c2                	cmp    %eax,%edx
f0133091:	0f 83 dd 03 00 00    	jae    f0133474 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0133097:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013309a:	8b 50 08             	mov    0x8(%eax),%edx
f013309d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330a0:	8b 40 0c             	mov    0xc(%eax),%eax
f01330a3:	01 c2                	add    %eax,%edx
f01330a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01330a8:	8b 40 08             	mov    0x8(%eax),%eax
f01330ab:	39 c2                	cmp    %eax,%edx
f01330ad:	0f 85 b9 01 00 00    	jne    f013326c <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01330b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01330b6:	8b 50 08             	mov    0x8(%eax),%edx
f01330b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01330bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01330bf:	01 c2                	add    %eax,%edx
f01330c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330c4:	8b 40 08             	mov    0x8(%eax),%eax
f01330c7:	39 c2                	cmp    %eax,%edx
f01330c9:	0f 85 0d 01 00 00    	jne    f01331dc <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f01330cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330d2:	8b 50 0c             	mov    0xc(%eax),%edx
f01330d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01330d8:	8b 40 0c             	mov    0xc(%eax),%eax
f01330db:	01 c2                	add    %eax,%edx
f01330dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330e0:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f01330e3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01330e7:	75 17                	jne    f0133100 <insert_sorted_with_merge_freeList+0x39c>
f01330e9:	83 ec 04             	sub    $0x4,%esp
f01330ec:	68 d0 d8 13 f0       	push   $0xf013d8d0
f01330f1:	68 5c 01 00 00       	push   $0x15c
f01330f6:	68 27 d8 13 f0       	push   $0xf013d827
f01330fb:	e8 05 d1 fc ff       	call   f0100205 <_panic>
f0133100:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133103:	8b 00                	mov    (%eax),%eax
f0133105:	85 c0                	test   %eax,%eax
f0133107:	74 10                	je     f0133119 <insert_sorted_with_merge_freeList+0x3b5>
f0133109:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013310c:	8b 00                	mov    (%eax),%eax
f013310e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133111:	8b 52 04             	mov    0x4(%edx),%edx
f0133114:	89 50 04             	mov    %edx,0x4(%eax)
f0133117:	eb 0b                	jmp    f0133124 <insert_sorted_with_merge_freeList+0x3c0>
f0133119:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013311c:	8b 40 04             	mov    0x4(%eax),%eax
f013311f:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0133124:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133127:	8b 40 04             	mov    0x4(%eax),%eax
f013312a:	85 c0                	test   %eax,%eax
f013312c:	74 0f                	je     f013313d <insert_sorted_with_merge_freeList+0x3d9>
f013312e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133131:	8b 40 04             	mov    0x4(%eax),%eax
f0133134:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133137:	8b 12                	mov    (%edx),%edx
f0133139:	89 10                	mov    %edx,(%eax)
f013313b:	eb 0a                	jmp    f0133147 <insert_sorted_with_merge_freeList+0x3e3>
f013313d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133140:	8b 00                	mov    (%eax),%eax
f0133142:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f0133147:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013314a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133150:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133153:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013315a:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f013315f:	48                   	dec    %eax
f0133160:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
						nextBlock->sva = 0;
f0133165:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133168:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f013316f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133172:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0133179:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013317d:	75 17                	jne    f0133196 <insert_sorted_with_merge_freeList+0x432>
f013317f:	83 ec 04             	sub    $0x4,%esp
f0133182:	68 04 d8 13 f0       	push   $0xf013d804
f0133187:	68 5f 01 00 00       	push   $0x15f
f013318c:	68 27 d8 13 f0       	push   $0xf013d827
f0133191:	e8 6f d0 fc ff       	call   f0100205 <_panic>
f0133196:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f013319c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013319f:	89 10                	mov    %edx,(%eax)
f01331a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331a4:	8b 00                	mov    (%eax),%eax
f01331a6:	85 c0                	test   %eax,%eax
f01331a8:	74 0d                	je     f01331b7 <insert_sorted_with_merge_freeList+0x453>
f01331aa:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f01331af:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01331b2:	89 50 04             	mov    %edx,0x4(%eax)
f01331b5:	eb 08                	jmp    f01331bf <insert_sorted_with_merge_freeList+0x45b>
f01331b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331ba:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01331bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331c2:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f01331c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01331ca:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01331d1:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f01331d6:	40                   	inc    %eax
f01331d7:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					}
					currentBlock->size += blockToInsert->size;
f01331dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331df:	8b 50 0c             	mov    0xc(%eax),%edx
f01331e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01331e5:	8b 40 0c             	mov    0xc(%eax),%eax
f01331e8:	01 c2                	add    %eax,%edx
f01331ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331ed:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f01331f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01331f3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f01331fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01331fd:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0133204:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133208:	75 17                	jne    f0133221 <insert_sorted_with_merge_freeList+0x4bd>
f013320a:	83 ec 04             	sub    $0x4,%esp
f013320d:	68 04 d8 13 f0       	push   $0xf013d804
f0133212:	68 64 01 00 00       	push   $0x164
f0133217:	68 27 d8 13 f0       	push   $0xf013d827
f013321c:	e8 e4 cf fc ff       	call   f0100205 <_panic>
f0133221:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f0133227:	8b 45 08             	mov    0x8(%ebp),%eax
f013322a:	89 10                	mov    %edx,(%eax)
f013322c:	8b 45 08             	mov    0x8(%ebp),%eax
f013322f:	8b 00                	mov    (%eax),%eax
f0133231:	85 c0                	test   %eax,%eax
f0133233:	74 0d                	je     f0133242 <insert_sorted_with_merge_freeList+0x4de>
f0133235:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f013323a:	8b 55 08             	mov    0x8(%ebp),%edx
f013323d:	89 50 04             	mov    %edx,0x4(%eax)
f0133240:	eb 08                	jmp    f013324a <insert_sorted_with_merge_freeList+0x4e6>
f0133242:	8b 45 08             	mov    0x8(%ebp),%eax
f0133245:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f013324a:	8b 45 08             	mov    0x8(%ebp),%eax
f013324d:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f0133252:	8b 45 08             	mov    0x8(%ebp),%eax
f0133255:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013325c:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f0133261:	40                   	inc    %eax
f0133262:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					break;
f0133267:	e9 41 02 00 00       	jmp    f01334ad <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f013326c:	8b 45 08             	mov    0x8(%ebp),%eax
f013326f:	8b 50 08             	mov    0x8(%eax),%edx
f0133272:	8b 45 08             	mov    0x8(%ebp),%eax
f0133275:	8b 40 0c             	mov    0xc(%eax),%eax
f0133278:	01 c2                	add    %eax,%edx
f013327a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013327d:	8b 40 08             	mov    0x8(%eax),%eax
f0133280:	39 c2                	cmp    %eax,%edx
f0133282:	0f 85 7c 01 00 00    	jne    f0133404 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0133288:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013328c:	74 06                	je     f0133294 <insert_sorted_with_merge_freeList+0x530>
f013328e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133292:	75 17                	jne    f01332ab <insert_sorted_with_merge_freeList+0x547>
f0133294:	83 ec 04             	sub    $0x4,%esp
f0133297:	68 40 d8 13 f0       	push   $0xf013d840
f013329c:	68 69 01 00 00       	push   $0x169
f01332a1:	68 27 d8 13 f0       	push   $0xf013d827
f01332a6:	e8 5a cf fc ff       	call   f0100205 <_panic>
f01332ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332ae:	8b 50 04             	mov    0x4(%eax),%edx
f01332b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01332b4:	89 50 04             	mov    %edx,0x4(%eax)
f01332b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01332ba:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01332bd:	89 10                	mov    %edx,(%eax)
f01332bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332c2:	8b 40 04             	mov    0x4(%eax),%eax
f01332c5:	85 c0                	test   %eax,%eax
f01332c7:	74 0d                	je     f01332d6 <insert_sorted_with_merge_freeList+0x572>
f01332c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332cc:	8b 40 04             	mov    0x4(%eax),%eax
f01332cf:	8b 55 08             	mov    0x8(%ebp),%edx
f01332d2:	89 10                	mov    %edx,(%eax)
f01332d4:	eb 08                	jmp    f01332de <insert_sorted_with_merge_freeList+0x57a>
f01332d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01332d9:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f01332de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332e1:	8b 55 08             	mov    0x8(%ebp),%edx
f01332e4:	89 50 04             	mov    %edx,0x4(%eax)
f01332e7:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f01332ec:	40                   	inc    %eax
f01332ed:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					blockToInsert->size += nextBlock->size;
f01332f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01332f5:	8b 50 0c             	mov    0xc(%eax),%edx
f01332f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01332fb:	8b 40 0c             	mov    0xc(%eax),%eax
f01332fe:	01 c2                	add    %eax,%edx
f0133300:	8b 45 08             	mov    0x8(%ebp),%eax
f0133303:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0133306:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013330a:	75 17                	jne    f0133323 <insert_sorted_with_merge_freeList+0x5bf>
f013330c:	83 ec 04             	sub    $0x4,%esp
f013330f:	68 d0 d8 13 f0       	push   $0xf013d8d0
f0133314:	68 6b 01 00 00       	push   $0x16b
f0133319:	68 27 d8 13 f0       	push   $0xf013d827
f013331e:	e8 e2 ce fc ff       	call   f0100205 <_panic>
f0133323:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133326:	8b 00                	mov    (%eax),%eax
f0133328:	85 c0                	test   %eax,%eax
f013332a:	74 10                	je     f013333c <insert_sorted_with_merge_freeList+0x5d8>
f013332c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013332f:	8b 00                	mov    (%eax),%eax
f0133331:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0133334:	8b 52 04             	mov    0x4(%edx),%edx
f0133337:	89 50 04             	mov    %edx,0x4(%eax)
f013333a:	eb 0b                	jmp    f0133347 <insert_sorted_with_merge_freeList+0x5e3>
f013333c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013333f:	8b 40 04             	mov    0x4(%eax),%eax
f0133342:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0133347:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013334a:	8b 40 04             	mov    0x4(%eax),%eax
f013334d:	85 c0                	test   %eax,%eax
f013334f:	74 0f                	je     f0133360 <insert_sorted_with_merge_freeList+0x5fc>
f0133351:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133354:	8b 40 04             	mov    0x4(%eax),%eax
f0133357:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013335a:	8b 12                	mov    (%edx),%edx
f013335c:	89 10                	mov    %edx,(%eax)
f013335e:	eb 0a                	jmp    f013336a <insert_sorted_with_merge_freeList+0x606>
f0133360:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133363:	8b 00                	mov    (%eax),%eax
f0133365:	a3 64 1d 88 f0       	mov    %eax,0xf0881d64
f013336a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013336d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0133373:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133376:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013337d:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f0133382:	48                   	dec    %eax
f0133383:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					nextBlock->sva = 0;
f0133388:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013338b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f0133392:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0133395:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f013339c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01333a0:	75 17                	jne    f01333b9 <insert_sorted_with_merge_freeList+0x655>
f01333a2:	83 ec 04             	sub    $0x4,%esp
f01333a5:	68 04 d8 13 f0       	push   $0xf013d804
f01333aa:	68 6e 01 00 00       	push   $0x16e
f01333af:	68 27 d8 13 f0       	push   $0xf013d827
f01333b4:	e8 4c ce fc ff       	call   f0100205 <_panic>
f01333b9:	8b 15 98 1d 88 f0    	mov    0xf0881d98,%edx
f01333bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333c2:	89 10                	mov    %edx,(%eax)
f01333c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333c7:	8b 00                	mov    (%eax),%eax
f01333c9:	85 c0                	test   %eax,%eax
f01333cb:	74 0d                	je     f01333da <insert_sorted_with_merge_freeList+0x676>
f01333cd:	a1 98 1d 88 f0       	mov    0xf0881d98,%eax
f01333d2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01333d5:	89 50 04             	mov    %edx,0x4(%eax)
f01333d8:	eb 08                	jmp    f01333e2 <insert_sorted_with_merge_freeList+0x67e>
f01333da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333dd:	a3 9c 1d 88 f0       	mov    %eax,0xf0881d9c
f01333e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333e5:	a3 98 1d 88 f0       	mov    %eax,0xf0881d98
f01333ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01333ed:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01333f4:	a1 a4 1d 88 f0       	mov    0xf0881da4,%eax
f01333f9:	40                   	inc    %eax
f01333fa:	a3 a4 1d 88 f0       	mov    %eax,0xf0881da4
					break;
f01333ff:	e9 a9 00 00 00       	jmp    f01334ad <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0133404:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133408:	74 06                	je     f0133410 <insert_sorted_with_merge_freeList+0x6ac>
f013340a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013340e:	75 17                	jne    f0133427 <insert_sorted_with_merge_freeList+0x6c3>
f0133410:	83 ec 04             	sub    $0x4,%esp
f0133413:	68 9c d8 13 f0       	push   $0xf013d89c
f0133418:	68 73 01 00 00       	push   $0x173
f013341d:	68 27 d8 13 f0       	push   $0xf013d827
f0133422:	e8 de cd fc ff       	call   f0100205 <_panic>
f0133427:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013342a:	8b 10                	mov    (%eax),%edx
f013342c:	8b 45 08             	mov    0x8(%ebp),%eax
f013342f:	89 10                	mov    %edx,(%eax)
f0133431:	8b 45 08             	mov    0x8(%ebp),%eax
f0133434:	8b 00                	mov    (%eax),%eax
f0133436:	85 c0                	test   %eax,%eax
f0133438:	74 0b                	je     f0133445 <insert_sorted_with_merge_freeList+0x6e1>
f013343a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013343d:	8b 00                	mov    (%eax),%eax
f013343f:	8b 55 08             	mov    0x8(%ebp),%edx
f0133442:	89 50 04             	mov    %edx,0x4(%eax)
f0133445:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133448:	8b 55 08             	mov    0x8(%ebp),%edx
f013344b:	89 10                	mov    %edx,(%eax)
f013344d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133450:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133453:	89 50 04             	mov    %edx,0x4(%eax)
f0133456:	8b 45 08             	mov    0x8(%ebp),%eax
f0133459:	8b 00                	mov    (%eax),%eax
f013345b:	85 c0                	test   %eax,%eax
f013345d:	75 08                	jne    f0133467 <insert_sorted_with_merge_freeList+0x703>
f013345f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133462:	a3 68 1d 88 f0       	mov    %eax,0xf0881d68
f0133467:	a1 70 1d 88 f0       	mov    0xf0881d70,%eax
f013346c:	40                   	inc    %eax
f013346d:	a3 70 1d 88 f0       	mov    %eax,0xf0881d70
					break;
f0133472:	eb 39                	jmp    f01334ad <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0133474:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0133479:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013347c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133480:	74 07                	je     f0133489 <insert_sorted_with_merge_freeList+0x725>
f0133482:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133485:	8b 00                	mov    (%eax),%eax
f0133487:	eb 05                	jmp    f013348e <insert_sorted_with_merge_freeList+0x72a>
f0133489:	b8 00 00 00 00       	mov    $0x0,%eax
f013348e:	a3 6c 1d 88 f0       	mov    %eax,0xf0881d6c
f0133493:	a1 6c 1d 88 f0       	mov    0xf0881d6c,%eax
f0133498:	85 c0                	test   %eax,%eax
f013349a:	0f 85 c7 fb ff ff    	jne    f0133067 <insert_sorted_with_merge_freeList+0x303>
f01334a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01334a4:	0f 85 bd fb ff ff    	jne    f0133067 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01334aa:	eb 01                	jmp    f01334ad <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01334ac:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01334ad:	90                   	nop
f01334ae:	c9                   	leave  
f01334af:	c3                   	ret    

f01334b0 <__udivdi3>:
f01334b0:	55                   	push   %ebp
f01334b1:	57                   	push   %edi
f01334b2:	56                   	push   %esi
f01334b3:	53                   	push   %ebx
f01334b4:	83 ec 1c             	sub    $0x1c,%esp
f01334b7:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01334bb:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01334bf:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01334c3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01334c7:	89 ca                	mov    %ecx,%edx
f01334c9:	89 f8                	mov    %edi,%eax
f01334cb:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01334cf:	85 f6                	test   %esi,%esi
f01334d1:	75 2d                	jne    f0133500 <__udivdi3+0x50>
f01334d3:	39 cf                	cmp    %ecx,%edi
f01334d5:	77 65                	ja     f013353c <__udivdi3+0x8c>
f01334d7:	89 fd                	mov    %edi,%ebp
f01334d9:	85 ff                	test   %edi,%edi
f01334db:	75 0b                	jne    f01334e8 <__udivdi3+0x38>
f01334dd:	b8 01 00 00 00       	mov    $0x1,%eax
f01334e2:	31 d2                	xor    %edx,%edx
f01334e4:	f7 f7                	div    %edi
f01334e6:	89 c5                	mov    %eax,%ebp
f01334e8:	31 d2                	xor    %edx,%edx
f01334ea:	89 c8                	mov    %ecx,%eax
f01334ec:	f7 f5                	div    %ebp
f01334ee:	89 c1                	mov    %eax,%ecx
f01334f0:	89 d8                	mov    %ebx,%eax
f01334f2:	f7 f5                	div    %ebp
f01334f4:	89 cf                	mov    %ecx,%edi
f01334f6:	89 fa                	mov    %edi,%edx
f01334f8:	83 c4 1c             	add    $0x1c,%esp
f01334fb:	5b                   	pop    %ebx
f01334fc:	5e                   	pop    %esi
f01334fd:	5f                   	pop    %edi
f01334fe:	5d                   	pop    %ebp
f01334ff:	c3                   	ret    
f0133500:	39 ce                	cmp    %ecx,%esi
f0133502:	77 28                	ja     f013352c <__udivdi3+0x7c>
f0133504:	0f bd fe             	bsr    %esi,%edi
f0133507:	83 f7 1f             	xor    $0x1f,%edi
f013350a:	75 40                	jne    f013354c <__udivdi3+0x9c>
f013350c:	39 ce                	cmp    %ecx,%esi
f013350e:	72 0a                	jb     f013351a <__udivdi3+0x6a>
f0133510:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0133514:	0f 87 9e 00 00 00    	ja     f01335b8 <__udivdi3+0x108>
f013351a:	b8 01 00 00 00       	mov    $0x1,%eax
f013351f:	89 fa                	mov    %edi,%edx
f0133521:	83 c4 1c             	add    $0x1c,%esp
f0133524:	5b                   	pop    %ebx
f0133525:	5e                   	pop    %esi
f0133526:	5f                   	pop    %edi
f0133527:	5d                   	pop    %ebp
f0133528:	c3                   	ret    
f0133529:	8d 76 00             	lea    0x0(%esi),%esi
f013352c:	31 ff                	xor    %edi,%edi
f013352e:	31 c0                	xor    %eax,%eax
f0133530:	89 fa                	mov    %edi,%edx
f0133532:	83 c4 1c             	add    $0x1c,%esp
f0133535:	5b                   	pop    %ebx
f0133536:	5e                   	pop    %esi
f0133537:	5f                   	pop    %edi
f0133538:	5d                   	pop    %ebp
f0133539:	c3                   	ret    
f013353a:	66 90                	xchg   %ax,%ax
f013353c:	89 d8                	mov    %ebx,%eax
f013353e:	f7 f7                	div    %edi
f0133540:	31 ff                	xor    %edi,%edi
f0133542:	89 fa                	mov    %edi,%edx
f0133544:	83 c4 1c             	add    $0x1c,%esp
f0133547:	5b                   	pop    %ebx
f0133548:	5e                   	pop    %esi
f0133549:	5f                   	pop    %edi
f013354a:	5d                   	pop    %ebp
f013354b:	c3                   	ret    
f013354c:	bd 20 00 00 00       	mov    $0x20,%ebp
f0133551:	89 eb                	mov    %ebp,%ebx
f0133553:	29 fb                	sub    %edi,%ebx
f0133555:	89 f9                	mov    %edi,%ecx
f0133557:	d3 e6                	shl    %cl,%esi
f0133559:	89 c5                	mov    %eax,%ebp
f013355b:	88 d9                	mov    %bl,%cl
f013355d:	d3 ed                	shr    %cl,%ebp
f013355f:	89 e9                	mov    %ebp,%ecx
f0133561:	09 f1                	or     %esi,%ecx
f0133563:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0133567:	89 f9                	mov    %edi,%ecx
f0133569:	d3 e0                	shl    %cl,%eax
f013356b:	89 c5                	mov    %eax,%ebp
f013356d:	89 d6                	mov    %edx,%esi
f013356f:	88 d9                	mov    %bl,%cl
f0133571:	d3 ee                	shr    %cl,%esi
f0133573:	89 f9                	mov    %edi,%ecx
f0133575:	d3 e2                	shl    %cl,%edx
f0133577:	8b 44 24 08          	mov    0x8(%esp),%eax
f013357b:	88 d9                	mov    %bl,%cl
f013357d:	d3 e8                	shr    %cl,%eax
f013357f:	09 c2                	or     %eax,%edx
f0133581:	89 d0                	mov    %edx,%eax
f0133583:	89 f2                	mov    %esi,%edx
f0133585:	f7 74 24 0c          	divl   0xc(%esp)
f0133589:	89 d6                	mov    %edx,%esi
f013358b:	89 c3                	mov    %eax,%ebx
f013358d:	f7 e5                	mul    %ebp
f013358f:	39 d6                	cmp    %edx,%esi
f0133591:	72 19                	jb     f01335ac <__udivdi3+0xfc>
f0133593:	74 0b                	je     f01335a0 <__udivdi3+0xf0>
f0133595:	89 d8                	mov    %ebx,%eax
f0133597:	31 ff                	xor    %edi,%edi
f0133599:	e9 58 ff ff ff       	jmp    f01334f6 <__udivdi3+0x46>
f013359e:	66 90                	xchg   %ax,%ax
f01335a0:	8b 54 24 08          	mov    0x8(%esp),%edx
f01335a4:	89 f9                	mov    %edi,%ecx
f01335a6:	d3 e2                	shl    %cl,%edx
f01335a8:	39 c2                	cmp    %eax,%edx
f01335aa:	73 e9                	jae    f0133595 <__udivdi3+0xe5>
f01335ac:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01335af:	31 ff                	xor    %edi,%edi
f01335b1:	e9 40 ff ff ff       	jmp    f01334f6 <__udivdi3+0x46>
f01335b6:	66 90                	xchg   %ax,%ax
f01335b8:	31 c0                	xor    %eax,%eax
f01335ba:	e9 37 ff ff ff       	jmp    f01334f6 <__udivdi3+0x46>
f01335bf:	90                   	nop

f01335c0 <__umoddi3>:
f01335c0:	55                   	push   %ebp
f01335c1:	57                   	push   %edi
f01335c2:	56                   	push   %esi
f01335c3:	53                   	push   %ebx
f01335c4:	83 ec 1c             	sub    $0x1c,%esp
f01335c7:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01335cb:	8b 74 24 34          	mov    0x34(%esp),%esi
f01335cf:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01335d3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01335d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01335db:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01335df:	89 f3                	mov    %esi,%ebx
f01335e1:	89 fa                	mov    %edi,%edx
f01335e3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01335e7:	89 34 24             	mov    %esi,(%esp)
f01335ea:	85 c0                	test   %eax,%eax
f01335ec:	75 1a                	jne    f0133608 <__umoddi3+0x48>
f01335ee:	39 f7                	cmp    %esi,%edi
f01335f0:	0f 86 a2 00 00 00    	jbe    f0133698 <__umoddi3+0xd8>
f01335f6:	89 c8                	mov    %ecx,%eax
f01335f8:	89 f2                	mov    %esi,%edx
f01335fa:	f7 f7                	div    %edi
f01335fc:	89 d0                	mov    %edx,%eax
f01335fe:	31 d2                	xor    %edx,%edx
f0133600:	83 c4 1c             	add    $0x1c,%esp
f0133603:	5b                   	pop    %ebx
f0133604:	5e                   	pop    %esi
f0133605:	5f                   	pop    %edi
f0133606:	5d                   	pop    %ebp
f0133607:	c3                   	ret    
f0133608:	39 f0                	cmp    %esi,%eax
f013360a:	0f 87 ac 00 00 00    	ja     f01336bc <__umoddi3+0xfc>
f0133610:	0f bd e8             	bsr    %eax,%ebp
f0133613:	83 f5 1f             	xor    $0x1f,%ebp
f0133616:	0f 84 ac 00 00 00    	je     f01336c8 <__umoddi3+0x108>
f013361c:	bf 20 00 00 00       	mov    $0x20,%edi
f0133621:	29 ef                	sub    %ebp,%edi
f0133623:	89 fe                	mov    %edi,%esi
f0133625:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0133629:	89 e9                	mov    %ebp,%ecx
f013362b:	d3 e0                	shl    %cl,%eax
f013362d:	89 d7                	mov    %edx,%edi
f013362f:	89 f1                	mov    %esi,%ecx
f0133631:	d3 ef                	shr    %cl,%edi
f0133633:	09 c7                	or     %eax,%edi
f0133635:	89 e9                	mov    %ebp,%ecx
f0133637:	d3 e2                	shl    %cl,%edx
f0133639:	89 14 24             	mov    %edx,(%esp)
f013363c:	89 d8                	mov    %ebx,%eax
f013363e:	d3 e0                	shl    %cl,%eax
f0133640:	89 c2                	mov    %eax,%edx
f0133642:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133646:	d3 e0                	shl    %cl,%eax
f0133648:	89 44 24 04          	mov    %eax,0x4(%esp)
f013364c:	8b 44 24 08          	mov    0x8(%esp),%eax
f0133650:	89 f1                	mov    %esi,%ecx
f0133652:	d3 e8                	shr    %cl,%eax
f0133654:	09 d0                	or     %edx,%eax
f0133656:	d3 eb                	shr    %cl,%ebx
f0133658:	89 da                	mov    %ebx,%edx
f013365a:	f7 f7                	div    %edi
f013365c:	89 d3                	mov    %edx,%ebx
f013365e:	f7 24 24             	mull   (%esp)
f0133661:	89 c6                	mov    %eax,%esi
f0133663:	89 d1                	mov    %edx,%ecx
f0133665:	39 d3                	cmp    %edx,%ebx
f0133667:	0f 82 87 00 00 00    	jb     f01336f4 <__umoddi3+0x134>
f013366d:	0f 84 91 00 00 00    	je     f0133704 <__umoddi3+0x144>
f0133673:	8b 54 24 04          	mov    0x4(%esp),%edx
f0133677:	29 f2                	sub    %esi,%edx
f0133679:	19 cb                	sbb    %ecx,%ebx
f013367b:	89 d8                	mov    %ebx,%eax
f013367d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0133681:	d3 e0                	shl    %cl,%eax
f0133683:	89 e9                	mov    %ebp,%ecx
f0133685:	d3 ea                	shr    %cl,%edx
f0133687:	09 d0                	or     %edx,%eax
f0133689:	89 e9                	mov    %ebp,%ecx
f013368b:	d3 eb                	shr    %cl,%ebx
f013368d:	89 da                	mov    %ebx,%edx
f013368f:	83 c4 1c             	add    $0x1c,%esp
f0133692:	5b                   	pop    %ebx
f0133693:	5e                   	pop    %esi
f0133694:	5f                   	pop    %edi
f0133695:	5d                   	pop    %ebp
f0133696:	c3                   	ret    
f0133697:	90                   	nop
f0133698:	89 fd                	mov    %edi,%ebp
f013369a:	85 ff                	test   %edi,%edi
f013369c:	75 0b                	jne    f01336a9 <__umoddi3+0xe9>
f013369e:	b8 01 00 00 00       	mov    $0x1,%eax
f01336a3:	31 d2                	xor    %edx,%edx
f01336a5:	f7 f7                	div    %edi
f01336a7:	89 c5                	mov    %eax,%ebp
f01336a9:	89 f0                	mov    %esi,%eax
f01336ab:	31 d2                	xor    %edx,%edx
f01336ad:	f7 f5                	div    %ebp
f01336af:	89 c8                	mov    %ecx,%eax
f01336b1:	f7 f5                	div    %ebp
f01336b3:	89 d0                	mov    %edx,%eax
f01336b5:	e9 44 ff ff ff       	jmp    f01335fe <__umoddi3+0x3e>
f01336ba:	66 90                	xchg   %ax,%ax
f01336bc:	89 c8                	mov    %ecx,%eax
f01336be:	89 f2                	mov    %esi,%edx
f01336c0:	83 c4 1c             	add    $0x1c,%esp
f01336c3:	5b                   	pop    %ebx
f01336c4:	5e                   	pop    %esi
f01336c5:	5f                   	pop    %edi
f01336c6:	5d                   	pop    %ebp
f01336c7:	c3                   	ret    
f01336c8:	3b 04 24             	cmp    (%esp),%eax
f01336cb:	72 06                	jb     f01336d3 <__umoddi3+0x113>
f01336cd:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01336d1:	77 0f                	ja     f01336e2 <__umoddi3+0x122>
f01336d3:	89 f2                	mov    %esi,%edx
f01336d5:	29 f9                	sub    %edi,%ecx
f01336d7:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01336db:	89 14 24             	mov    %edx,(%esp)
f01336de:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01336e2:	8b 44 24 04          	mov    0x4(%esp),%eax
f01336e6:	8b 14 24             	mov    (%esp),%edx
f01336e9:	83 c4 1c             	add    $0x1c,%esp
f01336ec:	5b                   	pop    %ebx
f01336ed:	5e                   	pop    %esi
f01336ee:	5f                   	pop    %edi
f01336ef:	5d                   	pop    %ebp
f01336f0:	c3                   	ret    
f01336f1:	8d 76 00             	lea    0x0(%esi),%esi
f01336f4:	2b 04 24             	sub    (%esp),%eax
f01336f7:	19 fa                	sbb    %edi,%edx
f01336f9:	89 d1                	mov    %edx,%ecx
f01336fb:	89 c6                	mov    %eax,%esi
f01336fd:	e9 71 ff ff ff       	jmp    f0133673 <__umoddi3+0xb3>
f0133702:	66 90                	xchg   %ax,%ax
f0133704:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133708:	72 ea                	jb     f01336f4 <__umoddi3+0x134>
f013370a:	89 d9                	mov    %ebx,%ecx
f013370c:	e9 62 ff ff ff       	jmp    f0133673 <__umoddi3+0xb3>
